/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

window.JSCompiler_renameProperty = function(prop, obj) { return prop; }

/** @namespace */
let Polymer;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


// unique global id for deduping mixins.
let dedupeId = 0;

/**
 * @constructor
 * @extends {Function}
 */
function MixinFunction(){}
/** @type {(WeakMap | undefined)} */
MixinFunction.prototype.__mixinApplications;
/** @type {(Object | undefined)} */
MixinFunction.prototype.__mixinSet;

const dedupingMixin = function(mixin) {
  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;
  if (!mixinApplications) {
    mixinApplications = new WeakMap();
    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;
  }
  // maintain a unique id for each mixin
  let mixinDedupeId = dedupeId++;
  function dedupingMixin(base) {
    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;
    if (baseSet && baseSet[mixinDedupeId]) {
      return base;
    }
    let map = mixinApplications;
    let extended = map.get(base);
    if (!extended) {
      extended = /** @type {!Function} */(mixin)(base);
      map.set(base, extended);
    }
    // copy inherited mixin set from the extended class, or the base class
    // NOTE: we avoid use of Set here because some browser (IE11)
    // cannot extend a base Set via the constructor.
    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);
    mixinSet[mixinDedupeId] = true;
    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;
    return extended;
  }

  return /** @type {T} */ (dedupingMixin);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = dedupingMixin;



/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return resolveCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return resolveUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return pathFromUrl; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


let CSS_URL_RX = /(url\()([^)]*)(\))/g;
let workingURL;
let resolveDoc;
/**
 * Resolves the given URL against the provided `baseUri'.
 *
 * @memberof Polymer.ResolveUrl
 * @param {string} url Input URL to resolve
 * @param {?string=} baseURI Base URI to resolve the URL against
 * @return {string} resolved URL
 */
function resolveUrl(url, baseURI) {
  // Lazy feature detection.
  if (workingURL === undefined) {
    workingURL = false;
    try {
      const u = new URL('b', 'http://a');
      u.pathname = 'c%20d';
      workingURL = (u.href === 'http://a/c%20d');
    } catch (e) {
      // silently fail
    }
  }
  if (!baseURI) {
    baseURI = document.baseURI || window.location.href;
  }
  if (workingURL) {
    return (new URL(url, baseURI)).href;
  }
  // Fallback to creating an anchor into a disconnected document.
  if (!resolveDoc) {
    resolveDoc = document.implementation.createHTMLDocument('temp');
    resolveDoc.base = resolveDoc.createElement('base');
    resolveDoc.head.appendChild(resolveDoc.base);
    resolveDoc.anchor = resolveDoc.createElement('a');
    resolveDoc.body.appendChild(resolveDoc.anchor);
  }
  resolveDoc.base.href = baseURI;
  resolveDoc.anchor.href = url;
  return resolveDoc.anchor.href || url;

}

/**
 * Resolves any relative URL's in the given CSS text against the provided
 * `ownerDocument`'s `baseURI`.
 *
 * @memberof Polymer.ResolveUrl
 * @param {string} cssText CSS text to process
 * @param {string} baseURI Base URI to resolve the URL against
 * @return {string} Processed CSS text with resolved URL's
 */
function resolveCss(cssText, baseURI) {
  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {
    return pre + '\'' +
      resolveUrl(url.replace(/["']/g, ''), baseURI) +
      '\'' + post;
  });
}

/**
 * Returns a path from a given `url`. The path includes the trailing
 * `/` from the url.
 *
 * @memberof Polymer.ResolveUrl
 * @param {string} url Input URL to transform
 * @return {string} resolved path
 */
function pathFromUrl(url) {
  return url.substring(0, url.lastIndexOf('/') + 1);
}






/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31), __webpack_require__(32)(module)))

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["dashToCamelCase"] = dashToCamelCase;
/* harmony export (immutable) */ __webpack_exports__["camelToDashCase"] = camelToDashCase;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


const caseMap = {};
const DASH_TO_CAMEL = /-[a-z]/g;
const CAMEL_TO_DASH = /([A-Z])/g;

function dashToCamelCase(dash) {
  return caseMap[dash] || (
    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,
      (m) => m[1].toUpperCase()
    )
  );
}

function camelToDashCase(camel) {
  return caseMap[camel] || (
    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()
  );
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


// Microtask implemented using Mutation Observer
let microtaskCurrHandle = 0;
let microtaskLastHandle = 0;
let microtaskCallbacks = [];
let microtaskNodeContent = 0;
let microtaskNode = document.createTextNode('');
new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});

function microtaskFlush() {
  const len = microtaskCallbacks.length;
  for (let i = 0; i < len; i++) {
    let cb = microtaskCallbacks[i];
    if (cb) {
      try {
        cb();
      } catch (e) {
        setTimeout(() => { throw e; });
      }
    }
  }
  microtaskCallbacks.splice(0, len);
  microtaskLastHandle += len;
}

const timeOut = {
  /**
   * Returns a sub-module with the async interface providing the provided
   * delay.
   *
   * @memberof Polymer.Async.timeOut
   * @param {number=} delay Time to wait before calling callbacks in ms
   * @return {!AsyncInterface} An async timeout interface
   */
  after(delay) {
    return {
      run(fn) { return window.setTimeout(fn, delay); },
      cancel(handle) {
        window.clearTimeout(handle);
      }
    };
  },
  /**
   * Enqueues a function called in the next task.
   *
   * @memberof Polymer.Async.timeOut
   * @param {!Function} fn Callback to run
   * @param {number=} delay Delay in milliseconds
   * @return {number} Handle used for canceling task
   */
  run(fn, delay) {
    return window.setTimeout(fn, delay);
  },
  /**
   * Cancels a previously enqueued `timeOut` callback.
   *
   * @memberof Polymer.Async.timeOut
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */
  cancel(handle) {
    window.clearTimeout(handle);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = timeOut;


const animationFrame = {
  /**
   * Enqueues a function called at `requestAnimationFrame` timing.
   *
   * @memberof Polymer.Async.animationFrame
   * @param {function(number):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */
  run(fn) {
    return window.requestAnimationFrame(fn);
  },
  /**
   * Cancels a previously enqueued `animationFrame` callback.
   *
   * @memberof Polymer.Async.animationFrame
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */
  cancel(handle) {
    window.cancelAnimationFrame(handle);
  }
};
/* unused harmony export animationFrame */


const idlePeriod = {
  /**
   * Enqueues a function called at `requestIdleCallback` timing.
   *
   * @memberof Polymer.Async.idlePeriod
   * @param {function(!IdleDeadline):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */
  run(fn) {
    return window.requestIdleCallback ?
      window.requestIdleCallback(fn) :
      window.setTimeout(fn, 16);
  },
  /**
   * Cancels a previously enqueued `idlePeriod` callback.
   *
   * @memberof Polymer.Async.idlePeriod
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */
  cancel(handle) {
    window.cancelIdleCallback ?
      window.cancelIdleCallback(handle) :
      window.clearTimeout(handle);
  }
};
/* unused harmony export idlePeriod */


const microTask = {

  /**
   * Enqueues a function called at microtask timing.
   *
   * @memberof Polymer.Async.microTask
   * @param {!Function=} callback Callback to run
   * @return {number} Handle used for canceling task
   */
  run(callback) {
    microtaskNode.textContent = microtaskNodeContent++;
    microtaskCallbacks.push(callback);
    return microtaskCurrHandle++;
  },

  /**
   * Cancels a previously enqueued `microTask` callback.
   *
   * @memberof Polymer.Async.microTask
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */
  cancel(handle) {
    const idx = handle - microtaskLastHandle;
    if (idx >= 0) {
      if (!microtaskCallbacks[idx]) {
        throw new Error('invalid async handle: ' + handle);
      }
      microtaskCallbacks[idx] = null;
    }
  }

};
/* harmony export (immutable) */ __webpack_exports__["a"] = microTask;



/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(48);
} else {
  module.exports = __webpack_require__(49);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyFunction = __webpack_require__(3);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Element", function() { return Element; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_mixins_element_mixin_js__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_utils_html_tag_js__ = __webpack_require__(42);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_utils_html_tag_js__["a"]; });



/**
 * Base class that provides the core API for Polymer's meta-programming
 * features including template stamping, data-binding, attribute deserialization,
 * and property change observation.
 *
 * @customElement
 * @polymer
 * @memberof Polymer
 * @constructor
 * @implements {Polymer_ElementMixin}
 * @extends HTMLElement
 * @appliesMixin Polymer.ElementMixin
 * @summary Custom element base class that provides the core API for Polymer's
 *   key meta-programming features including template stamping, data-binding,
 *   attribute deserialization, and property change observation
 */
const Element = Object(__WEBPACK_IMPORTED_MODULE_0__lib_mixins_element_mixin_js__["a" /* ElementMixin */])(HTMLElement);




/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rootPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return sanitizeDOMValue; });
/* unused harmony export passiveTouchGestures */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__resolve_url_js__ = __webpack_require__(4);


const useShadow = !(window.ShadyDOM);
/* unused harmony export useShadow */

const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);
/* unused harmony export useNativeCSSProperties */

const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);
/* unused harmony export useNativeCustomElements */



/**
 * Globally settable property that is automatically assigned to
 * `Polymer.ElementMixin` instances, useful for binding in templates to
 * make URL's relative to an application's root.  Defaults to the main
 * document URL, but can be overridden by users.  It may be useful to set
 * `Polymer.rootPath` to provide a stable application mount path when
 * using client side routing.
 *
 * @memberof Polymer
 */
let rootPath = undefined ||
  Object(__WEBPACK_IMPORTED_MODULE_1__resolve_url_js__["a" /* pathFromUrl */])(document.baseURI || window.location.href);



const setRootPath = function(path) {
  rootPath = path;
};
/* unused harmony export setRootPath */


/**
 * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:
 *
 *     Polymer = {
 *       sanitizeDOMValue: function(value, name, type, node) { ... }
 *     }
 *
 * Where:
 *
 * `value` is the value to sanitize.
 * `name` is the name of an attribute or property (for example, href).
 * `type` indicates where the value is being inserted: one of property, attribute, or text.
 * `node` is the node where the value is being inserted.
 *
 * @type {(function(*,string,string,Node):*)|undefined}
 * @memberof Polymer
 */
let sanitizeDOMValue = undefined;



const setSanitizeDOMValue = function(newSanitizeDOMValue) {
  sanitizeDOMValue = newSanitizeDOMValue;
};
/* unused harmony export setSanitizeDOMValue */


/**
 * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
 * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
 * scrolling performance.
 * Defaults to `false` for backwards compatibility.
 *
 * @memberof Polymer
 */
let passiveTouchGestures = false;



const setPassiveTouchGestures = function(usePassive) {
  passiveTouchGestures = usePassive;
};
/* unused harmony export setPassiveTouchGestures */



/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_path_js__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_case_map_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__property_accessors_js__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__template_stamp_js__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_settings_js__ = __webpack_require__(14);









/** @const {Object} */
const CaseMap = __WEBPACK_IMPORTED_MODULE_3__utils_case_map_js__;

// Monotonically increasing unique ID used for de-duping effects triggered
// from multiple properties in the same turn
let dedupeId = 0;

/**
 * Property effect types; effects are stored on the prototype using these keys
 * @enum {string}
 */
const TYPES = {
  COMPUTE: '__computeEffects',
  REFLECT: '__reflectEffects',
  NOTIFY: '__notifyEffects',
  PROPAGATE: '__propagateEffects',
  OBSERVE: '__observeEffects',
  READ_ONLY: '__readOnly'
};

/**
 * @typedef {{
 * name: (string | undefined),
 * structured: (boolean | undefined),
 * wildcard: (boolean | undefined)
 * }}
 */
let DataTrigger; //eslint-disable-line no-unused-vars

/**
 * @typedef {{
 * info: ?,
 * trigger: (!DataTrigger | undefined),
 * fn: (!Function | undefined)
 * }}
 */
let DataEffect; //eslint-disable-line no-unused-vars

let PropertyEffectsType; //eslint-disable-line no-unused-vars

/**
 * Ensures that the model has an own-property map of effects for the given type.
 * The model may be a prototype or an instance.
 *
 * Property effects are stored as arrays of effects by property in a map,
 * by named type on the model. e.g.
 *
 *   __computeEffects: {
 *     foo: [ ... ],
 *     bar: [ ... ]
 *   }
 *
 * If the model does not yet have an effect map for the type, one is created
 * and returned.  If it does, but it is not an own property (i.e. the
 * prototype had effects), the the map is deeply cloned and the copy is
 * set on the model and returned, ready for new effects to be added.
 *
 * @param {Object} model Prototype or instance
 * @param {string} type Property effect type
 * @return {Object} The own-property map of effects for the given type
 * @private
 */
function ensureOwnEffectMap(model, type) {
  let effects = model[type];
  if (!effects) {
    effects = model[type] = {};
  } else if (!model.hasOwnProperty(type)) {
    effects = model[type] = Object.create(model[type]);
    for (let p in effects) {
      let protoFx = effects[p];
      let instFx = effects[p] = Array(protoFx.length);
      for (let i=0; i<protoFx.length; i++) {
        instFx[i] = protoFx[i];
      }
    }
  }
  return effects;
}

// -- effects ----------------------------------------------

/**
 * Runs all effects of a given type for the given set of property changes
 * on an instance.
 *
 * @param {!PropertyEffectsType} inst The instance with effects to run
 * @param {Object} effects Object map of property-to-Array of effects
 * @param {Object} props Bag of current property changes
 * @param {Object=} oldProps Bag of previous values for changed properties
 * @param {boolean=} hasPaths True with `props` contains one or more paths
 * @param {*=} extraArgs Additional metadata to pass to effect function
 * @return {boolean} True if an effect ran for this property
 * @private
 */
function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {
  if (effects) {
    let ran = false;
    let id = dedupeId++;
    for (let prop in props) {
      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {
        ran = true;
      }
    }
    return ran;
  }
  return false;
}

/**
 * Runs a list of effects for a given property.
 *
 * @param {!PropertyEffectsType} inst The instance with effects to run
 * @param {Object} effects Object map of property-to-Array of effects
 * @param {number} dedupeId Counter used for de-duping effects
 * @param {string} prop Name of changed property
 * @param {*} props Changed properties
 * @param {*} oldProps Old properties
 * @param {boolean=} hasPaths True with `props` contains one or more paths
 * @param {*=} extraArgs Additional metadata to pass to effect function
 * @return {boolean} True if an effect ran for this property
 * @private
 */
function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {
  let ran = false;
  let rootProperty = hasPaths ? Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["g" /* root */])(prop) : prop;
  let fxs = effects[rootProperty];
  if (fxs) {
    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {
      if ((!fx.info || fx.info.lastRun !== dedupeId) &&
          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {
        if (fx.info) {
          fx.info.lastRun = dedupeId;
        }
        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);
        ran = true;
      }
    }
  }
  return ran;
}

/**
 * Determines whether a property/path that has changed matches the trigger
 * criteria for an effect.  A trigger is a descriptor with the following
 * structure, which matches the descriptors returned from `parseArg`.
 * e.g. for `foo.bar.*`:
 * ```
 * trigger: {
 *   name: 'a.b',
 *   structured: true,
 *   wildcard: true
 * }
 * ```
 * If no trigger is given, the path is deemed to match.
 *
 * @param {string} path Path or property that changed
 * @param {DataTrigger} trigger Descriptor
 * @return {boolean} Whether the path matched the trigger
 */
function pathMatchesTrigger(path, trigger) {
  if (trigger) {
    let triggerPath = trigger.name;
    return (triggerPath == path) ||
      (trigger.structured && Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["b" /* isAncestor */])(triggerPath, path)) ||
      (trigger.wildcard && Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["c" /* isDescendant */])(triggerPath, path));
  } else {
    return true;
  }
}

/**
 * Implements the "observer" effect.
 *
 * Calls the method with `info.methodName` on the instance, passing the
 * new and old values.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} property Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @return {void}
 * @private
 */
function runObserverEffect(inst, property, props, oldProps, info) {
  let fn = typeof info.method === "string" ? inst[info.method] : info.method;
  let changedProp = info.property;
  if (fn) {
    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);
  } else if (!info.dynamicFn) {
    console.warn('observer method `' + info.method + '` not defined');
  }
}

/**
 * Runs "notify" effects for a set of changed properties.
 *
 * This method differs from the generic `runEffects` method in that it
 * will dispatch path notification events in the case that the property
 * changed was a path and the root property for that path didn't have a
 * "notify" effect.  This is to maintain 1.0 behavior that did not require
 * `notify: true` to ensure object sub-property notifications were
 * sent.
 *
 * @param {!PropertyEffectsType} inst The instance with effects to run
 * @param {Object} notifyProps Bag of properties to notify
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {boolean} hasPaths True with `props` contains one or more paths
 * @return {void}
 * @private
 */
function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {
  // Notify
  let fxs = inst[TYPES.NOTIFY];
  let notified;
  let id = dedupeId++;
  // Try normal notify effects; if none, fall back to try path notification
  for (let prop in notifyProps) {
    if (notifyProps[prop]) {
      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {
        notified = true;
      } else if (hasPaths && notifyPath(inst, prop, props)) {
        notified = true;
      }
    }
  }
  // Flush host if we actually notified and host was batching
  // And the host has already initialized clients; this prevents
  // an issue with a host observing data changes before clients are ready.
  let host;
  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {
    host._invalidateProperties();
  }
}

/**
 * Dispatches {property}-changed events with path information in the detail
 * object to indicate a sub-path of the property was changed.
 *
 * @param {!PropertyEffectsType} inst The element from which to fire the event
 * @param {string} path The path that was changed
 * @param {Object} props Bag of current property changes
 * @return {boolean} Returns true if the path was notified
 * @private
 */
function notifyPath(inst, path, props) {
  let rootProperty = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["g" /* root */])(path);
  if (rootProperty !== path) {
    let eventName = Object(__WEBPACK_IMPORTED_MODULE_3__utils_case_map_js__["camelToDashCase"])(rootProperty) + '-changed';
    dispatchNotifyEvent(inst, eventName, props[path], path);
    return true;
  }
  return false;
}

/**
 * Dispatches {property}-changed events to indicate a property (or path)
 * changed.
 *
 * @param {!PropertyEffectsType} inst The element from which to fire the event
 * @param {string} eventName The name of the event to send ('{property}-changed')
 * @param {*} value The value of the changed property
 * @param {string | null | undefined} path If a sub-path of this property changed, the path
 *   that changed (optional).
 * @return {void}
 * @private
 * @suppress {invalidCasts}
 */
function dispatchNotifyEvent(inst, eventName, value, path) {
  let detail = {
    value: value,
    queueProperty: true
  };
  if (path) {
    detail.path = path;
  }
  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));
}

/**
 * Implements the "notify" effect.
 *
 * Dispatches a non-bubbling event named `info.eventName` on the instance
 * with a detail object containing the new `value`.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} property Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @param {boolean} hasPaths True with `props` contains one or more paths
 * @return {void}
 * @private
 */
function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {
  let rootProperty = hasPaths ? Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["g" /* root */])(property) : property;
  let path = rootProperty != property ? property : null;
  let value = path ? Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(inst, path) : inst.__data[property];
  if (path && value === undefined) {
    value = props[property];  // specifically for .splices
  }
  dispatchNotifyEvent(inst, info.eventName, value, path);
}

/**
 * Handler function for 2-way notification events. Receives context
 * information captured in the `addNotifyListener` closure from the
 * `__notifyListeners` metadata.
 *
 * Sets the value of the notified property to the host property or path.  If
 * the event contained path information, translate that path to the host
 * scope's name for that path first.
 *
 * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
 * @param {!PropertyEffectsType} inst Host element instance handling the notification event
 * @param {string} fromProp Child element property that was bound
 * @param {string} toPath Host property/path that was bound
 * @param {boolean} negate Whether the binding was negated
 * @return {void}
 * @private
 */
function handleNotification(event, inst, fromProp, toPath, negate) {
  let value;
  let detail = /** @type {Object} */(event.detail);
  let fromPath = detail && detail.path;
  if (fromPath) {
    toPath = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["i" /* translate */])(fromProp, toPath, fromPath);
    value = detail && detail.value;
  } else {
    value = event.target[fromProp];
  }
  value = negate ? !value : value;
  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {
    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))
      && (!detail || !detail.queueProperty)) {
      inst._invalidateProperties();
    }
  }
}

/**
 * Implements the "reflect" effect.
 *
 * Sets the attribute named `info.attrName` to the given property value.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} property Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @return {void}
 * @private
 */
function runReflectEffect(inst, property, props, oldProps, info) {
  let value = inst.__data[property];
  if (__WEBPACK_IMPORTED_MODULE_6__utils_settings_js__["b" /* sanitizeDOMValue */]) {
    value = Object(__WEBPACK_IMPORTED_MODULE_6__utils_settings_js__["b" /* sanitizeDOMValue */])(value, info.attrName, 'attribute', /** @type {Node} */(inst));
  }
  inst._propertyToAttribute(property, info.attrName, value);
}

/**
 * Runs "computed" effects for a set of changed properties.
 *
 * This method differs from the generic `runEffects` method in that it
 * continues to run computed effects based on the output of each pass until
 * there are no more newly computed properties.  This ensures that all
 * properties that will be computed by the initial set of changes are
 * computed before other effects (binding propagation, observers, and notify)
 * run.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {!Object} changedProps Bag of changed properties
 * @param {!Object} oldProps Bag of previous values for changed properties
 * @param {boolean} hasPaths True with `props` contains one or more paths
 * @return {void}
 * @private
 */
function runComputedEffects(inst, changedProps, oldProps, hasPaths) {
  let computeEffects = inst[TYPES.COMPUTE];
  if (computeEffects) {
    let inputProps = changedProps;
    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {
      Object.assign(oldProps, inst.__dataOld);
      Object.assign(changedProps, inst.__dataPending);
      inputProps = inst.__dataPending;
      inst.__dataPending = null;
    }
  }
}

/**
 * Implements the "computed property" effect by running the method with the
 * values of the arguments specified in the `info` object and setting the
 * return value to the computed property specified.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} property Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @return {void}
 * @private
 */
function runComputedEffect(inst, property, props, oldProps, info) {
  let result = runMethodEffect(inst, property, props, oldProps, info);
  let computedProp = info.methodInfo;
  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {
    inst._setPendingProperty(computedProp, result, true);
  } else {
    inst[computedProp] = result;
  }
}

/**
 * Computes path changes based on path links set up using the `linkPaths`
 * API.
 *
 * @param {!PropertyEffectsType} inst The instance whose props are changing
 * @param {string | !Array<(string|number)>} path Path that has changed
 * @param {*} value Value of changed path
 * @return {void}
 * @private
 */
function computeLinkedPaths(inst, path, value) {
  let links = inst.__dataLinkedPaths;
  if (links) {
    let link;
    for (let a in links) {
      let b = links[a];
      if (Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["c" /* isDescendant */])(a, path)) {
        link = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["i" /* translate */])(a, b, path);
        inst._setPendingPropertyOrPath(link, value, true, true);
      } else if (Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["c" /* isDescendant */])(b, path)) {
        link = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["i" /* translate */])(b, a, path);
        inst._setPendingPropertyOrPath(link, value, true, true);
      }
    }
  }
}

// -- bindings ----------------------------------------------

/**
 * Adds binding metadata to the current `nodeInfo`, and binding effects
 * for all part dependencies to `templateInfo`.
 *
 * @param {Function} constructor Class that `_parseTemplate` is currently
 *   running on
 * @param {TemplateInfo} templateInfo Template metadata for current template
 * @param {NodeInfo} nodeInfo Node metadata for current template node
 * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
 * @param {string} target Target property name
 * @param {!Array<!BindingPart>} parts Array of binding part metadata
 * @param {string=} literal Literal text surrounding binding parts (specified
 *   only for 'property' bindings, since these must be initialized as part
 *   of boot-up)
 * @return {void}
 * @private
 */
function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {
  // Create binding metadata and add to nodeInfo
  nodeInfo.bindings = nodeInfo.bindings || [];
  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };
  nodeInfo.bindings.push(binding);
  // Add listener info to binding metadata
  if (shouldAddListener(binding)) {
    let {event, negate} = binding.parts[0];
    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');
    binding.listenerNegate = negate;
  }
  // Add "propagate" property effects to templateInfo
  let index = templateInfo.nodeInfoList.length;
  for (let i=0; i<binding.parts.length; i++) {
    let part = binding.parts[i];
    part.compoundIndex = i;
    addEffectForBindingPart(constructor, templateInfo, binding, part, index);
  }
}

/**
 * Adds property effects to the given `templateInfo` for the given binding
 * part.
 *
 * @param {Function} constructor Class that `_parseTemplate` is currently
 *   running on
 * @param {TemplateInfo} templateInfo Template metadata for current template
 * @param {!Binding} binding Binding metadata
 * @param {!BindingPart} part Binding part metadata
 * @param {number} index Index into `nodeInfoList` for this node
 * @return {void}
 */
function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {
  if (!part.literal) {
    if (binding.kind === 'attribute' && binding.target[0] === '-') {
      console.warn('Cannot set attribute ' + binding.target +
        ' because "-" is not a valid attribute starting character');
    } else {
      let dependencies = part.dependencies;
      let info = { index, binding, part, evaluator: constructor };
      for (let j=0; j<dependencies.length; j++) {
        let trigger = dependencies[j];
        if (typeof trigger == 'string') {
          trigger = parseArg(trigger);
          trigger.wildcard = true;
        }
        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {
          fn: runBindingEffect,
          info, trigger
        });
      }
    }
  }
}

/**
 * Implements the "binding" (property/path binding) effect.
 *
 * Note that binding syntax is overridable via `_parseBindings` and
 * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
 * non-literal parts returned from `_parseBindings`.  However,
 * there is no support for _path_ bindings via custom binding parts,
 * as this is specific to Polymer's path binding syntax.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} path Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @param {boolean} hasPaths True with `props` contains one or more paths
 * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
 *   metadata
 * @return {void}
 * @private
 */
function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {
  let node = nodeList[info.index];
  let binding = info.binding;
  let part = info.part;
  // Subpath notification: transform path and set to client
  // e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
  if (hasPaths && part.source && (path.length > part.source.length) &&
      (binding.kind == 'property') && !binding.isCompound &&
      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {
    let value = props[path];
    path = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["i" /* translate */])(part.source, binding.target, path);
    if (node._setPendingPropertyOrPath(path, value, false, true)) {
      inst._enqueueClient(node);
    }
  } else {
    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);
    // Propagate value to child
    applyBindingValue(inst, node, binding, part, value);
  }
}

/**
 * Sets the value for an "binding" (binding) effect to a node,
 * either as a property or attribute.
 *
 * @param {!PropertyEffectsType} inst The instance owning the binding effect
 * @param {Node} node Target node for binding
 * @param {!Binding} binding Binding metadata
 * @param {!BindingPart} part Binding part metadata
 * @param {*} value Value to set
 * @return {void}
 * @private
 */
function applyBindingValue(inst, node, binding, part, value) {
  value = computeBindingValue(node, value, binding, part);
  if (__WEBPACK_IMPORTED_MODULE_6__utils_settings_js__["b" /* sanitizeDOMValue */]) {
    value = Object(__WEBPACK_IMPORTED_MODULE_6__utils_settings_js__["b" /* sanitizeDOMValue */])(value, binding.target, binding.kind, node);
  }
  if (binding.kind == 'attribute') {
    // Attribute binding
    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);
  } else {
    // Property binding
    let prop = binding.target;
    if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {
      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {
        if (node._setPendingProperty(prop, value)) {
          inst._enqueueClient(node);
        }
      }
    } else  {
      inst._setUnmanagedPropertyToNode(node, prop, value);
    }
  }
}

/**
 * Transforms an "binding" effect value based on compound & negation
 * effect metadata, as well as handling for special-case properties
 *
 * @param {Node} node Node the value will be set to
 * @param {*} value Value to set
 * @param {!Binding} binding Binding metadata
 * @param {!BindingPart} part Binding part metadata
 * @return {*} Transformed value to set
 * @private
 */
function computeBindingValue(node, value, binding, part) {
  if (binding.isCompound) {
    let storage = node.__dataCompoundStorage[binding.target];
    storage[part.compoundIndex] = value;
    value = storage.join('');
  }
  if (binding.kind !== 'attribute') {
    // Some browsers serialize `undefined` to `"undefined"`
    if (binding.target === 'textContent' ||
        (binding.target === 'value' &&
          (node.localName === 'input' || node.localName === 'textarea'))) {
      value = value == undefined ? '' : value;
    }
  }
  return value;
}

/**
 * Returns true if a binding's metadata meets all the requirements to allow
 * 2-way binding, and therefore a `<property>-changed` event listener should be
 * added:
 * - used curly braces
 * - is a property (not attribute) binding
 * - is not a textContent binding
 * - is not compound
 *
 * @param {!Binding} binding Binding metadata
 * @return {boolean} True if 2-way listener should be added
 * @private
 */
function shouldAddListener(binding) {
  return Boolean(binding.target) &&
         binding.kind != 'attribute' &&
         binding.kind != 'text' &&
         !binding.isCompound &&
         binding.parts[0].mode === '{';
}

/**
 * Setup compound binding storage structures, notify listeners, and dataHost
 * references onto the bound nodeList.
 *
 * @param {!PropertyEffectsType} inst Instance that bas been previously bound
 * @param {TemplateInfo} templateInfo Template metadata
 * @return {void}
 * @private
 */
function setupBindings(inst, templateInfo) {
  // Setup compound storage, dataHost, and notify listeners
  let {nodeList, nodeInfoList} = templateInfo;
  if (nodeInfoList.length) {
    for (let i=0; i < nodeInfoList.length; i++) {
      let info = nodeInfoList[i];
      let node = nodeList[i];
      let bindings = info.bindings;
      if (bindings) {
        for (let i=0; i<bindings.length; i++) {
          let binding = bindings[i];
          setupCompoundStorage(node, binding);
          addNotifyListener(node, inst, binding);
        }
      }
      node.__dataHost = inst;
    }
  }
}

/**
 * Initializes `__dataCompoundStorage` local storage on a bound node with
 * initial literal data for compound bindings, and sets the joined
 * literal parts to the bound property.
 *
 * When changes to compound parts occur, they are first set into the compound
 * storage array for that property, and then the array is joined to result in
 * the final value set to the property/attribute.
 *
 * @param {Node} node Bound node to initialize
 * @param {Binding} binding Binding metadata
 * @return {void}
 * @private
 */
function setupCompoundStorage(node, binding) {
  if (binding.isCompound) {
    // Create compound storage map
    let storage = node.__dataCompoundStorage ||
      (node.__dataCompoundStorage = {});
    let parts = binding.parts;
    // Copy literals from parts into storage for this binding
    let literals = new Array(parts.length);
    for (let j=0; j<parts.length; j++) {
      literals[j] = parts[j].literal;
    }
    let target = binding.target;
    storage[target] = literals;
    // Configure properties with their literal parts
    if (binding.literal && binding.kind == 'property') {
      node[target] = binding.literal;
    }
  }
}

/**
 * Adds a 2-way binding notification event listener to the node specified
 *
 * @param {Object} node Child element to add listener to
 * @param {!PropertyEffectsType} inst Host element instance to handle notification event
 * @param {Binding} binding Binding metadata
 * @return {void}
 * @private
 */
function addNotifyListener(node, inst, binding) {
  if (binding.listenerEvent) {
    let part = binding.parts[0];
    node.addEventListener(binding.listenerEvent, function(e) {
      handleNotification(e, inst, binding.target, part.source, part.negate);
    });
  }
}

// -- for method-based effects (complexObserver & computed) --------------

/**
 * Adds property effects for each argument in the method signature (and
 * optionally, for the method name if `dynamic` is true) that calls the
 * provided effect function.
 *
 * @param {Element | Object} model Prototype or instance
 * @param {!MethodSignature} sig Method signature metadata
 * @param {string} type Type of property effect to add
 * @param {Function} effectFn Function to run when arguments change
 * @param {*=} methodInfo Effect-specific information to be included in
 *   method effect metadata
 * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
 *   method names should be included as a dependency to the effect. Note,
 *   defaults to true if the signature is static (sig.static is true).
 * @return {void}
 * @private
 */
function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {
  dynamicFn = sig.static || (dynamicFn &&
    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));
  let info = {
    methodName: sig.methodName,
    args: sig.args,
    methodInfo,
    dynamicFn
  };
  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {
    if (!arg.literal) {
      model._addPropertyEffect(arg.rootProperty, type, {
        fn: effectFn, info: info, trigger: arg
      });
    }
  }
  if (dynamicFn) {
    model._addPropertyEffect(sig.methodName, type, {
      fn: effectFn, info: info
    });
  }
}

/**
 * Calls a method with arguments marshaled from properties on the instance
 * based on the method signature contained in the effect metadata.
 *
 * Multi-property observers, computed properties, and inline computing
 * functions call this function to invoke the method, then use the return
 * value accordingly.
 *
 * @param {!PropertyEffectsType} inst The instance the effect will be run on
 * @param {string} property Name of property
 * @param {Object} props Bag of current property changes
 * @param {Object} oldProps Bag of previous values for changed properties
 * @param {?} info Effect metadata
 * @return {*} Returns the return value from the method invocation
 * @private
 */
function runMethodEffect(inst, property, props, oldProps, info) {
  // Instances can optionally have a _methodHost which allows redirecting where
  // to find methods. Currently used by `templatize`.
  let context = inst._methodHost || inst;
  let fn = context[info.methodName];
  if (fn) {
    let args = marshalArgs(inst.__data, info.args, property, props);
    return fn.apply(context, args);
  } else if (!info.dynamicFn) {
    console.warn('method `' + info.methodName + '` not defined');
  }
}

const emptyArray = [];

// Regular expressions used for binding
const IDENT  = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')';
const NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';
const SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')';
const DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')';
const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';
const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\s*' + ')';
const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\s*' + ARGUMENT + ')*' + ')';
const ARGUMENT_LIST = '(?:' + '\\(\\s*' +
                              '(?:' + ARGUMENTS + '?' + ')' +
                            '\\)\\s*' + ')';
const BINDING = '(' + IDENT + '\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3
const OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*';
const CLOSE_BRACKET = '(?:]]|}})';
const NEGATE = '(?:(!)\\s*)?'; // Group 2
const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;
const bindingRegex = new RegExp(EXPRESSION, "g");

/**
 * Create a string from binding parts of all the literal parts
 *
 * @param {!Array<BindingPart>} parts All parts to stringify
 * @return {string} String made from the literal parts
 */
function literalFromParts(parts) {
  let s = '';
  for (let i=0; i<parts.length; i++) {
    let literal = parts[i].literal;
    s += literal || '';
  }
  return s;
}

/**
 * Parses an expression string for a method signature, and returns a metadata
 * describing the method in terms of `methodName`, `static` (whether all the
 * arguments are literals), and an array of `args`
 *
 * @param {string} expression The expression to parse
 * @return {?MethodSignature} The method metadata object if a method expression was
 *   found, otherwise `undefined`
 * @private
 */
function parseMethod(expression) {
  // tries to match valid javascript property names
  let m = expression.match(/([^\s]+?)\(([\s\S]*)\)/);
  if (m) {
    let methodName = m[1];
    let sig = { methodName, static: true, args: emptyArray };
    if (m[2].trim()) {
      // replace escaped commas with comma entity, split on un-escaped commas
      let args = m[2].replace(/\\,/g, '&comma;').split(',');
      return parseArgs(args, sig);
    } else {
      return sig;
    }
  }
  return null;
}

/**
 * Parses an array of arguments and sets the `args` property of the supplied
 * signature metadata object. Sets the `static` property to false if any
 * argument is a non-literal.
 *
 * @param {!Array<string>} argList Array of argument names
 * @param {!MethodSignature} sig Method signature metadata object
 * @return {!MethodSignature} The updated signature metadata object
 * @private
 */
function parseArgs(argList, sig) {
  sig.args = argList.map(function(rawArg) {
    let arg = parseArg(rawArg);
    if (!arg.literal) {
      sig.static = false;
    }
    return arg;
  }, this);
  return sig;
}

/**
 * Parses an individual argument, and returns an argument metadata object
 * with the following fields:
 *
 *   {
 *     value: 'prop',        // property/path or literal value
 *     literal: false,       // whether argument is a literal
 *     structured: false,    // whether the property is a path
 *     rootProperty: 'prop', // the root property of the path
 *     wildcard: false       // whether the argument was a wildcard '.*' path
 *   }
 *
 * @param {string} rawArg The string value of the argument
 * @return {!MethodArg} Argument metadata object
 * @private
 */
function parseArg(rawArg) {
  // clean up whitespace
  let arg = rawArg.trim()
    // replace comma entity with comma
    .replace(/&comma;/g, ',')
    // repair extra escape sequences; note only commas strictly need
    // escaping, but we allow any other char to be escaped since its
    // likely users will do this
    .replace(/\\(.)/g, '\$1')
    ;
  // basic argument descriptor
  let a = {
    name: arg,
    value: '',
    literal: false
  };
  // detect literal value (must be String or Number)
  let fc = arg[0];
  if (fc === '-') {
    fc = arg[1];
  }
  if (fc >= '0' && fc <= '9') {
    fc = '#';
  }
  switch(fc) {
    case "'":
    case '"':
      a.value = arg.slice(1, -1);
      a.literal = true;
      break;
    case '#':
      a.value = Number(arg);
      a.literal = true;
      break;
  }
  // if not literal, look for structured path
  if (!a.literal) {
    a.rootProperty = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["g" /* root */])(arg);
    // detect structured path (has dots)
    a.structured = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["d" /* isPath */])(arg);
    if (a.structured) {
      a.wildcard = (arg.slice(-2) == '.*');
      if (a.wildcard) {
        a.name = arg.slice(0, -2);
      }
    }
  }
  return a;
}

/**
 * Gather the argument values for a method specified in the provided array
 * of argument metadata.
 *
 * The `path` and `value` arguments are used to fill in wildcard descriptor
 * when the method is being called as a result of a path notification.
 *
 * @param {Object} data Instance data storage object to read properties from
 * @param {!Array<!MethodArg>} args Array of argument metadata
 * @param {string} path Property/path name that triggered the method effect
 * @param {Object} props Bag of current property changes
 * @return {Array<*>} Array of argument values
 * @private
 */
function marshalArgs(data, args, path, props) {
  let values = [];
  for (let i=0, l=args.length; i<l; i++) {
    let arg = args[i];
    let name = arg.name;
    let v;
    if (arg.literal) {
      v = arg.value;
    } else {
      if (arg.structured) {
        v = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(data, name);
        // when data is not stored e.g. `splices`
        if (v === undefined) {
          v = props[name];
        }
      } else {
        v = data[name];
      }
    }
    if (arg.wildcard) {
      // Only send the actual path changed info if the change that
      // caused the observer to run matched the wildcard
      let baseChanged = (name.indexOf(path + '.') === 0);
      let matches = (path.indexOf(name) === 0 && !baseChanged);
      values[i] = {
        path: matches ? path : name,
        value: matches ? props[path] : v,
        base: v
      };
    } else {
      values[i] = v;
    }
  }
  return values;
}

// data api

/**
 * Sends array splice notifications (`.splices` and `.length`)
 *
 * Note: this implementation only accepts normalized paths
 *
 * @param {!PropertyEffectsType} inst Instance to send notifications to
 * @param {Array} array The array the mutations occurred on
 * @param {string} path The path to the array that was mutated
 * @param {Array} splices Array of splice records
 * @return {void}
 * @private
 */
function notifySplices(inst, array, path, splices) {
  let splicesPath = path + '.splices';
  inst.notifyPath(splicesPath, { indexSplices: splices });
  inst.notifyPath(path + '.length', array.length);
  // Null here to allow potentially large splice records to be GC'ed.
  inst.__data[splicesPath] = {indexSplices: null};
}

/**
 * Creates a splice record and sends an array splice notification for
 * the described mutation
 *
 * Note: this implementation only accepts normalized paths
 *
 * @param {!PropertyEffectsType} inst Instance to send notifications to
 * @param {Array} array The array the mutations occurred on
 * @param {string} path The path to the array that was mutated
 * @param {number} index Index at which the array mutation occurred
 * @param {number} addedCount Number of added items
 * @param {Array} removed Array of removed items
 * @return {void}
 * @private
 */
function notifySplice(inst, array, path, index, addedCount, removed) {
  notifySplices(inst, array, path, [{
    index: index,
    addedCount: addedCount,
    removed: removed,
    object: array,
    type: 'splice'
  }]);
}

/**
 * Returns an upper-cased version of the string.
 *
 * @param {string} name String to uppercase
 * @return {string} Uppercased string
 * @private
 */
function upper(name) {
  return name[0].toUpperCase() + name.substring(1);
}

const PropertyEffects = Object(__WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @constructor
   * @extends {superClass}
   * @implements {Polymer_PropertyAccessors}
   * @implements {Polymer_TemplateStamp}
   * @unrestricted
   */
  const propertyEffectsBase = Object(__WEBPACK_IMPORTED_MODULE_5__template_stamp_js__["a" /* TemplateStamp */])(Object(__WEBPACK_IMPORTED_MODULE_4__property_accessors_js__["a" /* PropertyAccessors */])(superClass));

  /**
   * @polymer
   * @mixinClass
   * @implements {Polymer_PropertyEffects}
   * @extends {propertyEffectsBase}
   * @unrestricted
   */
  class PropertyEffects extends propertyEffectsBase {

    constructor() {
      super();
      /** @type {number} */
      // NOTE: used to track re-entrant calls to `_flushProperties`
      // path changes dirty check against `__dataTemp` only during one "turn"
      // and are cleared when `__dataCounter` returns to 0.
      this.__dataCounter = 0;
      /** @type {boolean} */
      this.__dataClientsReady;
      /** @type {Array} */
      this.__dataPendingClients;
      /** @type {Object} */
      this.__dataToNotify;
      /** @type {Object} */
      this.__dataLinkedPaths;
      /** @type {boolean} */
      this.__dataHasPaths;
      /** @type {Object} */
      this.__dataCompoundStorage;
      /** @type {Polymer_PropertyEffects} */
      this.__dataHost;
      /** @type {!Object} */
      this.__dataTemp;
      /** @type {boolean} */
      this.__dataClientsInitialized;
      /** @type {!Object} */
      this.__data;
      /** @type {!Object} */
      this.__dataPending;
      /** @type {!Object} */
      this.__dataOld;
      /** @type {Object} */
      this.__computeEffects;
      /** @type {Object} */
      this.__reflectEffects;
      /** @type {Object} */
      this.__notifyEffects;
      /** @type {Object} */
      this.__propagateEffects;
      /** @type {Object} */
      this.__observeEffects;
      /** @type {Object} */
      this.__readOnly;
      /** @type {!TemplateInfo} */
      this.__templateInfo;
    }

    get PROPERTY_EFFECT_TYPES() {
      return TYPES;
    }

    /**
     * @return {void}
     */
    _initializeProperties() {
      super._initializeProperties();
      hostStack.registerHost(this);
      this.__dataClientsReady = false;
      this.__dataPendingClients = null;
      this.__dataToNotify = null;
      this.__dataLinkedPaths = null;
      this.__dataHasPaths = false;
      // May be set on instance prior to upgrade
      this.__dataCompoundStorage = this.__dataCompoundStorage || null;
      this.__dataHost = this.__dataHost || null;
      this.__dataTemp = {};
      this.__dataClientsInitialized = false;
    }

    /**
     * Overrides `Polymer.PropertyAccessors` implementation to provide a
     * more efficient implementation of initializing properties from
     * the prototype on the instance.
     *
     * @override
     * @param {Object} props Properties to initialize on the prototype
     * @return {void}
     */
    _initializeProtoProperties(props) {
      this.__data = Object.create(props);
      this.__dataPending = Object.create(props);
      this.__dataOld = {};
    }

    /**
     * Overrides `Polymer.PropertyAccessors` implementation to avoid setting
     * `_setProperty`'s `shouldNotify: true`.
     *
     * @override
     * @param {Object} props Properties to initialize on the instance
     * @return {void}
     */
    _initializeInstanceProperties(props) {
      let readOnly = this[TYPES.READ_ONLY];
      for (let prop in props) {
        if (!readOnly || !readOnly[prop]) {
          this.__dataPending = this.__dataPending || {};
          this.__dataOld = this.__dataOld || {};
          this.__data[prop] = this.__dataPending[prop] = props[prop];
        }
      }
    }

    // Prototype setup ----------------------------------------

    /**
     * Equivalent to static `addPropertyEffect` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */
    _addPropertyEffect(property, type, effect) {
      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);
      // effects are accumulated into arrays per property based on type
      let effects = ensureOwnEffectMap(this, type)[property];
      if (!effects) {
        effects = this[type][property] = [];
      }
      effects.push(effect);
    }

    /**
     * Removes the given property effect.
     *
     * @param {string} property Property the effect was associated with
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object to remove
     * @return {void}
     */
    _removePropertyEffect(property, type, effect) {
      let effects = ensureOwnEffectMap(this, type)[property];
      let idx = effects.indexOf(effect);
      if (idx >= 0) {
        effects.splice(idx, 1);
      }
    }

    /**
     * Returns whether the current prototype/instance has a property effect
     * of a certain type.
     *
     * @param {string} property Property name
     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @return {boolean} True if the prototype/instance has an effect of this type
     * @protected
     */
    _hasPropertyEffect(property, type) {
      let effects = this[type];
      return Boolean(effects && effects[property]);
    }

    /**
     * Returns whether the current prototype/instance has a "read only"
     * accessor for the given property.
     *
     * @param {string} property Property name
     * @return {boolean} True if the prototype/instance has an effect of this type
     * @protected
     */
    _hasReadOnlyEffect(property) {
      return this._hasPropertyEffect(property, TYPES.READ_ONLY);
    }

    /**
     * Returns whether the current prototype/instance has a "notify"
     * property effect for the given property.
     *
     * @param {string} property Property name
     * @return {boolean} True if the prototype/instance has an effect of this type
     * @protected
     */
    _hasNotifyEffect(property) {
      return this._hasPropertyEffect(property, TYPES.NOTIFY);
    }

    /**
     * Returns whether the current prototype/instance has a "reflect to attribute"
     * property effect for the given property.
     *
     * @param {string} property Property name
     * @return {boolean} True if the prototype/instance has an effect of this type
     * @protected
     */
    _hasReflectEffect(property) {
      return this._hasPropertyEffect(property, TYPES.REFLECT);
    }

    /**
     * Returns whether the current prototype/instance has a "computed"
     * property effect for the given property.
     *
     * @param {string} property Property name
     * @return {boolean} True if the prototype/instance has an effect of this type
     * @protected
     */
    _hasComputedEffect(property) {
      return this._hasPropertyEffect(property, TYPES.COMPUTE);
    }

    // Runtime ----------------------------------------

    /**
     * Sets a pending property or path.  If the root property of the path in
     * question had no accessor, the path is set, otherwise it is enqueued
     * via `_setPendingProperty`.
     *
     * This function isolates relatively expensive functionality necessary
     * for the public API (`set`, `setProperties`, `notifyPath`, and property
     * change listeners via {{...}} bindings), such that it is only done
     * when paths enter the system, and not at every propagation step.  It
     * also sets a `__dataHasPaths` flag on the instance which is used to
     * fast-path slower path-matching code in the property effects host paths.
     *
     * `path` can be a path string or array of path parts as accepted by the
     * public API.
     *
     * @param {string | !Array<number|string>} path Path to set
     * @param {*} value Value to set
     * @param {boolean=} shouldNotify Set to true if this change should
     *  cause a property notification event dispatch
     * @param {boolean=} isPathNotification If the path being set is a path
     *   notification of an already changed value, as opposed to a request
     *   to set and notify the change.  In the latter `false` case, a dirty
     *   check is performed and then the value is set to the path before
     *   enqueuing the pending property change.
     * @return {boolean} Returns true if the property/path was enqueued in
     *   the pending changes bag.
     * @protected
     */
    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {
      if (isPathNotification ||
          Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["g" /* root */])(Array.isArray(path) ? path[0] : path) !== path) {
        // Dirty check changes being set to a path against the actual object,
        // since this is the entry point for paths into the system; from here
        // the only dirty checks are against the `__dataTemp` cache to prevent
        // duplicate work in the same turn only. Note, if this was a notification
        // of a change already set to a path (isPathNotification: true),
        // we always let the change through and skip the `set` since it was
        // already dirty checked at the point of entry and the underlying
        // object has already been updated
        if (!isPathNotification) {
          let old = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path);
          path = /** @type {string} */ (Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["h" /* set */])(this, path, value));
          // Use property-accessor's simpler dirty check
          if (!path || !super._shouldPropertyChange(path, value, old)) {
            return false;
          }
        }
        this.__dataHasPaths = true;
        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {
          computeLinkedPaths(this, path, value);
          return true;
        }
      } else {
        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {
          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);
        } else {
          this[path] = value;
        }
      }
      return false;
    }

    /**
     * Applies a value to a non-Polymer element/node's property.
     *
     * The implementation makes a best-effort at binding interop:
     * Some native element properties have side-effects when
     * re-setting the same value (e.g. setting `<input>.value` resets the
     * cursor position), so we do a dirty-check before setting the value.
     * However, for better interop with non-Polymer custom elements that
     * accept objects, we explicitly re-set object changes coming from the
     * Polymer world (which may include deep object changes without the
     * top reference changing), erring on the side of providing more
     * information.
     *
     * Users may override this method to provide alternate approaches.
     *
     * @param {!Node} node The node to set a property on
     * @param {string} prop The property to set
     * @param {*} value The value to set
     * @return {void}
     * @protected
     */
    _setUnmanagedPropertyToNode(node, prop, value) {
      // It is a judgment call that resetting primitives is
      // "bad" and resettings objects is also "good"; alternatively we could
      // implement a whitelist of tag & property values that should never
      // be reset (e.g. <input>.value && <select>.value)
      if (value !== node[prop] || typeof value == 'object') {
        node[prop] = value;
      }
    }

    /**
     * Overrides the `PropertiesChanged` implementation to introduce special
     * dirty check logic depending on the property & value being set:
     *
     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
     * 2. Object set to simple property (e.g. 'prop': {...})
     *    Stored in `__dataTemp` and `__data`, dirty checked against
     *    `__dataTemp` by default implementation of `_shouldPropertyChange`
     * 3. Primitive value set to simple property (e.g. 'prop': 42)
     *    Stored in `__data`, dirty checked against `__data`
     *
     * The dirty-check is important to prevent cycles due to two-way
     * notification, but paths and objects are only dirty checked against any
     * previous value set during this turn via a "temporary cache" that is
     * cleared when the last `_propertiesChanged` exits. This is so:
     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
     *    due to array mutations like shift/unshift/splice; this is fine
     *    since path changes are dirty-checked at user entry points like `set`
     * b. dirty-checking for objects only lasts one turn to allow the user
     *    to mutate the object in-place and re-set it with the same identity
     *    and have all sub-properties re-propagated in a subsequent turn.
     *
     * The temp cache is not necessarily sufficient to prevent invalid array
     * paths, since a splice can happen during the same turn (with pathological
     * user code); we could introduce a "fixup" for temporarily cached array
     * paths if needed: https://github.com/Polymer/polymer/issues/4227
     *
     * @override
     * @param {string} property Name of the property
     * @param {*} value Value to set
     * @param {boolean=} shouldNotify True if property should fire notification
     *   event (applies only for `notify: true` properties)
     * @return {boolean} Returns true if the property changed
     */
    _setPendingProperty(property, value, shouldNotify) {
      let isPath = this.__dataHasPaths && Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["d" /* isPath */])(property);
      let prevProps = isPath ? this.__dataTemp : this.__data;
      if (this._shouldPropertyChange(property, value, prevProps[property])) {
        if (!this.__dataPending) {
          this.__dataPending = {};
          this.__dataOld = {};
        }
        // Ensure old is captured from the last turn
        if (!(property in this.__dataOld)) {
          this.__dataOld[property] = this.__data[property];
        }
        // Paths are stored in temporary cache (cleared at end of turn),
        // which is used for dirty-checking, all others stored in __data
        if (isPath) {
          this.__dataTemp[property] = value;
        } else {
          this.__data[property] = value;
        }
        // All changes go into pending property bag, passed to _propertiesChanged
        this.__dataPending[property] = value;
        // Track properties that should notify separately
        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {
          this.__dataToNotify = this.__dataToNotify || {};
          this.__dataToNotify[property] = shouldNotify;
        }
        return true;
      }
      return false;
    }

    /**
     * Overrides base implementation to ensure all accessors set `shouldNotify`
     * to true, for per-property notification tracking.
     *
     * @override
     * @param {string} property Name of the property
     * @param {*} value Value to set
     * @return {void}
     */
    _setProperty(property, value) {
      if (this._setPendingProperty(property, value, true)) {
        this._invalidateProperties();
      }
    }

    /**
     * Overrides `PropertyAccessor`'s default async queuing of
     * `_propertiesChanged`: if `__dataReady` is false (has not yet been
     * manually flushed), the function no-ops; otherwise flushes
     * `_propertiesChanged` synchronously.
     *
     * @override
     * @return {void}
     */
    _invalidateProperties() {
      if (this.__dataReady) {
        this._flushProperties();
      }
    }

    /**
     * Enqueues the given client on a list of pending clients, whose
     * pending property changes can later be flushed via a call to
     * `_flushClients`.
     *
     * @param {Object} client PropertyEffects client to enqueue
     * @return {void}
     * @protected
     */
    _enqueueClient(client) {
      this.__dataPendingClients = this.__dataPendingClients || [];
      if (client !== this) {
        this.__dataPendingClients.push(client);
      }
    }

    /**
     * Overrides superclass implementation.
     *
     * @return {void}
     * @protected
     */
    _flushProperties() {
      this.__dataCounter++;
      super._flushProperties();
      this.__dataCounter--;
    }

    /**
     * Flushes any clients previously enqueued via `_enqueueClient`, causing
     * their `_flushProperties` method to run.
     *
     * @return {void}
     * @protected
     */
    _flushClients() {
      if (!this.__dataClientsReady) {
        this.__dataClientsReady = true;
        this._readyClients();
        // Override point where accessors are turned on; importantly,
        // this is after clients have fully readied, providing a guarantee
        // that any property effects occur only after all clients are ready.
        this.__dataReady = true;
      } else {
        this.__enableOrFlushClients();
      }
    }

    // NOTE: We ensure clients either enable or flush as appropriate. This
    // handles two corner cases:
    // (1) clients flush properly when connected/enabled before the host
    // enables; e.g.
    //   (a) Templatize stamps with no properties and does not flush and
    //   (b) the instance is inserted into dom and
    //   (c) then the instance flushes.
    // (2) clients enable properly when not connected/enabled when the host
    // flushes; e.g.
    //   (a) a template is runtime stamped and not yet connected/enabled
    //   (b) a host sets a property, causing stamped dom to flush
    //   (c) the stamped dom enables.
    __enableOrFlushClients() {
      let clients = this.__dataPendingClients;
      if (clients) {
        this.__dataPendingClients = null;
        for (let i=0; i < clients.length; i++) {
          let client = clients[i];
          if (!client.__dataEnabled) {
            client._enableProperties();
          } else if (client.__dataPending) {
            client._flushProperties();
          }
        }
      }
    }

    /**
     * Perform any initial setup on client dom. Called before the first
     * `_flushProperties` call on client dom and before any element
     * observers are called.
     *
     * @return {void}
     * @protected
     */
    _readyClients() {
      this.__enableOrFlushClients();
    }

    /**
     * Sets a bag of property changes to this instance, and
     * synchronously processes all effects of the properties as a batch.
     *
     * Property names must be simple properties, not paths.  Batched
     * path propagation is not supported.
     *
     * @param {Object} props Bag of one or more key-value pairs whose key is
     *   a property and value is the new value to set for that property.
     * @param {boolean=} setReadOnly When true, any private values set in
     *   `props` will be set. By default, `setProperties` will not set
     *   `readOnly: true` root properties.
     * @return {void}
     * @public
     */
    setProperties(props, setReadOnly) {
      for (let path in props) {
        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {
          //TODO(kschaaf): explicitly disallow paths in setProperty?
          // wildcard observers currently only pass the first changed path
          // in the `info` object, and you could do some odd things batching
          // paths, e.g. {'foo.bar': {...}, 'foo': null}
          this._setPendingPropertyOrPath(path, props[path], true);
        }
      }
      this._invalidateProperties();
    }

    /**
     * Overrides `PropertyAccessors` so that property accessor
     * side effects are not enabled until after client dom is fully ready.
     * Also calls `_flushClients` callback to ensure client dom is enabled
     * that was not enabled as a result of flushing properties.
     *
     * @override
     * @return {void}
     */
    ready() {
      // It is important that `super.ready()` is not called here as it
      // immediately turns on accessors. Instead, we wait until `readyClients`
      // to enable accessors to provide a guarantee that clients are ready
      // before processing any accessors side effects.
      this._flushProperties();
      // If no data was pending, `_flushProperties` will not `flushClients`
      // so ensure this is done.
      if (!this.__dataClientsReady) {
        this._flushClients();
      }
      // Before ready, client notifications do not trigger _flushProperties.
      // Therefore a flush is necessary here if data has been set.
      if (this.__dataPending) {
        this._flushProperties();
      }
    }

    /**
     * Implements `PropertyAccessors`'s properties changed callback.
     *
     * Runs each class of effects for the batch of changed properties in
     * a specific order (compute, propagate, reflect, observe, notify).
     *
     * @param {!Object} currentProps Bag of all current accessor values
     * @param {!Object} changedProps Bag of properties changed since the last
     *   call to `_propertiesChanged`
     * @param {!Object} oldProps Bag of previous values for each property
     *   in `changedProps`
     * @return {void}
     */
    _propertiesChanged(currentProps, changedProps, oldProps) {
      // ----------------------------
      // let c = Object.getOwnPropertyNames(changedProps || {});
      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
      // if (window.debug) { debugger; }
      // ----------------------------
      let hasPaths = this.__dataHasPaths;
      this.__dataHasPaths = false;
      // Compute properties
      runComputedEffects(this, changedProps, oldProps, hasPaths);
      // Clear notify properties prior to possible reentry (propagate, observe),
      // but after computing effects have a chance to add to them
      let notifyProps = this.__dataToNotify;
      this.__dataToNotify = null;
      // Propagate properties to clients
      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);
      // Flush clients
      this._flushClients();
      // Reflect properties
      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);
      // Observe properties
      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);
      // Notify properties to host
      if (notifyProps) {
        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);
      }
      // Clear temporary cache at end of turn
      if (this.__dataCounter == 1) {
        this.__dataTemp = {};
      }
      // ----------------------------
      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
      // ----------------------------
    }

    /**
     * Called to propagate any property changes to stamped template nodes
     * managed by this element.
     *
     * @param {Object} changedProps Bag of changed properties
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @protected
     */
    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {
      if (this[TYPES.PROPAGATE]) {
        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);
      }
      let templateInfo = this.__templateInfo;
      while (templateInfo) {
        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,
          hasPaths, templateInfo.nodeList);
        templateInfo = templateInfo.nextTemplateInfo;
      }
    }

    /**
     * Aliases one data path as another, such that path notifications from one
     * are routed to the other.
     *
     * @param {string | !Array<string|number>} to Target path to link.
     * @param {string | !Array<string|number>} from Source path to link.
     * @return {void}
     * @public
     */
    linkPaths(to, from) {
      to = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["f" /* normalize */])(to);
      from = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["f" /* normalize */])(from);
      this.__dataLinkedPaths = this.__dataLinkedPaths || {};
      this.__dataLinkedPaths[to] = from;
    }

    /**
     * Removes a data path alias previously established with `_linkPaths`.
     *
     * Note, the path to unlink should be the target (`to`) used when
     * linking the paths.
     *
     * @param {string | !Array<string|number>} path Target path to unlink.
     * @return {void}
     * @public
     */
    unlinkPaths(path) {
      path = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["f" /* normalize */])(path);
      if (this.__dataLinkedPaths) {
        delete this.__dataLinkedPaths[path];
      }
    }

    /**
     * Notify that an array has changed.
     *
     * Example:
     *
     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
     *     ...
     *     this.items.splice(1, 1, {name: 'Sam'});
     *     this.items.push({name: 'Bob'});
     *     this.notifySplices('items', [
     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },
     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}
     *     ]);
     *
     * @param {string} path Path that should be notified.
     * @param {Array} splices Array of splice records indicating ordered
     *   changes that occurred to the array. Each record should have the
     *   following fields:
     *    * index: index at which the change occurred
     *    * removed: array of items that were removed from this index
     *    * addedCount: number of new items added at this index
     *    * object: a reference to the array in question
     *    * type: the string literal 'splice'
     *
     *   Note that splice records _must_ be normalized such that they are
     *   reported in index order (raw results from `Object.observe` are not
     *   ordered and must be normalized/merged before notifying).
     * @return {void}
     * @public
    */
    notifySplices(path, splices) {
      let info = {path: ''};
      let array = /** @type {Array} */(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      notifySplices(this, array, info.path, splices);
    }

    /**
     * Convenience method for reading a value from a path.
     *
     * Note, if any part in the path is undefined, this method returns
     * `undefined` (this method does not throw when dereferencing undefined
     * paths).
     *
     * @param {(string|!Array<(string|number)>)} path Path to the value
     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
     *   bracketed expressions are not supported; string-based path parts
     *   *must* be separated by dots.  Note that when dereferencing array
     *   indices, the index may be used as a dotted part directly
     *   (e.g. `users.12.name` or `['users', 12, 'name']`).
     * @param {Object=} root Root object from which the path is evaluated.
     * @return {*} Value at the path, or `undefined` if any part of the path
     *   is undefined.
     * @public
     */
    get(path, root) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(root || this, path);
    }

    /**
     * Convenience method for setting a value to a path and notifying any
     * elements bound to the same path.
     *
     * Note, if any part in the path except for the last is undefined,
     * this method does nothing (this method does not throw when
     * dereferencing undefined paths).
     *
     * @param {(string|!Array<(string|number)>)} path Path to the value
     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
     *   bracketed expressions are not supported; string-based path parts
     *   *must* be separated by dots.  Note that when dereferencing array
     *   indices, the index may be used as a dotted part directly
     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
     * @param {*} value Value to set at the specified path.
     * @param {Object=} root Root object from which the path is evaluated.
     *   When specified, no notification will occur.
     * @return {void}
     * @public
    */
    set(path, value, root) {
      if (root) {
        Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["h" /* set */])(root, path, value);
      } else {
        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {
          if (this._setPendingPropertyOrPath(path, value, true)) {
            this._invalidateProperties();
          }
        }
      }
    }

    /**
     * Adds items onto the end of the array at the path specified.
     *
     * The arguments after `path` and return value match that of
     * `Array.prototype.push`.
     *
     * This method notifies other paths to the same array that a
     * splice occurred to the array.
     *
     * @param {string | !Array<string|number>} path Path to array.
     * @param {...*} items Items to push onto array
     * @return {number} New length of the array.
     * @public
     */
    push(path, ...items) {
      let info = {path: ''};
      let array = /** @type {Array}*/(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      let len = array.length;
      let ret = array.push(...items);
      if (items.length) {
        notifySplice(this, array, info.path, len, items.length, []);
      }
      return ret;
    }

    /**
     * Removes an item from the end of array at the path specified.
     *
     * The arguments after `path` and return value match that of
     * `Array.prototype.pop`.
     *
     * This method notifies other paths to the same array that a
     * splice occurred to the array.
     *
     * @param {string | !Array<string|number>} path Path to array.
     * @return {*} Item that was removed.
     * @public
     */
    pop(path) {
      let info = {path: ''};
      let array = /** @type {Array} */(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      let hadLength = Boolean(array.length);
      let ret = array.pop();
      if (hadLength) {
        notifySplice(this, array, info.path, array.length, 0, [ret]);
      }
      return ret;
    }

    /**
     * Starting from the start index specified, removes 0 or more items
     * from the array and inserts 0 or more new items in their place.
     *
     * The arguments after `path` and return value match that of
     * `Array.prototype.splice`.
     *
     * This method notifies other paths to the same array that a
     * splice occurred to the array.
     *
     * @param {string | !Array<string|number>} path Path to array.
     * @param {number} start Index from which to start removing/inserting.
     * @param {number} deleteCount Number of items to remove.
     * @param {...*} items Items to insert into array.
     * @return {Array} Array of removed items.
     * @public
     */
    splice(path, start, deleteCount, ...items) {
      let info = {path : ''};
      let array = /** @type {Array} */(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      // Normalize fancy native splice handling of crazy start values
      if (start < 0) {
        start = array.length - Math.floor(-start);
      } else {
        start = Math.floor(start);
      }
      if (!start) {
        start = 0;
      }
      let ret = array.splice(start, deleteCount, ...items);
      if (items.length || ret.length) {
        notifySplice(this, array, info.path, start, items.length, ret);
      }
      return ret;
    }

    /**
     * Removes an item from the beginning of array at the path specified.
     *
     * The arguments after `path` and return value match that of
     * `Array.prototype.pop`.
     *
     * This method notifies other paths to the same array that a
     * splice occurred to the array.
     *
     * @param {string | !Array<string|number>} path Path to array.
     * @return {*} Item that was removed.
     * @public
     */
    shift(path) {
      let info = {path: ''};
      let array = /** @type {Array} */(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      let hadLength = Boolean(array.length);
      let ret = array.shift();
      if (hadLength) {
        notifySplice(this, array, info.path, 0, 0, [ret]);
      }
      return ret;
    }

    /**
     * Adds items onto the beginning of the array at the path specified.
     *
     * The arguments after `path` and return value match that of
     * `Array.prototype.push`.
     *
     * This method notifies other paths to the same array that a
     * splice occurred to the array.
     *
     * @param {string | !Array<string|number>} path Path to array.
     * @param {...*} items Items to insert info array
     * @return {number} New length of the array.
     * @public
     */
    unshift(path, ...items) {
      let info = {path: ''};
      let array = /** @type {Array} */(Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info));
      let ret = array.unshift(...items);
      if (items.length) {
        notifySplice(this, array, info.path, 0, items.length, []);
      }
      return ret;
    }

    /**
     * Notify that a path has changed.
     *
     * Example:
     *
     *     this.item.user.name = 'Bob';
     *     this.notifyPath('item.user.name');
     *
     * @param {string} path Path that should be notified.
     * @param {*=} value Value at the path (optional).
     * @return {void}
     * @public
    */
    notifyPath(path, value) {
      /** @type {string} */
      let propPath;
      if (arguments.length == 1) {
        // Get value if not supplied
        let info = {path: ''};
        value = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(this, path, info);
        propPath = info.path;
      } else if (Array.isArray(path)) {
        // Normalize path if needed
        propPath = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["f" /* normalize */])(path);
      } else {
        propPath = /** @type{string} */(path);
      }
      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {
        this._invalidateProperties();
      }
    }

    /**
     * Equivalent to static `createReadOnlyProperty` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Property name
     * @param {boolean=} protectedSetter Creates a custom protected setter
     *   when `true`.
     * @return {void}
     * @protected
     */
    _createReadOnlyProperty(property, protectedSetter) {
      this._addPropertyEffect(property, TYPES.READ_ONLY);
      if (protectedSetter) {
        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {
          this._setProperty(property, value);
        };
      }
    }

    /**
     * Equivalent to static `createPropertyObserver` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Property name
     * @param {string|function(*,*)} method Function or name of observer method to call
     * @param {boolean=} dynamicFn Whether the method name should be included as
     *   a dependency to the effect.
     * @return {void}
     * @protected
     */
    _createPropertyObserver(property, method, dynamicFn) {
      let info = { property, method, dynamicFn: Boolean(dynamicFn) };
      this._addPropertyEffect(property, TYPES.OBSERVE, {
        fn: runObserverEffect, info, trigger: {name: property}
      });
      if (dynamicFn) {
        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {
          fn: runObserverEffect, info, trigger: {name: method}
        });
      }
    }

    /**
     * Equivalent to static `createMethodObserver` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} expression Method expression
     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
     *   whether method names should be included as a dependency to the effect.
     * @return {void}
     * @protected
     */
    _createMethodObserver(expression, dynamicFn) {
      let sig = parseMethod(expression);
      if (!sig) {
        throw new Error("Malformed observer expression '" + expression + "'");
      }
      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);
    }

    /**
     * Equivalent to static `createNotifyingProperty` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Property name
     * @return {void}
     * @protected
     */
    _createNotifyingProperty(property) {
      this._addPropertyEffect(property, TYPES.NOTIFY, {
        fn: runNotifyEffect,
        info: {
          eventName: CaseMap.camelToDashCase(property) + '-changed',
          property: property
        }
      });
    }

    /**
     * Equivalent to static `createReflectedProperty` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Property name
     * @return {void}
     * @protected
     */
    _createReflectedProperty(property) {
      let attr = this.constructor.attributeNameForProperty(property);
      if (attr[0] === '-') {
        console.warn('Property ' + property + ' cannot be reflected to attribute ' +
          attr + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');
      } else {
        this._addPropertyEffect(property, TYPES.REFLECT, {
          fn: runReflectEffect,
          info: {
            attrName: attr
          }
        });
      }
    }

    /**
     * Equivalent to static `createComputedProperty` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @param {string} property Name of computed property to set
     * @param {string} expression Method expression
     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
     *   whether method names should be included as a dependency to the effect.
     * @return {void}
     * @protected
     */
    _createComputedProperty(property, expression, dynamicFn) {
      let sig = parseMethod(expression);
      if (!sig) {
        throw new Error("Malformed computed expression '" + expression + "'");
      }
      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);
    }

    // -- static class methods ------------

    /**
     * Ensures an accessor exists for the specified property, and adds
     * to a list of "property effects" that will run when the accessor for
     * the specified property is set.  Effects are grouped by "type", which
     * roughly corresponds to a phase in effect processing.  The effect
     * metadata should be in the following form:
     *
     *     {
     *       fn: effectFunction, // Reference to function to call to perform effect
     *       info: { ... }       // Effect metadata passed to function
     *       trigger: {          // Optional triggering metadata; if not provided
     *         name: string      // the property is treated as a wildcard
     *         structured: boolean
     *         wildcard: boolean
     *       }
     *     }
     *
     * Effects are called from `_propertiesChanged` in the following order by
     * type:
     *
     * 1. COMPUTE
     * 2. PROPAGATE
     * 3. REFLECT
     * 4. OBSERVE
     * 5. NOTIFY
     *
     * Effect functions are called with the following signature:
     *
     *     effectFunction(inst, path, props, oldProps, info, hasPaths)
     *
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */
    static addPropertyEffect(property, type, effect) {
      this.prototype._addPropertyEffect(property, type, effect);
    }

    /**
     * Creates a single-property observer for the given property.
     *
     * @param {string} property Property name
     * @param {string|function(*,*)} method Function or name of observer method to call
     * @param {boolean=} dynamicFn Whether the method name should be included as
     *   a dependency to the effect.
     * @return {void}
     * @protected
     */
    static createPropertyObserver(property, method, dynamicFn) {
      this.prototype._createPropertyObserver(property, method, dynamicFn);
    }

    /**
     * Creates a multi-property "method observer" based on the provided
     * expression, which should be a string in the form of a normal JavaScript
     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
     * should correspond to a property or path in the context of this
     * prototype (or instance), or may be a literal string or number.
     *
     * @param {string} expression Method expression
     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
     * @return {void}
     *   whether method names should be included as a dependency to the effect.
     * @protected
     */
    static createMethodObserver(expression, dynamicFn) {
      this.prototype._createMethodObserver(expression, dynamicFn);
    }

    /**
     * Causes the setter for the given property to dispatch `<property>-changed`
     * events to notify of changes to the property.
     *
     * @param {string} property Property name
     * @return {void}
     * @protected
     */
    static createNotifyingProperty(property) {
      this.prototype._createNotifyingProperty(property);
    }

    /**
     * Creates a read-only accessor for the given property.
     *
     * To set the property, use the protected `_setProperty` API.
     * To create a custom protected setter (e.g. `_setMyProp()` for
     * property `myProp`), pass `true` for `protectedSetter`.
     *
     * Note, if the property will have other property effects, this method
     * should be called first, before adding other effects.
     *
     * @param {string} property Property name
     * @param {boolean=} protectedSetter Creates a custom protected setter
     *   when `true`.
     * @return {void}
     * @protected
     */
    static createReadOnlyProperty(property, protectedSetter) {
      this.prototype._createReadOnlyProperty(property, protectedSetter);
    }

    /**
     * Causes the setter for the given property to reflect the property value
     * to a (dash-cased) attribute of the same name.
     *
     * @param {string} property Property name
     * @return {void}
     * @protected
     */
    static createReflectedProperty(property) {
      this.prototype._createReflectedProperty(property);
    }

    /**
     * Creates a computed property whose value is set to the result of the
     * method described by the given `expression` each time one or more
     * arguments to the method changes.  The expression should be a string
     * in the form of a normal JavaScript function signature:
     * `'methodName(arg1, [..., argn])'`
     *
     * @param {string} property Name of computed property to set
     * @param {string} expression Method expression
     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
     *   method names should be included as a dependency to the effect.
     * @return {void}
     * @protected
     */
    static createComputedProperty(property, expression, dynamicFn) {
      this.prototype._createComputedProperty(property, expression, dynamicFn);
    }

    /**
     * Parses the provided template to ensure binding effects are created
     * for them, and then ensures property accessors are created for any
     * dependent properties in the template.  Binding effects for bound
     * templates are stored in a linked list on the instance so that
     * templates can be efficiently stamped and unstamped.
     *
     * @param {!HTMLTemplateElement} template Template containing binding
     *   bindings
     * @return {!TemplateInfo} Template metadata object
     * @protected
     */
    static bindTemplate(template) {
      return this.prototype._bindTemplate(template);
    }

    // -- binding ----------------------------------------------

    /**
     * Equivalent to static `bindTemplate` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * This method may be called on the prototype (for prototypical template
     * binding, to avoid creating accessors every instance) once per prototype,
     * and will be called with `runtimeBinding: true` by `_stampTemplate` to
     * create and link an instance of the template metadata associated with a
     * particular stamping.
     *
     * @param {!HTMLTemplateElement} template Template containing binding
     *   bindings
     * @param {boolean=} instanceBinding When false (default), performs
     *   "prototypical" binding of the template and overwrites any previously
     *   bound template for the class. When true (as passed from
     *   `_stampTemplate`), the template info is instanced and linked into
     *   the list of bound templates.
     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
     *   this is an instance of the prototypical template info
     * @protected
     */
    _bindTemplate(template, instanceBinding) {
      let templateInfo = this.constructor._parseTemplate(template);
      let wasPreBound = this.__templateInfo == templateInfo;
      // Optimization: since this is called twice for proto-bound templates,
      // don't attempt to recreate accessors if this template was pre-bound
      if (!wasPreBound) {
        for (let prop in templateInfo.propertyEffects) {
          this._createPropertyAccessor(prop);
        }
      }
      if (instanceBinding) {
        // For instance-time binding, create instance of template metadata
        // and link into list of templates if necessary
        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));
        templateInfo.wasPreBound = wasPreBound;
        if (!wasPreBound && this.__templateInfo) {
          let last = this.__templateInfoLast || this.__templateInfo;
          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;
          templateInfo.previousTemplateInfo = last;
          return templateInfo;
        }
      }
      return this.__templateInfo = templateInfo;
    }

    /**
     * Adds a property effect to the given template metadata, which is run
     * at the "propagate" stage of `_propertiesChanged` when the template
     * has been bound to the element via `_bindTemplate`.
     *
     * The `effect` object should match the format in `_addPropertyEffect`.
     *
     * @param {Object} templateInfo Template metadata to add effect to
     * @param {string} prop Property that should trigger the effect
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */
    static _addTemplatePropertyEffect(templateInfo, prop, effect) {
      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};
      hostProps[prop] = true;
      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};
      let propEffects = effects[prop] = effects[prop] || [];
      propEffects.push(effect);
    }

    /**
     * Stamps the provided template and performs instance-time setup for
     * Polymer template features, including data bindings, declarative event
     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
     * is returned containing the stamped DOM, ready for insertion into the
     * DOM.
     *
     * This method may be called more than once; however note that due to
     * `shadycss` polyfill limitations, only styles from templates prepared
     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
     * to the shadow root and support CSS custom properties), and note that
     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
     * any styles required by in runtime-stamped templates must be included
     * in the main element template.
     *
     * @param {!HTMLTemplateElement} template Template to stamp
     * @return {!StampedTemplate} Cloned template content
     * @override
     * @protected
     */
    _stampTemplate(template) {
      // Ensures that created dom is `_enqueueClient`'d to this element so
      // that it can be flushed on next call to `_flushProperties`
      hostStack.beginHosting(this);
      let dom = super._stampTemplate(template);
      hostStack.endHosting(this);
      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));
      // Add template-instance-specific data to instanced templateInfo
      templateInfo.nodeList = dom.nodeList;
      // Capture child nodes to allow unstamping of non-prototypical templates
      if (!templateInfo.wasPreBound) {
        let nodes = templateInfo.childNodes = [];
        for (let n=dom.firstChild; n; n=n.nextSibling) {
          nodes.push(n);
        }
      }
      dom.templateInfo = templateInfo;
      // Setup compound storage, 2-way listeners, and dataHost for bindings
      setupBindings(this, templateInfo);
      // Flush properties into template nodes if already booted
      if (this.__dataReady) {
        runEffects(this, templateInfo.propertyEffects, this.__data, null,
          false, templateInfo.nodeList);
      }
      return dom;
    }

    /**
     * Removes and unbinds the nodes previously contained in the provided
     * DocumentFragment returned from `_stampTemplate`.
     *
     * @param {!StampedTemplate} dom DocumentFragment previously returned
     *   from `_stampTemplate` associated with the nodes to be removed
     * @return {void}
     * @protected
     */
    _removeBoundDom(dom) {
      // Unlink template info
      let templateInfo = dom.templateInfo;
      if (templateInfo.previousTemplateInfo) {
        templateInfo.previousTemplateInfo.nextTemplateInfo =
          templateInfo.nextTemplateInfo;
      }
      if (templateInfo.nextTemplateInfo) {
        templateInfo.nextTemplateInfo.previousTemplateInfo =
          templateInfo.previousTemplateInfo;
      }
      if (this.__templateInfoLast == templateInfo) {
        this.__templateInfoLast = templateInfo.previousTemplateInfo;
      }
      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;
      // Remove stamped nodes
      let nodes = templateInfo.childNodes;
      for (let i=0; i<nodes.length; i++) {
        let node = nodes[i];
        node.parentNode.removeChild(node);
      }
    }

    /**
     * Overrides default `TemplateStamp` implementation to add support for
     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
     * array is added to `nodeInfo` and populated with binding metadata
     * with information capturing the binding target, and a `parts` array
     * with one or more metadata objects capturing the source(s) of the
     * binding.
     *
     * @override
     * @param {Node} node Node to parse
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {NodeInfo} nodeInfo Node metadata for current template node
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     * @protected
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */
    static _parseTemplateNode(node, templateInfo, nodeInfo) {
      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);
      if (node.nodeType === Node.TEXT_NODE) {
        let parts = this._parseBindings(node.textContent, templateInfo);
        if (parts) {
          // Initialize the textContent with any literal parts
          // NOTE: default to a space here so the textNode remains; some browsers
          // (IE) omit an empty textNode following cloneNode/importNode.
          node.textContent = literalFromParts(parts) || ' ';
          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);
          noted = true;
        }
      }
      return noted;
    }

    /**
     * Overrides default `TemplateStamp` implementation to add support for
     * parsing bindings from attributes.  A `bindings`
     * array is added to `nodeInfo` and populated with binding metadata
     * with information capturing the binding target, and a `parts` array
     * with one or more metadata objects capturing the source(s) of the
     * binding.
     *
     * @override
     * @param {Element} node Node to parse
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {NodeInfo} nodeInfo Node metadata for current template node
     * @param {string} name Attribute name
     * @param {string} value Attribute value
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     * @protected
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */
    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
      let parts = this._parseBindings(value, templateInfo);
      if (parts) {
        // Attribute or property
        let origName = name;
        let kind = 'property';
        if (name[name.length-1] == '$') {
          name = name.slice(0, -1);
          kind = 'attribute';
        }
        // Initialize attribute bindings with any literal parts
        let literal = literalFromParts(parts);
        if (literal && kind == 'attribute') {
          node.setAttribute(name, literal);
        }
        // Clear attribute before removing, since IE won't allow removing
        // `value` attribute if it previously had a value (can't
        // unconditionally set '' before removing since attributes with `$`
        // can't be set using setAttribute)
        if (node.localName === 'input' && origName === 'value') {
          node.setAttribute(origName, '');
        }
        // Remove annotation
        node.removeAttribute(origName);
        // Case hackery: attributes are lower-case, but bind targets
        // (properties) are case sensitive. Gambit is to map dash-case to
        // camel-case: `foo-bar` becomes `fooBar`.
        // Attribute bindings are excepted.
        if (kind === 'property') {
          name = Object(__WEBPACK_IMPORTED_MODULE_3__utils_case_map_js__["dashToCamelCase"])(name);
        }
        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);
        return true;
      } else {
        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);
      }
    }

    /**
     * Overrides default `TemplateStamp` implementation to add support for
     * binding the properties that a nested template depends on to the template
     * as `_host_<property>`.
     *
     * @override
     * @param {Node} node Node to parse
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {NodeInfo} nodeInfo Node metadata for current template node
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     * @protected
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */
    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {
      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);
      // Merge host props into outer template and add bindings
      let hostProps = nodeInfo.templateInfo.hostProps;
      let mode = '{';
      for (let source in hostProps) {
        let parts = [{ mode, source, dependencies: [source] }];
        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);
      }
      return noted;
    }

    /**
     * Called to parse text in a template (either attribute values or
     * textContent) into binding metadata.
     *
     * Any overrides of this method should return an array of binding part
     * metadata  representing one or more bindings found in the provided text
     * and any "literal" text in between.  Any non-literal parts will be passed
     * to `_evaluateBinding` when any dependencies change.  The only required
     * fields of each "part" in the returned array are as follows:
     *
     * - `dependencies` - Array containing trigger metadata for each property
     *   that should trigger the binding to update
     * - `literal` - String containing text if the part represents a literal;
     *   in this case no `dependencies` are needed
     *
     * Additional metadata for use by `_evaluateBinding` may be provided in
     * each part object as needed.
     *
     * The default implementation handles the following types of bindings
     * (one or more may be intermixed with literal strings):
     * - Property binding: `[[prop]]`
     * - Path binding: `[[object.prop]]`
     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
     * - Two-way property or path bindings (supports negation):
     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
     * - Inline computed method (supports negation):
     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
     *
     * @param {string} text Text to parse from attribute or textContent
     * @param {Object} templateInfo Current template metadata
     * @return {Array<!BindingPart>} Array of binding part metadata
     * @protected
     */
    static _parseBindings(text, templateInfo) {
      let parts = [];
      let lastIndex = 0;
      let m;
      // Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
      // Regex matches:
      //        Iteration 1:  Iteration 2:
      // m[1]: '{{'          '[['
      // m[2]: ''            '!'
      // m[3]: 'prop'        'compute(foo,bar)'
      while ((m = bindingRegex.exec(text)) !== null) {
        // Add literal part
        if (m.index > lastIndex) {
          parts.push({literal: text.slice(lastIndex, m.index)});
        }
        // Add binding part
        let mode = m[1][0];
        let negate = Boolean(m[2]);
        let source = m[3].trim();
        let customEvent = false, notifyEvent = '', colon = -1;
        if (mode == '{' && (colon = source.indexOf('::')) > 0) {
          notifyEvent = source.substring(colon + 2);
          source = source.substring(0, colon);
          customEvent = true;
        }
        let signature = parseMethod(source);
        let dependencies = [];
        if (signature) {
          // Inline computed function
          let {args, methodName} = signature;
          for (let i=0; i<args.length; i++) {
            let arg = args[i];
            if (!arg.literal) {
              dependencies.push(arg);
            }
          }
          let dynamicFns = templateInfo.dynamicFns;
          if (dynamicFns && dynamicFns[methodName] || signature.static) {
            dependencies.push(methodName);
            signature.dynamicFn = true;
          }
        } else {
          // Property or path
          dependencies.push(source);
        }
        parts.push({
          source, mode, negate, customEvent, signature, dependencies,
          event: notifyEvent
        });
        lastIndex = bindingRegex.lastIndex;
      }
      // Add a final literal part
      if (lastIndex && lastIndex < text.length) {
        let literal = text.substring(lastIndex);
        if (literal) {
          parts.push({
            literal: literal
          });
        }
      }
      if (parts.length) {
        return parts;
      } else {
        return null;
      }
    }

    /**
     * Called to evaluate a previously parsed binding part based on a set of
     * one or more changed dependencies.
     *
     * @param {this} inst Element that should be used as scope for
     *   binding dependencies
     * @param {BindingPart} part Binding part metadata
     * @param {string} path Property/path that triggered this effect
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {*} Value the binding part evaluated to
     * @protected
     */
    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {
      let value;
      if (part.signature) {
        value = runMethodEffect(inst, path, props, oldProps, part.signature);
      } else if (path != part.source) {
        value = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(inst, part.source);
      } else {
        if (hasPaths && Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["d" /* isPath */])(path)) {
          value = Object(__WEBPACK_IMPORTED_MODULE_2__utils_path_js__["a" /* get */])(inst, path);
        } else {
          value = inst.__data[path];
        }
      }
      if (part.negate) {
        value = !value;
      }
      return value;
    }

  }

  // make a typing for closure :P
  PropertyEffectsType = PropertyEffects;

  return PropertyEffects;
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PropertyEffects;


/**
 * Helper api for enqueuing client dom created by a host element.
 *
 * By default elements are flushed via `_flushProperties` when
 * `connectedCallback` is called. Elements attach their client dom to
 * themselves at `ready` time which results from this first flush.
 * This provides an ordering guarantee that the client dom an element
 * creates is flushed before the element itself (i.e. client `ready`
 * fires before host `ready`).
 *
 * However, if `_flushProperties` is called *before* an element is connected,
 * as for example `Templatize` does, this ordering guarantee cannot be
 * satisfied because no elements are connected. (Note: Bound elements that
 * receive data do become enqueued clients and are properly ordered but
 * unbound elements are not.)
 *
 * To maintain the desired "client before host" ordering guarantee for this
 * case we rely on the "host stack. Client nodes registers themselves with
 * the creating host element when created. This ensures that all client dom
 * is readied in the proper order, maintaining the desired guarantee.
 *
 * @private
 */
let hostStack = {

  stack: [],

  /**
   * @param {*} inst Instance to add to hostStack
   * @return {void}
   * @this {hostStack}
   */
  registerHost(inst) {
    if (this.stack.length) {
      let host = this.stack[this.stack.length-1];
      host._enqueueClient(inst);
    }
  },

  /**
   * @param {*} inst Instance to begin hosting
   * @return {void}
   * @this {hostStack}
   */
  beginHosting(inst) {
    this.stack.push(inst);
  },

  /**
   * @param {*} inst Instance to end hosting
   * @return {void}
   * @this {hostStack}
   */
  endHosting(inst) {
    let stackLen = this.stack.length;
    if (stackLen && this.stack[stackLen-1] == inst) {
      this.stack.pop();
    }
  }

};


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = isPath;
/* harmony export (immutable) */ __webpack_exports__["g"] = root;
/* harmony export (immutable) */ __webpack_exports__["b"] = isAncestor;
/* harmony export (immutable) */ __webpack_exports__["c"] = isDescendant;
/* harmony export (immutable) */ __webpack_exports__["i"] = translate;
/* harmony export (immutable) */ __webpack_exports__["e"] = matches;
/* harmony export (immutable) */ __webpack_exports__["f"] = normalize;
/* unused harmony export split */
/* harmony export (immutable) */ __webpack_exports__["a"] = get;
/* harmony export (immutable) */ __webpack_exports__["h"] = set;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


function isPath(path) {
  return path.indexOf('.') >= 0;
}

function root(path) {
  let dotIndex = path.indexOf('.');
  if (dotIndex === -1) {
    return path;
  }
  return path.slice(0, dotIndex);
}

function isAncestor(base, path) {
  //     base.startsWith(path + '.');
  return base.indexOf(path + '.') === 0;
}

function isDescendant(base, path) {
  //     path.startsWith(base + '.');
  return path.indexOf(base + '.') === 0;
}

function translate(base, newBase, path) {
  return newBase + path.slice(base.length);
}

function matches(base, path) {
  return (base === path) ||
         isAncestor(base, path) ||
         isDescendant(base, path);
}

function normalize(path) {
  if (Array.isArray(path)) {
    let parts = [];
    for (let i=0; i<path.length; i++) {
      let args = path[i].toString().split('.');
      for (let j=0; j<args.length; j++) {
        parts.push(args[j]);
      }
    }
    return parts.join('.');
  } else {
    return path;
  }
}

function split(path) {
  if (Array.isArray(path)) {
    return normalize(path).split('.');
  }
  return path.toString().split('.');
}

function get(root, path, info) {
  let prop = root;
  let parts = split(path);
  // Loop over path parts[0..n-1] and dereference
  for (let i=0; i<parts.length; i++) {
    if (!prop) {
      return;
    }
    let part = parts[i];
    prop = prop[part];
  }
  if (info) {
    info.path = parts.join('.');
  }
  return prop;
}

function set(root, path, value) {
  let prop = root;
  let parts = split(path);
  let last = parts[parts.length-1];
  if (parts.length > 1) {
    // Loop over path parts[0..n-2] and dereference
    for (let i=0; i<parts.length-1; i++) {
      let part = parts[i];
      prop = prop[part];
      if (!prop) {
        return;
      }
    }
    // Set value to object at end of path
    prop[last] = value;
  } else {
    // Simple property set
    prop[path] = value;
  }
  return parts.join('.');
}

const isDeep = isPath;
/* unused harmony export isDeep */



/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_async_js__ = __webpack_require__(9);




/** @const {!AsyncInterface} */
const microtask = __WEBPACK_IMPORTED_MODULE_2__utils_async_js__["a" /* microTask */];

const PropertiesChanged = Object(__WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @polymer
   * @mixinClass
   * @extends {superClass}
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   */
  class PropertiesChanged extends superClass {

    /**
     * Creates property accessors for the given property names.
     * @param {!Object} props Object whose keys are names of accessors.
     * @return {void}
     * @protected
     */
    static createProperties(props) {
      const proto = this.prototype;
      for (let prop in props) {
        // don't stomp an existing accessor
        if (!(prop in proto)) {
          proto._createPropertyAccessor(prop);
        }
      }
    }

    /**
     * Returns an attribute name that corresponds to the given property.
     * The attribute name is the lowercased property name. Override to
     * customize this mapping.
     * @param {string} property Property to convert
     * @return {string} Attribute name corresponding to the given property.
     *
     * @protected
     */
    static attributeNameForProperty(property) {
      return property.toLowerCase();
    }

    /**
     * Override point to provide a type to which to deserialize a value to
     * a given property.
     * @param {string} name Name of property
     *
     * @protected
     */
    static typeForProperty(name) { } //eslint-disable-line no-unused-vars

    /**
     * Creates a setter/getter pair for the named property with its own
     * local storage.  The getter returns the value in the local storage,
     * and the setter calls `_setProperty`, which updates the local storage
     * for the property and enqueues a `_propertiesChanged` callback.
     *
     * This method may be called on a prototype or an instance.  Calling
     * this method may overwrite a property value that already exists on
     * the prototype/instance by creating the accessor.
     *
     * @param {string} property Name of the property
     * @param {boolean=} readOnly When true, no setter is created; the
     *   protected `_setProperty` function must be used to set the property
     * @return {void}
     * @protected
     */
    _createPropertyAccessor(property, readOnly) {
      if (!this.hasOwnProperty('__dataHasAccessor')) {
        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);
      }
      if (!this.hasOwnProperty('__dataAttributes')) {
        this.__dataAttributes = Object.assign({}, this.__dataAttributes);
      }
      if (!this.__dataHasAccessor[property]) {
        this.__dataHasAccessor[property] = true;
        const attr = this.constructor.attributeNameForProperty(property);
        this.__dataAttributes[attr] = property;
        this._definePropertyAccessor(property, readOnly);
      }
    }

    /**
     * Defines a property accessor for the given property.
     * @param {string} property Name of the property
     * @param {boolean=} readOnly When true, no setter is created
     * @return {void}
     */
     _definePropertyAccessor(property, readOnly) {
      Object.defineProperty(this, property, {
        /* eslint-disable valid-jsdoc */
        /** @this {PropertiesChanged} */
        get() {
          return this.__data[property];
        },
        /** @this {PropertiesChanged} */
        set: readOnly ? function () {} : function (value) {
          this._setProperty(property, value);
        }
        /* eslint-enable */
      });
    }

    constructor() {
      super();
      this.__dataEnabled = false;
      this.__dataReady = false;
      this.__dataInvalid = false;
      this.__data = {};
      this.__dataPending = null;
      this.__dataOld = null;
      this.__dataInstanceProps = null;
      this.__serializing = false;
      this._initializeProperties();
    }

    /**
     * Lifecycle callback called when properties are enabled via
     * `_enableProperties`.
     *
     * Users may override this function to implement behavior that is
     * dependent on the element having its property data initialized, e.g.
     * from defaults (initialized from `constructor`, `_initializeProperties`),
     * `attributeChangedCallback`, or values propagated from host e.g. via
     * bindings.  `super.ready()` must be called to ensure the data system
     * becomes enabled.
     *
     * @return {void}
     * @public
     */
    ready() {
      this.__dataReady = true;
      this._flushProperties();
    }

    /**
     * Initializes the local storage for property accessors.
     *
     * Provided as an override point for performing any setup work prior
     * to initializing the property accessor system.
     *
     * @return {void}
     * @protected
     */
    _initializeProperties() {
      // Capture instance properties; these will be set into accessors
      // during first flush. Don't set them here, since we want
      // these to overwrite defaults/constructor assignments
      for (let p in this.__dataHasAccessor) {
        if (this.hasOwnProperty(p)) {
          this.__dataInstanceProps = this.__dataInstanceProps || {};
          this.__dataInstanceProps[p] = this[p];
          delete this[p];
        }
      }
    }

    /**
     * Called at ready time with bag of instance properties that overwrote
     * accessors when the element upgraded.
     *
     * The default implementation sets these properties back into the
     * setter at ready time.  This method is provided as an override
     * point for customizing or providing more efficient initialization.
     *
     * @param {Object} props Bag of property values that were overwritten
     *   when creating property accessors.
     * @return {void}
     * @protected
     */
    _initializeInstanceProperties(props) {
      Object.assign(this, props);
    }

    /**
     * Updates the local storage for a property (via `_setPendingProperty`)
     * and enqueues a `_proeprtiesChanged` callback.
     *
     * @param {string} property Name of the property
     * @param {*} value Value to set
     * @return {void}
     * @protected
     */
    _setProperty(property, value) {
      if (this._setPendingProperty(property, value)) {
        this._invalidateProperties();
      }
    }

    /**
     * Returns the value for the given property.
     * @param {string} property Name of property
     * @return {*} Value for the given property
     * @protected
     */
    _getProperty(property) {
      return this.__data[property];
    }

    /* eslint-disable no-unused-vars */
    /**
     * Updates the local storage for a property, records the previous value,
     * and adds it to the set of "pending changes" that will be passed to the
     * `_propertiesChanged` callback.  This method does not enqueue the
     * `_propertiesChanged` callback.
     *
     * @param {string} property Name of the property
     * @param {*} value Value to set
     * @param {boolean=} ext Not used here; affordance for closure
     * @return {boolean} Returns true if the property changed
     * @protected
     */
    _setPendingProperty(property, value, ext) {
      let old = this.__data[property];
      let changed = this._shouldPropertyChange(property, value, old);
      if (changed) {
        if (!this.__dataPending) {
          this.__dataPending = {};
          this.__dataOld = {};
        }
        // Ensure old is captured from the last turn
        if (this.__dataOld && !(property in this.__dataOld)) {
          this.__dataOld[property] = old;
        }
        this.__data[property] = value;
        this.__dataPending[property] = value;
      }
      return changed;
    }
    /* eslint-enable */

    /**
     * Marks the properties as invalid, and enqueues an async
     * `_propertiesChanged` callback.
     *
     * @return {void}
     * @protected
     */
    _invalidateProperties() {
      if (!this.__dataInvalid && this.__dataReady) {
        this.__dataInvalid = true;
        microtask.run(() => {
          if (this.__dataInvalid) {
            this.__dataInvalid = false;
            this._flushProperties();
          }
        });
      }
    }

    /**
     * Call to enable property accessor processing. Before this method is
     * called accessor values will be set but side effects are
     * queued. When called, any pending side effects occur immediately.
     * For elements, generally `connectedCallback` is a normal spot to do so.
     * It is safe to call this method multiple times as it only turns on
     * property accessors once.
     *
     * @return {void}
     * @protected
     */
    _enableProperties() {
      if (!this.__dataEnabled) {
        this.__dataEnabled = true;
        if (this.__dataInstanceProps) {
          this._initializeInstanceProperties(this.__dataInstanceProps);
          this.__dataInstanceProps = null;
        }
        this.ready();
      }
    }

    /**
     * Calls the `_propertiesChanged` callback with the current set of
     * pending changes (and old values recorded when pending changes were
     * set), and resets the pending set of changes. Generally, this method
     * should not be called in user code.
     *
     * @return {void}
     * @protected
     */
    _flushProperties() {
      if (this.__dataPending && this.__dataOld) {
        let changedProps = this.__dataPending;
        this.__dataPending = null;
        this._propertiesChanged(this.__data, changedProps, this.__dataOld);
      }
    }

    /**
     * Callback called when any properties with accessors created via
     * `_createPropertyAccessor` have been set.
     *
     * @param {!Object} currentProps Bag of all current accessor values
     * @param {!Object} changedProps Bag of properties changed since the last
     *   call to `_propertiesChanged`
     * @param {!Object} oldProps Bag of previous values for each property
     *   in `changedProps`
     * @return {void}
     * @protected
     */
    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
    }

    /**
     * Method called to determine whether a property value should be
     * considered as a change and cause the `_propertiesChanged` callback
     * to be enqueued.
     *
     * The default implementation returns `true` if a strict equality
     * check fails. The method always returns false for `NaN`.
     *
     * Override this method to e.g. provide stricter checking for
     * Objects/Arrays when using immutable patterns.
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     *   and enqueue a `_proeprtiesChanged` callback
     * @protected
     */
    _shouldPropertyChange(property, value, old) {
      return (
        // Strict equality check
        (old !== value &&
          // This ensures (old==NaN, value==NaN) always returns false
          (old === old || value === value))
      );
    }

    /**
     * Implements native Custom Elements `attributeChangedCallback` to
     * set an attribute value to a property via `_attributeToProperty`.
     *
     * @param {string} name Name of attribute that changed
     * @param {?string} old Old attribute value
     * @param {?string} value New attribute value
     * @return {void}
     * @suppress {missingProperties} Super may or may not implement the callback
     */
    attributeChangedCallback(name, old, value) {
      if (old !== value) {
        this._attributeToProperty(name, value);
      }
      if (super.attributeChangedCallback) {
        super.attributeChangedCallback(name, old, value);
      }
    }

    /**
     * Deserializes an attribute to its associated property.
     *
     * This method calls the `_deserializeValue` method to convert the string to
     * a typed value.
     *
     * @param {string} attribute Name of attribute to deserialize.
     * @param {?string} value of the attribute.
     * @param {*=} type type to deserialize to, defaults to the value
     * returned from `typeForProperty`
     * @return {void}
     */
    _attributeToProperty(attribute, value, type) {
      if (!this.__serializing) {
        const map = this.__dataAttributes;
        const property = map && map[attribute] || attribute;
        this[property] = this._deserializeValue(value, type ||
          this.constructor.typeForProperty(property));
      }
    }

    /**
     * Serializes a property to its associated attribute.
     *
     * @suppress {invalidCasts} Closure can't figure out `this` is an element.
     *
     * @param {string} property Property name to reflect.
     * @param {string=} attribute Attribute name to reflect to.
     * @param {*=} value Property value to refect.
     * @return {void}
     */
    _propertyToAttribute(property, attribute, value) {
      this.__serializing = true;
      value = (arguments.length < 3) ? this[property] : value;
      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,
        attribute || this.constructor.attributeNameForProperty(property));
      this.__serializing = false;
    }

    /**
     * Sets a typed value to an HTML attribute on a node.
     *
     * This method calls the `_serializeValue` method to convert the typed
     * value to a string.  If the `_serializeValue` method returns `undefined`,
     * the attribute will be removed (this is the default for boolean
     * type `false`).
     *
     * @param {Element} node Element to set attribute to.
     * @param {*} value Value to serialize.
     * @param {string} attribute Attribute name to serialize to.
     * @return {void}
     */
    _valueToNodeAttribute(node, value, attribute) {
      const str = this._serializeValue(value);
      if (str === undefined) {
        node.removeAttribute(attribute);
      } else {
        node.setAttribute(attribute, str);
      }
    }

    /**
     * Converts a typed JavaScript value to a string.
     *
     * This method is called when setting JS property values to
     * HTML attributes.  Users may override this method to provide
     * serialization for custom types.
     *
     * @param {*} value Property value to serialize.
     * @return {string | undefined} String serialized from the provided
     * property  value.
     */
    _serializeValue(value) {
      switch (typeof value) {
        case 'boolean':
          return value ? '' : undefined;
        default:
          return value != null ? value.toString() : undefined;
      }
    }

    /**
     * Converts a string to a typed JavaScript value.
     *
     * This method is called when reading HTML attribute values to
     * JS properties.  Users may override this method to provide
     * deserialization for custom `type`s. Types for `Boolean`, `String`,
     * and `Number` convert attributes to the expected types.
     *
     * @param {?string} value Value to deserialize.
     * @param {*=} type Type to deserialize the string to.
     * @return {*} Typed value deserialized from the provided string.
     */
    _deserializeValue(value, type) {
      switch (type) {
        case Boolean:
          return (value !== null);
        case Number:
          return Number(value);
        default:
          return value;
      }
    }

  }

  return PropertiesChanged;
});
/* harmony export (immutable) */ __webpack_exports__["a"] = PropertiesChanged;



/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_mixin_js__ = __webpack_require__(2);


// Common implementation for mixin & behavior
function mutablePropertyChange(inst, property, value, old, mutableData) {
  let isObject;
  if (mutableData) {
    isObject = (typeof value === 'object' && value !== null);
    // Pull `old` for Objects from temp cache, but treat `null` as a primitive
    if (isObject) {
      old = inst.__dataTemp[property];
    }
  }
  // Strict equality check, but return false for NaN===NaN
  let shouldChange = (old !== value && (old === old || value === value));
  // Objects are stored in temporary cache (cleared at end of
  // turn), which is used for dirty-checking
  if (isObject && shouldChange) {
    inst.__dataTemp[property] = value;
  }
  return shouldChange;
}

const MutableData = Object(__WEBPACK_IMPORTED_MODULE_0__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @polymer
   * @mixinClass
   * @implements {Polymer_MutableData}
   */
  class MutableData extends superClass {
    /**
     * Overrides `Polymer.PropertyEffects` to provide option for skipping
     * strict equality checking for Objects and Arrays.
     *
     * This method pulls the value to dirty check against from the `__dataTemp`
     * cache (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     */
    _shouldPropertyChange(property, value, old) {
      return mutablePropertyChange(this, property, value, old, true);
    }

  }
  /** @type {boolean} */
  MutableData.prototype.mutableData = false;

  return MutableData;

});
/* harmony export (immutable) */ __webpack_exports__["a"] = MutableData;


const OptionalMutableData = Object(__WEBPACK_IMPORTED_MODULE_0__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @mixinClass
   * @polymer
   * @implements {Polymer_OptionalMutableData}
   */
  class OptionalMutableData extends superClass {

    static get properties() {
      return {
        /**
         * Instance-level flag for configuring the dirty-checking strategy
         * for this element.  When true, Objects and Arrays will skip dirty
         * checking, otherwise strict equality checking will be used.
         */
        mutableData: Boolean
      };
    }

    /**
     * Overrides `Polymer.PropertyEffects` to provide option for skipping
     * strict equality checking for Objects and Arrays.
     *
     * When `this.mutableData` is true on this instance, this method
     * pulls the value to dirty check against from the `__dataTemp` cache
     * (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     */
    _shouldPropertyChange(property, value, old) {
      return mutablePropertyChange(this, property, value, old, this.mutableData);
    }
  }

  return OptionalMutableData;

});
/* harmony export (immutable) */ __webpack_exports__["b"] = OptionalMutableData;


// Export for use by legacy behavior
MutableData._mutablePropertyChange = mutablePropertyChange;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(11);
  var warning = __webpack_require__(12);
  var ReactPropTypesSecret = __webpack_require__(50);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(3);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = __webpack_require__(53);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

(function () {
    // @ts-ignore
    const libLoaded = Promise.resolve().then(() => __webpack_require__(/* webpackChunkName: "app" */ 27));
    const dataLoaded = Promise.resolve().then(() => __webpack_require__(/* webpackChunkName: "data" */ 60));
    const buttonPressed = new Promise(resolve => document.getElementById('new-game').addEventListener('click', resolve));
    Promise.all([libLoaded, dataLoaded, buttonPressed]).then(([lib, data, button]) => {
        console.log('loaded');
        const loadingScreen = document.getElementById('loading-screen');
        loadingScreen.parentNode.removeChild(loadingScreen);
        // @ts-ignore
        document.body.appendChild(new lib.MyApp(data));
    });
    document.getElementById('new-game').click();
})();


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(28);
const view_1 = __webpack_require__(29);
exports.MyApp = view_1.MyApp;
__webpack_require__(47);


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

(function() {
  'use strict';
  // global for (1) existence means `WebComponentsReady` will file,
  // (2) WebComponents.ready == true means event has fired.
  window.WebComponents = window.WebComponents || {};
  var name = 'webcomponents-loader.js';
  // Feature detect which polyfill needs to be imported.
  var polyfills = [];
  if (!('import' in document.createElement('link'))) {
    polyfills.push('hi');
  }
  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||
    (window.ShadyDOM && window.ShadyDOM.force)) {
    polyfills.push('sd');
  }
  if (!window.customElements || window.customElements.forcePolyfill) {
    polyfills.push('ce');
  }
  // NOTE: any browser that does not have template or ES6 features
  // must load the full suite (called `lite` for legacy reasons) of polyfills.
  if (!('content' in document.createElement('template')) || !window.Promise || !Array.from ||
    // Edge has broken fragment cloning which means you cannot clone template.content
    !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment)) {
    polyfills = ['lite'];
  }

  if (polyfills.length) {
    var script = document.querySelector('script[src*="' + name +'"]');
    var newScript = document.createElement('script');
    // Load it from the right place.
    var replacement = 'webcomponents-' + polyfills.join('-') + '.js';
    var url = script.src.replace(name, replacement);
    newScript.src = url;
    // NOTE: this is required to ensure the polyfills are loaded before
    // *native* html imports load on older Chrome versions. This *is* CSP
    // compliant since CSP rules must have allowed this script to run.
    // In all other cases, this can be async.
    if (document.readyState === 'loading' && ('import' in document.createElement('link'))) {
      document.write(newScript.outerHTML);
    } else {
      document.head.appendChild(newScript);
    }
  } else {
    // Ensure `WebComponentsReady` is fired also when there are no polyfills loaded.
    // however, we have to wait for the document to be in 'interactive' state,
    // otherwise a rAF may fire before scripts in <body>

    var fire = function() {
      requestAnimationFrame(function() {
        window.WebComponents.ready = true;
        document.dispatchEvent(new CustomEvent('WebComponentsReady', {bubbles: true}));
      });
    };

    if (document.readyState !== 'loading') {
      fire();
    } else {
      document.addEventListener('readystatechange', function wait() {
        fire();
        document.removeEventListener('readystatechange', wait);
      });
    }
  }
})();


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = __webpack_require__(30);
const _ = __webpack_require__(7);
const util = __webpack_require__(33);
const layout = __webpack_require__(34);
__webpack_require__(35);
__webpack_require__(46);
// Element is the same as Polymer.Element in 2.x
// Modules give you the freedom to rename the members that you import
const polymer_element_js_1 = __webpack_require__(13);
// Added "export" to export the MyApp symbol from the module
class MyApp extends polymer_element_js_1.Element {
    // Define a string template instead of a `<template>` element.
    static get template() {
        return `
    <style>
    :host {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        display: flex;

        flex-flow: column nowrap;
        align-items: center;

        font-family: Roboto;
      }
      * {

        box-sizing:border-box;
      }
      card {
        font-size: 40px;
      }

      button {
        font-size: 40px;
      }
      #suggestions {
        display: flex;
        height: 70px;
      }

      #working-set {
        display: flex;
        height: 70px;
      }

      .tile {
        width: 70px;
        height: 70px;
        text-transform: uppercase;
      }

      .slot {
        border: 1px solid black;
        width: 70px;
        height: 70px;
      }

      .box {
        position: absolute;
        border: 1px solid grey;
        text-transform: uppercase;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      #answers {
        position: relative;

        font-size: 20px;

        border: 1px solid grey;

        align-self: stretch;
        flex: 1;
      }
    </style>
    <div class="card" id="scoreboard">
      <label>Score: </label><span>[[score]]</span>
      <label>Time left: </label><span>[[time]]</span>
    </div>

    <div hidden="[[!showRoundOver]]">
      Round Over!
      <button on-click="nextRound">Next Round</button>
    </div>

    <div hidden="[[!showGameOver]]">
      Game Over!
      <button on-click="newGame">New Game</button>
    </div>

    <div>
      <div id="suggestions">
        <template is="dom-repeat" items="[[suggestions]]">
          <button class="tile" on-click="select">[[item.letter]]</button>
        </template>
      </div>
      <div id="working-set">
        <template is="dom-repeat" items="[[available]]">
          <button class="tile" on-click="select">[[item.letter]]</button>
        </template>
      </div>
      <div class="card">
        <button on-click="backspace">Back</button>
        <button on-click="_submit">Submit</button>
        <button on-click="_shuffle">Shuffle</button>
        <span hidden$="[[!wrong]]">Wrong</span>
      </div>
    </div>

    <div id="answers">
      <template is="dom-repeat" items="[[answers]]" as="answer" index-as="answerIdx">
        <template is="dom-repeat" items="[[lettersOf(answer.word)]]" as="letter" index-as="letterIdx">
          <div class="box" style$="[[styleOf(answerIdx, letterIdx)]]"><span hidden$="[[answer.hidden]]">[[letter]]</span></div>
        </template>
      </template>
    </div>`;
    }
    constructor(words) {
        super();
        this._c = new game_1.Controller(words);
        this._newGame();
        this._newRound();
        this.wrong = false;
        this.showRoundOver = false;
        this.showGameOver = false;
        document.addEventListener('keydown', this._handleKeydown.bind(this));
        setInterval(this._heartbeat.bind(this), 1000);
    }
    _newGame() {
        this._c.newGame();
        this.score = 0;
        this.showGameOver = false;
    }
    _newRound() {
        this.showRoundOver = false;
        let resp = this._c.newRound();
        console.log(this._c);
        this.tiles = resp.tiles.map((t, idx) => ({
            letter: t,
            idx: idx,
            position: {
                slot: idx,
                isSuggestion: false
            },
        }));
        this.answers = resp.answers.map(a => ({
            word: a,
            hidden: true,
            spaces: _.times(a.length, () => '_ ').join('')
        }));
        this._endTime = resp.endTime;
        this._resetButtons();
    }
    lettersOf(word) {
        return word.split('');
    }
    styleOf(wordIdx, letterIdx) {
        let lh = new layout.LayoutHelper(this._layout);
        let pos = lh.getLetterCoordinates(wordIdx, letterIdx);
        return `
      left: ${pos.x}px;
      top: ${pos.y}px;
      width: ${this._layout.tileSizePx}px;
      height: ${this._layout.tileSizePx}px;
      font-size: ${this._layout.tileSizePx * 0.63}px;
    `;
    }
    nextRound() {
        this._newRound();
    }
    ready() {
        super.ready();
        let answers = this.answers.map(a => a.word);
        this._layout = layout.getOptimalLayout(answers, 0.2, 1.2, this.$.answers.offsetWidth, this.$.answers.offsetHeight);
        answers.forEach((a, wordIdx) => {
            for (let letterIdx = 0; letterIdx < a.length; letterIdx++) {
                let box = document.createElement('div');
                box.className = 'box';
                this.$.answers.appendChild(box);
            }
        });
    }
    _updateTime() {
        let timeLeft = Math.max(0, this._endTime - Date.now());
        this.time = util.formatMillis(timeLeft);
    }
    _heartbeat() {
        this._updateTime();
        let resp = this._c.heartbeat();
        if (resp.roundEnd) {
            this.showRoundOver = true;
            for (let answerIdx of resp.roundEnd.reveal) {
                this._reveal(answerIdx);
            }
        }
    }
    _handleKeydown(e) {
        let charCode = e.keyCode;
        const [a, z, A, Z] = ['a', 'z', 'A', 'Z'].map((s) => s.charCodeAt(0));
        if (a <= charCode && charCode <= z) {
            this._typeChar(String.fromCharCode(charCode));
        }
        else if (A <= charCode && charCode <= Z) {
            this._typeChar(String.fromCharCode(charCode - A + a));
        }
        else if (e.code == 'Backspace') {
            e.preventDefault();
            this._backspace();
        }
        else if (e.code == 'Enter') {
            e.preventDefault();
            this._submit();
        }
        else if (e.code == 'Space') {
            e.preventDefault();
            this._shuffle();
        }
        return false;
    }
    _typeChar(c) {
        this._moveTiles(this._c.typeCharacter(c).moves);
    }
    select(selectEvent) {
        if (selectEvent.model.item == -1) {
            return;
        }
        this._moveTiles(this._c.selectTile(selectEvent.model.item.idx).moves);
    }
    _moveTiles(moves) {
        moves.forEach(m => this._moveTile(m.tileIdx, m.position));
    }
    _moveTile(tileIdx, pos) {
        this.set(['tiles', tileIdx, 'position'], pos);
        this._resetButtons();
    }
    _resetButtons() {
        let suggestions = this.tiles.map(() => ({
            letter: '',
            idx: -1
        }));
        let available = this.tiles.map(() => ({
            letter: '',
            idx: -1
        }));
        this.tiles.map((t, idx) => {
            (t.position.isSuggestion ? suggestions : available)[t.position.slot] = {
                letter: t.letter,
                idx: idx,
            };
        });
        this.suggestions = suggestions;
        this.available = available;
    }
    _reveal(answerIdx) {
        this.set(['answers', answerIdx, 'hidden'], false);
    }
    _submit() {
        let resp = this._c.submit();
        this.score = resp.score;
        this._moveTiles(resp.moves);
        if (resp.accept) {
            this._reveal(resp.accept.answerIdx);
        }
        if (resp.reject) {
            this.wrong = true;
            window.setTimeout(() => this.wrong = false, 1000);
        }
    }
    _shuffle() {
        this._moveTiles(this._c.shuffle().moves);
    }
    _backspace() {
        this._moveTiles(this._c.backspace().moves);
    }
}
exports.MyApp = MyApp;
customElements.define('ww-app', MyApp);


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _ = __webpack_require__(7);
const ROUND_LENGTH_SEC = 180;
var GameState;
(function (GameState) {
    GameState["STATE_WAITING_FOR_NEXT_GAME"] = "WAITING_FOR_NEXT_GAME";
    GameState["STATE_WAITING_FOR_NEXT_ROUND"] = "WAITING_FOR_NEXT_ROUND";
    GameState["STATE_ROUND"] = "ROUND";
})(GameState || (GameState = {}));
;
class Controller {
    constructor(wordList) {
        this._wordList = wordList;
        this._state = GameState.STATE_WAITING_FOR_NEXT_GAME;
    }
    newGame() {
        this._checkState(GameState.STATE_WAITING_FOR_NEXT_GAME);
        this._state = GameState.STATE_WAITING_FOR_NEXT_ROUND;
        this._score = 0;
    }
    newRound() {
        this._checkState(GameState.STATE_WAITING_FOR_NEXT_ROUND);
        let gameStructure = _.sample(this._wordList.containment);
        let tiles = _.shuffle(this._wordList.words[gameStructure.fullWord].split(''));
        let answers = gameStructure.subwords.map(i => this._wordList.words[i]);
        answers = _.sortBy(answers, ['length', _.identity]);
        this._tiles = tiles.map((t, idx) => ({
            letter: t,
            slotIdx: idx,
            isSuggestion: false,
        }));
        this._answers = answers.map(a => ({
            answer: a,
            guessed: false,
        }));
        this._available = [...tiles.keys()]; // Range
        this._suggestions = [];
        this._endTime = Date.now() + ROUND_LENGTH_SEC * 1000;
        this._state = GameState.STATE_ROUND;
        return {
            tiles: tiles,
            answers: answers,
            endTime: this._endTime,
        };
    }
    selectTile(tileIdx) {
        this._checkState(GameState.STATE_ROUND);
        let tile = this._tiles[tileIdx];
        if (tile.isSuggestion) {
            if (tile.slotIdx != this._suggestions.length - 1) {
                return {
                    moves: []
                };
            }
            return this.backspace();
        }
        else {
            this._suggestions.push(tileIdx);
            this._available[tile.slotIdx] = -1;
            tile.slotIdx = this._suggestions.length - 1;
            tile.isSuggestion = true;
            return {
                moves: [{
                        tileIdx: tileIdx,
                        position: {
                            slot: tile.slotIdx,
                            isSuggestion: tile.isSuggestion,
                        }
                    }]
            };
        }
    }
    heartbeat() {
        if (this._state != GameState.STATE_ROUND) {
            return {};
        }
        if (this._endTime < Date.now()) {
            this._state = GameState.STATE_WAITING_FOR_NEXT_ROUND;
            let toReveal = _.filter([...this._answers.keys()], (idx) => !this._answers[idx].guessed);
            return {
                roundEnd: {
                    reveal: toReveal,
                },
            };
        }
        return {};
    }
    backspace() {
        this._checkState(GameState.STATE_ROUND);
        if (this._suggestions.length == 0) {
            return {
                moves: []
            };
        }
        return {
            moves: [this._doBackspace()]
        };
    }
    _doBackspace() {
        let tileIdx = this._suggestions[this._suggestions.length - 1];
        let tile = this._tiles[tileIdx];
        let dest = this._nthEmpty(tile.slotIdx);
        this._available[dest] = tileIdx;
        this._suggestions.pop();
        tile.slotIdx = dest;
        tile.isSuggestion = false;
        return {
            tileIdx: tileIdx,
            position: {
                slot: tile.slotIdx,
                isSuggestion: tile.isSuggestion,
            }
        };
    }
    _nthEmpty(n) {
        let res = -1;
        for (let i = 0; i < n + 1; i++) {
            res = _.findIndex(this._available, (s) => s == -1, res + 1);
        }
        return res;
    }
    submit() {
        this._checkState(GameState.STATE_ROUND);
        let guess = this._suggestions.map(tileIdx => this._tiles[tileIdx].letter).join('');
        let answerIdx = _.findIndex(this._answers, {
            // @ts-ignore
            'answer': guess
        });
        if (answerIdx != -1) {
            if (this._answers[answerIdx].guessed) {
                return {
                    duplicate: {
                        answerIdx: answerIdx
                    },
                    score: this._score,
                    moves: _.times(guess.length, this._doBackspace.bind(this)),
                };
            }
            else {
                this._answers[answerIdx].guessed = true;
                this._score += guess.length * guess.length;
                return {
                    accept: {
                        answerIdx: answerIdx,
                    },
                    score: this._score,
                    moves: _.times(guess.length, this._doBackspace.bind(this)),
                };
            }
        }
        else {
            return {
                reject: {},
                score: this._score,
                moves: [],
            };
        }
    }
    // TODO: This could be a bit prettier by only swapping filled slots, not
    // moving things to entirely new slots.
    shuffle() {
        this._checkState(GameState.STATE_ROUND);
        let moves = [];
        let perm = _.shuffle(_.range(6));
        let newAvailable = [];
        for (let i = 0; i < perm.length; i++) {
            newAvailable[perm[i]] = this._available[i];
            if (this._available[i] != -1) {
                this._tiles[this._available[i]].slotIdx = perm[i];
                moves.push({
                    tileIdx: this._available[i],
                    position: {
                        slot: perm[i],
                        isSuggestion: false,
                    }
                });
            }
        }
        this._available = newAvailable;
        return {
            moves: moves
        };
    }
    typeCharacter(char) {
        this._checkState(GameState.STATE_ROUND);
        // TODO: Select the leftmost matching letter.
        let index = _.findIndex(this._tiles, t => t.letter == char && !t.isSuggestion);
        if (index == -1) {
            return {
                moves: []
            };
        }
        return this.selectTile(index);
    }
    _checkState(expectedState) {
        if (this._state != expectedState) {
            throw 'Invalid game state';
        }
    }
}
exports.Controller = Controller;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function formatMillis(ms) {
    var date = new Date(null);
    date.setMilliseconds(ms);
    return date.toISOString().substr(15, 4);
}
exports.formatMillis = formatMillis;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Helpers for laying out elements.
Object.defineProperty(exports, "__esModule", { value: true });
//import * as _ from '../node_modules/lodash-es/lodash.js'
const _ = __webpack_require__(7);
function getScalingFactorToFit(insideAspect, containerAspect) {
    if (insideAspect < containerAspect) {
        return 1;
    }
    else {
        return containerAspect / insideAspect;
    }
}
function getLayout(answers, numCols, rowGutterFraction, columnGutterFraction, containerWidthPx, containerHeightPx) {
    let numRows = Math.ceil(answers.length / numCols);
    let columns = _.chunk(answers, numRows);
    let columnWidths = columns.map(c => _.last(c).length);
    let width = _.sum(columnWidths) + columns.length * columnGutterFraction;
    let height = numRows * (1 + rowGutterFraction);
    // We'll scale so that the height of the box is containerHeightPx.
    let scalingFactor = containerHeightPx / height;
    // Now to make it fit inside the container.
    scalingFactor *= getScalingFactorToFit(width / height, containerWidthPx / containerHeightPx);
    return {
        numRows: numRows,
        columnWidths: columnWidths,
        tileSizePx: 1 * scalingFactor,
        width: scalingFactor * width,
        height: scalingFactor * height,
        rowGutterSize: scalingFactor * rowGutterFraction,
        columnGutterSize: scalingFactor * columnGutterFraction,
    };
}
function getOptimalLayout(answers, rowGutterFraction, columnGutterFraction, containerWidthPx, containerHeightPx) {
    let layouts = _.range(1, 1 + answers.length).map((numCols) => getLayout(answers, numCols, rowGutterFraction, columnGutterFraction, containerWidthPx, containerHeightPx));
    return _.maxBy(layouts, t => t.tileSizePx);
}
exports.getOptimalLayout = getOptimalLayout;
class LayoutHelper {
    constructor(layoutSpec) {
        this._l = layoutSpec;
    }
    getWordCoordinates(wordIdx) {
        let rowIdx = wordIdx % this._l.numRows;
        let columnIdx = Math.floor(wordIdx / this._l.numRows);
        let widthOfPrevCols = _.sum(this._l.columnWidths.slice(0, columnIdx));
        return {
            x: widthOfPrevCols * this._l.tileSizePx + (0.5 + columnIdx) * this._l.columnGutterSize,
            y: rowIdx * (this._l.tileSizePx + this._l.rowGutterSize) + (0.5 * this._l.rowGutterSize),
        };
    }
    getLetterCoordinates(wordIdx, letterIdx) {
        let word = this.getWordCoordinates(wordIdx);
        return {
            x: word.x + this._l.tileSizePx * letterIdx,
            y: word.y,
        };
    }
}
exports.LayoutHelper = LayoutHelper;


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomRepeat", function() { return DomRepeat; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polymer_element_js__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_templatize_js__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_debounce_js__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_flush_js__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_mutable_data_js__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_path_js__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_async_js__ = __webpack_require__(9);








let TemplateInstanceBase = __WEBPACK_IMPORTED_MODULE_1__utils_templatize_js__["a" /* TemplateInstanceBase */]; // eslint-disable-line

/**
 * @constructor
 * @implements {Polymer_OptionalMutableData}
 * @extends {Polymer.Element}
 */
const domRepeatBase = Object(__WEBPACK_IMPORTED_MODULE_4__mixins_mutable_data_js__["b" /* OptionalMutableData */])(__WEBPACK_IMPORTED_MODULE_0__polymer_element_js__["Element"]);

/**
 * The `<dom-repeat>` element will automatically stamp and binds one instance
 * of template content to each object in a user-provided array.
 * `dom-repeat` accepts an `items` property, and one instance of the template
 * is stamped for each item into the DOM at the location of the `dom-repeat`
 * element.  The `item` property will be set on each instance's binding
 * scope, thus templates should bind to sub-properties of `item`.
 *
 * Example:
 *
 * ```html
 * <dom-module id="employee-list">
 *
 *   <template>
 *
 *     <div> Employee list: </div>
 *     <template is="dom-repeat" items="{{employees}}">
 *         <div>First name: <span>{{item.first}}</span></div>
 *         <div>Last name: <span>{{item.last}}</span></div>
 *     </template>
 *
 *   </template>
 *
 *   <script>
 *     Polymer({
 *       is: 'employee-list',
 *       ready: function() {
 *         this.employees = [
 *             {first: 'Bob', last: 'Smith'},
 *             {first: 'Sally', last: 'Johnson'},
 *             ...
 *         ];
 *       }
 *     });
 *   < /script>
 *
 * </dom-module>
 * ```
 *
 * Notifications for changes to items sub-properties will be forwarded to template
 * instances, which will update via the normal structured data notification system.
 *
 * Mutations to the `items` array itself should be made using the Array
 * mutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,
 * `unshift`), and template instances will be kept in sync with the data in the
 * array.
 *
 * Events caught by event handlers within the `dom-repeat` template will be
 * decorated with a `model` property, which represents the binding scope for
 * each template instance.  The model is an instance of Polymer.Base, and should
 * be used to manipulate data on the instance, for example
 * `event.model.set('item.checked', true);`.
 *
 * Alternatively, the model for a template instance for an element stamped by
 * a `dom-repeat` can be obtained using the `modelForElement` API on the
 * `dom-repeat` that stamped it, for example
 * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
 * This may be useful for manipulating instance data of event targets obtained
 * by event handlers on parents of the `dom-repeat` (event delegation).
 *
 * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
 * `filter` and/or `sort` property.  This may be a string that names a function on
 * the host, or a function may be assigned to the property directly.  The functions
 * should implemented following the standard `Array` filter/sort API.
 *
 * In order to re-run the filter or sort functions based on changes to sub-fields
 * of `items`, the `observe` property may be set as a space-separated list of
 * `item` sub-fields that should cause a re-filter/sort when modified.  If
 * the filter or sort function depends on properties not contained in `items`,
 * the user should observe changes to those properties and call `render` to update
 * the view based on the dependency change.
 *
 * For example, for an `dom-repeat` with a filter of the following:
 *
 * ```js
 * isEngineer: function(item) {
 *     return item.type == 'engineer' || item.manager.type == 'engineer';
 * }
 * ```
 *
 * Then the `observe` property should be configured as follows:
 *
 * ```html
 * <template is="dom-repeat" items="{{employees}}"
 *           filter="isEngineer" observe="type manager.type">
 * ```
 *
 * @customElement
 * @polymer
 * @memberof Polymer
 * @extends {domRepeatBase}
 * @appliesMixin Polymer.OptionalMutableData
 * @summary Custom element for stamping instance of a template bound to
 *   items in an array.
 */
class DomRepeat extends domRepeatBase {

  // Not needed to find template; can be removed once the analyzer
  // can find the tag name from customElements.define call
  static get is() { return 'dom-repeat'; }

  static get template() { return null; }

  static get properties() {

    /**
     * Fired whenever DOM is added or removed by this template (by
     * default, rendering occurs lazily).  To force immediate rendering, call
     * `render`.
     *
     * @event dom-change
     */
    return {

      /**
       * An array containing items determining how many instances of the template
       * to stamp and that that each template instance should bind to.
       */
      items: {
        type: Array
      },

      /**
       * The name of the variable to add to the binding scope for the array
       * element associated with a given template instance.
       */
      as: {
        type: String,
        value: 'item'
      },

      /**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the sorted and filtered list of rendered items.
       * Note, for the index in the `this.items` array, use the value of the
       * `itemsIndexAs` property.
       */
      indexAs: {
        type: String,
        value: 'index'
      },

      /**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the `this.items` array. Note, for the index of
       * this instance in the sorted and filtered list of rendered items,
       * use the value of the `indexAs` property.
       */
      itemsIndexAs: {
        type: String,
        value: 'itemsIndex'
      },

      /**
       * A function that should determine the sort order of the items.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.sort`.
       * Using a sort function has no effect on the underlying `items` array.
       */
      sort: {
        type: Function,
        observer: '__sortChanged'
      },

      /**
       * A function that can be used to filter items out of the view.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.filter`.
       * Using a filter function has no effect on the underlying `items` array.
       */
      filter: {
        type: Function,
        observer: '__filterChanged'
      },

      /**
       * When using a `filter` or `sort` function, the `observe` property
       * should be set to a space-separated list of the names of item
       * sub-fields that should trigger a re-sort or re-filter when changed.
       * These should generally be fields of `item` that the sort or filter
       * function depends on.
       */
      observe: {
        type: String,
        observer: '__observeChanged'
      },

      /**
       * When using a `filter` or `sort` function, the `delay` property
       * determines a debounce time in ms after a change to observed item
       * properties that must pass before the filter or sort is re-run.
       * This is useful in rate-limiting shuffling of the view when
       * item changes may be frequent.
       */
      delay: Number,

      /**
       * Count of currently rendered items after `filter` (if any) has been applied.
       * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
       * set of template instances is rendered.
       *
       */
      renderedItemCount: {
        type: Number,
        notify: true,
        readOnly: true
      },

      /**
       * Defines an initial count of template instances to render after setting
       * the `items` array, before the next paint, and puts the `dom-repeat`
       * into "chunking mode".  The remaining items will be created and rendered
       * incrementally at each animation frame therof until all instances have
       * been rendered.
       */
      initialCount: {
        type: Number,
        observer: '__initializeChunking'
      },

      /**
       * When `initialCount` is used, this property defines a frame rate (in
       * fps) to target by throttling the number of instances rendered each
       * frame to not exceed the budget for the target frame rate.  The
       * framerate is effectively the number of `requestAnimationFrame`s that
       * it tries to allow to actually fire in a given second. It does this
       * by measuring the time between `rAF`s and continuously adjusting the
       * number of items created each `rAF` to maintain the target framerate.
       * Setting this to a higher number allows lower latency and higher
       * throughput for event handlers and other tasks, but results in a
       * longer time for the remaining items to complete rendering.
       */
      targetFramerate: {
        type: Number,
        value: 20
      },

      _targetFrameTime: {
        type: Number,
        computed: '__computeFrameTime(targetFramerate)'
      }

    };

  }

  static get observers() {
    return [ '__itemsChanged(items.*)' ];
  }

  constructor() {
    super();
    this.__instances = [];
    this.__limit = Infinity;
    this.__pool = [];
    this.__renderDebouncer = null;
    this.__itemsIdxToInstIdx = {};
    this.__chunkCount = null;
    this.__lastChunkTime = null;
    this.__sortFn = null;
    this.__filterFn = null;
    this.__observePaths = null;
    this.__ctor = null;
    this.__isDetached = true;
    this.template = null;
  }

  /**
   * @return {void}
   */
  disconnectedCallback() {
    super.disconnectedCallback();
    this.__isDetached = true;
    for (let i=0; i<this.__instances.length; i++) {
      this.__detachInstance(i);
    }
  }

  /**
   * @return {void}
   */
  connectedCallback() {
    super.connectedCallback();
    this.style.display = 'none';
    // only perform attachment if the element was previously detached.
    if (this.__isDetached) {
      this.__isDetached = false;
      let parent = this.parentNode;
      for (let i=0; i<this.__instances.length; i++) {
        this.__attachInstance(i, parent);
      }
    }
  }

  __ensureTemplatized() {
    // Templatizing (generating the instance constructor) needs to wait
    // until ready, since won't have its template content handed back to
    // it until then
    if (!this.__ctor) {
      let template = this.template = this.querySelector('template');
      if (!template) {
        // // Wait until childList changes and template should be there by then
        let observer = new MutationObserver(() => {
          if (this.querySelector('template')) {
            observer.disconnect();
            this.__render();
          } else {
            throw new Error('dom-repeat requires a <template> child');
          }
        });
        observer.observe(this, {childList: true});
        return false;
      }
      // Template instance props that should be excluded from forwarding
      let instanceProps = {};
      instanceProps[this.as] = true;
      instanceProps[this.indexAs] = true;
      instanceProps[this.itemsIndexAs] = true;
      this.__ctor = __WEBPACK_IMPORTED_MODULE_1__utils_templatize_js__["b" /* Templatize */].templatize(template, this, {
        mutableData: this.mutableData,
        parentModel: true,
        instanceProps: instanceProps,
        /**
         * @this {this}
         * @param {string} prop Property to set
         * @param {*} value Value to set property to
         */
        forwardHostProp: function(prop, value) {
          let i$ = this.__instances;
          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {
            inst.forwardHostProp(prop, value);
          }
        },
        /**
         * @this {this}
         * @param {Object} inst Instance to notify
         * @param {string} prop Property to notify
         * @param {*} value Value to notify
         */
        notifyInstanceProp: function(inst, prop, value) {
          if (Object(__WEBPACK_IMPORTED_MODULE_5__utils_path_js__["e" /* matches */])(this.as, prop)) {
            let idx = inst[this.itemsIndexAs];
            if (prop == this.as) {
              this.items[idx] = value;
            }
            let path = Object(__WEBPACK_IMPORTED_MODULE_5__utils_path_js__["i" /* translate */])(this.as, 'items.' + idx, prop);
            this.notifyPath(path, value);
          }
        }
      });
    }
    return true;
  }

  __getMethodHost() {
    // Technically this should be the owner of the outermost template.
    // In shadow dom, this is always getRootNode().host, but we can
    // approximate this via cooperation with our dataHost always setting
    // `_methodHost` as long as there were bindings (or id's) on this
    // instance causing it to get a dataHost.
    return this.__dataHost._methodHost || this.__dataHost;
  }

  __sortChanged(sort) {
    let methodHost = this.__getMethodHost();
    this.__sortFn = sort && (typeof sort == 'function' ? sort :
      function() { return methodHost[sort].apply(methodHost, arguments); });
    if (this.items) {
      this.__debounceRender(this.__render);
    }
  }

  __filterChanged(filter) {
    let methodHost = this.__getMethodHost();
    this.__filterFn = filter && (typeof filter == 'function' ? filter :
      function() { return methodHost[filter].apply(methodHost, arguments); });
    if (this.items) {
      this.__debounceRender(this.__render);
    }
  }

  __computeFrameTime(rate) {
    return Math.ceil(1000/rate);
  }

  __initializeChunking() {
    if (this.initialCount) {
      this.__limit = this.initialCount;
      this.__chunkCount = this.initialCount;
      this.__lastChunkTime = performance.now();
    }
  }

  __tryRenderChunk() {
    // Debounced so that multiple calls through `_render` between animation
    // frames only queue one new rAF (e.g. array mutation & chunked render)
    if (this.items && this.__limit < this.items.length) {
      this.__debounceRender(this.__requestRenderChunk);
    }
  }

  __requestRenderChunk() {
    requestAnimationFrame(()=>this.__renderChunk());
  }

  __renderChunk() {
    // Simple auto chunkSize throttling algorithm based on feedback loop:
    // measure actual time between frames and scale chunk count by ratio
    // of target/actual frame time
    let currChunkTime = performance.now();
    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);
    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;
    this.__limit += this.__chunkCount;
    this.__lastChunkTime = currChunkTime;
    this.__debounceRender(this.__render);
  }

  __observeChanged() {
    this.__observePaths = this.observe &&
      this.observe.replace('.*', '.').split(' ');
  }

  __itemsChanged(change) {
    if (this.items && !Array.isArray(this.items)) {
      console.warn('dom-repeat expected array for `items`, found', this.items);
    }
    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
    // path to that instance synchronously (returns false for non-item paths)
    if (!this.__handleItemPath(change.path, change.value)) {
      // Otherwise, the array was reset ('items') or spliced ('items.splices'),
      // so queue a full refresh
      this.__initializeChunking();
      this.__debounceRender(this.__render);
    }
  }

  __handleObservedPaths(path) {
    // Handle cases where path changes should cause a re-sort/filter
    if (this.__sortFn || this.__filterFn) {
      if (!path) {
        // Always re-render if the item itself changed
        this.__debounceRender(this.__render, this.delay);
      } else if (this.__observePaths) {
        // Otherwise, re-render if the path changed matches an observed path
        path = path.substring(path.indexOf('.') + 1);
        let paths = this.__observePaths;
        for (let i=0; i<paths.length; i++) {
          if (path.indexOf(paths[i]) === 0) {
            this.__debounceRender(this.__render, this.delay);
          }
        }
      }
    }
  }

  /**
   * @param {function(this:DomRepeat)} fn Function to debounce.
   * @param {number=} delay Delay in ms to debounce by.
   */
  __debounceRender(fn, delay = 0) {
    this.__renderDebouncer = __WEBPACK_IMPORTED_MODULE_2__utils_debounce_js__["a" /* Debouncer */].debounce(
          this.__renderDebouncer
        , delay > 0 ? __WEBPACK_IMPORTED_MODULE_6__utils_async_js__["b" /* timeOut */].after(delay) : __WEBPACK_IMPORTED_MODULE_6__utils_async_js__["a" /* microTask */]
        , fn.bind(this));
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_flush_js__["a" /* enqueueDebouncer */])(this.__renderDebouncer);
  }

  /**
   * Forces the element to render its content. Normally rendering is
   * asynchronous to a provoking change. This is done for efficiency so
   * that multiple changes trigger only a single render. The render method
   * should be called if, for example, template rendering is required to
   * validate application state.
   * @return {void}
   */
  render() {
    // Queue this repeater, then flush all in order
    this.__debounceRender(this.__render);
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_flush_js__["b" /* flush */])();
  }

  __render() {
    if (!this.__ensureTemplatized()) {
      // No template found yet
      return;
    }
    this.__applyFullRefresh();
    // Reset the pool
    // TODO(kschaaf): Reuse pool across turns and nested templates
    // Now that objects/arrays are re-evaluated when set, we can safely
    // reuse pooled instances across turns, however we still need to decide
    // semantics regarding how long to hold, how many to hold, etc.
    this.__pool.length = 0;
    // Set rendered item count
    this._setRenderedItemCount(this.__instances.length);
    // Notify users
    this.dispatchEvent(new CustomEvent('dom-change', {
      bubbles: true,
      composed: true
    }));
    // Check to see if we need to render more items
    this.__tryRenderChunk();
  }

  __applyFullRefresh() {
    let items = this.items || [];
    let isntIdxToItemsIdx = new Array(items.length);
    for (let i=0; i<items.length; i++) {
      isntIdxToItemsIdx[i] = i;
    }
    // Apply user filter
    if (this.__filterFn) {
      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>
        this.__filterFn(items[i], idx, array));
    }
    // Apply user sort
    if (this.__sortFn) {
      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));
    }
    // items->inst map kept for item path forwarding
    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};
    let instIdx = 0;
    // Generate instances and assign items
    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);
    for (; instIdx<limit; instIdx++) {
      let inst = this.__instances[instIdx];
      let itemIdx = isntIdxToItemsIdx[instIdx];
      let item = items[itemIdx];
      itemsIdxToInstIdx[itemIdx] = instIdx;
      if (inst && instIdx < this.__limit) {
        inst._setPendingProperty(this.as, item);
        inst._setPendingProperty(this.indexAs, instIdx);
        inst._setPendingProperty(this.itemsIndexAs, itemIdx);
        inst._flushProperties();
      } else {
        this.__insertInstance(item, instIdx, itemIdx);
      }
    }
    // Remove any extra instances from previous state
    for (let i=this.__instances.length-1; i>=instIdx; i--) {
      this.__detachAndRemoveInstance(i);
    }
  }

  __detachInstance(idx) {
    let inst = this.__instances[idx];
    for (let i=0; i<inst.children.length; i++) {
      let el = inst.children[i];
      inst.root.appendChild(el);
    }
    return inst;
  }

  __attachInstance(idx, parent) {
    let inst = this.__instances[idx];
    parent.insertBefore(inst.root, this);
  }

  __detachAndRemoveInstance(idx) {
    let inst = this.__detachInstance(idx);
    if (inst) {
      this.__pool.push(inst);
    }
    this.__instances.splice(idx, 1);
  }

  __stampInstance(item, instIdx, itemIdx) {
    let model = {};
    model[this.as] = item;
    model[this.indexAs] = instIdx;
    model[this.itemsIndexAs] = itemIdx;
    return new this.__ctor(model);
  }

  __insertInstance(item, instIdx, itemIdx) {
    let inst = this.__pool.pop();
    if (inst) {
      // TODO(kschaaf): If the pool is shared across turns, hostProps
      // need to be re-set to reused instances in addition to item
      inst._setPendingProperty(this.as, item);
      inst._setPendingProperty(this.indexAs, instIdx);
      inst._setPendingProperty(this.itemsIndexAs, itemIdx);
      inst._flushProperties();
    } else {
      inst = this.__stampInstance(item, instIdx, itemIdx);
    }
    let beforeRow = this.__instances[instIdx + 1];
    let beforeNode = beforeRow ? beforeRow.children[0] : this;
    this.parentNode.insertBefore(inst.root, beforeNode);
    this.__instances[instIdx] = inst;
    return inst;
  }

  // Implements extension point from Templatize mixin
  /**
   * Shows or hides the template instance top level child elements. For
   * text nodes, `textContent` is removed while "hidden" and replaced when
   * "shown."
   * @param {boolean} hidden Set to true to hide the children;
   * set to false to show them.
   * @return {void}
   * @protected
   */
  _showHideChildren(hidden) {
    for (let i=0; i<this.__instances.length; i++) {
      this.__instances[i]._showHideChildren(hidden);
    }
  }

  // Called as a side effect of a host items.<key>.<path> path change,
  // responsible for notifying item.<path> changes to inst for key
  __handleItemPath(path, value) {
    let itemsPath = path.slice(6); // 'items.'.length == 6
    let dot = itemsPath.indexOf('.');
    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);
    // If path was index into array...
    if (itemsIdx == parseInt(itemsIdx, 10)) {
      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);
      // If the path is observed, it will trigger a full refresh
      this.__handleObservedPaths(itemSubPath);
      // Note, even if a rull refresh is triggered, always do the path
      // notification because unless mutableData is used for dom-repeat
      // and all elements in the instance subtree, a full refresh may
      // not trigger the proper update.
      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];
      let inst = this.__instances[instIdx];
      if (inst) {
        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');
        // This is effectively `notifyPath`, but avoids some of the overhead
        // of the public API
        inst._setPendingPropertyOrPath(itemPath, value, false, true);
        inst._flushProperties();
      }
      return true;
    }
  }

  /**
   * Returns the item associated with a given element stamped by
   * this `dom-repeat`.
   *
   * Note, to modify sub-properties of the item,
   * `modelForElement(el).set('item.<sub-prop>', value)`
   * should be used.
   *
   * @param {!HTMLElement} el Element for which to return the item.
   * @return {*} Item associated with the element.
   */
  itemForElement(el) {
    let instance = this.modelForElement(el);
    return instance && instance[this.as];
  }

  /**
   * Returns the inst index for a given element stamped by this `dom-repeat`.
   * If `sort` is provided, the index will reflect the sorted order (rather
   * than the original array order).
   *
   * @param {!HTMLElement} el Element for which to return the index.
   * @return {?number} Row index associated with the element (note this may
   *   not correspond to the array index if a user `sort` is applied).
   */
  indexForElement(el) {
    let instance = this.modelForElement(el);
    return instance && instance[this.indexAs];
  }

  /**
   * Returns the template "model" associated with a given element, which
   * serves as the binding scope for the template instance the element is
   * contained in. A template model is an instance of `Polymer.Base`, and
   * should be used to manipulate data associated with this template instance.
   *
   * Example:
   *
   *   let model = modelForElement(el);
   *   if (model.index < 10) {
   *     model.set('item.checked', true);
   *   }
   *
   * @param {!HTMLElement} el Element for which to return a template model.
   * @return {TemplateInstanceBase} Model representing the binding scope for
   *   the element.
   */
  modelForElement(el) {
    return __WEBPACK_IMPORTED_MODULE_1__utils_templatize_js__["b" /* Templatize */].modelForElement(this.template, el);
  }

}

customElements.define(DomRepeat.is, DomRepeat);




/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export instanceCount */
/* unused harmony export _regLog */
/* unused harmony export register */
/* unused harmony export dumpRegistrations */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_settings_js__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_style_gather_js__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_resolve_url_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__elements_dom_module_js__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__property_effects_js__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__properties_mixin_js__ = __webpack_require__(41);









const ABS_URL = /(^\/)|(^#)|(^[\w-\d]*:)/;

const ElementMixin = Object(__WEBPACK_IMPORTED_MODULE_2__utils_mixin_js__["a" /* dedupingMixin */])(base => {

  /**
   * @constructor
   * @extends {base}
   * @implements {Polymer_PropertyEffects}
   * @implements {Polymer_PropertiesMixin}
   */
  const polymerElementBase = Object(__WEBPACK_IMPORTED_MODULE_7__properties_mixin_js__["a" /* PropertiesMixin */])(Object(__WEBPACK_IMPORTED_MODULE_6__property_effects_js__["a" /* PropertyEffects */])(base));

  /**
   * Returns a list of properties with default values.
   * This list is created as an optimization since it is a subset of
   * the list returned from `_properties`.
   * This list is used in `_initializeProperties` to set property defaults.
   *
   * @param {PolymerElementConstructor} constructor Element class
   * @return {PolymerElementProperties} Flattened properties for this class
   *   that have default values
   * @private
   */
  function propertyDefaults(constructor) {
    if (!constructor.hasOwnProperty(
      JSCompiler_renameProperty('__propertyDefaults', constructor))) {
      constructor.__propertyDefaults = null;
      let props = constructor._properties;
      for (let p in props) {
        let info = props[p];
        if ('value' in info) {
          constructor.__propertyDefaults = constructor.__propertyDefaults || {};
          constructor.__propertyDefaults[p] = info;
        }
      }
    }
    return constructor.__propertyDefaults;
  }

  /**
   * Returns a memoized version of the the `observers` array.
   * @param {PolymerElementConstructor} constructor Element class
   * @return {Array} Array containing own observers for the given class
   * @protected
   */
  function ownObservers(constructor) {
    if (!constructor.hasOwnProperty(
      JSCompiler_renameProperty('__ownObservers', constructor))) {
        constructor.__ownObservers =
        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?
        /** @type {PolymerElementConstructor} */ (constructor).observers : null;
    }
    return constructor.__ownObservers;
  }

  /**
   * Creates effects for a property.
   *
   * Note, once a property has been set to
   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
   * these values may not be changed. For example, a subclass cannot
   * alter these settings. However, additional `observers` may be added
   * by subclasses.
   *
   * The info object should may contain property metadata as follows:
   *
   * * `type`: {function} type to which an attribute matching the property
   * is deserialized. Note the property is camel-cased from a dash-cased
   * attribute. For example, 'foo-bar' attribute is deserialized to a
   * property named 'fooBar'.
   *
   * * `readOnly`: {boolean} creates a readOnly property and
   * makes a private setter for the private of the form '_setFoo' for a
   * property 'foo',
   *
   * * `computed`: {string} creates a computed property. A computed property
   * also automatically is set to `readOnly: true`. The value is calculated
   * by running a method and arguments parsed from the given string. For
   * example 'compute(foo)' will compute a given property when the
   * 'foo' property changes by executing the 'compute' method. This method
   * must return the computed value.
   *
   * * `reflectToAttribute`: {boolean} If true, the property value is reflected
   * to an attribute of the same name. Note, the attribute is dash-cased
   * so a property named 'fooBar' is reflected as 'foo-bar'.
   *
   * * `notify`: {boolean} sends a non-bubbling notification event when
   * the property changes. For example, a property named 'foo' sends an
   * event named 'foo-changed' with `event.detail` set to the value of
   * the property.
   *
   * * observer: {string} name of a method that runs when the property
   * changes. The arguments of the method are (value, previousValue).
   *
   * Note: Users may want control over modifying property
   * effects via subclassing. For example, a user might want to make a
   * reflectToAttribute property not do so in a subclass. We've chosen to
   * disable this because it leads to additional complication.
   * For example, a readOnly effect generates a special setter. If a subclass
   * disables the effect, the setter would fail unexpectedly.
   * Based on feedback, we may want to try to make effects more malleable
   * and/or provide an advanced api for manipulating them.
   * Also consider adding warnings when an effect cannot be changed.
   *
   * @param {!PolymerElement} proto Element class prototype to add accessors
   *   and effects to
   * @param {string} name Name of the property.
   * @param {Object} info Info object from which to create property effects.
   * Supported keys:
   * @param {Object} allProps Flattened map of all properties defined in this
   *   element (including inherited properties)
   * @return {void}
   * @private
   */
  function createPropertyFromConfig(proto, name, info, allProps) {
    // computed forces readOnly...
    if (info.computed) {
      info.readOnly = true;
    }
    // Note, since all computed properties are readOnly, this prevents
    // adding additional computed property effects (which leads to a confusing
    // setup where multiple triggers for setting a property)
    // While we do have `hasComputedEffect` this is set on the property's
    // dependencies rather than itself.
    if (info.computed && !proto._hasReadOnlyEffect(name)) {
      proto._createComputedProperty(name, info.computed, allProps);
    }
    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {
      proto._createReadOnlyProperty(name, !info.computed);
    }
    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {
      proto._createReflectedProperty(name);
    }
    if (info.notify && !proto._hasNotifyEffect(name)) {
      proto._createNotifyingProperty(name);
    }
    // always add observer
    if (info.observer) {
      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);
    }
    // always ensure an accessor is made for properties but don't stomp
    // on existing values.
    if (!info.readOnly && !(name in proto)) {
      proto._createPropertyAccessor(name);
    }
  }

  /**
   * Process all style elements in the element template. Styles with the
   * `include` attribute are processed such that any styles in
   * the associated "style modules" are included in the element template.
   * @param {PolymerElementConstructor} klass Element class
   * @param {!HTMLTemplateElement} template Template to process
   * @param {string} is Name of element
   * @param {string} baseURI Base URI for element
   * @private
   */
  function processElementStyles(klass, template, is, baseURI) {
    const templateStyles = template.content.querySelectorAll('style');
    const stylesWithImports = Object(__WEBPACK_IMPORTED_MODULE_3__utils_style_gather_js__["b" /* stylesFromTemplate */])(template);
    // insert styles from <link rel="import" type="css"> at the top of the template
    const linkedStyles = Object(__WEBPACK_IMPORTED_MODULE_3__utils_style_gather_js__["a" /* stylesFromModuleImports */])(is);
    const firstTemplateChild = template.content.firstElementChild;
    for (let idx = 0; idx < linkedStyles.length; idx++) {
      let s = linkedStyles[idx];
      s.textContent = klass._processStyleText(s.textContent, baseURI);
      template.content.insertBefore(s, firstTemplateChild);
    }
    // keep track of the last "concrete" style in the template we have encountered
    let templateStyleIndex = 0;
    // ensure all gathered styles are actually in this template.
    for (let i = 0; i < stylesWithImports.length; i++) {
      let s = stylesWithImports[i];
      let templateStyle = templateStyles[templateStyleIndex];
      // if the style is not in this template, it's been "included" and
      // we put a clone of it in the template before the style that included it
      if (templateStyle !== s) {
        s = s.cloneNode(true);
        templateStyle.parentNode.insertBefore(s, templateStyle);
      } else {
        templateStyleIndex++;
      }
      s.textContent = klass._processStyleText(s.textContent, baseURI);
    }
    if (window.ShadyCSS) {
      window.ShadyCSS.prepareTemplate(template, is);
    }
  }

  /**
   * @polymer
   * @mixinClass
   * @unrestricted
   * @implements {Polymer_ElementMixin}
   */
  class PolymerElement extends polymerElementBase {

    /**
     * Override of PropertiesMixin _finalizeClass to create observers and
     * find the template.
     * @return {void}
     * @protected
     * @override
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */
   static _finalizeClass() {
      super._finalizeClass();
      if (this.hasOwnProperty(
        JSCompiler_renameProperty('is', this)) &&  this.is) {
        register(this.prototype);
      }
      const observers = ownObservers(this);
      if (observers) {
        this.createObservers(observers, this._properties);
      }
      // note: create "working" template that is finalized at instance time
      let template = /** @type {PolymerElementConstructor} */ (this).template;
      if (template) {
        if (typeof template === 'string') {
          let t = document.createElement('template');
          t.innerHTML = template;
          template = t;
        } else {
          template = template.cloneNode(true);
        }
        this.prototype._template = template;
      }

    }

    /**
     * Override of PropertiesChanged createProperties to create accessors
     * and property effects for all of the properties.
     * @return {void}
     * @protected
     * @override
     */
     static createProperties(props) {
      for (let p in props) {
        createPropertyFromConfig(this.prototype, p, props[p], props);
      }
    }

    /**
     * Creates observers for the given `observers` array.
     * Leverages `PropertyEffects` to create observers.
     * @param {Object} observers Array of observer descriptors for
     *   this class
     * @param {Object} dynamicFns Object containing keys for any properties
     *   that are functions and should trigger the effect when the function
     *   reference is changed
     * @return {void}
     * @protected
     */
    static createObservers(observers, dynamicFns) {
      const proto = this.prototype;
      for (let i=0; i < observers.length; i++) {
        proto._createMethodObserver(observers[i], dynamicFns);
      }
    }

    /**
     * Returns the template that will be stamped into this element's shadow root.
     *
     * If a `static get is()` getter is defined, the default implementation
     * will return the first `<template>` in a `dom-module` whose `id`
     * matches this element's `is`.
     *
     * Users may override this getter to return an arbitrary template
     * (in which case the `is` getter is unnecessary). The template returned
     * may be either an `HTMLTemplateElement` or a string that will be
     * automatically parsed into a template.
     *
     * Note that when subclassing, if the super class overrode the default
     * implementation and the subclass would like to provide an alternate
     * template via a `dom-module`, it should override this getter and
     * return `Polymer.DomModule.import(this.is, 'template')`.
     *
     * If a subclass would like to modify the super class template, it should
     * clone it rather than modify it in place.  If the getter does expensive
     * work such as cloning/modifying a template, it should memoize the
     * template for maximum performance:
     *
     *   let memoizedTemplate;
     *   class MySubClass extends MySuperClass {
     *     static get template() {
     *       if (!memoizedTemplate) {
     *         memoizedTemplate = super.template.cloneNode(true);
     *         let subContent = document.createElement('div');
     *         subContent.textContent = 'This came from MySubClass';
     *         memoizedTemplate.content.appendChild(subContent);
     *       }
     *       return memoizedTemplate;
     *     }
     *   }
     *
     * @return {HTMLTemplateElement|string} Template to be stamped
     */
    static get template() {
      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {
        this._template = __WEBPACK_IMPORTED_MODULE_5__elements_dom_module_js__["a" /* DomModule */] && __WEBPACK_IMPORTED_MODULE_5__elements_dom_module_js__["a" /* DomModule */].import(
          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||
          // note: implemented so a subclass can retrieve the super
          // template; call the super impl this way so that `this` points
          // to the superclass.
          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;
      }
      return this._template;
    }

    /**
     * Path matching the url from which the element was imported.
     * This path is used to resolve url's in template style cssText.
     * The `importPath` property is also set on element instances and can be
     * used to create bindings relative to the import path.
     * Defaults to the path matching the url containing a `dom-module` element
     * matching this element's static `is` property.
     * Note, this path should contain a trailing `/`.
     *
     * @return {string} The import path for this element class
     */
    static get importPath() {
      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {
          const module = __WEBPACK_IMPORTED_MODULE_5__elements_dom_module_js__["a" /* DomModule */] && __WEBPACK_IMPORTED_MODULE_5__elements_dom_module_js__["a" /* DomModule */].import(/** @type {PolymerElementConstructor} */ (this).is);
          this._importPath = module ? module.assetpath : '' ||
          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;
      }
      return this._importPath;
    }

    constructor() {
      super();
      /** @type {HTMLTemplateElement} */
      this._template;
      /** @type {string} */
      this._importPath;
      /** @type {string} */
      this.rootPath;
      /** @type {string} */
      this.importPath;
      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */
      this.root;
      /** @type {!Object<string, !Element>} */
      this.$;
    }

    /**
     * Overrides the default `Polymer.PropertyAccessors` to ensure class
     * metaprogramming related to property accessors and effects has
     * completed (calls `finalize`).
     *
     * It also initializes any property defaults provided via `value` in
     * `properties` metadata.
     *
     * @return {void}
     * @override
     * @suppress {invalidCasts}
     */
    _initializeProperties() {
      instanceCount++;
      this.constructor.finalize();
      const importPath = this.constructor.importPath;
      // note: finalize template when we have access to `localName` to
      // avoid dependence on `is` for polyfilling styling.
      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);
      super._initializeProperties();
      // set path defaults
      this.rootPath = __WEBPACK_IMPORTED_MODULE_1__utils_settings_js__["a" /* rootPath */];
      this.importPath = importPath;
      // apply property defaults...
      let p$ = propertyDefaults(this.constructor);
      if (!p$) {
        return;
      }
      for (let p in p$) {
        let info = p$[p];
        // Don't set default value if there is already an own property, which
        // happens when a `properties` property with default but no effects had
        // a property set (e.g. bound) by its host before upgrade
        if (!this.hasOwnProperty(p)) {
          let value = typeof info.value == 'function' ?
            info.value.call(this) :
            info.value;
          // Set via `_setProperty` if there is an accessor, to enable
          // initializing readOnly property defaults
          if (this._hasAccessor(p)) {
            this._setPendingProperty(p, value, true);
          } else {
            this[p] = value;
          }
        }
      }
    }

    /**
     * Gather style text for a style element in the template.
     *
     * @param {string} cssText Text containing styling to process
     * @param {string} baseURI Base URI to rebase CSS paths against
     * @return {string} The processed CSS text
     * @protected
     */
    static _processStyleText(cssText, baseURI) {
      return Object(__WEBPACK_IMPORTED_MODULE_4__utils_resolve_url_js__["b" /* resolveCss */])(cssText, baseURI);
    }

    /**
    * Configures an element `proto` to function with a given `template`.
    * The element name `is` and extends `ext` must be specified for ShadyCSS
    * style scoping.
    *
    * @param {string} is Tag name (or type extension name) for this element
    * @return {void}
    * @protected
    */
    static _finalizeTemplate(is) {
      /** @const {HTMLTemplateElement} */
      const template = this.prototype._template;
      if (template && !template.__polymerFinalized) {
        template.__polymerFinalized = true;
        const importPath = this.importPath;
        const baseURI = importPath ? Object(__WEBPACK_IMPORTED_MODULE_4__utils_resolve_url_js__["c" /* resolveUrl */])(importPath) : '';
        // e.g. support `include="module-name"`, and ShadyCSS
        processElementStyles(this, template, is, baseURI);
        this.prototype._bindTemplate(template);
      }
    }

    /**
     * Provides a default implementation of the standard Custom Elements
     * `connectedCallback`.
     *
     * The default implementation enables the property effects system and
     * flushes any pending properties, and updates shimmed CSS properties
     * when using the ShadyCSS scoping/custom properties polyfill.
     *
     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback
     * @return {void}
     */
    connectedCallback() {
      if (window.ShadyCSS && this._template) {
        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));
      }
      super.connectedCallback();
    }

    /**
     * Stamps the element template.
     *
     * @return {void}
     * @override
     */
    ready() {
      if (this._template) {
        this.root = this._stampTemplate(this._template);
        this.$ = this.root.$;
      }
      super.ready();
    }

    /**
     * Implements `PropertyEffects`'s `_readyClients` call. Attaches
     * element dom by calling `_attachDom` with the dom stamped from the
     * element's template via `_stampTemplate`. Note that this allows
     * client dom to be attached to the element prior to any observers
     * running.
     *
     * @return {void}
     * @override
     */
    _readyClients() {
      if (this._template) {
        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));
      }
      // The super._readyClients here sets the clients initialized flag.
      // We must wait to do this until after client dom is created/attached
      // so that this flag can be checked to prevent notifications fired
      // during this process from being handled before clients are ready.
      super._readyClients();
    }


    /**
     * Attaches an element's stamped dom to itself. By default,
     * this method creates a `shadowRoot` and adds the dom to it.
     * However, this method may be overridden to allow an element
     * to put its dom in another location.
     *
     * @throws {Error}
     * @suppress {missingReturn}
     * @param {StampedTemplate} dom to attach to the element.
     * @return {ShadowRoot} node to which the dom has been attached.
     */
    _attachDom(dom) {
      if (this.attachShadow) {
        if (dom) {
          if (!this.shadowRoot) {
            this.attachShadow({mode: 'open'});
          }
          this.shadowRoot.appendChild(dom);
          return this.shadowRoot;
        }
        return null;
      } else {
        throw new Error('ShadowDOM not available. ' +
          // TODO(sorvell): move to compile-time conditional when supported
        'Polymer.Element can create dom as children instead of in ' +
        'ShadowDOM by setting `this.root = this;\` before \`ready\`.');
      }
    }

    /**
     * When using the ShadyCSS scoping and custom property shim, causes all
     * shimmed styles in this element (and its subtree) to be updated
     * based on current custom property values.
     *
     * The optional parameter overrides inline custom property styles with an
     * object of properties where the keys are CSS properties, and the values
     * are strings.
     *
     * Example: `this.updateStyles({'--color': 'blue'})`
     *
     * These properties are retained unless a value of `null` is set.
     *
     * @param {Object=} properties Bag of custom property key/values to
     *   apply to this element.
     * @return {void}
     * @suppress {invalidCasts}
     */
    updateStyles(properties) {
      if (window.ShadyCSS) {
        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);
      }
    }

    /**
     * Rewrites a given URL relative to a base URL. The base URL defaults to
     * the original location of the document containing the `dom-module` for
     * this element. This method will return the same URL before and after
     * bundling.
     *
     * @param {string} url URL to resolve.
     * @param {string=} base Optional base URL to resolve against, defaults
     * to the element's `importPath`
     * @return {string} Rewritten URL relative to base
     */
    resolveUrl(url, base) {
      // Preserve backward compatibility with `this.resolveUrl('/foo')` resolving
      // against the main document per #2448
      if (url && ABS_URL.test(url)) {
        return url;
      }
      if (!base && this.importPath) {
        base = Object(__WEBPACK_IMPORTED_MODULE_4__utils_resolve_url_js__["c" /* resolveUrl */])(this.importPath);
      }
      return Object(__WEBPACK_IMPORTED_MODULE_4__utils_resolve_url_js__["c" /* resolveUrl */])(url, base);
    }

    /**
     * Overrides `PropertyAccessors` to add map of dynamic functions on
     * template info, for consumption by `PropertyEffects` template binding
     * code. This map determines which method templates should have accessors
     * created for them.
     *
     * @override
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */
    static _parseTemplateContent(template, templateInfo, nodeInfo) {
      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;
      return super._parseTemplateContent(template, templateInfo, nodeInfo);
    }

  }

  return PolymerElement;
});
/* harmony export (immutable) */ __webpack_exports__["a"] = ElementMixin;


let instanceCount = 0;
const registrations = [];
/* unused harmony export registrations */


function _regLog(prototype) {
  console.log('[' + prototype.is + ']: registered');
}

function register(prototype) {
  registrations.push(prototype);
  undefined && _regLog(prototype);
}

function dumpRegistrations() {
  registrations.forEach(_regLog);
}

const updateStyles = function(props) {
  if (window.ShadyCSS) {
    window.ShadyCSS.styleDocument(props);
  }
};
/* unused harmony export updateStyles */



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export stylesFromModules */
/* unused harmony export stylesFromModule */
/* harmony export (immutable) */ __webpack_exports__["b"] = stylesFromTemplate;
/* harmony export (immutable) */ __webpack_exports__["a"] = stylesFromModuleImports;
/* unused harmony export _stylesFromModuleImports */
/* unused harmony export cssFromModules */
/* unused harmony export cssFromModule */
/* unused harmony export cssFromTemplate */
/* unused harmony export cssFromModuleImports */
/* unused harmony export _cssFromModuleImports */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__resolve_url_js__ = __webpack_require__(4);


const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';
const INCLUDE_ATTR = 'include';
const SHADY_UNSCOPED_ATTR = 'shady-unscoped';

function importModule(moduleId) {
  const /** Polymer.DomModule */ PolymerDomModule = customElements.get('dom-module');
  if (!PolymerDomModule) {
    return null;
  }
  return PolymerDomModule.import(moduleId);
}

function styleForImport(importDoc) {
  // NOTE: polyfill affordance.
  // under the HTMLImports polyfill, there will be no 'body',
  // but the import pseudo-doc can be used directly.
  let container = importDoc.body ? importDoc.body : importDoc;
  const importCss = Object(__WEBPACK_IMPORTED_MODULE_0__resolve_url_js__["b" /* resolveCss */])(container.textContent,
    importDoc.baseURI);
  const style = document.createElement('style');
  style.textContent = importCss;
  return style;
}

/** @typedef {{assetpath: string}} */
let templateWithAssetPath; // eslint-disable-line no-unused-vars

function stylesFromModules(moduleIds) {
 const modules = moduleIds.trim().split(/\s+/);
 const styles = [];
 for (let i=0; i < modules.length; i++) {
   styles.push(...stylesFromModule(modules[i]));
 }
 return styles;
}

function stylesFromModule(moduleId) {
  const m = importModule(moduleId);
  if (m && m._styles === undefined) {
    const styles = [];
    // module imports: <link rel="import" type="css">
    styles.push(..._stylesFromModuleImports(m));
    // include css from the first template in the module
    const template = m.querySelector('template');
    if (template) {
      styles.push(...stylesFromTemplate(template,
        /** @type {templateWithAssetPath} */(m).assetpath));
    }
    m._styles = styles;
  }
  if (!m) {
    console.warn('Could not find style data in module named', moduleId);
  }
  return m ? m._styles : [];
}

function stylesFromTemplate(template, baseURI) {
  if (!template._styles) {
    const styles = [];
    // if element is a template, get content from its .content
    const e$ = template.content.querySelectorAll('style');
    for (let i=0; i < e$.length; i++) {
      let e = e$[i];
      // support style sharing by allowing styles to "include"
      // other dom-modules that contain styling
      let include = e.getAttribute(INCLUDE_ATTR);
      if (include) {
        styles.push(...stylesFromModules(include));
      }
      if (baseURI) {
        e.textContent = Object(__WEBPACK_IMPORTED_MODULE_0__resolve_url_js__["b" /* resolveCss */])(e.textContent, baseURI);
      }
      styles.push(e);
    }
    template._styles = styles;
  }
  return template._styles;
}

function stylesFromModuleImports(moduleId) {
 let m = importModule(moduleId);
 return m ? _stylesFromModuleImports(m) : [];
}

function _stylesFromModuleImports(module) {
  const styles = [];
  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);
  for (let i=0; i < p$.length; i++) {
    let p = p$[i];
    if (p.import) {
      const importDoc = p.import;
      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);
      if (unscoped && !importDoc._unscopedStyle) {
        const style = styleForImport(importDoc);
        style.setAttribute(SHADY_UNSCOPED_ATTR, '');
        importDoc._unscopedStyle = style;
      } else if (!importDoc._style) {
        importDoc._style = styleForImport(importDoc);
      }
      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);
    }
  }
  return styles;
}

function cssFromModules(moduleIds) {
 let modules = moduleIds.trim().split(/\s+/);
 let cssText = '';
 for (let i=0; i < modules.length; i++) {
   cssText += cssFromModule(modules[i]);
 }
 return cssText;
}

function cssFromModule(moduleId) {
  let m = importModule(moduleId);
  if (m && m._cssText === undefined) {
    // module imports: <link rel="import" type="css">
    let cssText = _cssFromModuleImports(m);
    // include css from the first template in the module
    let t = m.querySelector('template');
    if (t) {
      cssText += cssFromTemplate(t,
        /** @type {templateWithAssetPath} */(m).assetpath);
    }
    m._cssText = cssText || null;
  }
  if (!m) {
    console.warn('Could not find style data in module named', moduleId);
  }
  return m && m._cssText || '';
}

function cssFromTemplate(template, baseURI) {
  let cssText = '';
  const e$ = stylesFromTemplate(template, baseURI);
  // if element is a template, get content from its .content
  for (let i=0; i < e$.length; i++) {
    let e = e$[i];
    if (e.parentNode) {
      e.parentNode.removeChild(e);
    }
    cssText += e.textContent;
  }
  return cssText;
}

function cssFromModuleImports(moduleId) {
  let m = importModule(moduleId);
  return m ? _cssFromModuleImports(m) : '';
}

function _cssFromModuleImports(module) {
 let cssText = '';
 let styles = _stylesFromModuleImports(module);
 for (let i=0; i < styles.length; i++) {
   cssText += styles[i].textContent;
 }
 return cssText;
}


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DomModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_resolve_url_js__ = __webpack_require__(4);



let modules = {};
let lcModules = {};
function findModule(id) {
  return modules[id] || lcModules[id.toLowerCase()];
}

function styleOutsideTemplateCheck(inst) {
  if (inst.querySelector('style')) {
    console.warn('dom-module %s has style outside template', inst.id);
  }
}

/**
 * The `dom-module` element registers the dom it contains to the name given
 * by the module's id attribute. It provides a unified database of dom
 * accessible via its static `import` API.
 *
 * A key use case of `dom-module` is for providing custom element `<template>`s
 * via HTML imports that are parsed by the native HTML parser, that can be
 * relocated during a bundling pass and still looked up by `id`.
 *
 * Example:
 *
 *     <dom-module id="foo">
 *       <img src="stuff.png">
 *     </dom-module>
 *
 * Then in code in some other location that cannot access the dom-module above
 *
 *     let img = customElements.get('dom-module').import('foo', 'img');
 *
 * @customElement
 * @extends HTMLElement
 * @memberof Polymer
 * @summary Custom element that provides a registry of relocatable DOM content
 *   by `id` that is agnostic to bundling.
 * @unrestricted
 */
class DomModule extends HTMLElement {

  static get observedAttributes() { return ['id']; }

  /**
   * Retrieves the element specified by the css `selector` in the module
   * registered by `id`. For example, this.import('foo', 'img');
   * @param {string} id The id of the dom-module in which to search.
   * @param {string=} selector The css selector by which to find the element.
   * @return {Element} Returns the element which matches `selector` in the
   * module registered at the specified `id`.
   */
  static import(id, selector) {
    if (id) {
      let m = findModule(id);
      if (m && selector) {
        return m.querySelector(selector);
      }
      return m;
    }
    return null;
  }

  /**
   * @param {string} name Name of attribute.
   * @param {?string} old Old value of attribute.
   * @param {?string} value Current value of attribute.
   * @return {void}
   */
  attributeChangedCallback(name, old, value) {
    if (old !== value) {
      this.register();
    }
  }

  /**
   * The absolute URL of the original location of this `dom-module`.
   *
   * This value will differ from this element's `ownerDocument` in the
   * following ways:
   * - Takes into account any `assetpath` attribute added during bundling
   *   to indicate the original location relative to the bundled location
   * - Uses the HTMLImports polyfill's `importForElement` API to ensure
   *   the path is relative to the import document's location since
   *   `ownerDocument` is not currently polyfilled
   */
  get assetpath() {
    // Don't override existing assetpath.
    if (!this.__assetpath) {
      // note: assetpath set via an attribute must be relative to this
      // element's location; accomodate polyfilled HTMLImports
      const owner = window.HTMLImports && HTMLImports.importForElement ?
        HTMLImports.importForElement(this) || document : this.ownerDocument;
      const url = Object(__WEBPACK_IMPORTED_MODULE_1__utils_resolve_url_js__["c" /* resolveUrl */])(
        this.getAttribute('assetpath') || '', owner.baseURI);
      this.__assetpath = Object(__WEBPACK_IMPORTED_MODULE_1__utils_resolve_url_js__["a" /* pathFromUrl */])(url);
    }
    return this.__assetpath;
  }

  /**
   * Registers the dom-module at a given id. This method should only be called
   * when a dom-module is imperatively created. For
   * example, `document.createElement('dom-module').register('foo')`.
   * @param {string=} id The id at which to register the dom-module.
   * @return {void}
   */
  register(id) {
    id = id || this.id;
    if (id) {
      this.id = id;
      // store id separate from lowercased id so that
      // in all cases mixedCase id will stored distinctly
      // and lowercase version is a fallback
      modules[id] = this;
      lcModules[id.toLowerCase()] = this;
      styleOutsideTemplateCheck(this);
    }
  }
}

DomModule.prototype['modules'] = modules;

customElements.define('dom-module', DomModule);




/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_case_map_js__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__properties_changed_js__ = __webpack_require__(17);





let caseMap = __WEBPACK_IMPORTED_MODULE_2__utils_case_map_js__;

// Save map of native properties; this forms a blacklist or properties
// that won't have their values "saved" by `saveAccessorValue`, since
// reading from an HTMLElement accessor from the context of a prototype throws
const nativeProperties = {};
let proto = HTMLElement.prototype;
while (proto) {
  let props = Object.getOwnPropertyNames(proto);
  for (let i=0; i<props.length; i++) {
    nativeProperties[props[i]] = true;
  }
  proto = Object.getPrototypeOf(proto);
}

/**
 * Used to save the value of a property that will be overridden with
 * an accessor. If the `model` is a prototype, the values will be saved
 * in `__dataProto`, and it's up to the user (or downstream mixin) to
 * decide how/when to set these values back into the accessors.
 * If `model` is already an instance (it has a `__data` property), then
 * the value will be set as a pending property, meaning the user should
 * call `_invalidateProperties` or `_flushProperties` to take effect
 *
 * @param {Object} model Prototype or instance
 * @param {string} property Name of property
 * @return {void}
 * @private
 */
function saveAccessorValue(model, property) {
  // Don't read/store value for any native properties since they could throw
  if (!nativeProperties[property]) {
    let value = model[property];
    if (value !== undefined) {
      if (model.__data) {
        // Adding accessor to instance; update the property
        // It is the user's responsibility to call _flushProperties
        model._setPendingProperty(property, value);
      } else {
        // Adding accessor to proto; save proto's value for instance-time use
        if (!model.__dataProto) {
          model.__dataProto = {};
        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {
          model.__dataProto = Object.create(model.__dataProto);
        }
        model.__dataProto[property] = value;
      }
    }
  }
}

const PropertyAccessors = Object(__WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @constructor
   * @extends {superClass}
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   */
   const base = Object(__WEBPACK_IMPORTED_MODULE_3__properties_changed_js__["a" /* PropertiesChanged */])(superClass);

  /**
   * @polymer
   * @mixinClass
   * @implements {Polymer_PropertyAccessors}
   * @extends {base}
   * @unrestricted
   */
  class PropertyAccessors extends base {

    /**
     * Generates property accessors for all attributes in the standard
     * static `observedAttributes` array.
     *
     * Attribute names are mapped to property names using the `dash-case` to
     * `camelCase` convention
     *
     * @return {void}
     */
    static createPropertiesForAttributes() {
      let a$ = this.observedAttributes;
      for (let i=0; i < a$.length; i++) {
        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));
      }
    }

    /**
     * Returns an attribute name that corresponds to the given property.
     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
     * @param {string} property Property to convert
     * @return {string} Attribute name corresponding to the given property.
     *
     * @protected
     */
    static attributeNameForProperty(property) {
      return caseMap.camelToDashCase(property);
    }

    /**
     * Overrides PropertiesChanged implementation to initialize values for
     * accessors created for values that already existed on the element
     * prototype.
     *
     * @return {void}
     * @protected
     */
    _initializeProperties() {
      if (this.__dataProto) {
        this._initializeProtoProperties(this.__dataProto);
        this.__dataProto = null;
      }
      super._initializeProperties();
    }

    /**
     * Called at instance time with bag of properties that were overwritten
     * by accessors on the prototype when accessors were created.
     *
     * The default implementation sets these properties back into the
     * setter at instance time.  This method is provided as an override
     * point for customizing or providing more efficient initialization.
     *
     * @param {Object} props Bag of property values that were overwritten
     *   when creating property accessors.
     * @return {void}
     * @protected
     */
    _initializeProtoProperties(props) {
      for (let p in props) {
        this._setProperty(p, props[p]);
      }
    }

    /**
     * Ensures the element has the given attribute. If it does not,
     * assigns the given value to the attribute.
     *
     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element
     *
     * @param {string} attribute Name of attribute to ensure is set.
     * @param {string} value of the attribute.
     * @return {void}
     */
    _ensureAttribute(attribute, value) {
      const el = /** @type {!HTMLElement} */(this);
      if (!el.hasAttribute(attribute)) {
        this._valueToNodeAttribute(el, value, attribute);
      }
    }

    /**
     * Overrides PropertiesChanged implemention to serialize objects as JSON.
     *
     * @param {*} value Property value to serialize.
     * @return {string | undefined} String serialized from the provided property value.
     */
    _serializeValue(value) {
      /* eslint-disable no-fallthrough */
      switch (typeof value) {
        case 'object':
          if (value instanceof Date) {
            return value.toString();
          } else if (value) {
            try {
              return JSON.stringify(value);
            } catch(x) {
              return '';
            }
          }

        default:
          return super._serializeValue(value);
      }
    }

    /**
     * Converts a string to a typed JavaScript value.
     *
     * This method is called by Polymer when reading HTML attribute values to
     * JS properties.  Users may override this method on Polymer element
     * prototypes to provide deserialization for custom `type`s.  Note,
     * the `type` argument is the value of the `type` field provided in the
     * `properties` configuration object for a given property, and is
     * by convention the constructor for the type to deserialize.
     *
     *
     * @param {?string} value Attribute value to deserialize.
     * @param {*=} type Type to deserialize the string to.
     * @return {*} Typed value deserialized from the provided string.
     */
    _deserializeValue(value, type) {
      /**
       * @type {*}
       */
      let outValue;
      switch (type) {
        case Object:
          try {
            outValue = JSON.parse(/** @type {string} */(value));
          } catch(x) {
            // allow non-JSON literals like Strings and Numbers
            outValue = value;
          }
          break;
        case Array:
          try {
            outValue = JSON.parse(/** @type {string} */(value));
          } catch(x) {
            outValue = null;
            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);
          }
          break;
        case Date:
          outValue = isNaN(value) ? String(value) : Number(value);
          outValue = new Date(outValue);
          break;
        default:
          outValue = super._deserializeValue(value, type);
          break;
      }
      return outValue;
    }
    /* eslint-enable no-fallthrough */

    /**
     * Overrides PropertiesChanged implementation to save existing prototype
     * property value so that it can be reset.
     * @param {string} property Name of the property
     * @param {boolean=} readOnly When true, no setter is created
     *
     * When calling on a prototype, any overwritten values are saved in
     * `__dataProto`, and it is up to the subclasser to decide how/when
     * to set those properties back into the accessor.  When calling on an
     * instance, the overwritten value is set via `_setPendingProperty`,
     * and the user should call `_invalidateProperties` or `_flushProperties`
     * for the values to take effect.
     * @protected
     * @return {void}
     */
    _definePropertyAccessor(property, readOnly) {
      saveAccessorValue(this, property);
      super._definePropertyAccessor(property, readOnly);
    }

    /**
     * Returns true if this library created an accessor for the given property.
     *
     * @param {string} property Property name
     * @return {boolean} True if an accessor was created
     */
    _hasAccessor(property) {
      return this.__dataHasAccessor && this.__dataHasAccessor[property];
    }

    /**
     * Returns true if the specified property has a pending change.
     *
     * @param {string} prop Property name
     * @return {boolean} True if property has a pending change
     * @protected
     */
    _isPropertyPending(prop) {
      return Boolean(this.__dataPending && (prop in this.__dataPending));
    }

  }

  return PropertyAccessors;

});
/* harmony export (immutable) */ __webpack_exports__["a"] = PropertyAccessors;



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__ = __webpack_require__(2);



// 1.x backwards-compatible auto-wrapper for template type extensions
// This is a clear layering violation and gives favored-nation status to
// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
// a.) to ease 1.x backwards-compatibility due to loss of `is`, and
// b.) to maintain if/repeat capability in parser-constrained elements
//     (e.g. table, select) in lieu of native CE type extensions without
//     massive new invention in this space (e.g. directive system)
const templateExtensions = {
  'dom-if': true,
  'dom-repeat': true
};
function wrapTemplateExtension(node) {
  let is = node.getAttribute('is');
  if (is && templateExtensions[is]) {
    let t = node;
    t.removeAttribute('is');
    node = t.ownerDocument.createElement(is);
    t.parentNode.replaceChild(node, t);
    node.appendChild(t);
    while(t.attributes.length) {
      node.setAttribute(t.attributes[0].name, t.attributes[0].value);
      t.removeAttribute(t.attributes[0].name);
    }
  }
  return node;
}

function findTemplateNode(root, nodeInfo) {
  // recursively ascend tree until we hit root
  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);
  // unwind the stack, returning the indexed node at each level
  if (parent) {
    // note: marginally faster than indexing via childNodes
    // (http://jsperf.com/childnodes-lookup)
    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {
      if (nodeInfo.parentIndex === i++) {
        return n;
      }
    }
  } else {
    return root;
  }
}

// construct `$` map (from id annotations)
function applyIdToMap(inst, map, node, nodeInfo) {
  if (nodeInfo.id) {
    map[nodeInfo.id] = node;
  }
}

// install event listeners (from event annotations)
function applyEventListener(inst, node, nodeInfo) {
  if (nodeInfo.events && nodeInfo.events.length) {
    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {
      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);
    }
  }
}

// push configuration references at configure time
function applyTemplateContent(inst, node, nodeInfo) {
  if (nodeInfo.templateInfo) {
    node._templateInfo = nodeInfo.templateInfo;
  }
}

function createNodeEventHandler(context, eventName, methodName) {
  // Instances can optionally have a _methodHost which allows redirecting where
  // to find methods. Currently used by `templatize`.
  context = context._methodHost || context;
  let handler = function(e) {
    if (context[methodName]) {
      context[methodName](e, e.detail);
    } else {
      console.warn('listener method `' + methodName + '` not defined');
    }
  };
  return handler;
}

const TemplateStamp = Object(__WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

  /**
   * @polymer
   * @mixinClass
   * @implements {Polymer_TemplateStamp}
   */
  class TemplateStamp extends superClass {

    /**
     * Scans a template to produce template metadata.
     *
     * Template-specific metadata are stored in the object returned, and node-
     * specific metadata are stored in objects in its flattened `nodeInfoList`
     * array.  Only nodes in the template that were parsed as nodes of
     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
     * contains an `index` (`childNodes` index in parent) and optionally
     * `parent`, which points to node info of its parent (including its index).
     *
     * The template metadata object returned from this method has the following
     * structure (many fields optional):
     *
     * ```js
     *   {
     *     // Flattened list of node metadata (for nodes that generated metadata)
     *     nodeInfoList: [
     *       {
     *         // `id` attribute for any nodes with id's for generating `$` map
     *         id: {string},
     *         // `on-event="handler"` metadata
     *         events: [
     *           {
     *             name: {string},   // event name
     *             value: {string},  // handler method name
     *           }, ...
     *         ],
     *         // Notes when the template contained a `<slot>` for shady DOM
     *         // optimization purposes
     *         hasInsertionPoint: {boolean},
     *         // For nested `<template>`` nodes, nested template metadata
     *         templateInfo: {object}, // nested template metadata
     *         // Metadata to allow efficient retrieval of instanced node
     *         // corresponding to this metadata
     *         parentInfo: {number},   // reference to parent nodeInfo>
     *         parentIndex: {number},  // index in parent's `childNodes` collection
     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
     *       },
     *       ...
     *     ],
     *     // When true, the template had the `strip-whitespace` attribute
     *     // or was nested in a template with that setting
     *     stripWhitespace: {boolean},
     *     // For nested templates, nested template content is moved into
     *     // a document fragment stored here; this is an optimization to
     *     // avoid the cost of nested template cloning
     *     content: {DocumentFragment}
     *   }
     * ```
     *
     * This method kicks off a recursive treewalk as follows:
     *
     * ```
     *    _parseTemplate <---------------------+
     *      _parseTemplateContent              |
     *        _parseTemplateNode  <------------|--+
     *          _parseTemplateNestedTemplate --+  |
     *          _parseTemplateChildNodes ---------+
     *          _parseTemplateNodeAttributes
     *            _parseTemplateNodeAttribute
     *
     * ```
     *
     * These methods may be overridden to add custom metadata about templates
     * to either `templateInfo` or `nodeInfo`.
     *
     * Note that this method may be destructive to the template, in that
     * e.g. event annotations may be removed after being noted in the
     * template metadata.
     *
     * @param {!HTMLTemplateElement} template Template to parse
     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
     *   template, for parsing nested templates
     * @return {!TemplateInfo} Parsed template metadata
     */
    static _parseTemplate(template, outerTemplateInfo) {
      // since a template may be re-used, memo-ize metadata
      if (!template._templateInfo) {
        let templateInfo = template._templateInfo = {};
        templateInfo.nodeInfoList = [];
        templateInfo.stripWhiteSpace =
          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||
          template.hasAttribute('strip-whitespace');
        this._parseTemplateContent(template, templateInfo, {parent: null});
      }
      return template._templateInfo;
    }

    static _parseTemplateContent(template, templateInfo, nodeInfo) {
      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);
    }

    /**
     * Parses template node and adds template and node metadata based on
     * the current node, and its `childNodes` and `attributes`.
     *
     * This method may be overridden to add custom node or template specific
     * metadata based on this node.
     *
     * @param {Node} node Node to parse
     * @param {!TemplateInfo} templateInfo Template metadata for current template
     * @param {!NodeInfo} nodeInfo Node metadata for current template.
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     */
    static _parseTemplateNode(node, templateInfo, nodeInfo) {
      let noted;
      let element = /** @type {Element} */(node);
      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {
        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;
      } else if (element.localName === 'slot') {
        // For ShadyDom optimization, indicating there is an insertion point
        templateInfo.hasInsertionPoint = true;
      }
      if (element.firstChild) {
        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;
      }
      if (element.hasAttributes && element.hasAttributes()) {
        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;
      }
      return noted;
    }

    /**
     * Parses template child nodes for the given root node.
     *
     * This method also wraps whitelisted legacy template extensions
     * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
     * wrappers, collapses text nodes, and strips whitespace from the template
     * if the `templateInfo.stripWhitespace` setting was provided.
     *
     * @param {Node} root Root node whose `childNodes` will be parsed
     * @param {!TemplateInfo} templateInfo Template metadata for current template
     * @param {!NodeInfo} nodeInfo Node metadata for current template.
     * @return {void}
     */
    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {
      if (root.localName === 'script' || root.localName === 'style') {
        return;
      }
      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {
        // Wrap templates
        if (node.localName == 'template') {
          node = wrapTemplateExtension(node);
        }
        // collapse adjacent textNodes: fixes an IE issue that can cause
        // text nodes to be inexplicably split =(
        // note that root.normalize() should work but does not so we do this
        // manually.
        next = node.nextSibling;
        if (node.nodeType === Node.TEXT_NODE) {
          let /** Node */ n = next;
          while (n && (n.nodeType === Node.TEXT_NODE)) {
            node.textContent += n.textContent;
            next = n.nextSibling;
            root.removeChild(n);
            n = next;
          }
          // optionally strip whitespace
          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {
            root.removeChild(node);
            continue;
          }
        }
        let childInfo = { parentIndex, parentInfo: nodeInfo };
        if (this._parseTemplateNode(node, templateInfo, childInfo)) {
          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;
        }
        // Increment if not removed
        if (node.parentNode) {
          parentIndex++;
        }
      }
    }

    /**
     * Parses template content for the given nested `<template>`.
     *
     * Nested template info is stored as `templateInfo` in the current node's
     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
     * It will then be the responsibility of the host to set it back to the
     * template and for users stamping nested templates to use the
     * `_contentForTemplate` method to retrieve the content for this template
     * (an optimization to avoid the cost of cloning nested template content).
     *
     * @param {HTMLTemplateElement} node Node to parse (a <template>)
     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
     *   that includes the template `node`
     * @param {!NodeInfo} nodeInfo Node metadata for current template.
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     */
    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {
      let templateInfo = this._parseTemplate(node, outerTemplateInfo);
      let content = templateInfo.content =
        node.content.ownerDocument.createDocumentFragment();
      content.appendChild(node.content);
      nodeInfo.templateInfo = templateInfo;
      return true;
    }

    /**
     * Parses template node attributes and adds node metadata to `nodeInfo`
     * for nodes of interest.
     *
     * @param {Element} node Node to parse
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {NodeInfo} nodeInfo Node metadata for current template.
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     */
    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {
      // Make copy of original attribute list, since the order may change
      // as attributes are added and removed
      let noted = false;
      let attrs = Array.from(node.attributes);
      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {
        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;
      }
      return noted;
    }

    /**
     * Parses a single template node attribute and adds node metadata to
     * `nodeInfo` for attributes of interest.
     *
     * This implementation adds metadata for `on-event="handler"` attributes
     * and `id` attributes.
     *
     * @param {Element} node Node to parse
     * @param {!TemplateInfo} templateInfo Template metadata for current template
     * @param {!NodeInfo} nodeInfo Node metadata for current template.
     * @param {string} name Attribute name
     * @param {string} value Attribute value
     * @return {boolean} `true` if the visited node added node-specific
     *   metadata to `nodeInfo`
     */
    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
      // events (on-*)
      if (name.slice(0, 3) === 'on-') {
        node.removeAttribute(name);
        nodeInfo.events = nodeInfo.events || [];
        nodeInfo.events.push({
          name: name.slice(3),
          value
        });
        return true;
      }
      // static id
      else if (name === 'id') {
        nodeInfo.id = value;
        return true;
      }
      return false;
    }

    /**
     * Returns the `content` document fragment for a given template.
     *
     * For nested templates, Polymer performs an optimization to cache nested
     * template content to avoid the cost of cloning deeply nested templates.
     * This method retrieves the cached content for a given template.
     *
     * @param {HTMLTemplateElement} template Template to retrieve `content` for
     * @return {DocumentFragment} Content fragment
     */
    static _contentForTemplate(template) {
      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;
      return (templateInfo && templateInfo.content) || template.content;
    }

    /**
     * Clones the provided template content and returns a document fragment
     * containing the cloned dom.
     *
     * The template is parsed (once and memoized) using this library's
     * template parsing features, and provides the following value-added
     * features:
     * * Adds declarative event listeners for `on-event="handler"` attributes
     * * Generates an "id map" for all nodes with id's under `$` on returned
     *   document fragment
     * * Passes template info including `content` back to templates as
     *   `_templateInfo` (a performance optimization to avoid deep template
     *   cloning)
     *
     * Note that the memoized template parsing process is destructive to the
     * template: attributes for bindings and declarative event listeners are
     * removed after being noted in notes, and any nested `<template>.content`
     * is removed and stored in notes as well.
     *
     * @param {!HTMLTemplateElement} template Template to stamp
     * @return {!StampedTemplate} Cloned template content
     */
    _stampTemplate(template) {
      // Polyfill support: bootstrap the template if it has not already been
      if (template && !template.content &&
          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {
        HTMLTemplateElement.decorate(template);
      }
      let templateInfo = this.constructor._parseTemplate(template);
      let nodeInfo = templateInfo.nodeInfoList;
      let content = templateInfo.content || template.content;
      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));
      // NOTE: ShadyDom optimization indicating there is an insertion point
      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;
      let nodes = dom.nodeList = new Array(nodeInfo.length);
      dom.$ = {};
      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {
        let node = nodes[i] = findTemplateNode(dom, info);
        applyIdToMap(this, dom.$, node, info);
        applyTemplateContent(this, node, info);
        applyEventListener(this, node, info);
      }
      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign
      return dom;
    }

    /**
     * Adds an event listener by method name for the event provided.
     *
     * This method generates a handler function that looks up the method
     * name at handling time.
     *
     * @param {!Node} node Node to add listener on
     * @param {string} eventName Name of event
     * @param {string} methodName Name of method
     * @param {*=} context Context the method will be called on (defaults
     *   to `node`)
     * @return {Function} Generated handler function
     */
    _addMethodEventListenerToNode(node, eventName, methodName, context) {
      context = context || node;
      let handler = createNodeEventHandler(context, eventName, methodName);
      this._addEventListenerToNode(node, eventName, handler);
      return handler;
    }

    /**
     * Override point for adding custom or simulated event handling.
     *
     * @param {!Node} node Node to add event listener to
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to add
     * @return {void}
     */
    _addEventListenerToNode(node, eventName, handler) {
      node.addEventListener(eventName, handler);
    }

    /**
     * Override point for adding custom or simulated event handling.
     *
     * @param {Node} node Node to remove event listener from
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to remove
     * @return {void}
     */
    _removeEventListenerFromNode(node, eventName, handler) {
      node.removeEventListener(eventName, handler);
    }

  }

  return TemplateStamp;

});
/* harmony export (immutable) */ __webpack_exports__["a"] = TemplateStamp;



/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__properties_changed_js__ = __webpack_require__(17);




/**
 * Creates a copy of `props` with each property normalized such that
 * upgraded it is an object with at least a type property { type: Type}.
 *
 * @param {Object} props Properties to normalize
 * @return {Object} Copy of input `props` with normalized properties that
 * are in the form {type: Type}
 * @private
 */
function normalizeProperties(props) {
  const output = {};
  for (let p in props) {
    const o = props[p];
    output[p] = (typeof o === 'function') ? {type: o} : o;
  }
  return output;
}

const PropertiesMixin = Object(__WEBPACK_IMPORTED_MODULE_1__utils_mixin_js__["a" /* dedupingMixin */])(superClass => {

 /**
  * @constructor
  * @extends {superClass}
  * @implements {Polymer_PropertiesChanged}
  */
 const base = Object(__WEBPACK_IMPORTED_MODULE_2__properties_changed_js__["a" /* PropertiesChanged */])(superClass);

 /**
  * Returns the super class constructor for the given class, if it is an
  * instance of the PropertiesMixin.
  *
  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
  * @return {PropertiesMixinConstructor} Super class constructor
  */
 function superPropertiesClass(constructor) {
   const superCtor = Object.getPrototypeOf(constructor);
   // Note, the `PropertiesMixin` class below only refers to the class
   // generated by this call to the mixin; the instanceof test only works
   // because the mixin is deduped and guaranteed only to apply once, hence
   // all constructors in a proto chain will see the same `PropertiesMixin`
   return (superCtor.prototype instanceof PropertiesMixin) ?
     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;
 }

 /**
  * Returns a memoized version of the `properties` object for the
  * given class. Properties not in object format are converted to at
  * least {type}.
  *
  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
  * @return {Object} Memoized properties object
  */
 function ownProperties(constructor) {
   if (!constructor.hasOwnProperty(
     JSCompiler_renameProperty('__ownProperties', constructor))) {
     const props = constructor.properties;
     constructor.__ownProperties = props ? normalizeProperties(props) : null;
   }
   return constructor.__ownProperties;
 }

 /**
  * @polymer
  * @mixinClass
  * @extends {base}
  * @implements {Polymer_PropertiesMixin}
  * @unrestricted
  */
 class PropertiesMixin extends base {

   /**
    * Implements standard custom elements getter to observes the attributes
    * listed in `properties`.
    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
    */
   static get observedAttributes() {
     const props = this._properties;
     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];
   }

   /**
    * Finalizes an element definition, including ensuring any super classes
    * are also finalized. This includes ensuring property
    * accessors exist on the element prototype. This method calls
    * `_finalizeClass` to finalize each constructor in the prototype chain.
    * @return {void}
    */
   static finalize() {
     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {
       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));
       if (superCtor) {
         superCtor.finalize();
       }
       this.__finalized = true;
       this._finalizeClass();
     }
   }

   /**
    * Finalize an element class. This includes ensuring property
    * accessors exist on the element prototype. This method is called by
    * `finalize` and finalizes the class constructor.
    *
    * @protected
    */
   static _finalizeClass() {
     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));
     if (props) {
       this.createProperties(props);
     }
   }

   /**
    * Returns a memoized version of all properties, including those inherited
    * from super classes. Properties not in object format are converted to
    * at least {type}.
    *
    * @return {Object} Object containing properties for this class
    * @protected
    */
   static get _properties() {
     if (!this.hasOwnProperty(
       JSCompiler_renameProperty('__properties', this))) {
       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));
       this.__properties = Object.assign({},
         superCtor && superCtor._properties,
         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));
     }
     return this.__properties;
   }

   /**
    * Overrides `PropertiesChanged` method to return type specified in the
    * static `properties` object for the given property.
    * @param {string} name Name of property
    * @return {*} Type to which to deserialize attribute
    *
    * @protected
    */
   static typeForProperty(name) {
     const info = this._properties[name];
     return info && info.type;
   }

   /**
    * Overrides `PropertiesChanged` method and adds a call to
    * `finalize` which lazily configures the element's property accessors.
    * @override
    * @return {void}
    */
   _initializeProperties() {
     this.constructor.finalize();
     super._initializeProperties();
   }

   /**
    * Called when the element is added to a document.
    * Calls `_enableProperties` to turn on property system from
    * `PropertiesChanged`.
    * @suppress {missingProperties} Super may or may not implement the callback
    * @return {void}
    */
   connectedCallback() {
     if (super.connectedCallback) {
       super.connectedCallback();
     }
     this._enableProperties();
   }

   /**
    * Called when the element is removed from a document
    * @suppress {missingProperties} Super may or may not implement the callback
    * @return {void}
    */
   disconnectedCallback() {
     if (super.disconnectedCallback) {
       super.disconnectedCallback();
     }
   }

 }

 return PropertiesMixin;

});
/* harmony export (immutable) */ __webpack_exports__["a"] = PropertiesMixin;



/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


/**
 * @param {*} value Object to stringify into HTML
 * @return {string} HTML stringified form of `obj`
 */
function htmlValue(value) {
  if (value instanceof HTMLTemplateElement) {
    return /** @type {!HTMLTemplateElement} */(value).innerHTML;
  } else {
    return String(value);
  }
}

const html = function html(strings, ...values) {
  // use raw strings to preserve literal escapes in strings
  /** @type {!Array<string>} */
  const rawStrings = strings.raw;
  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));
  template.innerHTML = values.reduce((acc, v, idx) =>
    acc + htmlValue(v) + rawStrings[idx + 1], rawStrings[0]);
  return template;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = html;



/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Templatize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TemplateInstanceBase; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_property_effects_js__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_mutable_data_js__ = __webpack_require__(18);




// Base class for HTMLTemplateElement extension that has property effects
// machinery for propagating host properties to children. This is an ES5
// class only because Babel (incorrectly) requires super() in the class
// constructor even though no `this` is used and it returns an instance.
let newInstance = null;
/**
 * @constructor
 * @extends {HTMLTemplateElement}
 */
function HTMLTemplateElementExtension() { return newInstance; }
HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {
  constructor: {
    value: HTMLTemplateElementExtension,
    writable: true
  }
});
/**
 * @constructor
 * @implements {Polymer_PropertyEffects}
 * @extends {HTMLTemplateElementExtension}
 */
const DataTemplate = Object(__WEBPACK_IMPORTED_MODULE_1__mixins_property_effects_js__["a" /* PropertyEffects */])(HTMLTemplateElementExtension);
/**
 * @constructor
 * @implements {Polymer_MutableData}
 * @extends {DataTemplate}
 */
const MutableDataTemplate = Object(__WEBPACK_IMPORTED_MODULE_2__mixins_mutable_data_js__["a" /* MutableData */])(DataTemplate);

// Applies a DataTemplate subclass to a <template> instance
function upgradeTemplate(template, constructor) {
  newInstance = template;
  Object.setPrototypeOf(template, constructor.prototype);
  new constructor();
  newInstance = null;
}

// Base class for TemplateInstance's
/**
 * @constructor
 * @implements {Polymer_PropertyEffects}
 */
const base = Object(__WEBPACK_IMPORTED_MODULE_1__mixins_property_effects_js__["a" /* PropertyEffects */])(class {});

/**
 * @polymer
 * @customElement
 * @appliesMixin Polymer.PropertyEffects
 * @unrestricted
 */
class TemplateInstanceBase extends base {
  constructor(props) {
    super();
    this._configureProperties(props);
    this.root = this._stampTemplate(this.__dataHost);
    // Save list of stamped children
    let children = this.children = [];
    for (let n = this.root.firstChild; n; n=n.nextSibling) {
      children.push(n);
      n.__templatizeInstance = this;
    }
    if (this.__templatizeOwner.__hideTemplateChildren__) {
      this._showHideChildren(true);
    }
    // Flush props only when props are passed if instance props exist
    // or when there isn't instance props.
    let options = this.__templatizeOptions;
    if ((props && options.instanceProps) || !options.instanceProps) {
      this._enableProperties();
    }
  }
  /**
   * Configure the given `props` by calling `_setPendingProperty`. Also
   * sets any properties stored in `__hostProps`.
   * @private
   * @param {Object} props Object of property name-value pairs to set.
   * @return {void}
   */
  _configureProperties(props) {
    let options = this.__templatizeOptions;
    if (props) {
      for (let iprop in options.instanceProps) {
        if (iprop in props) {
          this._setPendingProperty(iprop, props[iprop]);
        }
      }
    }
    for (let hprop in this.__hostProps) {
      this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);
    }
  }
  /**
   * Forwards a host property to this instance.  This method should be
   * called on instances from the `options.forwardHostProp` callback
   * to propagate changes of host properties to each instance.
   *
   * Note this method enqueues the change, which are flushed as a batch.
   *
   * @param {string} prop Property or path name
   * @param {*} value Value of the property to forward
   * @return {void}
   */
  forwardHostProp(prop, value) {
    if (this._setPendingPropertyOrPath(prop, value, false, true)) {
      this.__dataHost._enqueueClient(this);
    }
  }

  /**
   * Override point for adding custom or simulated event handling.
   *
   * @param {!Node} node Node to add event listener to
   * @param {string} eventName Name of event
   * @param {function(!Event):void} handler Listener function to add
   * @return {void}
   */
  _addEventListenerToNode(node, eventName, handler) {
    if (this._methodHost && this.__templatizeOptions.parentModel) {
      // If this instance should be considered a parent model, decorate
      // events this template instance as `model`
      this._methodHost._addEventListenerToNode(node, eventName, (e) => {
        e.model = this;
        handler(e);
      });
    } else {
      // Otherwise delegate to the template's host (which could be)
      // another template instance
      let templateHost = this.__dataHost.__dataHost;
      if (templateHost) {
        templateHost._addEventListenerToNode(node, eventName, handler);
      }
    }
  }
  /**
   * Shows or hides the template instance top level child elements. For
   * text nodes, `textContent` is removed while "hidden" and replaced when
   * "shown."
   * @param {boolean} hide Set to true to hide the children;
   * set to false to show them.
   * @return {void}
   * @protected
   */
  _showHideChildren(hide) {
    let c = this.children;
    for (let i=0; i<c.length; i++) {
      let n = c[i];
      // Ignore non-changes
      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {
        if (n.nodeType === Node.TEXT_NODE) {
          if (hide) {
            n.__polymerTextContent__ = n.textContent;
            n.textContent = '';
          } else {
            n.textContent = n.__polymerTextContent__;
          }
        } else if (n.style) {
          if (hide) {
            n.__polymerDisplay__ = n.style.display;
            n.style.display = 'none';
          } else {
            n.style.display = n.__polymerDisplay__;
          }
        }
      }
      n.__hideTemplateChildren__ = hide;
      if (n._showHideChildren) {
        n._showHideChildren(hide);
      }
    }
  }
  /**
   * Overrides default property-effects implementation to intercept
   * textContent bindings while children are "hidden" and cache in
   * private storage for later retrieval.
   *
   * @param {!Node} node The node to set a property on
   * @param {string} prop The property to set
   * @param {*} value The value to set
   * @return {void}
   * @protected
   */
  _setUnmanagedPropertyToNode(node, prop, value) {
    if (node.__hideTemplateChildren__ &&
        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {
      node.__polymerTextContent__ = value;
    } else {
      super._setUnmanagedPropertyToNode(node, prop, value);
    }
  }
  /**
   * Find the parent model of this template instance.  The parent model
   * is either another templatize instance that had option `parentModel: true`,
   * or else the host element.
   *
   * @return {!Polymer_PropertyEffects} The parent model of this instance
   */
  get parentModel() {
    let model = this.__parentModel;
    if (!model) {
      let options;
      model = this;
      do {
        // A template instance's `__dataHost` is a <template>
        // `model.__dataHost.__dataHost` is the template's host
        model = model.__dataHost.__dataHost;
      } while ((options = model.__templatizeOptions) && !options.parentModel);
      this.__parentModel = model;
    }
    return model;
  }
}

/** @type {!DataTemplate} */
TemplateInstanceBase.prototype.__dataHost;
/** @type {!TemplatizeOptions} */
TemplateInstanceBase.prototype.__templatizeOptions;
/** @type {!Polymer_PropertyEffects} */
TemplateInstanceBase.prototype._methodHost;
/** @type {!Object} */
TemplateInstanceBase.prototype.__templatizeOwner;
/** @type {!Object} */
TemplateInstanceBase.prototype.__hostProps;

/**
 * @constructor
 * @extends {TemplateInstanceBase}
 * @implements {Polymer_MutableData}
 */
const MutableTemplateInstanceBase = Object(__WEBPACK_IMPORTED_MODULE_2__mixins_mutable_data_js__["a" /* MutableData */])(TemplateInstanceBase);

function findMethodHost(template) {
  // Technically this should be the owner of the outermost template.
  // In shadow dom, this is always getRootNode().host, but we can
  // approximate this via cooperation with our dataHost always setting
  // `_methodHost` as long as there were bindings (or id's) on this
  // instance causing it to get a dataHost.
  let templateHost = template.__dataHost;
  return templateHost && templateHost._methodHost || templateHost;
}

/* eslint-disable valid-jsdoc */
/**
 * @suppress {missingProperties} class.prototype is not defined for some reason
 */
function createTemplatizerClass(template, templateInfo, options) {
  // Anonymous class created by the templatize
  let base = options.mutableData ?
    MutableTemplateInstanceBase : TemplateInstanceBase;
  /**
   * @constructor
   * @extends {base}
   * @private
   */
  let klass = class extends base { };
  klass.prototype.__templatizeOptions = options;
  klass.prototype._bindTemplate(template);
  addNotifyEffects(klass, template, templateInfo, options);
  return klass;
}

/**
 * @suppress {missingProperties} class.prototype is not defined for some reason
 */
function addPropagateEffects(template, templateInfo, options) {
  let userForwardHostProp = options.forwardHostProp;
  if (userForwardHostProp) {
    // Provide data API and property effects on memoized template class
    let klass = templateInfo.templatizeTemplateClass;
    if (!klass) {
      let base = options.mutableData ? MutableDataTemplate : DataTemplate;
      klass = templateInfo.templatizeTemplateClass =
        class TemplatizedTemplate extends base {};
      // Add template - >instances effects
      // and host <- template effects
      let hostProps = templateInfo.hostProps;
      for (let prop in hostProps) {
        klass.prototype._addPropertyEffect('_host_' + prop,
          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,
          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});
        klass.prototype._createNotifyingProperty('_host_' + prop);
      }
    }
    upgradeTemplate(template, klass);
    // Mix any pre-bound data into __data; no need to flush this to
    // instances since they pull from the template at instance-time
    if (template.__dataProto) {
      // Note, generally `__dataProto` could be chained, but it's guaranteed
      // to not be since this is a vanilla template we just added effects to
      Object.assign(template.__data, template.__dataProto);
    }
    // Clear any pending data for performance
    template.__dataTemp = {};
    template.__dataPending = null;
    template.__dataOld = null;
    template._enableProperties();
  }
}
/* eslint-enable valid-jsdoc */

function createForwardHostPropEffect(hostProp, userForwardHostProp) {
  return function forwardHostProp(template, prop, props) {
    userForwardHostProp.call(template.__templatizeOwner,
      prop.substring('_host_'.length), props[prop]);
  };
}

function addNotifyEffects(klass, template, templateInfo, options) {
  let hostProps = templateInfo.hostProps || {};
  for (let iprop in options.instanceProps) {
    delete hostProps[iprop];
    let userNotifyInstanceProp = options.notifyInstanceProp;
    if (userNotifyInstanceProp) {
      klass.prototype._addPropertyEffect(iprop,
        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});
    }
  }
  if (options.forwardHostProp && template.__dataHost) {
    for (let hprop in hostProps) {
      klass.prototype._addPropertyEffect(hprop,
        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
        {fn: createNotifyHostPropEffect()});
    }
  }
}

function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {
  return function notifyInstanceProp(inst, prop, props) {
    userNotifyInstanceProp.call(inst.__templatizeOwner,
      inst, prop, props[prop]);
  };
}

function createNotifyHostPropEffect() {
  return function notifyHostProp(inst, prop, props) {
    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);
  };
}

/**
 * Module for preparing and stamping instances of templates that utilize
 * Polymer's data-binding and declarative event listener features.
 *
 * Example:
 *
 *     // Get a template from somewhere, e.g. light DOM
 *     let template = this.querySelector('template');
 *     // Prepare the template
 *     let TemplateClass = Polymer.Templatize.templatize(template);
 *     // Instance the template with an initial data model
 *     let instance = new TemplateClass({myProp: 'initial'});
 *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM
 *     this.shadowRoot.appendChild(instance.root);
 *     // Changing a property on the instance will propagate to bindings
 *     // in the template
 *     instance.myProp = 'new value';
 *
 * The `options` dictionary passed to `templatize` allows for customizing
 * features of the generated template class, including how outer-scope host
 * properties should be forwarded into template instances, how any instance
 * properties added into the template's scope should be notified out to
 * the host, and whether the instance should be decorated as a "parent model"
 * of any event handlers.
 *
 *     // Customize property forwarding and event model decoration
 *     let TemplateClass = Polymer.Templatize.templatize(template, this, {
 *       parentModel: true,
 *       instanceProps: {...},
 *       forwardHostProp(property, value) {...},
 *       notifyInstanceProp(instance, property, value) {...},
 *     });
 *
 *
 * @namespace
 * @memberof Polymer
 * @summary Module for preparing and stamping instances of templates
 *   utilizing Polymer templating features.
 */

const Templatize = {

  /**
   * Returns an anonymous `Polymer.PropertyEffects` class bound to the
   * `<template>` provided.  Instancing the class will result in the
   * template being stamped into document fragment stored as the instance's
   * `root` property, after which it can be appended to the DOM.
   *
   * Templates may utilize all Polymer data-binding features as well as
   * declarative event listeners.  Event listeners and inline computing
   * functions in the template will be called on the host of the template.
   *
   * The constructor returned takes a single argument dictionary of initial
   * property values to propagate into template bindings.  Additionally
   * host properties can be forwarded in, and instance properties can be
   * notified out by providing optional callbacks in the `options` dictionary.
   *
   * Valid configuration in `options` are as follows:
   *
   * - `forwardHostProp(property, value)`: Called when a property referenced
   *   in the template changed on the template's host. As this library does
   *   not retain references to templates instanced by the user, it is the
   *   templatize owner's responsibility to forward host property changes into
   *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
   *    method on the generated class should be called to forward host
   *   properties into the template to prevent unnecessary property-changed
   *   notifications. Any properties referenced in the template that are not
   *   defined in `instanceProps` will be notified up to the template's host
   *   automatically.
   * - `instanceProps`: Dictionary of property names that will be added
   *   to the instance by the templatize owner.  These properties shadow any
   *   host properties, and changes within the template to these properties
   *   will result in `notifyInstanceProp` being called.
   * - `mutableData`: When `true`, the generated class will skip strict
   *   dirty-checking for objects and arrays (always consider them to be
   *   "dirty").
   * - `notifyInstanceProp(instance, property, value)`: Called when
   *   an instance property changes.  Users may choose to call `notifyPath`
   *   on e.g. the owner to notify the change.
   * - `parentModel`: When `true`, events handled by declarative event listeners
   *   (`on-event="handler"`) will be decorated with a `model` property pointing
   *   to the template instance that stamped it.  It will also be returned
   *   from `instance.parentModel` in cases where template instance nesting
   *   causes an inner model to shadow an outer model.
   *
   * Note that the class returned from `templatize` is generated only once
   * for a given `<template>` using `options` from the first call for that
   * template, and the cached class is returned for all subsequent calls to
   * `templatize` for that template.  As such, `options` callbacks should not
   * close over owner-specific properties since only the first `options` is
   * used; rather, callbacks are called bound to the `owner`, and so context
   * needed from the callbacks (such as references to `instances` stamped)
   * should be stored on the `owner` such that they can be retrieved via `this`.
   *
   * @memberof Polymer.Templatize
   * @param {!HTMLTemplateElement} template Template to templatize
   * @param {!Polymer_PropertyEffects} owner Owner of the template instances;
   *   any optional callbacks will be bound to this owner.
   * @param {Object=} options Options dictionary (see summary for details)
   * @return {function(new:TemplateInstanceBase)} Generated class bound to the template
   *   provided
   * @suppress {invalidCasts}
   */
  templatize(template, owner, options) {
    options = /** @type {!TemplatizeOptions} */(options || {});
    if (template.__templatizeOwner) {
      throw new Error('A <template> can only be templatized once');
    }
    template.__templatizeOwner = owner;
    let templateInfo = owner.constructor._parseTemplate(template);
    // Get memoized base class for the prototypical template, which
    // includes property effects for binding template & forwarding
    let baseClass = templateInfo.templatizeInstanceClass;
    if (!baseClass) {
      baseClass = createTemplatizerClass(template, templateInfo, options);
      templateInfo.templatizeInstanceClass = baseClass;
    }
    // Host property forwarding must be installed onto template instance
    addPropagateEffects(template, templateInfo, options);
    // Subclass base class and add reference for this specific template
    /** @private */
    let klass = class TemplateInstance extends baseClass {};
    klass.prototype._methodHost = findMethodHost(template);
    klass.prototype.__dataHost = template;
    klass.prototype.__templatizeOwner = owner;
    klass.prototype.__hostProps = templateInfo.hostProps;
    klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign
    return klass;
  },

  /**
   * Returns the template "model" associated with a given element, which
   * serves as the binding scope for the template instance the element is
   * contained in. A template model is an instance of
   * `TemplateInstanceBase`, and should be used to manipulate data
   * associated with this template instance.
   *
   * Example:
   *
   *   let model = modelForElement(el);
   *   if (model.index < 10) {
   *     model.set('item.checked', true);
   *   }
   *
   * @memberof Polymer.Templatize
   * @param {HTMLTemplateElement} template The model will be returned for
   *   elements stamped from this template
   * @param {Node=} node Node for which to return a template model.
   * @return {TemplateInstanceBase} Template instance representing the
   *   binding scope for the element
   */
  modelForElement(template, node) {
    let model;
    while (node) {
      // An element with a __templatizeInstance marks the top boundary
      // of a scope; walk up until we find one, and then ensure that
      // its __dataHost matches `this`, meaning this dom-repeat stamped it
      if ((model = node.__templatizeInstance)) {
        // Found an element stamped by another template; keep walking up
        // from its __dataHost
        if (model.__dataHost != template) {
          node = model.__dataHost;
        } else {
          return model;
        }
      } else {
        // Still in a template scope, keep going up until
        // a __templatizeInstance is found
        node = node.parentNode;
      }
    }
    return null;
  }
};





/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Debouncer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixin_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__async_js__ = __webpack_require__(9);




/**
 * @summary Collapse multiple callbacks into one invocation after a timer.
 * @memberof Polymer
 */
class Debouncer {
  constructor() {
    this._asyncModule = null;
    this._callback = null;
    this._timer = null;
  }
  /**
   * Sets the scheduler; that is, a module with the Async interface,
   * a callback and optional arguments to be passed to the run function
   * from the async module.
   *
   * @param {!AsyncInterface} asyncModule Object with Async interface.
   * @param {function()} callback Callback to run.
   * @return {void}
   */
  setConfig(asyncModule, callback) {
    this._asyncModule = asyncModule;
    this._callback = callback;
    this._timer = this._asyncModule.run(() => {
      this._timer = null;
      this._callback();
    });
  }
  /**
   * Cancels an active debouncer and returns a reference to itself.
   *
   * @return {void}
   */
  cancel() {
    if (this.isActive()) {
      this._asyncModule.cancel(this._timer);
      this._timer = null;
    }
  }
  /**
   * Flushes an active debouncer and returns a reference to itself.
   *
   * @return {void}
   */
  flush() {
    if (this.isActive()) {
      this.cancel();
      this._callback();
    }
  }
  /**
   * Returns true if the debouncer is active.
   *
   * @return {boolean} True if active.
   */
  isActive() {
    return this._timer != null;
  }
  /**
   * Creates a debouncer if no debouncer is passed as a parameter
   * or it cancels an active debouncer otherwise. The following
   * example shows how a debouncer can be called multiple times within a
   * microtask and "debounced" such that the provided callback function is
   * called once. Add this method to a custom element:
   *
   * _debounceWork() {
   *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,
   *       Polymer.Async.microTask, () => {
   *     this._doWork();
   *   });
   * }
   *
   * If the `_debounceWork` method is called multiple times within the same
   * microtask, the `_doWork` function will be called only once at the next
   * microtask checkpoint.
   *
   * Note: In testing it is often convenient to avoid asynchrony. To accomplish
   * this with a debouncer, you can use `Polymer.enqueueDebouncer` and
   * `Polymer.flush`. For example, extend the above example by adding
   * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the
   * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure
   * the debouncer has completed.
   *
   * @param {Debouncer?} debouncer Debouncer object.
   * @param {!AsyncInterface} asyncModule Object with Async interface
   * @param {function()} callback Callback to run.
   * @return {!Debouncer} Returns a debouncer object.
   */
  static debounce(debouncer, asyncModule, callback) {
    if (debouncer instanceof Debouncer) {
      debouncer.cancel();
    } else {
      debouncer = new Debouncer();
    }
    debouncer.setConfig(asyncModule, callback);
    return debouncer;
  }
}




/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boot_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__boot_js__);


let debouncerQueue = [];

const enqueueDebouncer = function(debouncer) {
  debouncerQueue.push(debouncer);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = enqueueDebouncer;


function flushDebouncers() {
  const didFlush = Boolean(debouncerQueue.length);
  while (debouncerQueue.length) {
    try {
      debouncerQueue.shift().flush();
    } catch(e) {
      setTimeout(() => {
        throw e;
      });
    }
  }
  return didFlush;
}

const flush = function() {
  let shadyDOM, debouncers;
  do {
    shadyDOM = window.ShadyDOM && ShadyDOM.flush();
    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {
      window.ShadyCSS.ScopingShim.flush();
    }
    debouncers = flushDebouncers();
  } while (shadyDOM || debouncers);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = flush;



/***/ }),
/* 46 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const React = __webpack_require__(10);
const ReactDOM = __webpack_require__(51);
exports.Hello = (props) => React.createElement("h1", null,
    "Hello from ",
    props.compiler,
    " and ",
    props.framework,
    "!");
ReactDOM.render(React.createElement(exports.Hello, { compiler: "TypeScript", framework: "React" }), document.getElementById("example"));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var m=__webpack_require__(5),n=__webpack_require__(6),p=__webpack_require__(3),q="function"===typeof Symbol&&Symbol["for"],r=q?Symbol["for"]("react.element"):60103,t=q?Symbol["for"]("react.call"):60104,u=q?Symbol["for"]("react.return"):60105,v=q?Symbol["for"]("react.portal"):60106,w=q?Symbol["for"]("react.fragment"):60107,x="function"===typeof Symbol&&Symbol.iterator;
function y(a){for(var b=arguments.length-1,e="Minified React error #"+a+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d"+a,c=0;c<b;c++)e+="\x26args[]\x3d"+encodeURIComponent(arguments[c+1]);b=Error(e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name="Invariant Violation";b.framesToPop=1;throw b;}
var z={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function A(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}A.prototype.isReactComponent={};A.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?y("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};A.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function B(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}function C(){}C.prototype=A.prototype;var D=B.prototype=new C;D.constructor=B;m(D,A.prototype);D.isPureReactComponent=!0;function E(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}var F=E.prototype=new C;F.constructor=E;m(F,A.prototype);F.unstable_isAsyncReactComponent=!0;F.render=function(){return this.props.children};var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};
function J(a,b,e){var c,d={},g=null,k=null;if(null!=b)for(c in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)H.call(b,c)&&!I.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var h=Array(f),l=0;l<f;l++)h[l]=arguments[l+2];d.children=h}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:r,type:a,key:g,ref:k,props:d,_owner:G.current}}function K(a){return"object"===typeof a&&null!==a&&a.$$typeof===r}
function escape(a){var b={"\x3d":"\x3d0",":":"\x3d2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var L=/\/+/g,M=[];function N(a,b,e,c){if(M.length){var d=M.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function O(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>M.length&&M.push(a)}
function P(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case r:case t:case u:case v:g=!0}}if(g)return e(c,a,""===b?"."+Q(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+Q(d,k);g+=P(d,f,e,c)}else if(null===a||"undefined"===typeof a?f=null:(f=x&&a[x]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=
f.call(a),k=0;!(d=a.next()).done;)d=d.value,f=b+Q(d,k++),g+=P(d,f,e,c);else"object"===d&&(e=""+a,y("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function Q(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function R(a,b){a.func.call(a.context,b,a.count++)}
function S(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?T(a,c,e,p.thatReturnsArgument):null!=a&&(K(a)&&(b=d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(L,"$\x26/")+"/")+e,a={$$typeof:r,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function T(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(L,"$\x26/")+"/");b=N(b,g,c,d);null==a||P(a,"",S,b);O(b)}
var U={Children:{map:function(a,b,e){if(null==a)return a;var c=[];T(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=N(null,null,b,e);null==a||P(a,"",R,b);O(b)},count:function(a){return null==a?0:P(a,"",p.thatReturnsNull,null)},toArray:function(a){var b=[];T(a,b,null,p.thatReturnsArgument);return b},only:function(a){K(a)?void 0:y("143");return a}},Component:A,PureComponent:B,unstable_AsyncComponent:E,Fragment:w,createElement:J,cloneElement:function(a,b,e){var c=m({},a.props),
d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)H.call(b,h)&&!I.hasOwnProperty(h)&&(c[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)c.children=e;else if(1<h){f=Array(h);for(var l=0;l<h;l++)f[l]=arguments[l+2];c.children=f}return{$$typeof:r,type:a.type,key:d,ref:g,props:c,_owner:k}},createFactory:function(a){var b=J.bind(null,a);b.type=a;return b},
isValidElement:K,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:G,assign:m}},V=Object.freeze({default:U}),W=V&&U||V;module.exports=W["default"]?W["default"]:W;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = __webpack_require__(5);
var emptyObject = __webpack_require__(6);
var invariant = __webpack_require__(11);
var warning = __webpack_require__(12);
var emptyFunction = __webpack_require__(3);
var checkPropTypes = __webpack_require__(19);

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.2.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol['for'];

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var constructor = publicInstance.constructor;
    var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
    var warningKey = componentName + '.' + callerName;
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }
    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

/**
 * Base class helpers for the updating state of a component.
 */
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function PureComponent(props, context, updater) {
  // Duplicated from Component.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;
var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
// Avoid an extra prototype jump for these methods.
_assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

function AsyncComponent(props, context, updater) {
  // Duplicated from Component.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
asyncComponentPrototype.constructor = AsyncComponent;
// Avoid an extra prototype jump for these methods.
_assign(asyncComponentPrototype, Component.prototype);
asyncComponentPrototype.unstable_isAsyncReactComponent = true;
asyncComponentPrototype.render = function () {
  return this.props.children;
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    });
    // self and source are DEV only properties.
    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    });
    // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.
    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */
function createElement(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
}

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */
function cloneElement(element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var ReactDebugCurrentFrame = {};

{
  // Component that is being worked on
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var impl = ReactDebugCurrentFrame.getCurrentStack;
    if (impl) {
      return impl();
    }
    return null;
  };
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;
  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;
      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_CALL_TYPE:
          case REACT_RETURN_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }
    }
  }

  if (invokeCallback) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'string') {
    return type;
  }
  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  return null;
}

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

{
  var currentlyValidatingElement = null;

  var propTypesMisspellWarningShown = false;

  var getDisplayName = function (element) {
    if (element == null) {
      return '#empty';
    } else if (typeof element === 'string' || typeof element === 'number') {
      return '#text';
    } else if (typeof element.type === 'string') {
      return element.type;
    } else if (element.type === REACT_FRAGMENT_TYPE) {
      return 'React.Fragment';
    } else {
      return element.type.displayName || element.type.name || 'Unknown';
    }
  };

  var getStackAddendum = function () {
    var stack = '';
    if (currentlyValidatingElement) {
      var name = getDisplayName(currentlyValidatingElement);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
    }
    stack += ReactDebugCurrentFrame.getStackAddendum() || '';
    return stack;
  };

  var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
  }

  currentlyValidatingElement = element;
  {
    warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
  }
  currentlyValidatingElement = null;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  var propTypes = componentClass.propTypes;
  if (propTypes) {
    currentlyValidatingElement = element;
    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
    currentlyValidatingElement = null;
  } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
  }
}

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */
function validateFragmentProps(fragment) {
  currentlyValidatingElement = fragment;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (!VALID_FRAGMENT_PROPS.has(key)) {
        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (fragment.ref !== null) {
    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
  }

  currentlyValidatingElement = null;
}

function createElementWithValidation(type, props, children) {
  var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';
  // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.
  if (!validType) {
    var info = '';
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(props);
    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    info += getStackAddendum() || '';

    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
  }

  var element = createElement.apply(this, arguments);

  // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.
  if (element == null) {
    return element;
  }

  // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)
  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}

function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  // Legacy hook TODO: Warn if this is accessed
  validatedFactory.type = type;

  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}

function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);
  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }
  validatePropTypes(newElement);
  return newElement;
}

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },

  Component: Component,
  PureComponent: PureComponent,
  unstable_AsyncComponent: AsyncComponent,

  Fragment: REACT_FRAGMENT_TYPE,

  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: ReactCurrentOwner,
    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
    assign: _assign
  }
};

{
  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var react = React$3['default'] ? React$3['default'] : React$3;

module.exports = react;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(52);
} else {
  module.exports = __webpack_require__(55);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.2.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(10),l=__webpack_require__(20),B=__webpack_require__(5),C=__webpack_require__(3),ba=__webpack_require__(21),da=__webpack_require__(22),ea=__webpack_require__(23),fa=__webpack_require__(24),ia=__webpack_require__(25),D=__webpack_require__(6);
function E(a){for(var b=arguments.length-1,c="Minified React error #"+a+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d"+a,d=0;d<b;d++)c+="\x26args[]\x3d"+encodeURIComponent(arguments[d+1]);b=Error(c+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name="Invariant Violation";b.framesToPop=1;throw b;}aa?void 0:E("227");
var oa={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function pa(a,b){return(a&b)===b}
var ta={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(a){var b=ta,c=a.Properties||{},d=a.DOMAttributeNamespaces||{},e=a.DOMAttributeNames||{};a=a.DOMMutationMethods||{};for(var f in c){ua.hasOwnProperty(f)?E("48",f):void 0;var g=f.toLowerCase(),h=c[f];g={attributeName:g,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:pa(h,b.MUST_USE_PROPERTY),
hasBooleanValue:pa(h,b.HAS_BOOLEAN_VALUE),hasNumericValue:pa(h,b.HAS_NUMERIC_VALUE),hasPositiveNumericValue:pa(h,b.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:pa(h,b.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:pa(h,b.HAS_STRING_BOOLEAN_VALUE)};1>=g.hasBooleanValue+g.hasNumericValue+g.hasOverloadedBooleanValue?void 0:E("50",f);e.hasOwnProperty(f)&&(g.attributeName=e[f]);d.hasOwnProperty(f)&&(g.attributeNamespace=d[f]);a.hasOwnProperty(f)&&(g.mutationMethod=a[f]);ua[f]=g}}},ua={};
function va(a,b){if(oa.hasOwnProperty(a)||2<a.length&&("o"===a[0]||"O"===a[0])&&("n"===a[1]||"N"===a[1]))return!1;if(null===b)return!0;switch(typeof b){case "boolean":return oa.hasOwnProperty(a)?a=!0:(b=wa(a))?a=b.hasBooleanValue||b.hasStringBooleanValue||b.hasOverloadedBooleanValue:(a=a.toLowerCase().slice(0,5),a="data-"===a||"aria-"===a),a;case "undefined":case "number":case "string":case "object":return!0;default:return!1}}function wa(a){return ua.hasOwnProperty(a)?ua[a]:null}
var xa=ta,ya=xa.MUST_USE_PROPERTY,K=xa.HAS_BOOLEAN_VALUE,za=xa.HAS_NUMERIC_VALUE,Aa=xa.HAS_POSITIVE_NUMERIC_VALUE,Ba=xa.HAS_OVERLOADED_BOOLEAN_VALUE,Ca=xa.HAS_STRING_BOOLEAN_VALUE,Da={Properties:{allowFullScreen:K,async:K,autoFocus:K,autoPlay:K,capture:Ba,checked:ya|K,cols:Aa,contentEditable:Ca,controls:K,"default":K,defer:K,disabled:K,download:Ba,draggable:Ca,formNoValidate:K,hidden:K,loop:K,multiple:ya|K,muted:ya|K,noValidate:K,open:K,playsInline:K,readOnly:K,required:K,reversed:K,rows:Aa,rowSpan:za,
scoped:K,seamless:K,selected:ya|K,size:Aa,start:za,span:Aa,spellCheck:Ca,style:0,tabIndex:0,itemScope:K,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:Ca},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(a,b){if(null==b)return a.removeAttribute("value");"number"!==a.type||!1===a.hasAttribute("value")?a.setAttribute("value",""+b):a.validity&&!a.validity.badInput&&a.ownerDocument.activeElement!==a&&
a.setAttribute("value",""+b)}}},Ea=xa.HAS_STRING_BOOLEAN_VALUE,M={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},Ga={Properties:{autoReverse:Ea,externalResourcesRequired:Ea,preserveAlpha:Ea},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:M.xlink,xlinkArcrole:M.xlink,xlinkHref:M.xlink,xlinkRole:M.xlink,xlinkShow:M.xlink,xlinkTitle:M.xlink,xlinkType:M.xlink,
xmlBase:M.xml,xmlLang:M.xml,xmlSpace:M.xml}},Ha=/[\-\:]([a-z])/g;function Ia(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(a){var b=a.replace(Ha,
Ia);Ga.Properties[b]=0;Ga.DOMAttributeNames[b]=a});xa.injectDOMPropertyConfig(Da);xa.injectDOMPropertyConfig(Ga);
var P={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(a){"function"!==typeof a.invokeGuardedCallback?E("197"):void 0;Ja=a.invokeGuardedCallback}},invokeGuardedCallback:function(a,b,c,d,e,f,g,h,k){Ja.apply(P,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){P.invokeGuardedCallback.apply(this,arguments);if(P.hasCaughtError()){var q=P.clearCaughtError();P._hasRethrowError||(P._hasRethrowError=!0,P._rethrowError=
q)}},rethrowCaughtError:function(){return Ka.apply(P,arguments)},hasCaughtError:function(){return P._hasCaughtError},clearCaughtError:function(){if(P._hasCaughtError){var a=P._caughtError;P._caughtError=null;P._hasCaughtError=!1;return a}E("198")}};function Ja(a,b,c,d,e,f,g,h,k){P._hasCaughtError=!1;P._caughtError=null;var q=Array.prototype.slice.call(arguments,3);try{b.apply(c,q)}catch(v){P._caughtError=v,P._hasCaughtError=!0}}
function Ka(){if(P._hasRethrowError){var a=P._rethrowError;P._rethrowError=null;P._hasRethrowError=!1;throw a;}}var La=null,Ma={};
function Na(){if(La)for(var a in Ma){var b=Ma[a],c=La.indexOf(a);-1<c?void 0:E("96",a);if(!Oa[c]){b.extractEvents?void 0:E("97",a);Oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;Pa.hasOwnProperty(h)?E("99",h):void 0;Pa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&Qa(k[e],g,h);e=!0}else f.registrationName?(Qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:E("98",d,a)}}}}
function Qa(a,b,c){Ra[a]?E("100",a):void 0;Ra[a]=b;Sa[a]=b.eventTypes[c].dependencies}var Oa=[],Pa={},Ra={},Sa={};function Ta(a){La?E("101"):void 0;La=Array.prototype.slice.call(a);Na()}function Ua(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];Ma.hasOwnProperty(c)&&Ma[c]===d||(Ma[c]?E("102",c):void 0,Ma[c]=d,b=!0)}b&&Na()}
var Va=Object.freeze({plugins:Oa,eventNameDispatchConfigs:Pa,registrationNameModules:Ra,registrationNameDependencies:Sa,possibleRegistrationNames:null,injectEventPluginOrder:Ta,injectEventPluginsByName:Ua}),Wa=null,Xa=null,Ya=null;function Za(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=Ya(d);P.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}
function $a(a,b){null==b?E("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function ab(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var bb=null;
function cb(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)Za(a,b,c[e],d[e]);else c&&Za(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function db(a){return cb(a,!0)}function gb(a){return cb(a,!1)}var hb={injectEventPluginOrder:Ta,injectEventPluginsByName:Ua};
function ib(a,b){var c=a.stateNode;if(!c)return null;var d=Wa(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?E("231",b,typeof c):void 0;
return c}function jb(a,b,c,d){for(var e,f=0;f<Oa.length;f++){var g=Oa[f];g&&(g=g.extractEvents(a,b,c,d))&&(e=$a(e,g))}return e}function kb(a){a&&(bb=$a(bb,a))}function lb(a){var b=bb;bb=null;b&&(a?ab(b,db):ab(b,gb),bb?E("95"):void 0,P.rethrowCaughtError())}var mb=Object.freeze({injection:hb,getListener:ib,extractEvents:jb,enqueueEvents:kb,processEventQueue:lb}),nb=Math.random().toString(36).slice(2),Q="__reactInternalInstance$"+nb,ob="__reactEventHandlers$"+nb;
function pb(a){if(a[Q])return a[Q];for(var b=[];!a[Q];)if(b.push(a),a.parentNode)a=a.parentNode;else return null;var c=void 0,d=a[Q];if(5===d.tag||6===d.tag)return d;for(;a&&(d=a[Q]);a=b.pop())c=d;return c}function qb(a){if(5===a.tag||6===a.tag)return a.stateNode;E("33")}function rb(a){return a[ob]||null}
var sb=Object.freeze({precacheFiberNode:function(a,b){b[Q]=a},getClosestInstanceFromNode:pb,getInstanceFromNode:function(a){a=a[Q];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:qb,getFiberCurrentPropsFromNode:rb,updateFiberProps:function(a,b){a[ob]=b}});function tb(a){do a=a["return"];while(a&&5!==a.tag);return a?a:null}function ub(a,b,c){for(var d=[];a;)d.push(a),a=tb(a);for(a=d.length;0<a--;)b(d[a],"captured",c);for(a=0;a<d.length;a++)b(d[a],"bubbled",c)}
function vb(a,b,c){if(b=ib(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a)}function wb(a){a&&a.dispatchConfig.phasedRegistrationNames&&ub(a._targetInst,vb,a)}function xb(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?tb(b):null;ub(b,vb,a)}}
function yb(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=ib(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a))}function zb(a){a&&a.dispatchConfig.registrationName&&yb(a._targetInst,null,a)}function Ab(a){ab(a,wb)}
function Bb(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,g=0,h=e;h;h=tb(h))g++;h=0;for(var k=f;k;k=tb(k))h++;for(;0<g-h;)e=tb(e),g--;for(;0<h-g;)f=tb(f),h--;for(;g--;){if(e===f||e===f.alternate)break a;e=tb(e);f=tb(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){g=c.alternate;if(null!==g&&g===f)break;e.push(c);c=tb(c)}for(c=[];d&&d!==f;){g=d.alternate;if(null!==g&&g===f)break;c.push(d);d=tb(d)}for(d=0;d<e.length;d++)yb(e[d],"bubbled",a);for(a=c.length;0<a--;)yb(c[a],"captured",b)}
var Cb=Object.freeze({accumulateTwoPhaseDispatches:Ab,accumulateTwoPhaseDispatchesSkipTarget:function(a){ab(a,xb)},accumulateEnterLeaveDispatches:Bb,accumulateDirectDispatches:function(a){ab(a,zb)}}),Db=null;function Eb(){!Db&&l.canUseDOM&&(Db="textContent"in document.documentElement?"textContent":"innerText");return Db}var S={_root:null,_startText:null,_fallbackText:null};
function Fb(){if(S._fallbackText)return S._fallbackText;var a,b=S._startText,c=b.length,d,e=Gb(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);S._fallbackText=e.slice(a,1<d?1-d:void 0);return S._fallbackText}function Gb(){return"value"in S._root?S._root.value:S._root[Eb()]}
var Hb="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ib={type:null,target:null,currentTarget:C.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
function T(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?C.thatReturnsTrue:C.thatReturnsFalse;this.isPropagationStopped=C.thatReturnsFalse;return this}
B(T.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=C.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=C.thatReturnsTrue)},persist:function(){this.isPersistent=C.thatReturnsTrue},isPersistent:C.thatReturnsFalse,
destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<Hb.length;a++)this[Hb[a]]=null}});T.Interface=Ib;T.augmentClass=function(a,b){function c(){}c.prototype=this.prototype;var d=new c;B(d,a.prototype);a.prototype=d;a.prototype.constructor=a;a.Interface=B({},this.Interface,b);a.augmentClass=this.augmentClass;Jb(a)};Jb(T);function Kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function Lb(a){a instanceof this?void 0:E("223");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Jb(a){a.eventPool=[];a.getPooled=Kb;a.release=Lb}function Mb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Mb,{data:null});function Nb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Nb,{data:null});var Pb=[9,13,27,32],Vb=l.canUseDOM&&"CompositionEvent"in window,Wb=null;l.canUseDOM&&"documentMode"in document&&(Wb=document.documentMode);var Xb;
if(Xb=l.canUseDOM&&"TextEvent"in window&&!Wb){var Yb=window.opera;Xb=!("object"===typeof Yb&&"function"===typeof Yb.version&&12>=parseInt(Yb.version(),10))}
var Zb=Xb,$b=l.canUseDOM&&(!Vb||Wb&&8<Wb&&11>=Wb),ac=String.fromCharCode(32),bc={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},cc=!1;
function dc(a,b){switch(a){case "topKeyUp":return-1!==Pb.indexOf(b.keyCode);case "topKeyDown":return 229!==b.keyCode;case "topKeyPress":case "topMouseDown":case "topBlur":return!0;default:return!1}}function ec(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var fc=!1;function gc(a,b){switch(a){case "topCompositionEnd":return ec(b);case "topKeyPress":if(32!==b.which)return null;cc=!0;return ac;case "topTextInput":return a=b.data,a===ac&&cc?null:a;default:return null}}
function hc(a,b){if(fc)return"topCompositionEnd"===a||!Vb&&dc(a,b)?(a=Fb(),S._root=null,S._startText=null,S._fallbackText=null,fc=!1,a):null;switch(a){case "topPaste":return null;case "topKeyPress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "topCompositionEnd":return $b?null:b.data;default:return null}}
var ic={eventTypes:bc,extractEvents:function(a,b,c,d){var e;if(Vb)b:{switch(a){case "topCompositionStart":var f=bc.compositionStart;break b;case "topCompositionEnd":f=bc.compositionEnd;break b;case "topCompositionUpdate":f=bc.compositionUpdate;break b}f=void 0}else fc?dc(a,c)&&(f=bc.compositionEnd):"topKeyDown"===a&&229===c.keyCode&&(f=bc.compositionStart);f?($b&&(fc||f!==bc.compositionStart?f===bc.compositionEnd&&fc&&(e=Fb()):(S._root=d,S._startText=Gb(),fc=!0)),f=Mb.getPooled(f,b,c,d),e?f.data=
e:(e=ec(c),null!==e&&(f.data=e)),Ab(f),e=f):e=null;(a=Zb?gc(a,c):hc(a,c))?(b=Nb.getPooled(bc.beforeInput,b,c,d),b.data=a,Ab(b)):b=null;return[e,b]}},jc=null,kc=null,lc=null;function mc(a){if(a=Xa(a)){jc&&"function"===typeof jc.restoreControlledState?void 0:E("194");var b=Wa(a.stateNode);jc.restoreControlledState(a.stateNode,a.type,b)}}var nc={injectFiberControlledHostComponent:function(a){jc=a}};function oc(a){kc?lc?lc.push(a):lc=[a]:kc=a}
function pc(){if(kc){var a=kc,b=lc;lc=kc=null;mc(a);if(b)for(a=0;a<b.length;a++)mc(b[a])}}var qc=Object.freeze({injection:nc,enqueueStateRestore:oc,restoreStateIfNeeded:pc});function rc(a,b){return a(b)}var sc=!1;function tc(a,b){if(sc)return rc(a,b);sc=!0;try{return rc(a,b)}finally{sc=!1,pc()}}var uc={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};
function vc(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!uc[a.type]:"textarea"===b?!0:!1}function wc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var xc;l.canUseDOM&&(xc=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));
function yc(a,b){if(!l.canUseDOM||b&&!("addEventListener"in document))return!1;b="on"+a;var c=b in document;c||(c=document.createElement("div"),c.setAttribute(b,"return;"),c="function"===typeof c[b]);!c&&xc&&"wheel"===a&&(c=document.implementation.hasFeature("Events.wheel","3.0"));return c}function zc(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function Ac(a){var b=zc(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"function"===typeof c.get&&"function"===typeof c.set)return Object.defineProperty(a,b,{enumerable:c.enumerable,configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=""+a;c.set.call(this,a)}}),{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}
function Bc(a){a._valueTracker||(a._valueTracker=Ac(a))}function Cc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=zc(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}var Dc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};
function Ec(a,b,c){a=T.getPooled(Dc.change,a,b,c);a.type="change";oc(c);Ab(a);return a}var Fc=null,Gc=null;function Hc(a){kb(a);lb(!1)}function Ic(a){var b=qb(a);if(Cc(b))return a}function Jc(a,b){if("topChange"===a)return b}var Kc=!1;l.canUseDOM&&(Kc=yc("input")&&(!document.documentMode||9<document.documentMode));function Lc(){Fc&&(Fc.detachEvent("onpropertychange",Mc),Gc=Fc=null)}function Mc(a){"value"===a.propertyName&&Ic(Gc)&&(a=Ec(Gc,a,wc(a)),tc(Hc,a))}
function Nc(a,b,c){"topFocus"===a?(Lc(),Fc=b,Gc=c,Fc.attachEvent("onpropertychange",Mc)):"topBlur"===a&&Lc()}function Oc(a){if("topSelectionChange"===a||"topKeyUp"===a||"topKeyDown"===a)return Ic(Gc)}function Pc(a,b){if("topClick"===a)return Ic(b)}function $c(a,b){if("topInput"===a||"topChange"===a)return Ic(b)}
var ad={eventTypes:Dc,_isInputEventSupported:Kc,extractEvents:function(a,b,c,d){var e=b?qb(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Jc;else if(vc(e))if(Kc)g=$c;else{g=Oc;var h=Nc}else f=e.nodeName,!f||"input"!==f.toLowerCase()||"checkbox"!==e.type&&"radio"!==e.type||(g=Pc);if(g&&(g=g(a,b)))return Ec(g,c,d);h&&h(a,e,b);"topBlur"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&"number"===e.type&&(a=""+e.value,e.getAttribute("value")!==
a&&e.setAttribute("value",a))}};function bd(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(bd,{view:null,detail:null});var cd={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=cd[a])?!!b[a]:!1}function ed(){return dd}function fd(a,b,c,d){return T.call(this,a,b,c,d)}
bd.augmentClass(fd,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:ed,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}});
var gd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},hd={eventTypes:gd,extractEvents:function(a,b,c,d){if("topMouseOver"===a&&(c.relatedTarget||c.fromElement)||"topMouseOut"!==a&&"topMouseOver"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;"topMouseOut"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?pb(b):null):a=null;if(a===
b)return null;var f=null==a?e:qb(a);e=null==b?e:qb(b);var g=fd.getPooled(gd.mouseLeave,a,c,d);g.type="mouseleave";g.target=f;g.relatedTarget=e;c=fd.getPooled(gd.mouseEnter,b,c,d);c.type="mouseenter";c.target=e;c.relatedTarget=f;Bb(g,c,a,b);return[g,c]}},id=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function jd(a){a=a.type;return"string"===typeof a?a:"function"===typeof a?a.displayName||a.name:null}
function kd(a){var b=a;if(a.alternate)for(;b["return"];)b=b["return"];else{if(0!==(b.effectTag&2))return 1;for(;b["return"];)if(b=b["return"],0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){return(a=a._reactInternalFiber)?2===kd(a):!1}function md(a){2!==kd(a)?E("188"):void 0}
function nd(a){var b=a.alternate;if(!b)return b=kd(a),3===b?E("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c["return"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return md(e),a;if(g===d)return md(e),b;g=g.sibling}E("188")}if(c["return"]!==d["return"])c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
void 0:E("189")}}c.alternate!==d?E("190"):void 0}3!==c.tag?E("188"):void 0;return c.stateNode.current===c?a:b}function od(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}
function pd(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}var qd=[];
function rd(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c["return"];)c=c["return"];c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=pb(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],sd(a.topLevelType,b,a.nativeEvent,wc(a.nativeEvent))}var td=!0,sd=void 0;function ud(a){td=!!a}function U(a,b,c){return c?ba.listen(c,b,vd.bind(null,a)):null}function wd(a,b,c){return c?ba.capture(c,b,vd.bind(null,a)):null}
function vd(a,b){if(td){var c=wc(b);c=pb(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(qd.length){var d=qd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{tc(rd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>qd.length&&qd.push(a)}}}
var xd=Object.freeze({get _enabled(){return td},get _handleTopLevel(){return sd},setHandleTopLevel:function(a){sd=a},setEnabled:ud,isEnabled:function(){return td},trapBubbledEvent:U,trapCapturedEvent:wd,dispatchEvent:vd});function yd(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;c["ms"+a]="MS"+b;c["O"+a]="o"+b.toLowerCase();return c}
var zd={animationend:yd("Animation","AnimationEnd"),animationiteration:yd("Animation","AnimationIteration"),animationstart:yd("Animation","AnimationStart"),transitionend:yd("Transition","TransitionEnd")},Ad={},Bd={};l.canUseDOM&&(Bd=document.createElement("div").style,"AnimationEvent"in window||(delete zd.animationend.animation,delete zd.animationiteration.animation,delete zd.animationstart.animation),"TransitionEvent"in window||delete zd.transitionend.transition);
function Cd(a){if(Ad[a])return Ad[a];if(!zd[a])return a;var b=zd[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Bd)return Ad[a]=b[c];return""}
var Dd={topAbort:"abort",topAnimationEnd:Cd("animationend")||"animationend",topAnimationIteration:Cd("animationiteration")||"animationiteration",topAnimationStart:Cd("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",
topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",
topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",
topTouchStart:"touchstart",topTransitionEnd:Cd("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},Ed={},Fd=0,Gd="_reactListenersID"+(""+Math.random()).slice(2);function Hd(a){Object.prototype.hasOwnProperty.call(a,Gd)||(a[Gd]=Fd++,Ed[a[Gd]]={});return Ed[a[Gd]]}function Id(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Jd(a,b){var c=Id(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Id(c)}}function Kd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&"text"===a.type||"textarea"===b||"true"===a.contentEditable)}
var Ld=l.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Md={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Nd=null,Od=null,Pd=null,Qd=!1;
function Rd(a,b){if(Qd||null==Nd||Nd!==da())return null;var c=Nd;"selectionStart"in c&&Kd(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return Pd&&ea(Pd,c)?null:(Pd=c,a=T.getPooled(Md.select,Od,a,b),a.type="select",a.target=Nd,Ab(a),a)}
var Sd={eventTypes:Md,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Hd(e);f=Sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?qb(b):window;switch(a){case "topFocus":if(vc(e)||"true"===e.contentEditable)Nd=e,Od=b,Pd=null;break;case "topBlur":Pd=Od=Nd=null;break;case "topMouseDown":Qd=!0;break;case "topContextMenu":case "topMouseUp":return Qd=!1,Rd(c,d);case "topSelectionChange":if(Ld)break;
case "topKeyDown":case "topKeyUp":return Rd(c,d)}return null}};function Td(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Td,{animationName:null,elapsedTime:null,pseudoElement:null});function Ud(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Ud,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}});function Vd(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(Vd,{relatedTarget:null});
function Wd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;return 32<=a||13===a?a:0}
var Xd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Yd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function Zd(a,b,c,d){return T.call(this,a,b,c,d)}
bd.augmentClass(Zd,{key:function(a){if(a.key){var b=Xd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=Wd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Yd[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:ed,charCode:function(a){return"keypress"===a.type?Wd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===
a.type?Wd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}});function $d(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass($d,{dataTransfer:null});function ae(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(ae,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:ed});function be(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(be,{propertyName:null,elapsedTime:null,pseudoElement:null});
function ce(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass(ce,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null});var de={},ee={};
"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(a){var b=a[0].toUpperCase()+
a.slice(1),c="on"+b;b="top"+b;c={phasedRegistrationNames:{bubbled:c,captured:c+"Capture"},dependencies:[b]};de[a]=c;ee[b]=c});
var fe={eventTypes:de,extractEvents:function(a,b,c,d){var e=ee[a];if(!e)return null;switch(a){case "topKeyPress":if(0===Wd(c))return null;case "topKeyDown":case "topKeyUp":a=Zd;break;case "topBlur":case "topFocus":a=Vd;break;case "topClick":if(2===c.button)return null;case "topDoubleClick":case "topMouseDown":case "topMouseMove":case "topMouseUp":case "topMouseOut":case "topMouseOver":case "topContextMenu":a=fd;break;case "topDrag":case "topDragEnd":case "topDragEnter":case "topDragExit":case "topDragLeave":case "topDragOver":case "topDragStart":case "topDrop":a=
$d;break;case "topTouchCancel":case "topTouchEnd":case "topTouchMove":case "topTouchStart":a=ae;break;case "topAnimationEnd":case "topAnimationIteration":case "topAnimationStart":a=Td;break;case "topTransitionEnd":a=be;break;case "topScroll":a=bd;break;case "topWheel":a=ce;break;case "topCopy":case "topCut":case "topPaste":a=Ud;break;default:a=T}b=a.getPooled(e,b,c,d);Ab(b);return b}};sd=function(a,b,c,d){a=jb(a,b,c,d);kb(a);lb(!1)};hb.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
Wa=sb.getFiberCurrentPropsFromNode;Xa=sb.getInstanceFromNode;Ya=sb.getNodeFromInstance;hb.injectEventPluginsByName({SimpleEventPlugin:fe,EnterLeaveEventPlugin:hd,ChangeEventPlugin:ad,SelectEventPlugin:Sd,BeforeInputEventPlugin:ic});var ge=[],he=-1;function V(a){0>he||(a.current=ge[he],ge[he]=null,he--)}function W(a,b){he++;ge[he]=a.current;a.current=b}new Set;var ie={current:D},X={current:!1},je=D;function ke(a){return le(a)?je:ie.current}
function me(a,b){var c=a.type.contextTypes;if(!c)return D;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function le(a){return 2===a.tag&&null!=a.type.childContextTypes}function ne(a){le(a)&&(V(X,a),V(ie,a))}
function oe(a,b,c){null!=ie.cursor?E("168"):void 0;W(ie,b,a);W(X,c,a)}function pe(a,b){var c=a.stateNode,d=a.type.childContextTypes;if("function"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:E("108",jd(a)||"Unknown",e);return B({},b,c)}function qe(a){if(!le(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||D;je=ie.current;W(ie,b,a);W(X,X.current,a);return!0}
function re(a,b){var c=a.stateNode;c?void 0:E("169");if(b){var d=pe(a,je);c.__reactInternalMemoizedMergedChildContext=d;V(X,a);V(ie,a);W(ie,d,a)}else V(X,a);W(X,b,a)}
function Y(a,b,c){this.tag=a;this.key=b;this.stateNode=this.type=null;this.sibling=this.child=this["return"]=null;this.index=0;this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null;this.internalContextTag=c;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}
function se(a,b,c){var d=a.alternate;null===d?(d=new Y(a.tag,a.key,a.internalContextTag),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.pendingProps=b;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}
function te(a,b,c){var d=void 0,e=a.type,f=a.key;"function"===typeof e?(d=e.prototype&&e.prototype.isReactComponent?new Y(2,f,b):new Y(0,f,b),d.type=e,d.pendingProps=a.props):"string"===typeof e?(d=new Y(5,f,b),d.type=e,d.pendingProps=a.props):"object"===typeof e&&null!==e&&"number"===typeof e.tag?(d=e,d.pendingProps=a.props):E("130",null==e?e:typeof e,"");d.expirationTime=c;return d}function ue(a,b,c,d){b=new Y(10,d,b);b.pendingProps=a;b.expirationTime=c;return b}
function ve(a,b,c){b=new Y(6,null,b);b.pendingProps=a;b.expirationTime=c;return b}function we(a,b,c){b=new Y(7,a.key,b);b.type=a.handler;b.pendingProps=a;b.expirationTime=c;return b}function xe(a,b,c){a=new Y(9,null,b);a.expirationTime=c;return a}function ye(a,b,c){b=new Y(4,a.key,b);b.pendingProps=a.children||[];b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}var ze=null,Ae=null;
function Be(a){return function(b){try{return a(b)}catch(c){}}}function Ce(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);ze=Be(function(a){return b.onCommitFiberRoot(c,a)});Ae=Be(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function De(a){"function"===typeof ze&&ze(a)}function Ee(a){"function"===typeof Ae&&Ae(a)}
function Fe(a){return{baseState:a,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function Ge(a,b){null===a.last?a.first=a.last=b:(a.last.next=b,a.last=b);if(0===a.expirationTime||a.expirationTime>b.expirationTime)a.expirationTime=b.expirationTime}
function He(a,b){var c=a.alternate,d=a.updateQueue;null===d&&(d=a.updateQueue=Fe(null));null!==c?(a=c.updateQueue,null===a&&(a=c.updateQueue=Fe(null))):a=null;a=a!==d?a:null;null===a?Ge(d,b):null===d.last||null===a.last?(Ge(d,b),Ge(a,b)):(Ge(d,b),a.last=b)}function Ie(a,b,c,d){a=a.partialState;return"function"===typeof a?a.call(b,c,d):a}
function Je(a,b,c,d,e,f){null!==a&&a.updateQueue===c&&(c=b.updateQueue={baseState:c.baseState,expirationTime:c.expirationTime,first:c.first,last:c.last,isInitialized:c.isInitialized,callbackList:null,hasForceUpdate:!1});c.expirationTime=0;c.isInitialized?a=c.baseState:(a=c.baseState=b.memoizedState,c.isInitialized=!0);for(var g=!0,h=c.first,k=!1;null!==h;){var q=h.expirationTime;if(q>f){var v=c.expirationTime;if(0===v||v>q)c.expirationTime=q;k||(k=!0,c.baseState=a)}else{k||(c.first=h.next,null===
c.first&&(c.last=null));if(h.isReplace)a=Ie(h,d,a,e),g=!0;else if(q=Ie(h,d,a,e))a=g?B({},a,q):B(a,q),g=!1;h.isForced&&(c.hasForceUpdate=!0);null!==h.callback&&(q=c.callbackList,null===q&&(q=c.callbackList=[]),q.push(h))}h=h.next}null!==c.callbackList?b.effectTag|=32:null!==c.first||c.hasForceUpdate||(b.updateQueue=null);k||(c.baseState=a);return a}
function Ke(a,b){var c=a.callbackList;if(null!==c)for(a.callbackList=null,a=0;a<c.length;a++){var d=c[a],e=d.callback;d.callback=null;"function"!==typeof e?E("191",e):void 0;e.call(b)}}
function Le(a,b,c,d){function e(a,b){b.updater=f;a.stateNode=b;b._reactInternalFiber=a}var f={isMounted:ld,enqueueSetState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!1,isForced:!1,nextCallback:null,next:null});a(c,g)},enqueueReplaceState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!0,isForced:!1,nextCallback:null,next:null});
a(c,g)},enqueueForceUpdate:function(c,d){c=c._reactInternalFiber;d=void 0===d?null:d;var e=b(c);He(c,{expirationTime:e,partialState:null,callback:d,isReplace:!1,isForced:!0,nextCallback:null,next:null});a(c,e)}};return{adoptClassInstance:e,constructClassInstance:function(a,b){var c=a.type,d=ke(a),f=2===a.tag&&null!=a.type.contextTypes,g=f?me(a,d):D;b=new c(b,g);e(a,b);f&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=d,a.__reactInternalMemoizedMaskedChildContext=g);return b},mountClassInstance:function(a,
b){var c=a.alternate,d=a.stateNode,e=d.state||null,g=a.pendingProps;g?void 0:E("158");var h=ke(a);d.props=g;d.state=a.memoizedState=e;d.refs=D;d.context=me(a,h);null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent&&(a.internalContextTag|=1);"function"===typeof d.componentWillMount&&(e=d.state,d.componentWillMount(),e!==d.state&&f.enqueueReplaceState(d,d.state,null),e=a.updateQueue,null!==e&&(d.state=Je(c,a,e,d,g,b)));"function"===typeof d.componentDidMount&&(a.effectTag|=
4)},updateClassInstance:function(a,b,e){var g=b.stateNode;g.props=b.memoizedProps;g.state=b.memoizedState;var h=b.memoizedProps,k=b.pendingProps;k||(k=h,null==k?E("159"):void 0);var u=g.context,z=ke(b);z=me(b,z);"function"!==typeof g.componentWillReceiveProps||h===k&&u===z||(u=g.state,g.componentWillReceiveProps(k,z),g.state!==u&&f.enqueueReplaceState(g,g.state,null));u=b.memoizedState;e=null!==b.updateQueue?Je(a,b,b.updateQueue,g,k,e):u;if(!(h!==k||u!==e||X.current||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return"function"!==
typeof g.componentDidUpdate||h===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),!1;var G=k;if(null===h||null!==b.updateQueue&&b.updateQueue.hasForceUpdate)G=!0;else{var I=b.stateNode,L=b.type;G="function"===typeof I.shouldComponentUpdate?I.shouldComponentUpdate(G,e,z):L.prototype&&L.prototype.isPureReactComponent?!ea(h,G)||!ea(u,e):!0}G?("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(k,e,z),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4)):("function"!==typeof g.componentDidUpdate||
h===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),c(b,k),d(b,e));g.props=k;g.state=e;g.context=z;return G}}}var Qe="function"===typeof Symbol&&Symbol["for"],Re=Qe?Symbol["for"]("react.element"):60103,Se=Qe?Symbol["for"]("react.call"):60104,Te=Qe?Symbol["for"]("react.return"):60105,Ue=Qe?Symbol["for"]("react.portal"):60106,Ve=Qe?Symbol["for"]("react.fragment"):60107,We="function"===typeof Symbol&&Symbol.iterator;
function Xe(a){if(null===a||"undefined"===typeof a)return null;a=We&&a[We]||a["@@iterator"];return"function"===typeof a?a:null}var Ye=Array.isArray;
function Ze(a,b){var c=b.ref;if(null!==c&&"function"!==typeof c){if(b._owner){b=b._owner;var d=void 0;b&&(2!==b.tag?E("110"):void 0,d=b.stateNode);d?void 0:E("147",c);var e=""+c;if(null!==a&&null!==a.ref&&a.ref._stringRef===e)return a.ref;a=function(a){var b=d.refs===D?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};a._stringRef=e;return a}"string"!==typeof c?E("148"):void 0;b._owner?void 0:E("149",c)}return c}
function $e(a,b){"textarea"!==a.type&&E("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
function af(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=se(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=ve(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=Ze(b,c),d["return"]=a,d;d=te(c,a.internalContextTag,d);d.ref=Ze(b,c);d["return"]=a;return d}function q(a,b,c,d){if(null===b||7!==b.tag)return b=we(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c,d);
b["return"]=a;return b}function v(a,b,c,d){if(null===b||9!==b.tag)return b=xe(c,a.internalContextTag,d),b.type=c.value,b["return"]=a,b;b=e(b,null,d);b.type=c.value;b["return"]=a;return b}function y(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=ye(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c.children||[],d);b["return"]=a;return b}function u(a,b,c,d,f){if(null===b||10!==b.tag)return b=ue(c,a.internalContextTag,
d,f),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function z(a,b,c){if("string"===typeof b||"number"===typeof b)return b=ve(""+b,a.internalContextTag,c),b["return"]=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Re:if(b.type===Ve)return b=ue(b.props.children,a.internalContextTag,c,b.key),b["return"]=a,b;c=te(b,a.internalContextTag,c);c.ref=Ze(null,b);c["return"]=a;return c;case Se:return b=we(b,a.internalContextTag,c),b["return"]=a,b;case Te:return c=xe(b,a.internalContextTag,
c),c.type=b.value,c["return"]=a,c;case Ue:return b=ye(b,a.internalContextTag,c),b["return"]=a,b}if(Ye(b)||Xe(b))return b=ue(b,a.internalContextTag,c,null),b["return"]=a,b;$e(a,b)}return null}function G(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Re:return c.key===e?c.type===Ve?u(a,b,c.props.children,d,e):k(a,b,c,d):null;case Se:return c.key===e?q(a,b,c,d):null;case Te:return null===
e?v(a,b,c,d):null;case Ue:return c.key===e?y(a,b,c,d):null}if(Ye(c)||Xe(c))return null!==e?null:u(a,b,c,d,null);$e(a,c)}return null}function I(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Re:return a=a.get(null===d.key?c:d.key)||null,d.type===Ve?u(b,a,d.props.children,e,d.key):k(b,a,d,e);case Se:return a=a.get(null===d.key?c:d.key)||null,q(b,a,d,e);case Te:return a=a.get(c)||null,v(b,a,d,e);case Ue:return a=
a.get(null===d.key?c:d.key)||null,y(b,a,d,e)}if(Ye(d)||Xe(d))return a=a.get(c)||null,u(b,a,d,e,null);$e(b,d)}return null}function L(e,g,m,A){for(var h=null,r=null,n=g,w=g=0,k=null;null!==n&&w<m.length;w++){n.index>w?(k=n,n=null):k=n.sibling;var x=G(e,n,m[w],A);if(null===x){null===n&&(n=k);break}a&&n&&null===x.alternate&&b(e,n);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x;n=k}if(w===m.length)return c(e,n),h;if(null===n){for(;w<m.length;w++)if(n=z(e,m[w],A))g=f(n,g,w),null===r?h=n:r.sibling=n,r=n;return h}for(n=
d(e,n);w<m.length;w++)if(k=I(n,e,w,m[w],A)){if(a&&null!==k.alternate)n["delete"](null===k.key?w:k.key);g=f(k,g,w);null===r?h=k:r.sibling=k;r=k}a&&n.forEach(function(a){return b(e,a)});return h}function N(e,g,m,A){var h=Xe(m);"function"!==typeof h?E("150"):void 0;m=h.call(m);null==m?E("151"):void 0;for(var r=h=null,n=g,w=g=0,k=null,x=m.next();null!==n&&!x.done;w++,x=m.next()){n.index>w?(k=n,n=null):k=n.sibling;var J=G(e,n,x.value,A);if(null===J){n||(n=k);break}a&&n&&null===J.alternate&&b(e,n);g=f(J,
g,w);null===r?h=J:r.sibling=J;r=J;n=k}if(x.done)return c(e,n),h;if(null===n){for(;!x.done;w++,x=m.next())x=z(e,x.value,A),null!==x&&(g=f(x,g,w),null===r?h=x:r.sibling=x,r=x);return h}for(n=d(e,n);!x.done;w++,x=m.next())if(x=I(n,e,w,x.value,A),null!==x){if(a&&null!==x.alternate)n["delete"](null===x.key?w:x.key);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x}a&&n.forEach(function(a){return b(e,a)});return h}return function(a,d,f,h){"object"===typeof f&&null!==f&&f.type===Ve&&null===f.key&&(f=f.props.children);
var m="object"===typeof f&&null!==f;if(m)switch(f.$$typeof){case Re:a:{var r=f.key;for(m=d;null!==m;){if(m.key===r)if(10===m.tag?f.type===Ve:m.type===f.type){c(a,m.sibling);d=e(m,f.type===Ve?f.props.children:f.props,h);d.ref=Ze(m,f);d["return"]=a;a=d;break a}else{c(a,m);break}else b(a,m);m=m.sibling}f.type===Ve?(d=ue(f.props.children,a.internalContextTag,h,f.key),d["return"]=a,a=d):(h=te(f,a.internalContextTag,h),h.ref=Ze(d,f),h["return"]=a,a=h)}return g(a);case Se:a:{for(m=f.key;null!==d;){if(d.key===
m)if(7===d.tag){c(a,d.sibling);d=e(d,f,h);d["return"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=we(f,a.internalContextTag,h);d["return"]=a;a=d}return g(a);case Te:a:{if(null!==d)if(9===d.tag){c(a,d.sibling);d=e(d,null,h);d.type=f.value;d["return"]=a;a=d;break a}else c(a,d);d=xe(f,a.internalContextTag,h);d.type=f.value;d["return"]=a;a=d}return g(a);case Ue:a:{for(m=f.key;null!==d;){if(d.key===m)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===
f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d["return"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=ye(f,a.internalContextTag,h);d["return"]=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h)):(c(a,d),d=ve(f,a.internalContextTag,h)),d["return"]=a,a=d,g(a);if(Ye(f))return L(a,d,f,h);if(Xe(f))return N(a,d,f,h);m&&$e(a,f);if("undefined"===typeof f)switch(a.tag){case 2:case 1:h=a.type,E("152",h.displayName||
h.name||"Component")}return c(a,d)}}var bf=af(!0),cf=af(!1);
function df(a,b,c,d,e){function f(a,b,c){var d=b.expirationTime;b.child=null===a?cf(b,null,c,d):bf(b,a.child,c,d)}function g(a,b){var c=b.ref;null===c||a&&a.ref===c||(b.effectTag|=128)}function h(a,b,c,d){g(a,b);if(!c)return d&&re(b,!1),q(a,b);c=b.stateNode;id.current=b;var e=c.render();b.effectTag|=1;f(a,b,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&re(b,!0);return b.child}function k(a){var b=a.stateNode;b.pendingContext?oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&oe(a,
b.context,!1);I(a,b.containerInfo)}function q(a,b){null!==a&&b.child!==a.child?E("153"):void 0;if(null!==b.child){a=b.child;var c=se(a,a.pendingProps,a.expirationTime);b.child=c;for(c["return"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=se(a,a.pendingProps,a.expirationTime),c["return"]=b;c.sibling=null}return b.child}function v(a,b){switch(b.tag){case 3:k(b);break;case 2:qe(b);break;case 4:I(b,b.stateNode.containerInfo)}return null}var y=a.shouldSetTextContent,u=a.useSyncScheduling,z=a.shouldDeprioritizeSubtree,
G=b.pushHostContext,I=b.pushHostContainer,L=c.enterHydrationState,N=c.resetHydrationState,J=c.tryToClaimNextHydratableInstance;a=Le(d,e,function(a,b){a.memoizedProps=b},function(a,b){a.memoizedState=b});var w=a.adoptClassInstance,m=a.constructClassInstance,A=a.mountClassInstance,Ob=a.updateClassInstance;return{beginWork:function(a,b,c){if(0===b.expirationTime||b.expirationTime>c)return v(a,b);switch(b.tag){case 0:null!==a?E("155"):void 0;var d=b.type,e=b.pendingProps,r=ke(b);r=me(b,r);d=d(e,r);b.effectTag|=
1;"object"===typeof d&&null!==d&&"function"===typeof d.render?(b.tag=2,e=qe(b),w(b,d),A(b,c),b=h(a,b,!0,e)):(b.tag=1,f(a,b,d),b.memoizedProps=e,b=b.child);return b;case 1:a:{e=b.type;c=b.pendingProps;d=b.memoizedProps;if(X.current)null===c&&(c=d);else if(null===c||d===c){b=q(a,b);break a}d=ke(b);d=me(b,d);e=e(c,d);b.effectTag|=1;f(a,b,e);b.memoizedProps=c;b=b.child}return b;case 2:return e=qe(b),d=void 0,null===a?b.stateNode?E("153"):(m(b,b.pendingProps),A(b,c),d=!0):d=Ob(a,b,c),h(a,b,d,e);case 3:return k(b),
e=b.updateQueue,null!==e?(d=b.memoizedState,e=Je(a,b,e,null,null,c),d===e?(N(),b=q(a,b)):(d=e.element,r=b.stateNode,(null===a||null===a.child)&&r.hydrate&&L(b)?(b.effectTag|=2,b.child=cf(b,null,d,c)):(N(),f(a,b,d)),b.memoizedState=e,b=b.child)):(N(),b=q(a,b)),b;case 5:G(b);null===a&&J(b);e=b.type;var n=b.memoizedProps;d=b.pendingProps;null===d&&(d=n,null===d?E("154"):void 0);r=null!==a?a.memoizedProps:null;X.current||null!==d&&n!==d?(n=d.children,y(e,d)?n=null:r&&y(e,r)&&(b.effectTag|=16),g(a,b),
2147483647!==c&&!u&&z(e,d)?(b.expirationTime=2147483647,b=null):(f(a,b,n),b.memoizedProps=d,b=b.child)):b=q(a,b);return b;case 6:return null===a&&J(b),a=b.pendingProps,null===a&&(a=b.memoizedProps),b.memoizedProps=a,null;case 8:b.tag=7;case 7:e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null===e?E("154"):void 0);else if(null===e||b.memoizedProps===e)e=b.memoizedProps;d=e.children;b.stateNode=null===a?cf(b,b.stateNode,d,c):bf(b,b.stateNode,d,c);b.memoizedProps=e;return b.stateNode;
case 9:return null;case 4:a:{I(b,b.stateNode.containerInfo);e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null==e?E("154"):void 0);else if(null===e||b.memoizedProps===e){b=q(a,b);break a}null===a?b.child=bf(b,null,e,c):f(a,b,e);b.memoizedProps=e;b=b.child}return b;case 10:a:{c=b.pendingProps;if(X.current)null===c&&(c=b.memoizedProps);else if(null===c||b.memoizedProps===c){b=q(a,b);break a}f(a,b,c);b.memoizedProps=c;b=b.child}return b;default:E("156")}},beginFailedWork:function(a,b,
c){switch(b.tag){case 2:qe(b);break;case 3:k(b);break;default:E("157")}b.effectTag|=64;null===a?b.child=null:b.child!==a.child&&(b.child=a.child);if(0===b.expirationTime||b.expirationTime>c)return v(a,b);b.firstEffect=null;b.lastEffect=null;b.child=null===a?cf(b,null,null,c):bf(b,a.child,null,c);2===b.tag&&(a=b.stateNode,b.memoizedProps=a.props,b.memoizedState=a.state);return b.child}}}
function ef(a,b,c){function d(a){a.effectTag|=4}var e=a.createInstance,f=a.createTextInstance,g=a.appendInitialChild,h=a.finalizeInitialChildren,k=a.prepareUpdate,q=a.persistence,v=b.getRootHostContainer,y=b.popHostContext,u=b.getHostContext,z=b.popHostContainer,G=c.prepareToHydrateHostInstance,I=c.prepareToHydrateHostTextInstance,L=c.popHydrationState,N=void 0,J=void 0,w=void 0;a.mutation?(N=function(){},J=function(a,b,c){(b.updateQueue=c)&&d(b)},w=function(a,b,c,e){c!==e&&d(b)}):q?E("235"):E("236");
return{completeWork:function(a,b,c){var m=b.pendingProps;if(null===m)m=b.memoizedProps;else if(2147483647!==b.expirationTime||2147483647===c)b.pendingProps=null;switch(b.tag){case 1:return null;case 2:return ne(b),null;case 3:z(b);V(X,b);V(ie,b);m=b.stateNode;m.pendingContext&&(m.context=m.pendingContext,m.pendingContext=null);if(null===a||null===a.child)L(b),b.effectTag&=-3;N(b);return null;case 5:y(b);c=v();var A=b.type;if(null!==a&&null!=b.stateNode){var p=a.memoizedProps,q=b.stateNode,x=u();q=
k(q,A,p,m,c,x);J(a,b,q,A,p,m,c);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!m)return null===b.stateNode?E("166"):void 0,null;a=u();if(L(b))G(b,c,a)&&d(b);else{a=e(A,m,c,a,b);a:for(p=b.child;null!==p;){if(5===p.tag||6===p.tag)g(a,p.stateNode);else if(4!==p.tag&&null!==p.child){p.child["return"]=p;p=p.child;continue}if(p===b)break;for(;null===p.sibling;){if(null===p["return"]||p["return"]===b)break a;p=p["return"]}p.sibling["return"]=p["return"];p=p.sibling}h(a,A,m,c)&&d(b);b.stateNode=a}null!==b.ref&&
(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)w(a,b,a.memoizedProps,m);else{if("string"!==typeof m)return null===b.stateNode?E("166"):void 0,null;a=v();c=u();L(b)?I(b)&&d(b):b.stateNode=f(m,a,c,b)}return null;case 7:(m=b.memoizedProps)?void 0:E("165");b.tag=8;A=[];a:for((p=b.stateNode)&&(p["return"]=b);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)E("247");else if(9===p.tag)A.push(p.type);else if(null!==p.child){p.child["return"]=p;p=p.child;continue}for(;null===p.sibling;){if(null===
p["return"]||p["return"]===b)break a;p=p["return"]}p.sibling["return"]=p["return"];p=p.sibling}p=m.handler;m=p(m.props,A);b.child=bf(b,null!==a?a.child:null,m,c);return b.child;case 8:return b.tag=7,null;case 9:return null;case 10:return null;case 4:return z(b),N(b),null;case 0:E("167");default:E("156")}}}}
function ff(a,b){function c(a){var c=a.ref;if(null!==c)try{c(null)}catch(A){b(a,A)}}function d(a){"function"===typeof Ee&&Ee(a);switch(a.tag){case 2:c(a);var d=a.stateNode;if("function"===typeof d.componentWillUnmount)try{d.props=a.memoizedProps,d.state=a.memoizedState,d.componentWillUnmount()}catch(A){b(a,A)}break;case 5:c(a);break;case 7:e(a.stateNode);break;case 4:k&&g(a)}}function e(a){for(var b=a;;)if(d(b),null===b.child||k&&4===b.tag){if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||
b["return"]===a)return;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}else b.child["return"]=b,b=b.child}function f(a){return 5===a.tag||3===a.tag||4===a.tag}function g(a){for(var b=a,c=!1,f=void 0,g=void 0;;){if(!c){c=b["return"];a:for(;;){null===c?E("160"):void 0;switch(c.tag){case 5:f=c.stateNode;g=!1;break a;case 3:f=c.stateNode.containerInfo;g=!0;break a;case 4:f=c.stateNode.containerInfo;g=!0;break a}c=c["return"]}c=!0}if(5===b.tag||6===b.tag)e(b),g?J(f,b.stateNode):N(f,b.stateNode);
else if(4===b.tag?f=b.stateNode.containerInfo:d(b),null!==b.child){b.child["return"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||b["return"]===a)return;b=b["return"];4===b.tag&&(c=!1)}b.sibling["return"]=b["return"];b=b.sibling}}var h=a.getPublicInstance,k=a.mutation;a=a.persistence;k||(a?E("235"):E("236"));var q=k.commitMount,v=k.commitUpdate,y=k.resetTextContent,u=k.commitTextUpdate,z=k.appendChild,G=k.appendChildToContainer,I=k.insertBefore,L=k.insertInContainerBefore,
N=k.removeChild,J=k.removeChildFromContainer;return{commitResetTextContent:function(a){y(a.stateNode)},commitPlacement:function(a){a:{for(var b=a["return"];null!==b;){if(f(b)){var c=b;break a}b=b["return"]}E("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:E("161")}c.effectTag&16&&(y(b),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c["return"]||f(c["return"])){c=
null;break a}c=c["return"]}c.sibling["return"]=c["return"];for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;if(null===c.child||4===c.tag)continue b;else c.child["return"]=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)c?d?L(b,e.stateNode,c):I(b,e.stateNode,c):d?G(b,e.stateNode):z(b,e.stateNode);else if(4!==e.tag&&null!==e.child){e.child["return"]=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e["return"]||e["return"]===
a)return;e=e["return"]}e.sibling["return"]=e["return"];e=e.sibling}},commitDeletion:function(a){g(a);a["return"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate["return"]=null)},commitWork:function(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&v(c,f,e,a,d,b)}break;case 6:null===b.stateNode?E("162"):void 0;c=b.memoizedProps;u(b.stateNode,null!==a?a.memoizedProps:
c,c);break;case 3:break;default:E("163")}},commitLifeCycles:function(a,b){switch(b.tag){case 2:var c=b.stateNode;if(b.effectTag&4)if(null===a)c.props=b.memoizedProps,c.state=b.memoizedState,c.componentDidMount();else{var d=a.memoizedProps;a=a.memoizedState;c.props=b.memoizedProps;c.state=b.memoizedState;c.componentDidUpdate(d,a)}b=b.updateQueue;null!==b&&Ke(b,c);break;case 3:c=b.updateQueue;null!==c&&Ke(c,null!==b.child?b.child.stateNode:null);break;case 5:c=b.stateNode;null===a&&b.effectTag&4&&q(c,
b.type,b.memoizedProps,b);break;case 6:break;case 4:break;default:E("163")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:b(h(c));break;default:b(c)}}},commitDetachRef:function(a){a=a.ref;null!==a&&a(null)}}}var gf={};
function hf(a){function b(a){a===gf?E("174"):void 0;return a}var c=a.getChildHostContext,d=a.getRootHostContext,e={current:gf},f={current:gf},g={current:gf};return{getHostContext:function(){return b(e.current)},getRootHostContainer:function(){return b(g.current)},popHostContainer:function(a){V(e,a);V(f,a);V(g,a)},popHostContext:function(a){f.current===a&&(V(e,a),V(f,a))},pushHostContainer:function(a,b){W(g,b,a);b=d(b);W(f,a,a);W(e,b,a)},pushHostContext:function(a){var d=b(g.current),h=b(e.current);
d=c(h,a.type,d);h!==d&&(W(f,a,a),W(e,d,a))},resetHostContainer:function(){e.current=gf;g.current=gf}}}
function jf(a){function b(a,b){var c=new Y(5,null,0);c.type="DELETED";c.stateNode=b;c["return"]=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case 5:return b=f(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 6:return b=g(b,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;default:return!1}}function d(a){for(a=a["return"];null!==a&&5!==a.tag&&3!==a.tag;)a=a["return"];y=a}var e=a.shouldSetTextContent;
a=a.hydration;if(!a)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){E("175")},prepareToHydrateHostTextInstance:function(){E("176")},popHydrationState:function(){return!1}};var f=a.canHydrateInstance,g=a.canHydrateTextInstance,h=a.getNextHydratableSibling,k=a.getFirstHydratableChild,q=a.hydrateInstance,v=a.hydrateTextInstance,y=null,u=null,z=!1;return{enterHydrationState:function(a){u=
k(a.stateNode.containerInfo);y=a;return z=!0},resetHydrationState:function(){u=y=null;z=!1},tryToClaimNextHydratableInstance:function(a){if(z){var d=u;if(d){if(!c(a,d)){d=h(d);if(!d||!c(a,d)){a.effectTag|=2;z=!1;y=a;return}b(y,u)}y=a;u=k(d)}else a.effectTag|=2,z=!1,y=a}},prepareToHydrateHostInstance:function(a,b,c){b=q(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return v(a.stateNode,a.memoizedProps,a)},popHydrationState:function(a){if(a!==
y)return!1;if(!z)return d(a),z=!0,!1;var c=a.type;if(5!==a.tag||"head"!==c&&"body"!==c&&!e(c,a.memoizedProps))for(c=u;c;)b(a,c),c=h(c);d(a);u=y?h(a.stateNode):null;return!0}}}
function kf(a){function b(a){Qb=ja=!0;var b=a.stateNode;b.current===a?E("177"):void 0;b.isReadyForCommit=!1;id.current=null;if(1<a.effectTag)if(null!==a.lastEffect){a.lastEffect.nextEffect=a;var c=a.firstEffect}else c=a;else c=a.firstEffect;yg();for(t=c;null!==t;){var d=!1,e=void 0;try{for(;null!==t;){var f=t.effectTag;f&16&&zg(t);if(f&128){var g=t.alternate;null!==g&&Ag(g)}switch(f&-242){case 2:Ne(t);t.effectTag&=-3;break;case 6:Ne(t);t.effectTag&=-3;Oe(t.alternate,t);break;case 4:Oe(t.alternate,
t);break;case 8:Sc=!0,Bg(t),Sc=!1}t=t.nextEffect}}catch(Tc){d=!0,e=Tc}d&&(null===t?E("178"):void 0,h(t,e),null!==t&&(t=t.nextEffect))}Cg();b.current=a;for(t=c;null!==t;){c=!1;d=void 0;try{for(;null!==t;){var k=t.effectTag;k&36&&Dg(t.alternate,t);k&128&&Eg(t);if(k&64)switch(e=t,f=void 0,null!==R&&(f=R.get(e),R["delete"](e),null==f&&null!==e.alternate&&(e=e.alternate,f=R.get(e),R["delete"](e))),null==f?E("184"):void 0,e.tag){case 2:e.stateNode.componentDidCatch(f.error,{componentStack:f.componentStack});
break;case 3:null===ca&&(ca=f.error);break;default:E("157")}var Qc=t.nextEffect;t.nextEffect=null;t=Qc}}catch(Tc){c=!0,d=Tc}c&&(null===t?E("178"):void 0,h(t,d),null!==t&&(t=t.nextEffect))}ja=Qb=!1;"function"===typeof De&&De(a.stateNode);ha&&(ha.forEach(G),ha=null);null!==ca&&(a=ca,ca=null,Ob(a));b=b.current.expirationTime;0===b&&(qa=R=null);return b}function c(a){for(;;){var b=Fg(a.alternate,a,H),c=a["return"],d=a.sibling;var e=a;if(2147483647===H||2147483647!==e.expirationTime){if(2!==e.tag&&3!==
e.tag)var f=0;else f=e.updateQueue,f=null===f?0:f.expirationTime;for(var g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;
if(null!==c)a=c;else{a.stateNode.isReadyForCommit=!0;break}}return null}function d(a){var b=rg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function e(a){var b=Gg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function f(a){if(null!==R){if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=k(F)?e(F):d(F);else for(;null!==F&&!A();)F=k(F)?e(F):d(F)}else if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=d(F);else for(;null!==F&&!A();)F=d(F)}function g(a,b){ja?E("243"):void 0;ja=!0;a.isReadyForCommit=
!1;if(a!==ra||b!==H||null===F){for(;-1<he;)ge[he]=null,he--;je=D;ie.current=D;X.current=!1;x();ra=a;H=b;F=se(ra.current,null,b)}var c=!1,d=null;try{f(b)}catch(Rc){c=!0,d=Rc}for(;c;){if(eb){ca=d;break}var g=F;if(null===g)eb=!0;else{var k=h(g,d);null===k?E("183"):void 0;if(!eb){try{c=k;d=b;for(k=c;null!==g;){switch(g.tag){case 2:ne(g);break;case 5:qg(g);break;case 3:p(g);break;case 4:p(g)}if(g===k||g.alternate===k)break;g=g["return"]}F=e(c);f(d)}catch(Rc){c=!0;d=Rc;continue}break}}}b=ca;eb=ja=!1;ca=
null;null!==b&&Ob(b);return a.isReadyForCommit?a.current.alternate:null}function h(a,b){var c=id.current=null,d=!1,e=!1,f=null;if(3===a.tag)c=a,q(a)&&(eb=!0);else for(var g=a["return"];null!==g&&null===c;){2===g.tag?"function"===typeof g.stateNode.componentDidCatch&&(d=!0,f=jd(g),c=g,e=!0):3===g.tag&&(c=g);if(q(g)){if(Sc||null!==ha&&(ha.has(g)||null!==g.alternate&&ha.has(g.alternate)))return null;c=null;e=!1}g=g["return"]}if(null!==c){null===qa&&(qa=new Set);qa.add(c);var h="";g=a;do{a:switch(g.tag){case 0:case 1:case 2:case 5:var k=
g._debugOwner,Qc=g._debugSource;var m=jd(g);var n=null;k&&(n=jd(k));k=Qc;m="\n    in "+(m||"Unknown")+(k?" (at "+k.fileName.replace(/^.*[\\\/]/,"")+":"+k.lineNumber+")":n?" (created by "+n+")":"");break a;default:m=""}h+=m;g=g["return"]}while(g);g=h;a=jd(a);null===R&&(R=new Map);b={componentName:a,componentStack:g,error:b,errorBoundary:d?c.stateNode:null,errorBoundaryFound:d,errorBoundaryName:f,willRetry:e};R.set(c,b);try{var p=b.error;p&&p.suppressReactErrorLogging||console.error(p)}catch(Vc){Vc&&
Vc.suppressReactErrorLogging||console.error(Vc)}Qb?(null===ha&&(ha=new Set),ha.add(c)):G(c);return c}null===ca&&(ca=b);return null}function k(a){return null!==R&&(R.has(a)||null!==a.alternate&&R.has(a.alternate))}function q(a){return null!==qa&&(qa.has(a)||null!==a.alternate&&qa.has(a.alternate))}function v(){return 20*(((I()+100)/20|0)+1)}function y(a){return 0!==ka?ka:ja?Qb?1:H:!Hg||a.internalContextTag&1?v():1}function u(a,b){return z(a,b,!1)}function z(a,b){for(;null!==a;){if(0===a.expirationTime||
a.expirationTime>b)a.expirationTime=b;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>b)&&(a.alternate.expirationTime=b);if(null===a["return"])if(3===a.tag){var c=a.stateNode;!ja&&c===ra&&b<H&&(F=ra=null,H=0);var d=c,e=b;Rb>Ig&&E("185");if(null===d.nextScheduledRoot)d.remainingExpirationTime=e,null===O?(sa=O=d,d.nextScheduledRoot=d):(O=O.nextScheduledRoot=d,O.nextScheduledRoot=sa);else{var f=d.remainingExpirationTime;if(0===f||e<f)d.remainingExpirationTime=e}Fa||(la?
Sb&&(ma=d,na=1,m(ma,na)):1===e?w(1,null):L(e));!ja&&c===ra&&b<H&&(F=ra=null,H=0)}else break;a=a["return"]}}function G(a){z(a,1,!0)}function I(){return Uc=((Wc()-Pe)/10|0)+2}function L(a){if(0!==Tb){if(a>Tb)return;Jg(Xc)}var b=Wc()-Pe;Tb=a;Xc=Kg(J,{timeout:10*(a-2)-b})}function N(){var a=0,b=null;if(null!==O)for(var c=O,d=sa;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===O?E("244"):void 0;if(d===d.nextScheduledRoot){sa=O=d.nextScheduledRoot=null;break}else if(d===sa)sa=e=d.nextScheduledRoot,
O.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===O){O=c;O.nextScheduledRoot=sa;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===O)break;c=d;d=d.nextScheduledRoot}}c=ma;null!==c&&c===b?Rb++:Rb=0;ma=b;na=a}function J(a){w(0,a)}function w(a,b){fb=b;for(N();null!==ma&&0!==na&&(0===a||na<=a)&&!Yc;)m(ma,na),N();null!==fb&&(Tb=0,Xc=-1);0!==na&&L(na);fb=null;Yc=!1;Rb=0;if(Ub)throw a=Zc,Zc=
null,Ub=!1,a;}function m(a,c){Fa?E("245"):void 0;Fa=!0;if(c<=I()){var d=a.finishedWork;null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(a.remainingExpirationTime=b(d)))}else d=a.finishedWork,null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(A()?a.finishedWork=d:a.remainingExpirationTime=b(d)));Fa=!1}function A(){return null===fb||fb.timeRemaining()>Lg?!1:Yc=!0}function Ob(a){null===ma?E("246"):
void 0;ma.remainingExpirationTime=0;Ub||(Ub=!0,Zc=a)}var r=hf(a),n=jf(a),p=r.popHostContainer,qg=r.popHostContext,x=r.resetHostContainer,Me=df(a,r,n,u,y),rg=Me.beginWork,Gg=Me.beginFailedWork,Fg=ef(a,r,n).completeWork;r=ff(a,h);var zg=r.commitResetTextContent,Ne=r.commitPlacement,Bg=r.commitDeletion,Oe=r.commitWork,Dg=r.commitLifeCycles,Eg=r.commitAttachRef,Ag=r.commitDetachRef,Wc=a.now,Kg=a.scheduleDeferredCallback,Jg=a.cancelDeferredCallback,Hg=a.useSyncScheduling,yg=a.prepareForCommit,Cg=a.resetAfterCommit,
Pe=Wc(),Uc=2,ka=0,ja=!1,F=null,ra=null,H=0,t=null,R=null,qa=null,ha=null,ca=null,eb=!1,Qb=!1,Sc=!1,sa=null,O=null,Tb=0,Xc=-1,Fa=!1,ma=null,na=0,Yc=!1,Ub=!1,Zc=null,fb=null,la=!1,Sb=!1,Ig=1E3,Rb=0,Lg=1;return{computeAsyncExpiration:v,computeExpirationForFiber:y,scheduleWork:u,batchedUpdates:function(a,b){var c=la;la=!0;try{return a(b)}finally{(la=c)||Fa||w(1,null)}},unbatchedUpdates:function(a){if(la&&!Sb){Sb=!0;try{return a()}finally{Sb=!1}}return a()},flushSync:function(a){var b=la;la=!0;try{a:{var c=
ka;ka=1;try{var d=a();break a}finally{ka=c}d=void 0}return d}finally{la=b,Fa?E("187"):void 0,w(1,null)}},deferredUpdates:function(a){var b=ka;ka=v();try{return a()}finally{ka=b}}}}
function lf(a){function b(a){a=od(a);return null===a?null:a.stateNode}var c=a.getPublicInstance;a=kf(a);var d=a.computeAsyncExpiration,e=a.computeExpirationForFiber,f=a.scheduleWork;return{createContainer:function(a,b){var c=new Y(3,null,0);a={current:c,containerInfo:a,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:b,nextScheduledRoot:null};return c.stateNode=a},updateContainer:function(a,b,c,q){var g=b.current;if(c){c=
c._reactInternalFiber;var h;b:{2===kd(c)&&2===c.tag?void 0:E("170");for(h=c;3!==h.tag;){if(le(h)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}(h=h["return"])?void 0:E("171")}h=h.stateNode.context}c=le(c)?pe(c,h):h}else c=D;null===b.context?b.context=c:b.pendingContext=c;b=q;b=void 0===b?null:b;q=null!=a&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent?d():e(g);He(g,{expirationTime:q,partialState:{element:a},callback:b,isReplace:!1,isForced:!1,
nextCallback:null,next:null});f(g,q)},batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return c(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:b,findHostInstanceWithNoPortals:function(a){a=pd(a);return null===a?null:a.stateNode},injectIntoDevTools:function(a){var c=a.findFiberByHostInstance;return Ce(B({},
a,{findHostInstanceByFiber:function(a){return b(a)},findFiberByHostInstance:function(a){return c?c(a):null}}))}}}var mf=Object.freeze({default:lf}),nf=mf&&lf||mf,of=nf["default"]?nf["default"]:nf;function pf(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ue,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}var qf="object"===typeof performance&&"function"===typeof performance.now,rf=void 0;rf=qf?function(){return performance.now()}:function(){return Date.now()};
var sf=void 0,tf=void 0;
if(l.canUseDOM)if("function"!==typeof requestIdleCallback||"function"!==typeof cancelIdleCallback){var uf=null,vf=!1,wf=-1,xf=!1,yf=0,zf=33,Af=33,Bf;Bf=qf?{didTimeout:!1,timeRemaining:function(){var a=yf-performance.now();return 0<a?a:0}}:{didTimeout:!1,timeRemaining:function(){var a=yf-Date.now();return 0<a?a:0}};var Cf="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===Cf){vf=!1;a=rf();if(0>=yf-a)if(-1!==wf&&wf<=
a)Bf.didTimeout=!0;else{xf||(xf=!0,requestAnimationFrame(Df));return}else Bf.didTimeout=!1;wf=-1;a=uf;uf=null;null!==a&&a(Bf)}},!1);var Df=function(a){xf=!1;var b=a-yf+Af;b<Af&&zf<Af?(8>b&&(b=8),Af=b<zf?zf:b):zf=b;yf=a+Af;vf||(vf=!0,window.postMessage(Cf,"*"))};sf=function(a,b){uf=a;null!=b&&"number"===typeof b.timeout&&(wf=rf()+b.timeout);xf||(xf=!0,requestAnimationFrame(Df));return 0};tf=function(){uf=null;vf=!1;wf=-1}}else sf=window.requestIdleCallback,tf=window.cancelIdleCallback;else sf=function(a){return setTimeout(function(){a({timeRemaining:function(){return Infinity}})})},
tf=function(a){clearTimeout(a)};var Ef=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Ff={},Gf={};
function Hf(a){if(Gf.hasOwnProperty(a))return!0;if(Ff.hasOwnProperty(a))return!1;if(Ef.test(a))return Gf[a]=!0;Ff[a]=!0;return!1}
function If(a,b,c){var d=wa(b);if(d&&va(b,c)){var e=d.mutationMethod;e?e(a,c):null==c||d.hasBooleanValue&&!c||d.hasNumericValue&&isNaN(c)||d.hasPositiveNumericValue&&1>c||d.hasOverloadedBooleanValue&&!1===c?Jf(a,b):d.mustUseProperty?a[d.propertyName]=c:(b=d.attributeName,(e=d.attributeNamespace)?a.setAttributeNS(e,b,""+c):d.hasBooleanValue||d.hasOverloadedBooleanValue&&!0===c?a.setAttribute(b,""):a.setAttribute(b,""+c))}else Kf(a,b,va(b,c)?c:null)}
function Kf(a,b,c){Hf(b)&&(null==c?a.removeAttribute(b):a.setAttribute(b,""+c))}function Jf(a,b){var c=wa(b);c?(b=c.mutationMethod)?b(a,void 0):c.mustUseProperty?a[c.propertyName]=c.hasBooleanValue?!1:"":a.removeAttribute(c.attributeName):a.removeAttribute(b)}
function Lf(a,b){var c=b.value,d=b.checked;return B({type:void 0,step:void 0,min:void 0,max:void 0},b,{defaultChecked:void 0,defaultValue:void 0,value:null!=c?c:a._wrapperState.initialValue,checked:null!=d?d:a._wrapperState.initialChecked})}function Mf(a,b){var c=b.defaultValue;a._wrapperState={initialChecked:null!=b.checked?b.checked:b.defaultChecked,initialValue:null!=b.value?b.value:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}
function Nf(a,b){b=b.checked;null!=b&&If(a,"checked",b)}function Of(a,b){Nf(a,b);var c=b.value;if(null!=c)if(0===c&&""===a.value)a.value="0";else if("number"===b.type){if(b=parseFloat(a.value)||0,c!=b||c==b&&a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else null==b.value&&null!=b.defaultValue&&a.defaultValue!==""+b.defaultValue&&(a.defaultValue=""+b.defaultValue),null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Pf(a,b){switch(b.type){case "submit":case "reset":break;case "color":case "date":case "datetime":case "datetime-local":case "month":case "time":case "week":a.value="";a.value=a.defaultValue;break;default:a.value=a.value}b=a.name;""!==b&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;""!==b&&(a.name=b)}function Qf(a){var b="";aa.Children.forEach(a,function(a){null==a||"string"!==typeof a&&"number"!==typeof a||(b+=a)});return b}
function Rf(a,b){a=B({children:void 0},b);if(b=Qf(b.children))a.children=b;return a}function Sf(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Tf(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Uf(a,b){null!=b.dangerouslySetInnerHTML?E("91"):void 0;return B({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Vf(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?E("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:E("93"),b=b[0]),c=""+b),null==c&&(c=""));a._wrapperState={initialValue:""+c}}
function Wf(a,b){var c=b.value;null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Xf(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Yf={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Zf(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function $f(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Zf(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var ag=void 0,bg=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Yf.svg||"innerHTML"in a)a.innerHTML=b;else{ag=ag||document.createElement("div");ag.innerHTML="\x3csvg\x3e"+b+"\x3c/svg\x3e";for(b=ag.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function cg(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
var dg={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,
stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eg=["Webkit","ms","Moz","O"];Object.keys(dg).forEach(function(a){eg.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);dg[b]=dg[a]})});
function fg(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||dg.hasOwnProperty(e)&&dg[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var gg=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function hg(a,b,c){b&&(gg[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?E("137",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?E("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:E("61")),null!=b.style&&"object"!==typeof b.style?E("62",c()):void 0)}
function ig(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var jg=Yf.html,kg=C.thatReturns("");
function lg(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Hd(a);b=Sa[b];for(var d=0;d<b.length;d++){var e=b[d];c.hasOwnProperty(e)&&c[e]||("topScroll"===e?wd("topScroll","scroll",a):"topFocus"===e||"topBlur"===e?(wd("topFocus","focus",a),wd("topBlur","blur",a),c.topBlur=!0,c.topFocus=!0):"topCancel"===e?(yc("cancel",!0)&&wd("topCancel","cancel",a),c.topCancel=!0):"topClose"===e?(yc("close",!0)&&wd("topClose","close",a),c.topClose=!0):Dd.hasOwnProperty(e)&&U(e,Dd[e],a),c[e]=!0)}}
var mg={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",
topWaiting:"waiting"};function ng(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===jg&&(d=Zf(a));d===jg?"script"===a?(a=c.createElement("div"),a.innerHTML="\x3cscript\x3e\x3c/script\x3e",a=a.removeChild(a.firstChild)):a="string"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function og(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}
function pg(a,b,c,d){var e=ig(b,c);switch(b){case "iframe":case "object":U("topLoad","load",a);var f=c;break;case "video":case "audio":for(f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);f=c;break;case "source":U("topError","error",a);f=c;break;case "img":case "image":U("topError","error",a);U("topLoad","load",a);f=c;break;case "form":U("topReset","reset",a);U("topSubmit","submit",a);f=c;break;case "details":U("topToggle","toggle",a);f=c;break;case "input":Mf(a,c);f=Lf(a,c);U("topInvalid","invalid",a);
lg(d,"onChange");break;case "option":f=Rf(a,c);break;case "select":Tf(a,c);f=B({},c,{value:void 0});U("topInvalid","invalid",a);lg(d,"onChange");break;case "textarea":Vf(a,c);f=Uf(a,c);U("topInvalid","invalid",a);lg(d,"onChange");break;default:f=c}hg(b,f,kg);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];"style"===h?fg(a,k,kg):"dangerouslySetInnerHTML"===h?(k=k?k.__html:void 0,null!=k&&bg(a,k)):"children"===h?"string"===typeof k?("textarea"!==b||""!==k)&&cg(a,k):"number"===typeof k&&cg(a,
""+k):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(Ra.hasOwnProperty(h)?null!=k&&lg(d,h):e?Kf(a,h,k):null!=k&&If(a,h,k))}switch(b){case "input":Bc(a);Pf(a,c);break;case "textarea":Bc(a);Xf(a,c);break;case "option":null!=c.value&&a.setAttribute("value",c.value);break;case "select":a.multiple=!!c.multiple;b=c.value;null!=b?Sf(a,!!c.multiple,b,!1):null!=c.defaultValue&&Sf(a,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof f.onClick&&(a.onclick=
C)}}
function sg(a,b,c,d,e){var f=null;switch(b){case "input":c=Lf(a,c);d=Lf(a,d);f=[];break;case "option":c=Rf(a,c);d=Rf(a,d);f=[];break;case "select":c=B({},c,{value:void 0});d=B({},d,{value:void 0});f=[];break;case "textarea":c=Uf(a,c);d=Uf(a,d);f=[];break;default:"function"!==typeof c.onClick&&"function"===typeof d.onClick&&(a.onclick=C)}hg(b,d,kg);var g,h;a=null;for(g in c)if(!d.hasOwnProperty(g)&&c.hasOwnProperty(g)&&null!=c[g])if("style"===g)for(h in b=c[g],b)b.hasOwnProperty(h)&&(a||(a={}),a[h]=
"");else"dangerouslySetInnerHTML"!==g&&"children"!==g&&"suppressContentEditableWarning"!==g&&"suppressHydrationWarning"!==g&&"autoFocus"!==g&&(Ra.hasOwnProperty(g)?f||(f=[]):(f=f||[]).push(g,null));for(g in d){var k=d[g];b=null!=c?c[g]:void 0;if(d.hasOwnProperty(g)&&k!==b&&(null!=k||null!=b))if("style"===g)if(b){for(h in b)!b.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(a||(a={}),a[h]="");for(h in k)k.hasOwnProperty(h)&&b[h]!==k[h]&&(a||(a={}),a[h]=k[h])}else a||(f||(f=[]),f.push(g,a)),a=k;else"dangerouslySetInnerHTML"===
g?(k=k?k.__html:void 0,b=b?b.__html:void 0,null!=k&&b!==k&&(f=f||[]).push(g,""+k)):"children"===g?b===k||"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(g,""+k):"suppressContentEditableWarning"!==g&&"suppressHydrationWarning"!==g&&(Ra.hasOwnProperty(g)?(null!=k&&lg(e,g),f||b===k||(f=[])):(f=f||[]).push(g,k))}a&&(f=f||[]).push("style",a);return f}
function tg(a,b,c,d,e){"input"===c&&"radio"===e.type&&null!=e.name&&Nf(a,e);ig(c,d);d=ig(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];"style"===g?fg(a,h,kg):"dangerouslySetInnerHTML"===g?bg(a,h):"children"===g?cg(a,h):d?null!=h?Kf(a,g,h):a.removeAttribute(g):null!=h?If(a,g,h):Jf(a,g)}switch(c){case "input":Of(a,e);break;case "textarea":Wf(a,e);break;case "select":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Sf(a,
!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?Sf(a,!!e.multiple,e.defaultValue,!0):Sf(a,!!e.multiple,e.multiple?[]:"",!1))}}
function ug(a,b,c,d,e){switch(b){case "iframe":case "object":U("topLoad","load",a);break;case "video":case "audio":for(var f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);break;case "source":U("topError","error",a);break;case "img":case "image":U("topError","error",a);U("topLoad","load",a);break;case "form":U("topReset","reset",a);U("topSubmit","submit",a);break;case "details":U("topToggle","toggle",a);break;case "input":Mf(a,c);U("topInvalid","invalid",a);lg(e,"onChange");break;case "select":Tf(a,c);
U("topInvalid","invalid",a);lg(e,"onChange");break;case "textarea":Vf(a,c),U("topInvalid","invalid",a),lg(e,"onChange")}hg(b,c,kg);d=null;for(var g in c)c.hasOwnProperty(g)&&(f=c[g],"children"===g?"string"===typeof f?a.textContent!==f&&(d=["children",f]):"number"===typeof f&&a.textContent!==""+f&&(d=["children",""+f]):Ra.hasOwnProperty(g)&&null!=f&&lg(e,g));switch(b){case "input":Bc(a);Pf(a,c);break;case "textarea":Bc(a);Xf(a,c);break;case "select":case "option":break;default:"function"===typeof c.onClick&&
(a.onclick=C)}return d}function vg(a,b){return a.nodeValue!==b}
var wg=Object.freeze({createElement:ng,createTextNode:og,setInitialProperties:pg,diffProperties:sg,updateProperties:tg,diffHydratedProperties:ug,diffHydratedText:vg,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case "input":Of(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=
c.parentNode;c=c.querySelectorAll("input[name\x3d"+JSON.stringify(""+b)+'][type\x3d"radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=rb(d);e?void 0:E("90");Cc(d);Of(d,e)}}}break;case "textarea":Wf(a,c);break;case "select":b=c.value,null!=b&&Sf(a,!!c.multiple,b,!1)}}});nc.injectFiberControlledHostComponent(wg);var xg=null,Mg=null;function Ng(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}
function Og(a){a=a?9===a.nodeType?a.documentElement:a.firstChild:null;return!(!a||1!==a.nodeType||!a.hasAttribute("data-reactroot"))}
var Z=of({getRootHostContext:function(a){var b=a.nodeType;switch(b){case 9:case 11:a=(a=a.documentElement)?a.namespaceURI:$f(null,"");break;default:b=8===b?a.parentNode:a,a=b.namespaceURI||null,b=b.tagName,a=$f(a,b)}return a},getChildHostContext:function(a,b){return $f(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){xg=td;var a=da();if(Kd(a)){if("selectionStart"in a)var b={start:a.selectionStart,end:a.selectionEnd};else a:{var c=window.getSelection&&window.getSelection();
if(c&&0!==c.rangeCount){b=c.anchorNode;var d=c.anchorOffset,e=c.focusNode;c=c.focusOffset;try{b.nodeType,e.nodeType}catch(z){b=null;break a}var f=0,g=-1,h=-1,k=0,q=0,v=a,y=null;b:for(;;){for(var u;;){v!==b||0!==d&&3!==v.nodeType||(g=f+d);v!==e||0!==c&&3!==v.nodeType||(h=f+c);3===v.nodeType&&(f+=v.nodeValue.length);if(null===(u=v.firstChild))break;y=v;v=u}for(;;){if(v===a)break b;y===b&&++k===d&&(g=f);y===e&&++q===c&&(h=f);if(null!==(u=v.nextSibling))break;v=y;y=v.parentNode}v=u}b=-1===g||-1===h?null:
{start:g,end:h}}else b=null}b=b||{start:0,end:0}}else b=null;Mg={focusedElem:a,selectionRange:b};ud(!1)},resetAfterCommit:function(){var a=Mg,b=da(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&fa(document.documentElement,c)){if(Kd(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(window.getSelection){b=window.getSelection();var e=c[Eb()].length;a=Math.min(d.start,e);d=void 0===d.end?a:Math.min(d.end,e);!b.extend&&a>
d&&(e=d,d=a,a=e);e=Jd(c,a);var f=Jd(c,d);if(e&&f&&(1!==b.rangeCount||b.anchorNode!==e.node||b.anchorOffset!==e.offset||b.focusNode!==f.node||b.focusOffset!==f.offset)){var g=document.createRange();g.setStart(e.node,e.offset);b.removeAllRanges();a>d?(b.addRange(g),b.extend(f.node,f.offset)):(g.setEnd(f.node,f.offset),b.addRange(g))}}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});ia(c);for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=
a.top}Mg=null;ud(xg);xg=null},createInstance:function(a,b,c,d,e){a=ng(a,b,c,d);a[Q]=e;a[ob]=b;return a},appendInitialChild:function(a,b){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){pg(a,b,c,d);a:{switch(b){case "button":case "input":case "select":case "textarea":a=!!c.autoFocus;break a}a=!1}return a},prepareUpdate:function(a,b,c,d,e){return sg(a,b,c,d,e)},shouldSetTextContent:function(a,b){return"textarea"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===
typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&"string"===typeof b.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=og(a,b);a[Q]=d;return a},now:rf,mutation:{commitMount:function(a){a.focus()},commitUpdate:function(a,b,c,d,e){a[ob]=e;tg(a,b,c,d,e)},resetTextContent:function(a){a.textContent=""},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,
b){8===a.nodeType?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,b,c){8===a.nodeType?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){8===a.nodeType?a.parentNode.removeChild(b):a.removeChild(b)}},hydration:{canHydrateInstance:function(a,b){return 1!==a.nodeType||b.toLowerCase()!==a.nodeName.toLowerCase()?null:a},canHydrateTextInstance:function(a,
b){return""===b||3!==a.nodeType?null:a},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){a[Q]=f;a[ob]=c;return ug(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){a[Q]=c;return vg(a,b)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},
didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:sf,cancelDeferredCallback:tf,useSyncScheduling:!0});rc=Z.batchedUpdates;
function Pg(a,b,c,d,e){Ng(c)?void 0:E("200");var f=c._reactRootContainer;if(f)Z.updateContainer(b,f,a,e);else{d=d||Og(c);if(!d)for(f=void 0;f=c.lastChild;)c.removeChild(f);var g=Z.createContainer(c,d);f=c._reactRootContainer=g;Z.unbatchedUpdates(function(){Z.updateContainer(b,g,a,e)})}return Z.getPublicRootInstance(f)}function Qg(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Ng(b)?void 0:E("200");return pf(a,b,null,c)}
function Rg(a,b){this._reactRootContainer=Z.createContainer(a,b)}Rg.prototype.render=function(a,b){Z.updateContainer(a,this._reactRootContainer,null,b)};Rg.prototype.unmount=function(a){Z.updateContainer(null,this._reactRootContainer,null,a)};
var Sg={createPortal:Qg,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(b)return Z.findHostInstance(b);"function"===typeof a.render?E("188"):E("213",Object.keys(a))},hydrate:function(a,b,c){return Pg(null,a,b,!0,c)},render:function(a,b,c){return Pg(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?E("38"):void 0;return Pg(a,b,c,!1,d)},unmountComponentAtNode:function(a){Ng(a)?void 0:
E("40");return a._reactRootContainer?(Z.unbatchedUpdates(function(){Pg(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:Qg,unstable_batchedUpdates:tc,unstable_deferredUpdates:Z.deferredUpdates,flushSync:Z.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:mb,EventPluginRegistry:Va,EventPropagators:Cb,ReactControlledComponent:qc,ReactDOMComponentTree:sb,ReactDOMEventListener:xd}};
Z.injectIntoDevTools({findFiberByHostInstance:pb,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var Tg=Object.freeze({default:Sg}),Ug=Tg&&Sg||Tg;module.exports=Ug["default"]?Ug["default"]:Ug;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = __webpack_require__(54);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.2.0
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = __webpack_require__(10);
var invariant = __webpack_require__(11);
var warning = __webpack_require__(12);
var ExecutionEnvironment = __webpack_require__(20);
var _assign = __webpack_require__(5);
var emptyFunction = __webpack_require__(3);
var EventListener = __webpack_require__(21);
var getActiveElement = __webpack_require__(22);
var shallowEqual = __webpack_require__(23);
var containsNode = __webpack_require__(24);
var focusNode = __webpack_require__(25);
var emptyObject = __webpack_require__(6);
var checkPropTypes = __webpack_require__(19);
var hyphenateStyleName = __webpack_require__(56);
var camelizeStyleName = __webpack_require__(58);

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

// These attributes should be all lowercase to allow for
// case insensitive checks
var RESERVED_PROPS = {
  children: true,
  dangerouslySetInnerHTML: true,
  defaultValue: true,
  defaultChecked: true,
  innerHTML: true,
  suppressContentEditableWarning: true,
  suppressHydrationWarning: true,
  style: true
};

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
  HAS_STRING_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    for (var propName in Properties) {
      !!properties.hasOwnProperty(propName) ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];

        propertyInfo.attributeName = attributeName;
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      // Downcase references to whitelist properties to check for membership
      // without case-sensitivity. This allows the whitelist to pick up
      // `allowfullscreen`, which should be written using the property configuration
      // for `allowFullscreen`
      properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';

/**
 * Map from property "standard name" to an object with info about how to set
 * the property in the DOM. Each object contains:
 *
 * attributeName:
 *   Used when rendering markup or with `*Attribute()`.
 * attributeNamespace
 * propertyName:
 *   Used on DOM node instances. (This includes properties that mutate due to
 *   external factors.)
 * mutationMethod:
 *   If non-null, used instead of the property or `setAttribute()` after
 *   initial render.
 * mustUseProperty:
 *   Whether the property must be accessed and mutated as an object property.
 * hasBooleanValue:
 *   Whether the property should be removed when set to a falsey value.
 * hasNumericValue:
 *   Whether the property must be numeric or parse as a numeric and should be
 *   removed when set to a falsey value.
 * hasPositiveNumericValue:
 *   Whether the property must be positive numeric or parse as a positive
 *   numeric and should be removed when set to a falsey value.
 * hasOverloadedBooleanValue:
 *   Whether the property can be used as a flag as well as with a value.
 *   Removed when strictly equal to false; present without a value when
 *   strictly equal to true; present with a value otherwise.
 */
var properties = {};

/**
 * Checks whether a property name is a writeable attribute.
 * @method
 */
function shouldSetAttribute(name, value) {
  if (isReservedProp(name)) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return false;
  }
  if (value === null) {
    return true;
  }
  switch (typeof value) {
    case 'boolean':
      return shouldAttributeAcceptBooleanValue(name);
    case 'undefined':
    case 'number':
    case 'string':
    case 'object':
      return true;
    default:
      // function, symbol
      return false;
  }
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function shouldAttributeAcceptBooleanValue(name) {
  if (isReservedProp(name)) {
    return true;
  }
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
  }
  var prefix = name.toLowerCase().slice(0, 5);
  return prefix === 'data-' || prefix === 'aria-';
}

/**
 * Checks to see if a property name is within the list of properties
 * reserved for internal React operations. These properties should
 * not be set on an HTML element.
 *
 * @private
 * @param {string} name
 * @return {boolean} If the name is within reserved props
 */
function isReservedProp(name) {
  return RESERVED_PROPS.hasOwnProperty(name);
}

var injection = DOMPropertyInjection;

var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;
var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  // When adding attributes to this list, be sure to also add them to
  // the `possibleStandardNames` module to ensure casing and incorrect
  // name warnings.
  Properties: {
    allowFullScreen: HAS_BOOLEAN_VALUE,
    // specifies target context for links with `preload` type
    async: HAS_BOOLEAN_VALUE,
    // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_OVERLOADED_BOOLEAN_VALUE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    contentEditable: HAS_STRING_BOOLEAN_VALUE,
    controls: HAS_BOOLEAN_VALUE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: HAS_STRING_BOOLEAN_VALUE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    hidden: HAS_BOOLEAN_VALUE,
    loop: HAS_BOOLEAN_VALUE,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    playsInline: HAS_BOOLEAN_VALUE,
    readOnly: HAS_BOOLEAN_VALUE,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    scoped: HAS_BOOLEAN_VALUE,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    start: HAS_NUMERIC_VALUE,
    // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: HAS_STRING_BOOLEAN_VALUE,
    // Style must be explicitly set in the attribute list. React components
    // expect a style object
    style: 0,
    // Keep it in the whitelist because it is case-sensitive for SVG.
    tabIndex: 0,
    // itemScope is for for Microdata support.
    // See http://schema.org/docs/gs.html
    itemScope: HAS_BOOLEAN_VALUE,
    // These attributes must stay in the white-list because they have
    // different attribute names (see DOMAttributeNames below)
    acceptCharset: 0,
    className: 0,
    htmlFor: 0,
    httpEquiv: 0,
    // Attributes with mutation methods must be specified in the whitelist
    // Set the string boolean flag to allow the behavior
    value: HAS_STRING_BOOLEAN_VALUE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;


var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

/**
 * This is a list of all SVG attributes that need special casing,
 * namespacing, or boolean value assignment.
 *
 * When adding attributes to this list, be sure to also add them to
 * the `possibleStandardNames` module to ensure casing and incorrect
 * name warnings.
 *
 * SVG Attributes List:
 * https://www.w3.org/TR/SVG/attindex.html
 * SMIL Spec:
 * https://www.w3.org/TR/smil
 */
var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];

var SVGDOMPropertyConfig = {
  Properties: {
    autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
    externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
    preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
  },
  DOMAttributeNames: {
    autoReverse: 'autoReverse',
    externalResourcesRequired: 'externalResourcesRequired',
    preserveAlpha: 'preserveAlpha'
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  }
};

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

ATTRS.forEach(function (original) {
  var reactName = original.replace(CAMELIZE, capitalize);

  SVGDOMPropertyConfig.Properties[reactName] = 0;
  SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
});

injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
injection.injectDOMPropertyConfig(SVGDOMPropertyConfig);

var ReactErrorUtils = {
  // Used by Fiber to simulate a try-catch.
  _caughtError: null,
  _hasCaughtError: false,

  // Used by event system to capture/rethrow the first error.
  _rethrowError: null,
  _hasRethrowError: false,

  injection: {
    injectErrorUtils: function (injectedErrorUtils) {
      !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
      invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
    }
  },

  /**
   * Call a function while guarding against errors that happens within it.
   * Returns an error if it throws, otherwise null.
   *
   * In production, this is implemented using a try-catch. The reason we don't
   * use a try-catch directly is so that we can swap out a different
   * implementation in DEV mode.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(ReactErrorUtils, arguments);
  },

  /**
   * Same as invokeGuardedCallback, but instead of returning an error, it stores
   * it in a global so it can be rethrown by `rethrowCaughtError` later.
   * TODO: See if _caughtError and _rethrowError can be unified.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
    if (ReactErrorUtils.hasCaughtError()) {
      var error = ReactErrorUtils.clearCaughtError();
      if (!ReactErrorUtils._hasRethrowError) {
        ReactErrorUtils._hasRethrowError = true;
        ReactErrorUtils._rethrowError = error;
      }
    }
  },

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    return rethrowCaughtError.apply(ReactErrorUtils, arguments);
  },

  hasCaughtError: function () {
    return ReactErrorUtils._hasCaughtError;
  },

  clearCaughtError: function () {
    if (ReactErrorUtils._hasCaughtError) {
      var error = ReactErrorUtils._caughtError;
      ReactErrorUtils._caughtError = null;
      ReactErrorUtils._hasCaughtError = false;
      return error;
    } else {
      invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
};

var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
  ReactErrorUtils._hasCaughtError = false;
  ReactErrorUtils._caughtError = null;
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    ReactErrorUtils._caughtError = error;
    ReactErrorUtils._hasCaughtError = true;
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);
        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function onError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', onError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        ReactErrorUtils._hasCaughtError = true;
        ReactErrorUtils._caughtError = error;
      } else {
        ReactErrorUtils._hasCaughtError = false;
        ReactErrorUtils._caughtError = null;
      }

      // Remove our event listeners
      window.removeEventListener('error', onError);
    };

    invokeGuardedCallback = invokeGuardedCallbackDev;
  }
}

var rethrowCaughtError = function () {
  if (ReactErrorUtils._hasRethrowError) {
    var error = ReactErrorUtils._rethrowError;
    ReactErrorUtils._rethrowError = null;
    ReactErrorUtils._hasRethrowError = false;
    throw error;
  }
};

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var EventPluginRegistry = Object.freeze({
	plugins: plugins,
	eventNameDispatchConfigs: eventNameDispatchConfigs,
	registrationNameModules: registrationNameModules,
	registrationNameDependencies: registrationNameDependencies,
	possibleRegistrationNames: possibleRegistrationNames,
	injectEventPluginOrder: injectEventPluginOrder,
	injectEventPluginsByName: injectEventPluginsByName
});

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

var injection$2 = {
  injectComponentTree: function (Injected) {
    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
    getInstanceFromNode = Injected.getInstanceFromNode;
    getNodeFromInstance = Injected.getNodeFromInstance;

    {
      warning(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
};






var validateEventDispatches;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection$1 = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

/**
 * Enqueues a synthetic event that should be dispatched when
 * `processEventQueue` is invoked.
 *
 * @param {*} events An accumulation of synthetic events.
 * @internal
 */
function enqueueEvents(events) {
  if (events) {
    eventQueue = accumulateInto(eventQueue, events);
  }
}

/**
 * Dispatches all synthetic events on the event queue.
 *
 * @internal
 */
function processEventQueue(simulated) {
  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  ReactErrorUtils.rethrowCaughtError();
}

var EventPluginHub = Object.freeze({
	injection: injection$1,
	getListener: getListener,
	extractEvents: extractEvents,
	enqueueEvents: enqueueEvents,
	processEventQueue: processEventQueue
});

var IndeterminateComponent = 0; // Before we know whether it is functional or class
var FunctionalComponent = 1;
var ClassComponent = 2;
var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 5;
var HostText = 6;
var CallComponent = 7;
var CallHandlerPhase = 8;
var ReturnComponent = 9;
var Fragment = 10;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode$1(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest = void 0;
  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps$1(node, props) {
  node[internalEventHandlersKey] = props;
}

var ReactDOMComponentTree = Object.freeze({
	precacheFiberNode: precacheFiberNode$1,
	getClosestInstanceFromNode: getClosestInstanceFromNode,
	getInstanceFromNode: getInstanceFromNode$1,
	getNodeFromInstance: getNodeFromInstance$1,
	getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
	updateFiberProps: updateFiberProps$1
});

function getParent(inst) {
  do {
    inst = inst['return'];
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  return getParent(inst);
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    warning(inst, 'Dispatching inst must not be null');
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? getParentInstance(targetInst) : null;
    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = Object.freeze({
	accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
	accumulateDirectDispatches: accumulateDirectDispatches
});

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

/**
 * This helper object stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var compositionState = {
  _root: null,
  _startText: null,
  _fallbackText: null
};

function initialize(nativeEventTarget) {
  compositionState._root = nativeEventTarget;
  compositionState._startText = getText();
  return true;
}

function reset() {
  compositionState._root = null;
  compositionState._startText = null;
  compositionState._fallbackText = null;
}

function getData() {
  if (compositionState._fallbackText) {
    return compositionState._fallbackText;
  }

  var start;
  var startValue = compositionState._startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  compositionState._fallbackText = endValue.slice(start, sliceTail);
  return compositionState._fallbackText;
}

function getText() {
  if ('value' in compositionState._root) {
    return compositionState._root.value;
  }
  return compositionState._root[getTextContentAccessor()];
}

/* eslint valid-typeof: 0 */

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';
var EVENT_POOL_SIZE = 10;

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;
  addEventPoolingTo(Class);
};

/** Proxying after everything set on SyntheticEvent
 * to resolve Proxy issue on some WebKit browsers
 * in which some Event properties are set to undefined (GH#10010)
 */
{
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

var SyntheticEvent$1 = SyntheticEvent;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

// Use to restore controlled state after a change event has fired.

var fiberHostComponent = null;

var ReactControlledComponentInjection = {
  injectFiberControlledHostComponent: function (hostComponentImpl) {
    // The fiber implementation doesn't use dynamic dispatch so we need to
    // inject the implementation.
    fiberHostComponent = hostComponentImpl;
  }
};

var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
}

var injection$3 = ReactControlledComponentInjection;

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var ReactControlledComponent = Object.freeze({
	injection: injection$3,
	enqueueStateRestore: enqueueStateRestore,
	restoreStateIfNeeded: restoreStateIfNeeded
});

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var fiberBatchedUpdates = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var isNestingBatched = false;
function batchedUpdates(fn, bookkeeping) {
  if (isNestingBatched) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state. Therefore, we add the target to
    // a queue of work.
    return fiberBatchedUpdates(fn, bookkeeping);
  }
  isNestingBatched = true;
  try {
    return fiberBatchedUpdates(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isNestingBatched = false;
    restoreStateIfNeeded();
  }
}

var ReactGenericBatchingInjection = {
  injectFiberBatchedUpdates: function (_batchedUpdates) {
    fiberBatchedUpdates = _batchedUpdates;
  }
};

var injection$4 = ReactGenericBatchingInjection;

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable,
    configurable: true,
    get: function () {
      return descriptor.get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      descriptor.set.call(this, value);
    }
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  enqueueEvents(event);
  processEventQueue(false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: null,
  detail: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'string') {
    return type;
  }
  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  return null;
}

// Don't change these two values:
var NoEffect = 0; //           0b00000000
var PerformedWork = 1; //      0b00000001

// You can change the rest (and add more).
var Placement = 2; //          0b00000010
var Update = 4; //             0b00000100
var PlacementAndUpdate = 6; // 0b00000110
var Deletion = 8; //           0b00001000
var ContentReset = 16; //      0b00010000
var Callback = 32; //          0b00100000
var Err = 64; //               0b01000000
var Ref = 128; //              0b10000000

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node['return']) {
      node = node['return'];
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node['return']) {
      node = node['return'];
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;
    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a['return'];
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a['return'] !== b['return']) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst['return']) {
    inst = inst['return'];
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevelImpl(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;
var _handleTopLevel = void 0;

function setHandleTopLevel(handleTopLevel) {
  _handleTopLevel = handleTopLevel;
}

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevelImpl, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

var ReactDOMEventListener = Object.freeze({
	get _enabled () { return _enabled; },
	get _handleTopLevel () { return _handleTopLevel; },
	setHandleTopLevel: setHandleTopLevel,
	setEnabled: setEnabled,
	isEnabled: isEnabled,
	trapBubbledEvent: trapBubbledEvent,
	trapCapturedEvent: trapCapturedEvent,
	dispatchEvent: dispatchEvent
});

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

/**
 * Types of raw signals from the browser caught at the top level.
 *
 * For events like 'submit' which don't consistently bubble (which we
 * trap at a lower node than `document`), binding at `document` would
 * cause duplicate events so we don't include them here.
 */
var topLevelTypes$1 = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCancel: 'cancel',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topClose: 'close',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoad: 'load',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topToggle: 'toggle',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

var BrowserEventConstants = {
  topLevelTypes: topLevelTypes$1
};

function runEventQueueInBatch(events) {
  enqueueEvents(events);
  processEventQueue(false);
}

/**
 * Streams a fired top-level event to `EventPluginHub` where plugins have the
 * opportunity to create `ReactEvent`s to be dispatched.
 */
function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventQueueInBatch(events);
}

var topLevelTypes = BrowserEventConstants.topLevelTypes;

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} contentDocumentHandle Document which owns the container
 */
function listenTo(registrationName, contentDocumentHandle) {
  var mountAt = contentDocumentHandle;
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      if (dependency === 'topScroll') {
        trapCapturedEvent('topScroll', 'scroll', mountAt);
      } else if (dependency === 'topFocus' || dependency === 'topBlur') {
        trapCapturedEvent('topFocus', 'focus', mountAt);
        trapCapturedEvent('topBlur', 'blur', mountAt);

        // to make sure blur and focus event listeners are only attached once
        isListening.topBlur = true;
        isListening.topFocus = true;
      } else if (dependency === 'topCancel') {
        if (isEventSupported('cancel', true)) {
          trapCapturedEvent('topCancel', 'cancel', mountAt);
        }
        isListening.topCancel = true;
      } else if (dependency === 'topClose') {
        if (isEventSupported('close', true)) {
          trapCapturedEvent('topClose', 'close', mountAt);
        }
        isListening.topClose = true;
      } else if (topLevelTypes.hasOwnProperty(dependency)) {
        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
      }

      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode$$1 = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode$$1.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode$$1 && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode$$1 && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElement();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElement();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    focusNode(priorFocusedElem);

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent$1;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

setHandleTopLevel(handleTopLevel);

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection$1.injectEventPluginOrder(DOMEventPluginOrder);
injection$2.injectComponentTree(ReactDOMComponentTree);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection$1.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var enableAsyncSubtreeAPI = true;
var enableAsyncSchedulingByDefaultInReactDOM = false;
// Exports ReactDOM.createRoot
var enableCreateRoot = false;
var enableUserTimingAPI = true;

// Mutating mode (React DOM, React ART, React Native):
var enableMutatingReconciler = true;
// Experimental noop mode (currently unused):
var enableNoopReconciler = false;
// Experimental persistent mode (CS):
var enablePersistentReconciler = false;

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// Only used in www builds.

var valueStack = [];

{
  var fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}



function pop(cursor, fiber) {
  if (index < 0) {
    {
      warning(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warning(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function reset$1() {
  while (index > -1) {
    valueStack[index] = null;

    {
      fiberStack[index] = null;
    }

    index--;
  }
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

// This function can only be called with a work-in-progress fiber and
// only during begin or complete phase. Do not call it under any other
// circumstances.
function getStackAddendumByWorkInProgressFiber(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    // Otherwise this return pointer might point to the wrong tree:
    node = node['return'];
  } while (node);
  return info;
}

function getCurrentFiberOwnerName() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    var owner = fiber._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner);
    }
  }
  return null;
}

function getCurrentFiberStackAddendum() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackAddendumByWorkInProgressFiber(fiber);
  }
  return null;
}

function resetCurrentFiber() {
  ReactDebugCurrentFrame.getCurrentStack = null;
  ReactDebugCurrentFiber.current = null;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentFiber(fiber) {
  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
  ReactDebugCurrentFiber.current = fiber;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentPhase(phase) {
  ReactDebugCurrentFiber.phase = phase;
}

var ReactDebugCurrentFiber = {
  current: null,
  phase: null,
  resetCurrentFiber: resetCurrentFiber,
  setCurrentFiber: setCurrentFiber,
  setCurrentPhase: setCurrentPhase,
  getCurrentFiberOwnerName: getCurrentFiberOwnerName,
  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
};

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning$$1) {
  var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning$$1) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning$$1);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning$$1) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning$$1);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case ReturnComponent:
    case Fragment:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber['return'];
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber['return'] !== null) {
    resumeTimersRecursively(fiber['return']);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning$$1 = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning$$1);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning$$1 = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning$$1 = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy) || 'Unknown';
        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning$$1 = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning$$1 = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning$$1 = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning$$1 = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

{
  var warnedAboutMissingGetChildContext = {};
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
  var hasOwnContext = isContextProvider(workInProgress);
  if (hasOwnContext) {
    // If the fiber is a context provider itself, when we read its context
    // we have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(workInProgress) || 'Unknown';
    checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextConsumer(fiber) {
  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
}

function isContextProvider(fiber) {
  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
}

function popContextProvider(fiber) {
  if (!isContextProvider(fiber)) {
    return;
  }

  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = fiber.type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(fiber) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(fiber) || 'Unknown';
    checkPropTypes(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  if (!isContextProvider(workInProgress)) {
    return false;
  }

  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function resetContext() {
  previousContext = emptyObject;
  contextStackCursor.current = emptyObject;
  didPerformWorkStackCursor.current = false;
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  while (node.tag !== HostRoot) {
    if (isContextProvider(node)) {
      return node.stateNode.__reactInternalMemoizedMergedChildContext;
    }
    var parent = node['return'];
    !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    node = parent;
  }
  return node.stateNode.context;
}

var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax

var Sync = 1;
var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function expirationTimeToMs(expirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var NoContext = 0;
var AsyncUpdates = 1;

{
  var hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */
    
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


{
  var debugCounter = 1;
}

function FiberNode(tag, key, internalContextTag) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this['return'] = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = null;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;

  this.internalContextTag = internalContextTag;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;

  this.alternate = null;

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, key, internalContextTag) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, key, internalContextTag);
};

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;
  }

  workInProgress.expirationTime = expirationTime;
  workInProgress.pendingProps = pendingProps;

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  return workInProgress;
}

function createHostRootFiber() {
  var fiber = createFiber(HostRoot, null, NoContext);
  return fiber;
}

function createFiberFromElement(element, internalContextTag, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type,
      key = element.key;

  if (typeof type === 'function') {
    fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'string') {
    fiber = createFiber(HostComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
    // Currently assumed to be a continuation and therefore is a fiber already.
    // TODO: The yield system is currently broken for updates in some cases.
    // The reified yield stores a fiber, but we don't know which fiber that is;
    // the current or a workInProgress? When the continuation gets rendered here
    // we don't know if we can reuse that fiber or if we need to clone it.
    // There is probably a clever way to restructure this.
    fiber = type;
    fiber.pendingProps = element.props;
  } else {
    var info = '';
    {
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }
      var ownerName = owner ? getComponentName(owner) : null;
      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }
    }
    invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
  }

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
  var fiber = createFiber(Fragment, key, internalContextTag);
  fiber.pendingProps = elements;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromText(content, internalContextTag, expirationTime) {
  var fiber = createFiber(HostText, null, internalContextTag);
  fiber.pendingProps = content;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromCall(call, internalContextTag, expirationTime) {
  var fiber = createFiber(CallComponent, call.key, internalContextTag);
  fiber.type = call.handler;
  fiber.pendingProps = call;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
  var fiber = createFiber(ReturnComponent, null, internalContextTag);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromPortal(portal, internalContextTag, expirationTime) {
  var fiber = createFiber(HostPortal, portal.key, internalContextTag);
  fiber.pendingProps = portal.children || [];
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

function createFiberRoot(containerInfo, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber();
  var root = {
    current: uninitializedFiber,
    containerInfo: containerInfo,
    pendingChildren: null,
    remainingExpirationTime: NoWork,
    isReadyForCommit: false,
    finishedWork: null,
    context: null,
    pendingContext: null,
    hydrate: hydrate,
    nextScheduledRoot: null
  };
  uninitializedFiber.stateNode = root;
  return root;
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warning(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warning(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

{
  var didWarnUpdateInsideUpdate = false;
}

// Callbacks are not validated until invocation


// Singly linked-list of updates. When an update is scheduled, it is added to
// the queue of the current fiber and the work-in-progress fiber. The two queues
// are separate but they share a persistent structure.
//
// During reconciliation, updates are removed from the work-in-progress fiber,
// but they remain on the current fiber. That ensures that if a work-in-progress
// is aborted, the aborted updates are recovered by cloning from current.
//
// The work-in-progress queue is always a subset of the current queue.
//
// When the tree is committed, the work-in-progress becomes the current.


function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    expirationTime: NoWork,
    first: null,
    last: null,
    callbackList: null,
    hasForceUpdate: false,
    isInitialized: false
  };
  {
    queue.isProcessing = false;
  }
  return queue;
}

function insertUpdateIntoQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.last === null) {
    // Queue is empty
    queue.first = queue.last = update;
  } else {
    queue.last.next = update;
    queue.last = update;
  }
  if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
    queue.expirationTime = update.expirationTime;
  }
}

function insertUpdateIntoFiber(fiber, update) {
  // We'll have at least one and at most two distinct update queues.
  var alternateFiber = fiber.alternate;
  var queue1 = fiber.updateQueue;
  if (queue1 === null) {
    // TODO: We don't know what the base state will be until we begin work.
    // It depends on which fiber is the next current. Initialize with an empty
    // base state, then set to the memoizedState when rendering. Not super
    // happy with this approach.
    queue1 = fiber.updateQueue = createUpdateQueue(null);
  }

  var queue2 = void 0;
  if (alternateFiber !== null) {
    queue2 = alternateFiber.updateQueue;
    if (queue2 === null) {
      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
    }
  } else {
    queue2 = null;
  }
  queue2 = queue2 !== queue1 ? queue2 : null;

  // Warn if an update is scheduled from inside an updater function.
  {
    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
      warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }

  // If there's only one queue, add the update to that queue and exit.
  if (queue2 === null) {
    insertUpdateIntoQueue(queue1, update);
    return;
  }

  // If either queue is empty, we need to add to both queues.
  if (queue1.last === null || queue2.last === null) {
    insertUpdateIntoQueue(queue1, update);
    insertUpdateIntoQueue(queue2, update);
    return;
  }

  // If both lists are not empty, the last update is the same for both lists
  // because of structural sharing. So, we should only append to one of
  // the lists.
  insertUpdateIntoQueue(queue1, update);
  // But we still need to update the `last` pointer of queue2.
  queue2.last = update;
}

function getUpdateExpirationTime(fiber) {
  if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
    return NoWork;
  }
  var updateQueue = fiber.updateQueue;
  if (updateQueue === null) {
    return NoWork;
  }
  return updateQueue.expirationTime;
}

function getStateFromUpdate(update, instance, prevState, props) {
  var partialState = update.partialState;
  if (typeof partialState === 'function') {
    var updateFn = partialState;

    // Invoke setState callback an extra time to help detect side-effects.
    if (debugRenderPhaseSideEffects) {
      updateFn.call(instance, prevState, props);
    }

    return updateFn.call(instance, prevState, props);
  } else {
    return partialState;
  }
}

function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
  if (current !== null && current.updateQueue === queue) {
    // We need to create a work-in-progress queue, by cloning the current queue.
    var currentQueue = queue;
    queue = workInProgress.updateQueue = {
      baseState: currentQueue.baseState,
      expirationTime: currentQueue.expirationTime,
      first: currentQueue.first,
      last: currentQueue.last,
      isInitialized: currentQueue.isInitialized,
      // These fields are no longer valid because they were already committed.
      // Reset them.
      callbackList: null,
      hasForceUpdate: false
    };
  }

  {
    // Set this flag so we can warn if setState is called inside the update
    // function of another setState.
    queue.isProcessing = true;
  }

  // Reset the remaining expiration time. If we skip over any updates, we'll
  // increase this accordingly.
  queue.expirationTime = NoWork;

  // TODO: We don't know what the base state will be until we begin work.
  // It depends on which fiber is the next current. Initialize with an empty
  // base state, then set to the memoizedState when rendering. Not super
  // happy with this approach.
  var state = void 0;
  if (queue.isInitialized) {
    state = queue.baseState;
  } else {
    state = queue.baseState = workInProgress.memoizedState;
    queue.isInitialized = true;
  }
  var dontMutatePrevState = true;
  var update = queue.first;
  var didSkip = false;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      var remainingExpirationTime = queue.expirationTime;
      if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
        // Update the remaining expiration time.
        queue.expirationTime = updateExpirationTime;
      }
      if (!didSkip) {
        didSkip = true;
        queue.baseState = state;
      }
      // Continue to the next update.
      update = update.next;
      continue;
    }

    // This update does have sufficient priority.

    // If no previous updates were skipped, drop this update from the queue by
    // advancing the head of the list.
    if (!didSkip) {
      queue.first = update.next;
      if (queue.first === null) {
        queue.last = null;
      }
    }

    // Process the update
    var _partialState = void 0;
    if (update.isReplace) {
      state = getStateFromUpdate(update, instance, state, props);
      dontMutatePrevState = true;
    } else {
      _partialState = getStateFromUpdate(update, instance, state, props);
      if (_partialState) {
        if (dontMutatePrevState) {
          // $FlowFixMe: Idk how to type this properly.
          state = _assign({}, state, _partialState);
        } else {
          state = _assign(state, _partialState);
        }
        dontMutatePrevState = false;
      }
    }
    if (update.isForced) {
      queue.hasForceUpdate = true;
    }
    if (update.callback !== null) {
      // Append to list of callbacks.
      var _callbackList = queue.callbackList;
      if (_callbackList === null) {
        _callbackList = queue.callbackList = [];
      }
      _callbackList.push(update);
    }
    update = update.next;
  }

  if (queue.callbackList !== null) {
    workInProgress.effectTag |= Callback;
  } else if (queue.first === null && !queue.hasForceUpdate) {
    // The queue is empty. We can reset it.
    workInProgress.updateQueue = null;
  }

  if (!didSkip) {
    didSkip = true;
    queue.baseState = state;
  }

  {
    // No longer processing.
    queue.isProcessing = false;
  }

  return state;
}

function commitCallbacks(queue, context) {
  var callbackList = queue.callbackList;
  if (callbackList === null) {
    return;
  }
  // Set the list to null to make sure they don't get called more than once.
  queue.callbackList = null;
  for (var i = 0; i < callbackList.length; i++) {
    var update = callbackList[i];
    var _callback = update.callback;
    // This update might be processed again. Clear the callback so it's only
    // called once.
    update.callback = null;
    !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
    _callback.call(context);
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

{
  var didWarnAboutStateAssignmentForComponent = {};

  var warnOnInvalidCallback = function (callback, callerName) {
    warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

var ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
  // Class component state updater
  var updater = {
    isMounted: isMounted,
    enqueueSetState: function (instance, partialState, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'setState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: partialState,
        callback: callback,
        isReplace: false,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueReplaceState: function (instance, state, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: state,
        callback: callback,
        isReplace: true,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueForceUpdate: function (instance, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: null,
        callback: callback,
        isReplace: false,
        isForced: true,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
      // If the workInProgress already has an Update effect, return true
      return true;
    }

    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    if (typeof instance.shouldComponentUpdate === 'function') {
      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
      stopPhaseTimer();

      // Simulate an async bailout/interruption by invoking lifecycle twice.
      if (debugRenderPhaseSideEffects) {
        instance.shouldComponentUpdate(newProps, newState, newContext);
      }

      {
        warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
      }

      return shouldUpdate;
    }

    if (type.prototype && type.prototype.isPureReactComponent) {
      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }

    return true;
  }

  function checkClassInstance(workInProgress) {
    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    {
      var name = getComponentName(workInProgress);
      var renderPresent = instance.render;

      if (!renderPresent) {
        if (type.prototype && typeof type.prototype.render === 'function') {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }

      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
      warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
      warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
      var noInstancePropTypes = !instance.propTypes;
      warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
      var noInstanceContextTypes = !instance.contextTypes;
      warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
      warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
      }
      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
      warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
      warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
      warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
      var hasMutatedProps = instance.props !== workInProgress.pendingProps;
      warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
      var noInstanceDefaultProps = !instance.defaultProps;
      warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    var state = instance.state;
    if (state && (typeof state !== 'object' || isArray(state))) {
      warning(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
    }
    if (typeof instance.getChildContext === 'function') {
      warning(typeof workInProgress.type.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(workInProgress));
    }
  }

  function resetInputPointers(workInProgress, instance) {
    instance.props = workInProgress.memoizedProps;
    instance.state = workInProgress.memoizedState;
  }

  function adoptClassInstance(workInProgress, instance) {
    instance.updater = updater;
    workInProgress.stateNode = instance;
    // The instance needs access to the fiber so that it can schedule updates
    set(instance, workInProgress);
    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }

  function constructClassInstance(workInProgress, props) {
    var ctor = workInProgress.type;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var needsContext = isContextConsumer(workInProgress);
    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
    var instance = new ctor(props, context);
    adoptClassInstance(workInProgress, instance);

    // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // ReactFiberContext usually updates this cache but can't for newly-created instances.
    if (needsContext) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return instance;
  }

  function callComponentWillMount(workInProgress, instance) {
    startPhaseTimer(workInProgress, 'componentWillMount');
    var oldState = instance.state;
    instance.componentWillMount();
    stopPhaseTimer();

    // Simulate an async bailout/interruption by invoking lifecycle twice.
    if (debugRenderPhaseSideEffects) {
      instance.componentWillMount();
    }

    if (oldState !== instance.state) {
      {
        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
    var oldState = instance.state;
    instance.componentWillReceiveProps(newProps, newContext);
    stopPhaseTimer();

    // Simulate an async bailout/interruption by invoking lifecycle twice.
    if (debugRenderPhaseSideEffects) {
      instance.componentWillReceiveProps(newProps, newContext);
    }

    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutStateAssignmentForComponent[componentName]) {
          warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          didWarnAboutStateAssignmentForComponent[componentName] = true;
        }
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  // Invokes the mount life-cycles on a previously never rendered instance.
  function mountClassInstance(workInProgress, renderExpirationTime) {
    var current = workInProgress.alternate;

    {
      checkClassInstance(workInProgress);
    }

    var instance = workInProgress.stateNode;
    var state = instance.state || null;

    var props = workInProgress.pendingProps;
    !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    var unmaskedContext = getUnmaskedContext(workInProgress);

    instance.props = props;
    instance.state = workInProgress.memoizedState = state;
    instance.refs = emptyObject;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);

    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
      workInProgress.internalContextTag |= AsyncUpdates;
    }

    if (typeof instance.componentWillMount === 'function') {
      callComponentWillMount(workInProgress, instance);
      // If we had additional state updates during this life-cycle, let's
      // process them now.
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
      }
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  }

  // Called on a preexisting class instance. Returns false if a resumed render
  // could be reused.
  // function resumeMountClassInstance(
  //   workInProgress: Fiber,
  //   priorityLevel: PriorityLevel,
  // ): boolean {
  //   const instance = workInProgress.stateNode;
  //   resetInputPointers(workInProgress, instance);

  //   let newState = workInProgress.memoizedState;
  //   let newProps = workInProgress.pendingProps;
  //   if (!newProps) {
  //     // If there isn't any new props, then we'll reuse the memoized props.
  //     // This could be from already completed work.
  //     newProps = workInProgress.memoizedProps;
  //     invariant(
  //       newProps != null,
  //       'There should always be pending or memoized props. This error is ' +
  //         'likely caused by a bug in React. Please file an issue.',
  //     );
  //   }
  //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
  //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

  //   const oldContext = instance.context;
  //   const oldProps = workInProgress.memoizedProps;

  //   if (
  //     typeof instance.componentWillReceiveProps === 'function' &&
  //     (oldProps !== newProps || oldContext !== newContext)
  //   ) {
  //     callComponentWillReceiveProps(
  //       workInProgress,
  //       instance,
  //       newProps,
  //       newContext,
  //     );
  //   }

  //   // Process the update queue before calling shouldComponentUpdate
  //   const updateQueue = workInProgress.updateQueue;
  //   if (updateQueue !== null) {
  //     newState = processUpdateQueue(
  //       workInProgress,
  //       updateQueue,
  //       instance,
  //       newState,
  //       newProps,
  //       priorityLevel,
  //     );
  //   }

  //   // TODO: Should we deal with a setState that happened after the last
  //   // componentWillMount and before this componentWillMount? Probably
  //   // unsupported anyway.

  //   if (
  //     !checkShouldComponentUpdate(
  //       workInProgress,
  //       workInProgress.memoizedProps,
  //       newProps,
  //       workInProgress.memoizedState,
  //       newState,
  //       newContext,
  //     )
  //   ) {
  //     // Update the existing instance's state, props, and context pointers even
  //     // though we're bailing out.
  //     instance.props = newProps;
  //     instance.state = newState;
  //     instance.context = newContext;
  //     return false;
  //   }

  //   // Update the input pointers now so that they are correct when we call
  //   // componentWillMount
  //   instance.props = newProps;
  //   instance.state = newState;
  //   instance.context = newContext;

  //   if (typeof instance.componentWillMount === 'function') {
  //     callComponentWillMount(workInProgress, instance);
  //     // componentWillMount may have called setState. Process the update queue.
  //     const newUpdateQueue = workInProgress.updateQueue;
  //     if (newUpdateQueue !== null) {
  //       newState = processUpdateQueue(
  //         workInProgress,
  //         newUpdateQueue,
  //         instance,
  //         newState,
  //         newProps,
  //         priorityLevel,
  //       );
  //     }
  //   }

  //   if (typeof instance.componentDidMount === 'function') {
  //     workInProgress.effectTag |= Update;
  //   }

  //   instance.state = newState;

  //   return true;
  // }

  // Invokes the update life-cycles and returns false if it shouldn't rerender.
  function updateClassInstance(current, workInProgress, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    resetInputPointers(workInProgress, instance);

    var oldProps = workInProgress.memoizedProps;
    var newProps = workInProgress.pendingProps;
    if (!newProps) {
      // If there aren't any new props, then we'll reuse the memoized props.
      // This could be from already completed work.
      newProps = oldProps;
      !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var oldContext = instance.context;
    var newUnmaskedContext = getUnmaskedContext(workInProgress);
    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

    // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.

    if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
    }

    // Compute the next state using the memoized state and the update queue.
    var oldState = workInProgress.memoizedState;
    // TODO: Previous state can be null.
    var newState = void 0;
    if (workInProgress.updateQueue !== null) {
      newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
    } else {
      newState = oldState;
    }

    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      return false;
    }

    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

    if (shouldUpdate) {
      if (typeof instance.componentWillUpdate === 'function') {
        startPhaseTimer(workInProgress, 'componentWillUpdate');
        instance.componentWillUpdate(newProps, newState, newContext);
        stopPhaseTimer();

        // Simulate an async bailout/interruption by invoking lifecycle twice.
        if (debugRenderPhaseSideEffects) {
          instance.componentWillUpdate(newProps, newState, newContext);
        }
      }
      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.effectTag |= Update;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }

      // If shouldComponentUpdate returned false, we should still update the
      // memoized props/state to indicate that this work can be reused.
      memoizeProps(workInProgress, newProps);
      memoizeState(workInProgress, newState);
    }

    // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.
    instance.props = newProps;
    instance.state = newState;
    instance.context = newContext;

    return shouldUpdate;
  }

  return {
    adoptClassInstance: adoptClassInstance,
    constructClassInstance: constructClassInstance,
    mountClassInstance: mountClassInstance,
    // resumeMountClassInstance,
    updateClassInstance: updateClassInstance
  };
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol['for'];

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnAboutMaps = false;
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  var ownerHasFunctionTypeWarning = {};

  var warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
  };
}

var isArray$1 = Array.isArray;

function coerceRef(current, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function') {
    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
        return current.ref;
      }
      var ref = function (value) {
        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current = newFiber.alternate;
    if (current !== null) {
      var oldIndex = current.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null && current.type === element.type) {
      // Move based on index
      var existing = useFiber(current, element.props, expirationTime);
      existing.ref = coerceRef(current, element);
      existing['return'] = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      created.ref = coerceRef(current, element);
      created['return'] = returnFiber;
      return created;
    }
  }

  function updateCall(returnFiber, current, call, expirationTime) {
    // TODO: Should this also compare handler to determine whether to reuse?
    if (current === null || current.tag !== CallComponent) {
      // Insert
      var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, call, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateReturn(returnFiber, current, returnNode, expirationTime) {
    if (current === null || current.tag !== ReturnComponent) {
      // Insert
      var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
      created.type = returnNode.value;
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, null, expirationTime);
      existing.type = returnNode.value;
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || [], expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);
              _created['return'] = returnFiber;
              return _created;
            } else {
              var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
              _created2.ref = coerceRef(null, newChild);
              _created2['return'] = returnFiber;
              return _created2;
            }
          }

        case REACT_CALL_TYPE:
          {
            var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
            _created3['return'] = returnFiber;
            return _created3;
          }

        case REACT_RETURN_TYPE:
          {
            var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
            _created4.type = newChild.value;
            _created4['return'] = returnFiber;
            return _created4;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
            _created5['return'] = returnFiber;
            return _created5;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);
        _created6['return'] = returnFiber;
        return _created6;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_CALL_TYPE:
          {
            if (newChild.key === key) {
              return updateCall(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys. If the previous node is implicitly keyed
            // we can continue to replace it without aborting even if it is not a
            // yield.
            if (key === null) {
              return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_CALL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys, so we neither have to check the old nor
            // new node for the key. If both are returns, they match.
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber5 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_CALL_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // Warn about using Maps as children
      if (typeof newChildrenIterable.entries === 'function') {
        var possibleMap = newChildrenIterable;
        if (possibleMap.entries === iteratorFn) {
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
          didWarnAboutMaps = true;
        }
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(child, element);
          existing['return'] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
      created['return'] = returnFiber;
      return created;
    } else {
      var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      _created7.ref = coerceRef(currentFirstChild, element);
      _created7['return'] = returnFiber;
      return _created7;
    }
  }

  function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
    var key = call.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === CallComponent) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, call, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
    // There's no need to check for keys on yields since they're stateless.
    var child = currentFirstChild;
    if (child !== null) {
      if (child.tag === ReturnComponent) {
        deleteRemainingChildren(returnFiber, child.sibling);
        var existing = useFiber(child, null, expirationTime);
        existing.type = returnNode.value;
        existing['return'] = returnFiber;
        return existing;
      } else {
        deleteRemainingChildren(returnFiber, child);
      }
    }

    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
    created.type = returnNode.value;
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    if (typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_CALL_TYPE:
          return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_RETURN_TYPE:
          return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined') {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current, workInProgress) {
  !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild['return'] = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild['return'] = workInProgress;
  }
  newChild.sibling = null;
}

{
  var warnedAboutStatelessRefs = {};
}

var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
  var shouldSetTextContent = config.shouldSetTextContent,
      useSyncScheduling = config.useSyncScheduling,
      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
  var pushHostContext = hostContext.pushHostContext,
      pushHostContainer = hostContext.pushHostContainer;
  var enterHydrationState = hydrationContext.enterHydrationState,
      resetHydrationState = hydrationContext.resetHydrationState,
      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

  var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.


  function reconcileChildren(current, workInProgress, nextChildren) {
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
  }

  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
    if (current === null) {
      // If this is a fresh new component that hasn't been rendered yet, we
      // won't update its child set by applying minimal side-effects. Instead,
      // we will add them all to the child before it gets rendered. That means
      // we can optimize this reconciliation pass by not tracking side-effects.
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      // If the current child is the same as the work in progress, it means that
      // we haven't yet started any work on these children. Therefore, we use
      // the clone algorithm to create a copy of all the current children.

      // If we had any progressed work already, that is invalid at this point so
      // let's throw it out.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }
  }

  function updateFragment(current, workInProgress) {
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = workInProgress.memoizedProps;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
    return workInProgress.child;
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (ref !== null && (!current || current.ref !== ref)) {
      // Schedule a Ref effect
      workInProgress.effectTag |= Ref;
    }
  }

  function updateFunctionalComponent(current, workInProgress) {
    var fn = workInProgress.type;
    var nextProps = workInProgress.pendingProps;

    var memoizedProps = workInProgress.memoizedProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextProps === null) {
        nextProps = memoizedProps;
      }
    } else {
      if (nextProps === null || memoizedProps === nextProps) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      // TODO: consider bringing fn.shouldComponentUpdate() back.
      // It used to be here.
    }

    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var nextChildren;

    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = fn(nextProps, context);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, renderExpirationTime) {
    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = pushContextProvider(workInProgress);

    var shouldUpdate = void 0;
    if (current === null) {
      if (!workInProgress.stateNode) {
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, workInProgress.pendingProps);
        mountClassInstance(workInProgress, renderExpirationTime);
        shouldUpdate = true;
      } else {
        invariant(false, 'Resuming work not yet implemented.');
        // In a resume, we'll already have an instance we can reuse.
        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
      }
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
    }
    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
  }

  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
    // Refs should update even if shouldComponentUpdate returns false
    markRef(current, workInProgress);

    if (!shouldUpdate) {
      // Context providers should defer to sCU for rendering
      if (hasContext) {
        invalidateContextProvider(workInProgress, false);
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var instance = workInProgress.stateNode;

    // Rerender
    ReactCurrentOwner.current = workInProgress;
    var nextChildren = void 0;
    {
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects) {
        instance.render();
      }
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    // Memoize props and state using the values we just used to render.
    // TODO: Restructure so we never read values from the instance.
    memoizeState(workInProgress, instance.state);
    memoizeProps(workInProgress, instance.props);

    // The context might have changed so we need to recalculate it.
    if (hasContext) {
      invalidateContextProvider(workInProgress, true);
    }

    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      // Should always be set
      pushTopLevelContextObject(workInProgress, root.context, false);
    }
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateHostRoot(current, workInProgress, renderExpirationTime) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      var prevState = workInProgress.memoizedState;
      var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
      if (prevState === state) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      var element = state.element;
      var root = workInProgress.stateNode;
      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.

        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement;

        // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.
        workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        resetHydrationState();
        reconcileChildren(current, workInProgress, element);
      }
      memoizeState(workInProgress, state);
      return workInProgress.child;
    }
    resetHydrationState();
    // If there is no update queue, that's a bailout because the root has no props.
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  function updateHostComponent(current, workInProgress, renderExpirationTime) {
    pushHostContext(workInProgress);

    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }

    var type = workInProgress.type;
    var memoizedProps = workInProgress.memoizedProps;
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = memoizedProps;
      !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var prevProps = current !== null ? current.memoizedProps : null;

    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (nextProps === null || memoizedProps === nextProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);

    if (isDirectTextChild) {
      // We special case a direct text child of a host node. This is a common
      // case. We won't handle it as a reified child. We will instead handle
      // this in the host environment that also have access to this prop. That
      // avoids allocating another HostText fiber and traversing it.
      nextChildren = null;
    } else if (prevProps && shouldSetTextContent(type, prevProps)) {
      // If we're switching from a direct text child to a normal child, or to
      // empty, we need to schedule the text content to be reset.
      workInProgress.effectTag |= ContentReset;
    }

    markRef(current, workInProgress);

    // Check the host config to see if the children are offscreen/hidden.
    if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
      // Down-prioritize the children.
      workInProgress.expirationTime = Never;
      // Bailout and come back to this fiber later.
      return null;
    }

    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = workInProgress.memoizedProps;
    }
    memoizeProps(workInProgress, nextProps);
    // Nothing to do here. This is terminal. We'll do the completion step
    // immediately after.
    return null;
  }

  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
    !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var fn = workInProgress.type;
    var props = workInProgress.pendingProps;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var value;

    {
      if (fn.prototype && typeof fn.prototype.render === 'function') {
        var componentName = getComponentName(workInProgress);
        warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
      }
      ReactCurrentOwner.current = workInProgress;
      value = fn(props, context);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;

    if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
      // Proceed under the assumption that this is a class instance
      workInProgress.tag = ClassComponent;

      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = pushContextProvider(workInProgress);
      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, renderExpirationTime);
      return finishClassComponent(current, workInProgress, true, hasContext);
    } else {
      // Proceed under the assumption that this is a functional component
      workInProgress.tag = FunctionalComponent;
      {
        var Component = workInProgress.type;

        if (Component) {
          warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }

          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!warnedAboutStatelessRefs[warningKey]) {
            warnedAboutStatelessRefs[warningKey] = true;
            warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
          }
        }
      }
      reconcileChildren(current, workInProgress, value);
      memoizeProps(workInProgress, props);
      return workInProgress.child;
    }
  }

  function updateCallComponent(current, workInProgress, renderExpirationTime) {
    var nextCall = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextCall === null) {
        nextCall = current && current.memoizedProps;
        !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
      nextCall = workInProgress.memoizedProps;
      // TODO: When bailing out, we might need to return the stateNode instead
      // of the child. To check it for work.
      // return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextCall.children;

    // The following is a fork of reconcileChildrenAtExpirationTime but using
    // stateNode to store the child.
    if (current === null) {
      workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    } else {
      workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    }

    memoizeProps(workInProgress, nextCall);
    // This doesn't take arbitrary time so we could synchronously just begin
    // eagerly do the work of workInProgress.child as an optimization.
    return workInProgress.stateNode;
  }

  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = current && current.memoizedProps;
        !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    if (current === null) {
      // Portals are special because we don't append the children during mount
      // but at commit. Therefore we need to track insertions which the normal
      // flow doesn't do during mount. This doesn't happen at the root because
      // the root always starts with a "current" with a null child.
      // TODO: Consider unifying this with how the root works.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
    } else {
      reconcileChildren(current, workInProgress, nextChildren);
      memoizeProps(workInProgress, nextChildren);
    }
    return workInProgress.child;
  }

  /*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

  function bailoutOnAlreadyFinishedWork(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: We should ideally be able to bail out early if the children have no
    // more work to do. However, since we don't have a separation of this
    // Fiber's priority and its children yet - we don't know without doing lots
    // of the same work we do anyway. Once we have that separation we can just
    // bail out here if the children has no more work at this priority level.
    // if (workInProgress.priorityOfChildren <= priorityLevel) {
    //   // If there are side-effects in these children that have not yet been
    //   // committed we need to ensure that they get properly transferred up.
    //   if (current && current.child !== workInProgress.child) {
    //     reuseChildrenEffects(workInProgress, child);
    //   }
    //   return null;
    // }

    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }

  function bailoutOnLowPriority(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
    // See PR 8590 discussion for context
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
    }
    // TODO: What if this is currently in progress?
    // How can that happen? How is this not being cloned?
    return null;
  }

  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
  function memoizeProps(workInProgress, nextProps) {
    workInProgress.memoizedProps = nextProps;
  }

  function memoizeState(workInProgress, nextState) {
    workInProgress.memoizedState = nextState;
    // Don't reset the updateQueue, in case there are pending updates. Resetting
    // is handled by processUpdateQueue.
  }

  function beginWork(current, workInProgress, renderExpirationTime) {
    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    switch (workInProgress.tag) {
      case IndeterminateComponent:
        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
      case FunctionalComponent:
        return updateFunctionalComponent(current, workInProgress);
      case ClassComponent:
        return updateClassComponent(current, workInProgress, renderExpirationTime);
      case HostRoot:
        return updateHostRoot(current, workInProgress, renderExpirationTime);
      case HostComponent:
        return updateHostComponent(current, workInProgress, renderExpirationTime);
      case HostText:
        return updateHostText(current, workInProgress);
      case CallHandlerPhase:
        // This is a restart. Reset the tag to the initial phase.
        workInProgress.tag = CallComponent;
      // Intentionally fall through since this is now the same.
      case CallComponent:
        return updateCallComponent(current, workInProgress, renderExpirationTime);
      case ReturnComponent:
        // A return component is just a placeholder, we can just run through the
        // next one immediately.
        return null;
      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderExpirationTime);
      case Fragment:
        return updateFragment(current, workInProgress);
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function beginFailedWork(current, workInProgress, renderExpirationTime) {
    // Push context providers here to avoid a push/pop context mismatch.
    switch (workInProgress.tag) {
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      default:
        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }

    // Add an error effect so we can handle the error during the commit phase
    workInProgress.effectTag |= Err;

    // This is a weird case where we do "resume" work — work that failed on
    // our first attempt. Because we no longer have a notion of "progressed
    // deletions," reset the child to the current child to make sure we delete
    // it again. TODO: Find a better way to handle this, perhaps during a more
    // general overhaul of error handling.
    if (current === null) {
      workInProgress.child = null;
    } else if (workInProgress.child !== current.child) {
      workInProgress.child = current.child;
    }

    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    // If we don't bail out, we're going be recomputing our children so we need
    // to drop our effect list.
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    // Unmount the current children as if the component rendered null
    var nextChildren = null;
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

    if (workInProgress.tag === ClassComponent) {
      var instance = workInProgress.stateNode;
      workInProgress.memoizedProps = instance.props;
      workInProgress.memoizedState = instance.state;
    }

    return workInProgress.child;
  }

  return {
    beginWork: beginWork,
    beginFailedWork: beginFailedWork
  };
};

var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
  var createInstance = config.createInstance,
      createTextInstance = config.createTextInstance,
      appendInitialChild = config.appendInitialChild,
      finalizeInitialChildren = config.finalizeInitialChildren,
      prepareUpdate = config.prepareUpdate,
      mutation = config.mutation,
      persistence = config.persistence;
  var getRootHostContainer = hostContext.getRootHostContainer,
      popHostContext = hostContext.popHostContext,
      getHostContext = hostContext.getHostContext,
      popHostContainer = hostContext.popHostContainer;
  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
      popHydrationState = hydrationContext.popHydrationState;


  function markUpdate(workInProgress) {
    // Tag the fiber with an update effect. This turns a Placement into
    // an UpdateAndPlacement.
    workInProgress.effectTag |= Update;
  }

  function markRef(workInProgress) {
    workInProgress.effectTag |= Ref;
  }

  function appendAllReturns(returns, workInProgress) {
    var node = workInProgress.stateNode;
    if (node) {
      node['return'] = workInProgress;
    }
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
        invariant(false, 'A call cannot have host component children.');
      } else if (node.tag === ReturnComponent) {
        returns.push(node.type);
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
    var call = workInProgress.memoizedProps;
    !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    // First step of the call has completed. Now we need to do the second.
    // TODO: It would be nice to have a multi stage call represented by a
    // single component, or at least tail call optimize nested ones. Currently
    // that requires additional fields that we don't want to add to the fiber.
    // So this requires nested handlers.
    // Note: This doesn't mutate the alternate node. I don't think it needs to
    // since this stage is reset for every pass.
    workInProgress.tag = CallHandlerPhase;

    // Build up the returns.
    // TODO: Compare this to a generator or opaque helpers like Children.
    var returns = [];
    appendAllReturns(returns, workInProgress);
    var fn = call.handler;
    var props = call.props;
    var nextChildren = fn(props, returns);

    var currentFirstChild = current !== null ? current.child : null;
    workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }

  function appendAllChildren(parent, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  var updateHostContainer = void 0;
  var updateHostComponent = void 0;
  var updateHostText = void 0;
  if (mutation) {
    if (enableMutatingReconciler) {
      // Mutation mode
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant(false, 'Mutating reconciler is disabled.');
    }
  } else if (persistence) {
    if (enablePersistentReconciler) {
      // Persistent host tree mode
      var cloneInstance = persistence.cloneInstance,
          createContainerChildSet = persistence.createContainerChildSet,
          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
          finalizeContainerChildren = persistence.finalizeContainerChildren;

      // An unfortunate fork of appendAllChildren because we have two different parent types.

      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendChildToContainerChildSet(containerChildSet, node.stateNode);
          } else if (node.tag === HostPortal) {
            // If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      };
      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;
        if (childrenUnchanged) {
          // No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container);
          if (finalizeContainerChildren(container, newChildSet)) {
            markUpdate(workInProgress);
          }
          portalOrRoot.pendingChildren = newChildSet;
          // If children might have changed, we have to add them all to the set.
          appendAllChildrenToContainer(newChildSet, workInProgress);
          // Schedule an update on the container to swap out the container.
          markUpdate(workInProgress);
        }
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.
        var childrenUnchanged = workInProgress.firstEffect === null;
        var currentInstance = current.stateNode;
        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
        } else {
          var recyclableInstance = workInProgress.stateNode;
          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
            markUpdate(workInProgress);
          }
          workInProgress.stateNode = newInstance;
          if (childrenUnchanged) {
            // If there are no other effects in this tree, we need to flag this node as having one.
            // Even though we're not going to use it for anything.
            // Otherwise parents won't know that there are new children to propagate upwards.
            markUpdate(workInProgress);
          } else {
            // If children might have changed, we have to add them all to the set.
            appendAllChildren(newInstance, workInProgress);
          }
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
          // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant(false, 'Persistent reconciler is disabled.');
    }
  } else {
    if (enableNoopReconciler) {
      // No host operations
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // Noop
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // Noop
      };
    } else {
      invariant(false, 'Noop reconciler is disabled.');
    }
  }

  function completeWork(current, workInProgress, renderExpirationTime) {
    // Get the latest props.
    var newProps = workInProgress.pendingProps;
    if (newProps === null) {
      newProps = workInProgress.memoizedProps;
    } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
      // Reset the pending props, unless this was a down-prioritization.
      workInProgress.pendingProps = null;
    }

    switch (workInProgress.tag) {
      case FunctionalComponent:
        return null;
      case ClassComponent:
        {
          // We are leaving this subtree, so pop context if any.
          popContextProvider(workInProgress);
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var fiberRoot = workInProgress.stateNode;
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }

          if (current === null || current.child === null) {
            // If we hydrated, pop so that we can delete any remaining children
            // that weren't hydrated.
            popHydrationState(workInProgress);
            // This resets the hacky state to fix isMounted before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag &= ~Placement;
          }
          updateHostContainer(workInProgress);
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;
          if (current !== null && workInProgress.stateNode != null) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

            if (current.ref !== workInProgress.ref) {
              markRef(workInProgress);
            }
          } else {
            if (!newProps) {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }

            var _currentHostContext = getHostContext();
            // TODO: Move createInstance to beginWork and keep it on a context
            // "stack" as the parent. Then append children as we go in beginWork
            // or completeWork depending on we want to add then top->down or
            // bottom->up. Top->down is faster in IE11.
            var wasHydrated = popHydrationState(workInProgress);
            if (wasHydrated) {
              // TODO: Move this and createInstance step into the beginPhase
              // to consolidate.
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                // If changes to the hydrated node needs to be applied at the
                // commit-phase we mark this as such.
                markUpdate(workInProgress);
              }
            } else {
              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

              appendAllChildren(_instance, workInProgress);

              // Certain renderers require commit-time effects for initial mount.
              // (eg DOM renderer supports auto-focus for certain elements).
              // Make sure such renderers get scheduled for later work.
              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }
              workInProgress.stateNode = _instance;
            }

            if (workInProgress.ref !== null) {
              // If there is a ref on a host node we need to schedule a callback
              markRef(workInProgress);
            }
          }
          return null;
        }
      case HostText:
        {
          var newText = newProps;
          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps;
            // If we have an alternate, that means this is an update and we need
            // to schedule a side-effect to do the updates.
            updateHostText(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext2 = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress);
            if (_wasHydrated) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
            }
          }
          return null;
        }
      case CallComponent:
        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);
      case CallHandlerPhase:
        // Reset the tag to now be a first phase call.
        workInProgress.tag = CallComponent;
        return null;
      case ReturnComponent:
        // Does nothing.
        return null;
      case Fragment:
        return null;
      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);
        return null;
      // Error cases
      case IndeterminateComponent:
        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
      // eslint-disable-next-line no-fallthrough
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  return {
    completeWork: completeWork
  };
};

var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;


var ReactFiberCommitWork = function (config, captureError) {
  var getPublicInstance = config.getPublicInstance,
      mutation = config.mutation,
      persistence = config.persistence;


  var callComponentWillUnmountWithTimer = function (current, instance) {
    startPhaseTimer(current, 'componentWillUnmount');
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;
    instance.componentWillUnmount();
    stopPhaseTimer();
  };

  // Capture errors so they don't interrupt unmounting.
  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);
      if (hasCaughtError$1()) {
        var unmountError = clearCaughtError$1();
        captureError(current, unmountError);
      }
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;
    if (ref !== null) {
      {
        invokeGuardedCallback$2(null, ref, null, null);
        if (hasCaughtError$1()) {
          var refError = clearCaughtError$1();
          captureError(current, refError);
        }
      }
    }
  }

  function commitLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          var instance = finishedWork.stateNode;
          if (finishedWork.effectTag & Update) {
            if (current === null) {
              startPhaseTimer(finishedWork, 'componentDidMount');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidMount();
              stopPhaseTimer();
            } else {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'componentDidUpdate');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, prevState);
              stopPhaseTimer();
            }
          }
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            commitCallbacks(updateQueue, instance);
          }
          return;
        }
      case HostRoot:
        {
          var _updateQueue = finishedWork.updateQueue;
          if (_updateQueue !== null) {
            var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;
            commitCallbacks(_updateQueue, _instance);
          }
          return;
        }
      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode;

          // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.
          if (current === null && finishedWork.effectTag & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props, finishedWork);
          }

          return;
        }
      case HostText:
        {
          // We have no life-cycles associated with text.
          return;
        }
      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;
    if (ref !== null) {
      var instance = finishedWork.stateNode;
      switch (finishedWork.tag) {
        case HostComponent:
          ref(getPublicInstance(instance));
          break;
        default:
          ref(instance);
      }
    }
  }

  function commitDetachRef(current) {
    var currentRef = current.ref;
    if (currentRef !== null) {
      currentRef(null);
    }
  }

  // User-originating errors (lifecycles and refs) should not interrupt
  // deletion, so don't let them throw. Host-originating errors should
  // interrupt deletion, so it's okay
  function commitUnmount(current) {
    if (typeof onCommitUnmount === 'function') {
      onCommitUnmount(current);
    }

    switch (current.tag) {
      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;
          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }
          return;
        }
      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }
      case CallComponent:
        {
          commitNestedUnmounts(current.stateNode);
          return;
        }
      case HostPortal:
        {
          // TODO: this is recursive.
          // We are also not using this parent because
          // the portal will get pushed immediately.
          if (enableMutatingReconciler && mutation) {
            unmountHostComponents(current);
          } else if (enablePersistentReconciler && persistence) {
            emptyPortalContainer(current);
          }
          return;
        }
    }
  }

  function commitNestedUnmounts(root) {
    // While we're inside a removed host node we don't want to call
    // removeChild on the inner nodes because they're removed by the top
    // call anyway. We also want to call componentWillUnmount on all
    // composites before this host node is removed from the tree. Therefore
    var node = root;
    while (true) {
      commitUnmount(node);
      // Visit children because they may contain more composite or host nodes.
      // Skip portals because commitUnmount() currently visits them recursively.
      if (node.child !== null && (
      // If we use mutation we drill down into portals using commitUnmount above.
      // If we don't use mutation we drill down into portals here instead.
      !mutation || node.tag !== HostPortal)) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === root) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === root) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function detachFiber(current) {
    // Cut off the return pointers to disconnect it from the tree. Ideally, we
    // should clear the child pointer of the parent alternate to let this
    // get GC:ed but we don't know which for sure which parent is the current
    // one so we'll settle for GC:ing the subtree of this child. This child
    // itself will be GC:ed when the parent updates the next time.
    current['return'] = null;
    current.child = null;
    if (current.alternate) {
      current.alternate.child = null;
      current.alternate['return'] = null;
    }
  }

  if (!mutation) {
    var commitContainer = void 0;
    if (persistence) {
      var replaceContainerChildren = persistence.replaceContainerChildren,
          createContainerChildSet = persistence.createContainerChildSet;

      var emptyPortalContainer = function (current) {
        var portal = current.stateNode;
        var containerInfo = portal.containerInfo;

        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
      };
      commitContainer = function (finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
            {
              return;
            }
          case HostComponent:
            {
              return;
            }
          case HostText:
            {
              return;
            }
          case HostRoot:
          case HostPortal:
            {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo,
                  _pendingChildren = portalOrRoot.pendingChildren;

              replaceContainerChildren(containerInfo, _pendingChildren);
              return;
            }
          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      };
    } else {
      commitContainer = function (finishedWork) {
        // Noop
      };
    }
    if (enablePersistentReconciler || enableNoopReconciler) {
      return {
        commitResetTextContent: function (finishedWork) {},
        commitPlacement: function (finishedWork) {},
        commitDeletion: function (current) {
          // Detach refs and call componentWillUnmount() on the whole subtree.
          commitNestedUnmounts(current);
          detachFiber(current);
        },
        commitWork: function (current, finishedWork) {
          commitContainer(finishedWork);
        },

        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
      };
    } else if (persistence) {
      invariant(false, 'Persistent reconciler is disabled.');
    } else {
      invariant(false, 'Noop reconciler is disabled.');
    }
  }
  var commitMount = mutation.commitMount,
      commitUpdate = mutation.commitUpdate,
      resetTextContent = mutation.resetTextContent,
      commitTextUpdate = mutation.commitTextUpdate,
      appendChild = mutation.appendChild,
      appendChildToContainer = mutation.appendChildToContainer,
      insertBefore = mutation.insertBefore,
      insertInContainerBefore = mutation.insertInContainerBefore,
      removeChild = mutation.removeChild,
      removeChildFromContainer = mutation.removeChildFromContainer;


  function getHostParentFiber(fiber) {
    var parent = fiber['return'];
    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }
      parent = parent['return'];
    }
    invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
  }

  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }

  function getHostSibling(fiber) {
    // We're going to search forward into the tree until we find a sibling host
    // node. Unfortunately, if multiple insertions are done in a row we have to
    // search past them. This leads to exponential search for the next sibling.
    var node = fiber;
    siblings: while (true) {
      // If we didn't find anything, let's try the next sibling.
      while (node.sibling === null) {
        if (node['return'] === null || isHostParent(node['return'])) {
          // If we pop out of the root or hit the parent the fiber we are the
          // last sibling.
          return null;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
      while (node.tag !== HostComponent && node.tag !== HostText) {
        // If it is not host node and, we might have a host node inside it.
        // Try to search down until we find one.
        if (node.effectTag & Placement) {
          // If we don't have a child, try the siblings instead.
          continue siblings;
        }
        // If we don't have a child, try the siblings instead.
        // We also skip portals because they are not part of this host tree.
        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child['return'] = node;
          node = node.child;
        }
      }
      // Check if this host node is stable or about to be placed.
      if (!(node.effectTag & Placement)) {
        // Found it!
        return node.stateNode;
      }
    }
  }

  function commitPlacement(finishedWork) {
    // Recursively insert all host nodes into the parent.
    var parentFiber = getHostParentFiber(finishedWork);
    var parent = void 0;
    var isContainer = void 0;
    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;
      case HostRoot:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      case HostPortal:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      default:
        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
    }
    if (parentFiber.effectTag & ContentReset) {
      // Reset the text content of the parent before doing any insertions
      resetTextContent(parent);
      // Clear ContentReset from the effect tag
      parentFiber.effectTag &= ~ContentReset;
    }

    var before = getHostSibling(finishedWork);
    // We only have the top Fiber that was inserted but we need recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        if (before) {
          if (isContainer) {
            insertInContainerBefore(parent, node.stateNode, before);
          } else {
            insertBefore(parent, node.stateNode, before);
          }
        } else {
          if (isContainer) {
            appendChildToContainer(parent, node.stateNode);
          } else {
            appendChild(parent, node.stateNode);
          }
        }
      } else if (node.tag === HostPortal) {
        // If the insertion itself is a portal, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === finishedWork) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function unmountHostComponents(current) {
    // We only have the top Fiber that was inserted but we need recurse down its
    var node = current;

    // Each iteration, currentParent is populated with node's host parent if not
    // currentParentIsValid.
    var currentParentIsValid = false;
    var currentParent = void 0;
    var currentParentIsContainer = void 0;

    while (true) {
      if (!currentParentIsValid) {
        var parent = node['return'];
        findParent: while (true) {
          !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          switch (parent.tag) {
            case HostComponent:
              currentParent = parent.stateNode;
              currentParentIsContainer = false;
              break findParent;
            case HostRoot:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
            case HostPortal:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
          }
          parent = parent['return'];
        }
        currentParentIsValid = true;
      }

      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(node);
        // After all the children have unmounted, it is now safe to remove the
        // node from the tree.
        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        }
        // Don't visit children because we already visited them.
      } else if (node.tag === HostPortal) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        // Visit children because portals might contain host components.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(node);
        // Visit children because we may find more host components below.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      }
      if (node === current) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === current) {
          return;
        }
        node = node['return'];
        if (node.tag === HostPortal) {
          // When we go out of the portal, we need to restore the parent.
          // Since we don't keep a stack of them, we will search for it.
          currentParentIsValid = false;
        }
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function commitDeletion(current) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current);
    detachFiber(current);
  }

  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          var instance = finishedWork.stateNode;
          if (instance != null) {
            // Commit the work prepared earlier.
            var newProps = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type;
            // TODO: Type the updateQueue to be specific to host components.
            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
            }
          }
          return;
        }
      case HostText:
        {
          !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }
      case HostRoot:
        {
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitResetTextContent(current) {
    resetTextContent(current.stateNode);
  }

  if (enableMutatingReconciler) {
    return {
      commitResetTextContent: commitResetTextContent,
      commitPlacement: commitPlacement,
      commitDeletion: commitDeletion,
      commitWork: commitWork,
      commitLifeCycles: commitLifeCycles,
      commitAttachRef: commitAttachRef,
      commitDetachRef: commitDetachRef
    };
  } else {
    invariant(false, 'Mutating reconciler is disabled.');
  }
};

var NO_CONTEXT = {};

var ReactFiberHostContext = function (config) {
  var getChildHostContext = config.getChildHostContext,
      getRootHostContext = config.getRootHostContext;


  var contextStackCursor = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);

  function requiredContext(c) {
    !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    return c;
  }

  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    // Push current root instance onto the stack;
    // This allows us to reset root when portals are popped.
    push(rootInstanceStackCursor, nextRootInstance, fiber);

    var nextRootContext = getRootHostContext(nextRootInstance);

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextRootContext, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function getHostContext() {
    var context = requiredContext(contextStackCursor.current);
    return context;
  }

  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor.current);
    var nextContext = getChildHostContext(context, fiber.type, rootInstance);

    // Don't push this Fiber's context unless it's unique.
    if (context === nextContext) {
      return;
    }

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextContext, fiber);
  }

  function popHostContext(fiber) {
    // Do not pop unless this Fiber provided the current context.
    // pushHostContext() only pushes Fibers that provide unique contexts.
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }

    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
  }

  function resetHostContainer() {
    contextStackCursor.current = NO_CONTEXT;
    rootInstanceStackCursor.current = NO_CONTEXT;
  }

  return {
    getHostContext: getHostContext,
    getRootHostContainer: getRootHostContainer,
    popHostContainer: popHostContainer,
    popHostContext: popHostContext,
    pushHostContainer: pushHostContainer,
    pushHostContext: pushHostContext,
    resetHostContainer: resetHostContainer
  };
};

var ReactFiberHydrationContext = function (config) {
  var shouldSetTextContent = config.shouldSetTextContent,
      hydration = config.hydration;

  // If this doesn't have hydration mode.

  if (!hydration) {
    return {
      enterHydrationState: function () {
        return false;
      },
      resetHydrationState: function () {},
      tryToClaimNextHydratableInstance: function () {},
      prepareToHydrateHostInstance: function () {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      prepareToHydrateHostTextInstance: function () {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      popHydrationState: function (fiber) {
        return false;
      }
    };
  }

  var canHydrateInstance = hydration.canHydrateInstance,
      canHydrateTextInstance = hydration.canHydrateTextInstance,
      getNextHydratableSibling = hydration.getNextHydratableSibling,
      getFirstHydratableChild = hydration.getFirstHydratableChild,
      hydrateInstance = hydration.hydrateInstance,
      hydrateTextInstance = hydration.hydrateTextInstance,
      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
      didNotHydrateInstance = hydration.didNotHydrateInstance,
      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;

  // The deepest Fiber on the stack involved in a hydration context.
  // This may have been an insertion or a hydration.

  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;

  function enterHydrationState(fiber) {
    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }

  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;
        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }

    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete['return'] = returnFiber;
    childToDelete.effectTag = Deletion;

    // This might seem like it belongs on progressedFirstDeletion. However,
    // these children are not part of the reconciliation list of children.
    // Even if we abort and rereconcile the children, that will try to hydrate
    // again and the nodes are still in the host tree so these will be
    // recreated.
    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }

  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.effectTag |= Placement;
    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type, props);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }
            break;
          }
        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                break;
              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;
            }
            break;
          }
        default:
          return;
      }
    }
  }

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type, props);
          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }
          return false;
        }
      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }
          return false;
        }
      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }
    var nextInstance = nextHydratableInstance;
    if (!nextInstance) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    if (!tryHydrate(fiber, nextInstance)) {
      // If we can't hydrate this instance let's try the next one.
      // We use this as a heuristic. It's based on intuition and not data so it
      // might be flawed or unnecessary.
      nextInstance = getNextHydratableSibling(nextInstance);
      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      // We matched the next one, we'll now assume that the first one was
      // superfluous and we'll delete it. Since we can't eagerly delete it
      // we'll have to schedule a deletion. To do that, this node needs a dummy
      // fiber associated with it.
      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
    }
    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }

  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
    // TODO: Type this specific to this type of component.
    fiber.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update.
    if (updatePayload !== null) {
      return true;
    }
    return false;
  }

  function prepareToHydrateHostTextInstance(fiber) {
    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
    {
      if (shouldUpdate) {
        // We assume that prepareToHydrateHostTextInstance is called in a context where the
        // hydration parent is the parent host component of this host text.
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }
            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }
    return shouldUpdate;
  }

  function popToNextHostParent(fiber) {
    var parent = fiber['return'];
    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
      parent = parent['return'];
    }
    hydrationParentFiber = parent;
  }

  function popHydrationState(fiber) {
    if (fiber !== hydrationParentFiber) {
      // We're deeper than the current hydration context, inside an inserted
      // tree.
      return false;
    }
    if (!isHydrating) {
      // If we're not currently hydrating but we're in a hydration context, then
      // we were an insertion and now need to pop up reenter hydration of our
      // siblings.
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }

    var type = fiber.type;

    // If we have any remaining hydratable nodes, we need to delete them now.
    // We only do this deeper than head and body since they tend to have random
    // other nodes in them. We also ignore components with pure text content in
    // side of them.
    // TODO: Better heuristic.
    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }

    popToNextHostParent(fiber);
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    return true;
  }

  function resetHydrationState() {
    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }

  return {
    enterHydrationState: enterHydrationState,
    resetHydrationState: resetHydrationState,
    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
    prepareToHydrateHostInstance: prepareToHydrateHostInstance,
    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
    popHydrationState: popHydrationState
  };
};

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var defaultShowDialog = function (capturedError) {
  return true;
};

var showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
  var logError = showDialog(capturedError);

  // Allow injected showDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  var suppressLogging = error && error.suppressReactErrorLogging;
  if (suppressLogging) {
    return;
  }

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;


    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError = ReactErrorUtils.hasCaughtError;
var clearCaughtError = ReactErrorUtils.clearCaughtError;


{
  var didWarnAboutStateTransition = false;
  var didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  var warnAboutUpdateOnUnmounted = function (fiber) {
    var componentName = getComponentName(fiber) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  var warnAboutInvalidUpdates = function (instance) {
    switch (ReactDebugCurrentFiber.phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

var ReactFiberScheduler = function (config) {
  var hostContext = ReactFiberHostContext(config);
  var hydrationContext = ReactFiberHydrationContext(config);
  var popHostContainer = hostContext.popHostContainer,
      popHostContext = hostContext.popHostContext,
      resetHostContainer = hostContext.resetHostContainer;

  var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
      beginWork = _ReactFiberBeginWork.beginWork,
      beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

  var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
      completeWork = _ReactFiberCompleteWo.completeWork;

  var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
      commitPlacement = _ReactFiberCommitWork.commitPlacement,
      commitDeletion = _ReactFiberCommitWork.commitDeletion,
      commitWork = _ReactFiberCommitWork.commitWork,
      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

  var now = config.now,
      scheduleDeferredCallback = config.scheduleDeferredCallback,
      cancelDeferredCallback = config.cancelDeferredCallback,
      useSyncScheduling = config.useSyncScheduling,
      prepareForCommit = config.prepareForCommit,
      resetAfterCommit = config.resetAfterCommit;

  // Represents the current time in ms.

  var startTime = now();
  var mostRecentCurrentTime = msToExpirationTime(0);

  // Represents the expiration time that incoming updates should use. (If this
  // is NoWork, use the default strategy: async updates in async mode, sync
  // updates in sync mode.)
  var expirationContext = NoWork;

  var isWorking = false;

  // The next work in progress fiber that we're currently working on.
  var nextUnitOfWork = null;
  var nextRoot = null;
  // The time at which we're currently rendering work.
  var nextRenderExpirationTime = NoWork;

  // The next fiber with an effect that we're currently committing.
  var nextEffect = null;

  // Keep track of which fibers have captured an error that need to be handled.
  // Work is removed from this collection after componentDidCatch is called.
  var capturedErrors = null;
  // Keep track of which fibers have failed during the current batch of work.
  // This is a different set than capturedErrors, because it is not reset until
  // the end of the batch. This is needed to propagate errors correctly if a
  // subtree fails more than once.
  var failedBoundaries = null;
  // Error boundaries that captured an error during the current commit.
  var commitPhaseBoundaries = null;
  var firstUncaughtError = null;
  var didFatal = false;

  var isCommitting = false;
  var isUnmounting = false;

  // Used for performance tracking.
  var interruptedBy = null;

  function resetContextStack() {
    // Reset the stack
    reset$1();
    // Reset the cursors
    resetContext();
    resetHostContainer();
  }

  function commitAllHostEffects() {
    while (nextEffect !== null) {
      {
        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
      }
      recordEffect();

      var effectTag = nextEffect.effectTag;
      if (effectTag & ContentReset) {
        commitResetTextContent(nextEffect);
      }

      if (effectTag & Ref) {
        var current = nextEffect.alternate;
        if (current !== null) {
          commitDetachRef(current);
        }
      }

      // The following switch statement is only concerned about placement,
      // updates, and deletions. To avoid needing to add a case for every
      // possible bitmap value, we remove the secondary effects from the
      // effect tag and switch on that value.
      var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
      switch (primaryEffectTag) {
        case Placement:
          {
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted
            // does and isMounted is deprecated anyway so we should be able
            // to kill this.
            nextEffect.effectTag &= ~Placement;
            break;
          }
        case PlacementAndUpdate:
          {
            // Placement
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            nextEffect.effectTag &= ~Placement;

            // Update
            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }
        case Update:
          {
            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }
        case Deletion:
          {
            isUnmounting = true;
            commitDeletion(nextEffect);
            isUnmounting = false;
            break;
          }
      }
      nextEffect = nextEffect.nextEffect;
    }

    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
  }

  function commitAllLifeCycles() {
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;

      if (effectTag & (Update | Callback)) {
        recordEffect();
        var current = nextEffect.alternate;
        commitLifeCycles(current, nextEffect);
      }

      if (effectTag & Ref) {
        recordEffect();
        commitAttachRef(nextEffect);
      }

      if (effectTag & Err) {
        recordEffect();
        commitErrorHandling(nextEffect);
      }

      var next = nextEffect.nextEffect;
      // Ensure that we clean these up so that we don't accidentally keep them.
      // I'm not actually sure this matters because we can't reset firstEffect
      // and lastEffect since they're on every node, not just the effectful
      // ones. So we have to clean everything as we reuse nodes anyway.
      nextEffect.nextEffect = null;
      // Ensure that we reset the effectTag here so that we can rely on effect
      // tags to reason about the current life-cycle.
      nextEffect = next;
    }
  }

  function commitRoot(finishedWork) {
    // We keep track of this so that captureError can collect any boundaries
    // that capture an error during the commit phase. The reason these aren't
    // local to this function is because errors that occur during cWU are
    // captured elsewhere, to prevent the unmount from being interrupted.
    isWorking = true;
    isCommitting = true;
    startCommitTimer();

    var root = finishedWork.stateNode;
    !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    root.isReadyForCommit = false;

    // Reset this to null before calling lifecycles
    ReactCurrentOwner.current = null;

    var firstEffect = void 0;
    if (finishedWork.effectTag > PerformedWork) {
      // A fiber's effect list consists only of its children, not itself. So if
      // the root has an effect, we need to add it to the end of the list. The
      // resulting list is the set that would belong to the root's parent, if
      // it had one; that is, all the effects in the tree including the root.
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      // There is no effect on the root.
      firstEffect = finishedWork.firstEffect;
    }

    prepareForCommit();

    // Commit all the side-effects within a tree. We'll do this in two passes.
    // The first pass performs all the host insertions, updates, deletions and
    // ref unmounts.
    nextEffect = firstEffect;
    startCommitHostEffectsTimer();
    while (nextEffect !== null) {
      var didError = false;
      var _error = void 0;
      {
        invokeGuardedCallback$1(null, commitAllHostEffects, null);
        if (hasCaughtError()) {
          didError = true;
          _error = clearCaughtError();
        }
      }
      if (didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error);
        // Clean-up
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
    stopCommitHostEffectsTimer();

    resetAfterCommit();

    // The work-in-progress tree is now the current tree. This must come after
    // the first pass of the commit phase, so that the previous tree is still
    // current during componentWillUnmount, but before the second pass, so that
    // the finished work is current during componentDidMount/Update.
    root.current = finishedWork;

    // In the second pass we'll perform all life-cycles and ref callbacks.
    // Life-cycles happen as a separate pass so that all placements, updates,
    // and deletions in the entire tree have already been invoked.
    // This pass also triggers any renderer-specific initial effects.
    nextEffect = firstEffect;
    startCommitLifeCyclesTimer();
    while (nextEffect !== null) {
      var _didError = false;
      var _error2 = void 0;
      {
        invokeGuardedCallback$1(null, commitAllLifeCycles, null);
        if (hasCaughtError()) {
          _didError = true;
          _error2 = clearCaughtError();
        }
      }
      if (_didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error2);
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }

    isCommitting = false;
    isWorking = false;
    stopCommitLifeCyclesTimer();
    stopCommitTimer();
    if (typeof onCommitRoot === 'function') {
      onCommitRoot(finishedWork.stateNode);
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
    }

    // If we caught any errors during this commit, schedule their boundaries
    // to update.
    if (commitPhaseBoundaries) {
      commitPhaseBoundaries.forEach(scheduleErrorRecovery);
      commitPhaseBoundaries = null;
    }

    if (firstUncaughtError !== null) {
      var _error3 = firstUncaughtError;
      firstUncaughtError = null;
      onUncaughtError(_error3);
    }

    var remainingTime = root.current.expirationTime;

    if (remainingTime === NoWork) {
      capturedErrors = null;
      failedBoundaries = null;
    }

    return remainingTime;
  }

  function resetExpirationTime(workInProgress, renderTime) {
    if (renderTime !== Never && workInProgress.expirationTime === Never) {
      // The children of this component are hidden. Don't bubble their
      // expiration times.
      return;
    }

    // Check for pending updates.
    var newExpirationTime = getUpdateExpirationTime(workInProgress);

    // TODO: Calls need to visit stateNode

    // Bubble up the earliest expiration time.
    var child = workInProgress.child;
    while (child !== null) {
      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
        newExpirationTime = child.expirationTime;
      }
      child = child.sibling;
    }
    workInProgress.expirationTime = newExpirationTime;
  }

  function completeUnitOfWork(workInProgress) {
    while (true) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current = workInProgress.alternate;
      {
        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
      }
      var next = completeWork(current, workInProgress, nextRenderExpirationTime);
      {
        ReactDebugCurrentFiber.resetCurrentFiber();
      }

      var returnFiber = workInProgress['return'];
      var siblingFiber = workInProgress.sibling;

      resetExpirationTime(workInProgress, nextRenderExpirationTime);

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      stopWorkTimer(workInProgress);
      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        var root = workInProgress.stateNode;
        root.isReadyForCommit = true;
        return null;
      }
    }

    // Without this explicit null return Flow complains of invalid return type
    // TODO Remove the above while(true) loop
    // eslint-disable-next-line no-unreachable
    return null;
  }

  function performUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }

    var next = beginWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function performFailedUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }
    var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function workLoop(expirationTime) {
    if (capturedErrors !== null) {
      // If there are unhandled errors, switch to the slow work loop.
      // TODO: How to avoid this check in the fast path? Maybe the renderer
      // could keep track of which roots have unhandled errors and call a
      // forked version of renderRoot.
      slowWorkLoopThatChecksForFailedWork(expirationTime);
      return;
    }
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    }
  }

  function slowWorkLoopThatChecksForFailedWork(expirationTime) {
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }
  }

  function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
    // We're going to restart the error boundary that captured the error.
    // Conceptually, we're unwinding the stack. We need to unwind the
    // context stack, too.
    unwindContexts(failedWork, boundary);

    // Restart the error boundary using a forked version of
    // performUnitOfWork that deletes the boundary's children. The entire
    // failed subree will be unmounted. During the commit phase, a special
    // lifecycle method is called on the error boundary, which triggers
    // a re-render.
    nextUnitOfWork = performFailedUnitOfWork(boundary);

    // Continue working.
    workLoop(expirationTime);
  }

  function renderRoot(root, expirationTime) {
    !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    isWorking = true;

    // We're about to mutate the work-in-progress tree. If the root was pending
    // commit, it no longer is: we'll need to complete it again.
    root.isReadyForCommit = false;

    // Check if we're starting from a fresh stack, or if we're resuming from
    // previously yielded work.
    if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
      // Reset the stack and start working from the root.
      resetContextStack();
      nextRoot = root;
      nextRenderExpirationTime = expirationTime;
      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
    }

    startWorkLoopTimer(nextUnitOfWork);

    var didError = false;
    var error = null;
    {
      invokeGuardedCallback$1(null, workLoop, null, expirationTime);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }

    // An error was thrown during the render phase.
    while (didError) {
      if (didFatal) {
        // This was a fatal error. Don't attempt to recover from it.
        firstUncaughtError = error;
        break;
      }

      var failedWork = nextUnitOfWork;
      if (failedWork === null) {
        // An error was thrown but there's no current unit of work. This can
        // happen during the commit phase if there's a bug in the renderer.
        didFatal = true;
        continue;
      }

      // "Capture" the error by finding the nearest boundary. If there is no
      // error boundary, we use the root.
      var boundary = captureError(failedWork, error);
      !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didFatal) {
        // The error we just captured was a fatal error. This happens
        // when the error propagates to the root more than once.
        continue;
      }

      didError = false;
      error = null;
      {
        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);
        if (hasCaughtError()) {
          didError = true;
          error = clearCaughtError();
          continue;
        }
      }
      // We're finished working. Exit the error loop.
      break;
    }

    var uncaughtError = firstUncaughtError;

    // We're done performing work. Time to clean up.
    stopWorkLoopTimer(interruptedBy);
    interruptedBy = null;
    isWorking = false;
    didFatal = false;
    firstUncaughtError = null;

    if (uncaughtError !== null) {
      onUncaughtError(uncaughtError);
    }

    return root.isReadyForCommit ? root.current.alternate : null;
  }

  // Returns the boundary that captured the error, or null if the error is ignored
  function captureError(failedWork, error) {
    // It is no longer valid because we exited the user code.
    ReactCurrentOwner.current = null;
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }

    // Search for the nearest error boundary.
    var boundary = null;

    // Passed to logCapturedError()
    var errorBoundaryFound = false;
    var willRetry = false;
    var errorBoundaryName = null;

    // Host containers are a special case. If the failed work itself is a host
    // container, then it acts as its own boundary. In all other cases, we
    // ignore the work itself and only search through the parents.
    if (failedWork.tag === HostRoot) {
      boundary = failedWork;

      if (isFailedBoundary(failedWork)) {
        // If this root already failed, there must have been an error when
        // attempting to unmount it. This is a worst-case scenario and
        // should only be possible if there's a bug in the renderer.
        didFatal = true;
      }
    } else {
      var node = failedWork['return'];
      while (node !== null && boundary === null) {
        if (node.tag === ClassComponent) {
          var instance = node.stateNode;
          if (typeof instance.componentDidCatch === 'function') {
            errorBoundaryFound = true;
            errorBoundaryName = getComponentName(node);

            // Found an error boundary!
            boundary = node;
            willRetry = true;
          }
        } else if (node.tag === HostRoot) {
          // Treat the root like a no-op error boundary
          boundary = node;
        }

        if (isFailedBoundary(node)) {
          // This boundary is already in a failed state.

          // If we're currently unmounting, that means this error was
          // thrown while unmounting a failed subtree. We should ignore
          // the error.
          if (isUnmounting) {
            return null;
          }

          // If we're in the commit phase, we should check to see if
          // this boundary already captured an error during this commit.
          // This case exists because multiple errors can be thrown during
          // a single commit without interruption.
          if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
            // If so, we should ignore this error.
            return null;
          }

          // The error should propagate to the next boundary -— we keep looking.
          boundary = null;
          willRetry = false;
        }

        node = node['return'];
      }
    }

    if (boundary !== null) {
      // Add to the collection of failed boundaries. This lets us know that
      // subsequent errors in this subtree should propagate to the next boundary.
      if (failedBoundaries === null) {
        failedBoundaries = new Set();
      }
      failedBoundaries.add(boundary);

      // This method is unsafe outside of the begin and complete phases.
      // We might be in the commit phase when an error is captured.
      // The risk is that the return path from this Fiber may not be accurate.
      // That risk is acceptable given the benefit of providing users more context.
      var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);
      var _componentName = getComponentName(failedWork);

      // Add to the collection of captured errors. This is stored as a global
      // map of errors and their component stack location keyed by the boundaries
      // that capture them. We mostly use this Map as a Set; it's a Map only to
      // avoid adding a field to Fiber to store the error.
      if (capturedErrors === null) {
        capturedErrors = new Map();
      }

      var capturedError = {
        componentName: _componentName,
        componentStack: _componentStack,
        error: error,
        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
        errorBoundaryFound: errorBoundaryFound,
        errorBoundaryName: errorBoundaryName,
        willRetry: willRetry
      };

      capturedErrors.set(boundary, capturedError);

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // Prevent cycle if logCapturedError() throws.
        // A cycle may still occur if logCapturedError renders a component that throws.
        var suppressLogging = e && e.suppressReactErrorLogging;
        if (!suppressLogging) {
          console.error(e);
        }
      }

      // If we're in the commit phase, defer scheduling an update on the
      // boundary until after the commit is complete
      if (isCommitting) {
        if (commitPhaseBoundaries === null) {
          commitPhaseBoundaries = new Set();
        }
        commitPhaseBoundaries.add(boundary);
      } else {
        // Otherwise, schedule an update now.
        // TODO: Is this actually necessary during the render phase? Is it
        // possible to unwind and continue rendering at the same priority,
        // without corrupting internal state?
        scheduleErrorRecovery(boundary);
      }
      return boundary;
    } else if (firstUncaughtError === null) {
      // If no boundary is found, we'll need to throw the error
      firstUncaughtError = error;
    }
    return null;
  }

  function hasCapturedError(fiber) {
    // TODO: capturedErrors should store the boundary instance, to avoid needing
    // to check the alternate.
    return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
  }

  function isFailedBoundary(fiber) {
    // TODO: failedBoundaries should store the boundary instance, to avoid
    // needing to check the alternate.
    return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
  }

  function commitErrorHandling(effectfulFiber) {
    var capturedError = void 0;
    if (capturedErrors !== null) {
      capturedError = capturedErrors.get(effectfulFiber);
      capturedErrors['delete'](effectfulFiber);
      if (capturedError == null) {
        if (effectfulFiber.alternate !== null) {
          effectfulFiber = effectfulFiber.alternate;
          capturedError = capturedErrors.get(effectfulFiber);
          capturedErrors['delete'](effectfulFiber);
        }
      }
    }

    !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    switch (effectfulFiber.tag) {
      case ClassComponent:
        var instance = effectfulFiber.stateNode;

        var info = {
          componentStack: capturedError.componentStack
        };

        // Allow the boundary to handle the error, usually by scheduling
        // an update to itself
        instance.componentDidCatch(capturedError.error, info);
        return;
      case HostRoot:
        if (firstUncaughtError === null) {
          firstUncaughtError = capturedError.error;
        }
        return;
      default:
        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function unwindContexts(from, to) {
    var node = from;
    while (node !== null) {
      switch (node.tag) {
        case ClassComponent:
          popContextProvider(node);
          break;
        case HostComponent:
          popHostContext(node);
          break;
        case HostRoot:
          popHostContainer(node);
          break;
        case HostPortal:
          popHostContainer(node);
          break;
      }
      if (node === to || node.alternate === to) {
        stopFailedWorkTimer(node);
        break;
      } else {
        stopWorkTimer(node);
      }
      node = node['return'];
    }
  }

  function computeAsyncExpiration() {
    // Given the current clock time, returns an expiration time. We use rounding
    // to batch like updates together.
    // Should complete within ~1000ms. 1200ms max.
    var currentTime = recalculateCurrentTime();
    var expirationMs = 1000;
    var bucketSizeMs = 200;
    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
  }

  function computeExpirationForFiber(fiber) {
    var expirationTime = void 0;
    if (expirationContext !== NoWork) {
      // An explicit expiration context was set;
      expirationTime = expirationContext;
    } else if (isWorking) {
      if (isCommitting) {
        // Updates that occur during the commit phase should have sync priority
        // by default.
        expirationTime = Sync;
      } else {
        // Updates during the render phase should expire at the same time as
        // the work that is being rendered.
        expirationTime = nextRenderExpirationTime;
      }
    } else {
      // No explicit expiration context was set, and we're not currently
      // performing work. Calculate a new expiration time.
      if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
        // This is a sync update
        expirationTime = Sync;
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration();
      }
    }
    return expirationTime;
  }

  function scheduleWork(fiber, expirationTime) {
    return scheduleWorkImpl(fiber, expirationTime, false);
  }

  function checkRootNeedsClearing(root, fiber, expirationTime) {
    if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
      // Restart the root from the top.
      if (nextUnitOfWork !== null) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
      }
      nextRoot = null;
      nextUnitOfWork = null;
      nextRenderExpirationTime = NoWork;
    }
  }

  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
    recordScheduleUpdate();

    {
      if (!isErrorRecovery && fiber.tag === ClassComponent) {
        var instance = fiber.stateNode;
        warnAboutInvalidUpdates(instance);
      }
    }

    var node = fiber;
    while (node !== null) {
      // Walk the parent path to the root and update each node's
      // expiration time.
      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
        node.expirationTime = expirationTime;
      }
      if (node.alternate !== null) {
        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
          node.alternate.expirationTime = expirationTime;
        }
      }
      if (node['return'] === null) {
        if (node.tag === HostRoot) {
          var root = node.stateNode;

          checkRootNeedsClearing(root, fiber, expirationTime);
          requestWork(root, expirationTime);
          checkRootNeedsClearing(root, fiber, expirationTime);
        } else {
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              warnAboutUpdateOnUnmounted(fiber);
            }
          }
          return;
        }
      }
      node = node['return'];
    }
  }

  function scheduleErrorRecovery(fiber) {
    scheduleWorkImpl(fiber, Sync, true);
  }

  function recalculateCurrentTime() {
    // Subtract initial time so it fits inside 32bits
    var ms = now() - startTime;
    mostRecentCurrentTime = msToExpirationTime(ms);
    return mostRecentCurrentTime;
  }

  function deferredUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = computeAsyncExpiration();
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  function syncUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = Sync;
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  // TODO: Everything below this is written as if it has been lifted to the
  // renderers. I'll do this in a follow-up.

  // Linked-list of roots
  var firstScheduledRoot = null;
  var lastScheduledRoot = null;

  var callbackExpirationTime = NoWork;
  var callbackID = -1;
  var isRendering = false;
  var nextFlushedRoot = null;
  var nextFlushedExpirationTime = NoWork;
  var deadlineDidExpire = false;
  var hasUnhandledError = false;
  var unhandledError = null;
  var deadline = null;

  var isBatchingUpdates = false;
  var isUnbatchingUpdates = false;

  // Use these to prevent an infinite loop of nested updates
  var NESTED_UPDATE_LIMIT = 1000;
  var nestedUpdateCount = 0;

  var timeHeuristicForUnitOfWork = 1;

  function scheduleCallbackWithExpiration(expirationTime) {
    if (callbackExpirationTime !== NoWork) {
      // A callback is already scheduled. Check its expiration time (timeout).
      if (expirationTime > callbackExpirationTime) {
        // Existing callback has sufficient timeout. Exit.
        return;
      } else {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        cancelDeferredCallback(callbackID);
      }
      // The request callback timer is already running. Don't start a new one.
    } else {
      startRequestCallbackTimer();
    }

    // Compute a timeout for the given expiration time.
    var currentMs = now() - startTime;
    var expirationMs = expirationTimeToMs(expirationTime);
    var timeout = expirationMs - currentMs;

    callbackExpirationTime = expirationTime;
    callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
  }

  // requestWork is called by the scheduler whenever a root receives an update.
  // It's up to the renderer to call renderRoot at some point in the future.
  function requestWork(root, expirationTime) {
    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
      invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
    }

    // Add the root to the schedule.
    // Check if this root is already part of the schedule.
    if (root.nextScheduledRoot === null) {
      // This root is not already scheduled. Add it.
      root.remainingExpirationTime = expirationTime;
      if (lastScheduledRoot === null) {
        firstScheduledRoot = lastScheduledRoot = root;
        root.nextScheduledRoot = root;
      } else {
        lastScheduledRoot.nextScheduledRoot = root;
        lastScheduledRoot = root;
        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
      }
    } else {
      // This root is already scheduled, but its priority may have increased.
      var remainingExpirationTime = root.remainingExpirationTime;
      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
        // Update the priority.
        root.remainingExpirationTime = expirationTime;
      }
    }

    if (isRendering) {
      // Prevent reentrancy. Remaining work will be scheduled at the end of
      // the currently rendering batch.
      return;
    }

    if (isBatchingUpdates) {
      // Flush work at the end of the batch.
      if (isUnbatchingUpdates) {
        // ...unless we're inside unbatchedUpdates, in which case we should
        // flush it now.
        nextFlushedRoot = root;
        nextFlushedExpirationTime = Sync;
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
      }
      return;
    }

    // TODO: Get rid of Sync and use current time?
    if (expirationTime === Sync) {
      performWork(Sync, null);
    } else {
      scheduleCallbackWithExpiration(expirationTime);
    }
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = NoWork;
    var highestPriorityRoot = null;

    if (lastScheduledRoot !== null) {
      var previousScheduledRoot = lastScheduledRoot;
      var root = firstScheduledRoot;
      while (root !== null) {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (remainingExpirationTime === NoWork) {
          // This root no longer has work. Remove it from the scheduler.

          // TODO: This check is redudant, but Flow is confused by the branch
          // below where we set lastScheduledRoot to null, even though we break
          // from the loop right after.
          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          if (root === root.nextScheduledRoot) {
            // This is the only root in the list.
            root.nextScheduledRoot = null;
            firstScheduledRoot = lastScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) {
            // This is the first root in the list.
            var next = root.nextScheduledRoot;
            firstScheduledRoot = next;
            lastScheduledRoot.nextScheduledRoot = next;
            root.nextScheduledRoot = null;
          } else if (root === lastScheduledRoot) {
            // This is the last root in the list.
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else {
            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
            root.nextScheduledRoot = null;
          }
          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
            // Update the priority, if it's higher
            highestPriorityWork = remainingExpirationTime;
            highestPriorityRoot = root;
          }
          if (root === lastScheduledRoot) {
            break;
          }
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
    }

    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    var previousFlushedRoot = nextFlushedRoot;
    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
      nestedUpdateCount++;
    } else {
      // Reset whenever we switch roots.
      nestedUpdateCount = 0;
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  function performAsyncWork(dl) {
    performWork(NoWork, dl);
  }

  function performWork(minExpirationTime, dl) {
    deadline = dl;

    // Keep working on roots until there's no more work, or until the we reach
    // the deadline.
    findHighestPriorityRoot();

    if (enableUserTimingAPI && deadline !== null) {
      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
      stopRequestCallbackTimer(didExpire);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
      // Find the next highest priority work.
      findHighestPriorityRoot();
    }

    // We're done flushing work. Either we ran out of time in this callback,
    // or there's no more work left with sufficient priority.

    // If we're inside a callback, set this to false since we just completed it.
    if (deadline !== null) {
      callbackExpirationTime = NoWork;
      callbackID = -1;
    }
    // If there's work left over, schedule a new callback.
    if (nextFlushedExpirationTime !== NoWork) {
      scheduleCallbackWithExpiration(nextFlushedExpirationTime);
    }

    // Clean-up.
    deadline = null;
    deadlineDidExpire = false;
    nestedUpdateCount = 0;

    if (hasUnhandledError) {
      var _error4 = unhandledError;
      unhandledError = null;
      hasUnhandledError = false;
      throw _error4;
    }
  }

  function performWorkOnRoot(root, expirationTime) {
    !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    isRendering = true;

    // Check if this is async work or sync/expired work.
    // TODO: Pass current time as argument to renderRoot, commitRoot
    if (expirationTime <= recalculateCurrentTime()) {
      // Flush sync work.
      var finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(finishedWork);
      } else {
        root.finishedWork = null;
        finishedWork = renderRoot(root, expirationTime);
        if (finishedWork !== null) {
          // We've completed the root. Commit it.
          root.remainingExpirationTime = commitRoot(finishedWork);
        }
      }
    } else {
      // Flush async work.
      var _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(_finishedWork);
      } else {
        root.finishedWork = null;
        _finishedWork = renderRoot(root, expirationTime);
        if (_finishedWork !== null) {
          // We've completed the root. Check the deadline one more time
          // before committing.
          if (!shouldYield()) {
            // Still time left. Commit the root.
            root.remainingExpirationTime = commitRoot(_finishedWork);
          } else {
            // There's no time left. Mark this root as complete. We'll come
            // back and commit it later.
            root.finishedWork = _finishedWork;
          }
        }
      }
    }

    isRendering = false;
  }

  // When working on async work, the reconciler asks the renderer if it should
  // yield execution. For DOM, we implement this with requestIdleCallback.
  function shouldYield() {
    if (deadline === null) {
      return false;
    }
    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
      // Disregard deadline.didTimeout. Only expired work should be flushed
      // during a timeout. This path is only hit for non-expired work.
      return false;
    }
    deadlineDidExpire = true;
    return true;
  }

  // TODO: Not happy about this hook. Conceptually, renderRoot should return a
  // tuple of (isReadyForCommit, didError, error)
  function onUncaughtError(error) {
    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    // Unschedule this root so we don't work on it again until there's
    // another update.
    nextFlushedRoot.remainingExpirationTime = NoWork;
    if (!hasUnhandledError) {
      hasUnhandledError = true;
      unhandledError = error;
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function batchedUpdates(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performWork(Sync, null);
      }
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function unbatchedUpdates(fn) {
    if (isBatchingUpdates && !isUnbatchingUpdates) {
      isUnbatchingUpdates = true;
      try {
        return fn();
      } finally {
        isUnbatchingUpdates = false;
      }
    }
    return fn();
  }

  // TODO: Batching should be implemented at the renderer level, not within
  // the reconciler.
  function flushSync(fn) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return syncUpdates(fn);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      performWork(Sync, null);
    }
  }

  return {
    computeAsyncExpiration: computeAsyncExpiration,
    computeExpirationForFiber: computeExpirationForFiber,
    scheduleWork: scheduleWork,
    batchedUpdates: batchedUpdates,
    unbatchedUpdates: unbatchedUpdates,
    flushSync: flushSync,
    deferredUpdates: deferredUpdates
  };
};

{
  var didWarnAboutNestedUpdates = false;
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);
  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
}

var ReactFiberReconciler$1 = function (config) {
  var getPublicInstance = config.getPublicInstance;

  var _ReactFiberScheduler = ReactFiberScheduler(config),
      computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
      scheduleWork = _ReactFiberScheduler.scheduleWork,
      batchedUpdates = _ReactFiberScheduler.batchedUpdates,
      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
      flushSync = _ReactFiberScheduler.flushSync,
      deferredUpdates = _ReactFiberScheduler.deferredUpdates;

  function scheduleTopLevelUpdate(current, element, callback) {
    {
      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;
        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
      }
    }

    callback = callback === undefined ? null : callback;
    {
      warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
    }

    var expirationTime = void 0;
    // Check if the top-level element is an async wrapper component. If so,
    // treat updates to the root as async. This is a bit weird but lets us
    // avoid a separate `renderAsync` API.
    if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
      expirationTime = computeAsyncExpiration();
    } else {
      expirationTime = computeExpirationForFiber(current);
    }

    var update = {
      expirationTime: expirationTime,
      partialState: { element: element },
      callback: callback,
      isReplace: false,
      isForced: false,
      nextCallback: null,
      next: null
    };
    insertUpdateIntoFiber(current, update);
    scheduleWork(current, expirationTime);
  }

  function findHostInstance(fiber) {
    var hostFiber = findCurrentHostFiber(fiber);
    if (hostFiber === null) {
      return null;
    }
    return hostFiber.stateNode;
  }

  return {
    createContainer: function (containerInfo, hydrate) {
      return createFiberRoot(containerInfo, hydrate);
    },
    updateContainer: function (element, container, parentComponent, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current = container.current;

      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }

      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      scheduleTopLevelUpdate(current, element, callback);
    },


    batchedUpdates: batchedUpdates,

    unbatchedUpdates: unbatchedUpdates,

    deferredUpdates: deferredUpdates,

    flushSync: flushSync,

    getPublicRootInstance: function (container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    },


    findHostInstance: findHostInstance,

    findHostInstanceWithNoPortals: function (fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    injectIntoDevTools: function (devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

      return injectInternals(_assign({}, devToolsConfig, {
        findHostInstanceByFiber: function (fiber) {
          return findHostInstance(fiber);
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }
          return findFiberByHostInstance(instance);
        }
      }));
    }
  };
};

var ReactFiberReconciler$2 = Object.freeze({
	default: ReactFiberReconciler$1
});

var ReactFiberReconciler$3 = ( ReactFiberReconciler$2 && ReactFiberReconciler$1 ) || ReactFiberReconciler$2;

// TODO: bundle Flow types with the package.



// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.2.0';

// a requestAnimationFrame, storing the time for the start of the frame, then
// scheduling a postMessage which gets scheduled after paint. Within the
// postMessage handler do as much work as possible until time + frame rate.
// By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

{
  if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
    warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var now = void 0;
if (hasNativePerformanceNow) {
  now = function () {
    return performance.now();
  };
} else {
  now = function () {
    return Date.now();
  };
}

// TODO: There's no way to cancel, because Fiber doesn't atm.
var rIC = void 0;
var cIC = void 0;

if (!ExecutionEnvironment.canUseDOM) {
  rIC = function (frameCallback) {
    return setTimeout(function () {
      frameCallback({
        timeRemaining: function () {
          return Infinity;
        }
      });
    });
  };
  cIC = function (timeoutID) {
    clearTimeout(timeoutID);
  };
} else if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {
  // Polyfill requestIdleCallback and cancelIdleCallback

  var scheduledRICCallback = null;
  var isIdleScheduled = false;
  var timeoutTime = -1;

  var isAnimationFrameScheduled = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  var frameDeadlineObject;
  if (hasNativePerformanceNow) {
    frameDeadlineObject = {
      didTimeout: false,
      timeRemaining: function () {
        // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.
        var remaining = frameDeadline - performance.now();
        return remaining > 0 ? remaining : 0;
      }
    };
  } else {
    frameDeadlineObject = {
      didTimeout: false,
      timeRemaining: function () {
        // Fallback to Date.now()
        var remaining = frameDeadline - Date.now();
        return remaining > 0 ? remaining : 0;
      }
    };
  }

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }

    isIdleScheduled = false;

    var currentTime = now();
    if (frameDeadline - currentTime <= 0) {
      // There's no time left in this idle period. Check if the callback has
      // a timeout and whether it's been exceeded.
      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
        // Exceeded the timeout. Invoke the callback even though there's no
        // time left.
        frameDeadlineObject.didTimeout = true;
      } else {
        // No timeout.
        if (!isAnimationFrameScheduled) {
          // Schedule another animation callback so we retry later.
          isAnimationFrameScheduled = true;
          requestAnimationFrame(animationTick);
        }
        // Exit without invoking the callback.
        return;
      }
    } else {
      // There's still time left in this idle period.
      frameDeadlineObject.didTimeout = false;
    }

    timeoutTime = -1;
    var callback = scheduledRICCallback;
    scheduledRICCallback = null;
    if (callback !== null) {
      callback(frameDeadlineObject);
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  rIC = function (callback, options) {
    // This assumes that we only schedule one callback at a time because that's
    // how Fiber uses it.
    scheduledRICCallback = callback;
    if (options != null && typeof options.timeout === 'number') {
      timeoutTime = now() + options.timeout;
    }
    if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger rIC as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      requestAnimationFrame(animationTick);
    }
    return 0;
  };

  cIC = function () {
    scheduledRICCallback = null;
    isIdleScheduled = false;
    timeoutTime = -1;
  };
} else {
  rIC = window.requestIdleCallback;
  cIC = window.cancelIdleCallback;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

// isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

// shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */





/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected) {
  {
    var propertyInfo = getPropertyInfo(name);
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod || propertyInfo.mustUseProperty) {
        return node[propertyInfo.propertyName];
      } else {
        var attributeName = propertyInfo.attributeName;

        var stringValue = null;

        if (propertyInfo.hasOverloadedBooleanValue) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === '') {
              return true;
            }
            if (shouldIgnoreValue(propertyInfo, expected)) {
              return value;
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldIgnoreValue(propertyInfo, expected)) {
            // We had an attribute but shouldn't have had one, so read it
            // for the error message.
            return node.getAttribute(attributeName);
          }
          if (propertyInfo.hasBooleanValue) {
            // If this was a boolean, it doesn't matter what the value is
            // the fact that we have it is the same as the expected.
            return expected;
          }
          // Even if this property uses a namespace we use getAttribute
          // because we assume its namespaced name is the same as our config.
          // To use getAttributeNS we need the local name which we don't have
          // in our config atm.
          stringValue = node.getAttribute(attributeName);
        }

        if (shouldIgnoreValue(propertyInfo, expected)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value) {
  var propertyInfo = getPropertyInfo(name);

  if (propertyInfo && shouldSetAttribute(name, value)) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, value);
    } else if (shouldIgnoreValue(propertyInfo, value)) {
      deleteValueForProperty(node, name);
      return;
    } else if (propertyInfo.mustUseProperty) {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyInfo.propertyName] = value;
    } else {
      var attributeName = propertyInfo.attributeName;
      var namespace = propertyInfo.attributeNamespace;
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      if (namespace) {
        node.setAttributeNS(namespace, attributeName, '' + value);
      } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        node.setAttribute(attributeName, '');
      } else {
        node.setAttribute(attributeName, '' + value);
      }
    }
  } else {
    setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);
    return;
  }

  {
    
  }
}

function setValueForAttribute(node, name, value) {
  if (!isAttributeNameSafe(name)) {
    return;
  }
  if (value == null) {
    node.removeAttribute(name);
  } else {
    node.setAttribute(name, '' + value);
  }

  {
    
  }
}

/**
 * Deletes an attributes from a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForAttribute(node, name) {
  node.removeAttribute(name);
}

/**
 * Deletes the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForProperty(node, name) {
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, undefined);
    } else if (propertyInfo.mustUseProperty) {
      var propName = propertyInfo.propertyName;
      if (propertyInfo.hasBooleanValue) {
        node[propName] = false;
      } else {
        node[propName] = '';
      }
    } else {
      node.removeAttribute(propertyInfo.attributeName);
    }
  } else {
    node.removeAttribute(name);
  }
}

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
    checkPropTypes(propTypes, props, 'prop', tagName, getStack);
  };
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var value = props.value;
  var checked = props.checked;

  var hostProps = _assign({
    // Make sure we set .type before any other properties (setting .value
    // before .type means .value is lost in IE11 and below)
    type: undefined,
    // Make sure we set .step before .value (setting .value before .step
    // means .value is rounded on mount, based upon step precision)
    step: undefined,
    // Make sure we set .min & .max before .value (to ensure proper order
    // in corner cases such as min or max deriving from value, e.g. Issue #7170)
    min: undefined,
    max: undefined
  }, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: value != null ? value : node._wrapperState.initialValue,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var defaultValue = props.defaultValue;
  var node = element;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: props.value != null ? props.value : defaultValue,
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = props.value;
  if (value != null) {
    if (value === 0 && node.value === '') {
      node.value = '0';
      // Note: IE9 reports a number inputs as 'text', so check props instead.
    } else if (props.type === 'number') {
      // Simulate `input.valueAsNumber`. IE9 does not support it
      var valueAsNumber = parseFloat(node.value) || 0;

      if (
      // eslint-disable-next-line
      value != valueAsNumber ||
      // eslint-disable-next-line
      value == valueAsNumber && node.value != value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else if (node.value !== '' + value) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      node.value = '' + value;
    }
  } else {
    if (props.value == null && props.defaultValue != null) {
      // In Chrome, assigning defaultValue to certain input types triggers input validation.
      // For number inputs, the display value loses trailing decimal points. For email inputs,
      // Chrome raises "The specified value <x> is not a valid email address".
      //
      // Here we check to see if the defaultValue has actually changed, avoiding these problems
      // when the user is inputting text
      //
      // https://github.com/facebook/react/issues/7253
      if (node.defaultValue !== '' + props.defaultValue) {
        node.defaultValue = '' + props.defaultValue;
      }
    }
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props) {
  var node = element;

  // Detach value from defaultValue. We won't do anything if we're working on
  // submit or reset inputs as those values & defaultValues are linked. They
  // are not resetable nodes so this operation doesn't matter and actually
  // removes browser-default values (eg "Submit Query") when no value is
  // provided.

  switch (props.type) {
    case 'submit':
    case 'reset':
      break;
    case 'color':
    case 'date':
    case 'datetime':
    case 'datetime-local':
    case 'month':
    case 'time':
    case 'week':
      // This fixes the no-show issue on iOS Safari and Android Chrome:
      // https://github.com/facebook/react/issues/7233
      node.value = '';
      node.value = node.defaultValue;
      break;
    default:
      node.value = node.value;
      break;
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }
  node.defaultChecked = !node.defaultChecked;
  node.defaultChecked = !node.defaultChecked;
  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState$1(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  // We can silently skip them because invalid DOM nesting warning
  // catches these cases in Fiber.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  // TODO (yungsters): Remove support for `selected` in <option>.
  {
    warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', props.value);
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerName$3();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = '' + propValue;
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  var value = props.value;
  node._wrapperState = {
    initialValue: value != null ? value : props.defaultValue,
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  // After the initial mount, we control selected-ness manually so don't pass
  // this value down
  node._wrapperState.initialValue = undefined;

  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: '' + node._wrapperState.initialValue
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: '' + initialValue
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = props.value;
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = '' + value;

    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null) {
      node.defaultValue = newValue;
    }
  }
  if (props.defaultValue != null) {
    node.defaultValue = props.defaultValue;
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var warnValidStyle = emptyFunction;

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var warnHyphenatedStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
  };

  var warnBadVendoredStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
  };

  var warnStyleValueWithSemicolon = function (name, value, getStack) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
  };

  var warnStyleValueIsNaN = function (name, value, getStack) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  var warnStyleValueIsInfinity = function (name, value, getStack) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  warnValidStyle = function (name, value, getStack) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, getStack);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, getStack);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, getStack);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value, getStack);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value, getStack);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles, getStack) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName], getStack);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML$1 = '__html';

function assertValidProps(tag, props, getStack) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;

function getStackAddendum() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperty(tagName, name) {
  if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  } else if (invalidProps.length > 1) {
    warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function getStackAddendum$1() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
    } else {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
    }
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  'class': 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  'default': 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  'for': 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  'in': 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  'typeof': 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

function getStackAddendum$2() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

{
  var warnedProperties$1 = {};
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  var validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    var isReserved = isReservedProp(name);

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {
      if (value) {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
      } else {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (!shouldSetAttribute(name, value)) {
      warnedProperties$1[name] = true;
      return false;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  } else if (unknownProps.length > 1) {
    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var getStack = emptyFunction.thatReturns('');

{
  getStack = getCurrentFiberStackAddendum$2;

  var warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true
  };

  var validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  var normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  var warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  var warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  var warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warning(false, 'Extra attributes from the server: %s', names);
  };

  var warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
    } else {
      warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  var normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = emptyFunction;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We blacklist it here rather than in the property list because we emit it in SSR.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (isCustomComponentTag) {
      setValueForAttribute(domElement, propKey, nextProp);
    } else if (nextProp != null) {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      setValueForProperty(domElement, propKey, nextProp);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else if (isCustomComponentTag) {
      if (propValue != null) {
        setValueForAttribute(domElement, propKey, propValue);
      } else {
        deleteValueForAttribute(domElement, propKey);
      }
    } else if (propValue != null) {
      setValueForProperty(domElement, propKey, propValue);
    } else {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      deleteValueForProperty(domElement, propKey);
    }
  }
}

function createElement$1(type, props, rootContainerElement, parentNamespace) {
  // We create tags in the namespace of their parent container, except HTML
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      var isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      warning(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode$1(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props, getStack);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps;
  var nextProps;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps, getStack);

  var propKey;
  var styleName;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  {
    var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    var isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps, getStack);

  {
    var extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var i = 0; i < attributes.length; i++) {
      var name = attributes[i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else {
      // Validate that the properties correspond to their expected values.
      var serverValue;
      var propertyInfo;
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
        var serverHTML = domElement.innerHTML;
        var expectedHTML = normalizeHTML(domElement, rawHtml);
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey);
        var expectedStyle = createDangerousStringForStyles(nextProp);
        serverValue = domElement.getAttribute('style');
        if (expectedStyle !== serverValue) {
          warnForPropDifference(propKey, serverValue, expectedStyle);
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (shouldSetAttribute(propKey, nextProp)) {
        if (propertyInfo = getPropertyInfo(propKey)) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames['delete'](propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey.toLowerCase());
          } else {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText$1(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText$1(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement$1(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText$1(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState$1(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

var ReactDOMFiberComponent = Object.freeze({
	createElement: createElement$1,
	createTextNode: createTextNode$1,
	setInitialProperties: setInitialProperties$1,
	diffProperties: diffProperties$1,
	updateProperties: updateProperties$1,
	diffHydratedProperties: diffHydratedProperties$1,
	diffHydratedText: diffHydratedText$1,
	warnForUnmatchedText: warnForUnmatchedText$1,
	warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
	warnForDeletedHydratableText: warnForDeletedHydratableText$1,
	warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
	warnForInsertedHydratedText: warnForInsertedHydratedText$1,
	restoreControlledState: restoreControlledState
});

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var validateDOMNesting = emptyFunction;

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackAddendum$6();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };

  // TODO: turn this into a named export
  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

var validateDOMNesting$1 = validateDOMNesting;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var createElement = createElement$1;
var createTextNode = createTextNode$1;
var setInitialProperties = setInitialProperties$1;
var diffProperties = diffProperties$1;
var updateProperties = updateProperties$1;
var diffHydratedProperties = diffHydratedProperties$1;
var diffHydratedText = diffHydratedText$1;
var warnForUnmatchedText = warnForUnmatchedText$1;
var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
var precacheFiberNode = precacheFiberNode$1;
var updateFiberProps = updateFiberProps$1;


{
  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);

var eventsEnabled = null;
var selectionInformation = null;

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

var DOMRenderer = reactReconciler({
  getRootHostContext: function (rootContainerInstance) {
    var type = void 0;
    var namespace = void 0;
    var nodeType = rootContainerInstance.nodeType;
    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }
      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }
    {
      var validatedTag = type.toLowerCase();
      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
      return { namespace: namespace, ancestorInfo: _ancestorInfo };
    }
    return namespace;
  },
  getChildHostContext: function (parentHostContext, type) {
    {
      var parentHostContextDev = parentHostContext;
      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
    }
    var parentNamespace = parentHostContext;
    return getChildNamespace(parentNamespace, type);
  },
  getPublicInstance: function (instance) {
    return instance;
  },
  prepareForCommit: function () {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    setEnabled(false);
  },
  resetAfterCommit: function () {
    restoreSelection(selectionInformation);
    selectionInformation = null;
    setEnabled(eventsEnabled);
    eventsEnabled = null;
  },
  createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace = void 0;
    {
      // TODO: take namespace into account when validating.
      var hostContextDev = hostContext;
      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
      parentNamespace = hostContextDev.namespace;
    }
    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode(internalInstanceHandle, domElement);
    updateFiberProps(domElement, props);
    return domElement;
  },
  appendInitialChild: function (parentInstance, child) {
    parentInstance.appendChild(child);
  },
  finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  },
  prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;
      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
    }
    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
  },
  shouldSetTextContent: function (type, props) {
    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
  },
  shouldDeprioritizeSubtree: function (type, props) {
    return !!props.hidden;
  },
  createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
    }
    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode(internalInstanceHandle, textNode);
    return textNode;
  },


  now: now,

  mutation: {
    commitMount: function (domElement, type, newProps, internalInstanceHandle) {
      domElement.focus();
    },
    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    },
    resetTextContent: function (domElement) {
      domElement.textContent = '';
    },
    commitTextUpdate: function (textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    },
    appendChild: function (parentInstance, child) {
      parentInstance.appendChild(child);
    },
    appendChildToContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, container);
      } else {
        container.appendChild(child);
      }
    },
    insertBefore: function (parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    },
    insertInContainerBefore: function (container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    },
    removeChild: function (parentInstance, child) {
      parentInstance.removeChild(child);
    },
    removeChildFromContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
  },

  hydration: {
    canHydrateInstance: function (instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    },
    canHydrateTextInstance: function (instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    },
    getNextHydratableSibling: function (instance) {
      var node = instance.nextSibling;
      // Skip non-hydratable nodes.
      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
        node = node.nextSibling;
      }
      return node;
    },
    getFirstHydratableChild: function (parentInstance) {
      var next = parentInstance.firstChild;
      // Skip non-hydratable nodes.
      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
        next = next.nextSibling;
      }
      return next;
    },
    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    },
    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    },
    didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotHydrateContainerInstance: function (parentContainer, instance) {
      {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    },
    didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    },
    didNotFindHydratableContainerInstance: function (parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    },
    didNotFindHydratableContainerTextInstance: function (parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    },
    didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    },
    didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }
  },

  scheduleDeferredCallback: rIC,
  cancelDeferredCallback: cIC,

  useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM
});

injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);

var warnedAboutHydrateAPI = false;

function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

  {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
      if (hostInstance) {
        warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');

    warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
  }

  var root = container._reactRootContainer;
  if (!root) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
    // First clear any existing content.
    if (!shouldHydrate) {
      var warned = false;
      var rootSibling = void 0;
      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;
            warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }
        container.removeChild(rootSibling);
      }
    }
    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;
        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }
    var newRoot = DOMRenderer.createContainer(container, shouldHydrate);
    root = container._reactRootContainer = newRoot;
    // Initial mount should not be batched.
    DOMRenderer.unbatchedUpdates(function () {
      DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
    });
  } else {
    DOMRenderer.updateContainer(children, root, parentComponent, callback);
  }
  return DOMRenderer.getPublicRootInstance(root);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

function ReactRoot(container, hydrate) {
  var root = DOMRenderer.createContainer(container, hydrate);
  this._reactRootContainer = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(children, root, null, callback);
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(null, root, null, callback);
};

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        warning(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    var inst = get(componentOrElement);
    if (inst) {
      return DOMRenderer.findHostInstance(inst);
    }

    if (typeof componentOrElement.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
    }
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return renderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return renderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }

      // Unmount should not be batched.
      DOMRenderer.unbatchedUpdates(function () {
        renderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: createPortal,

  unstable_batchedUpdates: batchedUpdates,

  unstable_deferredUpdates: DOMRenderer.deferredUpdates,

  flushSync: DOMRenderer.flushSync,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // For TapEventPlugin which is popular in open source
    EventPluginHub: EventPluginHub,
    // Used by test-utils
    EventPluginRegistry: EventPluginRegistry,
    EventPropagators: EventPropagators,
    ReactControlledComponent: ReactControlledComponent,
    ReactDOMComponentTree: ReactDOMComponentTree,
    ReactDOMEventListener: ReactDOMEventListener
  }
};

if (enableCreateRoot) {
  ReactDOM.createRoot = function createRoot(container, options) {
    var hydrate = options != null && options.hydrate === true;
    return new ReactRoot(container, hydrate);
  };
}

var foundDevTools = DOMRenderer.injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;

module.exports = reactDom;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(57);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var camelize = __webpack_require__(59);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = {"words":["aah","aahing","aahs","abaci","abacus","abase","abased","abaser","abases","abash","abate","abated","abater","abates","abatis","abator","abbacy","abbe","abbes","abbess","abbey","abbeys","abbot","abbots","abbott","abbr","abbrev","abc","abduct","abeam","abed","abet","abets","abhor","abhors","abide","abided","abider","abides","abject","abjure","ablate","ablaze","able","abler","ables","ablest","abloom","ablush","ably","abner","abo","aboard","abode","aboded","abodes","aboil","aboral","abort","aborts","abound","about","above","aboves","abrade","abroad","abrupt","abs","abscam","absent","absorb","absurd","abt","abuse","abused","abuser","abuses","abut","abuts","abyes","abysm","abysms","abyss","accede","accent","accept","access","accord","accost","accrue","acct","accts","accuse","ace","aced","acerb","aces","acetic","ache","ached","achene","aches","achier","aching","achoo","achy","acid","acidly","acids","acidy","acing","aclu","acme","acmes","acne","acned","acnes","acoin","acorn","acorns","acquit","acre","acred","acres","acrid","across","act","acted","actin","acting","action","active","actor","actors","acts","actual","acuity","acumen","acute","acuter","acutes","adage","adages","adagio","adam","adams","adapt","adapts","add","added","addend","adder","adders","addict","adding","addle","addled","addles","adds","adduce","adduct","adept","adepts","adeste","adhere","adieu","adieus","adieux","adios","adit","adits","adj","adjoin","adjure","adjust","adman","admen","admin","admire","admit","admits","admix","admixt","ado","adobe","adobes","adolf","adolph","adonis","adopt","adopts","adore","adored","adorer","adores","adorn","adorns","ados","adrift","adroit","ads","adsorb","adult","adults","adv","advent","adverb","advert","advice","advise","advt","adyta","adytum","adz","aegis","aeon","aeonic","aeons","aerate","aerial","aerie","aeried","aerier","aeries","aerify","aerily","aerobe","aery","aesop","aether","afar","afars","afb","afeard","affair","affect","affirm","afflux","afford","affray","afghan","afield","afire","aflame","afloat","afore","afraid","afreet","afresh","africa","afrit","afrits","afro","afros","aft","after","afters","again","agama","agamas","agamic","agapae","agape","agar","agars","agate","agates","agave","agaves","age","aged","agedly","ageing","ageism","ageist","agency","agenda","agent","agents","agers","ages","aggie","aggies","agha","aghas","aghast","agile","agin","aging","agings","agist","agists","aglare","agleam","aglee","aglet","aglets","agley","aglow","ago","agog","agonal","agone","agonic","agons","agony","agora","agorae","agoras","agouti","agouty","agree","agreed","agrees","agric","ague","agues","aha","ahchoo","ahem","ahems","ahimsa","ahold","ahorse","ahoy","ahs","aid","aide","aided","aider","aiders","aides","aidful","aiding","aidman","aidmen","aids","ail","ailed","ailing","ails","aim","aimed","aimer","aimers","aimful","aiming","aims","ainus","air","airbus","aired","airer","airest","airier","airily","airing","airman","airmen","airs","airway","airy","aisle","aisled","aisles","aitch","ajar","akenes","akimbo","akin","akron","alack","alai","alamo","alamos","alan","alans","alar","alarm","alarms","alarum","alary","alas","alate","alated","alb","alba","albany","albedo","albeit","albert","albino","albs","album","albums","alcove","alder","alders","aldrin","ale","alecs","alee","alefs","aleph","alephs","alert","alerts","ales","alexia","alfa","alfred","alga","algae","algal","algas","algid","algin","algins","algoid","alias","alibi","alibis","alice","alien","aliens","alight","align","aligns","alii","alike","aline","alined","aliner","alines","alit","aliter","alive","alkali","alkyd","alkyds","alkyl","alkyls","all","allah","allay","allays","allege","allele","allen","aller","alley","alleys","allied","allies","allium","allot","allots","allow","allows","alloy","alloys","alls","allude","allure","ally","allyls","alma","almner","almond","almost","alms","alnico","aloe","aloes","aloft","aloha","alohas","alone","along","aloof","aloud","alp","alpaca","alpha","alphas","alpine","alps","also","alt","altar","altars","alter","alters","althea","altho","alto","altos","alum","alumin","alumna","alumni","alums","alway","always","ama","amah","amahs","amain","amass","amaze","amazed","amazes","amazon","amber","ambers","ambery","amble","ambled","ambler","ambles","ambush","ameba","amebae","ameban","amebas","amebic","ameer","ameers","amen","amend","amends","amens","ament","aments","amerce","amex","amias","amice","amici","amicus","amid","amide","amides","amidic","amids","amidst","amies","amigas","amigo","amigos","amines","aminic","amino","amire","amirs","amis","amish","amiss","ammine","ammino","ammo","ammos","amnion","amoeba","amok","amoks","amole","amoles","among","amoral","amort","amount","amour","amours","amp","ampere","ample","ampler","amply","amps","ampul","ampule","ampuls","amrita","amtrac","amtrak","amu","amuck","amucks","amulet","amuse","amused","amuser","amuses","amyl","amyls","ana","anadem","anal","anally","analog","anarch","anatto","anchor","ancien","and","andean","andes","andre","andrew","ands","anear","anele","anemia","anemic","anent","anergy","anew","angary","angas","angel","angels","anger","angers","angina","angle","angled","angler","angles","anglo","anglos","angola","angora","angry","angst","angsts","angus","anile","anilin","anils","anima","animal","animas","animo","animus","anion","anions","anis","anise","anises","anisic","ankh","ankhs","ankle","ankles","anklet","ankus","ann","anna","annal","annals","annas","annat","anne","anneal","annie","anno","annoy","annoys","annual","annul","annuli","annuls","annum","anodal","anode","anodes","anodic","anoia","anoint","anole","anoles","anomia","anomic","anomie","anomy","anon","anonym","anopia","anorak","anoxic","ansi","answer","ant","ante","anted","anteed","antes","anthem","anther","anti","antic","antics","anting","antis","antler","antony","antra","antral","antre","antrum","ants","anus","anuses","anvil","anvils","any","anyhow","anyone","anyway","aorta","aortae","aortal","aortas","aortic","aouad","aouads","aoudad","apace","apache","apart","apathy","ape","aped","apeek","aper","apercu","apers","apery","apes","apex","apexes","aphid","aphids","aphis","apian","apiary","apical","apices","apiece","aping","apish","aplomb","apnea","apneal","apneas","apneic","apnoea","apodal","apogee","apollo","aport","app","appal","appall","appals","appeal","appear","appels","append","apple","apples","apply","appose","approx","apres","april","apron","aprons","apse","apses","apt","apter","aptest","aptly","aqua","aquas","arab","arabia","arabic","arable","arabs","araks","arbor","arbors","arbour","arc","arcade","arcana","arcane","arced","arch","arched","archer","arches","archly","archon","arcing","arcked","arco","arcs","arctic","arcus","ardent","ardor","ardors","ardour","are","area","areal","areas","arena","arenas","areola","areole","ares","arete","aretes","arf","argal","argals","argent","argils","argle","argled","argles","argols","argon","argons","argosy","argot","argots","argue","argued","arguer","argues","argufy","argus","argyle","argyll","arhat","arhats","aria","arias","arid","arider","aridly","ariel","aries","aright","arils","ariose","arioso","arise","arisen","arises","arith","ark","arks","arm","armada","armed","armer","armers","armful","armies","arming","armlet","armor","armors","armory","armour","armpit","arms","army","arnica","arnold","aroids","aroint","aroma","aromas","arose","around","arouse","aroynt","arrant","arras","array","arrays","arrear","arrest","arrive","arrow","arrows","arrowy","ars","arse","arses","arsis","arson","arsons","art","artery","artful","arthur","artier","artily","artist","arts","arty","arum","arums","aryan","aryans","aryls","asap","ascend","ascent","ascii","ascot","ascots","asea","ash","ashcan","ashed","ashen","ashes","ashier","ashing","ashlar","ashman","ashmen","ashore","ashram","ashy","asia","asian","asians","aside","asides","ask","askant","asked","asker","askers","askew","asking","asks","aslant","asleep","aslope","asp","aspca","aspect","aspen","aspens","asper","aspers","aspic","aspics","aspire","aspish","asps","ass","assail","assam","assay","assays","assent","assert","asses","assess","asset","assets","assign","assist","assize","assn","assoc","assort","asst","assume","assure","aster","astern","asters","asthma","astir","astral","astray","astute","aswarm","aswirl","aswoon","asyla","asylum","async","atavic","ataxic","ate","athena","athens","atilt","atlas","atma","atman","atmans","atmas","atoll","atolls","atom","atomic","atoms","atonal","atone","atoned","atoner","atones","atop","atopic","atria","atrial","atrip","atrium","attach","attain","attar","attars","attend","attest","attic","attics","attila","attire","attn","attrib","attune","atty","atwain","atween","atypic","aubade","auburn","aud","audad","audads","audio","audios","audit","audits","auf","augend","auger","augers","aught","aughts","augur","augurs","augury","august","auk","auks","auld","aulder","aunt","auntie","aunts","aunty","aura","aurae","aural","auras","aurate","aureus","auric","aurist","aurous","aurum","aurums","aussie","austin","author","autism","auto","autoed","autos","autre","autumn","aux","auxin","auxins","avail","avails","avast","avaunt","avdp","ave","avenge","avenue","aver","avers","averse","avert","averts","aves","avg","avian","avians","aviary","aviate","avid","avidly","avion","avions","avis","aviso","avocet","avoid","avoids","avouch","avow","avowal","avowed","avower","awacs","await","awaits","awake","awaked","awaken","awakes","award","awards","aware","away","awe","aweary","awed","aweigh","aweing","awes","awful","awhile","awhirl","awing","awl","awless","awls","awn","awned","awning","awns","awoke","awoken","awol","awols","awry","axe","axed","axel","axels","axeman","axemen","axes","axial","axil","axils","axing","axiom","axioms","axis","axises","axle","axles","axlike","axman","axmen","axon","axonal","axone","axones","axonic","axons","axseed","ayah","ayahs","aye","ayes","azide","azido","azine","azoic","azole","azores","azote","azoth","aztec","aztecs","azure","azures","baa","baaed","baaing","baal","baals","baas","baba","babas","babble","babe","babel","babels","babes","babied","babies","babka","babkas","baboo","baboon","baboos","babu","babul","babuls","babus","baby","bach","back","backed","backer","backs","backup","bacon","bacons","bad","baddie","baddy","bade","badge","badged","badger","badges","badly","badman","badmen","bads","baffle","bag","bagel","bagels","bagful","bagged","baggie","baggy","bagman","bagmen","bagnio","bags","baguet","bagwig","bah","baht","bahts","bail","bailed","bailee","bailer","bailey","bailie","bailor","bails","bairn","bairns","bait","baited","baiter","baits","baize","baizes","bake","baked","baker","bakers","bakery","bakes","baking","balboa","bald","balded","balder","baldly","balds","bale","baled","baleen","baler","balers","bales","bali","baling","balk","balkan","balked","balker","balks","balky","ball","ballad","balled","baller","ballet","ballo","ballot","balls","bally","balm","balms","balmy","balsa","balsam","balsas","baltic","bamboo","ban","banal","banana","banco","band","banded","bander","bandit","bands","bandy","bane","baned","banes","bang","banged","banger","bangle","bangs","banish","banjo","banjos","bank","banked","banker","banks","banned","banner","bans","bantam","banter","bantu","bantus","banyan","banzai","bar","barb","barbed","barbel","barber","barbs","bard","barded","bardes","bardic","bards","bare","bared","barely","barer","bares","barest","barf","barfed","barfly","barge","barged","bargee","barges","barhop","baric","baring","barite","barium","bark","barked","barker","barks","barky","barley","barlow","barman","barmen","barmie","barmy","barn","barns","barny","baron","barons","barony","barque","barre","barred","barrel","barren","barrio","barrow","bars","barter","baryon","bas","basal","basalt","base","based","basely","baser","bases","basest","bash","bashed","basher","bashes","basic","basics","basify","basil","basils","basin","basing","basins","basis","bask","basked","basket","basque","bass","basses","basset","bassi","bassly","basso","bassos","bassy","bast","baste","basted","baster","bastes","basts","bat","batboy","bate","bateau","bated","bates","bath","bathe","bathed","bather","bathes","bathos","baths","batik","batiks","bating","batman","batmen","baton","batons","bats","batted","batten","batter","battle","batts","batty","bauble","baud","bauds","baulk","baulks","baulky","bawd","bawdry","bawdy","bawl","bawled","bawler","bawls","bay","bayed","baying","bayou","bayous","bays","bazar","bazars","bbl","bdrm","beach","beachy","beacon","bead","beaded","beadle","beads","beady","beagle","beak","beaked","beaker","beaks","beaky","beam","beamed","beams","beamy","bean","beaned","beanie","beano","beans","bear","beard","beards","bearer","bears","beast","beasts","beat","beaten","beater","beats","beau","beaus","beaut","beauts","beauty","beaver","bebop","bebops","becalm","became","beck","becked","beckon","become","bed","bedamn","bedaub","bedbug","bedder","bedeck","bedew","bedews","bedim","bedims","bedlam","bedpan","bedrid","bedrug","beds","bedumb","bee","beech","beechy","beef","beefed","beefy","been","beep","beeped","beeper","beeps","beer","beers","beery","bees","beet","beetle","beets","beeves","befall","befell","befit","befits","befog","befogs","befool","before","befoul","beg","began","begat","beget","begets","beggar","begged","begin","begins","begird","begirt","begone","begot","begs","begum","begums","begun","behalf","behave","behead","beheld","behest","behind","behold","behoof","behove","beige","beiges","beigy","being","beings","beirut","bel","belay","belays","belch","beldam","belfry","belie","belied","belief","belier","belies","belike","bell","belle","belled","belles","belli","bello","bellow","bells","bellum","belly","belong","below","belows","belt","belted","belts","beluga","bema","bemas","bemata","bemire","bemoan","bemuse","ben","bench","bend","bended","bendee","bender","bends","bendy","bene","bengal","benign","benin","benny","bens","bent","bents","benumb","benzin","benzol","benzyl","berate","berber","bereft","beret","berets","berg","bergs","bering","berlin","berm","berms","berry","berth","bertha","berths","beryl","beryls","beset","besets","beside","besom","besoms","besot","besots","bess","best","bested","bestir","bestow","bests","bet","beta","betake","betas","bete","betel","betels","betes","bethel","beths","betide","betime","betony","betook","betray","bets","betta","bettas","betted","better","bettor","bevel","bevels","bevies","bewail","beware","bewig","bewigs","bey","beyond","beys","bezel","bezels","bezils","bezoar","bhakta","bhakti","bhang","bhangs","bhutan","bialy","bialys","bias","biased","biases","biaxal","bib","bibbed","bibber","bible","bibles","bibs","bicarb","biceps","bicker","bicorn","bid","bidden","bidder","bide","bided","bider","biders","bides","bidet","bidets","biding","bids","biens","bier","biers","biff","biffed","biflex","bifold","biform","big","bigamy","bigeye","bigger","bight","bights","bigly","bigot","bigots","bijou","bijous","bijoux","bike","biked","biker","bikers","bikes","biking","bilbo","bilbos","bile","biles","bilge","bilged","bilges","bilgy","bilk","bilked","bilker","bilks","bill","billed","biller","billet","billie","billow","bills","billy","bimah","bimahs","bin","binal","binary","bind","binder","bindle","binds","bines","binge","binges","bingo","bingos","binned","bins","bio","biol","biome","biomes","bionic","biont","biopsy","bios","biota","biotas","biotic","biotin","biped","bipeds","bipod","bipods","bird","birded","birder","birdie","birds","bireme","birth","births","bisect","bishop","bison","bisons","bisque","bistro","bit","bitch","bitchy","bite","biter","biters","bites","biting","bits","bitte","bitted","bitten","bitter","bks","blab","blabby","blabs","black","blacks","blade","bladed","blades","blah","blahs","blain","blains","blame","blamed","blamer","blames","blanc","blanch","blank","blanks","blare","blared","blares","blase","blast","blasts","blasty","blat","blats","blaze","blazed","blazer","blazes","blazon","bldg","bleach","bleak","bleaks","blear","blears","bleary","bleat","bleats","bled","bleed","bleeds","bleep","bleeps","blench","blend","blends","blenny","bless","blest","blew","blight","blimey","blimp","blimps","blimy","blind","blinds","blini","blinis","blink","blinks","blintz","blip","blips","bliss","blithe","blitz","bloat","bloats","blob","blobs","bloc","block","blocks","blocky","blocs","bloke","blokes","blond","blonde","blonds","blood","bloods","bloody","bloom","blooms","bloomy","bloop","bloops","blot","blotch","blots","blotto","blotty","blouse","blousy","blow","blowby","blower","blows","blowsy","blowup","blowy","blowzy","blue","blued","bluely","bluer","blues","bluest","bluesy","bluet","bluey","blueys","bluff","bluffs","bluing","bluish","blunge","blunt","blunts","blur","blurb","blurbs","blurry","blurs","blurt","blurts","blush","boa","boar","board","boards","boars","boas","boast","boasts","boat","boated","boatel","boater","boats","bob","bobbed","bobber","bobbin","bobble","bobcat","bobs","boca","bocce","bocces","bocci","boccie","boche","boches","bock","bocks","bod","bode","boded","bodega","bodes","bodice","bodied","bodies","bodily","boding","bodkin","bods","body","boeing","boer","boers","boff","boffin","boffo","boffos","boffs","bog","bogart","bogey","bogeys","bogged","boggle","bogie","bogies","bogle","bogled","bogles","bogota","bogs","bogus","bogy","bohunk","boil","boiled","boiler","boils","boise","bola","bolas","bold","bolded","bolder","boldly","bole","bolero","boles","bolide","boll","bolled","bollix","bolo","bolos","bolt","bolted","bolter","bolts","bolus","bomb","bombay","bombe","bombed","bomber","bombes","bombs","bon","bona","bonbon","bond","bonded","bonder","bonds","bone","boned","boner","boners","bones","boney","bong","bonged","bongo","bongos","bongs","bonier","boning","bonita","bonito","bonnet","bonnie","bono","bonos","bons","bonsai","bonus","bony","bonze","bonzer","bonzes","boo","boob","boobs","boodle","booed","booger","boogie","booing","book","booked","booker","bookie","books","boom","boomed","boomer","booms","boomy","boon","boons","boor","boors","boos","boost","boosts","boot","booted","bootee","booth","booths","bootie","boots","booty","booze","boozed","boozer","boozes","bop","bopped","bopper","bops","borage","borate","borax","border","bore","boreal","bored","bores","boric","boring","born","borne","borneo","boron","borons","borrow","borsch","borsht","bort","borts","borty","borzoi","bosh","bosom","bosoms","bosomy","boson","bosons","bosque","boss","bossa","bossed","bosses","boston","bosun","bosuns","bot","botany","botch","botchy","botfly","both","bother","bottle","bottom","boucle","bouffe","bough","boughs","bought","boule","boules","bounce","bouncy","bound","bounds","bounty","bourg","bourgs","bourn","bourne","bourns","bourse","bouse","boused","bouses","bousy","bout","bouts","bovine","bow","bowed","bowel","bowels","bower","bowers","bowery","bowfin","bowing","bowl","bowled","bowleg","bowler","bowls","bowman","bowmen","bows","bowse","bowsed","bowses","bowyer","box","boxcar","boxer","boxers","boxes","boxful","boxier","boxing","boy","boyish","boyo","boyos","boys","bozo","bozos","bps","bra","brace","braced","bracer","braces","bract","bracts","brad","brads","brae","braes","brag","braggy","brags","brahma","brahms","braid","braids","brail","brails","brain","brains","brainy","braise","braize","brake","braked","brakes","braky","bran","branch","brand","brands","brandy","brans","bras","brash","brashy","brasil","brass","brassy","brat","brats","bratty","brave","braved","braver","braves","bravo","bravos","braw","brawl","brawls","brawn","brawns","brawny","bray","brayed","brayer","brays","braze","brazed","brazee","brazen","brazer","brazes","brazil","breach","bread","breads","break","breaks","bream","breams","breast","breath","bred","brede","breech","breed","breeds","breezy","brent","breton","breve","breves","brevet","brevi","brew","brewed","brewer","brews","brian","briar","briars","briary","bribe","bribed","bribee","briber","bribes","brick","bricks","bricky","bridal","bride","brides","bridge","bridle","brie","brief","briefs","brier","briers","briery","bries","brig","bright","brigs","brill","brim","brin","brine","brined","briner","brines","bring","brings","brink","brinks","briny","brio","briony","brios","brisk","brisks","brit","briton","bro","broach","broad","broads","brock","brocks","brogan","brogue","broil","broils","broke","broken","broker","brolly","bromo","bromos","bronc","bronco","broncs","bronze","bronzy","brooch","brood","broods","broody","brook","brooks","broom","brooms","broomy","bros","broth","broths","brothy","brow","brown","browns","browny","brows","browse","bruce","bruin","bruins","bruise","bruit","bruits","brunch","brunet","brunt","brunts","brush","brushy","brut","brutal","brute","bruted","brutes","bryan","bryony","bub","bubble","bubo","buboes","bubs","buck","bucked","bucker","bucket","buckle","buckra","bucks","bud","budded","budder","buddha","budge","budged","budger","budges","budget","budgie","buds","buenas","buenos","buff","buffed","buffer","buffet","buffo","buffos","buffs","bug","bugeye","bugged","bugger","bugle","bugled","bugler","bugles","bugs","buick","buicks","build","builds","bulb","bulbar","bulbed","bulbs","bulge","bulged","bulger","bulges","bulgur","bulk","bulked","bulks","bulky","bull","bulled","bullet","bully","bum","bumble","bumkin","bummed","bummer","bump","bumped","bumper","bumps","bums","bun","bunch","bunchy","bunco","buncos","bund","bundle","bunds","bung","bunged","bungle","bungs","bunion","bunk","bunked","bunker","bunko","bunkos","bunks","bunkum","bunn","bunns","bunny","buns","bunsen","bunt","bunted","bunter","bunts","bunyan","buoy","buoyed","buoys","bur","burble","burbly","burden","bureau","burg","burgee","burger","burgh","burghs","burgle","burgoo","burgs","burial","buried","burier","buries","burin","burins","burke","burl","burlap","burled","burler","burley","burls","burly","burma","burn","burned","burner","burnet","burnie","burns","burnt","burp","burped","burps","burr","burred","burrer","burro","burros","burrow","burrs","burry","burs","bursa","bursae","bursal","bursar","bursas","burse","burses","burst","bursts","burton","bury","bus","busboy","busby","bused","buses","bush","bushed","bushel","busher","bushes","bushy","busied","busier","busies","busily","busing","buskin","busman","busmen","buss","bussed","busses","bust","busted","buster","bustle","busts","busty","busy","but","butane","butler","buts","butt","butte","butted","butter","buttes","button","butts","butyl","butyls","buy","buyer","buyers","buying","buys","buzz","buzzed","buzzer","buzzes","bwana","bwanas","bye","byes","bygone","bylaw","bylaws","byline","bypass","bypath","byplay","byre","byres","byroad","byron","byte","byway","byways","byword","cab","cabal","cabala","cabals","cabana","cabbie","cabby","caber","cabers","cabin","cabins","cable","cabled","cables","cabman","cabmen","cabob","cabobs","cabot","cabs","cacao","cache","cached","caches","cachet","cackle","cacti","cactus","cad","caddie","caddis","caddy","cadent","cades","cadet","cadets","cadge","cadged","cadger","cadges","cadis","cadmic","cadre","cadres","cads","caecum","caesar","cafe","cafes","caftan","cage","caged","cager","cagers","cages","cagey","cagier","cagily","caging","cagy","cahoot","caiman","cains","cairn","cairns","cairo","cajole","cajun","cajuns","cake","caked","cakes","cakier","caking","caky","cal","calc","calf","calfs","calico","calif","califs","caliph","calix","calk","calked","calker","calks","call","calla","callas","called","caller","calli","callow","calls","callus","calm","calmed","calmer","calmly","calms","calor","calory","calve","calved","calves","calvin","calx","calxes","cam","camass","camber","cambia","camden","came","camel","camels","cameo","cameos","camera","camp","camped","camper","campi","campo","campos","camps","campus","campy","cams","can","canaan","canada","canal","canals","canape","canard","canary","cancan","cancel","cancer","candid","candle","candor","cane","caned","caner","caners","canes","canine","caning","canker","canna","cannas","canned","cannel","canner","cannie","cannon","cannot","canny","canoe","canoed","canoes","canon","canons","canopy","cans","canst","cant","canted","canter","canthi","cantle","canto","canton","cantor","cantos","cants","canty","canvas","canyon","cap","cape","caped","caper","capers","capes","capful","capita","capon","capone","capons","capos","capote","capped","capper","cappy","capric","caps","captor","caput","car","carafe","carat","carate","carats","carbo","carbon","carboy","card","carded","carder","cardia","cards","care","cared","careen","career","carer","carers","cares","caress","caret","carets","carful","cargo","cargos","carhop","caries","carina","caring","carl","carlo","carlot","carman","carmen","carnal","carne","carney","carnie","carny","carob","carobs","carol","carols","carom","caroms","carp","carpal","carpe","carped","carpel","carper","carpet","carpi","carps","carpus","carrel","carrom","carrot","carry","cars","carson","cart","carte","carted","cartel","carter","cartes","carton","cartop","carts","carve","carved","carven","carver","carves","casa","casaba","casas","casbah","case","cased","casein","cases","cash","cashed","casher","cashes","cashew","cashoo","casing","casino","cask","casked","casket","casks","casper","casque","cassia","cassis","cast","caste","casted","caster","castes","castle","castor","castro","casts","casual","casus","cat","catch","catchy","cater","caters","cates","catgut","cathy","cation","catkin","catnap","catnip","cats","catsup","catted","cattle","catty","caudal","caught","caul","caulk","caulks","cauls","causal","cause","caused","causer","causes","cave","caveat","caved","caver","cavern","cavers","caves","caviar","cavie","cavies","cavil","cavils","caving","cavity","cavort","cavy","caw","cawed","cawing","caws","cay","cayman","cays","cayuse","cease","ceased","ceases","ceca","cecal","cecil","cecum","cedar","cedars","cede","ceded","ceder","ceders","cedes","ceding","cees","ceil","ceiled","ceiler","ceils","celeb","celebs","celery","celiac","cell","cellar","celled","celli","cello","cellos","cells","celt","celtic","celts","cement","cense","censed","censer","censes","censor","census","cent","center","cento","centra","centre","cents","centum","cereal","cered","ceres","cereus","ceria","cerias","cerise","cerium","cermet","cert","certes","cervix","cesium","cess","cessed","cesses","cesura","cetera","ceylon","cgs","chad","chads","chafe","chafed","chafer","chafes","chaff","chaffs","chain","chains","chair","chairs","chaise","chalet","chalk","chalks","chalky","cham","champ","champs","champy","chams","chance","chancy","chang","change","chant","chants","chanty","chaos","chap","chapel","chaps","chapt","char","chard","chards","chare","chared","chares","charge","charm","charms","charon","charry","chars","chart","charts","chary","chase","chased","chaser","chases","chasm","chasms","chasmy","chaste","chat","chats","chatty","chaw","chawed","chawer","chaws","cheap","cheaps","cheat","cheats","check","checks","chedar","cheek","cheeks","cheeky","cheep","cheeps","cheer","cheers","cheery","cheese","cheesy","chef","chefs","chela","chelas","chem","chemin","cherry","chert","cherty","cherub","chess","chest","chests","chesty","cheval","chew","chewed","chewer","chews","chi","chia","chias","chic","chick","chicks","chicle","chico","chicos","chics","chid","chide","chided","chider","chides","chief","chiefs","chiel","chiels","chigoe","chile","chiles","chili","chill","chilli","chills","chilly","chime","chimed","chimer","chimes","chimp","chimps","chin","china","chinas","chinch","chine","chines","chink","chinks","chinky","chino","chinos","chins","chints","chintz","chip","chippy","chips","chirk","chirks","chirp","chirps","chirpy","chisel","chit","chitin","chiton","chits","chive","chives","chivvy","chivy","chm","chock","chocks","choice","choir","choirs","choke","choked","choker","chokes","chokey","choky","choler","cholla","chomp","chomps","choose","choosy","chop","chopin","choppy","chops","choral","chord","chords","chore","chorea","chored","chores","choric","chorus","chose","chosen","choses","chou","chow","chowed","chrism","christ","chroma","chrome","chromo","chub","chubby","chuck","chucks","chuff","chuffs","chug","chugs","chum","chummy","chump","chumps","chums","chunk","chunks","chunky","churl","churls","churn","churns","churrs","chute","chuted","chutes","cia","ciao","cicely","cicero","cider","ciders","cigar","cigars","cilia","cinch","cinder","cine","cinema","cines","cinque","cions","cipher","circ","circa","circe","circle","circum","circus","cirque","cirrus","ciscos","cists","cit","cite","cited","citer","citers","cites","citied","cities","citing","citron","citrus","city","civet","civets","civies","civvy","clack","clacks","clad","clads","clags","claim","claims","clair","clam","clammy","clamor","clamp","clamps","clams","clan","clang","clangs","clank","clanks","clans","clap","claps","clapt","claque","claret","clark","clarke","clash","clasp","clasps","claspt","class","classy","claus","clause","clave","claver","claw","clawed","clawer","claws","claxon","clay","clayed","clayey","clays","clean","cleans","clear","clears","cleat","cleats","cleave","clef","clefs","cleft","clefts","clept","clergy","cleric","clerk","clerks","clever","clevis","clew","clewed","cliche","click","clicks","client","clift","clifts","climax","climb","climbs","clime","climes","clinch","cline","cling","clings","clingy","clink","clinks","clip","clips","clique","cloaca","cloak","cloaks","cloche","clock","clocks","clod","cloddy","clods","clog","cloggy","clogs","clomp","clomps","clonal","clone","cloned","clones","clonic","clonk","clonks","clop","clops","close","closed","closer","closes","closet","clot","cloth","clothe","cloths","clots","clotty","cloud","clouds","cloudy","clout","clouts","clove","cloven","clover","cloves","clown","clowns","cloy","cloyed","cloys","club","clubby","cluck","clucks","clue","clued","clues","cluing","clump","clumps","clumpy","clumsy","clung","clunk","clunks","coact","coacts","coal","coaled","coaler","coals","coapts","coarse","coast","coasts","coat","coated","coatee","coater","coati","coatis","coats","coax","coaxal","coaxed","coaxer","coaxes","cob","cobalt","cobber","cobble","cobnut","cobra","cobras","cobs","cobweb","cocain","cocas","cock","cocked","cocker","cockle","cocks","cockup","coco","cocoa","cocoas","cocos","cod","coda","codal","codas","codder","coddle","code","coded","codein","coder","coders","codes","codex","codger","codify","coding","codon","codons","cods","coed","coeds","coempt","coerce","coeval","coffer","coffin","coffs","cog","cogent","cogged","cogito","cognac","cogs","cogway","coheir","cohen","cohere","coho","cohort","cohos","cohosh","coif","coifed","coifs","coign","coigne","coigns","coil","coiled","coiler","coils","coin","coined","coiner","coins","coir","coirs","coital","coitus","coke","coked","cokes","coking","col","cola","colas","cold","colder","coldly","colds","cole","coles","coleus","colic","colics","colin","coll","collar","collat","collie","collop","colloq","colly","cologs","colon","colons","colony","color","colors","colour","colt","colts","column","colure","com","coma","comas","comb","combat","combe","combed","comber","combes","combo","combos","combs","come","comedo","comedy","comely","comer","comers","comes","comet","cometh","comets","comfit","comic","comics","coming","comity","comma","commas","comme","commie","commit","common","comp","comped","compel","comply","compos","comps","compt","compte","compts","comsat","comte","comtes","con","conch","conchs","conchy","concur","condo","condom","condor","condos","cone","coned","cones","coney","coneys","conf","confab","confer","conga","congas","congee","conger","congo","congos","conic","conics","conies","conj","conk","conked","conker","conks","conn","conned","conner","connie","conns","conoid","cons","consul","cont","conte","contes","conto","contra","conus","convex","convey","convoy","cony","coo","cooed","cooee","cooees","cooer","cooers","cooey","cooeys","cooing","cook","cooked","cooker","cookey","cooks","cooky","cool","cooled","cooler","cooley","coolie","coolly","cools","cooly","coomb","coombe","coombs","coon","coons","coop","cooped","cooper","coops","coopt","coopts","coos","coot","cootie","coots","cop","copal","copals","cope","copeck","coped","coper","copers","copes","copied","copier","copies","coping","coplot","copout","copped","copper","copra","copras","cops","copse","copses","copter","copula","copy","coquet","coral","corals","corbel","cord","corded","corder","cordon","cords","core","cored","corer","corers","cores","corgi","corgis","coring","cork","corked","corker","corks","corky","corm","corms","corn","cornea","corned","cornel","corner","cornet","corns","cornu","corny","corona","corp","corps","corpse","corpus","corral","correl","corse","corses","corset","cortex","cortin","corvee","corves","corvet","coryza","cosec","cosecs","coset","cosets","cosey","coseys","cosh","coshed","cosher","coshes","cosie","cosier","cosies","cosign","cosily","cosine","cosmic","cosmo","cosmos","cosset","cost","costar","costed","coster","costly","costs","cosy","cot","cotan","cotans","cote","coted","cotes","cots","cotta","cotter","cotton","couch","cougar","cough","coughs","could","coulee","count","counts","county","coup","coupe","couped","coupes","couple","coupon","coups","course","court","courts","cousin","couth","couths","cove","coved","coven","covens","cover","covers","covert","coves","covet","covets","covey","coveys","coving","cow","coward","cowboy","cowed","cower","cowers","cowier","cowing","cowl","cowled","cowls","cowman","cowmen","cowpat","cowpea","cowpox","cowrie","cowry","cows","coy","coyer","coyest","coyish","coyote","coypu","coypus","cozen","cozens","cozes","cozey","cozeys","cozie","cozier","cozies","cozily","cozy","cpi","cpl","cps","cpu","craal","craals","crab","crabby","crabs","crack","cracks","cracky","cradle","craft","crafts","crafty","crag","craggy","crags","cram","cramp","cramps","crams","crane","craned","cranes","crania","crank","cranks","cranky","cranny","crap","crape","craped","crapes","crappy","craps","crash","crass","crate","crated","crater","crates","craton","cravat","crave","craved","craven","craver","craves","craw","crawl","crawls","crawly","craws","crayon","craze","crazed","crazes","crazy","crc","creak","creaks","creaky","cream","creams","creamy","crease","creasy","create","creche","credit","credo","credos","cree","creed","creeds","creek","creeks","creel","creels","creep","creeps","creepy","crees","creme","cremes","crenel","creole","crepe","creped","crepes","crepey","crept","crepy","cress","crest","crests","crete","cretic","cretin","crew","crewed","crewel","crews","crib","cribs","crick","cricks","cried","crier","criers","cries","crime","crimea","crimes","crimp","crimps","crimpy","cringe","crises","crisic","crisis","crisp","crisps","crispy","croak","croaks","croaky","croci","crock","crocks","crocus","croft","crofts","crone","crones","crony","crook","crooks","croon","croons","crop","crops","crosby","cross","crosse","crotch","crouch","croup","croups","croupy","crow","crowd","crowds","crowdy","crowed","crower","crown","crowns","crows","crud","cruddy","crude","cruder","crudes","cruds","cruel","cruet","cruets","cruise","crumb","crumbs","crumby","crummy","crump","crumps","crunch","cruse","crush","crust","crusts","crusty","crutch","crux","cruxes","cry","crying","crypt","crypto","crypts","csp","cst","ctg","ctrl","cts","cub","cuba","cubage","cuban","cubans","cubby","cube","cubebs","cubed","cuber","cubers","cubes","cubic","cubics","cubing","cubism","cubist","cubit","cubits","cuboid","cubs","cud","cuddle","cuddy","cudgel","cuds","cue","cued","cueing","cues","cuesta","cuff","cuffed","cuffs","cuing","cuish","cuke","cukes","cull","culled","culler","cullet","culls","culms","culpa","culpae","culpas","cult","cultic","cults","culver","cum","cumber","cumin","cumins","cummin","cunner","cunni","cunt","cunts","cup","cupid","cupids","cupola","cuppa","cuppas","cupped","cupper","cupric","cups","cur","curacy","curare","curari","curate","curb","curbed","curber","curbs","curd","curded","curdle","curds","curdy","cure","cured","curer","curers","cures","curets","curfew","curia","curiae","curial","curie","curies","curing","curio","curios","curl","curled","curler","curlew","curls","curly","curran","curred","currie","curs","curse","cursed","curser","curses","cursor","curst","curt","curter","curtly","curtsy","curve","curved","curves","curvet","curvey","curvy","cusp","cusped","cuspid","cuss","cussed","cusser","cusses","custom","cut","cute","cutely","cuter","cutes","cutest","cutesy","cutey","cuteys","cutie","cuties","cutin","cutins","cutis","cutlas","cutler","cutlet","cutoff","cutout","cuts","cutter","cuttle","cutup","cutups","cwt","cyan","cyanic","cyanin","cyans","cyborg","cycad","cycads","cycle","cycled","cycler","cycles","cyclo","cyclos","cygnet","cymbal","cyme","cymes","cymose","cynic","cynics","cypher","cypres","cyprus","cyst","cystic","czar","czars","dab","dabbed","dabble","dabs","dace","daces","dacha","dachas","dacoit","dacron","dactyl","dad","dada","dadas","dado","dadoed","dadoes","dados","dads","daemon","daft","dafter","daftly","dagger","dago","dagoba","dagoes","dagos","dahlia","daily","daimon","daimyo","dainty","dairy","dais","daises","daisy","dakoit","dakota","dale","dales","daleth","dallas","dalles","dally","dam","damage","damask","dame","dames","dammed","dammer","damn","damned","damner","damnit","damns","damp","damped","dampen","damper","damply","dams","damsel","damson","dan","dana","dance","danced","dancer","dances","dander","dandle","dane","danes","dang","danged","danger","dangle","dangs","daniel","danish","dank","danker","dankly","dante","danube","dapper","dapple","dare","dared","darer","darers","dares","daring","dark","darked","darken","darker","darkey","darkie","darkle","darkly","darks","darky","darn","darned","darnel","darner","darns","dart","darted","darter","darts","darvon","darwin","dash","dashed","dasher","dashes","dashy","data","datary","datcha","date","dated","dater","daters","dates","dating","dative","datsun","datum","datums","datura","daub","daubed","dauber","daubes","daubs","daunt","daunts","dave","davies","davis","davit","davits","daw","dawdle","dawn","dawned","day","daybed","dayfly","daylit","days","dayton","daze","dazing","dazzle","dbl","dbms","deacon","dead","deaden","deader","deadly","deads","deaf","deafen","deafer","deafly","deair","deairs","deal","dealer","deals","dealt","dean","deans","dear","dearer","dearie","dearly","dears","dearth","deary","deash","death","deaths","deathy","deb","debar","debark","debars","debase","debate","debbie","debit","debits","debone","debris","debs","debt","debtee","debtor","debts","debug","debugs","debunk","debut","debuts","dec","decade","decal","decals","decamp","decant","decay","decays","deceit","decent","decide","decile","deck","decked","decker","deckle","decks","deco","decoct","decode","decor","decors","decoy","decoys","decree","decry","deduce","deduct","deed","deeds","deedy","deejay","deem","deems","deep","deepen","deeper","deeply","deeps","deer","deers","dees","deface","defame","defat","defats","defeat","defect","defend","defer","defers","defied","defier","defies","defile","define","deflea","defoam","defog","defogs","deform","defray","deft","defter","deftly","defuse","defuze","defy","degas","degass","degerm","degree","degum","degums","dehorn","dei","deice","deiced","deicer","deices","deific","deign","deigns","deism","deisms","deist","deists","deja","deject","del","delay","delays","dele","delead","deled","deles","delete","delft","delfts","delhi","deli","delict","delime","delis","delist","dell","dells","delly","delta","deltas","deltic","delude","deluge","deluxe","delve","delved","delver","delves","demand","demean","dement","demise","demit","demits","demo","demob","demobs","demode","demon","demons","demos","demote","demur","demure","demurs","den","dengue","denial","denied","denier","denies","denim","denims","denned","dennis","denote","dens","dense","denser","dent","dental","dented","dentin","dents","denude","denver","deny","deodar","depart","depend","depict","deploy","deport","depose","depot","depots","dept","depth","depths","depute","deputy","der","derail","derat","derats","deray","derby","deride","derive","derm","derma","dermal","dermas","dermic","dermis","derms","derris","des","desalt","desand","descry","desert","desex","design","desire","desist","desk","desks","despot","detach","detail","detain","detent","deter","deters","detest","detour","deuce","deuced","deuces","deus","deux","deva","devas","devein","devest","device","devil","devils","devise","devoid","devoir","devon","devote","devour","devout","dew","dewed","dewier","dewily","dewing","dewlap","dewool","deworm","dews","dewy","dexes","dexies","dexter","dextro","dezinc","dharma","dhole","dholes","dhoti","dhotis","dhow","dhows","dhyana","diadem","diadic","diag","dial","dialed","dialer","dialog","dials","diam","diana","diane","diaper","diary","dias","diatom","diazo","dibbed","dibber","dibble","dibbuk","dibs","dice","diced","dicer","dicers","dices","dicey","dicier","dicing","dick","dicker","dickey","dickie","dicks","dicky","dicot","dicots","dict","dicta","dictum","did","diddle","didies","dido","didoes","didos","didy","die","died","dieing","diem","dies","diesel","dieses","diet","dieted","dieter","diets","differ","dig","digamy","digest","digged","digger","dight","dights","digit","digits","digs","dike","diked","diker","dikers","dikes","diking","dilate","dildo","dildoe","dildos","dill","dills","dilly","dilute","dim","dime","dimer","dimers","dimes","dimity","dimly","dimmed","dimmer","dimout","dimple","dimply","dims","dimwit","din","dinar","dinars","dine","dined","diner","diners","dines","ding","dinged","dingey","dinghy","dingle","dingo","dings","dingus","dingy","dining","dinkum","dinky","dinned","dinner","dins","dint","dinted","dints","diode","diodes","dioxin","dip","diplex","dipody","dipole","dipped","dipper","dippy","dips","dipt","dire","direct","direly","direr","direst","dirge","dirges","dirk","dirked","dirks","dirndl","dirt","dirts","dirty","dis","disarm","disbar","disc","disced","disco","discos","discs","discus","dish","dished","dishes","dishy","disk","disked","disks","dismal","dismay","dismes","disney","disown","dispel","distal","distr","disuse","ditch","dites","dither","ditto","dittos","diva","divan","divans","divas","dive","dived","diver","divers","divert","dives","divest","divide","divine","diving","divot","divots","djin","djinn","djinni","djinns","djinny","djins","doable","dobber","dobbin","dobies","doblas","dobras","dobson","doc","docent","docile","dock","docked","docker","docket","docks","docs","doctor","dodder","dodge","dodged","dodger","dodges","dodo","dodoes","dodos","doe","doer","doers","does","doest","doeth","doff","doffed","doffer","dog","dogdom","doge","dogear","doges","dogey","dogeys","dogged","dogger","doggie","dogie","dogies","dogleg","dogma","dogmas","dognap","dogs","dogy","doily","doing","doings","dolce","dolci","dole","doled","doles","doling","doll","dollar","dolled","dollop","dolls","dolly","dolman","dolmen","dolor","dolors","dolour","dolt","dolts","dom","domain","dome","domed","domes","doming","domini","domino","doms","don","dona","donald","donate","done","donee","donees","dong","dongs","donkey","donna","donnas","donne","donned","donor","donors","dons","donut","donuts","doodad","doodle","doom","doomed","dooms","door","doors","doozer","dopant","dope","doped","doper","dopers","dopes","dopey","dopier","doping","dopy","dorado","doric","dories","doris","dorm","dormer","dorp","dors","dorsa","dorsal","dorsi","dory","dos","dosage","dose","dosed","doser","dosers","doses","dosing","doss","dossed","dosser","dosses","dost","dot","dotage","dotard","dote","doted","doter","doters","dotes","doth","dotier","doting","dots","dotted","dotter","dottle","doty","double","doubly","doubt","doubts","douce","douche","dough","doughs","dought","doughy","dour","dourer","dourly","douse","doused","douser","douses","dove","dover","doves","dovish","dowel","dowels","dower","dowers","dowery","dowing","down","downed","downer","downs","dowry","dows","dowse","dowsed","dowser","dowses","doxie","doxies","doxy","doyen","doyens","doz","doze","dozen","dozens","dozer","dozers","dozes","dozier","dozily","dozing","dozy","drab","drably","drabs","drachm","draft","drafts","drafty","drag","draggy","dragon","drags","drain","drains","drake","drakes","dram","drama","dramas","drams","drank","drape","draped","draper","drapes","drat","drats","drave","draw","drawer","drawl","drawls","drawly","drawn","draws","dray","drayed","drays","dread","dreads","dream","dreams","dreamt","dreamy","drear","dreary","dreck","drecks","dredge","dreg","dreggy","dregs","dreidl","drek","dreks","drench","dress","dressy","drest","drew","drib","dribs","dried","drier","driers","dries","driest","drift","drifts","drifty","drill","drills","drily","drink","drinks","drip","drippy","drips","dript","drive","drivel","driven","driver","drives","drogue","droit","droits","droll","drolls","drolly","drone","droned","droner","drones","drongo","drool","drools","droop","droops","droopy","drop","drops","dropsy","dropt","dross","drossy","drove","droved","drover","droves","drown","drownd","drowns","drowse","drowsy","drub","drubs","drudge","drug","drugs","druid","druids","drum","drums","drunk","drunks","drupe","drupes","dry","dryad","dryads","dryer","dryers","dryest","drying","drylot","dryrot","drys","duad","duads","dual","dually","duals","dub","dubbed","dubber","dubbin","dubio","dublin","dubs","ducal","ducat","ducats","duce","duces","duck","ducked","ducker","duckie","ducks","duct","ductal","ducted","ducts","dud","dude","dudes","dudish","duds","due","duel","dueled","dueler","duello","duels","duenna","dues","duet","duets","duff","duffel","duffer","duffle","dug","dugong","dugout","dugs","duke","dukes","dulcet","dull","dulled","duller","dully","dulse","dulses","duly","dumb","dumbed","dumber","dumbly","dump","dumped","dumper","dumps","dun","dunce","dunces","dundee","dune","dunes","dung","dunged","dungs","dunk","dunked","dunker","dunks","dunned","dunner","duns","duo","duos","dup","dupe","duped","duper","dupers","dupery","dupes","duping","duple","duplex","dupped","dural","duress","during","durn","durned","durns","durra","durst","durum","durums","dusk","dusked","dust","dusted","duster","dustup","dusty","dutch","duties","duty","dvorak","dwarf","dwarfs","dwell","dwells","dwelt","dwight","dyable","dyad","dyadic","dyads","dye","dyed","dyeing","dyer","dyers","dyes","dying","dyings","dyke","dyking","dynamo","dynast","dyne","dynes","dynode","each","eager","eagers","eagle","eagles","eaglet","ear","eared","earful","earing","earl","earls","early","earn","earned","earner","earns","ears","earth","earths","earthy","earwax","earwig","ease","eased","easel","easels","easer","easers","eases","easier","easies","easily","easing","east","easter","easts","easy","eat","eaten","eater","eaters","eatery","eating","eats","eau","eaux","eave","eaved","eaves","ebb","ebbed","ebbing","ebbs","ebcdic","ebon","ebons","ebony","eccl","echo","echoed","echoer","echoes","echoey","echoic","eclair","eclat","eclats","ecol","ecole","ecoles","econ","ecru","ecrus","ecus","eczema","edam","edda","eddied","eddies","eddy","edema","edemas","eden","edgar","edge","edged","edger","edgers","edges","edgier","edgily","edging","edgy","edible","edict","edicts","edison","edit","edited","edith","editor","edits","educe","educed","educes","educt","educts","edward","eel","eelier","eels","eely","eerie","eerier","eerily","eery","effect","effigy","efflux","effort","effs","effuse","eft","efts","egad","egads","egg","eggcup","egged","egger","eggers","eggnog","eggs","egis","egises","ego","egoism","egoist","egos","egress","egret","egrets","eider","eiders","eidola","eidos","eiffel","eight","eighth","eights","eighty","eikon","eire","either","eject","ejecta","ejects","eke","eked","ekes","eking","elaine","elan","eland","elands","elans","elapse","elate","elated","elater","elates","elbow","elbows","eld","elder","elders","eldest","elds","elect","elects","eleven","elevon","elf","elfin","elfins","elfish","elhi","elicit","elide","elided","elides","elijah","elite","elites","elixir","elk","elks","ell","ells","elm","elmier","elms","elmy","elope","eloped","eloper","elopes","else","elses","elude","eluded","eluder","eludes","elver","elvers","elves","elvis","elvish","embalm","embank","embar","embark","embars","embay","embays","embed","embeds","ember","embers","embody","emboli","emboss","embow","embows","embryo","emcee","emcees","emeer","emeers","emend","emends","emerge","emery","emetic","emf","emigre","emily","emir","emirs","emit","emits","emmet","emmets","emmies","emmy","emote","emoted","emoter","emotes","empire","employ","emptor","ems","emu","emus","enable","enact","enacts","enamel","enamor","enate","enates","enatic","enc","encage","encamp","encase","encina","encl","encode","encore","encyst","end","endear","ended","ender","enders","ending","endive","endow","endows","endrin","ends","endue","endued","endues","endure","enduro","enema","enemas","enemy","energy","enface","enfant","enfin","enfold","engage","engild","engine","engird","engirt","engr","engram","engulf","enigma","enjoin","enjoy","enjoys","enlace","enlist","enmesh","enmity","ennead","ennui","ennuis","enough","enow","enrage","enrapt","enrich","enrobe","enrol","enroll","enrols","enroot","ens","ensign","ensile","ensky","ensoul","ensue","ensued","ensues","ensure","entail","enter","enters","entice","entire","entity","entomb","entrap","entre","entree","entry","enure","envied","envier","envies","envoi","envois","envoy","envoys","envy","enwrap","enzyme","eocene","eof","eolian","eolith","eon","eonian","eons","epa","epee","epees","epic","epical","epics","epigon","epilog","epizoa","epoch","epochs","epode","eponym","epsom","equal","equals","equate","equip","equips","equity","era","eras","erase","erased","eraser","erases","erat","erbium","ere","erect","erects","erenow","erg","ergo","ergot","ergots","ergs","erica","ericas","erie","erin","ermine","erne","ernest","erns","erode","eroded","erodes","eros","erose","eroses","erotic","err","errand","errant","errata","erred","erring","error","errors","errs","ersatz","erst","eruct","eructs","erupt","erupts","esc","escape","escarp","escars","eschew","escort","escrow","escudo","eses","eskimo","esp","espial","espied","espies","esprit","espy","ess","essay","essays","esse","esses","estate","esteem","ester","esters","esther","estop","estops","estray","estrin","estrum","estrus","eta","etape","etc","etch","etched","etcher","etches","eterne","ethane","ethel","ethene","ether","ethers","ethic","ethics","ethnic","ethos","ethyl","ethyls","etna","etnas","etoile","etude","etudes","etym","euchre","euclid","eugene","euler","eulogy","eureka","europe","evade","evaded","evader","evades","evans","eve","even","evened","evener","evenly","evens","event","events","ever","evert","everts","every","eves","evict","evicts","evil","eviler","evilly","evils","evince","evoke","evoked","evoker","evokes","evolve","evzone","ewe","ewer","ewers","ewes","ewing","exact","exacta","exacts","exalt","exalts","exam","exams","exarch","excel","excels","except","excess","excise","excite","excuse","exec","execs","exedra","exempt","exert","exerts","exes","exhale","exhort","exhume","exile","exiled","exiles","exilic","exist","exists","exit","exited","exits","exodus","exotic","expand","expect","expel","expels","expend","expert","expire","expo","export","expos","expose","exsert","ext","extant","extend","extent","extern","extol","extoll","extols","extort","extra","extras","exude","exuded","exudes","exult","exults","exurb","exurbs","eye","eyecup","eyed","eyeful","eyeing","eyelet","eyelid","eyer","eyers","eyes","eying","eyrie","eyries","eyrir","fabian","fable","fabled","fabler","fables","fabric","facade","face","faced","facer","facers","faces","facet","facets","faceup","facia","facial","facias","facie","facies","facile","facing","fact","facto","factor","facts","facula","fad","fade","fader","faders","fades","fading","fads","faeces","faerie","faery","fag","fagged","faggot","fagot","fagots","fags","fail","failed","faille","fails","fain","fainer","faint","faints","fair","faire","faired","fairer","fairly","fairs","fairy","fait","faith","faiths","faits","fake","faked","fakeer","faker","fakers","fakery","fakes","faking","fakir","fakirs","falcon","fall","fallen","faller","fallow","falls","false","falser","falsie","falter","fame","famed","fames","family","famine","faming","famish","famous","fan","fandom","fanes","fang","fanged","fangs","fanjet","fanned","fanner","fans","fantod","fantom","faqir","faqirs","faquir","far","farad","farads","farce","farced","farcer","farces","farcy","fards","fare","fared","farer","farers","fares","farina","faring","farm","farmed","farmer","farms","faro","faroff","faros","farrow","fart","farted","farts","fasces","fascia","fashed","fashes","fast","fasted","fasten","faster","fasts","fat","fatal","fatale","fate","fated","fates","father","fathom","fating","fatly","fats","fatso","fatsos","fatted","fatten","fatter","fatuus","fauces","faucet","fault","faults","faulty","faun","fauna","faunae","faunal","faunas","fauns","faust","faut","fauve","fauves","faux","favor","favors","favour","fawn","fawned","fawner","fax","faxes","faxing","fay","faying","fays","fazing","fbi","fealty","fear","feared","fearer","fears","fease","feast","feasts","feat","feater","featly","feats","fecal","feces","fecund","fed","fedora","feds","fee","feeble","feebly","feed","feeder","feeds","feeing","feel","feeler","feels","fees","feet","feign","feigns","feint","feints","feist","feists","feisty","feline","felix","fell","fella","fellah","fellas","felled","feller","felloe","fellow","fells","felly","felon","felons","felony","felt","felted","felts","fem","female","femme","femmes","femora","femur","femurs","fen","fence","fenced","fencer","fences","fend","fended","fender","fends","fennel","fens","feral","fermi","fermis","fern","ferns","ferny","ferret","ferric","ferris","ferrum","ferry","ferule","fervid","fervor","fescue","fess","fesse","fessed","fesses","festal","fester","feta","fetal","fetas","fetch","fete","feted","fetes","fetid","feting","fetish","fetor","fetors","fetted","fetter","fettle","fetus","feud","feudal","feuded","feuds","fever","fevers","few","fewest","fey","feyer","feyest","fez","fezes","fezzed","fezzes","fiance","fiasco","fiat","fiats","fib","fibbed","fibber","fiber","fibers","fibre","fibres","fibrin","fibs","fibula","fica","fiche","fiches","fichu","fichus","fickle","fiddle","fide","fidel","fides","fidget","fido","fids","fie","fief","fiefs","field","fields","fiend","fiends","fierce","fiery","fiesta","fife","fifed","fifer","fifers","fifes","fifth","fifths","fig","figged","fight","fights","figs","figure","filar","filch","file","filed","filer","filers","files","filet","filets","filial","filing","fill","fille","filled","filler","filles","fillet","fills","filly","film","filmed","films","filmy","filter","filth","filths","filthy","fin","final","finale","finals","finch","find","finder","finds","fine","fined","finely","finer","finery","fines","finest","finger","finial","finis","finish","finite","fink","finked","finks","finn","finnan","finned","fins","fiord","fir","fire","fired","firer","firers","fires","firing","firkin","firm","firma","firmed","firmer","firmly","firms","firry","firs","first","firsts","firth","firths","fiscal","fish","fished","fisher","fishes","fishy","fist","fisted","fistic","fists","fit","fitful","fitly","fits","fitted","fitter","five","fiver","fivers","fives","fix","fixate","fixe","fixer","fixers","fixes","fixing","fixup","fixups","fizz","fizzed","fizzer","fizzle","fizzy","fjord","fjords","flab","flabby","flabs","flack","flacks","flacon","flag","flaggy","flagon","flail","flails","flair","flairs","flak","flake","flaked","flaker","flakes","flambe","flame","flamed","flamer","flames","flams","flamy","flan","flange","flank","flanks","flans","flap","flappy","flaps","flare","flared","flares","flash","flashy","flask","flasks","flat","flatly","flats","flatus","flaunt","flavor","flaw","flawed","flaws","flawy","flax","flaxen","flaxes","flay","flayed","flayer","flays","flea","fleas","fleche","fleck","flecks","flecky","fled","fledge","fledgy","flee","fleece","fleecy","fleer","fleers","flees","fleet","fleets","flense","flesh","fleshy","fletch","fleury","flew","flex","flexed","flexes","flexor","fleyed","flick","flicks","flied","flier","fliers","flies","fliest","flight","flimsy","flinch","fling","flings","flint","flints","flinty","flip","flips","flirt","flirts","flirty","flit","flitch","flite","flites","flits","float","floats","floaty","flock","flocks","flocky","floe","floes","flog","flood","floods","flooey","floor","floors","flop","floppy","flora","florae","floral","floras","floret","florid","florin","floss","flossy","flour","flours","floury","flout","flouts","flow","flowed","flower","flown","flu","flub","flubs","flue","flued","fluent","flues","fluid","fluids","fluke","fluked","flukes","flukey","fluky","flume","flumed","flumes","flung","flunk","flunks","flunky","fluor","fluors","flurry","flus","flute","fluted","fluter","flutes","fluty","flux","fluxed","fluxes","fly","flyer","flyers","flying","flyman","flymen","flyway","foal","foaled","foals","foam","foamed","foamer","foams","fob","fobbed","fobs","focal","foci","fodder","foe","foehn","foehns","foeman","foemen","foes","foetal","foeti","foetid","foetor","foetus","fog","fogey","fogeys","fogged","fogger","foggy","fogie","fogies","fogs","fogy","foible","foil","foiled","foils","foins","foist","foists","fold","folded","folder","folds","folia","foliar","folic","folio","folios","folk","folks","folksy","follow","folly","foment","fond","fonded","fonder","fondle","fondly","fonds","fondu","fondue","font","fontal","fonts","food","foods","fool","fooled","fools","foot","footed","footer","foozle","fop","fopped","fops","for","fora","forage","foray","forays","forbad","forbid","force","forced","forcer","forces","ford","forded","fordid","fords","fore","foreby","foredo","forego","fores","forest","forge","forged","forger","forges","forget","forgo","forgot","forint","fork","forked","forker","forks","form","forma","formal","format","formed","former","formic","forms","forsee","fort","forte","fortes","forth","fortis","forts","forty","forum","forums","forwhy","fossa","fossae","fosse","fosses","fossil","foster","fought","foul","fouled","fouler","foully","fouls","found","founds","fount","founts","four","fours","fourth","fovea","foveae","foveal","fowl","fowled","fowler","fox","foxier","foxily","foxing","foxy","foyer","foyers","fps","fracas","frag","frags","frail","frails","frame","framed","framer","frames","franc","franca","france","franco","francs","frank","franks","frappe","frat","frater","frats","frau","fraud","frauds","frauen","fraus","fray","frayed","frays","freak","freaks","freaky","fred","free","freed","freely","freer","frees","freest","freeze","french","frenum","frenzy","freon","frere","freres","fresco","fresh","fresno","fret","frets","freud","friar","friars","friary","friday","fridge","fried","friend","frier","friers","fries","frieze","frig","fright","frigid","frigs","frill","frills","frilly","fringe","fringy","frisk","frisks","frisky","frivol","friz","frizz","frizzy","fro","frock","frocks","froes","frog","froggy","frogs","frolic","from","frond","fronds","front","fronts","frosh","frost","frosts","frosty","froth","froths","frothy","frow","frown","frowns","frowsy","frowzy","froze","frozen","frug","frugal","frugs","fruit","fruits","fruity","frump","frumps","frumpy","frusta","fry","fryer","fryers","frying","frypan","fubbed","fuck","fucked","fuddle","fudge","fudged","fudges","fuds","fuel","fueled","fueler","fuels","fugal","fugged","fugs","fugue","fugued","fuhrer","fulcra","full","fulled","fuller","fully","fumble","fume","fumed","fumer","fumers","fumes","fumet","fumets","fumier","fuming","fumy","fun","fund","funded","funds","fungal","fungi","fungic","fungus","funk","funked","funker","funks","funky","funned","funnel","fur","furies","furl","furled","furler","furls","furor","furore","furors","furred","furrow","furry","furs","fury","furze","furzes","fuse","fused","fusee","fusees","fusel","fusels","fuses","fusil","fusile","fusils","fusing","fusion","fuss","fussed","fusser","fusses","fustic","futile","future","fuze","fuzed","fuzee","fuzees","fuzes","fuzil","fuzils","fuzing","fuzz","fuzzed","fuzzes","fwd","fylfot","gab","gabbed","gabber","gabble","gabbro","gabby","gable","gabled","gables","gabon","gabs","gad","gadded","gadder","gadfly","gadget","gads","gaelic","gaels","gaff","gaffe","gaffed","gaffer","gaffes","gaffs","gag","gaga","gage","gaged","gager","gagers","gages","gagged","gagger","gaggle","gaging","gagman","gagmen","gags","gaiety","gaily","gain","gained","gainer","gainly","gains","gainst","gait","gaited","gaiter","gaits","gal","gala","galas","galax","galaxy","gale","galena","gales","gall","galled","galley","gallic","gallon","gallop","galls","gallup","gallus","gally","galoot","galop","galops","galore","galosh","gals","gam","gamba","gambas","gambit","gamble","gambol","game","gamed","gamely","gamer","games","gamest","gamete","gamey","gamic","gamier","gamily","gamin","gamine","gaming","gamins","gamma","gammas","gammer","gammon","gams","gamut","gamuts","gamy","gander","gandhi","ganef","ganefs","ganev","ganevs","gang","ganged","ganger","ganges","gangly","gangs","gannet","ganser","gantry","gaol","gaoled","gaoler","gaols","gap","gape","gaped","gaper","gapers","gapes","gaping","gapped","gaps","gapy","gar","garage","garb","garbed","garble","garbo","garbs","garcon","garde","garden","gargle","garish","garlic","garner","garnet","garret","gars","garter","garth","garths","gary","gas","gasbag","gases","gash","gashed","gasher","gashes","gasify","gasket","gaslit","gasman","gasmen","gasp","gasped","gasper","gasps","gassed","gasser","gasses","gassy","gat","gate","gated","gates","gather","gating","gator","gats","gatsby","gauche","gaucho","gaud","gauds","gauge","gauged","gauger","gauges","gauls","gaunt","gauss","gauze","gauzes","gavage","gave","gavel","gavels","gavot","gavots","gawk","gawked","gawker","gay","gayer","gayest","gayety","gayly","gays","gaze","gazebo","gazed","gazer","gazers","gazes","gazing","gds","gear","geared","gears","gecko","geckos","gecks","gee","geed","geegaw","geeing","geek","geeks","gees","geese","geiger","geisha","gel","geld","gelded","gelder","gelds","gelee","gelees","gelid","gelled","gels","gelt","gelts","gem","gemini","gemmy","gems","gen","genal","gender","gene","genera","genes","genet","geneva","genial","genic","genie","genies","genii","genius","genoa","genome","genre","genres","gens","gent","gentil","gentle","gently","gentry","gents","genus","geode","geodes","geodic","geog","geoid","geoids","geol","geom","george","gerald","gerbil","germ","german","germen","germs","germy","gerund","gesso","geste","gestes","gests","get","gets","getter","getup","getups","geum","geums","gewgaw","geyser","ghana","ghast","ghat","ghats","ghee","ghees","ghetto","ghost","ghosts","ghosty","ghoul","ghouls","giant","giants","gibbed","gibber","gibbet","gibbon","gibe","gibed","giber","gibers","gibes","giblet","gibs","giddap","gift","gifted","gifts","gig","gigas","giggle","gigolo","gigs","gigue","gigues","gila","gild","gilded","gilder","gilds","gill","gilled","giller","gillie","gills","gilly","gilt","gilts","gimbal","gimel","gimels","gimlet","gimp","gimped","gin","ginger","gingko","ginkgo","ginks","ginned","ginner","gins","gip","gipped","gipper","gips","gipsy","gird","girded","girder","girdle","girds","girl","girlie","girls","girly","girns","giros","girt","girted","girth","girths","girts","gismo","gismos","gist","gists","git","give","given","givens","giver","givers","gives","givin","gizmo","gizmos","glace","glaces","glad","glade","glades","gladly","glads","glady","glaive","glamor","glance","gland","glands","glans","glare","glared","glares","glary","glass","glassy","glaze","glazed","glazer","glazes","gleam","gleams","gleamy","glean","gleans","gleba","glebe","glee","glees","glen","glens","glib","glibly","glide","glided","glider","glides","glim","glims","glint","glints","glitch","gloam","gloat","gloats","glob","global","globe","globed","globes","globs","glogg","glom","gloms","gloom","glooms","gloomy","glop","glops","gloria","glory","gloss","glossy","glove","gloved","glover","gloves","glow","glowed","glower","glows","glue","glued","gluer","gluers","glues","gluey","gluier","gluily","gluing","glum","glumly","glut","glutei","gluten","gluts","glycol","glyph","glyphs","gnarl","gnarls","gnarly","gnars","gnash","gnat","gnats","gnaw","gnawed","gnawer","gnawn","gnaws","gneiss","gnome","gnomes","gnomic","gnomon","gnoses","gnosis","gnu","gnus","goad","goaded","goads","goal","goaled","goalie","goals","goat","goatee","goats","gob","gobbed","gobbet","gobble","gobies","goblet","goblin","goboes","gobos","gobs","goby","god","goddam","godly","gods","godson","godwit","goer","goers","goes","goethe","gofer","gofers","goffer","goggle","gogo","going","goings","goiter","goitre","gold","golden","golder","golds","golem","golems","golf","golfed","golfer","golly","gombo","gombos","gonad","gonads","gone","goner","goners","gong","gonged","gongs","gonif","gonifs","gonof","gonofs","gonoph","goo","goober","good","goodby","gooder","goodie","goodly","goods","goody","gooey","goof","goofed","goofs","googly","gooier","goon","gooney","goonie","goons","goony","goop","goos","goose","goosed","gooses","goosey","goosy","gopher","gorals","gore","gored","gores","gorge","gorged","gorger","gorges","gorget","gorgon","gorier","gorily","goring","gorse","gorses","gorsy","gory","gosh","gospel","gossip","got","goth","gothic","goths","gotten","gouge","gouged","gouger","gouges","gourd","gourde","gourds","gout","gouts","gouty","gov","govern","govt","gown","gowned","gowns","goy","goyish","goys","graal","graals","grab","grabby","graben","grabs","grace","graced","graces","grad","grade","graded","grader","grades","grads","graft","grafts","graham","grail","grails","grain","grains","grainy","gram","gramme","grammy","gramp","gramps","grams","grana","grand","grande","grands","grange","granny","grant","grants","grape","grapes","graph","graphs","gras","grasp","grasps","grass","grassy","grata","gratae","grate","grated","grater","grates","gratia","gratin","gratis","grave","graved","gravel","graven","graver","graves","gravid","gravy","gray","grayed","grayer","grayly","grays","graze","grazed","grazer","grazes","grease","greasy","great","greats","greave","grebe","grebes","greco","greece","greed","greeds","greedy","greek","greeks","green","greens","greeny","greet","greets","gremmy","greta","grew","grey","greyed","greyer","greyly","greys","grid","grided","grides","grids","grief","griefs","grieve","grift","grifts","grill","grille","grills","grim","grime","grimed","grimes","grimly","grimy","grin","grind","grinds","gringo","grins","griot","griots","grip","gripe","griped","griper","gripes","gripey","grippe","grippy","grips","gripy","grisly","grist","grists","grit","grits","gritty","groan","groans","groat","groats","grocer","grog","grogs","groin","groins","groom","grooms","groove","groovy","grope","groped","groper","gropes","gross","grot","grots","grotto","grouch","ground","group","groups","grouse","grout","grouts","grouty","grove","groved","grovel","groves","grow","grower","growl","growls","growly","grown","grows","growth","grub","grubby","grubs","grudge","gruel","gruels","gruff","gruffs","gruffy","grump","grumps","grumpy","grungy","grunt","grunts","guaco","guam","guanin","guano","guanos","guar","guard","guards","guars","guava","guavas","guerre","guess","guest","guests","guff","guffs","guiana","guide","guided","guider","guides","guidon","guild","guilds","guile","guiled","guiles","guilt","guilts","guilty","guinea","guiro","guise","guised","guises","guitar","gulden","gulf","gulfed","gulfy","gull","gulled","gullet","gulley","gulls","gully","gulp","gulped","gulper","gulpy","gum","gumbo","gumbos","gummed","gummer","gums","gun","gundog","gung","gunk","gunman","gunmen","gunned","gunnel","gunner","guns","gunsel","gurgle","gurney","guru","gurus","gush","gushed","gusher","gushes","gusset","gust","gusted","gusto","gusts","gut","guts","gutta","gutted","gutter","guy","guyana","guying","guys","guzzle","gweduc","gym","gyms","gyp","gypped","gypper","gyps","gypsum","gyral","gyrate","gyre","gyred","gyres","gyring","gyro","gyros","gyrose","gyrus","gyve","gyving","habeas","habile","habit","habits","hack","hacked","hackee","hacker","hackie","hackle","hackly","hacks","had","haddie","hades","hading","hadj","hadjee","hadjes","hadji","hadjis","hadron","hadst","haets","haft","hafted","hafter","hafts","hag","hagged","haggis","haggle","hags","hague","hah","hahs","hail","hailed","hailer","hails","hair","hairdo","haired","hairs","haiti","haji","hajis","hajj","hajjes","hajji","hajjis","hake","hakes","hale","haled","haler","halers","hales","halest","half","halide","haling","halite","hall","hallah","hallo","halloa","halloo","hallos","hallow","halls","halo","haloed","haloes","halos","halt","halted","halter","halts","halva","halvah","halvas","halve","halved","halves","ham","hamlet","hammed","hammer","hammy","hamper","hams","hance","hand","handed","handel","handle","hands","handy","hang","hangar","hanged","hanger","hangs","hangup","hank","hanked","hanker","hankie","hanks","hanoi","hansel","hansom","hants","haole","haoles","hap","haply","happen","haps","harass","harbor","hard","harden","harder","hardly","hards","hardy","hare","hared","hareem","harem","harems","hares","haring","hark","harked","harken","harks","harlem","harlot","harm","harmed","harmer","harms","harold","harp","harped","harper","harps","harpy","harris","harrow","harry","harsh","hart","harts","has","hash","hashed","hashes","hasid","hasp","hasped","hasps","hassle","hast","hasta","haste","hasted","hasten","hastes","hasty","hat","hatbox","hatch","hate","hated","hater","haters","hates","hatful","hath","hating","hatpin","hatred","hats","hatted","hatter","haul","hauled","hauler","hauls","haunt","haunts","have","haven","havens","haver","havers","haves","having","havoc","havocs","haw","hawed","hawing","hawk","hawked","hawker","hawks","haws","hawse","hawser","hawses","hay","haydn","hayed","hayer","hayers","hayes","haying","haymow","hays","hazard","haze","hazel","hazels","hazer","hazers","hazes","hazier","hazily","hazing","hazy","head","headed","header","heads","heady","heal","healed","healer","heals","health","heap","heaped","heaps","hear","heard","hearer","hears","hearse","heart","hearth","hearts","heat","heated","heater","heath","heaths","heathy","heats","heave","heaved","heaven","heaver","heaves","hebrew","heck","heckle","hecks","hectic","hector","hedge","hedged","hedger","hedges","hee","heed","heeder","heeds","heehaw","heel","heeled","heeler","heels","heft","hefted","hefter","hefts","hegira","heifer","heigh","height","heil","heiled","heils","heir","heired","heirs","heist","heists","hejira","held","helio","helios","helium","hell","helled","heller","hello","hellos","hells","helm","helmed","helmet","helms","helot","helots","help","helped","helper","helps","helve","helved","helves","hem","heman","heme","hemmed","hemmer","hemp","hempen","hems","hen","henbit","hence","henna","hennas","henry","henrys","hens","hents","hep","hepcat","heptad","her","herald","herb","herbal","herbs","herby","herd","herded","herder","herds","here","hereat","hereby","herein","hereof","hereon","heres","heresy","hereto","herman","hermes","hermit","hernia","hero","heroes","heroic","heroin","heron","herons","heros","herpes","herr","hers","hertz","hest","hetero","hew","hewed","hewer","hewers","hewing","hewn","hews","hex","hexad","hexads","hexane","hexer","hexers","hexes","hexing","hexone","hexose","hexyl","hexyls","hey","heyday","heydey","hiatal","hiatus","hic","hiccup","hick","hickey","hicks","hid","hidden","hide","hided","hider","hiders","hides","hiding","hie","hied","hieing","hies","higgle","high","higher","highs","hight","hights","hijack","hike","hiker","hikers","hikes","hill","hilled","hiller","hills","hilly","hilt","hilted","hilts","him","hind","hinder","hindi","hinds","hindu","hindus","hinge","hinged","hinger","hinges","hinny","hint","hinted","hinter","hints","hip","hipped","hipper","hippie","hippo","hippos","hippy","hips","hire","hired","hirer","hirers","hires","hiring","his","hisn","hispid","hiss","hissed","hisser","hisses","hist","histed","hists","hit","hither","hitler","hits","hitter","hive","hives","hoagie","hoar","hoard","hoards","hoarse","hoary","hoax","hoaxed","hoaxer","hoaxes","hob","hobbit","hobble","hobnob","hobo","hoboed","hoboes","hobos","hobs","hoc","hock","hocked","hocker","hockey","hocks","hocus","hod","hodad","hodads","hods","hoe","hoed","hoeing","hoer","hoers","hoes","hog","hogan","hogans","hogged","hogger","hognut","hogs","hogtie","hoi","hoise","hoist","hoists","hoke","hokey","hokier","hoking","hokum","hokums","hold","holden","holder","holds","holdup","hole","holed","holer","holes","holey","holier","holies","holily","holing","holism","holist","holler","hollo","hollow","holly","holmes","holt","holts","holy","homage","hombre","home","homed","homely","homer","homers","homes","homey","homier","homily","homing","hominy","homo","homos","homy","hon","honcho","honda","hondas","hone","honed","honer","honers","hones","honest","honey","honeys","honied","honing","honk","honked","honker","honkey","honkie","honky","honor","honors","honour","hooch","hood","hooded","hoods","hooey","hooeys","hoof","hoofed","hoofer","hook","hooka","hookah","hookas","hooked","hooker","hookey","hooks","hookup","hooky","hoop","hooped","hooper","hoopla","hoops","hoorah","hooray","hoot","hootch","hooted","hooter","hoots","hoover","hooves","hop","hope","hoped","hoper","hopers","hopes","hopi","hoping","hopis","hopped","hopper","hops","hor","hora","horace","horah","horal","horary","horas","horde","horded","hordes","horn","horned","horner","hornet","horns","horny","horrid","hors","horse","horsed","horses","horsey","horst","horsy","hose","hosed","hoses","hosier","hosing","hosp","host","hosted","hostel","hostly","hosts","hot","hotbed","hotbox","hotdog","hotel","hotels","hotkey","hotly","hotrod","hots","hotted","hotter","hound","hounds","hour","houri","houris","hourly","hours","house","housed","houser","houses","hove","hovel","hovels","hover","hovers","how","howdah","howdie","howe","howes","howl","howled","howler","howlet","howls","hows","hoyden","hoyle","hoyles","hrs","hts","hub","hubby","hubcap","hubris","hubs","huck","hucks","huddle","hudson","hue","hued","hues","huff","huffed","huffs","hug","huge","hugely","huger","hugest","hugged","hugger","hugs","huh","hula","hulas","hulk","hulked","hull","hulled","huller","hullo","hullos","hulls","hum","human","humane","humans","humble","humbug","humeri","hummed","hummer","humor","humors","humour","hump","humped","humph","humphs","humps","humpy","hums","hun","hung","hunger","hungry","hunk","hunker","hunks","hunky","huns","hunt","hunted","hunter","hunts","hup","hurdle","hurl","hurled","hurler","hurls","hurly","huron","hurray","hurry","hurt","hurter","hurtle","hurts","hush","hushed","hushes","husk","husked","husker","husks","hussar","hussy","hustle","hut","huts","hutted","hutzpa","huzza","huzzas","hwy","hyaena","hybrid","hyde","hydra","hydrae","hydras","hydric","hydro","hydros","hyena","hyenas","hying","hymen","hymens","hymn","hymnal","hymned","hymns","hype","hyped","hyper","hypes","hyphen","hyping","hypnic","hypo","hypoed","hypos","hyson","hysons","hyssop","iamb","iambi","iambic","iambs","iambus","iberia","ibex","ibexes","ibices","ibid","ibidem","ibis","ibises","ibm","icbm","ice","icebox","icecap","iced","iceman","icemen","ices","ichor","ichors","icicle","icier","iciest","icily","icing","icings","icker","ickier","icky","icon","iconic","icons","ictus","icy","idaho","idea","ideal","ideals","ideas","ideate","idee","idem","ideo","ides","idiocy","idiom","idioms","idiot","idiots","idle","idled","idler","idlers","idles","idlest","idling","idly","idol","idols","ids","idyl","idyll","idylls","idyls","ieee","iffier","iffy","ifs","igloo","igloos","ignis","ignite","ignore","iguana","ikon","ikons","ileal","ileum","ilia","iliad","iliads","ilium","ilk","ilks","ill","iller","illest","ills","illume","illy","image","imaged","images","imago","imam","imams","imaums","imbalm","imbark","imbed","imbeds","imbody","imbrue","imbue","imbued","imbues","immesh","immies","immune","immure","imp","impact","impair","impala","impale","impart","imped","impede","impel","impels","impend","imper","imping","impish","imply","import","impose","impost","imps","impugn","impure","impute","inane","inaner","inanes","inapt","inarm","inborn","inbred","inc","inca","incas","incase","incept","incest","inch","inched","inches","incise","incite","incog","income","incubi","incur","incurs","incus","indeed","indent","index","india","indian","indict","indies","indign","indigo","indite","indium","indol","indoor","indow","indows","induce","induct","indue","indued","indues","inept","inert","inerts","infamy","infant","infect","infer","infers","infest","infirm","infix","inflow","influx","info","infold","inform","infos","infra","infuse","ingate","ingest","ingle","ingles","ingot","ingots","ingulf","inhale","inhaul","inhere","inhume","inject","injure","ink","inked","inker","inkers","inkier","inkle","inkles","inkpot","inks","inky","inlaid","inland","inlay","inlays","inlet","inlets","inlier","inly","inmate","inmesh","inmost","inn","innate","inned","inner","inners","inns","input","inputs","inroad","inrush","ins","insane","inseam","insect","insert","inset","insets","inside","insist","insole","insoul","inst","instal","instep","instil","instr","insult","insure","int","intact","intake","intel","intend","intent","inter","intern","inters","intl","into","intomb","intone","intr","intra","intro","intros","intuit","inturn","inure","inured","inures","inurn","inurns","invade","invent","invert","invest","invite","invoke","inward","iodide","iodin","iodine","iodize","ion","ionic","ionics","ionise","ionium","ionize","ions","iota","iotas","iou","iowa","iowan","iowans","ipecac","ipso","iqs","ira","irades","iran","iraq","iraqi","iraqis","irate","irater","ire","ired","ireful","irene","irenic","ires","irides","iring","iris","irised","irises","irish","irk","irked","irking","irks","iron","ironed","ironer","irones","ironic","irons","irony","irreal","irrupt","irs","isaac","isaiah","iscose","isis","islam","island","isle","isled","isles","islet","islets","isling","ism","isms","isobar","isogon","isolog","isomer","isopod","israel","issei","issue","issued","issuer","issues","isthmi","istle","ital","italic","italy","itch","itched","itches","itchy","item","itemed","items","its","itself","iud","iuds","ivied","ivies","ivy","ixtles","izar","izzard","jab","jabbed","jabber","jabot","jabots","jabs","jacal","jacals","jack","jackal","jacked","jacker","jacket","jackie","jade","jades","jading","jadish","jag","jagged","jagger","jags","jaguar","jai","jail","jailed","jailer","jailor","jake","jalopy","jam","jamb","jambed","james","jammed","jammer","jams","jane","janet","jangle","jangly","janus","jap","japan","japans","jape","japer","japers","japery","japes","japing","jar","jarful","jargon","jarred","jars","jason","jasper","jato","jatos","jaunt","jaunts","jaunty","java","jaw","jawing","jaws","jay","jaycee","jaygee","jayvee","jazz","jazzed","jazzer","jct","jean","jeer","jeered","jeers","jehad","jekyll","jell","jelled","jelly","jennet","jerboa","jerk","jerked","jerker","jerkin","jerks","jersey","jess","jesse","jessed","jesses","jest","jested","jester","jesuit","jet","jets","jetsam","jetsom","jeu","jew","jewel","jewels","jewing","jewish","jews","jib","jibbed","jibber","jibe","jibed","jiber","jibers","jibes","jibing","jibs","jig","jigged","jigger","jiggle","jigs","jigsaw","jihad","jihads","jilt","jilted","jilter","jingle","jingly","jingo","jinn","jinni","jinns","jins","jinx","jinxed","jinxes","jitney","jitter","jnana","jnanas","job","jobbed","jobber","jobs","jock","jockey","jocko","jockos","jocks","jocose","jocund","joe","joes","joey","joeys","jog","jogged","jogger","joggle","john","johns","joie","join","joined","joiner","joins","joint","joints","joist","joists","joke","joker","jokers","jokes","joking","jolt","jolted","jolter","jolts","jonah","jonahs","jones","joram","jordan","jose","joseph","josh","joshed","josher","joshes","joshua","joss","josses","jostle","jot","jota","jots","jotted","jotter","joule","joules","jounce","jouncy","jour","joust","jousts","jovial","jowl","jowled","joy","joyce","joyful","joying","joys","juan","juans","jubile","judaic","judas","judder","judge","judged","judger","judges","judice","judith","judo","jug","jugged","juggle","jugs","jugula","juice","juiced","juicer","juices","juke","juked","juking","julep","juleps","july","jumble","jumbo","jumbos","jump","jumped","jumper","junco","juncos","june","juneau","jungle","jungly","junior","junk","junked","junker","junket","junkie","juno","junta","juntas","junto","juntos","jupe","jure","juries","jurist","juror","jurors","jus","just","justed","juster","justle","justly","justs","jut","jute","jutes","juts","jutted","kabala","kabob","kabobs","kadis","kadish","kaffir","kafir","kafirs","kaftan","kahuna","kaiser","kaka","kakas","kakis","kale","kales","kalif","kalifs","kaliph","kalium","kalpa","kalpas","kame","kames","kanas","kanji","kanjis","kansan","kansas","kaolin","kapok","kapoks","kappa","kappas","kaput","kaputt","karat","karate","karats","karen","karma","karmas","karmic","karst","karsts","kart","karts","kasha","kashas","kayak","kayaks","kayo","kayoed","kayoes","kayos","kays","kazoo","kazoos","keats","kebab","kebabs","kebob","kebobs","kedge","kedged","kedges","keel","keeled","keeler","keels","keen","keened","keener","keenly","keens","keep","keeper","keeps","kefir","kefirs","keg","kegler","kegs","keloid","kelp","kelped","kelpie","keltic","kelts","kelvin","ken","kendo","kendos","kenned","kennel","keno","kenos","kens","kent","kenya","kepi","kepis","kept","kerb","kerbed","kerbs","kerf","kerfed","kerfs","kern","kerned","kernel","kerns","kerry","ketch","ketone","kettle","kevels","kevils","key","keyage","keying","keyman","keypad","keys","keyset","keyway","khaki","khakis","khalif","khan","khans","khats","kibble","kibosh","kick","kicked","kicker","kickup","kid","kidded","kidder","kiddie","kiddo","kiddos","kiddy","kidnap","kidney","kids","kiefs","kiev","kike","kill","killed","killer","kills","kiln","kilned","kilns","kilo","kilt","kilted","kilter","kiltie","kilts","kilty","kimono","kin","kind","kinder","kindle","kindly","kinds","kine","kinema","kines","king","kinged","kingly","kings","kink","kinked","kinks","kins","kiosk","kiosks","kip","kipper","kips","kirk","kirned","kirsch","kirtle","kishka","kismet","kiss","kissed","kisser","kisses","kist","kit","kite","kited","kiter","kiters","kites","kith","kiths","kiting","kits","kitsch","kitted","kitten","klans","klatch","klaxon","kludge","knack","knacks","knaps","knave","knaves","knead","kneads","knee","kneed","kneel","kneels","knees","knell","knells","knelt","knew","knife","knifed","knifer","knifes","knight","knish","knit","knits","knives","knob","knobby","knobs","knock","knocks","knot","knots","knotty","knout","knouts","know","knower","known","knowns","knows","knox","knurl","knurls","knurly","koala","koalas","koan","kobold","kohl","kohls","kola","kolas","kong","kopeck","kopek","kopeks","kopje","kopjes","koran","korea","korean","koruna","koruny","kosher","koto","kowtow","kraal","kraals","kraft","krafts","krait","kraits","kraken","kraut","krauts","krebs","krill","krills","kris","krises","krona","krone","kronen","kroner","kuchen","kulak","kulaks","kumiss","kung","kuwait","kvetch","kwacha","kwhr","kyat","kyats","kyrie","kyries","laager","lab","label","labels","labia","labial","labile","labium","labor","labors","labour","labs","lac","lace","laced","lacer","lacers","laces","lacey","lacier","lacily","lacing","lack","lacked","lacker","lackey","lacks","lactic","lacuna","lacy","lad","ladder","laddie","lade","laded","laden","ladens","lader","laders","lades","ladies","lading","ladle","ladled","ladler","ladles","ladron","lads","lady","lag","lager","lagers","lagged","lagger","lagoon","lags","laguna","lahore","laical","laid","lain","lair","laird","lairds","laired","lairs","lait","laity","lake","laked","laker","lakers","lakes","lakier","laking","laky","lam","lama","lamas","lamb","lambda","lambed","lamber","lambie","lambs","lame","lamed","lameds","lamely","lament","lamer","lames","lamest","lamia","lamias","lamina","laming","lammed","lamp","lamped","lamps","lams","lanai","lanais","lance","lanced","lancer","lances","lancet","land","landau","landed","lander","lands","lane","lanes","langur","lank","lanker","lankly","lanky","laos","lap","lapdog","lapel","lapels","lapful","lapin","lapis","lapp","lapped","lapper","lappet","lapps","laps","lapse","lapsed","lapser","lapses","lapsus","laptop","larch","lard","larded","larder","lards","lardy","lares","large","larger","larges","largo","largos","lariat","lark","larked","larker","larks","larky","larrup","larry","larums","larva","larvae","larvas","larynx","lascar","lased","laser","lasers","lases","lash","lashed","lasher","lashes","lasing","lass","lasses","lassie","lasso","lassos","last","lasted","laster","lastly","lasts","latch","late","lated","lateen","lately","laten","latens","latent","later","latest","latex","lath","lathe","lathed","lather","lathes","laths","latin","latino","latins","latish","latten","latter","latvia","laud","laude","lauded","lauder","lauds","laugh","laughs","launch","laura","lauras","laurel","lava","lavabo","lavage","lavas","lave","laved","laver","lavers","laves","laving","lavish","law","lawed","lawful","lawing","lawman","lawmen","lawn","laws","lawyer","lax","laxest","laxity","lay","layed","layer","layers","laying","layman","laymen","layoff","layout","lays","laze","lazed","lazes","lazied","lazier","lazies","lazily","lazing","lazy","lbs","lea","leach","leachy","lead","leaded","leaden","leader","leads","leady","leaf","leafed","leafs","leafy","league","leak","leaked","leaker","leaks","leaky","leal","lean","leaned","leaner","leanly","leans","leant","leap","leaped","leaper","leaps","leapt","lear","learn","learns","learnt","leary","leas","lease","leased","leaser","leases","leash","least","leasts","leave","leaved","leaven","leaver","leaves","lech","lecher","leches","lect","lector","led","ledge","ledger","ledges","ledgy","lee","leech","leeds","leek","leeks","leer","leered","leers","leery","lees","leeway","left","lefter","lefts","lefty","leg","legacy","legal","legals","legate","legato","legend","leger","legged","legion","legit","legits","legman","legmen","legs","legume","lei","leis","lek","leks","leman","lemans","lemma","lemmas","lemon","lemons","lemony","lemur","lemurs","lend","lender","lends","length","lenin","lenity","lens","lense","lensed","lenses","lent","lenten","lentic","lentil","lento","lentos","leo","leon","leone","leones","leos","leper","lepers","lepton","lese","lesion","less","lessee","lessen","lesser","lesson","lessor","lest","let","letch","lethal","lethe","lethes","lets","letted","letter","letup","letups","leu","lev","leva","levant","levee","leveed","levees","level","levels","lever","levers","levi","levied","levier","levies","levin","levis","levity","levo","levy","lewd","lewder","lewdly","lewis","lex","ley","leys","liable","liaise","liana","lianas","lianes","liar","liars","lib","libbed","libber","libel","libels","liber","libers","libido","libra","libras","libre","libris","libs","libya","lice","lichee","lichen","lichi","lichis","licht","licit","lick","licked","licker","licks","lictor","lid","lidar","lidded","lido","lidos","lids","lie","lied","lieder","lief","liefer","liefly","liege","lieges","lien","lienal","lienee","lienor","liens","lier","liers","lies","lieu","lieut","life","lifer","lifers","lift","lifted","lifter","lifts","ligate","liger","light","lights","lignum","like","liked","likely","liken","likens","liker","likers","likes","likest","liking","lilac","lilacs","lilied","lilies","lilt","lilted","lilts","lily","lim","lima","limas","limb","limbed","limber","limbic","limbo","limbos","limbs","limby","lime","limed","limens","limes","limey","limeys","limier","liming","limit","limits","limn","limned","limner","limns","limo","limos","limp","limped","limper","limpet","limpid","limply","limps","limy","linac","linacs","linage","linda","linden","lindy","line","lineal","linear","lined","linen","linens","lineny","liner","liners","lines","lineup","liney","ling","lingam","lingas","linger","lingo","lings","lingua","linier","link","linked","linker","links","linkup","linky","linnet","lino","linos","lins","linsey","lint","lintel","linter","lints","linty","linum","liny","lion","lions","lip","lipase","lipid","lipids","lipped","lipper","lippy","lips","liq","liquor","lira","liras","lire","lisbon","lisle","lisles","lisp","lisped","lisper","lisps","lissom","list","listed","listen","lister","lists","lit","litany","litchi","lite","liter","liters","lites","lith","lithe","lither","lithic","litho","lithos","litmus","litre","litres","lits","litten","litter","little","live","lived","lively","liven","livens","liver","livers","livery","lives","livest","living","livre","livres","lizard","llama","llamas","llano","llanos","loach","load","loaded","loader","loads","loaf","loafed","loafer","loafs","loam","loamed","loams","loan","loaned","loaner","loans","loath","loathe","loaves","lob","lobar","lobbed","lobber","lobby","lobe","lobed","lobes","lobo","lobos","lobs","lobule","loc","local","locale","locals","locate","loch","lochs","loci","lock","locked","locker","locket","locks","lockup","loco","locoed","locoes","locos","locus","locust","lode","loden","lodes","lodge","lodged","lodger","lodges","loess","loft","lofted","lofter","lofts","lofty","log","logan","logans","loge","loges","logged","logger","loggia","loggie","loggy","logia","logic","logics","logier","logily","logjam","logo","logos","logs","logway","logy","loin","loins","loiter","loll","lolled","loller","lollop","london","lone","lonely","loner","loners","long","longed","longer","longes","longly","longs","longue","loo","loofa","loofah","loofas","loofs","look","looked","looker","lookup","loom","loomed","looms","loon","looney","loons","loony","loop","looped","looper","loops","loopy","loos","loose","loosed","loosen","looser","looses","loot","looted","looter","loots","lop","lope","loped","loper","lopers","lopes","loping","lopped","lopper","loppy","lops","loquat","loran","lorans","lord","lorded","lordly","lords","lore","lores","lories","loris","lorn","lory","lose","loser","losers","loses","losing","loss","losses","lossy","lost","lot","loth","lotion","lotos","lots","lotted","lotto","lottos","lotus","loud","louden","louder","loudly","lough","louie","louies","louis","louise","lounge","loungy","loup","loupe","louped","loupes","loups","lour","lours","loury","louse","loused","louses","lousy","lout","louted","louts","louver","louvre","lovage","love","loved","lovely","lover","lovers","loves","loving","low","lowboy","lowed","lower","lowers","lowery","lowest","lowing","lowish","lowly","lows","lox","loxes","loxing","loyal","lpm","luau","luaus","lubber","lube","lubes","lucent","lucern","luces","lucia","lucid","lucite","luck","lucked","luckie","lucks","lucky","lucre","lucres","lucy","ludwig","luff","luffed","luffs","lug","luge","luges","lugged","lugger","lugs","luke","lull","lulled","lumbar","lumber","lumen","lumens","lumina","lump","lumped","lumpen","lumper","lumps","lumpy","luna","lunacy","lunar","lunars","lunas","lunate","lunch","lune","lunes","lunet","lunets","lung","lunge","lunged","lungee","lunger","lunges","lungs","lunier","lunies","lunk","lunker","lunks","luny","lupin","lupine","lupins","lurch","lure","lured","lurer","lurers","lures","luring","lurk","lurked","lurker","lurks","lush","lushed","lusher","lushes","lushly","lust","lusted","luster","lustre","lusts","lusty","lute","luteal","luted","lutes","luteum","luther","luting","lutist","lux","luxe","luxes","lycee","lycees","lyceum","lychee","lye","lyes","lying","lyings","lymph","lymphs","lynx","lynxes","lyrate","lyre","lyres","lyric","lyrics","lyrism","lyrist","lysed","lyses","lysin","lysine","lysing","lysins","mac","macaw","macaws","mace","maced","macer","macers","maces","mach","macho","machos","machs","macing","mack","macks","macle","macro","macron","macros","macs","macula","mad","madam","madame","madams","madcap","madded","madden","madder","made","madly","madman","madmen","madras","madre","madres","madrid","mads","maenad","mafia","mafias","mag","mage","mages","maggie","maggot","magi","magic","magics","magma","magmas","magnet","magnum","magpie","mags","maguey","magus","magyar","mahout","maid","maiden","maids","mail","mailed","mailer","mails","maim","maimed","maimer","maims","main","maine","mainly","mains","maist","maitre","maize","maizes","major","majora","majors","make","maker","makers","makes","makeup","making","mal","mala","malady","malawi","malay","malaya","malays","male","males","mali","malice","malign","maline","mall","malled","mallei","mallet","mallow","malls","malt","malta","malted","malts","malty","mama","mamas","mamba","mambas","mambo","mambos","mameys","mamie","mamies","mamma","mammal","mammas","mammey","mammie","mammon","mammy","man","manage","manana","manas","manchu","mane","maned","manege","manes","manful","mange","manger","manges","mangey","mangle","mango","mangos","mangy","mania","maniac","manias","manic","manics","manila","manioc","manly","manna","mannas","manned","manner","manor","manors","manos","manque","mans","manse","manses","manta","mantas","mantel","mantes","mantic","mantid","mantis","mantle","mantra","mantua","manual","manure","manus","manx","many","mao","maoism","maoist","maori","maoris","map","maple","maples","mapped","mapper","maps","mar","maraca","maraud","marble","marbly","marc","marcel","march","marcs","mardi","mare","mares","marge","marges","margin","maria","marie","marina","marine","marish","mark","marked","marker","market","markka","marks","markup","marl","marled","marlin","marmot","maroon","marque","marred","marrer","marron","marrow","marry","mars","marse","marses","marsh","marshs","marshy","mart","marted","marten","martha","martin","marts","martyr","marvel","marx","mary","mas","mascon","mascot","maser","masers","mash","mashed","masher","mashes","mashie","mashy","mask","masked","masker","masks","mason","masons","masque","mass","massa","massas","masse","massed","masses","massif","massy","mast","masted","master","mastic","masts","mat","mate","mated","mater","maters","mates","matey","mateys","math","maths","matin","mating","matins","matrix","matron","mats","matt","matte","matted","matter","mattes","matts","mature","matzo","matzoh","matzos","maul","mauled","mauler","mauls","maundy","maut","mauve","mauves","maven","mavens","mavin","mavins","maw","maws","max","maxi","maxim","maxima","maxims","maxis","maxixe","may","maya","mayan","mayans","mayas","maybe","mayday","mayest","mayfly","mayhap","mayhem","maying","mayo","mayor","mayors","maypop","mays","mayst","mayvin","maze","mazed","mazel","mazer","mazers","mazes","mazier","mazily","mazing","mazy","mea","mead","meadow","meads","meager","meal","mealie","meals","mealy","mean","meaner","meanie","meanly","means","meant","meany","meas","measle","measly","meat","meats","meaty","mecca","meccas","mech","mecum","mecums","medal","medals","meddle","media","medial","median","medias","medic","medico","medics","medium","medius","medley","medusa","meed","meeds","meek","meeker","meekly","meet","meeter","meetly","meets","meg","megohm","mein","mekong","melba","meld","melded","melder","melds","melee","melees","mellow","melody","melon","melons","melt","melted","melter","melton","melts","member","memo","memoir","memory","memos","men","menace","menads","menage","mend","mended","mendel","mender","mends","menhir","menial","meninx","mens","mensal","mensas","mensch","mensed","menses","mental","menthe","mentis","mentor","menu","menus","meow","meowed","meows","mer","mercer","merci","mercy","mere","merely","merer","meres","merest","merge","merged","merger","merges","merino","merit","merits","merlin","merlon","merman","mermen","merry","mesa","mesas","mescal","mesh","meshed","meshes","meshy","meson","mesons","mess","messed","messes","messrs","messy","met","meta","metal","metals","mete","meted","meteor","meter","meters","metes","method","methyl","metier","meting","metre","metred","metres","metric","metro","metros","mettle","mew","mewed","mewing","mewl","mewled","mewler","mewls","mews","mexico","mezcal","mfd","mfg","miami","miaou","miaous","miaow","miaows","miasm","miasma","miasms","miaul","mibs","mica","micas","mice","mick","mickey","mickle","micro","micron","micros","mid","midair","midas","midday","midden","middle","middy","midge","midges","midget","midgut","midi","midis","midleg","midrib","mids","midst","midsts","midway","mien","miens","miff","miffed","mig","might","mights","mighty","mignon","migs","mikado","mike","mikes","mikveh","mil","milady","milage","milan","mild","milden","milder","mildew","mildly","mile","miler","milers","miles","milieu","milk","milked","milker","mill","mille","milled","miller","milles","millet","mills","milord","milos","mils","milt","milton","mime","mimed","mimeo","mimeos","mimer","mimers","mimes","miming","mimosa","min","mince","minced","mincer","minces","mind","minded","minder","minds","mine","mined","miner","miners","mines","ming","mingle","mingy","mini","minim","minima","minims","mining","minion","minis","mink","minnie","minnow","minny","minor","minora","minors","mins","mint","minted","minter","mints","minty","minuet","minus","minute","minx","minxes","minyan","miosis","miotic","mirage","mire","mired","mires","miriam","mirier","miring","mirk","mirks","mirky","mirth","mirths","mirv","miry","misact","misadd","misaim","misc","miscue","miscut","misdid","misdo","mise","miser","misers","misery","misfit","mishap","mislay","misled","miso","misos","miss","missal","missed","misses","missis","missus","mist","misted","mister","mists","misty","misuse","mite","miter","miters","mites","mitier","mitral","mitre","mitred","mitres","mitt","mitten","mix","mixer","mixers","mixes","mixing","mixt","mixup","mixups","mizens","mizzen","mizzle","mkt","mnemic","moan","moaned","moans","moas","moat","moated","moats","mob","mobbed","mobber","mobcap","mobil","mobile","mobs","mocha","mochas","mock","mocked","mocker","mocks","mockup","mod","modal","mode","model","models","modem","modems","modern","modes","modest","modi","modify","modish","modo","mods","modula","module","modulo","modus","mogul","moguls","mohair","mohawk","moi","moiety","moil","moiled","moiler","moils","moire","moires","moist","molar","molars","mold","molded","molder","molds","moldy","mole","moles","molest","molies","moline","moll","mollie","molls","moloch","molt","molted","molten","molter","molts","moly","mom","moment","momism","momma","mommas","moms","mon","monaco","monad","monads","monday","monde","mondo","mondos","money","moneys","monger","mongol","mongst","monied","monies","monish","monism","monist","monk","monkey","mono","monody","monos","monroe","mons","monte","montes","month","months","mony","moo","mooch","mood","moods","moody","mooed","mooing","moola","moolah","moolas","moon","mooned","moonie","moons","moony","moor","moore","moored","moors","moory","moos","moose","moot","mooted","mooter","moots","mop","mope","moped","mopeds","moper","mopers","mopes","mopey","mopier","moping","mopish","mopped","mopper","moppet","mops","mopy","moral","morale","morals","morass","moray","morays","morbid","more","morel","morels","mores","morgan","morgue","mormon","morn","morns","moron","morons","morose","morph","morpho","morphs","morris","morrow","morse","morsel","mort","mortal","mortar","mortem","mortis","mosaic","moscow","moses","mosey","moseys","mosks","moslem","mosque","moss","mossed","mosser","mosses","mossy","most","mostly","mosts","mot","mote","motel","motels","motes","motet","motets","motey","moth","mother","moths","mothy","motif","motifs","motile","motion","motive","motley","motor","motors","mots","mottle","motto","mottos","moue","moues","mould","moulds","mouldy","moulin","moult","moults","mound","mounds","mount","mounts","mourn","mourns","mouse","moused","mouser","mouses","mousey","mousse","mousy","mouth","mouths","mouthy","mouton","move","mover","movers","moves","movie","movies","moving","mow","mowed","mower","mowers","mowing","mown","mows","moxa","moxas","moxie","moxies","mozart","mpg","mph","msec","msg","mss","much","muches","muck","mucked","mucker","mucks","mucous","mucus","mud","mudcap","mudder","muddle","mudra","mudras","muds","muff","muffed","muffin","muffle","mufti","muftis","mug","mugged","mugger","mugs","mulct","mulcts","mule","muled","mules","muley","muleys","mulier","muling","mulish","mull","mulla","mullah","mulled","mullen","muller","mullet","multi","multo","mum","mumble","mumm","mummer","mump","mumped","mumper","mums","munch","munchy","munich","muon","muonic","muons","mural","murals","murder","murine","muring","murk","murker","murphy","muscat","muscle","muscly","muse","mused","muser","musers","muses","museum","mush","mushed","musher","mushes","mushy","music","musics","musing","musk","muskeg","musket","muskie","musks","muslim","muslin","muss","mussed","mussel","musses","must","musted","muster","musts","musty","mutant","mutate","mute","muted","mutely","muter","mutes","mutest","muting","mutiny","mutism","mutt","mutter","mutton","mutts","mutual","mutuel","mux","mylar","myna","mynah","mynahs","mynas","myope","myopes","myopia","myopic","myosin","myriad","myrrh","myrtle","myself","mystic","myth","mythic","mythos","myths","nab","nabbed","nabob","nabobs","nabs","nacre","nacred","nacres","nadir","nadirs","nae","nag","nagged","nagger","nags","naiad","naiads","naif","naifs","nail","nailed","nailer","nails","naive","naked","nam","name","named","namely","namer","namers","names","naming","nan","nance","nances","nancy","nannie","nap","napalm","nape","napery","napes","napkin","naples","napped","napper","nappes","nappie","nappy","naps","narc","narco","narcos","narcs","nard","nares","naris","nark","narked","narks","narrow","narwal","nary","nasa","nasal","nasals","nasty","natal","natant","nates","nation","native","natl","nato","natron","natter","natty","nature","naught","nausea","naut","nautch","navaho","navajo","naval","nave","navel","navels","naves","navies","navy","nay","nays","nazi","nazify","nazis","nazism","neap","neaps","near","nearby","neared","nearer","nearly","nears","neat","neaten","neater","neath","neatly","neats","neb","nebs","nebula","nebule","neck","necked","necks","nectar","nee","need","needed","needer","needle","needs","needy","negate","negro","negus","nehru","neigh","neighs","nelson","neon","neoned","neons","nepal","nephew","nerd","nerds","nereid","nereis","nerts","nerve","nerved","nerves","nervy","ness","nest","nested","nester","nestle","nestor","nests","net","nether","nets","netted","netter","nettle","nettly","netty","neural","neuron","neuter","nevada","never","nevi","nevoid","nevus","new","newark","newel","newels","newer","newest","newish","news","newsy","newt","newton","newts","next","nextly","nexus","niacin","nib","nibbed","nibble","nibs","nice","nicely","nicer","nicest","nicety","niche","niched","niches","nick","nicked","nickel","nicker","nickle","nicks","niece","nieces","nifty","nigger","niggle","nigh","nighed","nigher","nighs","night","nights","nighty","nihil","nihils","nil","nile","nill","nilled","nils","nim","nimble","nimbly","nimbus","nims","nine","nines","ninety","ninth","ninths","nip","nipped","nipper","nipple","nippon","nippy","nips","nisei","niseis","nisi","nit","niter","niters","nitre","nitres","nitric","nitro","nitros","nits","nitty","nitwit","nix","nixed","nixes","nixie","nixies","nixy","noah","nob","nobble","nobby","nobel","noble","nobler","nobles","nobody","nobs","nock","nocked","nocks","nod","nodal","nodded","nodder","noddle","noddy","node","nodes","nods","nodule","nodus","noel","noels","noes","noesis","noetic","nog","noggin","noggs","nogs","noir","noire","noires","noise","noised","noises","noisy","nolle","nolo","nom","nomad","nomads","nome","nomism","noms","non","nonage","nonce","nonces","noncom","none","nonego","nones","nonfat","nonman","nonmen","noodle","nook","noon","noons","noose","noosed","nooser","nooses","nope","nor","nordic","norm","norma","normal","norman","normed","norms","norse","north","norths","norway","nos","nose","nosed","noses","nosey","nosh","noshed","nosher","noshes","nosier","nosily","nosing","noster","nosy","not","nota","notal","notary","notate","notch","notchy","note","noted","noter","noters","notes","notice","notify","noting","notion","notre","nots","nougat","nought","noun","nounal","nouns","nous","nova","novae","novas","novel","novels","novena","novice","novo","now","noway","noways","nowise","nows","nozzle","nth","nuance","nub","nubbin","nubble","nubbly","nubby","nubia","nubias","nubile","nubs","nuclei","nude","nudely","nuder","nudes","nudest","nudge","nudged","nudger","nudges","nudie","nudies","nudism","nudist","nudity","nudnik","nugget","nuke","nukes","null","nulled","nullo","nulls","numb","numbed","number","numbly","numbs","nun","nuncio","nuncle","nuns","nurse","nursed","nurser","nurses","nut","nutlet","nutmeg","nutria","nuts","nutted","nutter","nybble","nylon","nylons","nymph","nympho","nymphs","oaf","oafish","oafs","oak","oaken","oaks","oakum","oakums","oar","oared","oaring","oars","oases","oasts","oat","oaten","oater","oaters","oath","oaths","oats","obeah","obeahs","obeli","obey","obeyed","obeyer","obeys","obi","obis","obit","obiter","obits","object","oblate","oblige","oblong","oboe","oboes","oboist","obol","obols","obsess","obtain","obtuse","occult","occupy","occur","occurs","ocean","oceans","ocelot","ocher","ochers","ochery","ochre","ochred","ochres","octad","octads","octal","octane","octant","octave","octavo","octet","octets","octopi","octyl","octyls","ocular","oculi","oculus","odd","odder","oddest","oddish","oddity","oddly","odds","ode","odeon","odeons","odes","odessa","odic","odin","odious","odium","odiums","odor","odored","odors","odour","odours","odyl","oeuvre","ofay","ofays","off","offal","offals","offcut","offed","offend","offer","offers","office","offing","offish","offpay","offs","offset","oft","often","ofter","oftest","ogee","ogees","ogham","ogle","ogled","ogler","oglers","ogles","ogling","ogre","ogres","ogress","ogrish","ohed","ohing","ohio","ohioan","ohm","ohmage","ohms","oho","ohs","oidium","oil","oilcan","oilcup","oiled","oiler","oilers","oilier","oiling","oilman","oilmen","oils","oilway","oily","oink","oinked","oinks","ojibwa","okapi","okapis","okay","okayed","okays","okie","okra","okras","old","olden","older","oldest","oldie","oldies","oldish","olds","ole","oleo","oleos","oles","oleums","olio","olios","olive","oliver","olives","olivia","olla","ollas","ology","omaha","omahas","ombre","ombres","omega","omegas","omelet","omen","omened","omens","omit","omits","omnium","oms","onager","once","onces","one","oneida","onery","ones","onion","onions","only","onrush","onset","onsets","onside","onto","onus","onuses","onward","onyx","onyxes","oocyte","oodles","ooh","oohed","oohing","oohs","oolite","oolith","oology","oolong","oomph","oomphs","oops","ooze","oozed","oozes","oozier","oozily","oozing","oozy","opal","opals","opaque","ope","opec","open","opened","opener","openly","opens","opera","operas","opes","opiate","opine","opined","opiner","opines","opium","opiums","opp","oppose","oppugn","ops","opt","opted","optic","optics","optima","opting","option","opts","opus","opuses","oracle","oral","orally","orals","orang","orange","orangs","orangy","orate","orated","orates","orator","orb","orbed","orbing","orbit","orbits","orbs","orc","orca","orcas","orch","orchid","orchis","orcs","ordain","ordeal","order","orders","ordo","ordos","ordure","ore","oread","oregon","ores","organ","organa","organs","orgasm","orgeat","orgiac","orgic","orgies","orgy","oriel","oriels","orient","orig","origin","oriole","orion","orison","ormolu","ornate","ornery","orphan","orphic","orrery","orris","ors","ort","orth","ortho","orts","orwell","oryx","oryxes","osage","osages","osaka","oscar","oscars","oscula","oscule","osier","osiers","oslo","osmic","osmium","osmose","osprey","ossea","osteal","ostia","ostium","ostler","ostomy","oswego","other","others","otic","otiose","ottawa","otter","otters","otto","ouch","ouches","ought","oughts","oui","ounce","ounces","our","ours","ousel","ousels","oust","ousted","ouster","ousts","out","outage","outbid","outbox","outcry","outdid","outed","outer","outers","outfit","outfox","outgas","outgun","outhit","outing","outlaw","outlay","outlet","outlie","output","outran","outre","outrun","outs","outset","outwit","ouzel","ouzels","ova","oval","ovally","ovals","ovary","ovate","oven","ovens","over","overdo","overed","overly","overs","overt","ovid","ovine","ovines","ovoid","ovoids","ovular","ovule","ovules","ovum","owe","owed","owes","owing","owl","owlet","owlets","owlish","owls","own","owned","owner","owners","owning","owns","oxalic","oxalis","oxbow","oxbows","oxcart","oxen","oxes","oxeye","oxeyes","oxford","oxgall","oxide","oxides","oxlip","oxlips","oxtail","oxter","oxters","oxy","oxygen","oyer","oyers","oyes","oyez","oyster","ozone","ozones","ozonic","pablum","pac","pace","paced","pacer","pacers","paces","pacify","pacing","pack","packed","packer","packet","packs","pacs","pact","pacta","pacts","pad","padded","paddle","padre","padres","padri","pads","paean","paeans","paella","paeons","pagan","pagans","page","paged","pagers","pages","paging","pagoda","paid","pail","pails","pain","paine","pained","pains","paint","paints","painty","pair","paired","pairs","paisan","pal","palace","palate","pale","paled","palely","paler","pales","palest","palets","palier","paling","palish","pall","palled","pallet","pallid","pallor","palls","pally","palm","palmed","palmer","palms","palmy","palpal","palps","palpus","pals","palsy","palter","paltry","pampa","pampas","pamper","pan","panama","panda","pandas","pander","pandit","pane","paned","panel","panels","panes","panful","pang","panga","panged","pangs","panic","panics","panier","panned","pans","pansy","pant","panted","pantie","pantry","pants","panty","panzer","pap","papa","papacy","papain","papal","papas","papaw","papaws","paper","papers","papery","papier","papist","paps","papua","papuan","papule","papyri","par","para","parade","paras","parcel","parch","pard","pardon","pare","pared","parent","parer","parers","pares","pareve","pariah","paring","paris","parish","parity","park","parka","parkas","parked","parker","parks","parlay","parley","parlor","parody","parole","parols","parred","parrot","parry","pars","parse","parsec","parsed","parser","parses","parson","part","parte","parted","parti","partly","parts","party","parve","pas","pascal","paseo","paseos","pasha","pashas","pashes","paso","pass","passe","passed","passee","passel","passer","passes","passim","past","pasta","pastas","paste","pasted","pastel","paster","pastes","pastor","pastry","pasts","pasty","pat","patch","patchy","pate","pated","paten","patens","patent","pater","paters","pates","path","pathos","paths","patina","patio","patios","patly","patois","patrol","patron","pats","patsy","patted","pattee","patter","pattie","paul","paunch","pauper","pause","paused","pauser","pauses","pavan","pavane","pavans","pave","paved","paver","pavers","paves","paving","pavlov","paw","pawed","pawer","pawers","pawing","pawl","pawls","pawn","pawned","pawnee","pawner","pawnor","pawns","paws","pax","paxes","pay","payed","payee","payees","payer","payers","paying","paynim","payoff","payola","payors","payout","pays","pbx","pct","pea","peace","peaced","peaces","peach","peachy","peahen","peak","peaked","peaks","peaky","peal","pealed","peals","pean","peanut","pear","pearl","pearls","pearly","pears","peart","peas","pease","peases","peat","peats","peavey","peavy","pebble","pebbly","pecan","pecans","peck","pecked","pecker","pecks","pectic","pectin","ped","pedal","pedals","pedant","peddle","pedes","pedlar","pedler","pedro","pedros","peds","pee","peed","peeing","peek","peeked","peeks","peel","peeled","peeler","peels","peen","peened","peens","peep","peeped","peeper","peeps","peer","peered","peers","peery","pees","peeve","peeved","peeves","peewee","peewit","peg","pegbox","pegged","pegs","peins","pekans","peke","pekes","pekin","peking","pekins","pekoe","pekoes","pelage","pelf","pellet","pelt","pelted","pelter","pelts","pelves","pelvic","pelvis","pen","penal","penang","pence","pencil","pend","pended","pends","penes","penile","penis","penman","penna","pennae","penned","penner","penney","pennon","penny","pens","pense","pent","pentad","penult","penury","peon","peones","peons","peony","people","pep","peplum","pepped","pepper","peps","pepsi","pepsin","peptic","per","perch","perdu","perdue","perdus","perdy","pere","peres","peril","perils","period","peris","perish","perk","perked","perks","perm","permit","perms","perry","persia","person","pert","perter","pertly","peru","peruke","peruse","peseta","pesky","peso","pesos","pest","pester","pestle","pests","pet","petal","petals","petard","peter","peters","petit","petite","petits","petrel","petri","petro","petrol","pets","petted","petter","petty","pew","pewee","pewees","pewit","pewits","pews","pewter","peyote","peyotl","phage","phages","phalli","pharm","phase","phased","phaser","phases","phasic","phenix","phenol","phew","phi","phial","phials","philol","philos","phlegm","phloem","phobia","phobic","phoebe","phonal","phone","phoned","phones","phoney","phonic","phono","phonos","phons","phony","phooey","photic","photo","photog","photon","photos","phrase","phyla","phylae","phylum","phys","physic","physis","pianic","piano","pianos","piazze","pica","picaro","picas","pick","pickax","picked","picker","picket","pickle","picks","pickup","picky","picot","picots","pics","piddle","pidgin","pie","piece","pieced","piecer","pieces","pied","pieing","pier","pierce","pierre","piers","pies","pieta","pietas","piety","piffle","pig","pigeon","pigged","piggie","piggin","piglet","pignet","pignut","pigpen","pigs","pigsty","pike","piked","piker","pikers","pikes","piking","pilaf","pilaff","pilafs","pilar","pilate","pile","piled","piles","pileup","pilfer","piling","pill","pillar","pilled","pillow","pills","pilose","pilot","pilots","pilous","pima","pimas","pimp","pimped","pimple","pimply","pimps","pin","pinata","pincer","pinch","pine","pineal","pined","pines","ping","pinged","pinger","pings","pinier","pining","pinion","pink","pinked","pinker","pinkie","pinkly","pinko","pinkos","pinks","pinky","pinna","pinnae","pinnal","pinnas","pinned","pinner","pinole","pinon","pinons","pins","pint","pinta","pintas","pinto","pintos","pints","pinup","pinups","piny","pinyon","pion","pionic","pions","pious","pip","pipage","pipe","piped","piper","pipers","pipes","pipet","pipets","pipier","piping","pipit","pipits","pipkin","pipped","pips","pipy","pique","piqued","piques","piquet","piracy","pirana","pirate","pirog","pirogi","pisa","pisces","pish","pished","pishes","piss","pissed","pisses","pistil","pistol","piston","pit","pita","pitas","pitch","pitchy","pith","pithed","piths","pithy","pitied","pitier","pities","pitman","pitmen","piton","pitons","pits","pitsaw","pitted","pitter","pity","pius","pivot","pivots","pix","pixel","pixels","pixes","pixie","pixies","pixy","pizza","pizzas","pizzle","pkg","place","placed","placer","places","placid","plack","placks","plagal","plages","plague","plaguy","plaice","plaid","plaids","plain","plains","plaint","plait","plaits","plan","planar","plane","planed","planer","planes","planet","plank","planks","plans","plant","plants","plaque","plash","plashy","plasm","plasma","plasms","plat","plate","plated","platen","plater","plates","plato","plats","platy","platys","play","playa","playas","played","player","plays","plaza","plazas","plea","plead","pleads","pleas","please","pleat","pleats","plebe","plebes","plebs","pled","pledge","plena","plenty","plenum","pleura","plexus","pliant","plied","plier","pliers","plies","plight","plink","plinks","plinth","plisse","plod","plods","plonk","plonks","plop","plops","plot","plots","plough","plover","plow","plowed","plower","plows","ploy","ployed","ploys","pluck","plucks","plucky","plug","plum","plumb","plumbs","plume","plumed","plumes","plummy","plump","plumps","plums","plumy","plunge","plunk","plunks","plural","plus","pluses","plush","plushy","pluto","pluton","ply","plyer","plyers","plying","pneuma","poach","poachy","pock","pocked","pocket","poco","pod","podded","podium","pods","poem","poems","poesy","poet","poetic","poetry","poets","pogrom","poi","poilu","poilus","point","pointe","points","pointy","poise","poised","poiser","poises","poison","poke","poked","poker","pokers","pokes","pokey","pokeys","pokier","pokies","pokily","poking","poky","pol","poland","polar","polars","polder","pole","poleax","poled","poler","polers","poles","police","policy","poling","polio","polios","polis","polish","polit","polite","polity","polk","polka","polkas","poll","polled","pollee","pollen","poller","polloi","polo","pols","poly","polyp","polyps","polys","pomade","pome","pomes","pommel","pomp","pompom","pompon","ponce","ponces","poncho","pond","ponder","ponds","pone","pones","pong","pongee","pongid","ponied","ponies","pons","pontes","ponton","pony","pooch","poodle","pooh","poohed","poohs","pool","pooled","pools","poop","pooped","poops","poor","poorer","poorly","pop","pope","popery","popes","popeye","popgun","popish","poplar","poplin","poppa","poppas","popped","popper","poppet","pops","populi","porch","pore","pored","pores","poring","pork","porker","porks","porn","porno","pornos","porns","porose","porous","port","portal","ported","porter","portly","ports","pose","posed","poser","posers","poses","poseur","posh","posher","poshly","posies","posing","posit","posits","posse","posses","possum","post","postal","posted","poster","posts","posy","pot","potage","potash","potato","potboy","poteen","potent","potful","pother","potion","potman","potmen","potpie","pots","potsie","potsy","potted","potter","potty","pouch","pouchy","pouf","poufed","pouff","pouffe","pouffs","poufs","poult","poults","pounce","pound","pounds","pour","poured","pourer","pours","pout","pouted","pouter","pouts","pouty","pow","powder","power","powers","pows","pox","poxes","poxing","ppd","prague","praise","pram","prams","prana","prance","prank","pranks","praos","prat","prate","prated","prater","prates","prats","praus","prawn","prawns","praxes","praxis","pray","prayed","prayer","prays","pre","preach","preamp","prearm","precis","precox","precut","preen","preens","prefab","prefer","prefix","prelim","premed","premie","premix","prep","prepay","preps","pres","preset","press","prest","presto","pretor","pretty","prevue","prewar","prey","preyed","preyer","preys","price","priced","pricer","prices","pricey","prick","pricks","pricky","pricy","pride","prided","prides","pried","prier","priers","pries","priest","prig","prigs","prim","prima","primal","primas","prime","primed","primer","primes","primly","primo","primos","primp","primps","prims","primus","prince","prink","prinks","print","prints","prior","priors","priory","prise","prised","prises","prism","prisms","prison","priss","prissy","privet","prix","prize","prized","prizer","prizes","pro","proas","probe","probed","prober","probes","proc","prod","prods","proem","proems","prof","profit","profs","progs","prole","proles","prolix","prolog","prom","prompt","proms","pron","prone","prong","prongs","pronto","proof","proofs","prop","propel","proper","propyl","pros","prose","prosed","proser","proses","prosit","prosy","protea","proton","proud","prove","proved","proven","prover","proves","prow","prowar","prowl","prowls","prows","prs","prude","prudes","prune","pruned","pruner","prunes","pry","pryer","pryers","prying","psalm","psalms","pseud","pseudo","psf","pshaw","pshaws","psi","psst","psych","psyche","psycho","psychs","pts","pub","pubes","pubic","public","pubs","puce","puces","puck","pucker","pucks","pud","puddle","puddly","puds","pueblo","puerto","puff","puffed","puffer","puffin","puffs","pug","pugged","pugs","puke","puking","pule","puled","puler","pulers","pules","puling","pull","pulled","puller","pullet","pulley","pulp","pulped","pulper","pulpit","pulps","pulpy","pulsar","pulse","pulsed","pulser","pulses","puma","pumas","pumice","pummel","pump","pumped","pumper","pumps","pun","punch","punchy","pundit","punier","punily","punish","punk","punker","punkey","punkie","punkin","punks","punky","punned","punner","puns","punt","punted","punter","punts","puny","pup","pupa","pupae","pupal","pupas","pupate","pupil","pupils","pupped","pups","purdah","purdas","pure","puree","pureed","purees","purely","purer","purest","purge","purged","purger","purges","purify","purim","purine","purins","purism","purist","purity","purl","purled","purls","purple","purply","purr","purred","purrs","purse","pursed","purser","purses","pursue","pursy","purvey","pus","push","pushed","pusher","pushes","pushup","pushy","puss","pusses","pussy","put","putoff","puton","putons","putout","putrid","puts","putsch","putt","putted","puttee","putter","pylon","pylons","pylori","pyre","pyres","pyric","pyrite","python","pyx","pyxes","pyxie","pyxies","pyxis","qed","qts","qty","qua","quack","quacks","quacky","quad","quads","quae","quag","quaggy","quahog","quai","quail","quails","quaint","quais","quake","quaked","quaker","quakes","quaky","qual","quale","qualm","qualms","qualmy","quam","quando","quant","quanta","quanti","quants","quark","quarks","quart","quarte","quarto","quarts","quartz","quasar","quash","quasi","quat","quatre","quaver","quay","quays","que","quean","queans","queasy","queazy","queen","queens","queer","queers","quell","quells","quem","quench","quern","querns","ques","quest","quests","queue","queuer","queues","quey","queys","quezal","qui","quia","quiche","quick","quicks","quid","quids","quiet","quieta","quieti","quiets","quill","quills","quilt","quilts","quince","quinsy","quint","quints","quip","quips","quipu","quipus","quire","quired","quires","quirk","quirks","quirt","quirts","quit","quite","quito","quits","quiver","quo","quod","quoin","quoins","quoit","quoits","quos","quota","quotas","quote","quoted","quoter","quotes","quoth","quotha","rabbet","rabbi","rabbis","rabbit","rabble","rabic","rabid","rabies","race","raced","raceme","racer","racers","races","racial","racier","racily","racing","racism","racist","rack","racked","racker","racket","racks","racoon","racy","rad","radar","radars","raddle","radial","radian","radii","radio","radios","radish","radium","radius","radome","radon","radons","rads","raffia","raffle","raft","rafted","rafter","rafts","rag","raga","ragas","ragbag","rage","raged","rages","ragged","raggle","raggy","raging","raglan","ragman","ragmen","ragout","rags","ragtag","rah","raid","raided","raider","raids","rail","railed","railer","rails","rain","rained","rains","rainy","raise","raised","raiser","raises","raisin","raison","raja","rajah","rajahs","rajas","rake","raked","raker","rakers","rakes","raking","rakish","rales","rally","rallye","ram","ramble","ramie","ramies","ramify","ramjet","rammed","rammer","ramp","ramped","ramps","ramrod","rams","ran","ranch","rancho","rancid","rancor","rand","random","rands","randy","ranee","ranees","rang","range","ranged","ranger","ranges","rangy","rani","ranis","rank","ranked","ranker","rankle","rankly","ranks","ransom","rant","ranted","ranter","rants","rap","rape","raped","raper","rapers","rapes","rapid","rapids","rapier","rapine","raping","rapist","rapped","rappel","rapper","raps","rapt","rapter","raptly","raptor","rara","rare","rarefy","rarely","rarer","rarest","rarify","raring","rarity","rascal","rase","rased","raser","rasers","rases","rash","rasher","rashes","rashly","rasing","rasp","rasped","rasper","rasps","raspy","rassle","raster","rat","rata","ratch","rate","rated","rater","raters","rates","rather","ratify","rating","ratio","ration","ratios","rats","rattan","ratted","ratter","rattle","rattly","rattus","ratty","ravage","rave","raved","ravel","ravels","raven","ravens","raver","ravers","raves","ravine","raving","ravish","raw","rawer","rawest","rawish","rawly","raws","ray","rayed","raying","rayon","rayons","rays","raze","razed","razee","razer","razers","razes","razing","razor","razors","razz","razzed","razzes","rcpt","reach","react","reacts","read","readd","readds","reader","reads","ready","reagan","real","realer","really","realm","realms","reals","realty","ream","reamed","reamer","reams","reap","reaped","reaper","reaps","rear","reared","rearer","rearm","rearms","rears","reason","reave","reaved","reaver","reaves","reavow","reb","rebait","rebate","rebbe","rebbes","rebec","rebeck","rebecs","rebel","rebels","rebid","rebids","rebill","rebind","reboil","reboot","rebop","rebops","reborn","rebs","rebuff","rebuke","rebury","rebus","rebut","rebuts","rec","recall","recane","recant","recap","recaps","recast","recd","recede","recent","recept","recess","recipe","recite","recked","reckon","recks","reclad","recoil","recoin","recomb","recon","recons","recook","recopy","record","recoup","recs","recta","rectal","recti","recto","rector","rectos","rectum","recur","recurs","recuse","recut","red","redact","redbud","redbug","redcap","redded","redden","redder","reddle","reded","redeem","redes","redeye","redfin","redid","reding","redip","redly","redo","redoes","redone","redos","redout","redox","redraw","redrew","redry","reds","reduce","redye","redyed","redyes","reecho","reed","reeded","reedit","reeds","reedy","reef","reefed","reefer","reefs","reefy","reek","reeked","reeks","reeky","reel","reeled","reeler","reels","reeve","reeved","reeves","ref","refed","refer","refers","reffed","refile","refill","refilm","refine","refire","refit","refits","refix","reflex","reflow","reflux","refly","refold","reform","refry","refs","reft","refuel","refuge","refund","refuse","refute","reg","regain","regal","regale","regard","regear","regent","reges","reggae","regia","regild","regilt","regime","regina","region","reglue","regnal","regnum","regret","regrew","regrow","rehang","rehash","rehear","reheat","reheel","rehem","rehems","rehire","rehung","reich","reify","reign","reigns","rein","reined","reins","reject","rejoin","rekey","rekeys","relate","relay","relays","relent","relet","relets","relic","relics","relict","relied","relief","relies","reline","relish","relist","relit","relive","reload","reloan","rely","rem","remade","remail","remain","remake","reman","remand","remap","remark","remedy","remelt","remend","remet","remind","remiss","remit","remits","remix","remold","remora","remote","remove","rems","renal","rename","rend","rended","render","rends","renege","renew","renews","renig","renigs","rennet","rennin","reno","renoir","renown","rent","rental","rented","renter","rents","reoil","reopen","rep","repack","repaid","repair","repass","repast","repave","repay","repays","repeal","repeat","repel","repels","repent","repin","repine","repins","replan","replay","reply","report","repose","repped","repro","reps","repute","req","reran","reread","reroll","rerun","reruns","resale","resaw","resay","rescue","reseal","reseat","resee","reseed","resell","resent","reset","resets","resew","reship","reside","resign","resin","resins","resist","resold","resole","resort","resow","resown","resows","resp","rest","rested","rester","rests","result","resume","ret","retail","retain","retake","retard","retch","retd","retell","retest","retie","retied","reties","retina","retire","retold","retook","retool","retort","retro","retry","return","retype","reuse","reused","reuses","rev","revamp","reveal","revel","revels","reverb","revere","revers","revert","revery","review","revile","revise","revive","revoir","revoke","revolt","revs","revue","revues","revved","reward","rewarm","rewash","rewax","rewed","reweds","reweld","rewin","rewind","rewire","rewon","reword","rework","rewove","rewrap","rex","rexes","rezone","rhea","rheas","rhebok","rhesus","rheum","rheums","rheumy","rhine","rhino","rhinos","rho","rhodes","rhomb","rhombi","rhombs","rhumb","rhumba","rhumbs","rhyme","rhymed","rhymer","rhymes","rhyta","rial","rials","rialto","rib","ribald","riband","ribbed","ribber","ribbon","riblet","ribose","ribs","rice","riced","ricer","ricers","rices","rich","riche","richer","riches","richly","ricing","rick","ricked","rickey","ricks","ricrac","rictus","rid","ridded","ridden","ridder","riddle","ride","rider","riders","rides","ridge","ridged","ridges","ridgy","riding","ridley","rids","riel","riels","rife","rifely","rifer","rifest","riff","riffed","riffle","riffs","rifle","rifled","rifler","rifles","rift","rifted","rifts","rig","rigged","rigger","right","righto","rights","righty","rigid","rigor","rigors","rigour","rigs","rile","riled","riles","riling","rill","rilled","rills","rim","rime","rimed","rimers","rimes","rimier","riming","rimmed","rimmer","rims","rimy","rind","rinded","rinds","ring","ringed","ringer","rings","rink","rinks","rinse","rinsed","rinser","rinses","riot","rioted","rioter","riots","rip","ripe","ripely","ripen","ripens","riper","ripes","ripest","riping","ripoff","ripost","ripped","ripper","ripple","ripply","riprap","rips","ripsaw","rise","risen","riser","risers","rises","rishi","rishis","rising","risk","risked","risker","risks","risky","risque","risus","ritard","rite","rites","ritual","ritz","ritzes","rival","rivals","rive","rived","riven","river","rivers","rives","rivet","rivets","riving","riyal","riyals","roach","road","roader","roads","roam","roamed","roamer","roams","roan","roans","roar","roared","roarer","roars","roast","roasts","rob","robbed","robber","robe","robed","robert","robes","robin","robing","robins","roble","robles","robot","robots","robs","robust","roc","rock","rocked","rocker","rocket","rocks","rocky","rocs","rod","rodded","rodder","rode","rodent","rodeo","rodeos","rodman","rodmen","rods","roe","roes","roger","rogers","rogue","rogued","rogues","roil","roiled","roils","roily","role","roles","roll","rolled","roller","rolls","rom","roman","romano","romans","romany","rome","romeo","romp","romped","romper","romps","roms","ronald","rondo","rondos","rood","roods","roof","roofed","roofer","roofs","rook","rooked","rookie","rooks","room","roomed","roomer","rooms","roomy","roost","roosts","root","rooted","rooter","roots","rope","roped","roper","ropers","ropery","ropes","ropier","ropily","roping","ropy","rosa","rosary","roscoe","rose","rosed","rosery","roses","rosets","roshi","rosier","rosily","rosin","rosing","rosins","rosiny","roster","rostra","rosy","rot","rotary","rotate","rote","rotes","rotgut","roto","rotor","rotors","rots","rotted","rotten","rotter","rotund","rouble","roue","rouens","roues","rouge","rouged","rouges","rough","roughs","round","rounds","rouse","roused","rouser","rouses","roust","rousts","rout","route","routed","router","routes","routs","rove","roved","rover","rovers","roves","roving","row","rowan","rowans","rowdy","rowed","rowel","rowels","rower","rowers","rowing","rows","royal","royals","rpm","rte","rub","rubato","rubbed","rubber","rubble","rubbly","rube","rubens","rubes","rubied","rubier","rubies","ruble","rubles","rubric","rubs","ruby","ruck","rucked","rucks","ruckus","rudder","ruddle","ruddy","rude","rudely","ruder","rudest","rue","rued","rueful","ruer","ruers","rues","ruff","ruffed","ruffes","ruffle","ruffly","ruffs","rufous","rug","rugby","rugged","rugger","rugs","ruin","ruined","ruiner","ruing","ruins","rule","ruled","ruler","rulers","rules","ruling","rum","rumba","rumbas","rumble","rumbly","rummer","rummy","rumor","rumors","rump","rumple","rumply","rumps","rumpus","rums","run","rune","runes","rung","rungs","runic","runlet","runnel","runner","runoff","runout","runs","runt","runts","runway","rupee","rupees","rupiah","rural","ruse","ruses","rush","rushed","rushee","rusher","rushes","rushy","rusk","russe","russet","russia","rust","rusted","rustic","rustle","rusts","rusty","rut","ruth","ruths","ruts","rutted","rutty","rya","ryas","rye","ryes","sabbat","saber","sabers","sabine","sable","sables","sabot","sabots","sabra","sabras","sabred","sabres","sac","sacbut","sachem","sachet","sack","sacked","sacker","sacks","sacra","sacral","sacred","sacrum","sacs","sad","sadden","sadder","saddhu","saddle","sadhu","sadhus","sadism","sadist","sadly","safari","safe","safely","safer","safes","safest","safety","sag","saga","sage","sagely","sager","sages","sagest","sagged","sagger","saggy","sagier","sago","sagos","sags","sagy","sahara","sahib","sahibs","said","saids","saigon","sail","sailed","sailer","sailor","sails","saint","saints","saith","sake","sakes","sakis","sal","salaam","salad","salads","salami","salary","sale","salem","sales","saline","saliva","sallow","sally","salmon","salon","salons","saloon","salsa","salt","salted","salter","salts","salty","salute","salve","salved","salver","salves","salvia","salvo","salvos","sam","samba","sambas","sambo","sambos","same","samite","samlet","samoa","samoan","sampan","sample","samuel","san","sancta","sand","sandal","sanded","sander","sandra","sands","sandy","sane","saned","sanely","saner","sanes","sanest","sang","sanga","sanger","sangh","sangha","sanity","sank","sanka","sans","sansei","santa","santee","sanzen","sap","sapid","sapor","sapped","sapper","sappy","saps","sarah","saran","sarape","saree","sarees","sarge","sarges","sari","saris","sarod","sarong","sartor","sash","sashay","sashed","sashes","sass","sassed","sasses","sassy","sat","satan","sate","sated","sateen","sates","satin","sating","satins","satiny","satire","sativa","satori","satrap","saturn","satyr","satyrs","sauce","sauced","saucer","sauces","saucy","saudi","saudis","sauls","sault","saults","sauna","saunas","saute","sauted","sautes","savage","savant","savate","save","saved","saver","savers","saves","saving","savior","savor","savors","savory","savour","savoy","savoys","saw","sawed","sawer","sawers","sawfly","sawing","sawn","saws","sawyer","sax","saxes","saxon","saxons","saxony","say","sayee","sayer","sayers","sayest","saying","says","sayst","scab","scabby","scabs","scad","scads","scag","scags","scalar","scald","scalds","scale","scaled","scaler","scales","scalls","scalp","scalps","scaly","scam","scamp","scampi","scamps","scams","scan","scans","scant","scants","scanty","scape","scaped","scapes","scar","scarab","scarce","scare","scared","scarer","scares","scarey","scarf","scarfs","scarp","scarps","scarry","scars","scary","scat","scathe","scats","scene","scenes","scenic","scent","scents","schema","scheme","schick","schism","schist","schizo","schlep","schmo","schmoe","school","schul","schwa","schwas","sci","scil","scion","scions","sclera","scoff","scoffs","scold","scolds","sconce","scone","scones","scoop","scoops","scoot","scoots","scop","scope","scopes","scorch","score","scored","scorer","scores","scoria","scorn","scorns","scot","scotch","scotia","scots","scott","scour","scours","scout","scouts","scow","scowed","scowl","scowls","scows","scrag","scrags","scram","scrams","scrap","scrape","scraps","scrawl","scream","scree","screed","screen","screes","screw","screws","screwy","scribe","scrim","scrimp","scrims","scrip","scrips","script","scrive","scrod","scrods","scroll","scrota","scrub","scrubs","scruff","scuba","scubas","scud","scuds","scuff","sculk","sculks","scull","sculp","sculpt","scum","scums","scurf","scurfs","scurfy","scut","scuta","scute","scuts","scythe","sea","seabag","seabed","seadog","seal","sealed","sealer","seals","seam","seaman","seamed","seamen","seamer","seams","seamy","seance","sear","search","seared","searer","sears","seas","season","seat","seated","seater","seats","seaway","sec","secant","secede","second","secret","secs","sect","sector","sects","secure","sedan","sedans","sedate","seder","seders","sedge","sedges","sedgy","seduce","sedum","sedums","see","seed","seeded","seeder","seeds","seedy","seeing","seek","seeker","seeks","seels","seem","seemed","seemer","seemly","seems","seen","seep","seeped","seeps","seepy","seer","seers","sees","seesaw","seethe","segno","segnos","segos","segue","segued","segues","seige","seine","seined","seiner","seines","seism","seisms","seize","seized","seizer","seizes","seizor","seldom","select","self","selfed","selfs","sell","seller","sells","selsyn","selves","semen","semens","semi","semis","semite","semper","sempre","senate","send","sendee","sender","sends","seneca","senhor","senile","senior","senna","sennas","senor","senora","senors","sense","sensed","senses","sensor","sensu","sent","senti","sentry","seoul","sepal","sepals","sepia","sepias","sepoy","sepsis","sept","septa","septal","septet","septic","septs","septum","seq","sequel","sequin","sera","seral","serape","seraph","serb","serbia","sere","sered","serene","serer","seres","serest","serf","serfs","serge","serges","serial","series","serif","serifs","serin","serine","sering","serins","sermon","serous","serow","serum","serums","serval","serve","served","server","serves","servo","servos","sesame","sestet","set","setae","setal","setoff","seton","setons","setout","sets","settee","setter","settle","setup","setups","seven","sevens","sever","severe","severs","sew","sewage","sewed","sewer","sewers","sewing","sewn","sews","sex","sexed","sexes","sexier","sexily","sexing","sexism","sexist","sexpot","sextan","sextet","sexto","sexton","sextos","sexts","sexual","sexy","shabby","shack","shacks","shad","shade","shaded","shader","shades","shadow","shads","shady","shaft","shafts","shag","shaggy","shags","shah","shahs","shake","shaken","shaker","shakes","shako","shakos","shale","shaled","shales","shall","shalom","shalt","shaly","sham","shaman","shame","shamed","shames","shammy","shams","shamus","shank","shanks","shanti","shanty","shape","shaped","shaper","shapes","shard","shards","share","shared","sharer","shares","sharif","shark","sharks","sharp","sharps","sharpy","shat","shave","shaved","shaven","shaver","shaves","shawed","shawl","shawls","shawm","shawms","shawn","shaws","shay","shays","she","sheaf","sheafs","shear","shears","sheath","sheave","shed","sheds","sheen","sheens","sheeny","sheep","sheer","sheers","sheet","sheets","sheik","sheikh","sheiks","sheila","shekel","shelf","shell","shells","shelly","shelve","shelvy","sheol","sheols","sherd","sherds","sherif","sherpa","sherry","shes","shew","shewed","shewer","shewn","shews","shied","shield","shier","shiers","shies","shiest","shift","shifts","shifty","shiksa","shill","shills","shim","shims","shin","shindy","shine","shined","shiner","shines","shinny","shins","shinto","shiny","ship","ships","shipt","shire","shires","shirk","shirks","shirr","shirrs","shirt","shirts","shirty","shist","shists","shit","shits","shiv","shiva","shivah","shivas","shive","shiver","shivs","shlep","shlock","shmo","shmoes","shnaps","shoal","shoals","shoaly","shoat","shoats","shock","shocks","shod","shoddy","shoe","shoed","shoer","shoers","shoes","shogun","shoji","shojis","sholom","shone","shoo","shooed","shook","shooks","shoos","shoot","shoots","shop","shope","shoppe","shops","shore","shored","shores","shorn","short","shorts","shorty","shot","shote","shotes","shots","should","shout","shouts","shove","shoved","shovel","shover","shoves","show","showed","shower","shows","showup","shrank","shred","shreds","shrew","shrewd","shrews","shriek","shrift","shrike","shrill","shrimp","shrine","shrink","shrive","shroud","shrove","shrub","shrubs","shrug","shrugs","shrunk","shtetl","shtick","shuck","shucks","shul","shuls","shun","shuns","shunt","shunts","shush","shut","shute","shuted","shutes","shuts","shy","shyer","shyers","shyest","shying","shyly","siam","sib","sibs","sibyl","sibyls","sic","sicced","sicily","sick","sicked","sicken","sicker","sickle","sickly","sicks","sics","side","sided","sides","siding","sidle","sidled","sidler","sidles","sidney","siecle","siege","sieged","sieges","sienna","sierra","siesta","sieur","sieurs","sieve","sieved","sieves","sift","sifted","sifter","sifts","sigh","sighed","sigher","sighs","sight","sights","sigil","siglos","sigma","sigmas","sign","signal","signed","signee","signer","signet","signor","signs","sikh","sikhs","silage","silent","silex","silica","silk","silked","silken","silks","silky","sill","sills","silly","silo","siloed","silos","silt","silted","silts","silty","silva","silvan","silvas","silver","simian","simile","simmer","simon","simony","simp","simper","simple","simply","simps","sin","since","sine","sines","sinew","sinews","sinewy","sinful","sing","singe","singed","singer","singes","single","singly","sings","sinh","sinhs","sink","sinker","sinks","sinned","sinner","sins","sinter","sip","siphon","sipped","sipper","sippy","sips","sir","sire","sired","siree","siren","sirens","sires","siring","sirrah","sirree","sirs","sirup","sirups","sirupy","sis","sisal","sisals","sister","sit","sitar","sitars","sitcom","site","sited","sites","siting","sits","sitter","situ","situp","situps","situs","sitz","six","sixes","sixing","sixte","sixtes","sixth","sixths","size","sized","sizer","sizers","sizes","sizier","sizing","sizzle","skag","skald","skalds","skate","skated","skater","skates","skean","skeans","skeet","skeets","skein","skeins","sketch","skew","skewed","skewer","ski","skid","skiddy","skidoo","skids","skied","skier","skiers","skies","skiey","skiff","skiffs","skiing","skill","skills","skim","skimp","skimps","skimpy","skims","skin","skink","skinks","skinny","skins","skip","skips","skirl","skirls","skirt","skirts","skis","skit","skits","skoal","skoals","skuas","skulk","sky","skycap","skying","skylab","skyman","skymen","skyway","slab","slabs","slack","slacks","slag","slaggy","slags","slain","slake","slaked","slaker","slakes","slalom","slam","slams","slang","slangs","slangy","slant","slants","slap","slaps","slash","slat","slate","slated","slater","slates","slats","slaty","slav","slave","slaved","slaver","slaves","slavey","slavic","slavs","slaw","slaws","slay","slayer","slays","sleave","sleazy","sled","sledge","sleds","sleek","sleeks","sleep","sleeps","sleepy","sleet","sleets","sleety","sleeve","sleigh","slept","sleuth","slew","slewed","slews","slice","sliced","slicer","slices","slick","slicks","slid","slide","slider","slides","slier","sliest","slight","slily","slim","slime","slimed","slimes","slimly","slims","slimy","sling","slings","slink","slinks","slinky","slip","slippy","slips","slipt","slipup","slit","slits","sliver","slob","sloe","sloes","slog","slogan","slogs","sloop","sloops","slop","slope","sloped","sloper","slopes","sloppy","slops","slosh","sloshy","slot","sloth","sloths","slots","slouch","slough","slovak","sloven","slow","slowed","slower","slowly","slows","sludge","sludgy","slue","slued","slues","slug","sluice","sluicy","sluing","slum","slump","slumps","slums","slung","slunk","slur","slurp","slurps","slurs","slush","slushy","slut","sluts","sly","slyer","slyest","smack","smacks","small","smalls","smarmy","smart","smarts","smarty","smash","smear","smears","smeary","smegma","smell","smells","smelly","smelt","smelts","smilax","smile","smiled","smiler","smiles","smirch","smirk","smirks","smirky","smit","smite","smiter","smites","smith","smiths","smithy","smock","smocks","smog","smoggy","smoke","smoked","smoker","smokes","smokey","smoky","smooch","smooth","smote","smudge","smudgy","smug","smugly","smut","smutch","smuts","smutty","snack","snacks","snafu","snafus","snag","snaggy","snags","snail","snails","snake","snaked","snakes","snaky","snap","snappy","snaps","snare","snared","snarer","snares","snark","snarks","snarl","snarls","snarly","snatch","snazzy","sneak","sneaks","sneaky","sneer","sneers","sneeze","sneezy","snick","snicks","snide","snider","sniff","sniffs","sniffy","snip","snipe","sniped","sniper","snipes","snippy","snips","snit","snitch","snits","snivel","snob","snobby","snobs","snood","snoods","snoop","snoops","snoopy","snoot","snoots","snooty","snooze","snoozy","snore","snored","snorer","snores","snort","snorts","snot","snots","snotty","snout","snouts","snouty","snow","snowed","snows","snowy","snub","snubby","snubs","snuck","snug","snugly","soak","soaked","soaker","soaks","soap","soaped","soaper","soaps","soapy","soar","soared","soarer","soars","soave","sob","sobbed","sobber","sobeit","sober","sobers","sobful","sobs","soc","soccer","social","sock","socked","socket","socks","sod","soda","sodas","sodded","sodden","soddy","sodium","sodom","sodomy","sods","soever","sofa","sofar","sofars","sofas","soffit","sofia","soft","soften","softer","softie","softly","softs","softy","sogged","soggy","soigne","soil","soiled","soils","soiree","sol","solace","solar","sold","solder","sole","soled","solely","solemn","soles","soli","solid","solidi","solido","solids","soling","solo","soloed","solos","solute","solve","solved","solver","solves","soma","somas","somber","sombre","some","son","sonar","sonars","sonata","sonde","sones","song","songs","sonic","sonics","sonnet","sonny","sons","sooey","soon","sooner","soot","sooted","sooth","soothe","sooths","soots","sooty","sop","soph","sophs","sophy","sopor","sopors","sopped","soppy","sops","sorbed","sorbet","sorbic","sordid","sore","sorel","sorels","sorely","sorer","sores","sorest","sorrel","sorrow","sorry","sort","sorted","sorter","sortie","sorts","sos","sot","sots","sotted","soudan","sough","soughs","sought","soul","souled","souls","sound","sounds","soup","souped","soups","soupy","sour","source","soured","sourer","sourly","sours","souse","soused","souses","south","souths","soviet","sovran","sow","sowed","sower","sowers","sowing","sown","sows","sox","soy","soya","soyas","soys","spa","space","spaced","spacer","spaces","spade","spaded","spader","spades","spadix","spain","spake","spale","spalls","span","spank","spanks","spans","spar","spare","spared","sparer","spares","sparge","spark","sparks","sparky","sparry","spars","sparse","sparta","spas","spasm","spasms","spat","spate","spates","spathe","spats","spavin","spawn","spawns","spay","spayed","spays","speak","speaks","spear","spears","spec","specie","speck","specks","specs","sped","speech","speed","speeds","speedy","spell","spells","spelt","spence","spend","spends","spent","sperm","sperms","spew","spewed","spewer","spews","sphere","sphinx","spic","spica","spicas","spice","spiced","spicer","spices","spicey","spick","spics","spicy","spider","spied","spiel","spiels","spier","spiers","spies","spiff","spiffy","spigot","spike","spiked","spiker","spikes","spiky","spill","spills","spilt","spilth","spin","spinal","spine","spined","spinel","spines","spinet","spinny","spins","spiny","spiral","spire","spirea","spired","spires","spirit","spirts","spiry","spit","spital","spite","spited","spites","spits","splash","splat","splats","splay","splays","spleen","splent","splice","spline","splint","split","splits","splosh","spoil","spoils","spoilt","spoke","spoked","spoken","spokes","sponge","spongy","spoof","spoofs","spook","spooks","spooky","spool","spools","spoon","spoons","spoony","spoor","spoors","spore","spored","spores","sport","sports","sporty","spot","spots","spotty","spouse","spout","spouts","sprain","sprang","sprat","sprats","sprawl","spray","sprays","spread","spree","sprees","sprier","sprig","sprigs","spring","sprint","sprit","sprite","sprits","sprout","spruce","sprucy","sprung","spry","spryer","spryly","spud","spued","spues","spuing","spume","spumed","spumes","spumy","spun","spunk","spunks","spunky","spur","spurge","spurn","spurns","spurry","spurs","spurt","spurts","sputa","sputum","spy","spying","squab","squabs","squad","squads","squall","square","squash","squat","squats","squaw","squawk","squaws","squeak","squeal","squib","squibs","squid","squids","squint","squire","squirm","squirt","squish","sri","stab","stable","stably","stabs","stack","stacks","stadia","staff","staffs","stag","stage","staged","stager","stages","stagey","staggy","stags","stagy","staid","stain","stains","stair","stairs","stake","staked","stakes","stalag","stale","staled","staler","stales","stalin","stalk","stalks","stalky","stall","stalls","stamen","stamp","stamps","stance","stanch","stand","stands","stank","stanza","stapes","staph","staphs","staple","star","starch","stare","stared","starer","stares","stark","starry","stars","start","starts","starve","stases","stash","stasis","stat","statal","state","stated","stater","states","static","stator","stats","statue","status","stave","staved","staves","stay","stayed","stayer","stays","stead","steads","steady","steak","steaks","steal","steals","steam","steams","steamy","steed","steeds","steel","steels","steely","steep","steeps","steer","steers","steeve","stein","steins","stele","stella","stem","stemmy","stems","stench","steno","stenos","step","steppe","steps","stepup","stere","stereo","steres","stern","sterna","sterns","stet","stets","steve","steven","stew","stewed","stews","stick","sticks","sticky","stied","sties","stiff","stiffs","stifle","stigma","stile","stiles","still","stills","stilly","stilt","stilts","stimy","sting","stingo","stings","stingy","stink","stinko","stinks","stinky","stint","stints","stipes","stir","stirs","stitch","stiver","stoa","stoas","stoat","stoats","stock","stocks","stocky","stodge","stodgy","stogey","stogie","stogy","stoic","stoics","stoke","stoked","stoker","stokes","stole","stolen","stoles","stolid","stomp","stomps","stone","stoned","stoner","stones","stoney","stony","stood","stooge","stool","stools","stoop","stoops","stop","stops","stopt","store","stored","stores","storey","stork","storks","storm","storms","stormy","story","stoup","stoups","stout","stouts","stove","stover","stoves","stow","stowed","stows","strafe","strain","strait","strand","strap","straps","strata","strate","strath","straw","straws","strawy","stray","strays","streak","stream","street","strep","streps","stress","strew","strewn","strews","stria","striae","strict","stride","strife","strike","string","strip","stripe","strips","stript","stripy","strive","strobe","strode","stroke","stroll","strong","strop","strops","strove","struck","strum","strums","strung","strut","struts","stub","stubby","stubs","stucco","stuck","stud","studio","study","stump","stumps","stumpy","stun","stung","stunk","stuns","stunt","stunts","stupa","stupas","stupe","stupes","stupid","stupor","sturdy","sty","stye","styed","styes","stylar","style","styled","styler","styles","styli","stylus","stymie","styx","suable","suably","suave","suaver","sub","subbed","subdeb","subdue","subgum","sublet","submit","suborn","subs","subset","subtle","subtly","suburb","subway","succor","such","suck","sucked","sucker","suckle","sucks","sucre","sucres","sudan","sudden","sudor","sudors","suds","sudsed","sudser","sudses","sue","sued","suede","sueded","suedes","suer","suers","sues","suet","suets","suety","suey","suez","suffer","sugar","sugars","sugary","sui","suing","suit","suite","suited","suites","suitor","suits","sulfa","sulfas","sulfur","sulk","sulked","sulker","sulks","sullen","sully","sulpha","sultan","sultry","sum","sumac","sumach","sumacs","summa","summed","summer","summit","summon","sumo","sumos","sump","sumps","sums","sun","sunbow","sundae","sunday","sunder","sundew","sundog","sundry","sung","sunk","sunken","sunlit","sunned","suns","sunset","suntan","sunup","sunups","sup","supe","super","superb","supers","supes","supine","supped","supper","supple","supply","supra","sups","supt","surds","sure","surely","surer","surest","surety","surf","surfed","surfer","surfs","surfy","surge","surged","surger","surges","surgy","surly","surrey","surtax","survey","susan","susans","sutler","sutra","sutras","sutta","suttas","suttee","suture","svelte","swab","swabby","swag","swage","swaged","swages","swail","swain","swains","swale","swam","swami","swamis","swamp","swamps","swampy","swan","swang","swank","swanks","swanky","swans","swap","swaps","sward","swards","swarm","swarms","swart","swarth","swarty","swash","swat","swatch","swath","swathe","swaths","swats","sway","swayed","swayer","swear","swears","sweat","sweats","sweaty","swede","sweden","swedes","sweep","sweeps","sweepy","sweet","sweets","swell","swells","swept","swerve","swift","swifts","swig","swigs","swill","swills","swim","swims","swine","swing","swinge","swings","swingy","swinks","swipe","swiped","swipes","swirl","swirls","swirly","swish","swishy","switch","swivel","swivet","swob","swoon","swoons","swoop","swoops","swoosh","swop","swops","sword","swords","swore","sworn","swum","sydney","sylph","sylphs","sylphy","sylvan","sylvas","sylvia","symbol","sync","synced","syncom","syndic","syne","synod","synods","syntax","sypher","syphon","syren","syrens","syria","syrian","syrinx","syrup","syrups","syrupy","system","tab","tabard","tabbed","tabby","tabers","tabla","tablas","table","tabled","tables","tablet","taboo","taboos","tabor","tabors","tabour","tabs","tabu","tabued","tabula","tacet","tach","tachs","tacit","tack","tacked","tacker","tackey","tackle","tacks","tacky","taco","tacoma","tacos","tact","tactic","tacts","tad","tads","taels","tag","tagged","tagger","tags","tahiti","tai","taiga","tail","tailed","tailer","tailor","tails","taint","taints","taipei","taiwan","take","taken","taker","takers","takes","taketh","taking","talc","talced","talcky","talcs","talcum","tale","talent","taler","talers","tales","talk","talked","talker","talkie","talks","talky","tall","taller","tallow","tally","talmud","talon","talons","talus","tam","tamale","tamals","tambur","tame","tamed","tamely","tamer","tamers","tames","tamest","taming","tammie","tamp","tamped","tamper","tampon","tamps","tams","tan","tandem","tang","tanged","tangle","tangly","tango","tangos","tangs","tangy","tank","tanka","tankas","tanked","tanker","tanks","tanned","tanner","tannic","tannin","tans","tansy","tanto","tantra","tao","taoism","taoist","taos","tap","tape","taped","taper","tapers","tapes","taping","tapir","tapirs","tapped","tapper","tappet","taps","tar","tarde","tardo","tardy","tare","tared","tares","target","tariff","taring","tarmac","tarn","tarnal","tarns","taro","taros","tarot","tarots","tarp","tarpon","tarps","tarred","tarry","tars","tarsal","tarsi","tarsus","tart","tartan","tartar","tarted","tarter","tartly","tarts","tarzan","task","tasked","tasks","tass","tassel","tasses","taste","tasted","taster","tastes","tasty","tat","tatami","tatar","tate","tater","taters","tatoo","tatoos","tats","tatted","tatter","tattle","tattoo","tau","taught","taunt","taunts","taupe","taupes","taurus","taut","tauten","tauter","tautly","tauts","tavern","taw","tawdry","tawers","tawing","tawney","tawny","taws","tax","taxed","taxer","taxers","taxes","taxi","taxied","taxies","taxing","taxis","taxman","taxmen","tbs","tea","teabox","teach","teacup","teak","teaks","teal","teals","team","teamed","teamer","teams","teapot","tear","teared","tearer","tears","teary","teas","tease","teased","teasel","teaser","teases","teat","teated","teats","teazel","teazle","tech","techie","techy","tecum","tedium","teds","tee","teed","teeing","teem","teemed","teemer","teems","teen","teener","teens","teensy","teeny","tees","teeth","teflon","tell","teller","tells","telly","tem","temp","tempeh","temper","tempi","temple","tempo","tempos","temps","tempt","tempts","tempus","ten","tenant","tench","tend","tended","tender","tendon","tends","tenet","tenets","tenner","tennis","tenon","tenons","tenor","tenors","tenpin","tens","tense","tensed","tenser","tenses","tensor","tent","tented","tenter","tenth","tenths","tents","tenty","tenure","tenuto","tepee","tepees","tepid","terce","tercel","term","termed","termer","termly","terms","tern","terne","terns","terr","terra","terras","terre","terror","terry","terse","terser","tesla","teslas","test","tested","testee","tester","testes","testis","tests","tetany","tetchy","tether","tetra","tetrad","tetras","tetryl","teuton","tex","texaco","texan","texans","texas","text","texts","thai","thames","than","thane","thanes","thank","thanks","that","thatch","thats","thaw","thawed","thaws","the","thee","theft","thefts","their","theirs","theism","theist","them","theme","themes","then","thence","thens","theory","there","theres","therm","therms","these","theses","thesis","theta","thetas","thew","thews","thewy","they","thick","thicks","thief","thieve","thigh","thighs","thin","thine","thing","things","think","thinks","thinly","thins","third","thirds","thirst","this","tho","thole","tholes","thomas","thong","thongs","thor","thorax","thorn","thorns","thorny","thoro","thorp","thorpe","thorps","those","thou","thoued","though","thous","thrall","thrash","thread","threat","three","threes","thresh","threw","thrice","thrift","thrill","thrip","thrips","thrive","thro","throat","throb","throbs","throe","throes","throne","throng","throve","throw","thrown","throws","thru","thrum","thrums","thrush","thrust","thud","thuds","thug","thugs","thumb","thumbs","thump","thumps","thus","thusly","thwack","thwart","thy","thyme","thymes","thymey","thymi","thymol","thymus","thymy","thyrse","tiara","tiaras","tiber","tibet","tibia","tibiae","tibial","tibias","tic","tick","ticked","ticker","ticket","tickle","ticks","tics","tictac","tictoc","tidal","tiddly","tide","tided","tides","tidied","tidier","tidies","tidily","tiding","tidy","tie","tied","tieing","tier","tiered","tiers","ties","tiff","tiffed","tiffin","tiffs","tiger","tigers","tight","tights","tiglon","tigris","tike","tikes","til","tilde","tildes","tile","tiled","tiler","tilers","tiles","tiling","till","tilled","tiller","tills","tilt","tilted","tilter","tilth","tilths","tilts","tim","timbal","timber","timbre","time","timed","timely","timer","timers","times","timid","timing","tin","tinct","tincts","tinder","tine","tined","tines","ting","tinge","tinged","tinges","tingle","tingly","tings","tinier","tinily","tining","tinker","tinkle","tinkly","tinman","tinmen","tinned","tinner","tinny","tins","tinsel","tint","tinted","tinter","tints","tiny","tip","tipcat","tipi","tipis","tipoff","tipped","tipper","tippet","tipple","tippy","tips","tipsy","tiptoe","tiptop","tirade","tire","tired","tires","tiring","tiro","tiros","tis","tisane","tissue","tit","titan","titans","titer","titers","tithe","tithed","tither","tithes","titian","title","titled","titles","titre","tits","titter","tittle","tmh","tnpk","tnt","toad","toads","toady","toast","toasts","toasty","tocsin","today","todays","toddle","toddy","toe","toecap","toed","toeing","toes","toff","toffee","toffs","toffy","tofts","tofu","tofus","tog","toga","togae","togaed","togas","togged","toggle","togo","togs","toil","toiled","toiler","toilet","toils","toited","tokay","tokays","toke","toked","token","tokens","tokes","toking","told","tole","toledo","toll","tolled","toller","tolls","toluol","toluyl","tolyls","tom","tomato","tomb","tombed","tomboy","tomcat","tome","tomes","toms","tomtit","ton","tonal","tone","toned","toner","toners","tones","tong","tongas","tonged","tonger","tongs","tongue","tonic","tonics","tonier","tonies","toning","tonne","tonner","tonnes","tons","tonsil","tony","too","took","tool","tooled","tooler","tools","toot","tooted","tooter","tooth","tooths","toothy","tootle","toots","tootsy","top","tope","toped","topeka","toper","topers","topes","topful","topic","topics","toping","topos","topped","topper","topple","tops","toque","toques","tor","tora","torah","torahs","toras","torc","torch","torcs","tore","torero","tores","tories","torn","toro","toroid","toros","torpid","torpor","torque","torrid","tors","torsi","torso","torsos","tort","torte","tortes","torts","torus","tory","tosh","toshes","toss","tossed","tosser","tosses","tossup","tost","tot","total","totals","tote","toted","totem","totems","toter","toters","totes","tother","toting","toto","tots","totted","totter","toucan","touch","touche","touchy","tough","toughs","toughy","toupee","tour","toured","tourer","tours","tousle","tout","touted","touter","touts","touzle","tov","tow","towage","toward","towed","towel","towels","tower","towers","towery","towhee","towies","towing","town","townie","towns","tows","toxic","toxify","toxin","toxins","toy","toyer","toyers","toying","toyish","toyon","toyons","toyos","toyota","toys","tpk","trace","traced","tracer","traces","track","tracks","tract","tracts","trade","traded","trader","trades","tragic","trail","trails","train","trains","trait","traits","tram","tramp","tramps","trams","trance","trap","traps","trapt","trash","trashy","trauma","trave","travel","trawl","trawls","tray","trays","tread","treads","treat","treats","treaty","treble","trebly","tree","treed","trees","tref","trek","treks","tremor","trench","trend","trends","trendy","trepan","trepid","tress","tressy","trets","trews","trey","treys","triad","triads","triage","trial","trials","tribal","tribe","tribes","trice","triced","trices","trick","tricks","tricky","tricot","tried","trier","triers","tries","trifid","trifle","trig","trigon","trijet","trill","trills","trim","trimly","trims","trinal","trine","trined","trines","trio","triode","trios","trip","tripe","tripes","triple","triply","tripod","trips","triste","trite","triter","triton","triune","trivet","trivia","troche","trod","trode","troika","trois","trojan","troll","trolls","trolly","tromp","trompe","tromps","troop","troops","trop","trope","tropes","trophy","tropia","tropic","tropin","troppo","trot","troth","troths","trots","trough","troupe","trout","trouts","trouty","trove","trover","troves","trow","trowed","trowel","trows","troy","troys","truant","truce","truced","truces","truck","trucks","trudge","true","trued","truer","trues","truest","truing","truism","trull","trulls","truly","truman","trump","trumps","trunk","trunks","truss","trust","trusts","trusty","truth","truths","try","trying","tryout","tryst","tsar","tsars","tsetse","tsked","tsking","tsp","tsuba","tsuris","tty","tub","tuba","tubal","tubas","tubbed","tubber","tubby","tube","tubed","tuber","tubers","tubes","tubing","tubs","tubule","tuck","tucked","tucker","tucket","tucks","tucson","tudor","tufa","tufas","tuff","tuft","tufted","tufter","tug","tugged","tugger","tugs","tules","tulip","tulips","tulle","tulles","tulsa","tumble","tumid","tumor","tumors","tumour","tumps","tun","tuna","tunas","tundra","tune","tuned","tuner","tuners","tunes","tuneup","tunic","tunics","tuning","tunis","tunned","tunnel","tunney","tunny","tuns","tup","tupelo","tupped","tups","tuque","tuques","turban","turbid","turbit","turbo","turbos","turbot","turd","turds","tureen","turf","turfed","turfs","turfy","turgid","turk","turkey","turks","turn","turned","turner","turnip","turns","turnup","turps","turret","turtle","tusche","tush","tushed","tushes","tusk","tusked","tusker","tussle","tut","tutee","tutees","tutor","tutors","tuts","tutu","tux","tuxedo","tuxes","twain","twains","twang","twangs","twangy","twas","twat","tweak","tweaks","tweaky","tweed","tweeds","tweedy","tween","tweet","tweets","twelve","twenty","twerp","twerps","twice","twier","twig","twigs","twilit","twill","twills","twin","twine","twined","twiner","twines","twinge","twins","twiny","twirl","twirls","twirly","twirp","twirps","twist","twists","twit","twitch","twits","two","twofer","twos","tycoon","tying","tyke","tykes","tyler","tymbal","tympan","typal","type","typed","typhon","typhus","typic","typier","typing","typist","typo","typos","tyrant","tyre","tyred","tyres","tyro","tyros","tzar","tzars","tzuris","udder","udders","ufo","ufos","uganda","ugh","ughs","ugli","uglier","uglify","uglily","uglis","ugly","ugsome","uhs","ukase","ukases","uke","ukes","ulcer","ulcers","ullage","ulna","ulnae","ulnar","ulnas","ulster","ult","ultima","ultimo","ultra","ultras","ulva","ulvas","umbel","umbels","umber","umbers","umbles","umbra","umbrae","umbral","umbras","umiak","umiaks","umlaut","ump","umped","umping","umpire","umps","unable","unaged","unapt","unarm","unarms","unary","unawed","unbar","unbars","unbear","unbend","unbent","unbid","unbind","unbolt","unborn","unbred","uncage","uncap","uncaps","uncase","uncial","unclad","uncle","uncles","unclog","unco","uncoil","uncool","uncork","uncos","under","undid","undies","undine","undo","undoer","undoes","undone","undue","undy","undyed","unease","uneasy","unesco","uneven","unfair","unfed","unfelt","unfit","unfits","unfix","unfold","unfree","unfurl","unglue","ungot","unhand","unhat","unhats","unhelm","unhip","unholy","unhook","unhung","unhurt","unicef","union","unions","unipod","unisex","unison","unit","unite","united","uniter","unites","units","unity","univ","unix","unjust","unkept","unkind","unknot","unlace","unlaw","unlay","unled","unless","unlet","unlike","unlink","unlit","unload","unlock","unmade","unmake","unman","unmans","unmask","unmet","unmixt","unmold","unmown","unpack","unpaid","unpeg","unpen","unpens","unpent","unpile","unpin","unpins","unplug","unread","unreal","unreel","unrest","unrig","unrip","unripe","unrobe","unroll","unroof","unrule","unsafe","unsaid","unsay","unsays","unseal","unseat","unseen","unsent","unset","unsew","unsex","unshed","unship","unshod","unshut","unsnap","unsold","unstop","unsung","unsure","untidy","untie","untied","unties","until","unto","untold","untrod","untrue","unum","unused","unveil","unwary","unwed","unwell","unwept","unwind","unwise","unwon","unworn","unwove","unwrap","unyoke","unzip","unzips","upbeat","update","upend","upends","upheld","uphill","uphold","upkeep","upland","uplift","uplink","upload","upmost","upon","upped","upper","uppers","upping","uppish","uppity","uprear","uprise","uproar","uproot","uprose","ups","upset","upsets","upshot","upside","uptake","uptime","uptown","upturn","upward","upwind","uracil","ural","uranic","uranus","urb","urban","urbana","urbane","urbs","urchin","urds","urea","ureal","ureas","ureic","uremia","uremic","ureter","uretic","urge","urged","urgent","urger","urgers","urges","urging","uric","urinal","urine","urines","urn","urns","ursa","ursae","ursine","usa","usable","usably","usage","usages","use","used","usee","useful","user","users","uses","usher","ushers","using","ussr","usual","usuals","usurer","usurp","usurps","utah","utahan","uteri","utero","uterus","utile","utmost","utopia","utter","utters","uveal","uveas","uvula","uvulae","uvulas","vacant","vacate","vacuo","vade","vadis","vagal","vagary","vagina","vagrom","vague","vaguer","vagus","vail","vain","vainer","vainly","val","vale","vales","valet","valets","valid","valise","valium","valley","valor","valors","valour","valse","valses","value","valued","valuer","values","valuta","valve","valved","valves","vamp","vamped","vamper","van","vandal","vane","vaned","vanes","vanish","vanity","vanman","vanmen","vans","vapor","vapors","vapory","vapour","varied","varier","varies","varlet","vary","vase","vases","vassal","vast","vaster","vastly","vasts","vasty","vat","vatful","vatic","vats","vatted","vault","vaults","vaulty","vaunt","vaunts","vaunty","veal","veals","vealy","vector","veda","vedic","vee","veep","veepee","veeps","veer","veered","veers","veery","vees","vegan","vegans","vegas","veil","veiled","veiler","veils","vein","veinal","veined","veiner","veins","veiny","vela","velar","velcro","veld","velds","veldt","veldts","vellum","velour","velum","velure","velvet","venal","vend","vended","vendee","vender","vendor","veneer","venery","venged","venges","venial","venice","venin","venine","venins","venire","venom","venoms","venose","venous","vent","vented","venter","vents","venue","venues","venus","verb","verbal","verbid","verbs","verde","verdi","verge","verged","verger","verges","verier","verify","verily","verite","verity","vermin","vernal","vers","versa","versal","verse","versed","verser","verses","verso","versos","versus","vert","vertex","verve","verves","vervet","very","vesper","vessel","vest","vestal","vestas","vested","vestee","vestry","vests","vet","vetch","veto","vetoed","vetoer","vetoes","vets","vex","vexer","vexers","vexes","vexing","via","viable","viably","vial","vialed","vials","viand","viands","vias","vibes","vicar","vicars","vice","viced","vices","vichy","vicing","victor","vicuna","vide","video","videos","vie","vied","vienna","vier","viers","vies","view","viewed","viewer","views","vigil","vigor","vigors","vigour","viking","vile","vilely","viler","vilest","villa","villas","vim","vims","vin","vinal","vinas","vinca","vincas","vine","vineal","vined","vinery","vines","vinic","vinier","vino","vinos","vinous","vins","viny","vinyl","vinyls","viol","viola","violas","violet","violin","viols","vip","viper","vipers","vips","virago","viral","vireo","vireos","virgin","virgo","virgos","virile","virtu","virtue","visa","visaed","visage","visard","visas","viscus","vise","vised","vises","vishnu","vising","vision","visit","visits","visor","visors","vista","vistas","visual","vita","vitae","vital","vitals","vitro","vittle","viva","vivace","vivant","vive","vivo","vivre","vixen","vixens","viz","vizard","vizier","vizir","vizirs","vizor","vizors","vocal","vocals","voce","voces","vodka","vodkas","vogue","vogues","voice","voiced","voicer","voices","void","voided","voider","voids","voila","voile","voiles","vol","vole","voles","volga","volley","volt","voltes","volts","volume","volute","vomit","vomits","von","vortex","votary","vote","voted","voter","voters","votes","voting","votive","vouch","vow","vowed","vowel","vowels","vower","vowers","vowing","vows","vox","voyage","voyeur","vroom","vrooms","vrouw","vrouws","vrow","vrows","vugs","vulcan","vulgar","vulva","vulvae","vulvas","vying","wabble","wabbly","wack","wacks","wacky","wacs","wad","wadded","wadder","waddle","waddly","waddy","wade","waded","wader","waders","wades","wadi","wadies","wading","wadis","wads","wafer","wafers","wafery","waffle","waft","wafted","wafter","wag","wage","waged","wager","wagers","wages","wagged","wagger","waggle","waggly","waggon","waging","wagner","wagon","wagons","wags","wahine","wahoo","wahoos","wail","wailed","wailer","wails","wain","wains","waist","waists","wait","waited","waiter","waits","waive","waived","waiver","waives","wake","waked","waken","wakens","waker","wakers","wakes","waking","wale","waled","waler","wales","waling","walk","walked","walker","walkup","wall","walla","wallah","wallas","walled","wallet","wallop","wallow","walls","walnut","walrus","walt","walter","wammus","wampum","wan","wand","wander","wane","waned","wanes","wang","wangle","waning","wankel","wanner","want","wanted","wanter","wanton","wants","wapiti","war","warble","ward","warded","warden","warder","wards","ware","wared","wares","warier","warily","waring","wark","warks","warm","warmed","warmer","warmly","warms","warmth","warmup","warn","warned","warner","warns","warp","warped","warper","warps","warred","warren","wars","warsaw","wart","warted","warts","warty","wary","was","wash","washed","washer","washes","wasp","wasps","waspy","wast","waste","wasted","waster","wastes","wasts","watch","water","waters","watery","wats","watson","watt","wattle","waul","wauls","wave","waved","waver","wavers","wavery","waves","wavey","waveys","wavier","wavily","waving","wavy","wax","waxer","waxers","waxes","waxier","waxily","waxing","waxy","way","waylay","wayne","ways","weak","weaken","weaker","weakly","weal","weald","weals","wealth","wean","weaned","weaner","weans","weapon","wear","wearer","wears","weary","weasel","weave","weaved","weaver","weaves","web","webbed","weber","webers","webs","wed","wedded","wedder","wedge","wedged","wedges","wedgie","weds","wee","weed","weeded","weeder","weeds","weedy","week","weekly","weeks","ween","weened","weenie","weens","weensy","weeny","weep","weeper","weeps","weepy","weest","weevil","weft","wefts","wehner","weigh","weighs","weight","weiner","weir","weird","weirdo","weirds","weirdy","weirs","weld","welded","welder","welds","welkin","well","welled","wells","welsh","welt","welted","welter","welts","wen","wench","wend","wended","wends","wens","went","wept","were","wert","weskit","wesley","west","wester","wests","wet","wether","wets","wetted","wetter","wha","whack","whacks","whacky","whale","whaled","whaler","whales","wham","whammy","whams","whang","whangs","whap","whaps","wharf","wharfs","wharve","what","whats","wheal","wheals","wheat","wheats","whee","wheel","wheels","wheeze","wheezy","whelk","whelks","whelky","whelm","whelms","whelp","whelps","when","whenas","whence","whens","where","wheres","wherry","whet","whets","whey","wheyey","whig","whigs","while","whiled","whiles","whilom","whilst","whim","whims","whimsy","whine","whined","whiner","whines","whiney","whinny","whiny","whip","whippy","whir","whirl","whirls","whirly","whirr","whirrs","whirry","whirs","whish","whisht","whisk","whisks","whisky","whist","whists","whit","white","whited","whiten","whiter","whites","whitey","whits","whity","who","whoa","whole","wholes","wholly","whom","whomp","whomps","whomso","whoop","whoops","whoosh","whops","whore","whored","whores","whorl","whorls","whose","whosis","whoso","whump","whumps","why","whys","wick","wicked","wicker","wicket","widder","widdle","wide","widely","widen","widens","wider","wides","widest","widget","widish","widow","widows","width","widths","wield","wields","wieldy","wiener","wienie","wierd","wife","wifely","wifing","wig","wigeon","wigged","wiggle","wight","wights","wiglet","wigs","wigwam","wild","wilder","wildly","wilds","wile","wiled","wiles","wilier","wilily","wiling","will","willed","willer","willow","wills","willy","wilson","wilt","wilted","wilts","wily","wimble","wimple","win","wince","winced","wincer","winces","wind","winded","winder","window","winds","windup","wine","wined","winery","wines","winey","wing","winged","wings","wingy","winier","winish","wink","winked","winker","winkle","winks","winned","winner","winnow","wino","winoes","winos","wins","winter","wintry","winy","wipe","wiped","wiper","wipers","wipes","wiping","wire","wired","wirer","wirers","wires","wirier","wiring","wiry","wisdom","wise","wised","wisely","wiser","wises","wisest","wish","wished","wisher","wishes","wishy","wising","wisp","wisped","wisps","wists","wit","witch","witchy","with","withal","withe","withed","wither","withes","within","withy","wits","witted","wive","wived","wiver","wivern","wivers","wives","wiving","wiz","wizard","wizen","wizens","wizes","wkly","woad","woaded","woads","woald","woalds","wobble","wobbly","woe","woeful","woes","woful","wok","woke","woken","woks","wold","wolds","wolf","wolfed","wolfer","wolver","wolves","woman","womans","womb","wombat","wombed","wombs","women","won","wonder","wont","wonted","wonton","wonts","woo","wood","wooded","wooden","woods","woodsy","woody","wooed","wooer","wooers","woof","woofed","woofer","wooing","wool","wooled","woolen","wooler","woolie","woolly","wooly","woops","woos","woosh","wop","wops","word","worded","words","wordy","wore","work","worked","worker","workup","world","worlds","worm","wormed","wormer","worms","worn","worrit","worry","worse","worsen","worser","worses","worst","worsts","wort","worth","worths","worthy","worts","wots","wotted","wound","wounds","wove","woven","wow","wowing","wows","wowser","wpm","wrack","wracks","wraith","wrang","wrap","wraps","wrasse","wrath","wraths","wrathy","wreak","wreaks","wreath","wreck","wrecks","wren","wrench","wrens","wrest","wrests","wretch","wried","wrier","wries","wriest","wright","wring","wrings","wrist","wrists","wristy","writ","write","writer","writes","writhe","writs","wrong","wrongs","wrote","wroth","wry","wryer","wryest","wrying","wurst","wursts","wye","wyes","wyvern","xebec","xebecs","xenon","xenons","xeric","xii","xiv","xix","xmas","xmases","xvi","xxi","xylan","xylem","xylems","xylene","xyloid","xylose","xyster","yabber","yacht","yachts","yack","yacked","yacks","yahoo","yahoos","yahweh","yak","yakked","yaks","yale","yam","yamen","yamens","yammer","yams","yamun","yamuns","yang","yank","yanked","yankee","yanks","yanqui","yap","yapped","yapper","yaps","yard","yarded","yards","yare","yarely","yarer","yarest","yarn","yarned","yarns","yarrow","yaw","yawed","yawing","yawl","yawled","yawls","yawn","yawned","yawner","yawns","yawp","yawped","yawper","yawps","yaws","yay","yclept","yds","yea","yeah","year","year's","yearly","yearn","yearns","years","yeas","yeast","yeasts","yeasty","yegg","yell","yelled","yeller","yellow","yells","yelp","yelped","yelper","yelps","yemen","yen","yenned","yens","yenta","yentas","yeoman","yeomen","yep","yerba","yerbas","yes","yeses","yessed","yesses","yester","yet","yeti","yetis","yew","yews","yid","yids","yield","yields","yin","yins","yip","yipe","yipes","yipped","yippee","yippie","yips","ymca","yod","yodel","yodels","yodhs","yodle","yodled","yodler","yodles","yoga","yogas","yogee","yogees","yoghs","yogi","yogin","yogini","yogins","yogis","yogurt","yoicks","yoke","yoked","yokel","yokels","yokes","yoking","yolk","yolked","yolks","yon","yond","yonder","yoni","yonis","yonker","yore","yores","york","yorker","you","young","youngs","your","yourn","yours","youse","youth","youths","yow","yowed","yowie","yowies","yowing","yowl","yowled","yowler","yowls","yows","yrs","yttria","yttric","yuan","yucca","yuccas","yuk","yukked","yukon","yuks","yule","yules","yup","yuppie","yurt","yurts","ywca","zaftig","zag","zagged","zags","zaire","zanier","zanies","zanily","zany","zap","zapped","zaps","zeal","zealot","zeals","zebecs","zebra","zebras","zebu","zebus","zed","zeds","zee","zees","zeins","zeiss","zen","zenana","zendo","zenith","zephyr","zero","zeroed","zeroes","zeros","zest","zested","zeta","zetas","zeus","zig","zigged","zigs","zinc","zinced","zincky","zincy","zing","zinged","zinger","zings","zinky","zion","zip","zipped","zipper","zips","zircon","zither","zloty","zlotys","zodiac","zoeas","zoftig","zombi","zombie","zombis","zonal","zone","zoned","zoner","zoners","zones","zoning","zonked","zoo","zooid","zooids","zooks","zoom","zoomed","zoons","zoos","zori","zoster","zounds","zuni","zunis","zygote","zymase"],"containment":[{"subwords":[0,1,257,283,287,317,596,7283,7549,7604,8233,8304,12230,12429],"fullWord":1},{"subwords":[4,27,67,1210,1215,1422,2668,2738,2757,3017,4242,4243,4262,15880,16111,16250,18035,19871],"fullWord":4},{"subwords":[5,6,30,67,200,931,1210,1211,1215,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,4427,4430,4618,4629,4826,15893,16270],"fullWord":6},{"subwords":[5,7,67,787,791,817,818,820,825,905,906,931,1210,1215,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2317,2318,2343,5588,5599,5976,5977,14881,14995,15014,15869,15876,16270,16286,16419,16423],"fullWord":7},{"subwords":[5,8,67,931,973,1210,1215,1422,1425,1429,1448,1715,6039,16270,16291],"fullWord":8},{"subwords":[10,11,30,31,72,1009,1210,1211,1243,1246,1462,1464,1466,1515,1542,1560,1721,1722,4427,4548,4551,4618,4630,5620,6055,18302,18339,18541],"fullWord":11},{"subwords":[10,12,31,72,787,817,818,911,1009,1210,1366,1377,1462,1464,1535,1542,1721,1722,2308,2317,2349,5588,5620,5976,5982,6055,14898,14899,14901,14995,15312,15748,18302,18449,18453,18541,18554],"fullWord":12},{"subwords":[5,10,13,31,32,67,72,931,1009,1210,1215,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1716,1721,1722,1724,1736,5616,5620,5626,6055,16041,16043,16270,16293,16457,17723,18302,18318,18540,18541,18559],"fullWord":13},{"subwords":[14,67,72,945,1210,1215,1282,1285,1422,1456,1462,1482,1763,1881,1889,9447,16041,16765,16907,17723,18302,18318,18347,18540,18947],"fullWord":14},{"subwords":[15,51,58,72,720,787,911,1210,1366,1462,2029,2030,2037,2219,2237,2308,2349,2446,12680,12686,12959,13008,14898,14899,15576,15691,18302,18315,18432,18449,18463,19093,19094],"fullWord":15},{"subwords":[16,27,1210,1216,1234,1502,2738,2744,3100],"fullWord":16},{"subwords":[17,18,19,67,973,1219,1222,1422,1425,1429,1448,1715,5632,5635,6039,16270,16291],"fullWord":19},{"subwords":[17,18,20,21,67,79,1196,1197,1219,1222,1234,1422,1425,1502,1507,1749,1751,2721,2722,5619,5632,5635,16103,16270,21097,21105,21130],"fullWord":21},{"subwords":[22,23,51,67,72,1422,1456,1462,1482,2029,2034,2035,2037,2041,2042,2048,2237,12686,12692,15874,16041,17308,17435,17723,17885,18302,18318,18432,18435,18540],"fullWord":23},{"subwords":[22,24,51,72,1462,2029,2037,2042,2237,12686,18302,18432,18495,19131],"fullWord":24},{"subwords":[17,25,26,817,1106,1109,1219,1366,1367,1377,1535,2308,2317,2352,5588,5632,5976,14921,14995,15337,20053],"fullWord":26},{"subwords":[27,28,72,77,126,1053,1243,1462,1490,2517,2697,2738,2766,3052,4242,4243,4263,4375,4427,4562,5445,5453,5462,18302,18319,18339,18508,19390,19391],"fullWord":28},{"subwords":[33,34,51,67,325,905,932,1269,1366,1419,1422,1431,2029,2030,2033,2034,2223,2308,2343,2344,2446,2476,8362,8696,8705,8713,8857,8858,8863,8874,8934,12680,12683,12810,12959,12964,13007,14775,14886,15386,15576,15590,15673,17303,17308],"fullWord":34},{"subwords":[30,35,36,148,326,327,328,1243,1244,1246,1515,1560,1777,1780,1781,4427,4438,4590,4618,4714,4928,4935,4936,5659,9103],"fullWord":36},{"subwords":[30,35,37,326,327,329,349,351,817,854,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,1777,1780,1782,1790,1867,2308,2315,2317,2324,2376,2384,2413,2417,4427,4516,4599,4607,4618,4619,4714,4810,4935,5023,5303,5362,5588,5976,9103,9376,9384,9385,14715,14736,14776,14961,14995,15005,15060,15402,15428,15433],"fullWord":37},{"subwords":[30,35,38,67,200,326,327,331,336,948,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,1763,1764,1777,1780,1784,1788,4427,4430,4461,4618,4629,4714,4826,4901,4908,4935,4939,5037,9103,9106,9111,9127,15893,15928,16270,16765,16780],"fullWord":38},{"subwords":[27,31,39,72,93,126,1009,1462,1464,1542,1721,1722,2738,3052,5620,6055,6057,9457,9531,9557,18302,18541],"fullWord":39},{"subwords":[40,817,1366,1377,1535,1546,2308,2317,2610,5588,5627,5976,9457,9508,9561,9729,14995,15749,15755,15777,19840,19847],"fullWord":40},{"subwords":[10,31,41,43,72,383,385,386,399,488,1009,1210,1213,1301,1462,1464,1542,1636,1661,1721,1722,1922,1936,5620,6055,10061,10247,10324,10460,18302,18307,18309,18370,18541,18547],"fullWord":41},{"subwords":[42,43,385,386,399,1210,1213,1301,1636,1924,10061,10314,10324,21241],"fullWord":42},{"subwords":[31,32,43,45,46,67,72,385,392,399,407,488,1009,1301,1306,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1636,1661,1663,1716,1721,1722,1724,1736,1918,1919,1922,1923,1936,1937,1948,5616,5620,5626,6055,10061,10071,10241,10247,10323,10324,10360,10366,10459,10460,10465,15872,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16999,17022,17023,17723,17724,17750,17811,18302,18309,18311,18318,18341,18370,18374,18540,18541,18547,18548,18559,18660],"fullWord":46},{"subwords":[47,51,385,1324,1984,2029,2100,2113,2160,2173,10061,10136,10139,10738,10748,10756,10833,10842,11173,11265,11817,11921,11928,12712],"fullWord":47},{"subwords":[48,67,325,385,392,932,1269,1422,1431,1903,1904,2028,2668,2673,8362,8394,8397,8936,8940,8960,8961,10061,10071,10231,10323,11039,15942,16746,16999,18035,19592,19871],"fullWord":48},{"subwords":[51,52,65,183,787,1210,1243,1366,1372,2029,2030,2031,2058,2308,2315,2446,2448,4427,5303,12680,12959,14736,15561,15576,15600],"fullWord":52},{"subwords":[30,51,53,54,148,183,184,1243,1246,1515,1560,2029,2058,2059,2060,4427,4438,4441,4590,4618,5114,5659,12745,12752],"fullWord":54},{"subwords":[30,51,53,55,67,183,184,185,197,200,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,2029,2034,2058,2059,2062,2069,4427,4430,4618,4629,4826,5114,5117,5221,5223,12752,12755,15893,16270,17308,17323,17324],"fullWord":55},{"subwords":[51,57,377,385,386,787,1210,1213,1366,2029,2030,2100,2308,2446,10061,10068,10748,10749,12680,12948,12959,15576],"fullWord":57},{"subwords":[51,58,59,67,72,905,911,918,1366,1419,1422,1456,1462,1482,2029,2030,2033,2034,2035,2037,2041,2219,2220,2237,2308,2343,2349,2350,2446,2476,12680,12683,12686,12692,12959,12964,13007,13008,13011,14898,14912,15574,15576,15590,15673,15691,15700,15874,16041,17303,17308,17429,17435,17723,17773,17885,18302,18315,18316,18318,18432,18435,18449,18463,18464,18472,18540,19093,19094,19097,19113,19381],"fullWord":59},{"subwords":[51,60,183,605,1053,1243,1332,1336,1490,2029,2058,2127,2128,2130,2255,2517,2577,2582,4427,4492,4562,5172,5173,5445,5507,5523,12219,12481,12493,12614,19664],"fullWord":60},{"subwords":[51,62,63,67,1106,1114,1422,1425,2029,2034,13087,16076,16270,17307,17308,19967],"fullWord":63},{"subwords":[30,64,787,817,818,1210,1211,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,2308,2315,2317,2376,2384,4427,4516,4607,4618,4619,4810,5303,5588,5976,14736,14961,14995,15060],"fullWord":64},{"subwords":[51,52,65,183,787,1210,1243,1366,1372,2029,2030,2031,2058,2308,2315,2446,2448,4427,5303,12680,12959,14736,15561,15576,15600],"fullWord":65},{"subwords":[66,72,77,781,911,1366,1462,2308,2349,2498,2610,2645,2697,13286,13328,13364,14247,14428,14561,14851,14867,14898,15749,15858,18302,18319,18436,18449,18467,18508,19221,19390,19391,19453,19840],"fullWord":66},{"subwords":[27,67,68,504,1210,1215,1422,2738,2757,2848,2868,3017,11086,11105,11330,15880,15973,15974,16111,16129],"fullWord":68},{"subwords":[31,32,67,69,72,693,694,697,711,1009,1332,1342,1344,1359,1422,1425,1456,1457,1462,1464,1467,1482,1530,1534,1540,1542,1545,1671,1684,1685,1686,1716,1721,1722,1724,1736,5616,5620,5626,5918,6055,6074,6075,12219,12223,12229,12289,12325,12330,12331,12332,12368,12374,12376,15986,15995,16041,16043,16270,16293,16399,16457,17723,18302,18318,18408,18428,18540,18541,18559,18607,18624],"fullWord":69},{"subwords":[25,51,67,70,905,1366,1367,1371,1419,1422,2029,2030,2033,2034,2042,2048,2308,2343,2446,2476,12680,12683,12959,12964,13007,15576,15590,15673,17303,17308],"fullWord":70},{"subwords":[67,71,200,905,1053,1243,1254,1366,1372,1376,1419,1422,1490,1491,2308,2315,2316,2343,2517,2527,2610,2656,2657,2668,4427,4430,4562,4566,5303,5305,5417,5418,5445,5451,14736,14751,15749,15764,15893,18035,19840,19844,19846,19868,19871],"fullWord":71},{"subwords":[30,67,73,74,200,1053,1243,1246,1254,1422,1425,1426,1490,1491,1515,1518,1546,1547,1560,1574,2517,2527,2668,2671,4427,4430,4562,4565,4566,4618,4629,4826,4849,5445,5451,5471,5478,5627,15893,16270,18035,18066,18067,19871,19876,19877],"fullWord":74},{"subwords":[67,73,75,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,1546,1547,2308,2317,2318,2343,2610,2656,2657,2658,2662,2668,5588,5599,5627,5976,5977,14881,14995,15014,15018,15749,15755,15757,15764,15777,15782,15840,15869,16270,16286,16419,16423,18035,18066,18071,18150,19840,19844,19847,19849,19868,19869,19871,19876,19880],"fullWord":75},{"subwords":[67,73,76,973,1422,1425,1429,1448,1546,1547,1715,2668,2672,2687,5627,6039,16270,16291,18035,18043,18066,18073,19871,19876,19882],"fullWord":76},{"subwords":[67,80,81,82,973,1422,1448,1455,1502,1507,11330,11348,11355,11408,11424,12082,15973,16103,16109,21051,21055],"fullWord":81},{"subwords":[83,93,94,2766,3107,3113,4431,4639],"fullWord":83},{"subwords":[84,90,93,114,126,693,694,1009,2869,2883,2908,3052,3107,3145,5620,5849,5856,6055,6057,6074,12229,12325,12374,18408,18541,18607],"fullWord":84},{"subwords":[85,90,93,126,732,781,1009,2921,2922,3052,3107,5620,5956,6055,6057,13154,13155,13168,13364,13367,13438,13439,13464,13613,18436,18437,18541],"fullWord":85},{"subwords":[86,93,96,973,3021,3024,3107,3165,6023,6039,15880,15892,16270,16291,16298,16303],"fullWord":86},{"subwords":[87,183,796,809,2766,2941,2949,3638,3639,3893,4106,5096,12680,12965,12966,14736,15561,15592,15600],"fullWord":87},{"subwords":[88,90,91,126,134,929,3041,3052,3064,3595,3596,3603,3605,3611,3627,3958,3965,3971,4238,4241,12686,12692,15880,16041,16157,16205,17316,17435,17885,18333,18335,18432,18435],"fullWord":88},{"subwords":[89,93,121,796,817,2941,2954,3107,4106,4268,4312,4326,5588,5627,5654,5976,14717,15021,15777,19847],"fullWord":89},{"subwords":[92,93,96,3021,3076,3107,4268,4271,5627,5656,6023,15880,16058,16270,16298,18066,19871,19876],"fullWord":92},{"subwords":[90,93,97,126,1009,2764,3052,3107,3402,3429,3430,5620,6055,6057,9079,18347,18541,18823,18844],"fullWord":97},{"subwords":[93,98,100,114,2869,2883,5582,5856,8297,8483,8540,8542,12229,12339],"fullWord":100},{"subwords":[93,98,102,121,349,796,801,817,2941,2954,3156,3182,3206,3209,3272,3273,3402,5582,5588,5976,5993,8245,8333,8453,8503,8552,8612,8625,8672,9079,9376,9384,14717,14775,14958,15021,15171,15376,15411,15416,15417],"fullWord":102},{"subwords":[103,110,287,2869,3180,3196,3272,3273,3305,3306,3402,7283,7604,8233,8304,8612,9207,9208,9213,12230,12429],"fullWord":103},{"subwords":[106,107,109,326,337,2766,2813,3100,3402,3447,3487,4456,4578,4891,9101,9124,9128,10072,10089,10090,10108,10119,10304,10530,21140],"fullWord":107},{"subwords":[118,119,796,809,810,905,909,2869,2906,2941,3001,3002,3777,3814,3913,3919,12270,12271,12272,12273,12548,12560,12680,12683,12965,12966,12967,12971,13007,13018,14821,15568,15569,15592,15599,15673,15880,15986,16134,16142,16203,17303,17316,17383,17384],"fullWord":119},{"subwords":[120,126,3052,3402,3429,4375,14589,14599,14630,14659,14660,14689,18347,18508,18823],"fullWord":120},{"subwords":[125,796,809,810,905,973,988,2941,3001,4084,4191,12680,12683,12965,12966,12967,12971,13007,13018,13019,15592,15599,15673,15880,15892,16142,16155,17303,17306,17316,17434],"fullWord":125},{"subwords":[110,126,128,129,287,693,700,701,2869,2908,3052,3402,3429,4239,7283,7289,7416,7561,7604,7637,7745,9207,9208,9325,12230,12463,18342,18347,18408,18410,18823,18894,18901],"fullWord":129},{"subwords":[117,126,128,130,693,700,701,2869,2908,2913,3052,3060,3402,3403,3429,3605,3609,3689,3777,3816,3965,3966,9097,9207,9208,9325,9335,9360,9367,12293,12463,12574,12575,12686,13038,18333,18347,18408,18432,18823,18894,19036,19049],"fullWord":130},{"subwords":[93,126,131,1009,1106,3052,3080,3088,3402,3429,3430,3441,5620,6055,6057,6105,9079,18347,18541,18823,18844,19975,19977,20095,20107,20119,20129,20210,20211],"fullWord":131},{"subwords":[126,132,133,134,796,809,810,905,911,918,929,2941,3001,3003,3011,3041,3047,3048,3052,3064,3603,3605,3611,3958,3959,3965,3971,4238,4241,12680,12683,12686,12692,12965,12966,12967,12971,13007,13008,13011,13018,14898,14912,15574,15592,15599,15673,15691,15700,15880,16041,16142,16157,16205,16246,17303,17316,17429,17435,17773,17885,18333,18335,18432,18435,18449,18463,18464,18472,19093,19094,19097,19098,19100,19113,19381],"fullWord":133},{"subwords":[111,126,135,488,2813,3052,3071,4289,4375,10072,18365,18508,19605],"fullWord":135},{"subwords":[126,136,3052,3100,3402,3429,3440,4375,9101,18347,18508,18823],"fullWord":136},{"subwords":[93,112,114,137,528,586,2848,2853,2869,2883,4268,4293,5627,5846,5856,11086,11089,11213,11218,11437,11446,11512,11534,12229,12244,12245],"fullWord":137},{"subwords":[93,121,126,138,139,796,817,911,1009,1096,2941,2954,2962,3003,3004,3052,3055,3161,4085,4214,4268,4312,4316,4326,4357,4375,4376,4378,5588,5620,5627,5654,5976,5982,6019,6055,6057,14717,14898,14901,14959,15021,15049,15059,15312,15748,15777,15858,18449,18453,18508,18541,18554,19197,19350,19356,19847],"fullWord":139},{"subwords":[93,96,126,134,138,140,1009,3021,3041,3042,3052,3057,3064,3076,4238,4241,4268,4271,4272,4375,4376,4379,4394,5616,5620,5626,5627,5656,6023,6055,6057,15880,16041,16043,16058,16070,16157,16265,16266,16267,16270,16293,16298,16304,16457,18066,18074,18508,18541,18559,19871,19876],"fullWord":140},{"subwords":[141,142,200,269,270,280,931,4707,4826,5707,5708,7253,7258,7396,7460,15893,15910,15911,15912,16270],"fullWord":142},{"subwords":[143,183,299,326,4451,4890,4947,5123,7253,7761,7782],"fullWord":143},{"subwords":[146,147,200,781,925,961,4548,13171,13177,13336,13352,13353,13364,13385,14427,15893,16014,16041,17476,17510,18339,18340,18436,18448,19386],"fullWord":147},{"subwords":[148,149,150,605,4438,4492,4500,4590,4605,4774,5659,5865,12229],"fullWord":150},{"subwords":[148,151,152,158,200,817,825,905,906,4438,4445,4516,4517,4520,4590,4594,4607,4611,4810,4826,5340,5341,5588,5599,5659,5976,5977,14736,14751,14881,14882,14961,14962,14963,14965,15060,15087,15893,15895,16270,16286,16419],"fullWord":152},{"subwords":[106,126,148,153,169,326,2766,3052,3402,3429,4438,4925,4926,4928,18339,18347,18823],"fullWord":153},{"subwords":[148,154,287,326,605,4438,4492,4502,4890,4928,4947,4985,4993,7253,7283,7604,12230],"fullWord":154},{"subwords":[148,149,155,156,399,4438,4466,4590,4601,4728,5659,5756,10090,10093,10094,10324,10327,10378],"fullWord":156},{"subwords":[148,155,157,158,200,399,407,4438,4445,4466,4467,4590,4594,4601,4603,4728,4826,5659,5756,5760,10090,10093,10094,10099,10107,10227,10324,10327,10331,10360,10378,15893,15897,15942,15948,16270,16274,17044],"fullWord":157},{"subwords":[93,94,148,159,1053,2766,4263,4268,4269,4431,4438,4590,4639,5440,5455,5466,5467,5471,5627,5659],"fullWord":159},{"subwords":[126,148,160,1053,2766,3052,4263,4375,4438,5440,5453,5462,5466,18339,18508],"fullWord":160},{"subwords":[161,162,200,732,733,739,779,781,961,1009,4551,4555,4805,4826,5616,5620,5626,5956,6033,6055,13171,13177,13336,13352,13355,13356,13364,13367,13368,13374,13385,13439,13461,13464,13465,13478,13488,13609,13613,13626,14427,15893,16014,16041,16043,16044,16270,16293,16409,16410,16457,17476,17481,17510,17511,17530,17806,17836,18339,18340,18436,18437,18438,18441,18448,18541,18559,18575,19386],"fullWord":162},{"subwords":[163,200,1009,4551,4555,4680,4826,5605,5606,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16294,16310,16319,16320,16457,16458,17806,17816,18339,18340,18541,18559,18560,18561,18575,18576,18577,18588],"fullWord":163},{"subwords":[164,817,4516,4607,4678,4810,5588,5589,5976,5984,8217,8327,8333,8334,8440,8442,8453,8454,8483,8484,8552,8558,8562,14736,14775,14961,15060,15093,15376],"fullWord":164},{"subwords":[165,166,200,326,327,331,336,948,1053,4461,4714,4826,4849,4901,4935,4939,5037,5471,5478,5627,9103,9106,9111,9127,9449,9450,15893,15928,16063,16270,16780,18066,18067,18083,19871,19876,19877],"fullWord":166},{"subwords":[165,167,326,327,1053,1098,1167,1168,4714,4850,4935,5471,5627,5628,9103,9449],"fullWord":167},{"subwords":[171,172,183,326,605,4492,4985,5083,5172,5173,9360,9480,9625,12493,12758],"fullWord":172},{"subwords":[171,173,817,1053,4516,4607,4726,4810,5471,5588,5627,5976,9471,9508,9561,9729,14736,14961,15060,15773,15777,15778,19847],"fullWord":173},{"subwords":[171,174,200,1053,5548,9681,9734,9735,9741,9744,15893,16041,17999,18339,18340,18508,19871],"fullWord":174},{"subwords":[178,326,327,329,341,342,343,349,351,540,541,553,817,854,869,871,4472,4475,4516,4599,4607,4714,4810,4818,4819,4896,4935,4938,4971,4972,4973,5023,5318,5342,5588,5658,5830,5976,9103,9109,9376,9384,9385,11107,11115,11120,11145,11276,11285,11286,11292,11437,11438,11467,11539,11626,11743,11744,14736,14776,14808,14810,14961,14975,15060,15202,15428,15433,15480,15481,15482],"fullWord":178},{"subwords":[169,170,179,180,200,326,336,341,347,540,544,545,555,4461,4472,4489,4896,4901,4971,4983,5037,9127,9422,9447,11107,11123,11145,11147,11160,11330,11356,11361,11376,11626,11628,11641,11642,11780,15893,15928,15973,16041,16764,16907,17179,17741,18339,18340,18347,18389,18407,18882,18947],"fullWord":180},{"subwords":[169,179,181,182,326,341,540,4472,4896,4971,11107,11145,11361,11401,11402,11626,11797,11802,18339,18347,18389,18528,18533,18882],"fullWord":182},{"subwords":[30,51,53,55,67,183,184,185,197,200,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,2029,2034,2058,2059,2062,2069,4427,4430,4618,4629,4826,5114,5117,5221,5223,12752,12755,15893,16270,17308,17323,17324],"fullWord":185},{"subwords":[183,187,322,481,8217,8276,8321,8721,8749,8845,10090,10182,10730,10864,12837,12913,13171,13204,13967,14020,14056],"fullWord":187},{"subwords":[168,183,188,197,200,326,336,605,610,647,691,4461,4492,4901,4985,5007,5037,5172,5173,5188,5221,9127,9307,9360,9366,12493,12501,12560,12758,15893,15928,15986,15988,16858,17323,17324,17383],"fullWord":188},{"subwords":[183,189,190,197,200,781,961,1028,5221,5233,5234,5245,12686,12692,12936,12937,12944,13171,13177,13336,13343,13352,13364,13385,14020,14023,14182,14188,14201,14427,15893,16014,16041,17298,17323,17324,17406,17435,17476,17510,17644,17885,17921,18339,18340,18432,18435,18436,18448,18970,18971,19075,19090,19386],"fullWord":190},{"subwords":[148,151,183,191,192,817,4438,4441,4516,4517,4590,4607,4796,4810,5114,5115,5340,5588,5659,5976,12680,12681,12745,12746,12752,12979,12980,14736,14961,14962,15060,15078,15561,15600,15603,15610],"fullWord":192},{"subwords":[183,191,193,814,817,4516,4518,4607,4810,5114,5115,5346,5588,5976,6008,12680,12681,12752,12974,12979,12980,14736,14872,14961,14983,15060,15078,15561,15562,15570,15571,15600,15603,15610],"fullWord":193},{"subwords":[183,191,194,197,200,817,825,891,905,906,4516,4520,4607,4611,4810,4826,5114,5115,5116,5117,5216,5217,5221,5223,5225,5588,5599,5976,5977,6004,12680,12681,12683,12752,12755,12979,12980,12982,13007,14736,14751,14881,14882,14961,14965,15060,15078,15081,15087,15561,15563,15600,15603,15609,15610,15611,15673,15676,15677,15893,16030,16270,16286,16419,17303,17304,17323,17324,17419],"fullWord":194},{"subwords":[183,195,196,197,200,605,610,905,909,4492,4532,4536,5172,5173,5188,5216,5217,5221,12274,12493,12501,12548,12560,12680,12683,13007,14736,14749,14750,14751,14821,14826,14828,15561,15563,15568,15569,15600,15609,15673,15893,15986,15988,16030,17303,17323,17324,17383,17384],"fullWord":196},{"subwords":[169,198,250,254,326,349,828,854,911,4447,4537,5034,5307,5327,5369,6230,6254,6261,6308,6332,6344,6518,6621,6651,7042,9376,14736,14754,14776,14898,15428,15458,18339,18347,18449,19259],"fullWord":198},{"subwords":[169,183,199,326,349,854,911,4537,5034,5234,5327,5387,9367,9376,12680,12686,13008,14736,14743,14776,14898,14909,15428,15504,15561,15600,15691,18339,18347,18432,18449,18451,18463,18945,18970,19093,19094,19259,19292,19310],"fullWord":199},{"subwords":[51,67,183,197,200,201,905,1243,1254,1366,1372,1376,1419,1422,2029,2030,2031,2032,2033,2034,2058,2069,2308,2315,2316,2343,2446,2448,2449,2476,4427,4430,5094,5216,5217,5221,5303,5305,12680,12683,12959,12964,13007,14736,14751,15561,15563,15576,15590,15600,15609,15673,15893,16030,17303,17308,17323,17324],"fullWord":201},{"subwords":[200,202,203,488,1053,1072,5442,5444,5548,10090,10107,10241,10270,10274,11044,15893,15942,15960,16041,16066,17022,17147,17999,18339,18340,18388,18508,19427,19605,19871],"fullWord":203},{"subwords":[204,205,210,605,693,694,695,1009,1106,4492,4500,4512,4551,4569,4605,4774,4788,4851,5620,5865,6055,6074,12229,12305,12325,12374,18339,18408,18541,18607,18610,19910,19948,19950,19951,19975,19990,20027,20046,20095],"fullWord":205},{"subwords":[30,204,206,817,1106,1109,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,2308,2315,2317,2352,2353,2376,2384,4427,4516,4569,4607,4618,4619,4810,4851,5303,5329,5588,5976,14736,14921,14922,14961,14995,15060,15337,19910,19990,20053],"fullWord":206},{"subwords":[204,207,210,817,911,1009,1106,1109,1112,4516,4537,4551,4553,4569,4607,4810,4812,4851,5327,5329,5588,5620,5976,5982,6055,14736,14898,14901,14902,14921,14922,14961,15060,15312,15318,15337,15748,18339,18449,18450,18453,18454,18541,18554,19205,19227,19233,19910,19975,19990,20080,20095],"fullWord":207},{"subwords":[93,94,106,204,208,326,327,1106,1120,2766,3080,3082,3088,3402,4431,4569,4639,4714,4851,4909,4935,5067,5071,9079,9082,9103,19910,19990,19991,20107,20119,20120,20126,20129,20130],"fullWord":208},{"subwords":[200,204,209,326,327,331,336,948,1106,1114,1120,1124,4461,4569,4570,4571,4714,4826,4851,4852,4901,4935,4939,5037,5067,5070,5071,5076,9103,9106,9111,9127,15893,15928,16076,16077,16270,16780,19910,19911,19967,19990,20107,20115,20126,20129,20130,20134,20191,20192,20197,20198],"fullWord":209},{"subwords":[212,586,1053,4472,4559,4578,5555,11107,11361,11392,11408,12091,18339,18389,18508,21051],"fullWord":212},{"subwords":[93,114,117,215,216,2869,2883,2900,3402,3403,3413,3689,3777,3786,5653,5856,5953,9079,9097,9207,9208,9360,12229,12410,12721,12874,12876],"fullWord":216},{"subwords":[218,817,818,826,911,1009,5588,5620,5622,5976,5982,5984,6055,14898,14899,14901,15312,15748,18449,18453,18541,18554,18576,19240],"fullWord":218},{"subwords":[219,337,349,372,377,399,817,818,819,852,857,5588,5592,5976,9376,9384,10121,10324,10355,10414,10502,10536,10549,10675,10677,14780,14968,15399,15444,15473],"fullWord":219},{"subwords":[220,221,326,327,329,349,351,817,854,4516,4599,4607,4609,4678,4714,4810,4935,5023,5588,5589,5725,5735,5976,5984,5995,9103,9108,9376,9384,9385,14736,14776,14961,15060,15093,15428,15433],"fullWord":221},{"subwords":[220,222,349,352,817,5588,5735,5976,5984,5995,6008,9376,9384,14872,14983],"fullWord":222},{"subwords":[220,223,349,359,817,825,858,863,905,906,5588,5599,5605,5609,5612,5735,5976,5977,5978,5984,5995,9376,9384,9389,9409,14788,14881,15526,16024,16028,16270,16286,16319,16340,16419,16425,16889,16890,16892,17722],"fullWord":223},{"subwords":[224,227,242,349,361,817,828,1196,5588,5976,6239,6254,6255,6260,6308,6317,6386,6392,6509,6543,6551,6621,6622,7050,7140,9376,9384,14939,15114,15172,15446,15864,15866,21071,21097,21099],"fullWord":224},{"subwords":[225,227,337,349,361,399,817,857,1196,5588,5592,5594,5976,9376,9384,10121,10304,10306,10324,10355,10359,10414,10495,10502,10536,10549,10675,10677,11065,11074,14780,14939,14968,15183,15201,15399,15444,15473,15558,15864,15866,21050,21071,21097,21099],"fullWord":225},{"subwords":[51,226,817,1366,1377,1535,1576,1587,2029,2030,2072,2205,2308,2317,2446,5588,5976,5984,12680,12959,12979,14995,15576,15579,15610],"fullWord":226},{"subwords":[229,817,826,911,1009,5588,5600,5620,5622,5976,5982,5984,6055,6066,8333,8360,8378,8381,8383,8453,8458,8461,8463,8483,8552,8562,8563,14775,14898,14901,15165,15312,15376,15748,18449,18453,18541,18554,18576,18697,18698,18712,18767,19240],"fullWord":229},{"subwords":[230,233,817,818,828,4516,4595,4607,4810,5588,5976,6230,6231,6232,6308,6309,6317,6318,6392,6406,7056,14736,14961,15060,15114],"fullWord":233},{"subwords":[230,234,349,828,852,6254,6308,6621,9376,14752,15450],"fullWord":234},{"subwords":[93,126,235,254,1009,2785,3052,5620,5705,6055,6057,6210,6215,6225,6344,6347,6399,6485,18541],"fullWord":235},{"subwords":[236,341,349,828,869,6254,6308,6324,6621,6629,6630,9376,11276,11647,14808,15450,15480],"fullWord":236},{"subwords":[237,1060,1098,6376,6383,6727,6821,6851,10301,10978,11058],"fullWord":237},{"subwords":[183,238,252,828,5120,6230,6308,6328,6940,6941,6951,7103,12672,12680,12771,14736,15561,15600],"fullWord":238},{"subwords":[230,239,828,6308,6386,7050,7140,14939,15864],"fullWord":239},{"subwords":[0,240,283,317,596,6240,6293,6296,7549,8233,8304,12230],"fullWord":240},{"subwords":[241,326,327,337,338,399,4466,4595,4601,4714,4728,4739,4891,4935,5756,5765,6230,6231,6246,6247,6406,6537,6538,6543,6546,6568,6569,6734,6740,6764,9103,9104,9117,10090,10093,10119,10324,10327,10333,10378,10414,10530,10536,10537,10539,10554],"fullWord":241},{"subwords":[243,399,409,466,504,5765,5782,5827,6285,6446,6696,6734,10136,10137,10145,10324,10333,11173,11174,11180,11437,11442],"fullWord":243},{"subwords":[244,254,409,474,488,495,6344,6345,6717,6787,6861,10734,10788,10897,12672,12686,12785,18432],"fullWord":244},{"subwords":[230,246,326,349,828,852,854,6230,6254,6308,6309,6621,9376,14736,14776,15428],"fullWord":246},{"subwords":[247,254,255,817,826,828,911,1009,5588,5620,5622,5705,5976,5982,5984,6055,6308,6317,6332,6344,6347,6392,6399,6400,6409,6420,6485,6489,7042,7057,7073,14754,14898,14901,15098,15114,15135,15312,15748,18449,18453,18541,18554,18576,19240,19243],"fullWord":247},{"subwords":[248,325,817,825,828,905,906,932,5588,5599,5976,5977,6308,6317,6321,6392,6395,7071,8333,8338,8362,8453,8456,8552,8584,8934,14775,14881,14886,15114,15134,15376,15377,15904,15906,16270,16286,16419,16431,16549,16574,16575,16577],"fullWord":248},{"subwords":[230,249,349,796,828,852,2941,3402,6218,6254,6308,6530,6621,9376],"fullWord":249},{"subwords":[250,251,254,349,359,828,905,911,918,997,6254,6259,6261,6264,6308,6332,6334,6339,6344,6354,6518,6519,6621,6636,6637,6647,6651,6654,7042,7044,9135,9376,9409,9447,14754,14757,14898,14912,15458,15460,16028,16041,16801,16889,16907,16908,17722,17744,17773,17881,17967,18347,18449,18472,18474,18947,19381],"fullWord":251},{"subwords":[254,255,256,817,825,828,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5705,5706,5976,5977,5982,6018,6055,6308,6317,6321,6332,6334,6339,6342,6344,6347,6349,6354,6392,6395,6397,6399,6402,6485,6487,7042,7044,7073,7074,14754,14757,14881,14898,14901,14905,14912,15114,15134,15135,15306,15312,15748,15904,15906,16041,16043,16270,16286,16293,16419,16431,16457,17773,17775,17944,18449,18453,18455,18472,18541,18554,18557,18559,19243,19381],"fullWord":256},{"subwords":[258,259,504,7317,7342,7396,11127,11140,11330,12081,15910,15911,15973],"fullWord":259},{"subwords":[260,341,504,2848,3402,7317,7331,11086,11127,11132,11133,11617,11649],"fullWord":260},{"subwords":[261,262,269,732,5956,7365,7366,13184,13439,13516],"fullWord":261},{"subwords":[265,266,269,280,931,1009,5616,5620,5626,6055,7396,7416,7417,7419,7423,7540,7541,15910,15911,15912,16041,16043,16270,16293,16457,17732,17733,18342,18345,18541,18559],"fullWord":266},{"subwords":[267,268,269,280,931,1106,1114,1115,7396,7439,15910,15911,15912,16073,16076,16270,19967,20003],"fullWord":268},{"subwords":[269,270,271,297,399,1196,4466,4578,4601,4728,4729,5567,5675,5707,5756,7253,7293,7298,7447,7477,7478,7649,7650,7654,10090,10093,10108,10109,10304,10305,10324,10327,10332,10378,10382,10398,10495,11065,21050,21097],"fullWord":271},{"subwords":[269,272,281,287,288,5709,7267,7269,7283,7352,7493,7578,7604,12229,12230],"fullWord":272},{"subwords":[214,269,273,280,341,347,546,555,5716,5845,7317,7323,7327,7342,7396,7489,7492,9158,9160,9422,11127,11128,11129,11132,11140,11330,11437,11453,11487,11560,11649,11654,11764,12081,15910,15912,15973,15978,16270,16278,16375,16764,16813],"fullWord":273},{"subwords":[214,269,274,280,290,1009,5616,5620,5626,5716,6055,7289,7292,7396,7416,7417,7419,7423,7540,7541,7635,7637,9447,15910,15912,16041,16043,16270,16293,16457,16907,16911,17732,17733,18342,18345,18347,18541,18559,18844,18850,18947],"fullWord":274},{"subwords":[93,114,269,275,716,1196,2788,2793,2797,2869,2883,3100,4400,5856,7447,7493,12229,12230,12311,21058,21097,21120],"fullWord":275},{"subwords":[141,269,270,276,596,605,4492,4493,4500,4502,4605,4774,5707,5865,7253,7493,12229,12230],"fullWord":276},{"subwords":[269,277,278,280,634,693,694,697,711,1009,5616,5620,5626,5918,6055,6074,6075,7396,7416,7417,7419,7423,7493,7511,7512,7517,7540,7541,7745,7746,12229,12230,12233,12289,12325,12330,12368,12374,12376,15910,15912,15986,15995,16001,16041,16043,16270,16293,16399,16457,17211,17732,17733,18342,18345,18408,18410,18416,18428,18541,18559,18607,18624],"fullWord":278},{"subwords":[214,269,280,281,282,5709,5715,5716,7267,7269,7273,7280,7396,7578,7579,7582,15910,15912,16270],"fullWord":282},{"subwords":[0,2,283,284,285,317,325,932,7396,7399,7416,7423,7550,7551,7552,8233,8237,8362,8371,8372,8378,8391,8935,15910,15911,16041,16513,16559,17732,18342,18345],"fullWord":285},{"subwords":[287,288,289,647,691,7267,7280,7283,7287,7352,7357,7396,7578,7579,7582,7604,7611,9307,12230,12233,15910,15986,16001,16815,16858,16866,17211],"fullWord":289},{"subwords":[290,291,973,990,7289,7292,7396,7416,7423,7635,7636,7637,9447,15910,15923,16041,16903,16907,16915,17732,17739,18342,18345,18347,18487,18947],"fullWord":291},{"subwords":[263,269,292,377,399,411,412,817,818,819,829,833,5588,5592,5976,5988,7293,7294,7298,7375,7461,7477,7661,7898,10060,10109,10110,10208,10324,10355,10398,14758,14759,14762,14968,15141,15143],"fullWord":292},{"subwords":[269,293,399,411,412,466,504,5782,7293,7294,7298,7317,7323,7477,7489,7671,10109,10136,10137,10145,10324,10398,11127,11128,11173,11174,11180,11437,11442,11487],"fullWord":293},{"subwords":[269,280,295,296,399,407,488,1009,5616,5620,5626,6055,7260,7293,7298,7300,7316,7396,7416,7417,7419,7423,7477,7486,7487,7488,7540,7541,10109,10115,10241,10247,10324,10360,10366,10398,10412,10459,10460,10465,15910,15912,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,17003,17022,17023,17732,17733,17750,17811,18341,18342,18345,18370,18374,18541,18547,18548,18559,18660],"fullWord":296},{"subwords":[299,301,375,411,478,596,598,600,629,631,7293,7294,7361,7764,10109,10741,10793,10794,10826,12230,12509],"fullWord":301},{"subwords":[110,117,287,299,303,2869,3402,3403,3665,3682,3689,3777,3794,7283,7604,9097,9207,9208,9218,9360,12230,12509],"fullWord":303},{"subwords":[263,269,299,306,307,817,818,5588,5718,5976,5988,5989,7375,7461,7788,7855,12680,12798,12979,14758,14759,14762,15141,15610],"fullWord":307},{"subwords":[263,264,299,306,308,905,7375,7391,7396,7939,12680,12683,13007,14758,14759,14760,14773,15673,15910,15911,15921,17303],"fullWord":308},{"subwords":[299,309,1093,7289,7416,7637,7768,7874,7886,8175,9367,9369,12686,13048,13059,18342,18347,18432,18508,18993,18994,19418],"fullWord":309},{"subwords":[299,310,1093,7416,7447,7768,7874,7886,7888,7895,8175,8180,12686,13059,18342,18432,18508,18993,18994,19186,19418,21162,21193],"fullWord":310},{"subwords":[269,270,311,312,817,4516,4607,4678,4810,5310,5351,5583,5588,5589,5666,5667,5669,5707,5976,5984,5988,7253,7375,7383,7461,7462,7467,7468,7907,7908,7979,14736,14758,14762,14763,14961,15060,15093,15141],"fullWord":312},{"subwords":[269,279,280,311,313,817,825,905,906,5583,5584,5588,5599,5605,5609,5976,5977,5978,5984,5988,5992,7375,7391,7396,7461,7463,7467,7473,7939,7970,14758,14762,14764,14773,14881,15141,15148,15910,15912,15914,16024,16026,16270,16286,16319,16340,16419,16425,16433],"fullWord":313},{"subwords":[104,318,3675,3826,8239,8714,8812,12809,12895],"fullWord":318},{"subwords":[0,2,317,321,325,341,347,504,505,506,536,555,556,932,945,8290,8296,8362,8648,8678,9422,11330,11335,15973,16531,16627,16764],"fullWord":321},{"subwords":[323,325,817,825,891,905,906,932,942,5588,5599,5976,5977,6004,8333,8338,8362,8453,8456,8552,8575,8581,8584,8696,8699,8725,8728,8729,8730,8857,8858,8863,8874,8875,8881,8934,12680,12683,12810,12979,12982,13007,14775,14881,14886,15376,15377,15386,15610,15611,15673,15676,16270,16286,16419,16549,16574,16577,16676,16678,16697,17303,17419],"fullWord":323},{"subwords":[200,326,327,329,330,331,336,349,351,359,817,825,854,858,863,905,906,948,4461,4516,4520,4599,4600,4607,4611,4714,4810,4826,4901,4935,4939,5023,5037,5367,5588,5599,5976,5977,9103,9106,9111,9127,9376,9377,9384,9385,9389,9409,14736,14751,14776,14779,14788,14789,14881,14882,14961,14965,15060,15087,15428,15433,15436,15443,15526,15893,15928,16028,16270,16286,16419,16780,16889,16890,16891,17722],"fullWord":330},{"subwords":[326,332,337,1053,1060,1072,4891,5442,6230,6246,6821,6828,9449,10090,10119,10270,10530],"fullWord":332},{"subwords":[287,326,333,605,4492,4502,4890,4947,4985,4993,7253,7283,7604,9227,12230],"fullWord":333},{"subwords":[144,175,177,326,334,341,504,507,540,596,605,640,4472,4479,4492,4493,4896,4897,4971,4985,11107,11145,11156,11213,11231,11626,11697,11702,12234,12244,12443],"fullWord":334},{"subwords":[176,177,326,327,335,341,342,528,529,540,541,605,4472,4475,4479,4492,4500,4605,4714,4774,4780,4896,4898,4935,4938,4971,4972,4985,4988,5658,5865,9103,9109,11107,11115,11145,11146,11156,11157,11213,11218,11219,11437,11438,11446,11467,11469,11489,11512,11516,11626,11645,11697,11702,11706,11707,12229,12244,12245,12246,12443],"fullWord":335},{"subwords":[287,337,339,416,426,428,7283,7293,7585,7604,9146,10109,10120,10637,12230,12238,12438],"fullWord":339},{"subwords":[341,343,344,347,349,359,546,553,554,555,817,825,858,863,869,875,883,905,906,5588,5599,5830,5831,5845,5976,5977,9376,9384,9389,9409,9422,11276,11286,11287,11292,11314,11315,11330,11333,11437,11453,11539,11560,11743,11745,11764,11765,14788,14808,14810,14811,14820,14881,14975,14978,15202,15224,15480,15481,15484,15489,15526,15973,15978,16028,16270,16278,16286,16375,16419,16764,16889,16890,17161,17722],"fullWord":344},{"subwords":[337,341,345,497,586,1060,6246,6585,6821,10136,10584,10585,11148,11173,11182,11387,11615,11659],"fullWord":345},{"subwords":[287,341,346,7283,7317,7334,7604,11127,11132,11156,11213,11649,11697,11711,11714,12230,12244,12443],"fullWord":346},{"subwords":[67,349,350,359,905,1366,1419,1422,1763,2308,2343,2610,2656,2657,2668,9376,9409,15402,15410,15749,15764,16028,16765,16889,17722,18035,18083,19840,19844,19868,19871],"fullWord":350},{"subwords":[349,353,359,817,825,858,863,905,906,911,918,993,997,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9376,9382,9384,9389,9409,9447,14788,14881,14898,14901,14905,14912,15306,15312,15526,15542,15543,15748,16028,16041,16043,16051,16270,16286,16293,16419,16457,16889,16890,16907,16908,16911,17722,17744,17773,17775,17881,17967,17968,18347,18449,18453,18455,18472,18474,18541,18554,18557,18559,18844,18847,18849,18850,18941,18943,18947,19277,19381],"fullWord":353},{"subwords":[349,352,354,817,5588,5976,6008,9376,9384,14872,14983],"fullWord":354},{"subwords":[337,349,355,361,428,9146,9376,10121,10304,10502,10675,14780,14939,15399,15558,15864],"fullWord":355},{"subwords":[287,349,356,7283,7375,7604,7918,8015,9376,9378,9391,12230,14758,14784,14821,14832,14838,15461,15494],"fullWord":356},{"subwords":[341,349,357,504,507,596,640,852,869,9204,9376,9378,11156,11213,11231,11276,11291,11293,11697,12244,12443,14784,14808,14821,14838,15480],"fullWord":357},{"subwords":[341,343,349,358,528,553,817,869,5588,5595,5830,5976,5996,9204,9376,9378,9384,11156,11157,11213,11218,11276,11286,11292,11294,11437,11446,11489,11512,11539,11645,11697,11706,11708,11743,12229,12244,12245,12248,12319,12443,14784,14808,14810,14821,14838,14975,15175,15202,15205,15207,15480,15481],"fullWord":358},{"subwords":[349,360,361,852,1144,1166,9376,14933,14939,15864,20410,20448,20493,20824,21010,21079],"fullWord":360},{"subwords":[200,326,327,331,336,337,338,340,362,363,399,407,948,4461,4466,4467,4601,4603,4714,4728,4739,4742,4826,4891,4895,4901,4935,4939,5037,5756,5760,9103,9104,9105,9106,9111,9117,9121,9127,9416,9417,10090,10093,10099,10100,10107,10119,10227,10324,10327,10331,10360,10378,10414,10415,10530,10535,10536,10537,10551,15893,15928,15931,15932,15942,15948,16270,16274,16780,16784,17044,17068,17069],"fullWord":363},{"subwords":[337,340,362,364,399,407,973,6039,9416,9418,10230,10236,10238,10324,10360,10414,10415,10453,10536,10551,15931,15935,15942,15948,15950,16270,16274,16277,16291,16903,16904],"fullWord":364},{"subwords":[367,950,5605,5740,5742,5918,9816,9820,9836,9843,9970,9974,12229,12339,15939,15986,15995,16007,16270,16319,16326,16335,16944,17216,17234],"fullWord":367},{"subwords":[51,341,368,564,1851,2029,9064,9077,11265,11817,11854,12675,12700],"fullWord":368},{"subwords":[373,374,382,466,470,487,504,10136,10137,10138,10161,10181,10738,10740,11173,11174,11265,11330,11813,12872,15942,15973,15981,17012,17354,17378],"fullWord":374},{"subwords":[377,378,379,382,466,470,504,869,883,905,10136,10137,10138,10161,11173,11174,11276,11303,11314,11330,14808,14820,15942,15973,17012],"fullWord":379},{"subwords":[377,378,380,466,497,504,586,869,920,1078,1080,10136,10137,10278,11173,11174,11276,11303,11387,12141,14808,15806,19837],"fullWord":380},{"subwords":[383,384,399,488,1009,4466,4548,4551,4601,4604,4728,4747,5620,5756,6055,10090,10093,10247,10248,10324,10327,10378,10460,18339,18370,18541,18547],"fullWord":384},{"subwords":[49,375,385,386,387,596,598,716,1210,1213,1332,1333,1502,10061,10304,12219,12311],"fullWord":387},{"subwords":[30,43,51,53,183,184,385,388,399,472,1243,1246,1296,1301,1302,1515,1560,1636,1900,1938,2029,2058,2059,2100,2102,2106,4427,4466,4587,4601,4618,4728,5089,5114,5146,5756,10061,10090,10093,10324,10327,10378,10443,10730,10748,10753,10754,10780,12752,12837,12845],"fullWord":388},{"subwords":[31,43,72,337,385,389,399,434,488,1009,1272,1282,1301,1307,1462,1464,1542,1636,1661,1721,1722,1817,1881,1884,1922,1936,5620,6055,9437,10061,10126,10247,10324,10414,10460,10504,10536,10691,10694,18302,18309,18347,18349,18370,18541,18547,18844,18863,18866],"fullWord":389},{"subwords":[31,43,44,72,385,390,399,405,488,491,817,911,1009,1301,1304,1366,1377,1462,1464,1535,1542,1636,1661,1721,1722,1915,1922,1933,1936,2308,2317,2349,5588,5592,5620,5976,5982,6055,10061,10247,10254,10324,10355,10460,14898,14901,14968,14995,15312,15748,18302,18309,18370,18372,18449,18453,18541,18547,18554],"fullWord":390},{"subwords":[51,56,337,385,391,1272,1307,1332,1837,1838,1851,1852,1905,2029,2095,2100,2127,2128,9360,10061,10120,10504,10652,10663,10741,10748,10814,12219,12238,12406,12438,12481,12700,12812],"fullWord":391},{"subwords":[67,385,392,393,394,470,497,501,586,1324,1325,1422,2567,2576,2668,10061,10071,10136,10139,10144,10161,10323,11173,11330,11387,11390,15942,15973,16999,17012,17135,18035,18103,19871],"fullWord":394},{"subwords":[93,395,399,472,1106,2813,2842,3080,3480,3571,3597,3661,3701,3702,3708,3997,5650,10072,10073,10285,10324,10443,10471,10472,10488,10760,10935,12845,13087,13088,19923,19924,19986,20014,20231,20233,20250,20251],"fullWord":395},{"subwords":[200,396,397,399,407,817,825,905,906,4466,4467,4516,4520,4601,4603,4607,4611,4728,4810,4826,5588,5592,5593,5599,5756,5760,5976,5977,10090,10093,10097,10098,10099,10107,10202,10205,10207,10227,10228,10324,10327,10331,10355,10360,10378,14736,14751,14805,14881,14882,14961,14965,14968,14973,15060,15087,15893,15942,15948,16270,16274,16286,16419,16420,17044],"fullWord":397},{"subwords":[326,337,349,398,605,854,4492,4532,4891,4985,4986,5314,9376,9378,10090,10119,10120,10121,10122,10169,10202,10502,10530,10531,10622,10675,12227,12238,12274,12438,14736,14776,14780,14784,14821,14826,14838,15399,15428,15491],"fullWord":398},{"subwords":[325,399,403,404,407,481,486,732,739,779,932,961,5956,6033,8258,8262,8321,8324,8362,8367,8445,8448,8450,8452,8525,8528,8549,10182,10194,10195,10231,10324,10350,10353,10360,10365,13204,13207,13211,13232,13336,13439,13450,13452,13461,13643,13917,13940,13943,15942,15948,16014,16270,16274,16403,16524,16543,16574,16662,17019,17476,17488],"fullWord":404},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":406},{"subwords":[337,372,399,408,1167,1169,1174,1175,1182,10301,10324,10414,10494,10536],"fullWord":408},{"subwords":[396,399,410,817,828,4466,4516,4595,4601,4607,4728,4810,5588,5592,5756,5765,5976,6230,6231,6232,6308,6317,6318,6392,6406,6464,6710,6711,6734,6740,7056,10090,10093,10097,10202,10324,10327,10333,10355,10378,14736,14961,14968,15060,15114],"fullWord":410},{"subwords":[287,337,340,416,417,426,427,639,647,691,7283,7287,7293,7316,7396,7585,7604,7611,7660,9307,10109,10115,10120,10235,10637,10639,10642,10654,12230,12233,12238,12241,12438,12442,15910,15931,15942,15986,16001,16815,16816,16858,16866,17003,17006,17014,17083,17211,17214],"fullWord":417},{"subwords":[183,299,326,337,415,418,4451,4890,4891,4894,4947,5123,7253,7293,7361,7585,7586,7649,7761,7764,7782,7801,9125,10090,10109,10119,10530,10533,10730,10793,10803,12812,12837],"fullWord":418},{"subwords":[67,337,340,385,392,420,421,428,1272,1279,1307,1422,1438,1763,9075,9146,10061,10071,10323,10504,10516,15931,15942,16765,16999],"fullWord":421},{"subwords":[337,340,362,399,407,423,424,430,433,637,639,647,648,691,5745,5748,5918,9307,9416,10120,10174,10175,10324,10344,10348,10360,10414,10415,10433,10501,10536,10544,10548,10551,10625,10634,10654,12229,12238,12241,12438,12439,12442,15931,15942,15948,15951,15986,15995,16270,16274,16858,16860,17006,17214],"fullWord":424},{"subwords":[337,425,434,488,7289,7293,7416,7551,7585,7596,7637,8233,8241,8280,8378,8645,8688,9437,10109,10126,10257,10563,10691,10698,18342,18347,18349,18684,18863],"fullWord":425},{"subwords":[287,337,340,416,417,426,427,639,647,691,7283,7287,7293,7316,7396,7585,7604,7611,7660,9307,10109,10115,10120,10235,10637,10639,10642,10654,12230,12233,12238,12241,12438,12442,15910,15931,15942,15986,16001,16815,16816,16858,16866,17003,17006,17014,17083,17211,17214],"fullWord":427},{"subwords":[326,327,337,338,399,423,430,431,605,637,4466,4492,4500,4507,4601,4605,4714,4728,4739,4774,4776,4891,4898,4935,4985,4988,5745,5746,5756,5865,9103,9104,9117,10090,10093,10095,10119,10120,10169,10174,10324,10327,10344,10378,10414,10427,10530,10536,10537,10544,10622,10625,10628,12229,12238,12239,12438,12439],"fullWord":431},{"subwords":[337,349,399,423,430,432,637,817,857,5588,5592,5595,5745,5976,5996,9376,9378,9384,10120,10121,10174,10324,10344,10355,10356,10414,10502,10536,10544,10549,10625,10627,10632,10675,10677,12229,12238,12240,12319,12438,12439,14780,14784,14821,14838,14968,15175,15225,15399,15444,15473],"fullWord":432},{"subwords":[337,340,362,399,407,423,424,430,433,637,639,647,648,691,5745,5748,5918,9307,9416,10120,10174,10175,10324,10344,10348,10360,10414,10415,10433,10501,10536,10544,10548,10551,10625,10634,10654,12229,12238,12241,12438,12439,12442,15931,15942,15948,15951,15986,15995,16270,16274,16858,16860,17006,17214],"fullWord":433},{"subwords":[337,349,399,405,434,435,488,491,817,857,911,1009,5588,5592,5620,5976,5982,6055,9376,9382,9384,9437,10121,10126,10247,10254,10324,10355,10414,10460,10502,10536,10549,10675,10677,10691,10694,10695,10705,14780,14898,14901,14968,15197,15312,15313,15399,15444,15473,15542,15748,18347,18349,18351,18370,18372,18449,18453,18541,18547,18554,18844,18847,18863,18866,18868,18941,19210,19262],"fullWord":435},{"subwords":[337,372,437,442,9150,9152,9898],"fullWord":437},{"subwords":[200,438,439,950,4578,4582,9801,10090,10107,10108,10135,10304,10313,15893,15902,15942,16103,16938,16992,17039,17149,21047,21049,21096],"fullWord":439},{"subwords":[440,441,442,461,464,950,9801,10135,10304,10313,15942,15954,16103,16992,17039,17149,21047,21049],"fullWord":441},{"subwords":[382,442,444,445,461,464,1004,10304,10313,15942,15954,16103,17039,17149],"fullWord":445},{"subwords":[269,294,399,401,442,446,5585,5691,5780,7293,7298,7301,7467,7477,7678,10109,10324,10343,10383,10398,10400],"fullWord":446},{"subwords":[399,401,442,447,5691,5780,10324,10343,10383],"fullWord":447},{"subwords":[399,407,442,450,451,461,464,1196,1197,5619,5780,5781,10304,10313,10324,10343,10360,10495,10496,11065,11066,15942,15948,15954,16103,16270,16274,16368,17039,17149,21050,21097,21105,21110,21114,21130],"fullWord":451},{"subwords":[326,327,337,338,399,442,452,4466,4601,4714,4728,4739,4744,4891,4935,4967,5756,5780,9103,9104,9117,9144,9152,10090,10093,10102,10119,10324,10327,10343,10378,10414,10530,10536,10537],"fullWord":452},{"subwords":[337,340,362,399,407,442,453,461,5780,5781,9144,9152,9155,9416,10324,10343,10360,10414,10415,10536,10551,10679,15931,15942,15948,16270,16274,16368,16834],"fullWord":453},{"subwords":[337,341,442,454,497,586,9152,10136,10584,10585,11148,11173,11182,11186,11387,11615,11659,11676,12118,12119],"fullWord":454},{"subwords":[442,455,456,461,487,488,495,496,1018,1019,10181,10241,10896,10897,10901,12686,12692,12856,12857,15942,15960,16041,17022,17113,17354,17435,17758,17885,18381,18432,18435,19019,19022],"fullWord":456},{"subwords":[442,457,458,461,487,1155,1157,1164,1165,10181,10292,10299,10942,10952,12856,12857,13114,13118,15942,15953,16089,17037,17121,17354,17464,20378,20386,20449],"fullWord":458},{"subwords":[442,459,460,461,464,487,10181,10304,10313,10956,12856,12857,15942,15954,16103,17039,17149,17354,17472,17473],"fullWord":460},{"subwords":[399,442,462,1053,1072,4466,4601,4728,4744,5442,5471,5472,5492,5627,5756,5780,10090,10093,10102,10270,10271,10324,10327,10343,10378,10470],"fullWord":462},{"subwords":[399,442,449,463,817,5588,5592,5627,5780,5976,10280,10324,10343,10355,10470,11029,14968,15777,15800,19837,19847,19848],"fullWord":463},{"subwords":[442,461,464,465,10304,10313,15942,15954,16103,17039,17149],"fullWord":465},{"subwords":[399,467,528,817,869,5588,5592,5595,5745,5782,5976,10136,10145,10150,10174,10324,10344,10355,10356,10418,11173,11180,11213,11218,11276,11286,11303,11437,11442,11446,11512,11539,12229,12244,12245,12248,12319,14808,14821,14968,14971,14975,15202,15207,15225],"fullWord":467},{"subwords":[183,468,605,4472,4479,4492,5156,5163,5172,5173,10090,10136,10169,10730,10738,10741,11107,11173,11213,11265,11810,11831,11832,11865,11891,11893,12244,12493,12494,12522,12523,12837],"fullWord":468},{"subwords":[469,470,487,488,495,496,1020,1022,10136,10161,10181,10241,10738,10740,10896,10897,10901,11173,11192,11195,11265,11330,11356,11361,11376,11813,11814,11816,11879,11883,12007,12010,12030,12686,12692,12872,15942,15960,15973,16041,17012,17022,17113,17354,17378,17435,17885,18389,18407,18432,18435,19026,19034],"fullWord":469},{"subwords":[117,337,471,2813,2869,3402,3403,3459,3597,3685,3689,3701,3702,3713,3777,9097,9207,9208,9360,10072,10120,10619,10652,10663,10741,10760,10767,10814,12238,12438,12812,12813],"fullWord":471},{"subwords":[0,2,317,325,382,475,476,487,932,8276,8279,8362,10181,10231,12810,15942,16667,17354],"fullWord":476},{"subwords":[481,482,2813,2921,3465,4047,10072,10182,13154,13204],"fullWord":482},{"subwords":[0,2,317,325,382,481,483,484,486,925,932,961,8321,8324,8362,8367,10182,10194,10231,13204,13232,13336,13340,13917,15942,16014,17019,17476],"fullWord":484},{"subwords":[337,399,423,430,481,485,637,732,5745,5956,10120,10174,10182,10187,10324,10344,10350,10414,10536,10544,10625,10665,12229,12238,12257,12259,12317,12356,12438,12439,12453,13191,13193,13194,13204,13207,13239,13245,13247,13439,13450,13453,13539,13540,13705,13743,13765,13769,13770,13899,13904,13906,13940,13952],"fullWord":485},{"subwords":[377,382,488,489,490,905,911,918,998,1013,10241,14898,14899,14912,15942,15960,16041,17022,17773,18449,18472,18473,19381],"fullWord":490},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":492},{"subwords":[0,317,383,399,488,493,1009,5620,6055,8258,8280,8378,8381,8445,8461,10247,10257,10258,10324,10460,18370,18541,18547,18697],"fullWord":493},{"subwords":[337,341,497,498,500,586,10120,10136,10584,10585,10605,10661,10994,11001,11148,11156,11173,11182,11213,11387,11615,11659,11662,11697,12238,12244,12438,12443,19600],"fullWord":498},{"subwords":[375,466,497,499,504,586,596,598,10136,10137,11001,11173,11174,11213,11260,11387,12244,19600],"fullWord":499},{"subwords":[337,341,497,498,500,586,10120,10136,10584,10585,10605,10661,10994,11001,11148,11156,11173,11182,11213,11387,11615,11659,11662,11697,12238,12244,12438,12443,19600],"fullWord":500},{"subwords":[382,502,503,1004,1144,1155,1157,10292,10299,10304,10313,15942,16089,16103,17037,17039,17149,18217,20449,20493,20496,21079,21082,21084,21093],"fullWord":503},{"subwords":[144,213,504,509,510,4472,4475,4584,5658,11107,11115,11427,11428,11437,11438,21249],"fullWord":510},{"subwords":[504,509,511,931,5845,11330,11427,11432,11437,11453,11560,15973,15978,16270,16278],"fullWord":511},{"subwords":[504,512,596,11213,11265,11810,11891,12244,12522],"fullWord":512},{"subwords":[67,513,514,817,825,869,883,905,906,1366,1377,1381,1419,1422,1425,1428,1526,1528,1535,1539,1665,1666,1700,1701,2308,2317,2318,2343,2380,2381,5588,5599,5803,5805,5845,5976,5977,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14881,14975,14978,14995,15014,15202,15224,15869,15973,15978,16270,16278,16286,16419,16423,17161],"fullWord":514},{"subwords":[227,513,515,817,869,884,1196,1366,1377,1405,1502,1526,1529,1535,1665,1700,1749,2308,2317,2364,2380,2721,2730,5588,5803,5806,5976,11276,11286,11329,11408,11413,11437,11539,14808,14939,14975,14995,15202,15864,15866,21051,21071,21097,21099,21128],"fullWord":515},{"subwords":[30,43,385,399,516,517,1243,1246,1296,1301,1302,1324,1515,1526,1560,1570,1636,1640,1665,1900,1907,1908,1938,4427,4466,4472,4475,4587,4601,4618,4728,5658,5756,5782,10061,10090,10093,10136,10139,10141,10145,10146,10324,10327,10378,11107,11115,11173,11180,11437,11438,11442,11464,11491,11492],"fullWord":517},{"subwords":[43,44,385,399,513,516,518,817,869,1301,1304,1324,1366,1377,1526,1535,1636,1665,1700,1907,1909,1915,1933,2308,2317,2380,5588,5592,5782,5803,5976,10061,10136,10139,10142,10145,10150,10324,10355,11173,11180,11276,11279,11286,11303,11437,11442,11491,11539,14808,14809,14968,14971,14975,14995,15202],"fullWord":518},{"subwords":[43,45,67,385,392,399,407,470,516,519,1301,1306,1324,1325,1422,1425,1526,1528,1636,1665,1666,1907,1910,1918,5782,5784,5845,10061,10071,10136,10139,10144,10145,10151,10161,10323,10324,10360,11173,11180,11181,11330,11437,11442,11444,11453,11491,11560,15872,15942,15948,15949,15973,15978,16270,16274,16278,16999,17012],"fullWord":519},{"subwords":[67,325,520,586,932,1269,1422,1431,2567,2576,2668,2673,8290,8296,8362,8936,8940,8970,8988,11330,11335,12158,15973,16531,18035,18103,19592,19871],"fullWord":520},{"subwords":[29,504,521,522,1210,1526,1576,1665,11437],"fullWord":522},{"subwords":[29,504,521,523,528,596,1210,1332,1342,1526,1530,1665,1671,11213,11218,11437,11446,11512,12219,12229,12244,12245,12331],"fullWord":523},{"subwords":[5,29,67,504,521,524,931,1210,1215,1422,1425,1526,1528,1665,1666,5845,11330,11437,11453,11560,15973,15974,15978,16270,16278],"fullWord":524},{"subwords":[27,93,112,341,525,537,1526,1665,2738,2848,2853,3402,9064,9077,9078,9079,11086,11089,11437,11617,11619],"fullWord":525},{"subwords":[526,527,817,825,869,883,905,906,5588,5599,5605,5609,5845,5976,5977,5978,5984,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11543,11546,11560,14808,14820,14881,14975,14978,15202,15224,15973,15978,16024,16270,16278,16282,16286,16319,16330,16340,16419,16425,17161],"fullWord":527},{"subwords":[176,200,528,529,530,531,605,607,610,4472,4475,4476,4479,4483,4489,4492,4500,4501,4605,4606,4774,4785,4826,5658,5845,5865,5875,5918,11107,11115,11123,11213,11218,11219,11221,11247,11248,11330,11437,11438,11440,11446,11450,11453,11512,11514,11516,11520,11524,11560,12229,12244,12245,12246,12250,15893,15973,15978,15986,15988,15995,15996,16270,16278,16308,16381],"fullWord":530},{"subwords":[528,531,532,533,693,694,697,711,1009,5616,5620,5626,5845,5918,6055,6074,6075,11213,11218,11221,11247,11248,11253,11330,11356,11361,11362,11366,11376,11437,11446,11450,11451,11453,11456,11457,11512,11524,11560,11574,11575,12229,12244,12245,12250,12289,12325,12330,12368,12374,12376,15973,15978,15986,15995,16041,16043,16270,16278,16293,16399,16457,17760,17813,17830,18389,18393,18398,18407,18408,18428,18541,18549,18552,18559,18595,18607,18624],"fullWord":533},{"subwords":[93,112,121,526,534,796,817,869,2848,2853,2941,2954,4065,4110,4120,4131,5588,5976,5984,11086,11089,11091,11276,11281,11286,11437,11539,11543,14717,14719,14808,14975,15021,15202],"fullWord":534},{"subwords":[341,347,539,555,586,2848,2868,3402,4293,9422,11086,11105,11330,11617,11618,11759,12163,15880,15973,16129,16178,16260,16764,16769,18083,18103,18104,19871],"fullWord":539},{"subwords":[200,326,327,331,336,341,342,347,540,541,542,544,546,555,948,4461,4472,4475,4476,4489,4714,4722,4826,4896,4901,4935,4938,4939,4971,4972,4975,4983,5037,5658,5845,9103,9106,9109,9111,9127,9422,11107,11115,11123,11145,11147,11330,11437,11438,11440,11453,11467,11470,11560,11626,11628,11641,11764,15893,15928,15973,15978,16270,16278,16375,16764,16780],"fullWord":542},{"subwords":[106,326,341,538,540,543,2766,2848,3402,4472,4896,4971,11086,11107,11145,11617,11626,11637],"fullWord":543},{"subwords":[169,170,179,180,200,326,336,341,347,540,544,545,555,4461,4472,4489,4896,4901,4971,4983,5037,9127,9422,9447,11107,11123,11145,11147,11160,11330,11356,11361,11376,11626,11628,11641,11642,11780,15893,15928,15973,16041,16764,16907,17179,17741,18339,18340,18347,18389,18407,18882,18947],"fullWord":545},{"subwords":[341,347,504,536,547,555,945,7317,7342,7396,9422,11127,11132,11140,11330,11649,11654,12081,15910,15911,15973,16764,16813],"fullWord":547},{"subwords":[299,341,347,548,549,555,7317,7342,7396,7633,9161,9422,11127,11132,11140,11265,11330,11649,11654,11772,11813,11854,12081,12872,15910,15921,15973,16764,16813,17188,17378],"fullWord":549},{"subwords":[341,347,528,531,546,550,555,647,648,691,5845,5918,9307,9309,9422,11156,11157,11159,11213,11218,11221,11247,11248,11330,11437,11446,11450,11453,11489,11512,11524,11560,11645,11646,11697,11706,11710,11728,11764,12229,12244,12245,12250,12443,12447,15973,15978,15986,15995,16270,16278,16375,16764,16858,16860],"fullWord":550},{"subwords":[341,538,551,2848,2869,3402,9207,9208,11086,11156,11213,11234,11617,11697,11714,12244,12443],"fullWord":551},{"subwords":[341,528,558,9162,11152,11156,11157,11204,11213,11218,11437,11446,11489,11512,11645,11688,11697,11706,12229,12244,12245,12443],"fullWord":558},{"subwords":[341,552,559,560,643,9162,9360,11152,11156,11213,11265,11697,11810,11854,11885,11891,12244,12443,12522],"fullWord":559},{"subwords":[341,552,562,643,645,657,666,686,9297,9360,11156,11213,11265,11697,11810,11854,11891,12244,12252,12443,12522,12528],"fullWord":562},{"subwords":[29,51,504,521,563,1210,1526,1665,2029,11265,11437,11817],"fullWord":563},{"subwords":[399,407,470,472,473,487,566,567,5782,5784,5845,10136,10145,10151,10161,10181,10324,10360,10443,10447,10738,10740,10888,11173,11180,11181,11265,11330,11437,11442,11444,11453,11560,11813,11870,11871,12845,12848,12872,15942,15948,15949,15973,15978,16270,16274,16278,17012,17097,17354,17359,17378,17382],"fullWord":567},{"subwords":[373,377,378,466,504,569,869,889,10136,10137,10738,11173,11174,11265,11276,11303,11863,11963,12680,12948,14808,15564,15627],"fullWord":569},{"subwords":[571,586,693,1020,1074,1093,11213,11265,11361,11392,11810,11814,11891,12010,12044,12138,12244,12293,12300,12522,12574,12575,12659,12686,13059,18389,18408,18432,18508,19026,19036,19434,19435,19780],"fullWord":571},{"subwords":[572,573,586,869,883,905,920,921,11265,11276,11314,11330,11813,12680,12683,12872,13007,13051,13052,14808,14820,15564,15567,15627,15638,15673,15806,15820,15973,17303,17378,17451,18103,18112,19868,19871],"fullWord":573},{"subwords":[526,574,575,732,735,817,869,5588,5956,5976,5984,11270,11276,11286,11437,11539,11543,13286,13294,13439,13455,13489,13506,13577,13583,13593,14240,14262,14808,14816,14851,14852,14975,14979,15202,15209,15248,15747],"fullWord":575},{"subwords":[399,481,574,576,577,732,735,817,869,5588,5592,5782,5956,5976,10136,10145,10150,10158,10182,10324,10350,10355,10957,11173,11180,11270,11271,11276,11286,11303,11437,11442,11539,13204,13207,13210,13224,13226,13286,13294,13439,13450,13455,13456,13577,13593,13940,14240,14262,14808,14816,14851,14852,14968,14971,14975,14979,15202,15209,15248,15747],"fullWord":577},{"subwords":[399,481,497,574,576,580,581,586,732,5627,5782,5846,5956,10136,10145,10158,10182,10324,10350,10470,10957,10995,11173,11180,11270,11271,11387,11437,11442,12110,13204,13207,13224,13391,13439,13450,13940,13988,13991,14454,14476,19624],"fullWord":581},{"subwords":[470,481,486,497,501,574,579,580,582,586,961,10136,10158,10160,10161,10182,10194,10957,10995,10999,11173,11270,11275,11330,11387,11390,13204,13224,13227,13232,13336,13391,13919,13988,13997,14003,14414,14476,14477,14551,15942,15973,16014,17012,17019,17135,17136,17476,18103,18114,18135,19624,19628,19825,19871],"fullWord":582},{"subwords":[341,349,504,583,852,869,911,1014,1030,9376,11276,11291,11320,11361,14808,14898,14899,15480,18347,18389,18449,18815,18882,19216,19285],"fullWord":583},{"subwords":[126,504,584,796,869,911,1014,2848,2941,2943,3003,3052,4065,11086,11276,11281,11320,11361,14808,14898,14899,18389,18449,18459,19216],"fullWord":584},{"subwords":[504,585,867,869,911,1014,9782,9786,9791,11276,11296,11320,11361,11808,14808,14898,14899,18389,18449,19216],"fullWord":585},{"subwords":[586,587,588,950,1070,1071,2848,2868,3033,4293,11086,11099,11100,11105,11330,11341,12085,12088,12166,15880,15884,15973,16129,16260,17152,18051,18103,18104,19871],"fullWord":588},{"subwords":[399,488,497,586,589,1009,5620,5627,5782,5846,6055,10136,10145,10247,10324,10460,10470,11050,11173,11180,11192,11361,11362,11387,11392,11437,11442,11456,11502,11574,11575,11576,12110,12184,18370,18389,18393,18508,18541,18547,18549,18595,19605],"fullWord":589},{"subwords":[200,586,590,591,1053,4472,4475,4476,4489,4826,4849,5471,5478,5627,5658,5845,5846,5847,11107,11115,11123,11330,11437,11438,11440,11453,11477,11560,12091,12097,12152,12153,15893,15973,15978,16270,16278,16317,18066,18067,18103,19871,19876,19877],"fullWord":591},{"subwords":[586,590,592,817,825,869,883,905,906,920,921,5588,5599,5627,5845,5846,5847,5976,5977,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,12152,12154,14808,14820,14881,14975,14978,15202,15224,15777,15782,15806,15820,15840,15973,15978,16270,16278,16286,16419,16446,17161,18066,18071,18103,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":592},{"subwords":[586,590,593,973,991,5627,5845,5846,5847,6039,11330,11348,11351,11437,11453,11560,11561,11569,12082,12152,12156,12173,15973,15978,16270,16278,16283,16291,18066,18073,18103,18116,19871,19876,19882],"fullWord":593},{"subwords":[144,175,176,504,528,529,596,597,605,4472,4475,4479,4492,4493,4500,4605,4774,5658,5865,11107,11115,11124,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":597},{"subwords":[375,442,444,464,596,598,599,716,10304,12311],"fullWord":599},{"subwords":[299,301,375,411,478,596,598,600,629,631,7293,7294,7361,7764,10109,10741,10793,10794,10826,12230,12509],"fullWord":600},{"subwords":[0,317,596,601,796,801,2869,2941,3206,12270,14775,14821,14822],"fullWord":601},{"subwords":[596,602,693,1044,12293,12574,12575,12686,18408,18430,18432,18495,18969,19036,19131],"fullWord":602},{"subwords":[118,603,796,801,806,809,2869,2941,3206,3215,3777,3913,8696,8714,8789,8857,8858,8867,12270,12271,12480,12548,12680,12965,12966,12968,14775,14821,14822,14823,15386,15560,15568,15592],"fullWord":603},{"subwords":[93,114,604,657,663,665,2869,2883,2888,2896,3402,3413,5856,5860,9079,9200,9207,9208,9297,12229,12252,12253,12410,12448],"fullWord":604},{"subwords":[596,605,606,657,658,663,4492,4493,4500,4605,4774,5865,12229,12252],"fullWord":606},{"subwords":[605,608,609,617,817,1145,1147,1158,1159,4492,4500,4516,4532,4574,4576,4605,4607,4774,4810,4865,5330,5335,5361,5588,5595,5865,5976,12229,12274,12319,12358,12390,14736,14821,14826,14933,14961,15060,15227,20303,20309,20311,20393,20394,20395,20396,20397,20410,20412,20414,20417,20418,20432,20433,20505,20510,20524,20579,20581,20984],"fullWord":609},{"subwords":[341,504,507,528,596,613,640,11156,11157,11213,11218,11231,11437,11446,11489,11512,11645,11697,11706,12229,12244,12245,12443],"fullWord":613},{"subwords":[93,112,114,341,528,537,614,2848,2853,2869,2883,3402,3413,3414,5856,9079,9083,9207,9208,11086,11089,11156,11157,11213,11218,11234,11437,11446,11489,11512,11617,11619,11645,11697,11698,11706,12229,12244,12245,12410,12443],"fullWord":614},{"subwords":[227,269,616,622,633,716,817,1196,5588,5595,5894,5976,5988,7375,7395,7447,7448,7461,7493,7961,7992,8195,12229,12230,12282,12311,12319,14758,14762,14821,14832,14833,14837,14939,15141,15864,15866,21058,21071,21075,21097,21099,21102,21120],"fullWord":616},{"subwords":[263,596,618,633,716,922,7375,7395,7447,7927,7961,12230,12282,12311,14758,14759,14821,14832,14837,14939,15864,21058,21075],"fullWord":618},{"subwords":[269,280,399,407,620,621,625,628,5745,5748,5918,7260,7293,7298,7300,7316,7396,7477,7486,7493,7494,7511,7660,7674,7675,7680,7681,10109,10115,10174,10175,10324,10344,10348,10360,10398,10412,10433,12229,12230,12233,15910,15912,15942,15948,15986,15995,16001,16270,16274,17003,17014,17211],"fullWord":621},{"subwords":[269,279,280,622,623,817,825,905,906,5588,5595,5598,5599,5894,5918,5976,5977,5988,5992,6000,7359,7375,7391,7396,7461,7463,7493,7511,7743,7939,12229,12230,12233,12275,12319,12324,14758,14762,14764,14773,14821,14832,14833,14836,14881,15141,15910,15912,15914,15986,15995,15998,16001,16003,16026,16270,16286,16419,17211,17223],"fullWord":623},{"subwords":[257,287,596,624,657,658,7283,7604,9297,12230,12252],"fullWord":624},{"subwords":[269,270,399,605,620,625,626,4466,4492,4500,4502,4505,4601,4605,4728,4774,5707,5745,5746,5756,5865,7253,7293,7298,7477,7478,7493,7494,7649,7650,7658,7674,7680,10090,10093,10095,10109,10169,10174,10324,10327,10344,10378,10398,10427,12229,12230],"fullWord":626},{"subwords":[269,399,620,622,625,627,817,833,5588,5592,5595,5745,5894,5976,5988,7293,7298,7375,7461,7477,7493,7494,7661,7674,7680,7740,10109,10110,10174,10208,10324,10344,10355,10356,10398,12229,12230,12319,14758,14762,14821,14832,14833,14968,15141,15143,15157,15225],"fullWord":627},{"subwords":[269,280,399,407,620,621,625,628,5745,5748,5918,7260,7293,7298,7300,7316,7396,7477,7486,7493,7494,7511,7660,7674,7675,7680,7681,10109,10115,10174,10175,10324,10344,10348,10360,10398,10412,10433,12229,12230,12233,15910,15912,15942,15948,15986,15995,16001,16270,16274,17003,17014,17211],"fullWord":628},{"subwords":[299,304,478,487,629,630,7293,7316,7361,7364,7396,7660,7764,7767,10109,10115,10181,10741,10744,10793,10794,10795,10811,10826,10831,12230,12233,12509,12512,12560,15910,15921,15942,15956,15986,16001,17003,17014,17099,17100,17211,17354,17383,17389],"fullWord":630},{"subwords":[299,301,375,411,478,596,598,600,629,631,7293,7294,7361,7764,10109,10741,10793,10794,10826,12230,12509],"fullWord":631},{"subwords":[263,299,306,596,632,837,7375,7927,8038,12230,12509,12548,12680,12951,12983,12984,14758,14759,14821,14832,15568],"fullWord":632},{"subwords":[634,635,693,711,973,987,990,7396,7416,7423,7745,7746,12230,12233,15910,15923,15986,16001,16009,16041,17211,17213,17732,17739,18342,18345,18408,18410,18416,18428,18487],"fullWord":635},{"subwords":[337,428,638,657,9146,9297,10120,12238,12252,12438],"fullWord":638},{"subwords":[337,341,372,375,466,504,507,596,598,640,641,10120,10136,10137,10153,10155,10162,10499,10584,10585,10605,11148,11156,11173,11174,11182,11213,11231,11236,11659,11662,11697,12238,12244,12438,12443],"fullWord":641},{"subwords":[341,347,504,507,536,555,596,640,642,647,691,945,946,9307,9422,11156,11159,11213,11216,11231,11233,11247,11330,11697,11728,12244,12283,12443,12447,15973,15986,16764,16858],"fullWord":642},{"subwords":[341,347,348,555,586,644,647,691,712,9307,9422,11156,11159,11213,11247,11262,11330,11697,11728,11735,12244,12443,12447,15973,15986,16764,16858,18083,18103,18117,19871],"fullWord":644},{"subwords":[645,646,647,657,666,686,691,9297,9302,9307,9360,9366,12252,12528,12560,15986,16858,17383],"fullWord":646},{"subwords":[647,648,649,691,973,987,5918,6039,9307,12229,12367,15986,15995,15999,16009,16010,16270,16291,16858,16860,16861,16881,16903],"fullWord":649},{"subwords":[647,650,691,928,2800,2869,2906,3402,9207,9208,9209,9307,12462,15880,15986,16134,16178,16769,16858],"fullWord":650},{"subwords":[399,407,653,654,950,5745,5748,5778,5779,5918,9760,9761,9836,9843,9959,10128,10132,10174,10175,10177,10324,10338,10341,10344,10348,10360,10416,10417,10433,12229,15939,15942,15948,15986,15995,16007,16270,16274,16944,17007,17216,17234],"fullWord":654},{"subwords":[399,488,653,655,693,694,1009,5620,5745,5778,6055,6074,9760,9836,9844,9977,10128,10174,10177,10247,10251,10324,10338,10344,10349,10416,10437,10460,12229,12292,12325,12374,18358,18359,18370,18375,18408,18418,18541,18545,18547,18607],"fullWord":655},{"subwords":[375,376,382,596,598,657,658,659,660,661,12252,12283,12284,15942,15986],"fullWord":660},{"subwords":[375,399,596,598,657,658,659,663,664,5745,10174,10324,10344,12229,12252],"fullWord":664},{"subwords":[657,666,667,668,686,716,12252,12311,12312,12528,12560,12573,15986,16103,17383,17394,17472,17473,21183],"fullWord":668},{"subwords":[375,596,598,657,658,659,669,670,11001,12252,12651,19600],"fullWord":669},{"subwords":[337,657,670,671,9297,10120,11001,12238,12252,12438,12651,19600],"fullWord":671},{"subwords":[657,670,672,712,11001,11005,12252,12651,12654,15942,15986,18117,19600,19603,19871],"fullWord":672},{"subwords":[183,375,596,598,605,674,4492,4493,5172,5173,10090,10169,10730,10741,12493,12494,12837],"fullWord":674},{"subwords":[183,197,200,215,217,605,607,610,675,676,4492,4500,4501,4605,4606,4774,4785,4826,5114,5117,5172,5173,5176,5188,5221,5223,5865,5875,5918,5953,5955,12229,12493,12499,12500,12501,12506,12560,12561,12562,12752,12755,12876,12879,15893,15986,15988,15995,15996,16270,16308,16381,17323,17324,17383,17387],"fullWord":676},{"subwords":[106,117,183,326,605,677,2766,2869,3402,3403,3638,3639,3689,3777,4492,4985,5096,5172,5173,9097,9207,9208,9360,12493,12757,12758],"fullWord":677},{"subwords":[645,657,666,679,686,693,700,9297,9325,9335,9360,9367,12252,12290,12293,12463,12528,12574,12575,12686,18347,18408,18432,18894,19036],"fullWord":679},{"subwords":[215,217,399,407,472,473,477,487,680,681,5745,5748,5918,5953,5955,10174,10175,10181,10324,10344,10348,10360,10433,10443,10444,10447,10741,10744,10822,10888,12229,12504,12505,12506,12560,12561,12845,12848,12876,12879,15942,15948,15956,15986,15995,16270,16274,17097,17354,17359,17383],"fullWord":681},{"subwords":[341,504,507,552,596,640,643,678,682,9360,11156,11213,11231,11265,11697,11810,11854,11891,12244,12443,12522],"fullWord":682},{"subwords":[117,341,552,643,683,2848,2869,3402,3403,3689,3732,3733,3777,9097,9207,9208,9360,11086,11156,11213,11234,11237,11265,11617,11697,11810,11854,11891,12244,12443,12522],"fullWord":683},{"subwords":[215,341,528,552,643,684,5953,9360,11156,11157,11213,11218,11265,11437,11446,11489,11512,11645,11697,11706,11810,11854,11891,12229,12244,12245,12443,12522,12525,12866,12876],"fullWord":684},{"subwords":[657,666,667,685,686,687,716,11213,11264,11265,11408,11420,11810,11891,11920,12201,12244,12252,12311,12522,12528,21051,21183],"fullWord":687},{"subwords":[596,678,688,745,9360,12257,12453,13193,13239,13685,13765,13809,14032],"fullWord":688},{"subwords":[370,596,689,867,10009,10021,10043,12277,12548,12675,12680,12835,14821,14840,15568],"fullWord":689},{"subwords":[117,690,1187,1191,2869,3402,3403,3612,3689,3777,9097,9207,9208,9360,12474],"fullWord":690},{"subwords":[617,692,817,825,905,906,1145,1150,1158,1161,5588,5595,5598,5599,5918,5976,5977,6000,12229,12275,12319,12324,12390,12397,14821,14881,14933,14938,15281,15986,15995,15998,16089,16091,16095,16270,16286,16419,16475,16481,17223,18195,18220,20393,20396,20398,20410,20417,20419,20432,20435,20442,20449,20505,20508,20510,20512,20579,20584,20984,20986],"fullWord":692},{"subwords":[605,693,694,695,696,1009,4492,4500,4512,4551,4605,4774,4788,5620,5621,5665,5853,5865,6055,6074,12229,12325,12339,12340,12374,18339,18408,18541,18576,18577,18583,18607,18610],"fullWord":696},{"subwords":[319,528,532,693,694,698,1009,5620,6055,6074,8290,8378,8381,8461,8532,8533,8540,11213,11218,11361,11362,11369,11437,11446,11451,11456,11512,11574,11575,12229,12244,12245,12325,12328,12374,12612,18389,18393,18408,18541,18549,18595,18607,18686,18687,18697,18705,18708,18967],"fullWord":698},{"subwords":[693,694,699,709,817,911,1009,5588,5595,5600,5620,5976,5982,6055,6074,8333,8360,8378,8381,8383,8453,8458,8461,8540,8552,12229,12319,12325,12328,12374,12612,14775,14821,14847,14898,14901,15241,15312,15376,15748,18408,18449,18453,18460,18541,18554,18607,18649,18686,18687,18697,18708],"fullWord":699},{"subwords":[126,128,134,647,691,693,700,701,702,704,711,2800,2869,2906,2907,2908,2917,3041,3052,3064,3402,3429,4238,4241,9207,9208,9209,9307,9318,9325,9447,12463,12471,15880,15936,15986,16041,16047,16134,16136,16157,16178,16769,16858,16907,17255,17742,18347,18408,18428,18823,18830,18894,18919,18947],"fullWord":702},{"subwords":[287,657,693,700,703,7283,7289,7416,7561,7604,7637,7745,9297,9325,12230,12252,12463,18342,18347,18408,18410,18894,18901],"fullWord":703},{"subwords":[399,405,488,491,693,694,705,709,817,911,1009,5588,5592,5595,5620,5745,5976,5982,6055,6074,10174,10247,10251,10254,10324,10344,10349,10355,10356,10358,10437,10460,12229,12292,12319,12325,12374,14821,14847,14898,14901,14968,15225,15241,15242,15312,15748,18370,18372,18408,18449,18453,18460,18541,18547,18554,18607,18649],"fullWord":705},{"subwords":[657,666,667,686,693,706,716,12252,12293,12311,12528,12574,12575,12686,18408,18432,19036,19059,19186,21183],"fullWord":706},{"subwords":[375,377,488,489,596,598,693,707,708,911,12287,12292,14821,14847,14898,14899,18408,18449,18460,18461],"fullWord":708},{"subwords":[586,693,710,869,911,920,1074,11213,11276,11320,11361,11392,12244,12300,12659,14808,14821,14847,14898,15806,15821,15833,15858,18389,18408,18449,18460,18508,19216,19366,19434,19435,19476,19632,19866],"fullWord":710},{"subwords":[712,713,973,987,5627,5918,6039,12229,12367,15986,15995,15999,16009,16270,16291,16398,18066,18073,18117,18130,18169,19871,19876,19882],"fullWord":713},{"subwords":[337,340,639,647,691,714,715,1124,9307,10120,10654,12238,12241,12438,12442,15931,15942,15986,16844,16845,16858,17006,17029,17214,19919,19920,19923,19948,19957,20107,20110,20112,20115,20152,20153,20154,20167,20191],"fullWord":715},{"subwords":[324,716,717,1158,8409,8420,8789,8920,9032,12311,12480,12606,12607,13119,20393,20493,20599,20689,20690,20712,20897,21079,21085,21183,21202],"fullWord":717},{"subwords":[215,657,663,666,667,686,716,718,1196,5953,12229,12252,12311,12353,12528,12533,12876,21097,21120,21183],"fullWord":718},{"subwords":[596,716,719,1144,1158,12311,20393,20493,21079,21085,21094],"fullWord":719},{"subwords":[720,721,817,818,911,1009,5588,5620,5976,5982,6055,12680,12686,12688,12955,12979,13008,14898,14899,14901,15312,15610,15691,15694,15748,18432,18449,18453,18463,18541,18554,18981,19093,19094,19101],"fullWord":721},{"subwords":[377,488,489,495,720,722,911,10897,12680,12686,12948,13008,14898,14899,15691,18432,18449,18463,19093,19094],"fullWord":722},{"subwords":[720,723,905,911,918,12680,12683,12686,12692,13007,13008,13011,14898,14899,14912,15574,15673,15691,15700,16041,17303,17429,17435,17773,17885,18432,18435,18449,18463,18464,18472,19093,19094,19097,19113,19381],"fullWord":723},{"subwords":[126,132,349,724,796,809,911,2803,2941,3003,3052,3402,3403,3429,3605,3609,3693,3965,9367,9376,12680,12686,12965,12966,13008,13038,14898,14909,15504,15592,15691,18333,18347,18432,18449,18463,18823,18945,19093,19094,19098,19292],"fullWord":724},{"subwords":[183,197,200,725,726,1053,5221,5523,5524,15893,17323,17324,19871],"fullWord":726},{"subwords":[148,183,725,727,1053,1054,4438,4439,4441,5440,5466,5523,12745],"fullWord":727},{"subwords":[0,93,98,317,728,729,732,2921,2922,3202,3236,5582,5956,8321,8450,8549,13154,13155,13439,13443],"fullWord":729},{"subwords":[0,317,731,781,1194,8321,8378,8420,13364,13375,13424,18436,18806,21064],"fullWord":731},{"subwords":[93,121,732,735,736,796,817,2921,2922,2924,2941,2954,2987,2989,4049,4077,4078,4268,4302,4312,4326,5588,5627,5654,5956,5976,13154,13155,13157,13286,13294,13439,13455,13577,13602,14262,14433,14518,14717,14851,14852,14979,15021,15025,15248,15777,19847],"fullWord":736},{"subwords":[732,739,740,741,779,961,1167,1173,5605,5956,6033,6144,13336,13422,13423,13439,13461,13462,13489,13510,16014,16098,16270,16319,16336,16483,17476],"fullWord":741},{"subwords":[200,325,326,336,742,743,744,751,932,961,4461,4543,4901,5014,5021,5037,5046,8217,8321,8324,8362,8366,8367,8617,8664,8671,8678,9127,13171,13177,13190,13336,13651,13839,13841,14421,15893,15928,16014,16015,16503,16639,16883,17476],"fullWord":743},{"subwords":[349,361,746,852,9376,13200,13286,13287,13424,14258,14410,14851,14939,15508,15864,21064,21146],"fullWord":746},{"subwords":[337,372,481,747,2813,2921,3402,3465,3529,4046,4047,10072,10182,10665,13154,13191,13204,13688],"fullWord":747},{"subwords":[93,96,732,739,748,779,961,968,2921,2922,2926,2938,3021,3402,4046,4048,4237,5956,5959,5961,6023,6033,9079,9085,13154,13155,13159,13167,13336,13439,13461,13688,13690,13702,13705,13716,13839,14421,15880,16014,16139,16178,16270,16298,16405,16769,16883,17476,17477,17525,17550,17551,17553],"fullWord":748},{"subwords":[93,732,749,2921,2922,3402,4046,5956,5959,9079,13154,13155,13439,13440,13489,13688,13705,13706],"fullWord":749},{"subwords":[51,385,481,574,752,1324,2029,2100,2197,10061,10136,10139,10158,10182,10738,10748,10864,10957,11173,11265,11270,11817,11947,12913,13204,13224,14056],"fullWord":752},{"subwords":[375,399,481,596,598,732,753,754,5745,5956,10174,10182,10324,10344,10350,12229,12257,12259,12317,12356,13178,13204,13207,13239,13245,13247,13439,13450,13453,13539,13540,13904,13906,13940,13952],"fullWord":754},{"subwords":[596,732,739,753,755,779,925,931,961,964,5918,5956,6033,12229,12257,12259,12261,12269,12283,12317,12318,13178,13179,13239,13245,13249,13259,13336,13439,13453,13461,13539,13558,15986,15995,16014,16270,17220,17476,17490],"fullWord":755},{"subwords":[93,114,732,756,2869,2883,2921,2922,3402,3413,4046,5856,5956,5959,9079,9207,9208,12229,12257,12259,12317,12410,12453,13154,13155,13193,13194,13239,13245,13255,13439,13453,13470,13539,13688,13705,13765,13769],"fullWord":756},{"subwords":[215,596,732,753,757,5953,5956,12229,12257,12259,12317,12547,12876,12916,12918,13178,13239,13245,13439,13453,13539,13564,14105],"fullWord":757},{"subwords":[183,481,758,10090,10182,10730,10864,12837,12913,13171,13204,13967,14020,14056],"fullWord":758},{"subwords":[269,299,732,759,5718,5956,7365,7366,7467,12789,12916,13184,13439,13489,13516],"fullWord":759},{"subwords":[442,481,760,10182,10833,10849,10864,12856,12913,13204,13217,14056,14080,14086,14121],"fullWord":760},{"subwords":[442,481,762,763,764,10182,10189,13204,13217,13229,13268,13269,13272],"fullWord":764},{"subwords":[382,481,486,762,763,765,925,961,10182,10189,10193,10194,13204,13230,13232,13268,13269,13272,13273,13281,13336,15942,16014,17019,17476],"fullWord":765},{"subwords":[399,481,732,762,763,766,770,5956,10182,10189,10324,10350,13204,13207,13268,13269,13272,13439,13450,13569,13940],"fullWord":766},{"subwords":[732,735,762,767,817,818,5588,5956,5976,13268,13269,13276,13286,13287,13294,13439,13455,13569,13577,14262,14278,14851,14852,14979,15248],"fullWord":767},{"subwords":[399,407,481,486,732,739,762,768,770,771,779,961,5956,6033,10182,10189,10193,10194,10195,10324,10350,10353,10360,13204,13207,13211,13230,13232,13268,13281,13336,13439,13450,13452,13461,13569,13573,13940,13943,15942,15948,16014,16270,16274,16403,17019,17476,17488],"fullWord":768},{"subwords":[605,732,733,762,769,4492,4500,4605,4774,5865,5956,12229,12257,12259,12264,12317,13171,13239,13245,13246,13268,13439,13453,13478,13539,13544,13569,14237],"fullWord":769},{"subwords":[399,407,481,486,732,739,762,768,770,771,779,961,5956,6033,10182,10189,10193,10194,10195,10324,10350,10353,10360,13204,13207,13211,13230,13232,13268,13281,13336,13439,13450,13452,13461,13569,13573,13940,13943,15942,15948,16014,16270,16274,16403,17019,17476,17488],"fullWord":771},{"subwords":[228,732,739,762,773,779,961,5956,6033,12916,12925,12933,12936,13268,13281,13336,13338,13343,13439,13461,13569,13573,13607,14130,14131,14133,14144,14166,16014,16270,17298,17406,17476],"fullWord":773},{"subwords":[762,774,12680,12933,13268,13286,13422,14130,14234,14350,14379,14851],"fullWord":774},{"subwords":[777,778,905,909,961,12257,12269,12548,12560,12680,12683,12936,13007,13239,13259,13286,13321,13327,13336,13343,14112,14154,14157,14246,14350,14351,14372,14383,14403,14821,14851,14866,14891,15568,15569,15673,15986,16014,16016,17220,17298,17303,17383,17384,17406,17476,17490,17494],"fullWord":778},{"subwords":[732,739,779,781,783,961,1009,5616,5620,5626,5956,6033,6055,13336,13352,13355,13364,13367,13374,13385,13439,13461,13464,13465,13609,13613,13626,14427,16014,16041,16043,16270,16293,16409,16410,16457,17476,17510,17511,17788,17790,17836,17846,18436,18437,18441,18448,18490,18495,18498,18503,18541,18559,18565,18567,18662,19386],"fullWord":783},{"subwords":[349,787,788,852,1210,1366,2308,9376,15402],"fullWord":788},{"subwords":[3,27,349,787,789,796,852,1210,1366,1391,2308,2738,2941,3402,4052,4151,9376,14714,15402],"fullWord":789},{"subwords":[43,44,377,385,386,399,787,790,817,818,819,1210,1213,1301,1304,1366,1377,1535,1636,1915,1933,2308,2317,5588,5592,5976,10061,10324,10355,14968,14995],"fullWord":790},{"subwords":[51,67,793,794,905,1366,1419,1422,2029,2030,2033,2034,2308,2343,2446,2476,12680,12683,12959,12964,13007,15570,15573,15576,15590,15673,17303,17308],"fullWord":794},{"subwords":[51,793,795,1366,2029,2030,2308,2446,2610,2648,2651,12680,12959,13051,15570,15576,15749,19840],"fullWord":795},{"subwords":[93,94,121,122,796,797,800,817,818,2766,2780,2941,2949,2954,2955,3111,4431,4516,4607,4639,4810,5588,5976,14717,14718,14736,14961,15021,15028,15060],"fullWord":797},{"subwords":[596,796,798,2869,2941,12270,14821],"fullWord":798},{"subwords":[93,114,121,596,611,796,799,817,818,821,2869,2883,2885,2941,2954,2977,4069,5588,5595,5856,5976,12224,12229,12270,12319,14717,14821,15021],"fullWord":799},{"subwords":[93,94,98,99,121,122,796,800,801,802,817,2766,2780,2941,2949,2954,2955,3111,3172,3206,3207,3209,3210,3242,4431,4516,4607,4639,4810,5582,5588,5976,8217,8327,8333,8334,8440,8453,8454,8552,8558,14717,14718,14736,14775,14958,14961,15021,15028,15060,15376],"fullWord":802},{"subwords":[93,98,121,796,801,803,817,2941,2954,2958,3206,3209,5582,5588,5976,6008,8333,8453,8552,8583,14717,14720,14775,14872,14958,14983,15021,15376],"fullWord":803},{"subwords":[93,96,98,101,121,123,325,796,801,804,810,817,825,905,906,932,2941,2954,2960,3001,3021,3025,3027,3206,3209,3211,3217,3221,3223,4083,5582,5588,5599,5976,5977,6023,8333,8338,8362,8453,8456,8552,8584,8934,14717,14722,14775,14881,14886,14958,15021,15048,15376,15377,15880,16142,16145,16270,16286,16287,16298,16419,16549,16574,16577],"fullWord":804},{"subwords":[105,796,801,805,2813,2941,2971,3100,3206,3220,3487,4232,8420,10072,10089,10201,10304,14735,14775,14939,15864],"fullWord":805},{"subwords":[118,603,796,801,806,809,2869,2941,3206,3215,3777,3913,8696,8714,8789,8857,8858,8867,12270,12271,12480,12548,12680,12965,12966,12968,14775,14821,14822,14823,15386,15560,15568,15592],"fullWord":806},{"subwords":[110,287,314,349,796,807,2801,2869,2941,2970,3402,3408,4062,7283,7375,7604,7918,8015,9207,9208,9376,9378,12230,12270,14726,14758,14784,14821,14832,14838,15461,15494],"fullWord":807},{"subwords":[93,94,121,122,796,800,808,817,867,2766,2780,2807,2808,2941,2949,2954,2955,3111,4107,4431,4516,4522,4607,4639,4651,4810,5316,5348,5355,5588,5976,14717,14718,14729,14730,14736,14798,14799,14961,15021,15028,15060],"fullWord":808},{"subwords":[90,126,349,796,811,911,2764,2941,3003,3052,3402,3419,3420,3429,4106,9376,14898,18347,18449,18823],"fullWord":811},{"subwords":[605,608,693,694,695,709,813,817,911,1009,4492,4500,4512,4516,4532,4537,4551,4553,4605,4607,4774,4788,4810,4812,5327,5588,5595,5620,5865,5976,5982,6055,6074,12229,12274,12319,12325,12358,12374,14736,14821,14826,14847,14848,14898,14901,14902,14961,15060,15227,15241,15312,15318,15748,18339,18408,18449,18450,18453,18454,18460,18541,18554,18607,18610,18649,19205,19233,19248],"fullWord":813},{"subwords":[183,197,200,814,815,905,5216,5217,5221,12680,12683,13007,14736,14751,15561,15563,15570,15573,15600,15609,15673,15893,16030,17303,17323,17324],"fullWord":815},{"subwords":[183,814,816,1053,5260,5523,5542,12680,13051,14736,15561,15570,15600],"fullWord":816},{"subwords":[596,611,817,818,820,821,822,825,905,906,931,5588,5595,5598,5599,5918,5976,5977,6000,12229,12275,12283,12319,12324,14821,14881,15986,15995,15998,16022,16270,16286,16419,17223],"fullWord":822},{"subwords":[377,399,472,817,818,819,823,5588,5592,5976,10324,10355,10443,10882,12680,12845,12948,12979,14968,15610,15621],"fullWord":823},{"subwords":[399,401,472,817,824,5588,5592,5691,5976,5984,10324,10355,10383,10388,10443,10882,12680,12845,12948,12979,14968,15107,15610,15621],"fullWord":824},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":827},{"subwords":[263,264,377,382,411,414,829,830,905,7293,7294,7295,7316,7375,7391,7396,7898,7899,7939,10109,10115,14758,14759,14760,14773,15910,15911,15942,17003],"fullWord":830},{"subwords":[269,277,622,693,694,709,817,831,911,1009,5588,5595,5620,5894,5976,5982,5988,6055,6074,7375,7389,7416,7417,7461,7493,7512,7540,7745,7933,7946,7972,7990,12229,12230,12319,12325,12374,14758,14762,14821,14832,14833,14847,14898,14901,15141,15241,15312,15748,18342,18408,18410,18449,18453,18460,18541,18554,18607,18649],"fullWord":831},{"subwords":[337,340,349,359,832,860,905,7293,7316,7375,7391,7396,7585,7622,7624,7916,7917,7939,9376,9409,10109,10115,10121,10125,10502,10503,10675,10676,14758,14773,14780,14783,15399,15400,15461,15472,15910,15931,15942,16028,16889,17003,17722],"fullWord":832},{"subwords":[269,270,396,399,817,833,834,4466,4516,4601,4607,4728,4810,5310,5351,5588,5592,5666,5707,5756,5976,5988,7253,7293,7298,7375,7383,7461,7477,7478,7528,7649,7650,7661,7662,7907,7908,10090,10093,10097,10109,10110,10202,10208,10324,10327,10355,10378,10398,14736,14758,14762,14763,14961,14968,15060,15141,15143],"fullWord":834},{"subwords":[269,279,280,399,407,817,825,833,835,905,906,5588,5592,5593,5599,5976,5977,5988,5992,7260,7293,7298,7300,7316,7375,7391,7396,7461,7463,7477,7486,7661,7663,7939,10109,10110,10111,10115,10207,10208,10210,10228,10324,10355,10360,10398,10412,14758,14762,14764,14773,14805,14881,14968,14973,15141,15143,15910,15912,15914,15942,15948,16026,16270,16274,16286,16419,16420,17003],"fullWord":835},{"subwords":[299,487,836,905,7293,7316,7361,7364,7375,7391,7396,7764,7767,7854,7939,10109,10115,10181,10211,10212,10793,10811,12680,12683,12948,12950,13007,14758,14773,15673,15910,15921,15942,17003,17099,17303,17354,17356],"fullWord":836},{"subwords":[299,304,837,838,905,909,7375,7391,7396,7743,7939,8038,8039,12230,12233,12509,12512,12548,12560,12680,12683,12951,12953,12983,12985,13007,14758,14773,14821,14832,15568,15569,15673,15910,15921,15986,16001,16031,17211,17303,17383,17384,17389],"fullWord":838},{"subwords":[299,839,905,7375,7391,7395,7396,7447,7452,7869,7870,7895,7897,7939,7961,7965,8199,8200,12680,12683,12991,13007,14758,14773,14939,14944,15673,15690,15864,15865,15910,15921,15924,16103,17303,17472,17473,21162,21163,21212],"fullWord":839},{"subwords":[299,840,841,905,911,918,7375,7391,7396,7416,7422,7423,7768,7770,7874,7939,8040,8041,8056,8057,12680,12683,12686,12692,13007,13008,13011,14758,14773,14898,14912,15574,15673,15691,15700,15910,15921,16041,17303,17429,17435,17732,17773,17885,18342,18345,18432,18435,18449,18463,18464,18472,18993,18994,18997,19001,19093,19094,19097,19113,19381],"fullWord":841},{"subwords":[269,270,315,817,842,843,1053,1062,4516,4607,4810,5310,5351,5420,5471,5485,5588,5627,5666,5707,5976,5988,7253,7375,7383,7427,7461,7907,7908,8099,8100,14736,14758,14762,14763,14961,15060,15141,15773,15777,15778,15790,19847,19855,19856],"fullWord":843},{"subwords":[269,315,817,842,844,1062,5588,5627,5976,5988,6008,7375,7461,8099,14758,14762,14872,14983,15141,15777,15780,15790,19847,19855,19858],"fullWord":844},{"subwords":[269,279,280,315,316,817,825,842,845,847,905,906,1062,1063,5588,5599,5627,5976,5977,5988,5992,7375,7391,7396,7461,7463,7939,8099,8102,14758,14762,14764,14773,14881,15141,15777,15782,15790,15794,15840,15910,15912,15914,16026,16270,16286,16419,18066,18071,18080,18150,18160,19847,19849,19855,19860,19868,19869,19871,19874,19876,19880],"fullWord":845},{"subwords":[828,846,1060,6240,6308,6386,7026,7045,7050,7130,7140,7194,7207,7375,7395,7447,7961,8099,8180,14758,14939,15790,15864],"fullWord":846},{"subwords":[227,269,297,399,817,833,848,1196,5588,5592,5594,5976,5988,7293,7298,7375,7395,7447,7448,7461,7477,7661,7664,7961,7992,8193,8195,10109,10110,10208,10304,10306,10324,10355,10359,10398,10495,11065,11074,14758,14762,14939,14968,15141,15143,15183,15201,15864,15866,21050,21071,21097,21099],"fullWord":848},{"subwords":[442,464,849,7293,7301,7310,7375,7395,7447,7664,7961,8193,10109,10304,14758,14806,14939,15864],"fullWord":849},{"subwords":[0,2,317,325,850,851,905,911,918,932,8360,8361,8362,8371,8372,8378,8391,8934,8935,14775,14886,14898,14899,14912,16021,16041,16559,17773,18449,18472,19224,19381],"fullWord":851},{"subwords":[326,327,329,349,351,352,817,854,855,4516,4518,4599,4607,4714,4810,4935,5023,5026,5346,5365,5588,5976,6008,9103,9376,9384,9385,14736,14776,14778,14872,14961,14983,15060,15428,15433,15434],"fullWord":855},{"subwords":[326,337,349,361,854,856,4456,4460,4578,4891,4900,5337,5374,5430,9124,9128,9376,10090,10108,10119,10121,10122,10202,10206,10304,10502,10530,10531,10675,14736,14776,14780,14939,15399,15428,15558,15864,21068,21140],"fullWord":856},{"subwords":[349,859,866,911,7289,7375,7393,7416,7551,7628,7630,7637,8035,8233,8245,8360,8378,8688,9376,14758,14775,14898,15461,15464,18342,18347,18449,18684,19280],"fullWord":859},{"subwords":[349,359,817,825,858,861,863,891,905,906,5588,5599,5976,5977,6004,9376,9384,9389,9409,12680,12683,12979,12982,13007,13022,14788,14881,15526,15610,15611,15673,15676,16028,16270,16286,16419,16889,16890,17303,17419,17722],"fullWord":861},{"subwords":[349,359,862,905,9376,9409,12680,12683,13007,15673,16028,16889,17303,17722],"fullWord":862},{"subwords":[349,359,647,648,691,817,825,858,863,864,905,906,5588,5595,5598,5599,5918,5976,5977,5996,6000,9307,9376,9378,9384,9389,9409,12229,12275,12276,12319,12324,14784,14786,14788,14821,14838,14839,14881,15175,15177,15296,15500,15526,15527,15986,15995,15998,16028,16270,16286,16419,16439,16858,16860,16889,16890,16893,17223,17722],"fullWord":864},{"subwords":[349,359,817,825,858,863,865,905,906,907,908,973,5588,5599,5976,5977,6039,9376,9384,9389,9409,14788,14791,14881,14885,15526,15530,16028,16029,16270,16286,16290,16291,16419,16889,16890,16895,16899,16903,17722],"fullWord":865},{"subwords":[144,504,869,870,4472,5318,5319,11107,11276,14736,14808],"fullWord":870},{"subwords":[817,825,869,872,873,883,905,906,5588,5599,5845,5976,5977,6008,6016,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14872,14881,14883,14975,14978,14983,14986,14987,14988,15202,15224,15973,15978,16270,16278,16286,16419,17161],"fullWord":873},{"subwords":[497,586,828,869,874,920,1060,6308,6324,6821,7045,7194,7196,10136,11173,11276,11303,11387,12141,14808,15806,19837],"fullWord":874},{"subwords":[341,343,344,347,349,359,546,553,554,555,817,825,858,863,869,875,883,905,906,5588,5599,5830,5831,5845,5976,5977,9376,9384,9389,9409,9422,11276,11286,11287,11292,11314,11315,11330,11333,11437,11453,11539,11560,11743,11745,11764,11765,14788,14808,14810,14811,14820,14881,14975,14978,15202,15224,15480,15481,15484,15489,15526,15973,15978,16028,16270,16278,16286,16375,16419,16764,16889,16890,17161,17722],"fullWord":875},{"subwords":[287,341,349,869,876,7283,7317,7334,7375,7604,7918,7921,8009,8015,9204,9376,9378,11127,11132,11156,11213,11276,11290,11649,11697,11711,12230,12244,12443,14758,14784,14808,14821,14832,14838,15461,15480,15494],"fullWord":876},{"subwords":[399,405,488,491,817,869,877,911,1009,5588,5592,5620,5782,5976,5982,6055,10136,10145,10150,10247,10254,10324,10355,10460,11173,11180,11192,11276,11286,11303,11320,11361,11362,11364,11437,11442,11456,11502,11539,11574,11575,11576,14808,14898,14901,14968,14971,14975,15202,15312,15748,18370,18372,18389,18393,18396,18449,18453,18541,18547,18549,18554,18595,18644,19216],"fullWord":877},{"subwords":[869,878,879,883,905,11265,11276,11314,11330,11813,12680,12683,12872,13007,14808,14820,15564,15567,15570,15573,15627,15638,15673,15973,17303,17378],"fullWord":879},{"subwords":[869,878,880,884,11265,11276,11313,11329,11408,11420,11421,11967,12680,14808,14939,15564,15570,15627,15864,21051],"fullWord":880},{"subwords":[572,586,869,878,881,920,11265,11276,12680,13051,14808,15564,15570,15627,15806,15813],"fullWord":881},{"subwords":[341,349,574,781,869,882,911,1032,9178,9183,9376,11270,11276,11320,11361,13200,13286,13328,13331,13364,13758,13850,13851,14240,14247,14313,14314,14808,14816,14851,14867,14898,15480,15508,15747,18347,18389,18402,18436,18443,18449,18467,18882,18926,19216,19217,19221,19285,19295],"fullWord":882},{"subwords":[349,596,796,852,885,2801,2869,2941,2969,3402,4072,9207,9208,9376,9378,12270,14784,14821,14838],"fullWord":885},{"subwords":[183,195,605,886,4492,4532,5172,5173,10090,10106,10169,10202,10730,10741,10876,10878,10886,12274,12493,12494,12548,12680,12837,12948,14736,14749,14821,14826,15561,15568,15600,15639],"fullWord":886},{"subwords":[168,183,197,200,326,336,349,359,854,887,905,4461,4901,5037,5212,5216,5217,5219,5221,9127,9376,9409,12680,12683,13007,14736,14743,14744,14751,14776,14779,15428,15443,15561,15563,15600,15609,15673,15893,15928,16028,16030,16889,17303,17323,17324,17722],"fullWord":887},{"subwords":[349,693,700,888,911,9325,9335,9338,9339,9340,9360,9367,9376,9378,9400,12293,12463,12469,12513,12548,12574,12575,12680,12686,13008,14784,14821,14838,14847,14898,14909,14910,15504,15568,15691,18347,18408,18432,18449,18460,18463,18894,18945,19036,19093,19094,19105,19212,19292],"fullWord":888},{"subwords":[504,869,883,889,890,905,11265,11276,11314,11330,11813,12680,12683,12872,13007,14808,14820,15564,15567,15627,15638,15673,15973,15981,17303,17378],"fullWord":890},{"subwords":[183,195,605,892,1053,4492,4532,5172,5173,5260,5507,5523,5539,12274,12493,12548,12680,13051,14736,14749,14821,14826,15561,15568,15600,15714,15821,19664,19866],"fullWord":892},{"subwords":[817,825,891,893,905,906,5588,5599,5627,5976,5977,6004,12680,12683,12979,12982,13007,13051,13052,14881,15610,15611,15673,15676,15706,15708,15716,15777,15782,15840,16270,16286,16419,17303,17419,17451,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":893},{"subwords":[693,716,894,911,919,12282,12293,12311,12548,12574,12575,12577,12680,12686,13008,14821,14847,14898,14939,14942,15568,15691,15864,18408,18432,18449,18460,18463,19036,19059,19093,19094,19105,19122,19186,19231,19347,19377,19573,21075,21183],"fullWord":894},{"subwords":[596,693,707,895,911,14821,14847,14871,14898,14899,18408,18449,18460],"fullWord":895},{"subwords":[896,897,898,905,14871,14939,14944,15864,15865,16103,21212],"fullWord":898},{"subwords":[817,818,899,5588,5976,6008,14871,14872,14875,14983],"fullWord":899},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":900},{"subwords":[349,352,817,901,1106,1109,5588,5976,6008,9376,9384,14872,14921,14927,14983,15337,15549,15552,19963,20107,20129,20132],"fullWord":901},{"subwords":[902,903,905,12680,12683,13007,14933,14938,15570,15573,15673,15734,15744,16089,17303,17464,20410,20442,20449],"fullWord":903},{"subwords":[902,904,1166,12680,14933,14939,15570,15734,15864,20410,20448,20493,20946,21010,21078,21079,21202],"fullWord":904},{"subwords":[905,909,910,973,987,12548,12560,12680,12683,13007,14821,15568,15569,15673,15986,16009,17303,17306,17383,17384,17385,17395,17434],"fullWord":910},{"subwords":[227,817,911,912,919,1009,1196,5588,5620,5976,5982,6008,6055,14872,14898,14901,14903,14939,14983,15312,15331,15748,15864,15866,18449,18453,18471,18541,18554,18558,18652,18653,18657,19231,19257,19377,19570,21071,21073,21097,21099,21135],"fullWord":912},{"subwords":[254,488,828,911,913,1060,6308,6332,6344,6363,6373,6717,6821,7042,7045,7194,7196,14754,14898,15858,18449,18508,19412,19468,19605,19608,19837],"fullWord":913},{"subwords":[911,914,8360,8378,9012,9026,14775,14898,15858,15859,18449,18508,18789,19892],"fullWord":914},{"subwords":[349,352,817,911,915,1009,5588,5620,5976,5982,6008,6055,9376,9382,9383,9384,14872,14898,14901,14903,14983,15312,15542,15748,18347,18449,18453,18541,18554,18652,18653,18844,18847,18941,19275],"fullWord":915},{"subwords":[337,349,361,434,488,911,916,919,9376,9437,9439,10121,10126,10127,10304,10502,10675,10691,14780,14898,14939,15399,15558,15864,18347,18349,18449,18863,19210,19231,19262,19377],"fullWord":916},{"subwords":[349,359,905,911,917,918,997,9376,9409,9447,14898,14912,16028,16041,16889,16907,16908,17722,17744,17773,17782,17788,17881,17946,17967,18347,18449,18472,18474,18476,18482,18495,18503,18947,18950,18964,19214,19215,19381],"fullWord":917},{"subwords":[596,716,905,922,923,12282,12283,12311,12312,14821,14939,14944,15864,15865,15986,16022,16103,21075,21077,21212],"fullWord":923},{"subwords":[93,94,96,114,115,116,200,605,607,610,926,2766,2771,2782,2869,2883,2884,2887,2906,3021,3022,4431,4432,4492,4494,4497,4500,4501,4605,4606,4639,4774,4785,4826,5856,5865,5875,5918,6023,12229,15880,15893,15986,15988,15995,15996,16114,16134,16270,16298,16308,16381],"fullWord":926},{"subwords":[93,96,114,116,126,134,693,694,697,711,927,1009,2869,2883,2887,2906,2907,2908,2917,3021,3041,3042,3052,3057,3064,3145,3150,4238,4241,5616,5620,5626,5849,5850,5856,5918,6023,6055,6057,6074,6075,12229,12289,12325,12330,12368,12374,12376,15880,15986,15995,16041,16043,16134,16136,16157,16163,16270,16293,16298,16299,16304,16399,16457,17763,18408,18428,18541,18559,18607,18624],"fullWord":927},{"subwords":[126,134,929,930,973,988,990,3041,3049,3052,3064,3603,3604,3605,3611,3958,3963,3965,3971,4238,4241,12685,12686,12692,15880,15892,16041,16157,16159,16205,16208,17316,17434,17435,17436,17885,17886,18333,18335,18432,18435,18487,19125],"fullWord":930},{"subwords":[0,2,317,325,596,932,933,2869,2906,3017,3025,8362,12283,15880,15986,16134],"fullWord":933},{"subwords":[325,349,359,817,825,858,863,905,906,932,937,5588,5599,5976,5977,8245,8248,8333,8338,8362,8453,8456,8503,8505,8552,8584,8625,8628,8672,8676,8678,8934,9376,9384,9389,9409,14775,14788,14881,14886,15376,15377,15526,16028,16270,16286,16419,16549,16574,16577,16617,16642,16889,16890,17722],"fullWord":937},{"subwords":[287,325,647,691,932,938,7283,7287,7396,7399,7604,7611,7744,8233,8237,8304,8308,8362,8678,8679,9307,12230,12233,12429,12432,15910,15986,16001,16004,16513,16629,16805,16815,16858,16866,16874,17211],"fullWord":938},{"subwords":[0,2,317,325,377,382,905,932,939,8362,8934,10231,14775,14886,15942,16021],"fullWord":939},{"subwords":[0,2,317,325,504,505,506,596,932,940,8290,8296,8362,11213,11216,11247,11330,11335,12244,12283,15973,15986,16531,16532],"fullWord":940},{"subwords":[319,320,325,528,531,932,935,941,5845,5918,8290,8296,8362,8532,8533,8539,8540,8547,11213,11218,11221,11247,11248,11330,11335,11437,11446,11450,11453,11512,11524,11560,11563,12229,12244,12245,12250,15973,15978,15986,15995,16270,16278,16531,16533,16574],"fullWord":941},{"subwords":[323,325,817,825,891,905,906,932,942,5588,5599,5976,5977,6004,8333,8338,8362,8453,8456,8552,8575,8581,8584,8696,8699,8725,8728,8729,8730,8857,8858,8863,8874,8875,8881,8934,12680,12683,12810,12979,12982,13007,14775,14881,14886,15376,15377,15386,15610,15611,15673,15676,16270,16286,16419,16549,16574,16577,16676,16678,16697,17303,17419],"fullWord":942},{"subwords":[0,2,317,325,504,505,506,869,883,905,932,943,8290,8296,8346,8349,8362,8934,11276,11314,11317,11330,11335,14775,14808,14820,14886,15973,16021,16531],"fullWord":943},{"subwords":[596,647,691,945,946,947,973,987,9307,12283,15986,16009,16858,16881,16903],"fullWord":947},{"subwords":[200,326,327,331,336,948,949,973,4461,4462,4714,4826,4901,4935,4939,5037,6039,9103,9106,9111,9127,15893,15928,15929,16270,16291,16780,16782,16903],"fullWord":949},{"subwords":[596,693,711,950,951,9770,12283,15986,16007,16008,16011,16041,16042,17767,18408,18418,18419,18420,18423,18428,18484],"fullWord":951},{"subwords":[817,825,867,868,905,906,907,950,953,954,957,973,5588,5599,5976,5977,6039,14798,14802,14881,14885,15939,15940,16270,16286,16290,16291,16419],"fullWord":954},{"subwords":[287,369,647,691,950,956,7283,7287,7396,7604,7608,7611,9276,9284,9307,9913,9922,9925,9929,12230,12233,15910,15986,16001,16007,16815,16858,16866,16876,16937,16954,16974,17211],"fullWord":956},{"subwords":[375,376,382,488,596,598,693,711,958,1013,10241,12283,12284,12287,12292,15942,15960,15986,16011,16041,16042,17017,17022,18408,18428],"fullWord":958},{"subwords":[399,401,407,481,486,732,739,779,959,961,5605,5607,5691,5693,5749,5790,5956,6033,10182,10194,10195,10324,10350,10353,10360,10361,10383,10392,10451,13204,13207,13211,13232,13336,13439,13450,13452,13461,13462,13489,13495,13498,13510,13940,13943,13944,15942,15948,16014,16270,16274,16319,16336,16403,17019,17049,17476,17488],"fullWord":959},{"subwords":[228,399,407,472,473,481,486,487,732,739,779,960,961,5956,6033,10181,10182,10194,10195,10324,10350,10353,10360,10443,10447,10864,10865,10869,10874,10888,12845,12848,12913,12914,12916,12925,12936,13204,13207,13211,13232,13336,13338,13343,13439,13450,13452,13461,13607,13940,13943,14056,14061,14066,14087,14166,15942,15948,16014,16270,16274,16403,17019,17097,17104,17105,17298,17354,17359,17406,17476,17488],"fullWord":960},{"subwords":[93,96,126,134,732,739,779,781,961,963,1009,2921,2922,2926,2938,3021,3041,3042,3052,3057,3064,4048,4237,4238,4241,5616,5620,5626,5956,6023,6033,6055,6057,13154,13155,13159,13167,13168,13170,13336,13352,13355,13364,13367,13374,13385,13438,13439,13461,13464,13465,13609,13613,13626,14427,15880,16014,16041,16043,16139,16157,16270,16293,16298,16304,16409,16410,16457,17476,17477,17510,17511,17525,17836,18436,18437,18441,18448,18541,18559,19386],"fullWord":963},{"subwords":[732,739,779,780,961,964,965,972,973,987,5918,5956,6033,6039,12229,12257,12259,12261,12269,12317,12318,12367,13239,13245,13249,13259,13336,13344,13345,13439,13453,13461,13539,13558,15986,15995,15999,16009,16014,16020,16270,16291,17220,17222,17476,17490,17493,17507],"fullWord":965},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":967},{"subwords":[961,968,969,972,973,2921,2938,3402,4046,4048,4237,13154,13167,13336,13344,13688,13690,13702,13839,13844,14421,15880,15892,16014,16020,16178,16769,16779,16883,16888,16903,17476,17507,17550,17551,17552,17559],"fullWord":969},{"subwords":[349,359,732,735,737,739,775,779,817,825,858,863,905,906,961,966,970,5588,5599,5956,5976,5977,6033,9376,9384,9389,9409,13200,13202,13286,13294,13299,13303,13321,13322,13336,13439,13455,13459,13461,13577,13588,13597,13705,13712,13715,13716,13839,14239,14262,14281,14309,14336,14403,14421,14788,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15508,15509,15514,15524,15526,16014,16028,16270,16286,16405,16419,16883,16889,16890,17476,17494,17495,17523,17565,17591,17592,17722],"fullWord":970},{"subwords":[325,744,751,932,961,971,972,973,8321,8324,8362,8367,8369,8664,8671,8678,8681,13336,13344,13651,13839,13841,13844,14421,16014,16020,16033,16639,16640,16883,16888,16903,17476,17507],"fullWord":971},{"subwords":[337,340,372,382,419,945,973,974,10236,15931,15935,15942,15959,16903,16904],"fullWord":974},{"subwords":[973,976,977,16037,16040,16103,16109],"fullWord":977},{"subwords":[693,694,697,711,973,978,982,987,990,1009,5616,5618,5620,5626,5918,6039,6055,6074,6075,12229,12289,12325,12330,12367,12368,12373,12374,12376,15986,15995,15999,16000,16009,16041,16043,16046,16270,16291,16293,16296,16399,16457,16464,18408,18428,18487,18541,18559,18607,18624],"fullWord":978},{"subwords":[817,825,905,906,907,911,918,973,979,982,990,993,995,1009,5588,5599,5616,5618,5620,5626,5976,5977,5982,6018,6039,6055,14881,14885,14898,14901,14905,14912,15306,15309,15312,15748,16041,16043,16046,16270,16286,16290,16291,16293,16296,16419,16457,16464,17773,17775,17778,17781,18449,18453,18455,18472,18487,18541,18554,18557,18559,19253,19381,19382],"fullWord":979},{"subwords":[973,980,981,6039,16037,16039,16270,16291],"fullWord":981},{"subwords":[973,980,982,983,990,1009,5616,5618,5620,5626,6039,6055,16037,16041,16043,16046,16270,16291,16293,16296,16457,16464,17785,18487,18489,18541,18559],"fullWord":983},{"subwords":[287,647,691,973,984,987,7283,7287,7396,7604,7611,9307,12230,12233,15910,15923,15986,16001,16009,16815,16822,16858,16866,16873,16881,16903,17211,17213],"fullWord":984},{"subwords":[973,985,990,9447,16037,16041,16903,16907,16915,17787,18347,18487,18947],"fullWord":985},{"subwords":[973,986,6039,16270,16291,16903,16929,16933,21254],"fullWord":986},{"subwords":[905,911,918,973,989,990,12680,12683,12685,12686,12692,13007,13008,13011,14898,14912,15574,15575,15673,15691,15700,16041,17303,17306,17429,17433,17434,17435,17436,17773,17781,17885,17886,18432,18435,18449,18463,18464,18472,18487,19093,19094,19097,19113,19125,19381,19382],"fullWord":989},{"subwords":[586,590,593,973,991,5627,5845,5846,5847,6039,11330,11348,11351,11437,11453,11560,11561,11569,12082,12152,12156,12173,15973,15978,16270,16278,16283,16291,18066,18073,18103,18116,19871,19876,19882],"fullWord":991},{"subwords":[817,825,905,906,907,973,992,5588,5599,5627,5976,5977,6039,14881,14885,15777,15782,15840,15841,15849,16270,16286,16290,16291,16419,18066,18071,18072,18073,18150,19847,19849,19868,19869,19871,19876,19880,19881,19882,19886],"fullWord":992},{"subwords":[693,694,697,709,711,817,825,905,906,911,918,993,994,1009,5588,5595,5598,5599,5616,5620,5626,5918,5976,5977,5982,6000,6018,6055,6074,6075,12229,12275,12289,12319,12324,12325,12330,12362,12368,12374,12376,14821,14847,14850,14881,14898,14901,14905,14912,15241,15245,15306,15312,15748,15986,15995,15998,16041,16043,16270,16286,16293,16399,16419,16457,17223,17773,17775,17843,17844,18408,18428,18449,18453,18455,18460,18462,18472,18541,18554,18557,18559,18607,18624,18649,18651,19381],"fullWord":994},{"subwords":[817,825,905,906,907,911,918,973,979,982,990,993,995,1009,5588,5599,5616,5618,5620,5626,5976,5977,5982,6018,6039,6055,14881,14885,14898,14901,14905,14912,15306,15309,15312,15748,16041,16043,16046,16270,16286,16290,16291,16293,16296,16419,16457,16464,17773,17775,17778,17781,18449,18453,18455,18472,18487,18541,18554,18557,18559,19253,19381,19382],"fullWord":995},{"subwords":[0,2,317,325,504,505,506,932,996,1014,1017,8290,8296,8362,8371,8372,8378,8391,8935,11330,11335,11356,11361,11369,11370,11376,15973,16041,16531,16559,18389,18407,18967],"fullWord":996},{"subwords":[377,382,488,489,490,905,911,918,998,1013,10241,14898,14899,14912,15942,15960,16041,17022,17773,18449,18472,18473,19381],"fullWord":998},{"subwords":[905,911,918,919,999,14898,14899,14912,14939,14944,15864,15865,16041,16056,16103,17773,17802,17956,18018,18449,18472,19231,19232,19377,19381,21212],"fullWord":999},{"subwords":[1000,1009,5616,5620,5626,5627,6055,16041,16043,16070,16270,16293,16457,17788,17790,17797,17846,18066,18074,18174,18490,18495,18498,18503,18508,18515,18519,18541,18559,18565,18567,18662,19493,19498,19871,19876],"fullWord":1000},{"subwords":[504,869,883,905,1001,11276,11314,11330,11399,11400,14808,14820,14933,14938,15973,16089,18189,18205,20410,20425,20429,20442,20449],"fullWord":1001},{"subwords":[337,340,349,359,860,905,1002,1155,1157,9376,9409,10121,10125,10292,10299,10502,10503,10675,10676,14780,14783,14933,14938,15399,15400,15931,15942,16028,16089,16889,17037,17722,18185,18254,20345,20348,20410,20442,20449],"fullWord":1002},{"subwords":[1003,1158,1161,12560,12606,12610,13119,13124,15986,16089,16095,17284,17383,17397,17464,17469,18195,18263,20393,20449,20897,20903,20925],"fullWord":1003},{"subwords":[470,497,501,586,594,595,1005,10136,10161,10304,10313,11173,11330,11387,11390,11408,11424,15942,15973,16103,17012,17039,17135,17149,18103,19871,21051,21055],"fullWord":1005},{"subwords":[126,1007,3052,3402,3429,18347,18823,19975,19977,20107,20210],"fullWord":1007},{"subwords":[126,1008,3052,3402,3429,18347,18528,18533,18823],"fullWord":1008},{"subwords":[0,317,596,693,694,1009,1010,5620,6055,6074,8378,8381,8461,8540,12229,12325,12328,12374,12612,18408,18541,18607,18686,18687,18697,18708],"fullWord":1010},{"subwords":[325,693,694,697,711,932,935,1009,1011,5616,5620,5626,5918,6055,6074,6075,8228,8318,8362,8371,8373,8375,8378,8381,8385,8391,8461,8467,8540,8547,8548,8586,8935,12229,12289,12325,12328,12330,12368,12374,12376,12612,15986,15995,16041,16043,16270,16293,16399,16457,16559,16574,18408,18428,18541,18559,18607,18624,18686,18687,18688,18697,18708,18710],"fullWord":1011},{"subwords":[504,596,693,711,1014,1015,1016,1017,11213,11216,11247,11250,11251,11330,11356,11361,11376,12244,12283,15973,15986,16011,16041,16042,18389,18407,18408,18428],"fullWord":1016},{"subwords":[442,455,456,461,487,488,495,496,1018,1019,10181,10241,10896,10897,10901,12686,12692,12856,12857,15942,15960,16041,17022,17113,17354,17435,17758,17885,18381,18432,18435,19019,19022],"fullWord":1019},{"subwords":[126,341,1020,1021,2848,3052,3402,3403,3429,3605,3609,3732,3733,3965,9367,11086,11265,11361,11617,11814,11854,12010,12686,12869,13038,18333,18347,18389,18432,18823,18882,19026],"fullWord":1021},{"subwords":[375,488,495,596,598,693,1023,10741,10897,12287,12292,12293,12574,12575,12576,12686,18386,18408,18432,19036,19037],"fullWord":1023},{"subwords":[183,215,605,675,693,694,695,1009,1024,1025,4492,4500,4512,4551,4605,4774,4788,5114,5172,5173,5175,5176,5234,5237,5620,5865,5953,6055,6074,12229,12293,12325,12374,12493,12499,12574,12575,12581,12582,12686,12687,12752,12876,18339,18408,18432,18541,18607,18610,18970,18981,18983,19036,19038,19039],"fullWord":1025},{"subwords":[215,693,694,709,817,911,1009,1024,1026,5588,5595,5620,5953,5976,5982,6055,6074,12229,12293,12319,12325,12374,12548,12574,12575,12581,12583,12590,12680,12686,12687,12688,12876,12955,12979,13001,13008,14821,14847,14898,14901,15238,15241,15312,15568,15610,15691,15694,15748,18408,18432,18449,18453,18460,18463,18541,18554,18607,18621,18649,18981,19036,19038,19040,19093,19094,19101,19105],"fullWord":1026},{"subwords":[215,217,693,694,697,711,1009,1024,1027,5616,5620,5626,5918,5953,5955,6055,6074,6075,12229,12289,12293,12325,12330,12368,12374,12376,12506,12560,12561,12574,12575,12581,12585,12591,12686,12687,12692,12876,12879,12884,15986,15995,16041,16043,16270,16293,16399,16457,16461,17278,17383,17435,17834,17885,17909,18408,18428,18432,18435,18541,18559,18607,18624,18981,18985,19036,19038,19042,19057],"fullWord":1027},{"subwords":[126,781,1028,1029,2921,3052,3402,3403,3429,3605,3609,3864,3965,4046,9367,12686,12937,12939,13038,13154,13168,13364,13379,13438,13688,13700,13850,13851,14032,14188,18333,18347,18432,18436,18823,18926,19075,19083],"fullWord":1029},{"subwords":[337,349,372,377,434,488,489,852,911,1030,1031,9376,9437,10121,10126,10213,10502,10675,10691,14780,14898,14899,15399,18347,18349,18449,18815,18863,19210,19262],"fullWord":1031},{"subwords":[341,349,586,869,911,920,1033,9376,11276,11320,11361,11392,14808,14898,15480,15806,15858,18347,18389,18449,18508,18882,19216,19285],"fullWord":1033},{"subwords":[0,126,317,1034,3052,3229,8378,18323,18336,18495,18691],"fullWord":1034},{"subwords":[596,693,700,1035,1044,9325,12463,18347,18354,18408,18495,18894,18921,18950,18951,18969],"fullWord":1035},{"subwords":[905,911,918,1036,1037,14898,14899,14912,16041,17773,17782,17788,17950,18449,18472,18476,18482,18495,18497,18503,19381],"fullWord":1037},{"subwords":[605,693,694,695,1009,1038,1044,4492,4500,4512,4551,4605,4774,4788,5620,5865,6055,6074,12229,12325,12374,18339,18408,18495,18498,18541,18565,18607,18610,18630,18969],"fullWord":1038},{"subwords":[1009,1039,5616,5620,5626,6055,16041,16043,16270,16293,16457,17788,17790,17846,18490,18495,18498,18503,18541,18559,18565,18567,18662],"fullWord":1039},{"subwords":[126,134,1040,1041,3041,3052,3064,3402,3429,4238,4241,9447,15880,16041,16157,16178,16769,16907,17788,17794,18325,18336,18338,18347,18495,18503,18823,18830,18947,18950,18964],"fullWord":1041},{"subwords":[337,372,434,488,1012,1042,9437,10126,10691,18347,18349,18495,18863,18876,18950],"fullWord":1042},{"subwords":[349,817,911,1009,1043,5588,5620,5976,5982,6055,9376,9382,9384,14898,14901,15312,15542,15748,18347,18449,18453,18476,18495,18498,18499,18541,18554,18565,18672,18844,18847,18941,18950,18953,18963,19214,19235,19303],"fullWord":1043},{"subwords":[72,349,911,1045,1282,1366,1462,1881,2308,2349,2444,9376,14898,15402,18302,18347,18449,18476,18495,18950,19214],"fullWord":1045},{"subwords":[693,694,1009,1044,1046,1074,5620,5627,6055,6074,12229,12300,12325,12374,12659,18408,18495,18498,18508,18510,18515,18516,18541,18565,18607,18630,18969,19434,19435,19438,19493],"fullWord":1046},{"subwords":[596,693,700,1048,1135,1158,9325,12463,18347,18357,18408,18521,18894,19503,19530,20349,20353,20393,20404,20774,20842],"fullWord":1048},{"subwords":[617,693,694,1009,1049,1145,1158,5620,5621,5853,6055,6074,6118,12229,12325,12339,12374,12390,12399,18408,18521,18541,18576,18583,18607,19516,20393,20396,20404,20505,20532,20541,20579,20585,20594],"fullWord":1049},{"subwords":[126,781,1050,2921,3052,3100,3402,3429,3440,4046,9101,13154,13168,13364,13424,13438,13688,13850,13851,13870,18347,18436,18823,18926,19563,21064,21146],"fullWord":1050},{"subwords":[30,1051,1053,1210,1211,1243,1246,1490,1515,1546,1560,2517,4427,4562,4618,5445,5471,5627],"fullWord":1051},{"subwords":[1052,1332,1366,1406,2308,2337,2577,2610,2638,12219,12614,14821,15749,15821,19636,19840,19841,19866],"fullWord":1052},{"subwords":[148,158,200,1053,1054,1055,4438,4439,4440,4445,5440,5441,5466,5470,15893,19871],"fullWord":1055},{"subwords":[168,183,197,200,326,336,1053,1056,1057,4461,4901,5037,5221,5523,5524,9127,9369,9449,9450,13048,15893,15928,16063,17323,17324,18083,19871],"fullWord":1057},{"subwords":[169,170,200,326,336,1053,1058,1059,4461,4901,5037,5548,9127,9447,9449,9450,15893,15928,16041,16063,16907,16917,17741,17999,18083,18085,18339,18340,18347,18508,18947,19871],"fullWord":1059},{"subwords":[269,270,315,605,1053,1061,4492,4500,4502,4605,4774,5471,5485,5507,5511,5513,5627,5707,5865,7253,7427,7493,7759,8151,12229,12230,12624,12629,19630],"fullWord":1061},{"subwords":[269,279,280,315,316,817,825,842,845,847,905,906,1062,1063,5588,5599,5627,5976,5977,5988,5992,7375,7391,7396,7461,7463,7939,8099,8102,14758,14762,14764,14773,14881,15141,15777,15782,15790,15794,15840,15910,15912,15914,16026,16270,16286,16419,18066,18071,18080,18150,18160,19847,19849,19855,19860,19868,19869,19871,19874,19876,19880],"fullWord":1063},{"subwords":[325,932,1064,1065,7396,7399,7416,7423,7550,7551,7552,8166,8171,8175,8176,8233,8237,8362,8371,8378,8391,8935,8951,8958,9026,9027,15910,16041,16513,16559,16753,17732,18342,18345,18508,18796,18797,18802,19418,19421,19486,19583,19584,19592,19871,19892],"fullWord":1065},{"subwords":[847,905,1066,1067,7375,7391,7396,7939,8099,8102,8164,8165,14758,14773,15790,15794,15910,18080,19868,19871],"fullWord":1067},{"subwords":[1066,1068,7375,7395,7447,7961,8099,8164,8180,14758,14939,15790,15864],"fullWord":1068},{"subwords":[1069,7396,7416,7423,8171,8175,8176,15910,16041,17732,18342,18345,18508,19418,19421,19871],"fullWord":1069},{"subwords":[396,399,817,1053,1072,1073,4466,4516,4601,4607,4728,4810,5442,5471,5472,5536,5588,5592,5627,5756,5976,10090,10093,10097,10202,10270,10271,10273,10324,10327,10355,10378,10470,11029,11030,14736,14961,14968,15060,15773,15777,15778,15800,15801,19837,19847,19848],"fullWord":1073},{"subwords":[693,694,700,1009,1074,1075,5620,5627,6055,6074,9325,12229,12300,12325,12374,12463,12659,18347,18408,18508,18541,18607,18844,18894,18898,19434,19435,19438,19701,19702,19776],"fullWord":1075},{"subwords":[817,818,911,1009,1078,1079,1082,1096,5588,5620,5627,5976,5982,6055,14898,14899,14901,15312,15748,15777,15858,18449,18453,18508,18541,18554,19356,19847],"fullWord":1082},{"subwords":[817,825,905,906,1083,5588,5599,5627,5976,5977,14881,15777,15782,15840,16270,16286,16419,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":1083},{"subwords":[349,359,905,911,918,997,1085,9376,9409,9447,14898,14912,15852,15858,15861,16028,16041,16889,16907,16908,16917,17722,17744,17773,17881,17967,18083,18085,18172,18347,18449,18472,18474,18508,18947,19381,19868,19871],"fullWord":1085},{"subwords":[905,1086,12680,12683,13007,13051,13052,15673,17303,17451,19868,19871],"fullWord":1086},{"subwords":[586,869,883,905,920,921,1087,1088,11276,11314,11330,14808,14820,15806,15820,15973,18103,19868,19871],"fullWord":1088},{"subwords":[973,1089,5627,6039,9431,16270,16291,16903,18066,18073,18083,19871,19876,19882],"fullWord":1089},{"subwords":[348,647,691,693,700,704,711,712,1074,1076,1090,9307,9318,9325,9447,12300,12463,12471,12659,12663,15936,15986,16041,16047,16858,16907,16917,17255,17742,18005,18083,18085,18117,18347,18408,18428,18508,18894,18919,18947,19434,19435,19436,19447,19452,19701,19706,19871],"fullWord":1090},{"subwords":[911,1091,1093,8360,8378,8696,8857,8858,8892,8906,9012,9026,12680,12686,12690,13008,13009,13051,13059,14775,14898,15386,15691,15722,15858,15859,18432,18449,18463,18508,18743,18749,18759,18777,18789,19093,19094,19095,19155,19892],"fullWord":1091},{"subwords":[341,347,555,586,1092,9422,9447,11160,11330,11356,11361,11376,11392,11780,12177,15973,16041,16764,16907,16917,17179,17203,18083,18085,18103,18347,18389,18407,18508,18882,18947,19871],"fullWord":1092},{"subwords":[183,1009,1053,1093,1094,4551,5114,5234,5237,5471,5479,5523,5620,5627,6055,12686,12752,13059,13065,18339,18432,18508,18541,18970,18981,18983],"fullWord":1094},{"subwords":[586,693,1074,1097,11213,11361,11392,12244,12300,12659,18389,18408,18508,19434,19435,19784],"fullWord":1097},{"subwords":[348,647,691,712,1098,1099,1100,1180,9307,12474,15986,16098,16858,16922,18083,18117,19709,19871],"fullWord":1100},{"subwords":[337,340,372,382,419,945,1101,1102,1124,10281,10284,15931,15942,15952,15970,16844,17029,19919,19923,20107,20110,20112,20115,20191],"fullWord":1102},{"subwords":[596,693,1074,1104,12300,12659,18408,18508,19434,19435,19948,19975,19983],"fullWord":1104},{"subwords":[269,1106,1107,1115,5629,6092,6093,7350,7439,7467,7493,7496,7500,12229,12230,12305,12339,19948,19950,19992,20001],"fullWord":1107},{"subwords":[1106,1108,5627,5629,6092,6093,12229,12305,12339,19948,19950,19992,20050],"fullWord":1108},{"subwords":[817,825,905,906,1106,1109,1110,1111,1114,5588,5599,5605,5609,5629,5631,5976,5977,5978,5984,6092,6100,6104,14881,14921,14929,14990,14993,15337,15354,16024,16076,16078,16270,16286,16319,16340,16419,16425,16449,16472,19967,19992,19996,19998,20000,20070,20071,20073],"fullWord":1111},{"subwords":[817,825,905,906,911,918,993,1009,1106,1109,1110,1112,1113,1114,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14921,14929,15306,15312,15337,15354,15748,16041,16043,16076,16078,16270,16286,16293,16419,16457,17773,17775,17784,17799,18449,18453,18455,18472,18541,18554,18557,18559,19227,19381,19967,19970,19971,19975,19978,20070,20071,20080,20088,20095,20101],"fullWord":1113},{"subwords":[596,647,691,945,946,1116,1117,1124,9307,12283,15986,16858,19920,19948,19957,20107,20115,20152,20154,20167,20191],"fullWord":1117},{"subwords":[349,361,852,1118,9376,9453,14939,15864,19966,20107],"fullWord":1118},{"subwords":[1009,1106,1119,5620,6055,18347,18541,18844,19975,20095,20107,20129,20210,20211],"fullWord":1119},{"subwords":[204,326,337,1120,1121,4456,4578,4891,5067,9124,9128,9453,10090,10108,10119,10304,10530,19919,19923,19928,20107,20110,21140],"fullWord":1121},{"subwords":[647,691,1122,1123,1124,1125,9307,9360,9366,12560,12598,12600,13087,15986,16858,17383,19920,19948,19957,20107,20115,20152,20154,20164,20165,20167,20191,20262],"fullWord":1123},{"subwords":[93,126,1009,1106,1126,3052,3080,3605,3965,3968,3997,4005,5620,6055,6057,12686,12735,13087,13092,18333,18432,18541,18981,19165,19975,20095,20097,20233,20265],"fullWord":1126},{"subwords":[168,183,197,200,204,326,336,1120,1124,1125,1127,1128,4461,4571,4901,5037,5067,5070,5221,9127,13087,13101,15893,15928,17323,17324,19911,20107,20115,20191,20243,20246],"fullWord":1128},{"subwords":[1129,3370,8407,8714,13044,13087,19909,20272],"fullWord":1129},{"subwords":[1130,1131,1155,1164,10281,10292,10942,13087,13088,13114,19923,20250,20273],"fullWord":1131},{"subwords":[183,204,1106,1130,1132,1145,1147,4569,4574,4851,4865,5114,5267,12752,13087,13110,13111,19910,19990,20273,20274,20303,20309,20473,20474,20524,20868,20875,20962],"fullWord":1132},{"subwords":[817,1106,1109,1130,1133,1145,5588,5976,12680,12979,13087,13095,13110,14921,14933,14994,15337,15610,15728,15734,20273,20277,20288,20410,20417,20473,20475,20510,20875,20933,20962],"fullWord":1133},{"subwords":[945,1135,1136,9447,16041,16089,16907,18211,18347,18521,18527,18947,19508,20351,20353,20356,20449,20457,20467,20842,20853],"fullWord":1136},{"subwords":[1137,1138,1145,1147,4574,4865,20303,20309,20361,20362,20497,20524],"fullWord":1138},{"subwords":[596,617,1137,1139,1145,1158,9836,9978,12229,12390,20361,20363,20393,20396,20497,20505,20579],"fullWord":1139},{"subwords":[931,950,955,1137,1140,1145,1150,15939,16089,16270,16475,16951,20361,20367,20449,20497],"fullWord":1140},{"subwords":[200,905,1141,1142,4574,5330,5336,14736,14751,14933,14938,15893,16089,18203,20303,20318,20410,20412,20416,20442,20449],"fullWord":1142},{"subwords":[227,817,818,1143,1144,1145,1146,1166,1196,5588,5976,14933,14939,15864,15866,20410,20417,20448,20493,20510,20513,21010,21016,21071,21079,21097,21099,21138],"fullWord":1146},{"subwords":[269,1145,1148,8233,8409,8588,8625,20326,20327,20556,20599,20646,20742],"fullWord":1148},{"subwords":[269,287,617,1145,1149,1154,1158,6122,7283,7493,7604,7747,12229,12230,12390,20326,20327,20349,20393,20396,20399,20505,20579,20742,20774,20785,20790],"fullWord":1149},{"subwords":[337,399,1145,1152,1155,5769,8241,8258,8409,8445,8500,8588,8625,10292,10324,10414,10536,20345,20369,20501,20599,20603,20619,20648,20755],"fullWord":1152},{"subwords":[337,349,1153,1155,8241,8245,8409,9376,10121,10292,10502,10675,14775,14780,14933,15399,20345,20410,20599,20665,20666],"fullWord":1153},{"subwords":[399,407,973,1145,1150,1155,1156,1157,6039,10230,10236,10292,10299,10324,10360,10453,15942,15948,15950,16089,16096,16270,16274,16277,16291,16475,16482,17037,17038,17059,17061,18188,20369,20372,20449,20501,20503],"fullWord":1156},{"subwords":[287,657,1154,1158,1160,7283,7604,7747,7750,9297,12230,12252,20326,20349,20393,20399,20401,20742,20774,20790],"fullWord":1160},{"subwords":[215,617,1145,1158,1162,1163,5909,5953,9836,9841,9978,9998,10009,12229,12390,12606,12675,12676,12876,13110,13119,20361,20363,20393,20396,20497,20505,20579,20875,20879,20880,20881,20897],"fullWord":1163},{"subwords":[504,528,535,596,1167,1171,1185,1186,6128,11213,11218,11263,11401,11437,11446,11512,12229,12244,12245],"fullWord":1171},{"subwords":[528,535,1167,1172,1186,5881,6128,11213,11218,11263,11401,11437,11446,11512,12229,12244,12245,12339],"fullWord":1172},{"subwords":[341,347,555,1178,1179,1180,9422,11265,11330,11401,11402,11406,11772,11797,11813,11854,12073,12074,12872,15973,16098,16764,16922,17378,17471,21027],"fullWord":1179},{"subwords":[973,1167,1173,1180,1181,6039,16098,16099,16270,16291,16483,16903,16922,16923],"fullWord":1181},{"subwords":[337,399,429,1167,1169,1175,1182,1184,5778,9150,9760,10128,10301,10324,10338,10414,10416,10494,10536,10566],"fullWord":1184},{"subwords":[375,596,598,1187,1188,10301,10741,10953],"fullWord":1188},{"subwords":[215,217,1167,1173,1187,1189,1190,1192,5918,5953,5955,12229,12506,12560,12561,12876,12879,13130,13131,15986,15995,16098,16100,16270,16483,17383,17471],"fullWord":1190},{"subwords":[117,690,1187,1191,2869,3402,3403,3612,3689,3777,9097,9207,9208,9360,12474],"fullWord":1191},{"subwords":[200,1167,1168,1173,1193,4680,4826,4831,4875,5605,5606,6144,15893,16098,16270,16319,16320,16483,16484],"fullWord":1193},{"subwords":[817,825,891,905,906,1203,5588,5599,5976,5977,6004,12680,12683,12979,12982,13007,14881,14945,14950,15610,15611,15673,15676,16270,16286,16419,17303,17419,21260,21263,21291],"fullWord":1203},{"subwords":[93,96,126,134,1009,1206,1207,3021,3041,3042,3052,3057,3064,4238,4241,5616,5620,5626,6023,6055,6057,15880,16041,16043,16157,16270,16293,16298,16304,16457,18541,18559,21264,21266,21267],"fullWord":1207},{"subwords":[817,825,905,906,1208,1209,5588,5599,5627,5976,5977,14881,14945,14950,15777,15782,15840,16270,16286,16419,18066,18071,18078,18150,19847,19849,19868,19869,19871,19876,19880,21268],"fullWord":1209},{"subwords":[257,287,596,1210,1212,1256,1332,1345,1797,1837,7242,7283,7604,12219,12230,12406],"fullWord":1212},{"subwords":[17,43,385,399,1218,1219,1220,1301,1510,1636,1895,5632,10061,10324],"fullWord":1218},{"subwords":[17,18,43,45,67,385,392,399,407,1219,1220,1221,1222,1301,1306,1422,1425,1510,1636,1895,1897,1918,5632,5635,10061,10071,10323,10324,10360,15872,15942,15948,16270,16274,16999],"fullWord":1221},{"subwords":[17,30,35,326,327,1219,1223,1243,1246,1515,1560,1767,1777,1780,4427,4618,4714,4935,5632,9103],"fullWord":1223},{"subwords":[17,18,67,1219,1222,1224,1422,1425,1763,1767,1772,5632,5635,16270,16765],"fullWord":1224},{"subwords":[67,950,1210,1215,1216,1217,1225,1226,1422,1444,1894],"fullWord":1226},{"subwords":[51,1227,1228,1332,2029,2042,2127,2128,2151,2160,2161,2178,12219,12221,12481],"fullWord":1228},{"subwords":[51,67,1227,1229,1422,2029,2034,2042,2048,2160,2161,2162,2182,17308],"fullWord":1229},{"subwords":[67,385,392,1230,1231,1232,1233,1422,1510,1895,1897,2505,2509,2550,2553,2668,10061,10071,10323,15942,16999,18035,19871],"fullWord":1232},{"subwords":[27,30,93,94,1236,1237,1243,1246,1288,1289,1515,1521,1556,1560,2738,2766,2807,2808,4427,4431,4618,4639,4651],"fullWord":1237},{"subwords":[27,93,95,121,796,817,867,1236,1238,1288,1290,1366,1377,1395,1521,1535,1556,2308,2309,2317,2333,2378,2738,2745,2807,2941,2954,4052,4107,5588,5976,9849,14717,14729,14798,14995,15021],"fullWord":1238},{"subwords":[27,1070,1236,1240,2510,2738,2921,4049,4242,4243,4302,13154,13162,14428,14435],"fullWord":1240},{"subwords":[27,51,67,1241,1242,1332,1335,1359,1422,2029,2034,2049,2127,2128,2153,2738,2757,2869,2906,3617,3624,3777,3814,12219,12223,12481,12489,12560,15880,15986,16111,16134,17259,17308,17316,17383],"fullWord":1242},{"subwords":[30,35,36,148,326,327,328,1243,1244,1246,1515,1560,1777,1780,1781,4427,4438,4590,4618,4714,4928,4935,4936,5659,9103],"fullWord":1244},{"subwords":[30,148,269,270,1243,1246,1247,1248,1256,1515,1560,1604,4427,4438,4590,4618,5659,5707,7242,7253],"fullWord":1248},{"subwords":[30,269,270,817,1243,1246,1247,1249,1256,1366,1372,1377,1378,1386,1387,1515,1535,1536,1560,1604,1696,2308,2315,2317,2319,2376,2384,4427,4516,4607,4618,4619,4810,5303,5310,5351,5588,5666,5707,5976,5988,7242,7253,7375,7377,7378,7383,7461,7900,7907,7908,14736,14758,14762,14763,14961,14995,15060,15141],"fullWord":1249},{"subwords":[30,67,200,269,270,280,1243,1246,1247,1250,1254,1256,1266,1422,1425,1426,1515,1518,1560,1574,1604,1617,4427,4430,4618,4629,4707,4826,5707,5708,7242,7252,7253,7258,7396,7460,15893,15910,15912,16270],"fullWord":1250},{"subwords":[144,175,504,596,605,1210,1243,1252,1332,1336,4427,4472,4479,4492,4493,11107,11213,12219,12244],"fullWord":1252},{"subwords":[30,176,528,529,605,1243,1246,1253,1332,1336,1342,1343,1515,1526,1530,1560,1561,1665,1671,1673,4427,4472,4475,4479,4492,4500,4605,4618,4774,5658,5865,11107,11115,11213,11218,11219,11437,11438,11446,11512,11516,12219,12229,12244,12245,12246,12331],"fullWord":1253},{"subwords":[43,232,385,399,1255,1301,1636,5765,6204,6677,6734,10061,10324,10333],"fullWord":1255},{"subwords":[43,45,67,269,280,385,392,399,407,1256,1257,1258,1266,1301,1306,1422,1425,1604,1617,1636,1918,7242,7248,7250,7252,7260,7293,7298,7300,7316,7396,7477,7486,7676,10061,10071,10109,10115,10323,10324,10360,10398,10412,15872,15910,15912,15942,15948,16270,16274,16999,17003],"fullWord":1258},{"subwords":[232,385,1060,1256,1259,2537,6240,6677,6683,6821,6822,7157,7242,7293,8132,10061,10109,10981],"fullWord":1259},{"subwords":[30,269,270,1243,1246,1247,1256,1260,1515,1560,1604,4427,4618,5707,5709,7242,7253,7267,7269,7270],"fullWord":1260},{"subwords":[269,281,1256,1261,1604,1797,5709,7242,7267,7269,7567,7578],"fullWord":1261},{"subwords":[504,596,1210,1256,1263,1332,1345,7242,7317,7318,11127,11213,12219,12230,12244],"fullWord":1263},{"subwords":[269,528,1256,1264,1332,1342,1345,1526,1530,1604,1605,1665,1671,7242,7317,7323,7489,7493,11127,11128,11213,11218,11223,11437,11446,11487,11512,12219,12229,12230,12244,12245,12331],"fullWord":1264},{"subwords":[51,287,299,1256,1265,1332,1345,1797,1837,1847,1851,2029,2079,2127,2128,2140,7242,7251,7283,7604,7771,9360,12219,12230,12406,12481,12509,12700],"fullWord":1265},{"subwords":[31,72,77,269,315,1009,1256,1267,1462,1464,1542,1546,1548,1604,1606,1721,1722,2537,2697,5620,5627,6055,7242,7416,7417,7540,8175,18302,18319,18342,18508,18541,19390,19391,19397,19418],"fullWord":1267},{"subwords":[1256,1268,1797,7242,7267,7578,20326,20742],"fullWord":1268},{"subwords":[30,35,43,326,327,337,338,385,399,1243,1246,1272,1273,1296,1301,1302,1307,1515,1560,1636,1777,1780,1817,1900,1938,4427,4466,4587,4601,4618,4714,4728,4739,4891,4935,5756,9103,9104,9117,10061,10090,10093,10119,10324,10327,10378,10414,10504,10530,10536,10537],"fullWord":1273},{"subwords":[43,337,385,399,401,1272,1274,1301,1307,1576,1636,1642,1817,5691,10061,10324,10383,10414,10504,10536],"fullWord":1274},{"subwords":[43,44,337,349,385,399,817,857,1272,1275,1301,1304,1307,1366,1377,1535,1636,1790,1817,1915,1933,2308,2317,2326,2417,5588,5592,5976,9376,9384,10061,10121,10324,10355,10414,10502,10504,10509,10512,10514,10536,10549,10675,10677,14780,14968,14995,15399,15402,15444,15473],"fullWord":1275},{"subwords":[43,49,337,385,399,1196,1272,1276,1301,1307,1502,1636,1637,1749,1761,1817,2721,10061,10304,10324,10414,10495,10504,10517,10536,11065,21050,21097],"fullWord":1276},{"subwords":[43,337,385,399,420,428,1272,1277,1301,1307,1636,1817,9146,10061,10324,10414,10504,10536],"fullWord":1277},{"subwords":[51,56,337,349,385,1272,1278,1307,1366,1851,1852,2029,2030,2095,2100,2308,2326,2439,2446,2454,9376,10061,10068,10121,10502,10504,10512,10675,10748,10749,12680,12700,12812,12948,12959,14780,15399,15402,15576,15617],"fullWord":1278},{"subwords":[67,349,359,647,691,905,1280,1281,1332,1359,1366,1406,1407,1419,1422,1440,1763,1837,1850,2308,2328,2329,2337,2342,2343,2400,2429,9307,9376,9378,9409,12219,12223,12276,12406,12409,14784,14786,14821,14838,14839,15402,15410,15986,16028,16765,16858,16889,17722],"fullWord":1281},{"subwords":[30,31,35,72,169,326,327,1009,1243,1246,1282,1283,1462,1464,1466,1515,1542,1560,1721,1722,1777,1780,1785,1881,1884,4427,4551,4618,4625,4630,4714,4935,4942,5620,5680,6055,9103,18302,18339,18347,18541,18835,18844,18845],"fullWord":1283},{"subwords":[31,72,349,817,911,1009,1282,1284,1366,1377,1393,1462,1464,1535,1542,1721,1722,1790,1881,1884,1885,2308,2317,2349,2417,2444,5588,5620,5976,5982,6055,9376,9382,9384,14898,14901,14995,14996,15312,15402,15542,15748,18302,18347,18449,18453,18541,18554,18817,18844,18847,18941,19265],"fullWord":1284},{"subwords":[67,1286,1287,1422,1425,1763,16270,16765,16929],"fullWord":1287},{"subwords":[67,817,825,867,868,905,906,950,953,1288,1290,1291,1293,1366,1377,1381,1395,1398,1419,1422,1425,1428,1444,1521,1524,1535,1539,1894,2308,2317,2318,2333,2335,2343,2378,2379,5588,5599,5976,5977,9849,9851,10038,14798,14802,14881,14995,15014,15869,15939,16270,16286,16419,16423],"fullWord":1291},{"subwords":[227,817,867,1196,1288,1290,1292,1366,1377,1395,1399,1502,1521,1525,1535,1749,2308,2317,2333,2336,2364,2378,2721,2730,5588,5976,9849,9865,14798,14939,14995,15864,15866,21047,21071,21097,21099,21128],"fullWord":1292},{"subwords":[287,369,1256,1294,1332,1345,1353,1797,1837,7242,7283,7604,9276,9913,9922,12219,12230,12406],"fullWord":1294},{"subwords":[51,385,386,1210,1213,1216,1295,1510,1895,1969,2029,2042,2100,10061,10748],"fullWord":1295},{"subwords":[30,43,148,155,385,399,1243,1246,1296,1297,1301,1302,1515,1560,1636,1900,1901,1938,4427,4438,4466,4587,4590,4601,4618,4728,5659,5756,10061,10090,10093,10094,10324,10327,10378],"fullWord":1297},{"subwords":[30,43,44,385,396,399,817,1243,1246,1296,1298,1301,1302,1304,1366,1372,1377,1378,1515,1535,1536,1560,1636,1900,1915,1916,1933,1938,2308,2315,2317,2376,2384,4427,4466,4516,4587,4601,4607,4618,4619,4728,4810,5303,5588,5592,5756,5976,10061,10090,10093,10097,10202,10324,10327,10355,10378,14736,14961,14968,14995,15060],"fullWord":1298},{"subwords":[49,385,442,464,1243,1251,1296,1299,1315,1323,1502,4427,4471,4578,4587,10061,10090,10108,10304],"fullWord":1299},{"subwords":[43,385,399,401,612,1301,1303,1332,1342,1530,1576,1582,1636,1671,1679,5691,5745,5848,10061,10174,10324,10344,10383,12219,12229,12331,12339],"fullWord":1303},{"subwords":[43,44,45,67,385,392,399,407,817,825,905,906,1301,1304,1305,1306,1366,1377,1381,1419,1422,1425,1428,1535,1539,1636,1915,1917,1918,1933,1934,2308,2317,2318,2343,5588,5592,5593,5599,5976,5977,10061,10071,10207,10228,10323,10324,10355,10360,14805,14881,14968,14973,14995,15014,15869,15872,15942,15948,16270,16274,16286,16419,16420,16423,16999],"fullWord":1305},{"subwords":[287,337,385,416,426,1256,1272,1307,1308,1332,1345,1797,1837,1838,1905,7242,7283,7293,7585,7604,7682,10061,10109,10120,10504,10637,12219,12230,12238,12406,12438],"fullWord":1308},{"subwords":[375,385,386,596,598,1210,1213,1309,1310,1332,1333,1353,1913,10061,10177,12219],"fullWord":1310},{"subwords":[30,43,385,399,1243,1246,1288,1289,1296,1301,1302,1309,1311,1515,1521,1560,1636,1900,1931,1938,4427,4466,4587,4601,4618,4728,5756,5778,9760,10061,10090,10093,10128,10129,10324,10327,10338,10378,10416],"fullWord":1311},{"subwords":[43,44,385,399,817,867,1288,1290,1301,1304,1309,1312,1366,1377,1395,1521,1535,1636,1915,1931,1933,2308,2317,2333,2378,5588,5592,5778,5976,9760,9849,10061,10128,10130,10214,10324,10338,10355,10416,14798,14968,14995],"fullWord":1312},{"subwords":[385,386,442,1210,1213,1243,1296,1315,1316,4427,4587,10061,10090],"fullWord":1316},{"subwords":[30,43,385,399,442,1243,1246,1296,1301,1302,1315,1317,1515,1560,1636,1648,1900,1938,4427,4466,4587,4601,4618,4728,4744,5756,5780,10061,10062,10090,10093,10102,10324,10327,10343,10378],"fullWord":1317},{"subwords":[43,44,385,399,442,449,817,1301,1304,1315,1318,1366,1377,1535,1636,1648,1915,1933,2308,2317,5588,5592,5780,5976,10061,10062,10324,10343,10355,14968,14995],"fullWord":1318},{"subwords":[31,43,72,385,399,442,488,1009,1301,1315,1319,1462,1464,1542,1636,1648,1661,1721,1722,1922,1936,5620,5780,6055,10061,10062,10247,10324,10343,10460,18302,18309,18370,18381,18541,18547,18591],"fullWord":1319},{"subwords":[51,72,385,442,455,488,495,1018,1315,1320,1321,1462,1922,1967,1989,2029,2037,2100,2110,2115,2237,10061,10748,10897,12686,12856,18302,18381,18432,19019],"fullWord":1321},{"subwords":[67,382,385,386,392,466,470,504,1210,1213,1214,1215,1324,1325,1327,1328,1422,1423,10061,10071,10136,10137,10138,10139,10144,10161,10323,11173,11174,11330,15942,15973,15974,16999,17012],"fullWord":1328},{"subwords":[67,382,385,386,392,973,1210,1213,1214,1215,1327,1329,1422,1423,1448,10061,10071,10236,10323,15942,15959,16999,17000],"fullWord":1329},{"subwords":[27,72,126,337,385,434,488,1272,1282,1307,1330,1462,1881,1922,2738,2813,3052,3402,3429,9437,10061,10072,10126,10504,10691,18302,18347,18349,18365,18823,18863],"fullWord":1330},{"subwords":[51,1227,1331,2029,2042,2120,2160,2161,2173,11265,11817,11921],"fullWord":1331},{"subwords":[596,657,658,1210,1332,1334,12219,12252],"fullWord":1334},{"subwords":[30,148,605,1243,1246,1332,1336,1337,1342,1343,1515,1530,1560,1671,1673,4427,4438,4492,4500,4590,4605,4618,4774,5659,5865,12219,12229,12331],"fullWord":1337},{"subwords":[30,50,605,608,817,1243,1246,1332,1336,1338,1342,1343,1366,1372,1377,1378,1406,1515,1530,1535,1536,1560,1671,1673,2308,2315,2317,2337,2339,2376,2384,4427,4492,4500,4516,4532,4605,4607,4618,4619,4774,4810,5303,5588,5595,5865,5976,12219,12229,12274,12319,12331,12358,14736,14821,14826,14961,14995,15060,15227],"fullWord":1338},{"subwords":[72,169,326,605,693,700,1243,1282,1332,1336,1339,1462,1777,1837,1840,1881,4427,4492,4985,5008,9325,12219,12406,12463,18302,18339,18347,18408,18894],"fullWord":1339},{"subwords":[30,269,270,605,1243,1246,1247,1256,1332,1336,1342,1343,1345,1346,1515,1530,1560,1604,1605,1671,1673,4427,4492,4500,4502,4605,4618,4774,5707,5865,7242,7253,7493,12219,12229,12230,12331],"fullWord":1346},{"subwords":[50,269,622,817,1256,1332,1342,1345,1347,1366,1377,1386,1406,1530,1535,1604,1605,1671,1696,2308,2317,2319,2337,5588,5595,5894,5976,5988,7242,7375,7377,7461,7493,7900,7902,12219,12229,12230,12319,12331,14758,14762,14821,14832,14833,14995,15141],"fullWord":1347},{"subwords":[43,269,385,399,620,625,1256,1257,1301,1332,1342,1345,1348,1530,1604,1605,1636,1671,1680,5745,7242,7248,7293,7298,7477,7493,7494,7674,7676,7680,10061,10109,10174,10324,10344,10398,12219,12229,12230,12331],"fullWord":1348},{"subwords":[67,325,647,691,932,1269,1332,1350,1359,1422,1431,1440,1763,1837,1850,8362,8678,8679,9307,12219,12223,12406,12409,15926,15986,16629,16765,16858,16874],"fullWord":1350},{"subwords":[51,67,1332,1351,1352,1359,1422,2029,2034,2127,2128,2153,9457,9462,9513,9603,9606,12219,12223,12481,12489,12560,15986,17259,17308,17383],"fullWord":1352},{"subwords":[30,605,1243,1246,1288,1289,1332,1336,1342,1343,1353,1354,1515,1521,1530,1560,1671,1673,4427,4492,4500,4509,4605,4618,4774,5865,9836,9968,12219,12229,12243,12331],"fullWord":1354},{"subwords":[50,817,867,1288,1290,1332,1342,1353,1355,1366,1377,1395,1406,1521,1530,1535,1671,2308,2317,2333,2337,2378,5588,5595,5976,9785,9836,9849,9855,12219,12229,12277,12319,12331,14798,14821,14840,14995],"fullWord":1355},{"subwords":[30,605,657,663,1243,1246,1332,1336,1342,1343,1357,1515,1530,1560,1671,1673,4427,4492,4500,4605,4618,4774,5865,12219,12229,12252,12331],"fullWord":1357},{"subwords":[50,657,663,817,1332,1342,1358,1366,1377,1406,1530,1535,1671,2308,2317,2337,5588,5595,5976,12219,12229,12252,12319,12331,14821,14995],"fullWord":1358},{"subwords":[72,504,596,693,1014,1015,1210,1332,1360,1462,1478,11213,11250,11361,12219,12244,18302,18389,18408],"fullWord":1360},{"subwords":[31,50,72,693,694,709,817,911,1009,1332,1342,1361,1366,1377,1406,1462,1464,1530,1535,1542,1671,1685,1721,1722,2308,2317,2337,2349,2390,5588,5595,5620,5976,5982,6055,6074,12219,12229,12319,12325,12331,12374,14821,14847,14898,14901,14995,15241,15312,15748,18302,18408,18449,18453,18460,18541,18554,18607,18649],"fullWord":1361},{"subwords":[67,72,77,78,693,711,712,1074,1076,1332,1359,1362,1363,1422,1456,1462,1482,2577,2600,2602,2605,2668,2690,2697,2700,12219,12223,12300,12614,12622,12659,12663,15986,16041,17288,17723,17994,18005,18035,18117,18302,18318,18319,18408,18428,18508,18540,19387,19390,19391,19393,19403,19434,19435,19436,19452,19871],"fullWord":1363},{"subwords":[596,657,658,716,1210,1332,1364,1502,12219,12252,12311],"fullWord":1364},{"subwords":[596,1210,1332,1365,1837,12219,12313,12406],"fullWord":1365},{"subwords":[17,25,30,817,1219,1243,1246,1366,1367,1368,1372,1377,1378,1515,1535,1536,1560,2308,2315,2317,2376,2384,4427,4516,4607,4618,4619,4810,5303,5588,5632,5976,14736,14961,14995,15060],"fullWord":1368},{"subwords":[17,25,43,44,385,399,817,1219,1220,1301,1304,1366,1367,1369,1377,1510,1535,1636,1895,1915,1933,2308,2317,5588,5592,5632,5976,10061,10324,10355,14713,14968,14995],"fullWord":1369},{"subwords":[17,25,817,1219,1366,1367,1370,1377,1380,1413,1535,2308,2317,5588,5632,5976,6008,14872,14983,14995],"fullWord":1370},{"subwords":[30,148,151,817,1243,1246,1366,1372,1373,1377,1378,1515,1535,1536,1560,2308,2315,2317,2376,2384,4427,4438,4516,4517,4590,4607,4618,4619,4810,5303,5340,5588,5659,5976,14736,14961,14962,14995,15060],"fullWord":1373},{"subwords":[30,67,200,817,825,905,906,1243,1246,1254,1366,1372,1374,1376,1377,1378,1381,1419,1422,1425,1426,1428,1515,1518,1535,1536,1537,1539,1560,1574,2308,2315,2316,2317,2318,2343,2376,2377,2384,4427,4430,4516,4520,4607,4611,4618,4619,4621,4629,4810,4826,5303,5305,5588,5599,5976,5977,14736,14751,14881,14882,14961,14965,14995,15014,15060,15087,15869,15878,15893,16270,16286,16419,16423],"fullWord":1374},{"subwords":[27,106,124,326,349,796,854,1243,1366,1372,1375,1391,1777,1867,2308,2315,2324,2738,2766,2941,2949,3402,4052,4151,4427,5303,5362,9376,14714,14715,14736,14776,15402,15428],"fullWord":1375},{"subwords":[43,44,49,227,385,399,817,1196,1301,1304,1366,1377,1379,1400,1502,1535,1636,1637,1706,1749,1915,1933,1935,2308,2317,2364,2721,2730,5588,5592,5594,5976,10061,10304,10306,10324,10355,10359,10495,11065,11074,14939,14968,14995,15183,15201,15864,15866,21050,21071,21097,21099,21128],"fullWord":1379},{"subwords":[31,32,67,72,817,825,905,906,911,918,993,1009,1366,1377,1381,1382,1419,1422,1425,1428,1456,1457,1459,1462,1464,1467,1482,1535,1539,1540,1542,1545,1716,1721,1722,1724,1736,2308,2317,2318,2343,2349,2350,2382,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14995,15014,15306,15312,15748,15869,16041,16043,16270,16286,16293,16419,16423,16457,17723,17773,17775,18302,18306,18318,18449,18453,18455,18472,18540,18541,18554,18557,18559,19381],"fullWord":1382},{"subwords":[30,232,817,828,1243,1246,1366,1372,1377,1378,1383,1384,1515,1535,1536,1560,2308,2315,2317,2376,2384,4427,4516,4595,4607,4618,4619,4810,5303,5588,5976,6230,6231,6232,6308,6317,6318,6392,6406,7056,14736,14961,14995,15060,15114],"fullWord":1384},{"subwords":[49,232,385,828,1366,1383,1385,1502,2308,2364,6308,6386,6677,6730,6854,7050,7140,10061,10304,14939,15864],"fullWord":1385},{"subwords":[30,269,270,817,1243,1246,1247,1249,1256,1366,1372,1377,1378,1386,1387,1515,1535,1536,1560,1604,1696,2308,2315,2317,2319,2376,2384,4427,4516,4607,4618,4619,4810,5303,5310,5351,5588,5666,5707,5976,5988,7242,7253,7375,7377,7378,7383,7461,7900,7907,7908,14736,14758,14762,14763,14961,14995,15060,15141],"fullWord":1387},{"subwords":[269,311,817,1256,1366,1377,1386,1388,1535,1576,1587,1604,1696,2308,2317,2319,5583,5588,5976,5984,5988,7242,7375,7377,7461,7467,7900,7975,14758,14762,14995,15141],"fullWord":1388},{"subwords":[67,269,279,280,817,825,905,906,1256,1266,1366,1377,1381,1386,1389,1419,1422,1425,1428,1535,1539,1604,1617,1696,1697,2308,2317,2318,2319,2321,2343,5588,5599,5976,5977,5988,5992,7242,7252,7375,7377,7381,7391,7396,7461,7463,7900,7903,7939,14758,14762,14764,14773,14881,14995,15014,15141,15869,15910,15912,15914,16026,16270,16286,16419,16423],"fullWord":1389},{"subwords":[33,51,1269,1366,1390,2029,2030,2197,2308,2446,8321,8351,8696,8705,8845,8857,8858,12680,12959,13286,14350,14775,14851,15386,15576],"fullWord":1390},{"subwords":[287,349,1256,1280,1332,1345,1366,1392,1406,1797,1837,2308,2319,2328,2337,2400,2424,2429,2434,7242,7283,7375,7377,7604,7900,7918,8015,9376,9378,12219,12230,12406,14758,14784,14821,14832,14838,15402,15461,15494],"fullWord":1392},{"subwords":[31,72,349,817,911,1009,1282,1284,1366,1377,1393,1462,1464,1535,1542,1721,1722,1790,1881,1884,1885,2308,2317,2349,2417,2444,5588,5620,5976,5982,6055,9376,9382,9384,14898,14901,14995,14996,15312,15402,15542,15748,18302,18347,18449,18453,18541,18554,18817,18844,18847,18941,19265],"fullWord":1393},{"subwords":[341,349,586,869,920,1366,1394,2308,2428,2567,2610,2637,9064,9077,9376,11276,14808,15402,15480,15749,15806,15807,19617,19840],"fullWord":1394},{"subwords":[30,817,867,1243,1246,1288,1289,1290,1366,1372,1377,1378,1395,1396,1515,1521,1535,1536,1560,2308,2315,2317,2333,2334,2376,2378,2384,4427,4516,4522,4607,4618,4619,4620,4810,5303,5316,5355,5588,5976,9849,14736,14798,14799,14961,14995,15060],"fullWord":1396},{"subwords":[817,867,1288,1290,1366,1377,1380,1395,1397,1413,1521,1535,2308,2317,2333,2378,5588,5976,6008,9849,14798,14800,14872,14983,14995],"fullWord":1397},{"subwords":[43,44,49,227,385,399,817,1196,1301,1304,1366,1377,1379,1400,1502,1535,1636,1637,1706,1749,1915,1933,1935,2308,2317,2364,2721,2730,5588,5592,5594,5976,10061,10304,10306,10324,10355,10359,10495,11065,11074,14939,14968,14995,15183,15201,15864,15866,21050,21071,21097,21099,21128],"fullWord":1400},{"subwords":[51,385,1155,1164,1366,1401,1498,1996,2029,2030,2100,2271,2280,2308,2358,2359,2446,2480,10061,10068,10292,10748,10749,10942,12680,12948,12959,13114,14933,15576,15734,20410],"fullWord":1401},{"subwords":[504,596,787,869,1210,1332,1366,1402,1406,2308,2337,11213,11276,12219,12244,14808,14821],"fullWord":1402},{"subwords":[50,513,528,817,869,1332,1342,1366,1377,1403,1406,1526,1530,1535,1665,1671,1700,2308,2317,2337,2380,5588,5595,5803,5976,11213,11218,11276,11286,11437,11446,11512,11539,12219,12229,12244,12245,12248,12319,12331,14808,14821,14975,14995,15202,15207],"fullWord":1403},{"subwords":[341,343,349,513,553,817,869,1366,1377,1404,1526,1535,1665,1700,1790,2308,2317,2380,2417,2428,5588,5803,5830,5976,9064,9077,9376,9384,11276,11286,11292,11437,11539,11743,14808,14810,14975,14995,15202,15402,15480,15481],"fullWord":1404},{"subwords":[51,67,905,909,1332,1359,1366,1406,1407,1409,1410,1419,1422,2029,2030,2033,2034,2127,2128,2153,2211,2308,2337,2342,2343,2446,2476,12219,12223,12481,12489,12548,12560,12680,12683,12959,12964,13007,14821,15568,15569,15576,15590,15673,15986,17259,17303,17308,17383,17384],"fullWord":1410},{"subwords":[51,716,1332,1366,1406,1408,1409,1411,1421,1502,2029,2030,2127,2128,2156,2211,2300,2308,2337,2364,2446,2503,2733,12219,12282,12311,12481,12548,12680,12959,14821,14939,14942,15568,15576,15864,21075,21183],"fullWord":1411},{"subwords":[817,1366,1377,1412,1535,1546,2308,2317,2610,5588,5627,5976,14589,14595,14635,14995,15274,15749,15755,15777,19840,19847],"fullWord":1412},{"subwords":[30,817,1243,1246,1366,1372,1377,1378,1380,1413,1414,1515,1535,1536,1560,2308,2315,2317,2376,2384,4427,4516,4518,4607,4618,4619,4810,5303,5346,5588,5976,6008,14736,14872,14961,14983,14995,15060],"fullWord":1414},{"subwords":[43,44,385,399,817,1301,1304,1366,1377,1380,1413,1415,1535,1636,1915,1933,2308,2317,5588,5592,5976,6008,10061,10324,10355,14872,14968,14983,14995],"fullWord":1415},{"subwords":[50,817,1332,1342,1366,1377,1380,1406,1413,1416,1530,1535,1671,2308,2317,2337,5588,5595,5976,6008,12219,12229,12319,12331,14821,14872,14983,14995,15275],"fullWord":1416},{"subwords":[51,349,793,1366,1417,1851,2029,2030,2308,2401,2439,2446,9376,12680,12700,12959,15402,15570,15576],"fullWord":1417},{"subwords":[51,793,902,1366,1418,2029,2030,2271,2308,2358,2446,2480,12680,12959,14933,15570,15576,15734,20410],"fullWord":1418},{"subwords":[31,72,817,911,1009,1366,1377,1380,1413,1420,1462,1464,1535,1542,1721,1722,2308,2317,2349,5588,5620,5976,5982,6008,6055,14872,14898,14901,14903,14983,14995,15312,15748,18302,18449,18453,18541,18554,18652,18653],"fullWord":1420},{"subwords":[51,716,1332,1366,1406,1408,1409,1411,1421,1502,2029,2030,2127,2128,2156,2211,2300,2308,2337,2364,2446,2503,2733,12219,12282,12311,12481,12548,12680,12959,14821,14939,14942,15568,15576,15864,21075,21183],"fullWord":1421},{"subwords":[67,72,382,385,386,392,488,1013,1210,1213,1214,1215,1327,1422,1423,1424,1456,1462,1482,1919,1922,1923,10061,10071,10241,10323,15942,15960,16041,16999,17022,17723,18302,18307,18308,18318,18540],"fullWord":1424},{"subwords":[43,45,49,67,79,385,392,399,407,1196,1197,1301,1306,1422,1425,1427,1502,1507,1636,1637,1638,1749,1751,1918,2721,2722,5619,10061,10071,10304,10313,10323,10324,10360,10495,10496,11065,11066,15872,15942,15948,16103,16270,16274,16999,17039,17149,21050,21097,21105,21130],"fullWord":1427},{"subwords":[31,32,67,72,973,982,990,1009,1422,1425,1429,1430,1448,1450,1456,1457,1460,1461,1462,1464,1467,1482,1540,1541,1542,1545,1715,1716,1720,1721,1722,1724,1736,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17723,17726,18302,18318,18487,18540,18541,18559],"fullWord":1430},{"subwords":[30,67,200,325,932,934,1243,1246,1254,1269,1422,1425,1426,1431,1432,1515,1518,1560,1574,4427,4430,4543,4614,4618,4629,4826,8217,8219,8362,8440,8443,15893,16270,16503,16504,16574,16581],"fullWord":1432},{"subwords":[67,325,817,825,905,906,932,1269,1366,1377,1381,1419,1422,1425,1428,1431,1433,1535,1539,2308,2317,2318,2343,2344,5588,5599,5976,5977,8333,8338,8362,8453,8456,8552,8554,8556,8584,8934,14775,14881,14886,14995,15014,15376,15377,15869,16270,16286,16419,16423,16549,16574,16577],"fullWord":1433},{"subwords":[67,325,932,936,973,1269,1422,1425,1429,1431,1434,1448,1715,6039,8362,16033,16270,16291,16574,16609],"fullWord":1434},{"subwords":[27,67,973,1422,1435,1436,1443,1448,1451,1763,2738,2757,3402,15880,15892,16111,16113,16178,16765,16766,16769,16779,16903],"fullWord":1436},{"subwords":[67,232,1422,1437,1502,1507,1763,6386,6388,6390,6520,6528,9135,16103,16765],"fullWord":1437},{"subwords":[67,337,340,385,392,973,1272,1279,1307,1422,1438,1439,1443,1448,1451,1763,1964,10061,10071,10236,10323,10504,10516,15931,15935,15942,16765,16766,16903,16904,16999,17000],"fullWord":1439},{"subwords":[67,287,647,691,1256,1266,1332,1345,1349,1359,1422,1440,1441,1763,1797,1837,1850,7242,7252,7283,7287,7396,7573,7604,7611,9307,12219,12223,12230,12233,12406,12409,15910,15986,16001,16765,16815,16858,16866,17211],"fullWord":1441},{"subwords":[67,647,691,973,987,1332,1359,1422,1440,1442,1443,1448,1451,1763,1837,1850,9307,12219,12223,12406,12409,15986,16009,16765,16766,16858,16881,16903],"fullWord":1442},{"subwords":[30,67,200,950,952,1243,1246,1254,1288,1289,1293,1422,1425,1426,1444,1445,1515,1518,1521,1524,1560,1574,1894,4427,4430,4618,4629,4826,4835,15893,15939,16270],"fullWord":1445},{"subwords":[31,32,67,72,950,1009,1288,1293,1422,1425,1444,1446,1456,1457,1462,1464,1467,1482,1521,1524,1540,1542,1545,1716,1721,1722,1724,1736,1894,5616,5620,5626,6055,9804,15939,16041,16043,16270,16293,16457,16940,17723,17746,17809,18302,18318,18358,18362,18484,18540,18541,18545,18546,18559],"fullWord":1446},{"subwords":[67,73,1422,1425,1447,1546,1547,2668,5627,14589,14595,14635,14650,16270,16416,17699,18035,18066,19871,19876],"fullWord":1447},{"subwords":[67,973,980,1422,1425,1429,1448,1449,1715,6039,16037,16270,16291],"fullWord":1449},{"subwords":[31,32,67,72,973,982,990,1009,1422,1425,1429,1430,1448,1450,1456,1457,1460,1461,1462,1464,1467,1482,1540,1541,1542,1545,1715,1716,1720,1721,1722,1724,1736,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17723,17726,18302,18318,18487,18540,18541,18559],"fullWord":1450},{"subwords":[49,67,82,385,392,973,1422,1448,1452,1455,1502,1507,10061,10071,10236,10304,10313,10323,15942,16103,16109,16999,17000,17039,17041,17149],"fullWord":1452},{"subwords":[51,67,973,1422,1448,1453,1454,2029,2034,2230,2231,16037,17308,17315,17434],"fullWord":1454},{"subwords":[30,31,32,67,72,200,1009,1243,1246,1254,1422,1425,1426,1456,1457,1458,1462,1464,1466,1467,1482,1515,1518,1540,1542,1545,1560,1574,1716,1721,1722,1724,1736,4427,4430,4551,4555,4618,4629,4630,4633,4826,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16457,17723,17806,18302,18318,18339,18340,18540,18541,18559,18575],"fullWord":1458},{"subwords":[31,32,67,72,817,825,905,906,911,918,993,1009,1366,1377,1381,1382,1419,1422,1425,1428,1456,1457,1459,1462,1464,1467,1482,1535,1539,1540,1542,1545,1716,1721,1722,1724,1736,2308,2317,2318,2343,2349,2350,2382,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14995,15014,15306,15312,15748,15869,16041,16043,16270,16286,16293,16419,16423,16457,17723,17773,17775,18302,18306,18318,18449,18453,18455,18472,18540,18541,18554,18557,18559,19381],"fullWord":1459},{"subwords":[31,32,67,72,973,982,990,1009,1422,1425,1429,1430,1448,1450,1456,1457,1460,1461,1462,1464,1467,1482,1540,1541,1542,1545,1715,1716,1720,1721,1722,1724,1736,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17723,17726,18302,18318,18487,18540,18541,18559],"fullWord":1460},{"subwords":[22,51,72,1234,1462,1463,1502,2029,2037,2042,2237,2300,12686,18302,18305,18432,19186],"fullWord":1463},{"subwords":[10,31,72,77,1009,1210,1462,1464,1465,1542,1546,1548,1721,1722,2697,5620,5627,6055,18302,18319,18508,18541,19390,19391,19397],"fullWord":1465},{"subwords":[30,31,72,1009,1243,1246,1269,1270,1462,1464,1466,1468,1469,1470,1515,1542,1560,1721,1722,4427,4551,4615,4618,4630,5620,6055,8217,8378,8381,8382,8440,8461,18302,18339,18541,18697],"fullWord":1470},{"subwords":[31,72,817,911,1009,1269,1270,1366,1377,1462,1464,1468,1469,1471,1535,1542,1703,1704,1721,1722,2308,2317,2349,2383,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8453,8458,8461,8552,8554,14775,14898,14901,14995,15312,15376,15748,18302,18449,18453,18541,18554,18697],"fullWord":1471},{"subwords":[31,32,67,72,325,932,1009,1269,1270,1271,1422,1425,1431,1456,1457,1462,1464,1467,1468,1469,1472,1474,1482,1540,1542,1545,1716,1721,1722,1724,1730,1736,5616,5620,5626,6055,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,16041,16043,16270,16293,16457,16559,16574,17723,18302,18318,18540,18541,18559,18697],"fullWord":1472},{"subwords":[51,67,72,325,932,1269,1270,1271,1422,1431,1456,1462,1468,1473,1474,1482,2029,2034,2035,2037,2041,2223,2237,2242,8362,8371,8378,8391,8705,8713,8887,8892,8901,8935,12686,12690,12691,12692,12810,15874,16041,16559,16670,16704,17308,17435,17723,17885,18302,18318,18432,18435,18540,18743,19123],"fullWord":1473},{"subwords":[67,72,950,1282,1285,1422,1444,1456,1462,1475,1476,1482,1763,1881,1889,1894,9447,9945,9946,9955,16041,16765,16907,16954,16986,17723,18302,18318,18347,18484,18540,18947],"fullWord":1476},{"subwords":[72,287,693,700,1256,1282,1332,1345,1462,1477,1797,1837,1881,7242,7283,7289,7416,7561,7604,7637,7745,9325,12219,12230,12406,12463,18302,18342,18347,18408,18410,18894,18901],"fullWord":1477},{"subwords":[72,504,596,693,1014,1015,1210,1332,1360,1462,1478,11213,11250,11361,12219,12244,18302,18389,18408],"fullWord":1478},{"subwords":[31,72,528,532,693,694,1009,1332,1342,1462,1464,1479,1526,1530,1542,1665,1671,1685,1721,1722,5620,6055,6074,11213,11218,11361,11362,11437,11446,11451,11456,11512,11574,11575,12219,12229,12244,12245,12325,12331,12374,18302,18389,18393,18408,18541,18549,18595,18607],"fullWord":1479},{"subwords":[51,67,72,693,711,1332,1359,1422,1456,1462,1480,1481,1482,2029,2034,2035,2037,2041,2127,2128,2153,2237,12219,12223,12293,12481,12489,12560,12574,12575,12591,12686,12692,15874,15986,16041,17259,17278,17308,17383,17435,17723,17885,18302,18318,18408,18428,18432,18435,18540,19036,19057],"fullWord":1481},{"subwords":[30,31,72,1009,1243,1246,1462,1464,1466,1483,1515,1542,1560,1721,1722,1737,4427,4551,4618,4630,5620,6055,18302,18339,18495,18498,18541,18565],"fullWord":1483},{"subwords":[31,72,693,694,1009,1044,1332,1342,1462,1464,1484,1530,1542,1671,1685,1721,1722,1737,5620,6055,6074,12219,12229,12325,12331,12374,18302,18408,18495,18498,18541,18565,18607,18630,18969],"fullWord":1484},{"subwords":[31,72,817,911,1009,1366,1377,1462,1464,1485,1535,1542,1721,1722,1737,2308,2317,2349,5588,5620,5976,5982,6055,14898,14901,14995,15312,15748,18302,18449,18453,18476,18495,18498,18499,18541,18554,18565,18672,19235],"fullWord":1485},{"subwords":[31,43,72,385,399,488,1009,1301,1462,1464,1486,1542,1636,1661,1721,1722,1737,1922,1936,5620,6055,10061,10247,10324,10460,18302,18309,18312,18370,18495,18498,18541,18547,18565],"fullWord":1486},{"subwords":[17,43,385,399,1219,1220,1230,1231,1301,1489,1510,1546,1636,1895,2004,2505,2550,5627,5632,10061,10324,10470,10961],"fullWord":1489},{"subwords":[67,385,392,950,1070,1071,1309,1313,1422,1444,1492,1493,1894,2559,2561,2668,10061,10071,10323,15942,16999,18035,18094,19871],"fullWord":1493},{"subwords":[49,385,1070,1309,1314,1492,1494,1502,2559,2562,2710,10061,10135,10304,21047,21218],"fullWord":1494},{"subwords":[1166,1243,1366,1372,1495,1496,1497,1502,2308,2315,2358,2364,4427,4574,4578,5303,5330,5337,5430,14736,14933,14939,15864,20303,20410,20412,20448,20493,21010,21068,21079],"fullWord":1496},{"subwords":[30,43,385,399,1145,1147,1155,1243,1246,1296,1301,1302,1495,1498,1499,1515,1560,1636,1900,1938,1949,4427,4466,4574,4587,4601,4618,4728,4865,5756,10061,10090,10093,10292,10293,10324,10327,10378,10490,20303,20309,20369,20370,20501,20502,20519,20524,20566],"fullWord":1499},{"subwords":[43,44,385,399,817,1145,1155,1301,1304,1366,1377,1498,1500,1535,1636,1915,1933,1949,2308,2317,2358,2359,2396,5588,5592,5976,10061,10292,10324,10355,14933,14968,14995,20369,20371,20410,20411,20417,20501,20510,20519],"fullWord":1500},{"subwords":[287,716,1256,1332,1345,1502,1504,1797,1837,7242,7283,7447,7604,12219,12230,12311,12406,21058,21144],"fullWord":1504},{"subwords":[51,67,1422,1502,1505,1506,1507,2029,2034,2267,2300,2304,2607,2609,2668,2696,2710,2714,16103,17308,17472,17473,18035,19871,21193],"fullWord":1506},{"subwords":[67,787,791,905,1210,1215,1366,1419,1422,1508,1509,2308,2343,15876],"fullWord":1509},{"subwords":[27,93,98,105,1196,1235,1269,1502,1512,1513,1749,2721,2738,3100,5582,8420,8607,21097,21098],"fullWord":1513},{"subwords":[27,51,93,114,215,1241,1332,1335,1342,1514,1530,1533,1671,2029,2049,2127,2128,2134,2738,2869,2883,2900,3617,3777,3786,5637,5653,5856,5953,12219,12229,12331,12481,12721,12874,12876],"fullWord":1514},{"subwords":[30,148,1243,1246,1515,1516,1560,1576,4427,4438,4590,4618,4667,5659],"fullWord":1516},{"subwords":[30,43,385,399,401,1243,1246,1296,1301,1302,1515,1517,1560,1576,1636,1900,1938,1939,4427,4466,4587,4601,4618,4728,4731,5691,5756,10061,10090,10093,10324,10327,10378,10383],"fullWord":1517},{"subwords":[43,269,294,385,399,401,1256,1257,1301,1520,1576,1604,1636,5585,5691,7242,7248,7293,7298,7467,7477,7676,7677,7678,10061,10109,10324,10383,10398],"fullWord":1520},{"subwords":[30,1243,1246,1288,1289,1515,1521,1522,1560,1576,4427,4618,5740,5741],"fullWord":1522},{"subwords":[817,867,1288,1290,1366,1377,1395,1521,1523,1535,1576,1587,2308,2317,2333,2378,5588,5740,5976,5984,9849,14798,14995,15103],"fullWord":1523},{"subwords":[30,1243,1246,1515,1526,1527,1560,1576,1665,4427,4472,4475,4618,4671,5658,5663,5808,11107,11115,11437,11438,11478],"fullWord":1527},{"subwords":[30,605,1243,1246,1332,1336,1342,1343,1515,1530,1531,1560,1576,1582,1671,1673,1679,4427,4492,4500,4605,4618,4774,5665,5865,12219,12229,12331,12339,12340],"fullWord":1531},{"subwords":[1332,1342,1530,1532,1576,1582,1671,1679,1837,12219,12229,12331,12339,12406],"fullWord":1532},{"subwords":[30,67,200,817,825,905,906,1243,1246,1254,1366,1372,1374,1376,1377,1378,1381,1419,1422,1425,1426,1428,1515,1518,1535,1536,1537,1539,1560,1574,2308,2315,2316,2317,2318,2343,2376,2377,2384,4427,4430,4516,4520,4607,4611,4618,4619,4621,4629,4810,4826,5303,5305,5588,5599,5976,5977,14736,14751,14881,14882,14961,14965,14995,15014,15060,15087,15869,15878,15893,16270,16286,16419,16423],"fullWord":1537},{"subwords":[817,1366,1377,1380,1413,1535,1538,1576,1587,2308,2317,5588,5976,5984,6008,14872,14983,14995],"fullWord":1538},{"subwords":[31,32,67,72,973,982,990,1009,1422,1425,1429,1430,1448,1450,1456,1457,1460,1461,1462,1464,1467,1482,1540,1541,1542,1545,1715,1716,1720,1721,1722,1724,1736,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17723,17726,18302,18318,18487,18540,18541,18559],"fullWord":1541},{"subwords":[31,72,693,694,1009,1332,1342,1462,1464,1530,1542,1543,1576,1582,1591,1671,1679,1685,1721,1722,1725,5620,5621,5853,6055,6074,12219,12229,12325,12331,12339,12374,18302,18408,18541,18576,18583,18607],"fullWord":1543},{"subwords":[31,72,817,826,911,1009,1366,1377,1462,1464,1535,1542,1544,1576,1587,1591,1691,1694,1721,1722,1725,2308,2317,2349,5588,5620,5622,5976,5982,5984,6055,14898,14901,14995,14997,15312,15748,18302,18449,18453,18541,18554,18576,19240],"fullWord":1544},{"subwords":[31,32,67,72,73,77,78,1009,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1546,1547,1548,1549,1716,1721,1722,1724,1736,2668,2690,2697,2700,5616,5620,5626,5627,6055,16041,16043,16070,16270,16293,16457,17723,17994,18035,18066,18074,18302,18318,18319,18508,18540,18541,18559,19387,19390,19391,19393,19397,19401,19403,19871,19876],"fullWord":1549},{"subwords":[31,72,77,1009,1196,1462,1464,1502,1542,1546,1548,1550,1721,1722,1749,2697,2710,2721,2734,5620,5627,6055,18302,18319,18508,18541,19390,19391,19397,21097,21135],"fullWord":1550},{"subwords":[817,1106,1109,1366,1377,1535,1551,1576,1587,2308,2317,2352,2392,5588,5629,5976,5984,6092,6100,14921,14990,14995,15337,19992,19996,20053],"fullWord":1551},{"subwords":[1552,1553,2042,2048,2197,2200,2307,5632,5635,6033,12916,12925,12936,13607,14166,17308,17406],"fullWord":1553},{"subwords":[27,43,93,112,385,399,516,1301,1324,1526,1554,1636,1665,1907,2738,2749,2813,2835,2848,2853,2854,3453,5782,10061,10072,10073,10136,10139,10145,10324,11086,11089,11101,11173,11180,11437,11442,11491],"fullWord":1554},{"subwords":[27,93,112,1526,1555,1576,1665,2738,2848,2853,11086,11089,11437],"fullWord":1555},{"subwords":[1556,1557,1560,1565,1576,3113,4618,4639,4651,5740,5741],"fullWord":1557},{"subwords":[1556,1558,1671,2056,2127,2134,3617,3697,3777,3786,3804,5637,5653,5856,5953,9836,9841,9988,12331,12335,12481,12490,12874,12876],"fullWord":1558},{"subwords":[1559,1576,3617,3732,3735,3737,3744,11817],"fullWord":1559},{"subwords":[30,176,528,529,605,1243,1246,1253,1332,1336,1342,1343,1515,1526,1530,1560,1561,1665,1671,1673,4427,4472,4475,4479,4492,4500,4605,4618,4774,5658,5865,11107,11115,11213,11218,11219,11437,11438,11446,11512,11516,12219,12229,12244,12245,12246,12331],"fullWord":1561},{"subwords":[17,30,1053,1219,1230,1243,1246,1490,1515,1546,1560,1562,2505,2517,4427,4562,4618,5445,5471,5627,5632],"fullWord":1562},{"subwords":[1560,1563,1604,2505,2517,2521,2537,4618,4634,5445,5471,5485,5632],"fullWord":1563},{"subwords":[1560,1564,1576,1587,2384,2385,2387,4618,4667,4678,4810,5984,14995,15060,15069,15093],"fullWord":1564},{"subwords":[1556,1557,1560,1565,1576,3113,4618,4639,4651,5740,5741],"fullWord":1565},{"subwords":[1560,1566,1567,1574,1576,1590,4618,4629,4680,4826,4865,4873,6118,6121,16319,16320,16475,16477,18225,20519,20523,20524,20531,20532,20533,20536],"fullWord":1567},{"subwords":[1560,1568,1569,1574,1777,1780,1784,1788,4588,4618,4629,4714,4722,4826,4908,4935,4938,4939,4971,4972,4975,4983,5037,5845,9077,9109,9111,9127,9167,9168,9422,11616,11626,11641,11764,16375,16765,16780],"fullWord":1569},{"subwords":[30,43,385,399,516,517,1243,1246,1296,1301,1302,1324,1515,1526,1560,1570,1636,1640,1665,1900,1907,1908,1938,4427,4466,4472,4475,4587,4601,4618,4728,5658,5756,5782,10061,10090,10093,10136,10139,10141,10145,10146,10324,10327,10378,11107,11115,11173,11180,11437,11438,11442,11464,11491,11492],"fullWord":1570},{"subwords":[30,605,732,733,1243,1246,1332,1336,1342,1343,1515,1530,1560,1571,1671,1673,4427,4492,4500,4605,4618,4774,5865,5956,12219,12229,12257,12259,12317,12331,13171,13239,13245,13246,13439,13453,13478,13539,13544],"fullWord":1571},{"subwords":[1560,1572,1777,1779,1780,1781,1782,1790,1867,1868,2384,2413,2417,4618,4714,4810,4928,4935,4936,5023,5362,5364,9384,9385,14995,15005,15060,15074,15402,15428,15433],"fullWord":1572},{"subwords":[1560,1573,1604,1696,2384,2517,2521,2523,2537,2610,2615,4618,4634,4810,5351,5417,5420,5445,5471,5485,5988,8079,14995,15060,15063,15141,15749,15755,15773,15777,15778,15790,19840,19855,19856],"fullWord":1573},{"subwords":[1560,1575,2505,2517,2567,4618,5445,5471,5499,5632,5846,12091],"fullWord":1575},{"subwords":[1576,1577,1578,1749,2721,6189,8483,8607],"fullWord":1578},{"subwords":[1560,1576,1579,1580,4618,6406,6409,6412],"fullWord":1580},{"subwords":[1560,1576,1583,1584,4618,4673,5957,13478,13489,13490],"fullWord":1584},{"subwords":[1576,1583,1585,1587,5957,5984,13489,13506,13577,13583,14262,14995,15248],"fullWord":1585},{"subwords":[1576,1591,1592,1636,1661,1721,1725,1726,5691,10383,10460,18576],"fullWord":1592},{"subwords":[1576,1590,1594,6092,6104,16319,19992,20000],"fullWord":1594},{"subwords":[43,232,385,399,442,1301,1315,1595,1636,1648,5765,5780,6204,6276,6430,6431,6677,6734,10061,10062,10324,10333,10343],"fullWord":1595},{"subwords":[1576,1579,1596,1636,1648,1649,5691,5765,5780,6409,6416,6430,6743,10383],"fullWord":1596},{"subwords":[1597,1598,1716,1721,1736,1881,1884,1887,1889,5705,5706,6390,6425,6520,6528,6543,6647,6651,6654,9135,9447,16457,16765,16801,16907,16911,18540,18844,18850,18947],"fullWord":1598},{"subwords":[1599,1600,1604,1617,2079,2091,5718,5721,5950,6868,6870,6874,6879,6885,6893,7771,7780,7790,17308],"fullWord":1600},{"subwords":[1601,1636,2106,2113,2160,5765,5950,6793,6868,6874,6930,10443,10748,10753,10756,10833,12709,12712,12845,12846],"fullWord":1601},{"subwords":[1576,1579,1587,1602,2072,2205,2446,5950,5984,6409,6868,6874,6940,6955,7057,7103,12959,12979,14995,15098,15114,15576,15579,15610],"fullWord":1602},{"subwords":[1603,1636,2004,2106,2251,5765,5950,6793,6821,6822,6824,6868,6874,6999,7153,10443,10470,10748,10753,10961,12845,19580],"fullWord":1603},{"subwords":[1576,1590,1591,1593,1604,1607,1608,1617,1708,1716,1721,1725,1728,1736,7467,7473,7537,7540,7541,16319,16457,18540,18576,18588],"fullWord":1608},{"subwords":[269,817,1256,1366,1377,1386,1535,1604,1609,1696,2308,2317,2319,5588,5709,5976,5988,7242,7267,7269,7271,7375,7377,7461,7900,14758,14762,14995,15141],"fullWord":1609},{"subwords":[1560,1576,1604,1610,4618,5667,5709,5711,7467,7468],"fullWord":1610},{"subwords":[1604,1611,1612,1617,1633,1634,1671,1684,1789,1797,1837,1844,1845,1846,1850,5716,5918,7493,7511,7567,7571,7573,7604,7611,9307,12331,12332,12406,12409,16765,16815,16858,16860,16866,16867],"fullWord":1612},{"subwords":[1560,1604,1613,1696,1777,1780,1782,1790,1797,1867,2384,2413,2415,2417,2424,4618,4714,4810,4935,4947,5023,5028,5351,5362,5988,7567,7568,7569,7617,7997,9384,9385,14995,15005,15060,15141,15402,15428,15433,15437,15461],"fullWord":1613},{"subwords":[1604,1614,1696,1721,1790,1797,1881,1884,1885,2417,2424,2444,5988,7540,7567,7569,7628,7637,8035,9384,14995,15141,15312,15402,15461,15542,15748,18817,18844,18847,18855,18941,19265,19280],"fullWord":1614},{"subwords":[1576,1582,1604,1615,1671,1679,2079,2127,2134,2140,5637,5718,5953,7467,7493,7496,7771,7815,12331,12339,12481,12509,12789,12876],"fullWord":1615},{"subwords":[1604,1617,1618,1619,2537,2545,2567,2576,2668,5845,5846,5847,7489,7492,7545,7546,8145,8150,11487,12081,12104,12107,12152,17201,18035,18066,18103,19876],"fullWord":1619},{"subwords":[43,232,385,399,1269,1301,1621,1636,1903,5765,6204,6677,6734,8258,8264,8445,10061,10324,10333],"fullWord":1621},{"subwords":[1106,1269,1576,1622,5629,6092,8400,8468,8483,19992],"fullWord":1622},{"subwords":[30,1243,1246,1269,1515,1560,1576,1623,4427,4618,8217,8440,8483,8484],"fullWord":1623},{"subwords":[1560,1576,1624,1636,1938,1939,4587,4618,4728,4731,5691,5756,8483,8484,8488,8509,10378,10383],"fullWord":1624},{"subwords":[1576,1590,1591,1593,1625,1708,1716,1721,1725,1728,1730,1736,8483,8586,8935,16319,16457,16574,16589,18540,18576,18588,18697,18698,18716],"fullWord":1625},{"subwords":[1560,1626,1671,1673,1777,1780,1837,1840,4618,4714,4774,4935,4985,4988,5865,8540,8617,8619,8625,8626,8649,12331,12406],"fullWord":1626},{"subwords":[1560,1627,1636,1938,2058,2059,2102,2106,4587,4618,4728,4881,5114,5146,5756,8509,8705,8721,8725,8726,8749,8754,8755,10378,10443,10748,10753,10754,10780,12752,12802,12837,12845],"fullWord":1627},{"subwords":[1628,2160,5950,6868,6874,8705,8709,8725,8818,12709,12809,12895],"fullWord":1628},{"subwords":[1576,1629,6092,8483,8705,8725,8915,19992],"fullWord":1629},{"subwords":[1576,1590,1604,1617,1630,1631,1797,5716,7467,7473,7567,7571,7573,16319,16351,16765,16790],"fullWord":1631},{"subwords":[1604,1611,1612,1617,1633,1634,1671,1684,1789,1797,1837,1844,1845,1846,1850,5716,5918,7493,7511,7567,7571,7573,7604,7611,9307,12331,12332,12406,12409,16765,16815,16858,16860,16866,16867],"fullWord":1634},{"subwords":[1635,1721,1790,1881,1884,1885,2417,2444,2490,2498,2500,2610,2697,9384,14995,15019,15312,15402,15542,15748,15749,15755,15777,15858,18817,18844,18847,18941,19265,19356,19390,19397,19399,19840,19894],"fullWord":1635},{"subwords":[43,45,49,67,79,385,392,399,407,1196,1197,1301,1306,1422,1425,1427,1502,1507,1636,1637,1638,1749,1751,1918,2721,2722,5619,10061,10071,10304,10313,10323,10324,10360,10495,10496,11065,11066,15872,15942,15948,16103,16270,16274,16999,17039,17149,21050,21097,21105,21130],"fullWord":1638},{"subwords":[30,43,385,399,516,517,1243,1246,1296,1301,1302,1324,1515,1526,1560,1570,1636,1640,1665,1900,1907,1908,1938,4427,4466,4472,4475,4587,4601,4618,4728,5658,5756,5782,10061,10090,10093,10136,10139,10141,10145,10146,10324,10327,10378,11107,11115,11173,11180,11437,11438,11442,11464,11491,11492],"fullWord":1640},{"subwords":[1636,1641,1706,1749,2721,2730,5765,6509,6854,6855,7140,10495,11065,11074,14995,15114,15130,15201,15866],"fullWord":1641},{"subwords":[1560,1576,1636,1642,1643,1777,1780,1817,1938,1939,4587,4618,4714,4728,4731,4739,4935,5676,5691,5756,5771,9108,9117,10378,10383,10414,10504,10530,10536,10537],"fullWord":1643},{"subwords":[1576,1579,1636,1642,1644,1817,5691,5765,6390,6409,6416,6520,6543,6568,6743,10383,10414,10504,10536,10539,10554],"fullWord":1644},{"subwords":[1576,1587,1636,1642,1645,1790,1817,2417,5691,5735,5984,5995,9384,10383,10388,10414,10504,10509,10514,10536,10549,10677,14995,15003,15107,15402,15444,15473],"fullWord":1645},{"subwords":[1576,1590,1636,1642,1646,1817,1818,5691,5693,5790,9416,10323,10383,10392,10414,10415,10451,10504,10516,10536,10551,16319,16765],"fullWord":1646},{"subwords":[1576,1636,1642,1647,1809,1817,1823,5691,5740,5778,9150,9812,10383,10386,10414,10416,10504,10536,10566],"fullWord":1647},{"subwords":[1560,1576,1636,1648,1649,1650,1938,1939,4587,4618,4728,4731,4744,5691,5756,5780,10378,10383],"fullWord":1650},{"subwords":[1576,1590,1636,1648,1649,1651,1655,5691,5693,5780,5781,5790,10323,10383,10392,10451,16319,16368],"fullWord":1651},{"subwords":[1636,1648,1653,1654,1659,1949,1996,2106,2110,2271,2273,2280,5754,5780,10443,10748,10753,10942,12845,13110,13114,20519,20571,20875],"fullWord":1654},{"subwords":[1636,1648,1656,2004,2563,2567,5780,5782,5846,10470,10961,12110,12118,19612],"fullWord":1656},{"subwords":[1604,1636,1658,1671,2079,2087,2106,2127,2134,2140,5637,5718,5953,7477,7493,7525,7680,7696,7698,7771,7815,10398,10443,10444,10748,10753,10793,10796,10822,10826,12331,12481,12484,12485,12504,12509,12792,12845,12876],"fullWord":1658},{"subwords":[1636,1659,1660,1949,1996,1999,2106,2108,2271,2273,2274,2280,2284,2287,2288,5754,5755,10323,10443,10447,10748,10753,10755,10758,10888,10942,10952,12845,12848,13110,13112,13114,13118,16475,17059,17096,17097,17121,17308,17354,17359,17464,18262,20519,20523,20875,20877],"fullWord":1660},{"subwords":[1560,1576,1591,1636,1661,1662,1721,1725,1726,1938,1939,4587,4618,4630,4728,4731,5691,5756,10378,10383,10460,18576,18577],"fullWord":1662},{"subwords":[43,269,315,385,399,1256,1257,1301,1546,1604,1636,1664,2004,2537,2541,2554,5627,7242,7248,7293,7298,7477,7676,7722,10061,10109,10324,10398,10470,10961,10981,10982],"fullWord":1664},{"subwords":[10,29,31,72,504,521,1009,1014,1210,1462,1464,1526,1542,1665,1667,1721,1722,5620,6055,11361,11362,11437,11456,11574,11575,18302,18389,18393,18541,18549,18595],"fullWord":1667},{"subwords":[1576,1587,1668,1700,1790,1872,2417,2428,5735,5810,5830,5984,5995,9077,9384,11539,11543,11743,14995,15202,15402,15480,15481],"fullWord":1668},{"subwords":[51,215,528,1332,1342,1526,1530,1533,1665,1669,1671,2029,2127,2128,2134,5637,5953,11213,11218,11265,11437,11446,11512,11810,11817,11891,12219,12229,12244,12245,12331,12481,12522,12525,12866,12876],"fullWord":1669},{"subwords":[1576,1590,1670,2567,2576,2668,5845,5846,5847,12152,16319,16330,18035,18066,18103,19876,19878],"fullWord":1670},{"subwords":[1560,1576,1582,1671,1673,1674,1679,4618,4667,4774,5665,5865,5867,12331,12339,12340],"fullWord":1674},{"subwords":[1560,1576,1582,1671,1673,1675,1679,4618,4774,5665,5865,12331,12339,12340],"fullWord":1675},{"subwords":[1560,1576,1582,1587,1671,1673,1676,1679,2384,2385,2387,4618,4678,4774,4810,5665,5865,5868,5984,5998,12331,12339,12340,12358,14995,15060,15093,15227],"fullWord":1676},{"subwords":[43,269,385,399,620,625,1256,1257,1301,1332,1342,1345,1348,1530,1604,1605,1636,1671,1680,5745,7242,7248,7293,7298,7477,7493,7494,7674,7676,7680,10061,10109,10174,10324,10344,10398,12219,12229,12230,12331],"fullWord":1680},{"subwords":[1604,1611,1633,1671,1681,1682,1797,1837,1845,7493,7567,7604,9297,12331,12406,12448],"fullWord":1681},{"subwords":[1671,1687,2505,2567,2577,5632,5846,11512,11534,12331,12614,12646],"fullWord":1687},{"subwords":[1671,1682,1688,1837,9297,12331,12406,12448,21255],"fullWord":1688},{"subwords":[1636,1671,1689,2106,2127,2134,2157,5637,5953,10443,10444,10748,10753,10822,12331,12481,12484,12485,12504,12845,12876,21255,21297],"fullWord":1689},{"subwords":[1636,1671,1690,1749,2721,10495,11065,12331,21120,21255],"fullWord":1690},{"subwords":[31,72,817,826,911,1009,1366,1377,1462,1464,1535,1542,1544,1576,1587,1591,1691,1694,1721,1722,1725,2308,2317,2349,5588,5620,5622,5976,5982,5984,6055,14898,14901,14995,14997,15312,15748,18302,18449,18453,18541,18554,18576,19240],"fullWord":1691},{"subwords":[1576,1587,1692,5632,5984,6008,14995,14998],"fullWord":1692},{"subwords":[1576,1579,1587,1591,1693,1694,1721,1725,5705,5984,6409,6420,6489,7057,7073,14995,15098,15114,15135,15312,15748,18576,19240,19243],"fullWord":1693},{"subwords":[1576,1587,1588,1590,1591,1593,1694,1695,1708,1716,1721,1725,1728,1736,5984,6018,6046,14995,15014,15290,15306,15312,15748,16319,16340,16423,16425,16457,17823,17840,18540,18576,18588,18658,19240,19242],"fullWord":1695},{"subwords":[1604,1611,1633,1671,1696,1698,1790,1797,1837,1845,2417,2424,2429,2430,2434,5894,5988,5996,7493,7567,7569,7604,8015,9384,12331,12406,14995,15141,15173,15175,15234,15402,15461,15494],"fullWord":1698},{"subwords":[1636,1671,1699,1790,1817,1837,2417,2429,2430,5996,9384,10414,10504,10509,10514,10536,10544,10549,10625,10632,10677,12331,12406,12438,12439,14995,15175,15402,15444,15473],"fullWord":1699},{"subwords":[31,72,817,911,1009,1269,1270,1366,1377,1462,1464,1468,1469,1471,1535,1542,1703,1704,1721,1722,2308,2317,2349,2383,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8453,8458,8461,8552,8554,14775,14898,14901,14995,15312,15376,15748,18302,18449,18453,18541,18554,18697],"fullWord":1704},{"subwords":[1703,1705,1716,1721,1730,1736,6018,8552,8554,8556,8584,8586,8934,8935,14995,15014,15306,15312,15748,16423,16457,16574,18540,18697],"fullWord":1705},{"subwords":[1636,1706,1707,1749,1751,2721,2722,2730,2731,10323,10495,10496,11065,11066,11074,11075,14995,15014,15201,15866,15867,16423,17149,17150,21130,21212],"fullWord":1707},{"subwords":[1576,1590,1591,1593,1708,1709,1715,1716,1720,1721,1725,1728,1736,6031,6039,6042,16319,16342,16457,16464,18540,18576,18588],"fullWord":1709},{"subwords":[1560,1574,1576,1590,1710,1777,1780,1784,1788,4618,4629,4680,4714,4826,4908,4935,4939,5037,9108,9111,9127,16319,16320,16765,16780],"fullWord":1710},{"subwords":[1711,1712,1715,2230,5814,5845,6039,11569,11817,11823,11996,12002,12082,12872,17308,17315,17382,17434],"fullWord":1712},{"subwords":[1713,1714,1715,1716,1720,1721,1736,2230,2237,6039,16457,16464,17308,17315,17434,17435,17436,18540,18981,18985,19125],"fullWord":1714},{"subwords":[1560,1574,1576,1590,1591,1593,1708,1716,1717,1721,1725,1728,1736,4618,4629,4630,4633,4680,4826,16319,16320,16457,17816,18540,18575,18576,18577,18588],"fullWord":1717},{"subwords":[1716,1718,1721,1736,1790,1791,1881,1884,1885,1886,1887,1889,2417,2423,2444,6018,9384,9389,9409,9447,14995,15014,15306,15312,15402,15410,15526,15542,15543,15748,16423,16457,16765,16889,16890,16907,16911,17722,17881,18540,18817,18844,18847,18849,18850,18941,18943,18947,19265,19266,19277],"fullWord":1718},{"subwords":[1713,1716,1719,1721,1736,2237,2271,2287,2288,13110,13112,16457,16475,17308,17435,17464,17850,17941,18262,18540,18981,18985,19166,19181,19548,19550,20519,20523,20591,20594,20596,20875,20877,20958],"fullWord":1719},{"subwords":[31,72,1009,1288,1462,1464,1521,1542,1576,1591,1721,1722,1723,1725,5620,5740,6055,18302,18358,18541,18545,18576],"fullWord":1723},{"subwords":[1576,1590,1591,1593,1636,1661,1663,1708,1716,1721,1725,1726,1727,1728,1736,1948,5691,5693,5790,10323,10383,10392,10451,10459,10460,10465,16319,16457,17052,17818,17828,18540,18576,18588],"fullWord":1727},{"subwords":[1576,1591,1636,1661,1721,1725,1726,1729,5691,6064,8483,8488,10383,10460,10463,18576,18697,18698],"fullWord":1729},{"subwords":[1560,1576,1591,1721,1725,1731,1777,1780,1785,1881,1884,4618,4625,4630,4714,4935,4942,5680,9108,18576,18577,18835,18844,18845],"fullWord":1731},{"subwords":[1576,1591,1721,1725,1732,1881,1884,5832,9077,9444,11483,11574,11578,11786,18576,18579,18595,18844,18882,18886],"fullWord":1732},{"subwords":[1671,1685,1721,1733,1749,2127,2134,2139,2156,2237,2300,2721,2734,5637,5639,5953,12331,12374,12481,12574,12581,12696,12876,18607,18981,19036,19038,19059,19186,21120,21135,21183],"fullWord":1733},{"subwords":[1721,1734,2160,2168,2185,2237,10027,12709,18981,19010,19060,19061],"fullWord":1734},{"subwords":[31,72,227,817,911,919,1009,1196,1366,1377,1462,1464,1502,1535,1542,1721,1722,1735,1749,2308,2317,2349,2364,2721,2730,2734,5588,5620,5976,5982,6055,14898,14901,14939,14995,15312,15748,15864,15866,18302,18449,18453,18541,18554,18558,19231,19257,19377,19570,21071,21097,21099,21128,21135],"fullWord":1735},{"subwords":[31,32,67,72,1009,1422,1425,1456,1457,1462,1464,1467,1482,1487,1540,1542,1545,1716,1721,1722,1724,1736,1737,1738,5616,5620,5626,6055,16041,16043,16270,16293,16457,17723,17788,17790,17846,18302,18318,18490,18495,18498,18503,18540,18541,18559,18565,18567,18662],"fullWord":1738},{"subwords":[1560,1576,1591,1721,1725,1739,4618,4630,18576,18577],"fullWord":1739},{"subwords":[1576,1587,1591,1694,1721,1725,1740,5984,14995,15312,15748,18576,19240],"fullWord":1740},{"subwords":[1721,1741,2072,2205,2219,2237,2446,12959,12979,13008,13041,14995,15312,15576,15579,15610,15691,15694,15748,18981,19093,19101,19117,19118,19131,19134,19138,19331],"fullWord":1741},{"subwords":[1576,1590,1636,1742,1743,5691,5693,5790,5798,6092,6104,10323,10383,10392,10451,10471,16319,19992,20000],"fullWord":1743},{"subwords":[1576,1590,1744,6092,6104,16319,16765,16798,19992,20000,20116,20129,20134,20197],"fullWord":1744},{"subwords":[43,337,385,399,1145,1155,1272,1301,1307,1498,1636,1745,1817,1949,10061,10292,10324,10414,10504,10536,20345,20369,20501,20519,20755],"fullWord":1745},{"subwords":[817,1145,1366,1377,1535,1576,1587,1746,2308,2317,2358,2396,5588,5976,5984,6118,6119,14933,14995,20410,20417,20510,20519,20521,20532,20587],"fullWord":1746},{"subwords":[1604,1617,1747,1748,1797,5716,7567,7571,7573,16475,16765,18239,20519,20523,20742,20749,20826],"fullWord":1748},{"subwords":[1560,1671,1673,1678,1749,1750,2058,2059,2070,2127,2130,2134,2135,2139,2156,2300,2721,4618,4774,4795,5114,5172,5176,5290,5567,5579,5637,5639,5865,5953,12331,12481,12493,12499,12696,12752,12876,21120,21154,21183,21184],"fullWord":1750},{"subwords":[1576,1590,1636,1752,1753,5691,5693,5790,10323,10383,10392,10451,16319,21251,21252],"fullWord":1753},{"subwords":[1636,1754,1817,1818,9416,10323,10414,10415,10504,10516,10536,10551,16765,16929],"fullWord":1754},{"subwords":[51,817,1366,1377,1535,1755,2029,2030,2072,2205,2308,2317,2368,2446,5588,5976,12680,12959,12979,14945,14995,15576,15579,15610,21245,21260],"fullWord":1755},{"subwords":[0,72,317,1210,1269,1270,1462,1468,1756,8378,18302],"fullWord":1756},{"subwords":[72,1269,1270,1282,1462,1468,1475,1757,1881,8207,8378,8688,9946,9952,18302,18347,18684],"fullWord":1757},{"subwords":[67,325,932,1256,1266,1269,1332,1345,1349,1359,1422,1431,1758,1759,7242,7252,7396,7399,7744,8233,8237,8304,8308,8362,12219,12223,12230,12233,15910,15986,16001,16004,16513,17211],"fullWord":1759},{"subwords":[72,77,693,1074,1269,1270,1332,1362,1462,1468,1760,2577,2602,2697,8378,8398,8936,8989,8998,9026,12219,12300,12612,12614,12659,18302,18319,18408,18508,18686,19390,19391,19434,19435,19687,19892],"fullWord":1760},{"subwords":[49,67,337,340,385,392,1272,1279,1307,1422,1438,1502,1507,1761,1762,1763,10061,10071,10304,10313,10323,10504,10516,10517,15931,15942,16103,16765,16767,16999,17039,17149],"fullWord":1762},{"subwords":[30,35,38,67,200,326,327,331,336,948,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,1763,1764,1777,1780,1784,1788,4427,4430,4461,4618,4629,4714,4826,4901,4908,4935,4939,5037,9103,9106,9111,9127,15893,15928,16270,16765,16780],"fullWord":1764},{"subwords":[67,973,1422,1425,1429,1443,1448,1451,1715,1763,1765,6039,16270,16291,16765,16766,16903],"fullWord":1765},{"subwords":[337,372,385,386,1174,1175,1210,1213,1272,1307,1766,10061,10064,10301,10504],"fullWord":1766},{"subwords":[1560,1767,1768,1777,1780,4618,4714,4935,5632],"fullWord":1768},{"subwords":[1767,1769,1790,2404,2417,5632,9384,14995,15402],"fullWord":1769},{"subwords":[1510,1636,1767,1770,1771,1772,1817,1818,5632,5635,9416,10323,10414,10415,10504,10516,10536,10551,16765],"fullWord":1771},{"subwords":[25,27,349,796,1366,1367,1391,1767,1773,2308,2738,2941,3402,4052,4151,9376,14710,14714,15402],"fullWord":1773},{"subwords":[1774,2307,4046,4048,4237,5959,5961,6023,6033,9079,9085,13702,13705,13716,14421,16178,16298,16765,16769,16883,17525,17550,17553],"fullWord":1774},{"subwords":[1556,1775,1790,1809,1811,2409,2417,4151,9079,9094,9384,9396,9849,14995,15021,15402,15411,15422],"fullWord":1775},{"subwords":[1776,1837,1851,2127,2209,2211,2429,2439,2446,2462,3617,3689,3693,3777,3913,4151,9097,9207,9360,9400,12406,12481,12513,12548,12700,12959,12965,15402,15576,15583,15592],"fullWord":1776},{"subwords":[1560,1671,1673,1777,1778,1780,1781,1837,1840,4618,4714,4774,4928,4935,4936,4985,4988,4989,5865,12331,12406],"fullWord":1778},{"subwords":[1560,1572,1777,1779,1780,1781,1782,1790,1867,1868,2384,2413,2417,4618,4714,4810,4928,4935,4936,5023,5362,5364,9384,9385,14995,15005,15060,15074,15402,15428,15433],"fullWord":1779},{"subwords":[1560,1574,1777,1780,1782,1783,1784,1788,1790,1791,1867,1871,2384,2413,2414,2417,2423,4618,4628,4629,4714,4810,4826,4908,4935,4939,5023,5037,5362,5363,5367,9111,9127,9384,9385,9389,9409,14995,15005,15006,15014,15060,15087,15402,15410,15428,15433,15436,15443,15526,16423,16765,16780,16889,16890,16891,17722],"fullWord":1783},{"subwords":[1560,1574,1716,1721,1736,1777,1780,1784,1785,1786,1788,1881,1884,1887,1889,4618,4625,4626,4629,4630,4633,4714,4724,4826,4908,4935,4939,4942,4945,5037,5063,5680,5684,9111,9127,9447,16457,16765,16780,16907,16911,16912,17856,18540,18575,18835,18837,18844,18845,18850,18947],"fullWord":1786},{"subwords":[1777,1787,1797,1837,1840,4947,4985,4993,7604,9073,12406],"fullWord":1787},{"subwords":[1560,1777,1780,1792,1793,4618,4714,4935,6390,6406,6520,6537,6543,6544,6553,6554],"fullWord":1793},{"subwords":[1636,1794,1817,5765,6390,6429,6520,6543,6568,6661,6663,6757,9070,10414,10494,10504,10536,10539,10554],"fullWord":1794},{"subwords":[1777,1795,1851,1852,2058,2095,2102,4587,6390,6520,6541,6868,6896,6902,9125,10504,10530,10533,10748,12700,12812,12837],"fullWord":1795},{"subwords":[1796,1851,2428,2439,2446,6390,6520,6621,6629,6868,6940,6973,7103,7111,9077,11817,11854,12700,12959,15402,15480,15576,15627],"fullWord":1796},{"subwords":[341,1256,1502,1797,1798,7242,7317,7345,7447,8186,9064,9077,11127,11132,11408,11649,21051],"fullWord":1798},{"subwords":[1576,1604,1630,1632,1749,1797,1799,2721,6189,7467,7567],"fullWord":1799},{"subwords":[1604,1696,1790,1797,1800,2417,2424,5709,5988,7567,7569,7578,9384,14995,15141,15402,15461],"fullWord":1800},{"subwords":[1797,1801,1802,1881,1889,7573,7635,7637,8678,8685,8688,8691,8935,9447,16653,16765,16805,16809,16907,18540,18742,18947],"fullWord":1802},{"subwords":[1797,1804,1805,1851,1858,1881,1889,2079,2091,2237,7573,7635,7637,7771,7780,7874,9447,12700,12701,12702,12704,16765,16907,17308,17435,18540,18947,18993,19001],"fullWord":1805},{"subwords":[1806,1807,1851,1858,2668,9369,9568,9577,9603,9606,9734,12700,12701,13048,16765,17308,18035,18083],"fullWord":1807},{"subwords":[1806,1808,1851,2292,9369,9568,9603,12700,13048],"fullWord":1808},{"subwords":[1790,1791,1809,1811,1812,1813,1894,2417,2423,2442,9384,9389,9396,9399,9409,9849,9851,10038,10041,14995,15014,15402,15410,15526,15534,16423,16765,16889,16890,16954,16960,17722],"fullWord":1812},{"subwords":[1797,1814,1837,7604,9276,9913,9922,12406],"fullWord":1814},{"subwords":[1510,1767,1772,1815,1816,1851,1852,1858,1969,1970,2042,2048,2095,2098,10323,10504,10516,10748,10758,12700,12701,12812,12822,16765,16837,17096,17308,17350,17354,17364],"fullWord":1816},{"subwords":[1560,1604,1636,1777,1780,1797,1817,1819,1820,1929,1938,4587,4618,4714,4728,4739,4935,4947,5756,7477,7478,7484,7567,7568,7586,7682,7684,9117,10378,10398,10414,10504,10530,10536,10537],"fullWord":1820},{"subwords":[1604,1617,1636,1797,1817,1818,1819,1821,5716,7477,7486,7567,7571,7573,7682,9416,10323,10398,10412,10414,10415,10504,10516,10536,10551,16765],"fullWord":1821},{"subwords":[1560,1636,1777,1780,1809,1810,1817,1823,1824,1938,4587,4618,4714,4728,4739,4935,4957,5756,5778,9117,9150,9885,10378,10414,10416,10504,10530,10536,10537,10566,10567],"fullWord":1824},{"subwords":[1636,1790,1809,1811,1817,1823,1825,2417,5778,9150,9384,9396,9849,10414,10416,10504,10509,10514,10536,10549,10566,10571,10677,14995,15402,15444,15473],"fullWord":1825},{"subwords":[1560,1636,1648,1652,1777,1780,1817,1827,1828,1938,4587,4618,4714,4728,4739,4744,4935,4967,5756,5780,9117,9152,10378,10414,10504,10507,10530,10536,10537],"fullWord":1828},{"subwords":[1636,1648,1652,1790,1817,1827,1829,2417,2427,5780,9152,9153,9384,10414,10504,10507,10509,10514,10536,10549,10677,14995,15007,15402,15444,15473,15477],"fullWord":1829},{"subwords":[1636,1648,1652,1661,1721,1817,1827,1830,1881,1884,5780,9152,10414,10460,10504,10507,10536,10580,10691,10694,18591,18844,18863,18866,18872],"fullWord":1830},{"subwords":[1636,1648,1652,1817,1827,1831,5780,9152,10414,10504,10507,10536],"fullWord":1831},{"subwords":[1827,1832,1851,1852,1996,2095,2110,2271,2280,9152,10504,10748,10942,12700,12812,13114,20761],"fullWord":1832},{"subwords":[67,325,341,347,555,556,932,1269,1422,1431,1763,1835,1836,8290,8296,8362,8648,8678,9064,9067,9077,9422,11330,11335,11616,15926,15973,16531,16627,16764,16765],"fullWord":1836},{"subwords":[349,361,716,1280,1332,1366,1406,1408,1502,1837,1839,2308,2328,2330,2337,2364,2400,2429,2438,2503,9376,9378,12219,12282,12311,12406,14784,14787,14821,14838,14939,15402,15864,21075,21144],"fullWord":1839},{"subwords":[1560,1671,1673,1777,1780,1782,1790,1837,1840,1841,1867,2384,2413,2417,2429,2430,2431,4618,4714,4774,4810,4935,4985,4988,4990,5023,5362,5865,5996,9206,9384,9385,12331,12358,12406,14995,15005,15008,15060,15175,15227,15402,15428,15433,15491],"fullWord":1841},{"subwords":[1560,1636,1671,1673,1777,1780,1817,1837,1840,1842,1938,1944,1955,4587,4618,4714,4728,4739,4774,4935,4985,4988,5756,5865,9117,10378,10414,10427,10504,10530,10536,10537,10544,10625,10628,12331,12406,12438,12439],"fullWord":1842},{"subwords":[1604,1611,1612,1617,1633,1634,1671,1684,1789,1797,1837,1844,1845,1846,1850,5716,5918,7493,7511,7567,7571,7573,7604,7611,9307,12331,12332,12406,12409,16765,16815,16858,16860,16866,16867],"fullWord":1846},{"subwords":[1797,1837,1847,1848,1850,1851,1858,1877,2079,2091,2127,2140,2144,2153,7573,7604,7611,7771,7780,9307,9360,9366,12406,12409,12481,12489,12509,12512,12560,12700,12701,16765,16815,16858,16866,17259,17308,17383,17389],"fullWord":1848},{"subwords":[1560,1671,1673,1682,1777,1780,1837,1840,1849,4618,4714,4774,4935,4985,4988,5865,9297,9299,12331,12406,12448],"fullWord":1849},{"subwords":[1711,1851,1853,1854,1858,2099,5845,9077,9422,11616,11764,11772,11817,11823,11854,12700,12701,12872,16375,16765,17308,17382],"fullWord":1854},{"subwords":[1837,1851,1855,2127,3617,3689,3777,9097,9207,9360,9361,12406,12481,12700],"fullWord":1855},{"subwords":[1851,1857,1858,2197,2200,2300,2304,2307,9374,12700,12701,12936,14032,14187,14421,16765,16883,17308,17406,17472,17697,21146,21152],"fullWord":1857},{"subwords":[51,67,72,1282,1285,1422,1456,1462,1482,1763,1851,1858,1859,1860,1881,1889,2029,2034,2035,2037,2041,2237,9367,9368,9447,12686,12692,12700,12701,12702,12704,13031,15874,16041,16765,16907,17308,17435,17723,17885,18302,18318,18347,18432,18435,18540,18947],"fullWord":1860},{"subwords":[1851,1861,1881,2237,3429,3617,3965,12700,12702,13038,18823],"fullWord":1861},{"subwords":[1837,1851,1856,1862,1881,2127,2237,9325,9335,9360,12406,12463,12481,12574,12700,12702,18894,19036],"fullWord":1862},{"subwords":[1560,1574,1777,1780,1784,1788,1863,1864,2307,4618,4629,4714,4826,4908,4935,4939,5014,5021,5037,6033,9111,9127,13478,13488,13705,13710,13716,14421,16765,16780,16883,17530,17562],"fullWord":1864},{"subwords":[1777,1788,1851,1858,1865,1866,2058,2069,2197,2200,2307,4908,5014,5021,5037,5221,9127,9374,12700,12701,12936,14020,14023,14032,14421,16765,16883,17308,17323,17406],"fullWord":1866},{"subwords":[1560,1572,1777,1779,1780,1781,1782,1790,1867,1868,2384,2413,2417,4618,4714,4810,4928,4935,4936,5023,5362,5364,9384,9385,14995,15005,15060,15074,15402,15428,15433],"fullWord":1868},{"subwords":[1560,1777,1780,1782,1790,1867,1869,2384,2413,2417,2420,4618,4714,4810,4935,5023,5026,5362,5365,6008,9384,9385,14995,15005,15060,15402,15428,15433,15434],"fullWord":1869},{"subwords":[1560,1777,1780,1782,1790,1867,1870,2384,2413,2417,4618,4714,4810,4935,5023,5362,9073,9384,9385,14995,15005,15060,15402,15428,15433],"fullWord":1870},{"subwords":[1576,1587,1668,1700,1790,1872,2417,2428,5735,5810,5830,5984,5995,9077,9384,11539,11543,11743,14995,15202,15402,15480,15481],"fullWord":1872},{"subwords":[1873,1874,1881,1889,2444,8678,8685,8688,8691,8934,8935,9409,9447,15402,15410,16648,16653,16765,16889,16907,17722,17881,18540,18742,18947],"fullWord":1874},{"subwords":[1716,1721,1736,1875,1881,1884,1887,1889,3429,3430,3434,4238,4241,6023,6057,9079,9085,9447,16178,16298,16304,16457,16765,16769,16907,16911,18540,18823,18830,18844,18850,18947],"fullWord":1875},{"subwords":[1851,1858,1876,2197,2200,2223,2307,8664,8671,8678,8705,8713,8739,8845,8851,8853,8856,8886,9374,12700,12701,12810,12936,13651,13841,14032,14172,14421,16639,16693,16765,16883,17308,17406,17407],"fullWord":1876},{"subwords":[1837,1850,1851,1858,1877,1878,2127,2153,2230,9307,9360,9366,12406,12409,12481,12489,12560,12700,12701,16765,16766,16858,16881,16903,17259,17261,17308,17315,17383,17395,17434],"fullWord":1878},{"subwords":[1879,2668,9375,14635,14650,14659,16416,16765,17713,18035,18066,18083,19876],"fullWord":1879},{"subwords":[1851,1858,1880,1881,1889,2219,2220,2237,2439,2441,2444,2446,2476,9409,9447,12700,12701,12702,12704,12959,12962,12963,12964,13007,13008,13011,15402,15410,15504,15507,15576,15590,15691,15700,16765,16889,16907,17308,17429,17435,17722,17881,18540,18945,18946,18947,19093,19113,19114,19292,19294,19313],"fullWord":1880},{"subwords":[1881,1882,1883,3272,3328,3429,3440,8612,8688,9101,9440,9443,18806,18823],"fullWord":1883},{"subwords":[1716,1718,1721,1736,1790,1791,1881,1884,1885,1886,1887,1889,2417,2423,2444,6018,9384,9389,9409,9447,14995,15014,15306,15312,15402,15410,15526,15542,15543,15748,16423,16457,16765,16889,16890,16907,16911,17722,17881,18540,18817,18844,18847,18849,18850,18941,18943,18947,19265,19266,19277],"fullWord":1886},{"subwords":[1797,1837,1881,1888,7604,7637,9325,12406,12463,18894,18901],"fullWord":1888},{"subwords":[1560,1721,1777,1780,1785,1881,1884,1890,1891,4618,4625,4630,4714,4935,4942,5680,18818,18835,18844,18845,18950],"fullWord":1891},{"subwords":[1671,1685,1721,1837,1881,1884,1890,1892,9325,12331,12374,12406,12463,18607,18630,18818,18844,18894,18898,18921,18950,18969],"fullWord":1892},{"subwords":[1721,1790,1881,1884,1885,1890,1893,2417,2444,9384,14995,15312,15402,15542,15748,18817,18818,18844,18847,18941,18950,18953,18963,19265,19303],"fullWord":1893},{"subwords":[49,385,1234,1502,1510,1895,1896,10061,10304],"fullWord":1896},{"subwords":[27,67,385,392,950,1236,1239,1309,1313,1422,1444,1894,1898,1899,2738,2757,2813,2822,2825,3033,10061,10071,10072,10082,10086,10323,15880,15884,15942,16111,16999,17001],"fullWord":1899},{"subwords":[30,43,148,155,385,399,1243,1246,1296,1297,1301,1302,1515,1560,1636,1900,1901,1938,4427,4438,4466,4587,4590,4601,4618,4728,5659,5756,10061,10090,10093,10094,10324,10327,10378],"fullWord":1901},{"subwords":[30,43,45,67,200,385,392,399,407,1243,1246,1254,1296,1300,1301,1302,1306,1422,1425,1426,1515,1518,1560,1574,1636,1900,1902,1918,1938,4427,4430,4466,4467,4587,4601,4603,4618,4629,4728,4826,5756,5760,10061,10071,10090,10093,10099,10107,10227,10323,10324,10327,10331,10360,10378,15872,15893,15942,15948,16270,16274,16999,17044],"fullWord":1902},{"subwords":[67,337,340,385,392,639,647,691,1272,1279,1307,1332,1359,1422,1438,1440,1763,1837,1838,1850,1905,1906,9307,10061,10071,10120,10323,10504,10516,10654,12219,12223,12238,12241,12406,12409,12438,12442,15931,15942,15986,16765,16858,16999,17006,17214],"fullWord":1906},{"subwords":[30,43,385,399,516,517,1243,1246,1296,1301,1302,1324,1515,1526,1560,1570,1636,1640,1665,1900,1907,1908,1938,4427,4466,4472,4475,4587,4601,4618,4728,5658,5756,5782,10061,10090,10093,10136,10139,10141,10145,10146,10324,10327,10378,11107,11115,11173,11180,11437,11438,11442,11464,11491,11492],"fullWord":1908},{"subwords":[43,44,385,399,513,516,518,817,869,1301,1304,1324,1366,1377,1526,1535,1636,1665,1700,1907,1909,1915,1933,2308,2317,2380,5588,5592,5782,5803,5976,10061,10136,10139,10142,10145,10150,10324,10355,11173,11180,11276,11279,11286,11303,11437,11442,11491,11539,14808,14809,14968,14971,14975,14995,15202],"fullWord":1909},{"subwords":[43,45,67,385,392,399,407,470,516,519,1301,1306,1324,1325,1422,1425,1526,1528,1636,1665,1666,1907,1910,1918,5782,5784,5845,10061,10071,10136,10139,10144,10145,10151,10161,10323,10324,10360,11173,11180,11181,11330,11437,11442,11444,11453,11491,11560,15872,15942,15948,15949,15973,15978,16270,16274,16278,16999,17012],"fullWord":1910},{"subwords":[27,385,1235,1269,1332,1903,1911,1912,2738,2813,2869,3459,10061,10072,12219],"fullWord":1912},{"subwords":[67,385,392,950,1309,1313,1332,1353,1356,1359,1422,1444,1894,1913,1914,9959,10061,10071,10177,10323,12219,12223,15942,15986,16007,16999],"fullWord":1914},{"subwords":[30,43,44,385,396,399,817,1243,1246,1296,1298,1301,1302,1304,1366,1372,1377,1378,1515,1535,1536,1560,1636,1900,1915,1916,1933,1938,2308,2315,2317,2376,2384,4427,4466,4516,4587,4601,4607,4618,4619,4728,4810,5303,5588,5592,5756,5976,10061,10090,10093,10097,10202,10324,10327,10355,10378,14736,14961,14968,14995,15060],"fullWord":1916},{"subwords":[43,44,45,67,385,392,399,407,817,825,905,906,1301,1304,1305,1306,1366,1377,1381,1419,1422,1425,1428,1535,1539,1636,1915,1917,1918,1933,1934,2308,2317,2318,2343,5588,5592,5593,5599,5976,5977,10061,10071,10207,10228,10323,10324,10355,10360,14805,14881,14968,14973,14995,15014,15869,15872,15942,15948,16270,16274,16286,16419,16420,16423,16999],"fullWord":1917},{"subwords":[67,72,385,392,488,973,990,1422,1448,1456,1461,1462,1482,1919,1920,1922,1923,10061,10071,10236,10241,10245,10323,15942,15960,15963,16041,16999,17000,17022,17027,17723,17726,18302,18318,18487,18540],"fullWord":1920},{"subwords":[49,67,72,385,392,488,1422,1456,1462,1482,1502,1507,1919,1921,1922,1923,10061,10071,10241,10304,10313,10323,15942,15960,15964,16041,16103,16999,17022,17028,17039,17149,17723,17725,17802,18018,18302,18318,18540],"fullWord":1921},{"subwords":[30,43,213,385,399,1243,1246,1296,1301,1302,1515,1560,1636,1900,1924,1925,1938,4427,4466,4584,4587,4601,4618,4728,5756,10061,10090,10093,10314,10315,10324,10327,10378,21241,21249],"fullWord":1925},{"subwords":[43,44,385,399,817,1301,1304,1366,1377,1535,1636,1915,1924,1926,1933,2308,2317,2368,5588,5592,5976,10061,10314,10324,10355,14945,14968,14995,21241,21245],"fullWord":1926},{"subwords":[43,45,67,385,392,399,407,1301,1306,1422,1425,1636,1918,1924,1927,10061,10071,10314,10316,10323,10324,10360,15872,15942,15948,16270,16274,16999,21241,21243],"fullWord":1927},{"subwords":[51,385,1332,1928,2029,2100,2127,2128,10061,10741,10748,12219,12481,21296],"fullWord":1928},{"subwords":[27,43,93,98,385,399,1235,1269,1301,1512,1636,1639,1903,1930,2738,2749,2813,3255,5582,8258,8445,10061,10072,10073,10324,10325,10373],"fullWord":1930},{"subwords":[43,45,67,385,392,399,407,950,1288,1293,1301,1306,1309,1313,1422,1425,1444,1521,1524,1636,1894,1918,1931,1932,5778,5779,9760,9761,10061,10071,10128,10132,10323,10324,10338,10341,10360,10416,10417,15872,15939,15942,15948,16270,16274,16999,17007],"fullWord":1932},{"subwords":[43,44,45,67,385,392,399,407,817,825,905,906,1301,1304,1305,1306,1366,1377,1381,1419,1422,1425,1428,1535,1539,1636,1915,1917,1918,1933,1934,2308,2317,2318,2343,5588,5592,5593,5599,5976,5977,10061,10071,10207,10228,10323,10324,10355,10360,14805,14881,14968,14973,14995,15014,15869,15872,15942,15948,16270,16274,16286,16419,16420,16423,16999],"fullWord":1934},{"subwords":[43,44,49,227,385,399,817,1196,1301,1304,1366,1377,1379,1400,1502,1535,1636,1637,1706,1749,1915,1933,1935,2308,2317,2364,2721,2730,5588,5592,5594,5976,10061,10304,10306,10324,10355,10359,10495,11065,11074,14939,14968,14995,15183,15201,15864,15866,21050,21071,21097,21099,21128],"fullWord":1935},{"subwords":[31,32,43,45,46,67,72,385,392,399,407,488,1009,1301,1306,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1636,1661,1663,1716,1721,1722,1724,1736,1918,1919,1922,1923,1936,1937,1948,5616,5620,5626,6055,10061,10071,10241,10247,10323,10324,10360,10366,10459,10460,10465,15872,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16999,17022,17023,17723,17724,17750,17811,18302,18309,18311,18318,18341,18370,18374,18540,18541,18547,18548,18559,18660],"fullWord":1937},{"subwords":[1560,1574,1576,1590,1636,1938,1939,1940,4587,4618,4629,4680,4728,4731,4734,4826,5691,5693,5756,5760,5790,10323,10378,10383,10385,10392,10451,16319,16320,17044],"fullWord":1940},{"subwords":[1576,1583,1586,1590,1636,1941,1942,2307,5691,5693,5790,6033,10323,10383,10392,10451,13489,13495,13498,13510,13947,13948,13949,16319,16336,17049],"fullWord":1942},{"subwords":[1636,1639,1671,1672,1943,5856,5861,8540,10373,12331],"fullWord":1943},{"subwords":[1560,1574,1636,1671,1673,1677,1684,1938,1944,1945,4587,4618,4629,4728,4774,4785,4826,5756,5760,5865,5875,5918,10323,10378,10427,10429,10433,12331,12332,16381,17044],"fullWord":1945},{"subwords":[1636,1671,1683,1749,1946,2721,10495,11065,12331,21120],"fullWord":1946},{"subwords":[1797,1801,1881,1950,7596,7637,7682,8645,8688,10504,10563,10691,10698,18863],"fullWord":1950},{"subwords":[1636,1749,1817,1951,1954,2721,5782,5785,5829,9077,10414,10495,10504,10536,10584,10587,10594,10595,10599,10618,11065,11659,11668],"fullWord":1951},{"subwords":[1952,1953,1962,1963,2307,9077,9178,9196,9422,10323,10504,10516,10584,10587,10593,10611,10617,10665,10672,10681,10957,11616,11659,11685,14421,16765,16853,16883,17076,17088],"fullWord":1953},{"subwords":[1777,1788,1837,1840,1843,1850,1955,1956,4587,4908,4985,5007,5037,9127,9307,10323,10504,10516,10530,10535,10654,12406,12409,12438,12442,16765,16858,17068],"fullWord":1956},{"subwords":[1837,1850,1957,1958,9075,9307,10323,10504,10516,10654,12406,12409,12438,12442,12462,16765,16858],"fullWord":1958},{"subwords":[1823,1826,1837,1850,1894,1959,1960,9150,9151,9276,9284,9307,9902,9904,9913,9929,10323,10504,10516,10645,10648,10654,12406,12409,12438,12442,16765,16829,16858,16876,16954,16974,17085],"fullWord":1960},{"subwords":[1837,1881,1961,1966,9325,9334,10504,10656,10691,12406,12438,12463,18863,18894],"fullWord":1961},{"subwords":[1636,1661,1721,1817,1881,1884,1965,5769,8500,8625,8645,8688,10414,10460,10504,10536,10691,10694,10698,10699,18697,18844,18863,18866],"fullWord":1965},{"subwords":[51,67,72,385,392,487,488,495,496,1422,1456,1462,1482,1919,1922,1923,1967,1968,1989,1991,2029,2034,2035,2037,2041,2100,2101,2115,2118,2237,10061,10071,10181,10241,10323,10748,10758,10896,10897,10901,12686,12692,15874,15942,15960,16041,16999,17022,17096,17113,17308,17354,17435,17723,17885,18302,18318,18432,18435,18540],"fullWord":1968},{"subwords":[1894,1971,1972,1973,1975,2056,2057,3617,3624,3701,10323,10748,10758,10760,10768,10772,17096,17308,17316,17319,17354],"fullWord":1973},{"subwords":[1971,1972,1974,2056,2300,3577,3617,3701,4029,10748,10760,10768,21180],"fullWord":1974},{"subwords":[1636,1894,1976,1977,2106,2108,5778,5779,10323,10416,10417,10443,10447,10748,10753,10755,10758,10888,12845,12848,17096,17097,17308,17354,17359],"fullWord":1977},{"subwords":[1560,1636,1671,1673,1938,1944,1978,1979,2058,2059,2102,2106,2127,2130,2134,2135,4587,4618,4728,4774,5114,5146,5172,5176,5637,5756,5865,5953,10378,10427,10443,10444,10748,10753,10754,10780,10781,10822,12331,12481,12484,12485,12493,12499,12504,12752,12837,12838,12845,12876],"fullWord":1979},{"subwords":[1978,1980,2058,2069,2102,2127,2130,2133,2153,4587,5172,5188,5221,10323,10748,10758,12481,12489,12493,12501,12560,12837,12844,17096,17259,17308,17323,17354,17357,17383],"fullWord":1980},{"subwords":[1981,1982,2058,2069,2102,2113,2114,2160,2182,4587,5221,10323,10748,10756,10757,10758,10833,10854,12712,12713,12837,12844,13024,17096,17308,17323,17354,17357,17370],"fullWord":1982},{"subwords":[1981,1983,2058,2070,2102,2113,2160,2300,2302,4587,10748,10756,10833,12712,12767,12837,21154],"fullWord":1983},{"subwords":[1984,1985,2113,2114,2160,2173,2176,2182,2224,10323,10748,10756,10757,10758,10833,10842,10844,10854,11817,11823,11921,11941,12712,12713,12872,13024,17096,17308,17354,17370],"fullWord":1985},{"subwords":[1984,1986,2113,2160,2173,2177,2300,2302,10748,10756,10833,10842,11817,11884,11921,12712],"fullWord":1986},{"subwords":[1987,1988,2113,2114,2160,2182,2197,2200,2307,10323,10748,10756,10757,10758,10833,10849,10852,10854,10864,10874,12712,12713,12905,12936,13024,14056,14086,14087,14121,14123,17096,17102,17104,17308,17354,17370,17406,17631],"fullWord":1988},{"subwords":[1971,1989,1990,2115,2237,2239,2242,3560,3561,3617,3701,3728,3965,8705,8714,8770,8892,10748,10760,10765,10897,10898,18743],"fullWord":1990},{"subwords":[1989,1992,2113,2115,2160,2185,2237,10748,10756,10833,10860,10897,10903,12712,13043,19060,19062,19066,19131,19143],"fullWord":1992},{"subwords":[1989,1993,2115,2237,2300,10748,10897,19131,19186,19389],"fullWord":1993},{"subwords":[1636,1994,2004,2008,2106,2108,2119,2251,2252,2264,2668,10323,10443,10447,10470,10748,10753,10755,10758,10888,10925,10961,10962,12845,12848,13053,16402,17096,17097,17128,17308,17354,17359,17442,18035,18066,19876],"fullWord":1994},{"subwords":[1995,2119,2267,2300,2304,2607,2609,2668,2696,2710,2714,10323,10748,10758,10928,17096,17149,17308,17354,17442,17472,18035,21193],"fullWord":1995},{"subwords":[1510,1969,1996,1997,2002,2042,2271,2280,2300,10748,10752,10942,13114,20874,21202,21207],"fullWord":1997},{"subwords":[1636,1659,1949,1996,1998,2072,2106,2205,2271,2273,2275,2280,2283,2396,2446,2480,5754,10443,10748,10753,10882,10942,10945,12845,12959,12979,13110,13114,14995,15576,15579,15586,15610,15621,15734,15739,20519,20875,20933],"fullWord":1998},{"subwords":[1996,1999,2000,2002,2271,2280,2284,2287,2300,2304,10323,10748,10758,10942,10952,13114,13118,17096,17121,17149,17308,17354,17464,17472,18262,21202,21207,21210,21211],"fullWord":2000},{"subwords":[1996,2001,2197,2271,2280,10748,10864,10917,10942,13114,13977,14056,14229,14428,20927],"fullWord":2001},{"subwords":[1996,2002,2003,2271,2280,2300,10748,10942,13114,21202,21207],"fullWord":2003},{"subwords":[1636,1648,1657,1749,2004,2006,2012,2563,2566,2710,2721,5780,10470,10495,10961,11065,21110,21222],"fullWord":2006},{"subwords":[1636,1661,1663,1716,1721,1736,1948,2004,2008,2009,2011,2668,2690,2693,2697,2700,10323,10459,10460,10465,10470,10961,10962,11044,11050,11053,16457,17128,17147,17994,18035,18040,18045,18066,18074,18540,19390,19397,19401,19403,19422,19605,19876],"fullWord":2009},{"subwords":[1636,1749,1751,2004,2008,2010,2012,2013,2668,2696,2710,2714,2721,2722,10323,10470,10495,10496,10961,10962,11065,11066,17128,17149,18035,18066,18077,19876,21130,21222,21223],"fullWord":2010},{"subwords":[1636,1749,1751,2004,2008,2010,2012,2013,2668,2696,2710,2714,2721,2722,10323,10470,10495,10496,10961,10962,11065,11066,17128,17149,18035,18066,18077,19876,21130,21222,21223],"fullWord":2013},{"subwords":[2014,2015,2530,2536,2668,6821,6822,6823,6845,10323,10978,10980,18035],"fullWord":2015},{"subwords":[1797,1837,2016,2537,2577,2585,7604,7682,7759,8151,10504,10637,10981,11012,12406,12438,12614,19585],"fullWord":2016},{"subwords":[2017,2028,2668,2673,8678,8936,8940,10323,10504,10516,11039,16746,16765,18035,18083,19592],"fullWord":2017},{"subwords":[1604,1620,1636,1671,2004,2018,2537,2541,2554,2577,2585,2587,7477,7493,7680,7722,7759,8151,10398,10470,10961,10981,10982,11008,11012,11013,12331,12614],"fullWord":2018},{"subwords":[2019,2020,2577,2600,2602,2605,2668,2690,2697,2700,10323,11044,12614,12622,12659,12663,17147,17288,17994,18005,18035,18117,18540,19390,19403,19434,19452,19605],"fullWord":2020},{"subwords":[1510,2021,2022,2023,2025,2505,2509,2550,2553,2610,2630,2635,2656,2668,10323,15749,15764,17141,18035,19840,19844],"fullWord":2023},{"subwords":[2021,2024,2610,2630,2636,2648,2655,2667,2710,15749,15765,19840],"fullWord":2024},{"subwords":[2021,2025,2026,2027,2498,2610,2630,2635,2656,2664,2668,2690,2697,2700,10323,11044,15749,15764,15852,15858,15861,17141,17147,17994,18035,18540,19390,19403,19605,19840,19844],"fullWord":2027},{"subwords":[51,67,183,197,200,201,905,1243,1254,1366,1372,1376,1419,1422,2029,2030,2031,2032,2033,2034,2058,2069,2308,2315,2316,2343,2446,2448,2449,2476,4427,4430,5094,5216,5217,5221,5303,5305,12680,12683,12959,12964,13007,14736,14751,15561,15563,15576,15590,15600,15609,15673,15893,16030,17303,17308,17323,17324],"fullWord":2032},{"subwords":[51,67,72,973,990,1422,1448,1453,1456,1461,1462,1482,2029,2034,2035,2036,2037,2041,2230,2231,2237,12685,12686,12692,15874,15875,16041,17308,17315,17434,17435,17436,17723,17726,17885,17886,18302,18318,18432,18435,18487,18540,19125],"fullWord":2036},{"subwords":[30,31,51,53,72,183,184,1009,1243,1246,1462,1464,1466,1515,1542,1560,1721,1722,2029,2037,2038,2058,2059,2237,4427,4551,4618,4630,5114,5234,5237,5620,6055,12686,12752,18302,18339,18432,18541,18970,18981,18983],"fullWord":2038},{"subwords":[31,43,51,72,385,399,472,488,495,1009,1301,1462,1464,1542,1636,1661,1721,1722,1922,1936,1967,1989,2029,2037,2039,2100,2106,2115,2237,5620,6055,10061,10247,10324,10443,10460,10748,10753,10897,12686,12706,12845,18302,18309,18370,18432,18541,18547,18981,19017],"fullWord":2039},{"subwords":[31,51,58,72,817,911,1009,1366,1377,1462,1464,1535,1542,1721,1722,2029,2030,2037,2040,2072,2202,2205,2219,2237,2308,2317,2349,2446,5588,5620,5976,5982,6055,12680,12686,12688,12955,12959,12979,13008,14898,14901,14995,15312,15576,15579,15610,15691,15694,15748,18302,18315,18432,18449,18453,18463,18541,18554,18981,19093,19094,19101],"fullWord":2040},{"subwords":[1560,2042,2043,2058,2059,4618,5114,5632,12752],"fullWord":2043},{"subwords":[2042,2044,2072,2205,2446,5632,12959,12979,14995,15576,15579,15610],"fullWord":2044},{"subwords":[1767,1837,1851,2042,2045,2127,9360,12406,12481,12700],"fullWord":2045},{"subwords":[1510,1636,1969,2042,2046,2106,5632,10443,10748,10753,12845],"fullWord":2046},{"subwords":[22,27,51,72,126,1462,2029,2037,2042,2047,2049,2237,2738,2754,2756,3052,3605,3617,3965,12686,18302,18333,18432],"fullWord":2047},{"subwords":[2050,2051,3617,3624,3938,6023,16298,17308,17316],"fullWord":2051},{"subwords":[1851,2050,2052,2053,3617,9079,12700],"fullWord":2053},{"subwords":[2054,2055,2223,3367,3617,3624,3944,5641,6023,8705,8713,8714,8725,8730,8881,12810,16298,16574,16676,17308,17316],"fullWord":2055},{"subwords":[30,51,53,183,184,269,270,299,1243,1246,1247,1256,1515,1560,1604,2029,2058,2059,2061,2079,4427,4451,4618,5114,5123,5125,5707,5718,7242,7253,7761,7771,7782,12752],"fullWord":2061},{"subwords":[1560,1777,1780,1851,2058,2059,2063,3617,3638,3644,3657,4618,4639,4656,4714,4909,4935,5096,5114,9079,9082,9110,12700,12752,12757],"fullWord":2063},{"subwords":[1560,1777,1780,1781,1851,2058,2059,2060,2064,4618,4714,4928,4931,4935,4936,5011,5114,9110,12700,12745,12752],"fullWord":2064},{"subwords":[1560,1574,1777,1780,1784,1788,1851,1858,2058,2059,2062,2065,2069,2099,4618,4629,4714,4826,4908,4935,4939,5037,5092,5114,5117,5221,5223,5728,9110,9111,9127,12700,12701,12752,12755,16765,16780,17308,17323],"fullWord":2065},{"subwords":[1777,1851,1852,2058,2066,2070,2095,2102,2300,4587,5141,9124,9125,9128,10504,10530,10533,10748,12700,12767,12812,12824,12837,21140,21154],"fullWord":2066},{"subwords":[1777,1797,1837,1840,1847,1851,2058,2067,2079,2127,2130,2140,4947,4985,4993,4998,5123,5142,5172,5179,7604,7771,7782,9360,12406,12481,12493,12509,12700,12758],"fullWord":2067},{"subwords":[1777,1837,1840,1851,2058,2068,2127,2130,4985,5172,9142,9276,9360,9885,9913,9914,9988,12406,12481,12493,12700,12758,12825],"fullWord":2068},{"subwords":[1604,1611,1633,1671,1797,1837,1845,1847,1851,2071,2079,2085,2127,2134,2140,5637,5718,5953,7493,7567,7604,7771,7815,9360,12331,12406,12481,12509,12700,12876],"fullWord":2071},{"subwords":[1792,1837,1851,2074,2075,2127,6390,6520,6593,6868,9257,9360,12406,12481,12700,12771],"fullWord":2075},{"subwords":[2074,2076,2077,2078,2160,2182,6868,6870,12771,12783,17308],"fullWord":2077},{"subwords":[51,58,72,299,840,911,1256,1366,1462,2029,2030,2037,2079,2080,2219,2237,2308,2319,2349,2446,7242,7375,7377,7380,7416,7422,7768,7771,7874,7900,8040,8056,12680,12686,12959,13008,14758,14898,15576,15691,18302,18315,18342,18432,18449,18463,18993,18994,19093,19094],"fullWord":2080},{"subwords":[1604,1617,1749,1751,2079,2081,2082,2091,2093,2300,2304,2721,2722,5718,5721,7771,7780,7781,7790,7895,7897,12696,12699,13147,17308,17472,21130],"fullWord":2082},{"subwords":[1560,1604,2058,2059,2079,2083,4618,5114,5123,5125,5709,5718,7522,7771,7782,12752],"fullWord":2083},{"subwords":[1604,1636,2079,2084,2087,2106,5709,5718,7477,7522,7525,7696,7698,7771,10398,10443,10748,10753,10793,10796,12792,12845],"fullWord":2084},{"subwords":[1604,1617,1797,1851,1858,2079,2085,2086,2091,2099,5716,5718,5721,7567,7571,7573,7771,7775,7780,7790,12700,12701,16765,17308],"fullWord":2086},{"subwords":[1560,1604,1636,1929,1938,2058,2059,2079,2087,2088,2102,2106,4587,4618,4728,5114,5123,5125,5146,5718,5756,7477,7478,7525,7696,7698,7699,7771,7782,7801,10378,10398,10443,10748,10753,10754,10780,10783,10793,10796,12752,12792,12793,12837,12845],"fullWord":2088},{"subwords":[1604,1617,1636,2079,2087,2089,2091,2106,2108,5718,5721,7477,7486,7525,7696,7698,7700,7701,7771,7780,7790,10323,10398,10412,10443,10447,10748,10753,10755,10758,10793,10796,10797,10811,10888,12792,12796,12845,12848,17096,17097,17099,17308,17354,17359],"fullWord":2089},{"subwords":[51,72,299,1256,1462,2029,2037,2079,2090,2160,2185,2237,7242,7416,7768,7771,7826,7874,12686,18302,18313,18342,18432,18993,18994,19000,19060],"fullWord":2090},{"subwords":[2094,2127,2577,2590,2593,8705,8789,8803,8936,8989,8993,9988,12481,12614],"fullWord":2094},{"subwords":[1560,1636,1777,1780,1817,1851,1852,1938,2058,2059,2095,2096,2102,2106,2109,4587,4618,4714,4728,4739,4935,5114,5146,5756,9110,9117,9125,10378,10414,10443,10504,10530,10533,10536,10537,10748,10753,10754,10780,12695,12700,12752,12812,12815,12837,12841,12845],"fullWord":2096},{"subwords":[1636,1790,1817,1851,1852,2072,2095,2097,2106,2205,2417,2439,2446,2454,9384,10414,10443,10504,10509,10514,10536,10549,10677,10748,10753,10882,12695,12700,12812,12816,12845,12959,12979,12992,14995,15009,15246,15402,15444,15473,15576,15579,15586,15610,15617,15621],"fullWord":2097},{"subwords":[1560,1636,1938,2058,2059,2060,2102,2103,2106,4587,4618,4728,5114,5146,5147,5756,10378,10443,10748,10753,10754,10780,12745,12752,12837,12845],"fullWord":2103},{"subwords":[1560,1636,1938,2058,2059,2072,2102,2104,2106,2205,2207,2384,2446,4587,4618,4728,4810,5114,5115,5146,5756,10378,10443,10748,10753,10754,10780,10878,10882,12752,12837,12839,12845,12959,12960,12979,14995,15060,15078,15576,15579,15580,15586,15600,15603,15610,15621],"fullWord":2104},{"subwords":[2058,2070,2102,2105,2110,2300,4587,5150,5155,10748,12767,12837,21154],"fullWord":2105},{"subwords":[1636,2072,2106,2107,2113,2160,2180,2205,2446,10443,10748,10753,10756,10833,10882,12709,12712,12845,12846,12959,12979,14995,15576,15579,15586,15610,15621],"fullWord":2107},{"subwords":[1560,1636,1777,1780,1817,1851,1852,1938,2058,2059,2095,2096,2102,2106,2109,4587,4618,4714,4728,4739,4935,5114,5146,5756,9110,9117,9125,10378,10414,10443,10504,10530,10533,10536,10537,10748,10753,10754,10780,12695,12700,12752,12812,12815,12837,12841,12845],"fullWord":2109},{"subwords":[1560,1636,1648,1653,1938,2058,2059,2102,2106,2110,2111,4587,4618,4728,4744,5114,5146,5150,5756,5780,10378,10443,10748,10753,10754,10780,12752,12837,12845],"fullWord":2111},{"subwords":[1827,1851,1852,2095,2110,2112,2292,9152,10504,10748,10953,12700,12812],"fullWord":2112},{"subwords":[1560,1636,1661,1721,1938,1989,2058,2059,2102,2106,2115,2116,2237,4587,4618,4630,4728,5114,5146,5161,5234,5237,5756,10378,10443,10460,10748,10753,10754,10780,10897,12752,12837,12845,18981,18983,19016,19017],"fullWord":2116},{"subwords":[1636,1661,1721,1989,2072,2106,2115,2117,2205,2219,2237,2446,10443,10460,10748,10753,10882,10897,12845,12959,12979,13008,14995,15312,15576,15579,15586,15610,15621,15691,15694,15748,18981,19017,19093,19101],"fullWord":2117},{"subwords":[51,1234,1502,2029,2042,2120,2121,2300,11265,11408,11420,11817,21051],"fullWord":2121},{"subwords":[1560,2042,2058,2059,2120,2122,2123,4618,4763,4764,5114,5163,5165,5632,11817,11818,11831,11833,12752],"fullWord":2123},{"subwords":[1700,2042,2072,2120,2122,2124,2205,2446,5632,11539,11817,11819,11970,12861,12959,12979,14995,15202,15576,15579,15610,15627,15632],"fullWord":2124},{"subwords":[1711,2042,2048,2120,2122,2125,2126,5632,5635,5845,11817,11823,12872,17308,17382],"fullWord":2125},{"subwords":[2042,2127,2129,2151,2160,2161,2178,12481,12528,12541],"fullWord":2129},{"subwords":[1560,1671,1673,2058,2059,2060,2127,2130,2131,2134,2135,4618,4774,5114,5172,5176,5637,5865,5953,12331,12481,12493,12499,12745,12752,12876],"fullWord":2131},{"subwords":[1560,1671,1673,2058,2059,2072,2127,2130,2132,2134,2135,2136,2205,2207,2211,2212,2384,2446,4618,4774,4810,5114,5115,5172,5176,5392,5637,5865,5953,12331,12358,12481,12493,12499,12548,12752,12876,12959,12960,12979,14995,15060,15078,15227,15238,15576,15579,15580,15600,15603,15610],"fullWord":2132},{"subwords":[1671,1684,2072,2073,2127,2134,2136,2137,2138,2153,2205,2208,2211,2212,2446,2476,5637,5638,5918,5953,5955,6000,6004,12331,12332,12481,12489,12506,12548,12556,12560,12561,12876,12879,12959,12964,12979,12982,13007,14995,15014,15238,15576,15579,15582,15590,15610,15611,15676,16391,16423,17259,17272,17308,17312,17383,17419],"fullWord":2137},{"subwords":[1560,1604,1671,1673,2058,2059,2079,2127,2130,2134,2135,2140,2141,4618,4774,5114,5123,5125,5172,5176,5179,5637,5718,5865,5953,7493,7771,7782,7815,12331,12481,12493,12499,12509,12752,12876],"fullWord":2141},{"subwords":[2079,2091,2127,2140,2142,2143,2144,2151,2152,2153,2160,2178,2179,2182,2227,7771,7779,7780,7826,7841,7844,7847,12481,12489,12509,12512,12560,17259,17308,17383,17389,17397],"fullWord":2143},{"subwords":[1671,1790,1837,1851,2072,2127,2134,2136,2145,2205,2211,2212,2417,2429,2430,2439,2446,5637,5953,5996,9360,9384,9400,12331,12406,12481,12513,12514,12548,12700,12876,12959,12979,14995,15175,15238,15402,15576,15579,15583,15610],"fullWord":2145},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2146,7604,7771,9297,9360,12406,12481,12509,12528,12700],"fullWord":2146},{"subwords":[51,72,693,700,1282,1332,1462,1480,1837,1851,1856,1859,1881,2029,2037,2127,2128,2147,2237,9325,9335,9360,9367,12219,12293,12406,12463,12481,12574,12575,12686,12700,12702,12715,18302,18347,18408,18432,18894,19036],"fullWord":2147},{"subwords":[1837,1851,1856,1881,2127,2148,2151,2160,2178,2185,2237,9325,9335,9360,12406,12463,12481,12574,12700,12702,12887,18894,19036,19060],"fullWord":2148},{"subwords":[1671,1685,1721,2127,2134,2149,2237,5637,5953,12331,12353,12374,12481,12528,12533,12574,12581,12876,18607,18619,18981,19036,19038,19054],"fullWord":2149},{"subwords":[1671,1682,1837,1851,2127,2134,2150,5637,5953,9297,9360,12331,12353,12406,12448,12481,12528,12533,12700,12876],"fullWord":2150},{"subwords":[51,67,647,691,1332,1359,1422,1440,1763,1837,1850,1851,1858,1877,2029,2034,2127,2128,2153,2154,9307,9360,9366,12219,12223,12406,12409,12481,12489,12560,12700,12701,15986,16765,16858,17259,17308,17383],"fullWord":2154},{"subwords":[1671,2072,2127,2134,2136,2157,2158,2205,2211,2212,2446,2465,5637,5953,12331,12481,12548,12876,12959,12979,14995,15238,15576,15579,15610,21255,21260,21297,21299],"fullWord":2158},{"subwords":[1671,1684,2127,2134,2138,2153,2157,2159,5637,5638,5918,5953,5955,12331,12332,12481,12489,12506,12560,12561,12876,12879,17259,17308,17383,21255,21297,21301],"fullWord":2159},{"subwords":[1560,1636,1938,1981,2058,2059,2102,2106,2113,2160,2163,2164,4587,4618,4728,5114,5146,5756,10378,10443,10748,10753,10754,10756,10780,10833,12709,12712,12752,12837,12845,12846],"fullWord":2163},{"subwords":[1604,1696,2072,2079,2160,2165,2180,2205,2446,5718,5988,5989,7771,7788,7826,7827,7855,12709,12798,12959,12979,14995,15141,15576,15579,15610],"fullWord":2165},{"subwords":[1604,1797,1851,2079,2085,2160,2166,5718,7567,7771,7826,12700,12709],"fullWord":2166},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2142,2151,2160,2167,2178,7604,7771,7826,7841,9360,12406,12481,12509,12700],"fullWord":2167},{"subwords":[1560,2058,2059,2160,2164,2168,2169,4618,5114,12709,12752],"fullWord":2169},{"subwords":[2072,2160,2168,2170,2180,2205,2446,2456,2471,9849,12709,12959,12979,14995,15576,15579,15610,15648],"fullWord":2170},{"subwords":[1809,1851,2160,2168,2171,12700,12709,12834],"fullWord":2171},{"subwords":[1560,2058,2059,2160,2164,2173,2174,4618,4763,4764,5114,5163,5165,5193,11817,11831,11833,11844,11921,11923,11926,12709,12752],"fullWord":2174},{"subwords":[1700,2072,2160,2173,2175,2180,2205,2446,2460,2473,11539,11817,11921,11936,11937,11970,12709,12861,12959,12979,14995,15202,15576,15579,15610,15627,15632,15633,15652],"fullWord":2175},{"subwords":[2160,2182,2183,2184,2185,2191,2230,2237,17308,17315,17399,17404,17434,17435,17436,18540,19060,19125],"fullWord":2184},{"subwords":[1560,1721,2058,2059,2160,2164,2185,2186,2237,4618,4630,5114,5234,5237,12709,12752,18981,18983,19060],"fullWord":2186},{"subwords":[1576,1591,1721,1725,2160,2185,2187,2237,12709,18576,18981,19060],"fullWord":2187},{"subwords":[2160,2182,2183,2185,2188,2189,2191,2223,2237,2242,8705,8709,8712,8713,8838,8842,8887,8892,8901,8935,12809,12810,12895,12898,16686,16691,16704,17308,17399,17401,17435,18540,18743,19060,19123],"fullWord":2189},{"subwords":[1721,1851,1881,1884,2160,2185,2190,2237,12700,12702,12709,18844,18981,19060],"fullWord":2190},{"subwords":[1560,2058,2059,2160,2164,2193,2194,2305,4618,5114,5292,5293,12709,12752,12906,12907,21249,21304],"fullWord":2194},{"subwords":[2072,2160,2180,2193,2195,2205,2305,2446,12709,12906,12959,12979,14995,15576,15579,15610,21260,21304],"fullWord":2195},{"subwords":[2160,2182,2193,2196,2305,2306,12709,12710,12906,12908,17308,21304,21311],"fullWord":2196},{"subwords":[1560,2058,2059,2197,2198,4618,5114,5200,12752,12916,12933,13478,13569,14020,14130,14131,14237],"fullWord":2198},{"subwords":[2072,2197,2199,2205,2446,12916,12933,12959,12979,13569,13577,14130,14131,14147,14262,14278,14350,14352,14379,14995,15011,15248,15576,15579,15610,15663],"fullWord":2199},{"subwords":[51,269,299,817,1256,1366,1377,1386,1535,1604,1696,2029,2030,2072,2079,2201,2205,2308,2317,2319,2446,5588,5718,5976,5988,5989,7242,7375,7377,7380,7461,7771,7788,7855,7900,12680,12798,12959,12979,14758,14762,14995,15141,15576,15579,15610],"fullWord":2201},{"subwords":[31,51,58,72,817,911,1009,1366,1377,1462,1464,1535,1542,1721,1722,2029,2030,2037,2040,2072,2202,2205,2219,2237,2308,2317,2349,2446,5588,5620,5976,5982,6055,12680,12686,12688,12955,12959,12979,13008,14898,14901,14995,15312,15576,15579,15610,15691,15694,15748,18302,18315,18432,18449,18453,18463,18541,18554,18981,19093,19094,19101],"fullWord":2202},{"subwords":[1560,2058,2059,2072,2204,2205,2207,2384,2446,4618,4810,5114,5115,6008,12752,12959,12960,12974,12979,14995,15060,15078,15576,15579,15580,15600,15603,15610],"fullWord":2204},{"subwords":[43,44,51,385,399,472,817,1301,1304,1366,1377,1535,1636,1915,1933,2029,2030,2072,2100,2106,2205,2206,2308,2317,2446,5588,5592,5976,10061,10068,10324,10355,10443,10748,10749,10753,10882,12680,12845,12948,12959,12979,14968,14995,15576,15579,15586,15610,15621],"fullWord":2206},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2210,2211,2424,2429,2434,2439,2446,7604,7771,8015,8045,9360,9400,12406,12481,12509,12513,12548,12700,12959,12961,12995,15402,15461,15494,15576,15583,15584],"fullWord":2210},{"subwords":[1671,2072,2127,2134,2136,2151,2160,2178,2180,2205,2211,2212,2213,2214,2446,5637,5953,12331,12481,12548,12709,12876,12959,12979,14995,15238,15576,15579,15610],"fullWord":2213},{"subwords":[2127,2151,2152,2153,2160,2178,2179,2180,2181,2182,2211,2214,2215,2227,2446,2476,12481,12489,12548,12560,12959,12964,13007,15576,15590,17259,17308,17383,17397],"fullWord":2215},{"subwords":[2160,2180,2216,2271,2446,2480,12959,15576,15734,20903],"fullWord":2216},{"subwords":[2217,2223,2446,2476,3617,3624,3944,8705,8713,8714,8857,8874,8934,12810,12959,12964,12965,12968,12971,13007,15386,15576,15590,15592,15599,17308,17316],"fullWord":2217},{"subwords":[2218,2219,2220,2223,2237,2242,2446,2476,2477,2478,8705,8713,8857,8874,8879,8887,8892,8901,8934,8935,12810,12959,12964,13007,13008,13009,13011,15386,15576,15590,15691,15700,16701,16704,17308,17429,17435,18540,18743,18749,18777,18779,18780,19093,19113,19123],"fullWord":2218},{"subwords":[1851,2160,2180,2222,2305,2439,2446,12700,12959,15402,15576,21304,21312],"fullWord":2222},{"subwords":[2160,2173,2176,2182,2224,2225,2230,11817,11823,11921,11941,12002,12082,12872,17308,17315,17434],"fullWord":2225},{"subwords":[2160,2173,2176,2177,2182,2224,2226,2300,2302,2303,2304,11817,11823,11921,11941,12872,17308,17472],"fullWord":2226},{"subwords":[2127,2151,2152,2153,2160,2178,2179,2182,2227,2228,2230,12481,12489,12560,17259,17261,17308,17315,17383,17395,17397,17434],"fullWord":2228},{"subwords":[2229,2264,2668,14635,14650,14694,14700,16416,17308,18035,18066,19876],"fullWord":2229},{"subwords":[1560,1574,1715,2058,2059,2062,2069,2230,2232,4618,4629,4826,5114,5117,5221,5223,5227,5229,6039,12752,12755,17308,17315,17323,17332,17434],"fullWord":2232},{"subwords":[1715,2230,2233,6039,12714,17308,17315,17434],"fullWord":2233},{"subwords":[2127,2151,2152,2153,2160,2178,2179,2182,2183,2185,2191,2227,2234,2237,12481,12489,12560,12574,12591,12887,17259,17267,17278,17308,17383,17397,17399,17435,18540,19036,19057,19060],"fullWord":2234},{"subwords":[2127,2153,2155,2230,2235,2236,2577,2600,2668,2687,12481,12489,12560,12597,12614,12622,12888,17259,17261,17288,17290,17308,17315,17383,17395,17434,18035,18043,18117,18130],"fullWord":2236},{"subwords":[51,72,693,716,1332,1462,1480,1502,2029,2037,2127,2128,2156,2237,2238,2300,12219,12293,12311,12481,12574,12575,12686,18302,18408,18432,19036,19059,19186,21183],"fullWord":2238},{"subwords":[2237,2239,2240,2242,2300,3617,3965,4029,8705,8714,8892,18743,18806,19186],"fullWord":2240},{"subwords":[1989,2115,2237,2241,2300,6854,6868,10748,10788,10792,10897,12785,19186],"fullWord":2241},{"subwords":[1703,1721,2072,2205,2219,2237,2242,2243,2446,2477,8552,8554,8575,8705,8725,8728,8857,8892,12959,12979,13008,13009,13036,14995,15312,15386,15576,15579,15610,15691,15694,15748,18697,18743,18749,18777,18779,18781,18981,19093,19101],"fullWord":2243},{"subwords":[1636,1661,1721,1989,2106,2115,2237,2244,10443,10460,10748,10753,10897,12845,18981,19017,19131,19134],"fullWord":2244},{"subwords":[2160,2173,2185,2237,2245,11817,11921,11943,12010,12032,13043,19026,19028,19060,19066,19131,19143],"fullWord":2245},{"subwords":[1636,1971,2004,2106,2246,2251,3580,3584,3617,3701,3708,4242,4248,4268,5650,10443,10470,10748,10753,10760,10961,12845],"fullWord":2246},{"subwords":[2074,2247,2530,2534,5950,6868,6874,12771,19580],"fullWord":2247},{"subwords":[2079,2091,2092,2223,2248,2249,2537,2545,2668,2673,7771,7780,7871,8166,8705,8713,8731,8737,8936,8940,8951,8958,12810,17308,17439,18035,19583,19584,19592],"fullWord":2249},{"subwords":[2079,2237,2242,2248,2250,2268,2537,2697,7771,7874,7875,7886,8175,8705,8731,8892,8936,8951,9026,13046,13059,18743,18759,18796,18993,19151,19390,19418,19583],"fullWord":2250},{"subwords":[1636,1994,2004,2008,2106,2108,2119,2251,2252,2264,2668,10323,10443,10447,10470,10748,10753,10755,10758,10888,10925,10961,10962,12845,12848,13053,16402,17096,17097,17128,17308,17354,17359,17442,18035,18066,19876],"fullWord":2252},{"subwords":[1671,2127,2134,2253,2577,2580,3617,3777,3786,4242,4248,4268,5637,5653,5856,5953,12331,12481,12614,12874,12876,13049,19655],"fullWord":2253},{"subwords":[2127,2156,2254,2300,2577,2580,2607,2710,3617,3777,3825,4029,4242,12481,12614,19655,21183,21193],"fullWord":2254},{"subwords":[2058,2069,2127,2130,2133,2153,2155,2235,2255,2256,2517,2527,2577,2582,2584,2600,2668,5172,5188,5221,5445,5451,5507,5522,5523,5524,12481,12489,12493,12501,12503,12560,12597,12614,12622,12888,17259,17288,17308,17323,17383,17445,18035,18117,19664],"fullWord":2256},{"subwords":[2127,2156,2237,2257,2268,2300,2577,2602,2607,2697,2710,12481,12574,12614,12659,13059,19036,19059,19186,19390,19434,19780,21183,21193],"fullWord":2257},{"subwords":[2079,2091,2092,2258,2259,2446,2476,2537,2545,2610,2615,2622,2656,2668,7771,7780,8079,8081,12959,12964,13007,13051,13052,15576,15590,15749,15764,15790,15794,17308,17451,18035,19840,19844],"fullWord":2259},{"subwords":[1671,2072,2127,2134,2136,2205,2211,2212,2260,2261,2446,2577,2610,2638,5637,5953,12331,12481,12548,12614,12876,12959,12979,13051,14995,15238,15576,15579,15610,15706,15749,15755,15777,15821,15822,19751,19840,19866],"fullWord":2261},{"subwords":[2127,2153,2155,2211,2235,2260,2262,2446,2476,2577,2600,2610,2638,2643,2656,2668,12481,12489,12548,12560,12597,12614,12622,12888,12959,12964,13007,13051,13052,15576,15590,15749,15764,15821,15832,17259,17288,17308,17383,17451,18035,18042,18117,19840,19844,19866,19867],"fullWord":2262},{"subwords":[2072,2073,2205,2208,2263,2264,2446,2476,2610,2656,2662,2668,6004,12959,12964,12979,12982,13007,13051,13052,14995,15014,15018,15576,15579,15582,15590,15610,15611,15676,15706,15708,15716,15749,15755,15757,15764,15777,15782,15840,16423,17308,17312,17419,17451,18035,18066,18071,18150,19840,19844,19876,19880],"fullWord":2263},{"subwords":[1560,1574,2058,2059,2062,2069,2264,2265,2517,2527,2668,2671,4618,4629,4826,4849,5114,5117,5221,5223,5263,5445,5451,5471,5478,5523,5524,12752,12755,17308,17323,18035,18066,18067,19876,19877],"fullWord":2265},{"subwords":[1715,2230,2264,2266,2668,2672,2687,6039,17308,17315,17434,17457,18035,18043,18066,18073,19876,19882],"fullWord":2266},{"subwords":[1671,1837,1851,2127,2134,2270,5637,5942,5953,9360,12331,12387,12406,12481,12700,12876,13093,13102,20008,20129,20152,20157,20164,20262],"fullWord":2270},{"subwords":[1636,1659,1660,1949,1996,1999,2106,2108,2271,2273,2274,2280,2284,2287,2288,5754,5755,10323,10443,10447,10748,10753,10755,10758,10888,10942,10952,12845,12848,13110,13112,13114,13118,16475,17059,17096,17097,17121,17308,17354,17359,17464,18262,20519,20523,20875,20877],"fullWord":2274},{"subwords":[2072,2073,2205,2208,2271,2275,2276,2287,2288,2396,2399,2446,2476,2480,2484,2485,6004,12959,12964,12979,12982,13007,13110,13112,14995,15014,15302,15576,15579,15582,15590,15610,15611,15676,15734,15744,16423,16445,16475,17308,17312,17419,17464,17466,18262,18272,20519,20523,20875,20877,20933,20947],"fullWord":2276},{"subwords":[1749,2072,2205,2271,2275,2277,2291,2300,2396,2446,2480,2721,2730,12696,12959,12979,13110,13145,14995,15576,15579,15610,15734,15866,20519,20875,20933,21010,21016,21138,21189,21202],"fullWord":2277},{"subwords":[1837,1851,2127,2271,2278,6390,6520,6593,6868,9257,9360,12406,12481,12606,12700,13119,20774,20804,20897],"fullWord":2278},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2271,2279,7604,7771,7892,9360,12406,12481,12509,12606,12700,13113,13119,20742,20774,20790,20804,20897],"fullWord":2279},{"subwords":[1560,1636,1659,1938,1949,1996,2058,2059,2102,2106,2271,2272,2273,2280,2281,4587,4618,4728,4865,5114,5146,5271,5754,5756,10378,10443,10490,10748,10753,10754,10780,10942,10944,12752,12837,12845,13110,13111,13114,20519,20524,20566,20875,20883],"fullWord":2281},{"subwords":[1604,1636,1659,1949,1996,2079,2087,2106,2271,2273,2280,2282,5718,5754,7477,7525,7696,7698,7718,7771,10398,10443,10748,10753,10793,10796,10942,12792,12845,13110,13114,20519,20875],"fullWord":2282},{"subwords":[1636,1659,1949,1996,1998,2072,2106,2205,2271,2273,2275,2280,2283,2396,2446,2480,5754,10443,10748,10753,10882,10942,10945,12845,12959,12979,13110,13114,14995,15576,15579,15586,15610,15621,15734,15739,20519,20875,20933],"fullWord":2283},{"subwords":[51,1158,1332,2029,2127,2128,2271,2285,11213,11265,11399,11810,11817,11891,12066,12071,12219,12244,12481,12522,12606,13119,20393,20890,20892,20897],"fullWord":2285},{"subwords":[1671,2127,2134,2271,2286,5637,5815,5909,5953,11512,11536,11595,11817,11891,12066,12071,12331,12390,12481,12522,12525,12606,12866,12876,13110,13119,20519,20579,20875,20892,20896,20897],"fullWord":2286},{"subwords":[1560,1574,2058,2059,2062,2069,2271,2272,2287,2288,2289,4618,4629,4826,4865,4873,5114,5117,5221,5223,5282,5283,12752,12755,13110,13111,13112,16475,17308,17323,17464,17465,18262,20519,20523,20524,20531,20875,20877],"fullWord":2289},{"subwords":[1715,2230,2271,2287,2288,2290,6039,13110,13112,16475,16482,17308,17315,17434,17464,17470,18262,20519,20523,20875,20877],"fullWord":2290},{"subwords":[1749,2072,2205,2271,2275,2277,2291,2300,2396,2446,2480,2721,2730,12696,12959,12979,13110,13145,14995,15576,15579,15610,15734,15866,20519,20875,20933,21010,21016,21138,21189,21202],"fullWord":2291},{"subwords":[27,51,796,809,1366,2029,2030,2049,2203,2292,2293,2308,2446,2738,2941,2946,2981,3612,3617,3622,4052,12680,12959,12965,12966,15576,15592],"fullWord":2293},{"subwords":[2072,2073,2205,2208,2292,2294,2295,2296,2446,2476,6004,12959,12964,12979,12982,13007,13131,14995,15014,15373,15576,15579,15582,15590,15610,15611,15676,16423,16483,17308,17312,17419,17471],"fullWord":2295},{"subwords":[2292,2297,6821,6822,6851,6868,6999,7017,10748,10953,11058,19580],"fullWord":2297},{"subwords":[1790,1851,2072,2205,2292,2294,2298,2417,2439,2446,9070,9384,12700,12959,12979,14995,15373,15402,15576,15579,15610],"fullWord":2298},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2292,2299,7604,7771,9360,12406,12474,12481,12509,12700],"fullWord":2299},{"subwords":[1851,1858,2223,2300,2301,2304,8678,8705,8713,8739,12700,12701,12810,16758,16765,17308,17472],"fullWord":2301},{"subwords":[27,30,93,94,95,121,122,796,800,817,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,2308,2309,2310,2315,2317,2376,2384,2738,2745,2766,2780,2941,2949,2954,2955,3111,4052,4427,4431,4516,4607,4618,4619,4639,4810,5303,5588,5976,14717,14718,14736,14961,14995,15021,15028,15060],"fullWord":2310},{"subwords":[27,93,95,121,796,817,1366,1377,1380,1413,1535,2308,2309,2311,2317,2738,2745,2941,2954,2958,4052,5588,5976,6008,14717,14720,14872,14983,14995,15021],"fullWord":2311},{"subwords":[27,67,93,95,96,121,123,796,810,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2309,2312,2317,2318,2343,2738,2745,2746,2757,2941,2954,2960,3001,3021,4052,4054,5588,5599,5976,5977,6023,14717,14722,14881,14995,15014,15021,15048,15869,15880,16111,16142,16145,16270,16286,16298,16419,16423],"fullWord":2312},{"subwords":[27,67,72,126,134,796,810,905,911,918,1366,1419,1422,1456,1462,1482,2308,2313,2314,2343,2349,2350,2738,2757,2941,3001,3003,3011,3041,3052,3064,4052,4054,4238,4241,14898,14912,15880,16041,16111,16142,16157,17723,17773,18302,18318,18449,18472,18540,19381],"fullWord":2314},{"subwords":[1256,1262,1366,1502,2308,2319,2320,2364,7242,7267,7375,7377,7395,7447,7900,7961,14758,14767,14939,15864],"fullWord":2320},{"subwords":[0,317,504,505,787,869,1210,1269,1366,2308,2322,8290,8346,11276,14775,14808],"fullWord":2322},{"subwords":[67,325,869,883,905,932,1269,1366,1419,1422,1431,2308,2323,2343,2344,8290,8296,8346,8349,8362,8934,11276,11314,11317,11330,11335,14775,14808,14820,14886,15973,16531],"fullWord":2323},{"subwords":[67,200,326,336,349,359,854,905,1243,1254,1366,1372,1376,1419,1422,1763,1777,1788,1867,1871,2308,2315,2316,2324,2325,2343,4427,4430,4461,4901,4908,5037,5039,5303,5305,5362,5363,9127,9376,9409,14715,14736,14751,14776,14779,15402,15410,15428,15443,15893,15928,16028,16765,16889,17722],"fullWord":2325},{"subwords":[67,337,340,349,359,385,392,860,905,1272,1279,1307,1366,1419,1422,1438,1763,2308,2326,2327,2343,2346,9376,9409,10061,10071,10121,10125,10323,10502,10503,10504,10512,10513,10516,10675,10676,14780,14783,15399,15400,15402,15410,15931,15942,16028,16765,16889,16999,17722],"fullWord":2327},{"subwords":[67,349,359,647,691,905,1280,1281,1332,1359,1366,1406,1407,1419,1422,1440,1763,1837,1850,2308,2328,2329,2337,2342,2343,2400,2429,9307,9376,9378,9409,12219,12223,12276,12406,12409,14784,14786,14821,14838,14839,15402,15410,15986,16028,16765,16858,16889,17722],"fullWord":2329},{"subwords":[349,361,716,1280,1332,1366,1406,1408,1502,1837,1839,2308,2328,2330,2337,2364,2400,2429,2438,2503,9376,9378,12219,12282,12311,12406,14784,14787,14821,14838,14939,15402,15864,21075,21144],"fullWord":2330},{"subwords":[67,349,359,817,825,858,863,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,1763,1790,1791,2308,2317,2318,2331,2343,2417,2423,5588,5599,5976,5977,9376,9384,9389,9409,14716,14788,14881,14995,15014,15402,15410,15526,15869,16028,16270,16286,16419,16423,16424,16765,16889,16890,17722],"fullWord":2331},{"subwords":[349,817,1286,1366,1377,1535,1790,2308,2317,2332,2368,2417,5588,5976,9376,9384,9455,14945,14995,15402,21233,21245],"fullWord":2332},{"subwords":[30,817,867,1243,1246,1288,1289,1290,1366,1372,1377,1378,1395,1396,1515,1521,1535,1536,1560,2308,2315,2317,2333,2334,2376,2378,2384,4427,4516,4522,4607,4618,4619,4620,4810,5303,5316,5355,5588,5976,9849,14736,14798,14799,14961,14995,15060],"fullWord":2334},{"subwords":[67,817,825,867,868,905,906,950,953,1288,1290,1291,1293,1366,1377,1381,1395,1398,1419,1422,1425,1428,1444,1521,1524,1535,1539,1894,2308,2317,2318,2333,2335,2343,2378,2379,5588,5599,5976,5977,9849,9851,10038,14798,14802,14881,14995,15014,15869,15939,16270,16286,16419,16423],"fullWord":2335},{"subwords":[27,796,801,1235,1269,1332,1366,1406,2308,2337,2338,2738,2869,2941,3206,4052,12219,12270,14775,14821,14822],"fullWord":2338},{"subwords":[67,200,605,610,905,1243,1254,1332,1336,1340,1359,1366,1372,1376,1406,1407,1419,1422,2308,2315,2316,2337,2339,2340,2342,2343,4427,4430,4492,4532,4536,5303,5305,12219,12223,12274,14736,14751,14821,14826,14828,15893,15986,15988],"fullWord":2340},{"subwords":[605,716,1243,1332,1336,1341,1366,1372,1406,1408,1502,2308,2315,2337,2339,2341,2364,2503,4427,4492,4532,4578,5303,5337,5430,12219,12274,12282,12311,14736,14821,14826,14829,14939,15864,21068,21075],"fullWord":2341},{"subwords":[67,325,905,932,944,1269,1366,1419,1422,1431,1502,1507,2308,2343,2344,2345,2364,2367,8362,8420,8428,8934,14775,14886,14939,14944,15864,15865,16103,16572,16758,21212],"fullWord":2345},{"subwords":[67,337,340,349,359,385,392,860,905,1272,1279,1307,1366,1419,1422,1438,1763,2308,2326,2327,2343,2346,9376,9409,10061,10071,10121,10125,10323,10502,10503,10504,10512,10513,10516,10675,10676,14780,14783,15399,15400,15402,15410,15931,15942,16028,16765,16889,16999,17722],"fullWord":2346},{"subwords":[67,82,905,973,1366,1419,1422,1448,1455,1502,1507,2308,2343,2347,2348,2364,2367,14939,14944,15864,15865,16103,16109,21212],"fullWord":2348},{"subwords":[72,911,919,1047,1366,1462,1488,1502,2308,2349,2351,2364,14898,14919,14939,15864,18302,18449,18476,18495,19231,19377,19389],"fullWord":2351},{"subwords":[30,204,206,817,1106,1109,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,2308,2315,2317,2352,2353,2376,2384,4427,4516,4569,4607,4618,4619,4810,4851,5303,5329,5588,5976,14736,14921,14922,14961,14995,15060,15337,19910,19990,20053],"fullWord":2353},{"subwords":[817,1106,1109,1366,1377,1380,1413,1535,2308,2317,2352,2354,5588,5976,6008,14872,14921,14927,14983,14995,15337,20053],"fullWord":2354},{"subwords":[67,817,825,905,906,1106,1109,1110,1114,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2317,2318,2343,2352,2355,5588,5599,5976,5977,14881,14921,14929,14995,15014,15337,15354,15869,16076,16078,16270,16286,16419,16423,19967,20053,20056,20070,20071],"fullWord":2355},{"subwords":[51,67,905,1366,1419,1422,2029,2030,2033,2034,2308,2343,2356,2357,2446,2476,12680,12683,12959,12964,13007,13087,15576,15590,15673,16083,17303,17308],"fullWord":2357},{"subwords":[67,385,392,905,1155,1157,1366,1419,1422,1498,1501,2308,2343,2358,2359,2360,10061,10071,10292,10299,10323,14933,14938,15942,16089,16999,17037,18179,20410,20442,20449],"fullWord":2360},{"subwords":[67,905,1158,1161,1332,1359,1366,1406,1407,1419,1422,2308,2337,2342,2343,2358,2361,2362,12219,12223,14821,14933,14938,15986,16089,16095,18179,18195,20393,20410,20432,20435,20442,20449],"fullWord":2362},{"subwords":[716,1158,1166,1332,1366,1406,1408,1502,2308,2337,2358,2361,2363,2364,2503,12219,12282,12311,14821,14933,14939,15864,20393,20410,20432,20448,20493,21010,21075,21079,21085],"fullWord":2363},{"subwords":[30,227,817,1196,1243,1246,1366,1372,1377,1378,1502,1503,1515,1519,1535,1536,1560,1749,2308,2315,2317,2364,2365,2376,2384,2721,2730,4427,4516,4578,4607,4613,4618,4619,4810,4814,4815,5303,5337,5430,5567,5570,5588,5976,14736,14939,14940,14961,14966,14995,15060,15864,15866,21068,21071,21097,21099,21128],"fullWord":2365},{"subwords":[227,817,1196,1366,1377,1380,1413,1502,1535,1702,1749,2308,2317,2364,2366,2721,2730,5588,5976,6008,14872,14939,14983,14995,15864,15866,21071,21073,21097,21099,21128],"fullWord":2366},{"subwords":[30,213,817,1243,1246,1366,1372,1377,1378,1515,1535,1536,1560,2308,2315,2317,2368,2369,2376,2384,4427,4516,4584,4607,4618,4619,4810,5303,5588,5976,14736,14945,14946,14961,14995,15060,21245,21249],"fullWord":2369},{"subwords":[817,1366,1377,1535,1576,1587,2308,2317,2368,2370,5588,5976,5984,14945,14947,14995,21245,21251],"fullWord":2370},{"subwords":[50,817,1332,1342,1366,1377,1406,1530,1535,1671,2308,2317,2337,2368,2371,5588,5595,5976,12219,12229,12319,12331,14821,14945,14995,21245,21255],"fullWord":2371},{"subwords":[817,1366,1377,1380,1413,1535,2308,2317,2368,2372,5588,5976,6008,14872,14945,14948,14983,14995,21245],"fullWord":2372},{"subwords":[67,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2317,2318,2343,2368,2373,5588,5599,5976,5977,14881,14945,14950,14995,15014,15869,16270,16286,16419,16423,21245,21246],"fullWord":2373},{"subwords":[337,349,385,1272,1307,1366,2308,2326,2374,9376,9455,10061,10121,10502,10504,10512,10675,14780,15399,15402],"fullWord":2374},{"subwords":[27,93,95,98,121,796,801,817,1235,1269,1366,1377,1512,1535,2308,2309,2317,2375,2738,2745,2941,2954,3206,3209,4052,5582,5588,5976,8333,8453,8552,8554,14717,14775,14958,14995,15021,15376],"fullWord":2375},{"subwords":[30,67,200,817,825,905,906,1243,1246,1254,1366,1372,1374,1376,1377,1378,1381,1419,1422,1425,1426,1428,1515,1518,1535,1536,1537,1539,1560,1574,2308,2315,2316,2317,2318,2343,2376,2377,2384,4427,4430,4516,4520,4607,4611,4618,4619,4621,4629,4810,4826,5303,5305,5588,5599,5976,5977,14736,14751,14881,14882,14961,14965,14995,15014,15060,15087,15869,15878,15893,16270,16286,16419,16423],"fullWord":2377},{"subwords":[67,817,825,867,868,905,906,950,953,1288,1290,1291,1293,1366,1377,1381,1395,1398,1419,1422,1425,1428,1444,1521,1524,1535,1539,1894,2308,2317,2318,2333,2335,2343,2378,2379,5588,5599,5976,5977,9849,9851,10038,14798,14802,14881,14995,15014,15869,15939,16270,16286,16419,16423],"fullWord":2379},{"subwords":[67,513,514,817,825,869,883,905,906,1366,1377,1381,1419,1422,1425,1428,1526,1528,1535,1539,1665,1666,1700,1701,2308,2317,2318,2343,2380,2381,5588,5599,5803,5805,5845,5976,5977,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14881,14975,14978,14995,15014,15202,15224,15869,15973,15978,16270,16278,16286,16419,16423,17161],"fullWord":2381},{"subwords":[31,32,67,72,817,825,905,906,911,918,993,1009,1366,1377,1381,1382,1419,1422,1425,1428,1456,1457,1459,1462,1464,1467,1482,1535,1539,1540,1542,1545,1716,1721,1722,1724,1736,2308,2317,2318,2343,2349,2350,2382,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14995,15014,15306,15312,15748,15869,16041,16043,16270,16286,16293,16419,16423,16457,17723,17773,17775,18302,18306,18318,18449,18453,18455,18472,18540,18541,18554,18557,18559,19381],"fullWord":2382},{"subwords":[31,72,817,911,1009,1269,1270,1366,1377,1462,1464,1468,1469,1471,1535,1542,1703,1704,1721,1722,2308,2317,2349,2383,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8453,8458,8461,8552,8554,14775,14898,14901,14995,15312,15376,15748,18302,18449,18453,18541,18554,18697],"fullWord":2383},{"subwords":[1576,1577,1587,2386,3248,4120,5984,8483,8552,8554,8562,14995,15000,15021],"fullWord":2386},{"subwords":[1560,1574,1576,1587,1588,1590,2384,2385,2387,2388,4618,4629,4678,4679,4680,4810,4826,5984,14995,15014,15060,15071,15087,15093,15096,16311,16319,16320,16340,16423,16425,16426],"fullWord":2388},{"subwords":[1576,1587,1589,1749,2389,2721,2730,5698,5984,6189,6196,14995,15866,21251],"fullWord":2389},{"subwords":[1671,1685,1721,2072,2127,2134,2136,2205,2211,2212,2219,2237,2390,2391,2446,5637,5953,12331,12374,12481,12548,12574,12581,12583,12590,12876,12959,12979,13008,14995,15238,15241,15312,15576,15579,15610,15691,15694,15748,18607,18621,18649,18981,19036,19038,19040,19093,19101,19105],"fullWord":2391},{"subwords":[1576,1587,1588,1590,2392,2393,5984,6092,6100,6104,14995,15014,15337,15354,16319,16340,16423,16425,16449,16472,19992,19996,19998,20000,20053,20056,20070,20073],"fullWord":2393},{"subwords":[1576,1587,1591,1694,1721,1725,2392,2394,5984,6092,6100,6101,14995,15312,15337,15748,18576,19240,19992,19996,20053,20080,20095],"fullWord":2394},{"subwords":[1560,1566,1576,1587,2384,2385,2387,2396,2397,4618,4678,4810,4865,5361,5984,6118,6119,14995,15060,15093,15362,20519,20521,20524,20532,20533,20587],"fullWord":2397},{"subwords":[1576,1587,2396,2398,5984,6008,6118,6119,14995,20519,20521,20532,20587],"fullWord":2398},{"subwords":[67,349,359,905,1366,1419,1422,1763,2308,2343,2401,2402,9376,9409,15402,15410,16028,16765,16889,17722],"fullWord":2402},{"subwords":[349,361,1366,1502,2308,2364,2401,2403,9376,14939,15402,15864],"fullWord":2403},{"subwords":[1560,1767,1777,1780,1782,1790,1867,2384,2404,2405,2413,2417,4618,4714,4810,4905,4935,5023,5362,5632,9384,9385,14995,15005,15060,15402,15405,15428,15433],"fullWord":2405},{"subwords":[1576,1587,1767,1790,2404,2406,2417,5632,5735,5984,5995,9384,14995,14998,15402],"fullWord":2406},{"subwords":[1767,1790,2404,2407,2417,2420,5632,6008,9384,14995,15402,15406],"fullWord":2407},{"subwords":[1767,1772,1790,1791,2404,2408,2417,2423,5632,5635,9384,9389,9409,14995,15014,15402,15410,15526,16423,16765,16889,16890,17722],"fullWord":2408},{"subwords":[1894,2409,2410,2442,4151,4152,9396,9399,9409,10041,15402,15410,15422,15425,15534,16178,16765,16769,16772,16889,16954,17722],"fullWord":2410},{"subwords":[2409,2411,4151,4232,9096,9101,9396,15402,15422],"fullWord":2411},{"subwords":[326,337,349,385,854,1243,1272,1296,1307,1366,1372,1777,1867,2308,2315,2324,2326,2412,4427,4587,4891,5303,5362,9376,10061,10090,10119,10121,10122,10202,10502,10504,10512,10530,10531,10675,14715,14736,14776,14780,15399,15402,15403,15428],"fullWord":2412},{"subwords":[1560,1574,1777,1780,1782,1783,1784,1788,1790,1791,1867,1871,2384,2413,2414,2417,2423,4618,4628,4629,4714,4810,4826,4908,4935,4939,5023,5037,5362,5363,5367,9111,9127,9384,9385,9389,9409,14995,15005,15006,15014,15060,15087,15402,15410,15428,15433,15436,15443,15526,16423,16765,16780,16889,16890,16891,17722],"fullWord":2414},{"subwords":[1560,1604,1613,1696,1777,1780,1782,1790,1797,1867,2384,2413,2415,2417,2424,4618,4714,4810,4935,4947,5023,5028,5351,5362,5988,7567,7568,7569,7617,7997,9384,9385,14995,15005,15060,15141,15402,15428,15433,15437,15461],"fullWord":2415},{"subwords":[1560,1636,1777,1780,1782,1790,1817,1867,1938,2384,2413,2416,2417,4587,4618,4714,4728,4739,4810,4935,5023,5362,5756,9117,9119,9384,9385,10378,10414,10504,10509,10514,10530,10536,10537,10549,10677,14995,15005,15060,15402,15428,15433,15444,15473,15474],"fullWord":2416},{"subwords":[1790,1791,2417,2418,2419,2423,6390,6520,6523,6524,6525,6526,6528,6543,6621,6622,6626,6636,7085,9135,9384,9389,9409,14995,15014,15114,15134,15402,15410,15446,15526,16423,16431,16437,16765,16889,16890,17722],"fullWord":2419},{"subwords":[1790,1791,2417,2420,2421,2423,6008,6016,9384,9389,9409,14995,15014,15402,15410,15526,15528,16423,16765,16889,16890,17722],"fullWord":2421},{"subwords":[1702,1749,1790,2417,2420,2422,2721,2730,6008,6202,9384,14995,15402,15866],"fullWord":2422},{"subwords":[1797,1801,1873,1881,2424,2425,2444,7628,7630,7637,8035,8688,15402,15461,15464,19280],"fullWord":2425},{"subwords":[1560,1671,1673,1777,1780,1782,1790,1837,1840,1841,1867,2384,2413,2417,2429,2430,2431,4618,4714,4774,4810,4935,4985,4988,4990,5023,5362,5865,5996,9206,9384,9385,12331,12358,12406,14995,15005,15008,15060,15175,15227,15402,15428,15433,15491],"fullWord":2431},{"subwords":[1671,1790,1837,2417,2420,2429,2430,2432,5996,6008,9384,12331,12406,14995,15175,15402],"fullWord":2432},{"subwords":[1671,1684,1789,1790,1791,1837,1844,1850,2417,2423,2429,2430,2433,5918,5996,6000,9307,9384,9389,9409,12331,12332,12406,12409,14995,15014,15175,15177,15296,15402,15410,15500,15526,15527,16423,16439,16765,16858,16860,16889,16890,16893,17722],"fullWord":2433},{"subwords":[1797,1837,1850,2424,2426,2429,2434,2435,7573,7604,7611,7626,8015,8019,9307,9409,12406,12409,15402,15410,15461,15472,15494,15497,16765,16815,16858,16866,16889,17722],"fullWord":2435},{"subwords":[1837,1850,1894,2429,2436,2437,2442,9276,9284,9307,9396,9399,9409,9913,9929,10041,12406,12409,15402,15410,15498,15499,15534,16765,16858,16876,16889,16954,16974,17722],"fullWord":2437},{"subwords":[1837,1851,2127,2156,2211,2300,2429,2438,2439,2440,2446,2733,9360,9400,9406,12406,12481,12513,12548,12700,12959,15402,15576,15583,21144,21183,21186],"fullWord":2440},{"subwords":[1894,2442,2443,9396,9399,9409,9941,10041,15402,15410,15534,15537,16765,16766,16889,16899,16903,16954,16985,17722],"fullWord":2443},{"subwords":[1837,1851,1856,1881,2127,2211,2219,2237,2429,2439,2444,2445,2446,9325,9335,9338,9340,9360,9400,12406,12463,12469,12481,12513,12548,12574,12700,12702,12959,12962,13008,15402,15504,15576,15583,15691,18894,18945,19036,19093,19105,19292],"fullWord":2445},{"subwords":[27,33,51,796,801,809,1235,1269,1366,2029,2030,2049,2308,2446,2447,2738,2941,2946,2981,3206,3617,3622,4052,8696,8705,8714,8857,8858,12680,12959,12965,12966,12968,14775,15386,15560,15576,15592],"fullWord":2447},{"subwords":[51,67,183,197,200,201,905,1243,1254,1366,1372,1376,1419,1422,2029,2030,2031,2032,2033,2034,2058,2069,2308,2315,2316,2343,2446,2448,2449,2476,4427,4430,5094,5216,5217,5221,5303,5305,12680,12683,12959,12964,13007,14736,14751,15561,15563,15576,15590,15600,15609,15673,15893,16030,17303,17308,17323,17324],"fullWord":2449},{"subwords":[1894,2056,2057,2446,2450,2451,2476,3617,3624,3906,3909,12959,12964,12965,12971,13007,15576,15590,15592,15593,15597,15599,17308,17316,17319],"fullWord":2451},{"subwords":[51,299,837,1256,1332,1345,1366,1406,1409,2029,2030,2079,2127,2128,2140,2211,2308,2319,2337,2446,2452,7242,7251,7375,7377,7380,7771,7900,8038,12219,12230,12481,12509,12548,12680,12951,12959,12983,14758,14821,14832,15568,15576],"fullWord":2452},{"subwords":[1604,1696,2072,2079,2205,2258,2446,2453,2537,2610,2615,5718,5988,5989,7771,7788,7855,8079,12798,12959,12979,13051,14995,15141,15576,15579,15610,15614,15706,15709,15749,15755,15777,15790,19840,19855],"fullWord":2453},{"subwords":[1851,1852,1858,2095,2098,2439,2441,2446,2454,2455,2476,9409,10323,10504,10516,10748,10758,10885,12700,12701,12812,12822,12959,12964,13007,15402,15410,15576,15590,15617,15619,16765,16837,16889,17096,17308,17350,17354,17364,17722],"fullWord":2455},{"subwords":[1671,2072,2127,2134,2136,2205,2211,2212,2446,2456,2457,5637,5953,9836,9841,9849,9855,9988,10044,12331,12481,12548,12876,12959,12979,14995,15238,15576,15579,15610],"fullWord":2457},{"subwords":[2072,2205,2446,2456,2458,6008,9849,12959,12979,14995,15576,15579,15610],"fullWord":2458},{"subwords":[2110,2300,2446,2459,10748,10887,12959,15576,15623],"fullWord":2459},{"subwords":[2160,2173,2176,2180,2181,2182,2224,2446,2460,2461,2473,2474,2476,11817,11823,11921,11936,11939,11941,12872,12959,12964,13007,15576,15590,15627,15638,15652,15655,17308],"fullWord":2461},{"subwords":[2127,2151,2160,2178,2180,2211,2214,2446,2462,2463,3617,3777,3826,3852,3913,4186,12481,12548,12959,12965,15576,15592],"fullWord":2463},{"subwords":[2127,2153,2211,2446,2462,2464,2476,3617,3624,3777,3814,3913,3919,12481,12489,12548,12560,12959,12964,12965,12971,13007,15576,15590,15592,15599,16203,17259,17308,17316,17383],"fullWord":2464},{"subwords":[1671,2072,2127,2134,2136,2157,2158,2205,2211,2212,2446,2465,5637,5953,12331,12481,12548,12876,12959,12979,14995,15238,15576,15579,15610,21255,21260,21297,21299],"fullWord":2465},{"subwords":[2127,2156,2211,2300,2446,2466,2733,12481,12548,12959,15576,21183],"fullWord":2466},{"subwords":[2160,2180,2446,2467,3617,3675,3826,8705,8709,8714,8857,12809,12895,12959,12965,12968,15386,15576,15592],"fullWord":2467},{"subwords":[2058,2069,2160,2180,2181,2182,2446,2468,2469,2476,5196,5197,5216,5221,12762,12764,12959,12964,12976,12977,13007,15576,15590,15600,15609,15642,15643,17308,17323],"fullWord":2469},{"subwords":[2058,2070,2160,2180,2300,2302,2446,2468,2470,5196,5220,5430,12762,12959,12976,15576,15600,15642,21154],"fullWord":2470},{"subwords":[1894,2160,2168,2172,2180,2181,2182,2446,2471,2472,2476,12959,12964,13007,15576,15590,15648,15651,17308],"fullWord":2472},{"subwords":[2160,2173,2176,2180,2181,2182,2224,2446,2460,2461,2473,2474,2476,11817,11823,11921,11936,11939,11941,12872,12959,12964,13007,15576,15590,15627,15638,15652,15655,17308],"fullWord":2474},{"subwords":[2160,2173,2177,2180,2300,2302,2446,2460,2473,2475,11817,11921,11936,11940,12959,15576,15627,15652,15656],"fullWord":2475},{"subwords":[2218,2219,2220,2223,2237,2242,2446,2476,2477,2478,8705,8713,8857,8874,8879,8887,8892,8901,8934,8935,12810,12959,12964,13007,13008,13009,13011,15386,15576,15590,15691,15700,16701,16704,17308,17429,17435,18540,18743,18749,18777,18779,18780,19093,19113,19123],"fullWord":2478},{"subwords":[2219,2221,2237,2242,2300,2446,2477,2479,8705,8857,8892,12959,13008,13009,15386,15576,15691,18743,18749,18777,18779,18806,19093,19122,19186,19347,19377,19573],"fullWord":2479},{"subwords":[2127,2153,2211,2271,2287,2446,2476,2480,2481,2482,2484,12481,12489,12548,12560,12606,12610,12959,12964,13007,13119,13124,15576,15590,15734,15744,17259,17284,17308,17383,17464,17469,18262,18273,20897,20944],"fullWord":2482},{"subwords":[2127,2156,2211,2271,2300,2446,2480,2481,2483,2733,12481,12548,12606,12959,13119,15576,15734,20897,20944,21010,21183,21202],"fullWord":2483},{"subwords":[2072,2073,2205,2208,2271,2275,2276,2287,2288,2396,2399,2446,2476,2480,2484,2485,6004,12959,12964,12979,12982,13007,13110,13112,14995,15014,15302,15576,15579,15582,15590,15610,15611,15676,15734,15744,16423,16445,16475,17308,17312,17419,17464,17466,18262,18272,20519,20523,20875,20877,20933,20947],"fullWord":2485},{"subwords":[1837,1850,2429,2487,2488,2577,2600,2610,2627,2628,2638,2643,2656,2668,9307,9409,12406,12409,12614,12622,15402,15410,15749,15764,15795,15799,15821,15832,16765,16858,16889,17288,17722,18035,18083,18117,19840,19844,19866,19867],"fullWord":2488},{"subwords":[1790,1791,2417,2423,2489,2610,2626,2656,2662,2668,2680,9384,9389,9409,14995,15014,15018,15402,15410,15526,15749,15755,15757,15760,15764,15777,15782,15840,16423,16765,16796,16889,16890,17722,18035,18066,18071,18083,18150,19840,19844,19876,19880],"fullWord":2489},{"subwords":[1881,1889,2444,2490,2491,2498,2610,2656,2664,2668,2690,2697,2700,9409,9447,15402,15410,15749,15764,15852,15858,15861,16765,16889,16907,16917,17722,17881,17994,18035,18083,18085,18540,18947,19390,19403,19840,19844],"fullWord":2491},{"subwords":[2492,2577,2578,2610,2638,3378,3396,4242,4312,4317,8936,8989,12614,15749,15821,19840,19866],"fullWord":2492},{"subwords":[1671,1685,1721,2390,2493,2494,2498,2500,2577,2602,2604,2610,2638,2641,2644,2697,12331,12374,12614,12659,14995,15019,15241,15312,15748,15749,15755,15777,15821,15822,15833,15858,18607,18649,19356,19390,19397,19399,19434,19438,19440,19476,19840,19866],"fullWord":2493},{"subwords":[2494,2495,2498,2577,2600,2602,2605,2610,2638,2643,2644,2656,2664,2668,2690,2697,2700,12614,12622,12659,12663,15749,15764,15821,15832,15833,15834,15852,15858,15861,17288,17994,18005,18035,18117,18540,19390,19403,19434,19452,19476,19480,19840,19844,19866,19867],"fullWord":2495},{"subwords":[2496,2497,2610,2656,2667,2668,2673,2678,2696,2710,2714,8934,8936,8940,15749,15764,15765,15842,15847,16737,16758,18035,19592,19840,19844,21212],"fullWord":2497},{"subwords":[72,77,385,488,911,1366,1462,1922,2021,2026,2308,2349,2498,2499,2610,2630,2697,10061,14898,15749,15858,18302,18319,18449,18508,19390,19391,19392,19605,19608,19837,19840],"fullWord":2499},{"subwords":[1560,1721,2384,2498,2500,2501,2517,2610,2697,4618,4630,4637,4810,5417,5445,5471,5479,14995,15019,15060,15312,15318,15748,15749,15755,15773,15777,15778,15858,19356,19357,19390,19397,19398,19399,19465,19840],"fullWord":2501},{"subwords":[1716,1721,1736,2498,2500,2502,2610,2656,2662,2664,2668,2690,2692,2697,2700,6018,14995,15014,15018,15019,15020,15306,15312,15748,15749,15755,15757,15764,15777,15782,15840,15852,15858,15861,16423,16457,17994,18035,18066,18071,18074,18150,18540,19356,19359,19390,19397,19399,19400,19401,19403,19840,19844,19876,19880],"fullWord":2502},{"subwords":[2127,2156,2211,2300,2446,2504,2733,12481,12548,12959,15576,21183],"fullWord":2504},{"subwords":[1510,1636,2004,2505,2506,2550,5632,10470,10961],"fullWord":2506},{"subwords":[2042,2048,2264,2505,2507,2508,2509,2668,5632,5635,17308,18035,18066,19876],"fullWord":2508},{"subwords":[1556,1560,2510,2511,2517,4242,4248,4250,4263,4268,4269,4278,4618,4639,4651,5445,5455,5457,5471,5489,19595],"fullWord":2511},{"subwords":[1556,2486,2510,2512,2610,2629,4242,4248,4251,4268,4278,4312,4317,4326,5654,9849,14995,15021,15749,15755,15766,15777,19595,19840],"fullWord":2512},{"subwords":[1556,1721,2510,2513,2697,4242,4248,4268,4278,4375,4376,6057,19390,19397,19405,19595],"fullWord":2513},{"subwords":[1556,1636,2004,2510,2514,2559,3580,3584,4242,4248,4268,4278,5778,10416,10470,10961,10969,10987,19595],"fullWord":2514},{"subwords":[27,796,867,1070,1236,1366,1395,2308,2510,2515,2610,2738,2941,4052,4242,4243,4312,4317,14729,15749,15766,19840],"fullWord":2515},{"subwords":[1560,2517,2518,4618,5445,5466,5467,5471],"fullWord":2518},{"subwords":[1560,2384,2517,2519,2610,4618,4810,5417,5445,5466,5467,5471,14995,15060,15062,15749,15755,15773,15777,15778,19578,19840],"fullWord":2519},{"subwords":[148,1053,1243,1269,1490,2517,2520,4427,4438,4562,5440,5445,5466,8217,8936],"fullWord":2520},{"subwords":[1560,1604,2517,2521,2522,2537,4618,4634,5445,5466,5467,5471,5485],"fullWord":2522},{"subwords":[1560,1573,1604,1696,2384,2517,2521,2523,2537,2610,2615,4618,4634,4810,5351,5417,5420,5445,5471,5485,5988,8079,14995,15060,15063,15141,15749,15755,15773,15777,15778,15790,19840,19855,19856],"fullWord":2523},{"subwords":[1560,1574,1604,1617,2517,2521,2524,2527,2537,2545,2668,2671,4618,4629,4634,4635,4826,4849,5445,5451,5471,5478,5485,5488,7460,18035,18066,18067,19876,19877],"fullWord":2524},{"subwords":[1560,1604,1721,2517,2521,2525,2537,2697,4618,4630,4634,4637,5445,5471,5479,5485,7540,8175,19390,19397,19398,19418],"fullWord":2525},{"subwords":[1560,1604,1777,1780,1797,2517,2521,2526,2537,4618,4634,4714,4935,4947,5445,5471,5485,7567,7568,8112,9449],"fullWord":2526},{"subwords":[67,73,712,1332,1342,1344,1359,1422,1425,1530,1534,1546,1547,1671,1684,2528,2577,2600,2668,5627,5918,12219,12223,12229,12331,12332,12614,12622,15986,15995,16270,17288,18035,18066,18117,19871,19876],"fullWord":2528},{"subwords":[1671,1684,2127,2134,2138,2153,2155,2235,2264,2529,2577,2600,2668,5637,5638,5918,5953,5955,12331,12332,12481,12489,12506,12560,12561,12597,12614,12622,12876,12879,12888,17259,17288,17308,17383,18035,18066,18117,19876],"fullWord":2529},{"subwords":[1560,2517,2530,2531,4618,5445,5471,5481,6406,6501],"fullWord":2531},{"subwords":[2530,2532,2610,7194,14995,15015,15114,15749,15755,15777,15783,19840],"fullWord":2532},{"subwords":[1721,2530,2533,2697,5705,19390,19397,19414],"fullWord":2533},{"subwords":[2074,2078,2530,2534,2535,2536,2668,6868,6870,12771,12783,17308,18035,19580,19581],"fullWord":2535},{"subwords":[1576,1604,1749,2537,2538,2710,2721,6189,7467,8180],"fullWord":2538},{"subwords":[1560,1604,2517,2521,2537,2539,4618,4634,5445,5471,5485,5709],"fullWord":2539},{"subwords":[1604,1696,2537,2540,2610,2615,5709,5988,8079,14995,15141,15749,15755,15777,15790,19840,19855],"fullWord":2540},{"subwords":[1560,1604,1636,1929,1938,2004,2005,2517,2521,2537,2541,2542,2554,2555,4587,4618,4634,4728,5445,5471,5472,5485,5756,7477,7478,7722,7723,10378,10398,10470,10961,10981,10982],"fullWord":2542},{"subwords":[1604,1636,1696,2004,2007,2021,2537,2541,2543,2554,2556,2610,2615,2620,2630,5988,7477,7722,7724,8079,8083,10398,10470,10961,10981,10982,11029,14995,15141,15749,15755,15761,15777,15790,15800,19840,19855],"fullWord":2543},{"subwords":[1604,1617,1636,2004,2008,2537,2541,2544,2545,2554,2557,2668,7477,7486,7722,7726,10323,10398,10412,10470,10961,10962,10981,10982,10983,10986,17128,17131,18035,18066,19876],"fullWord":2544},{"subwords":[1894,2510,2516,2546,2547,2668,4242,4262,16178,16765,16769,16772,16954,18035,18051,18083],"fullWord":2547},{"subwords":[1777,1788,2517,2527,2548,2549,2668,4587,4908,5037,5445,5451,9127,9449,9450,10323,10504,10516,10530,10535,16765,17068,18035,18083],"fullWord":2549},{"subwords":[25,385,1230,1231,1366,1367,1510,1895,2021,2022,2308,2505,2550,2551,2610,2630,10061,15749,19837,19840],"fullWord":2551},{"subwords":[1510,1560,1636,1938,2004,2005,2505,2517,2550,2552,4587,4618,4728,5445,5471,5472,5632,5756,10378,10470,10961],"fullWord":2552},{"subwords":[1560,1604,1636,1929,1938,2004,2005,2517,2521,2537,2541,2542,2554,2555,4587,4618,4634,4728,5445,5471,5472,5485,5756,7477,7478,7722,7723,10378,10398,10470,10961,10981,10982],"fullWord":2555},{"subwords":[1604,1636,1696,2004,2007,2021,2537,2541,2543,2554,2556,2610,2615,2620,2630,5988,7477,7722,7724,8079,8083,10398,10470,10961,10981,10982,11029,14995,15141,15749,15755,15761,15777,15790,15800,19840,19855],"fullWord":2556},{"subwords":[1604,1617,1636,2004,2008,2537,2541,2544,2545,2554,2557,2668,7477,7486,7722,7726,10323,10398,10412,10470,10961,10962,10981,10982,10983,10986,17128,17131,18035,18066,19876],"fullWord":2557},{"subwords":[2021,2537,2558,2610,2615,2630,8079,8164,10981,15749,15790,19840],"fullWord":2558},{"subwords":[1560,1636,1938,2004,2005,2517,2559,2560,4587,4618,4728,5445,5471,5472,5489,5756,5778,10378,10416,10470,10961,10987,19595],"fullWord":2560},{"subwords":[1560,1636,1648,1938,2004,2005,2517,2563,2564,4587,4618,4728,4744,5445,5471,5472,5492,5756,5780,10378,10470,10961],"fullWord":2564},{"subwords":[1636,1648,1661,1721,2004,2011,2563,2565,2697,5780,10460,10470,10961,11050,18591,19390,19397,19425,19605],"fullWord":2565},{"subwords":[1510,1636,2004,2505,2550,2567,2568,5632,5782,5846,10470,10961,12110,19612],"fullWord":2568},{"subwords":[1837,2567,2569,2577,2590,9077,9276,9913,11697,11721,12406,12443,12614,12646],"fullWord":2569},{"subwords":[1560,2517,2567,2570,4618,5445,5471,5499,5846,12091,12127],"fullWord":2570},{"subwords":[1700,2567,2571,2610,5846,11539,12127,14995,15202,15749,15755,15777,15806,19614,19840],"fullWord":2571},{"subwords":[1560,2517,2567,2572,2573,4618,5445,5471,5499,5503,5525,5526,5846,12091,13478,14428,14438,19624,19625],"fullWord":2573},{"subwords":[1700,2567,2572,2574,2610,2645,5846,11539,13577,13593,13602,14262,14428,14518,14995,15202,15248,15747,15749,15755,15777,15806,15815,19614,19624,19840],"fullWord":2574},{"subwords":[2577,2578,2579,2710,3378,4242,8936,8989,12614],"fullWord":2579},{"subwords":[2127,2153,2155,2235,2577,2580,2581,2600,2668,3617,3624,3777,3814,3821,4242,4262,12481,12489,12560,12597,12614,12622,12888,17259,17288,17308,17316,17383,18035,18117,19655,19659],"fullWord":2581},{"subwords":[1560,1636,1671,1673,1938,1944,2004,2005,2517,2577,2582,2583,4587,4618,4728,4774,5445,5471,5472,5507,5511,5756,5865,10378,10427,10470,10961,11008,12331,12614,12624,19717],"fullWord":2583},{"subwords":[1560,1604,1620,1671,1673,2517,2521,2537,2577,2582,2585,2586,4618,4634,4774,5445,5471,5485,5507,5511,5513,5865,7493,7759,8151,12331,12614,12624,12629],"fullWord":2586},{"subwords":[1604,1620,1636,1671,2004,2018,2537,2541,2554,2577,2585,2587,7477,7493,7680,7722,7759,8151,10398,10470,10961,10981,10982,11008,11012,11013,12331,12614],"fullWord":2587},{"subwords":[1837,1851,2127,2577,2589,2597,9297,9360,9369,12406,12481,12528,12594,12614,12651,12700,13048,19696],"fullWord":2589},{"subwords":[1560,1671,1673,2517,2577,2582,2590,2591,4618,4636,4774,5445,5471,5489,5507,5511,5516,5865,9836,12331,12614,12624,12640,19595],"fullWord":2591},{"subwords":[1671,2577,2590,2592,2610,2629,2638,9836,9849,9855,12331,12614,12640,14995,15749,15755,15777,15821,15822,19595,19840,19866],"fullWord":2592},{"subwords":[1894,2127,2153,2155,2235,2577,2590,2593,2594,2595,2600,2668,9988,9990,12481,12489,12560,12597,12614,12622,12888,17259,17288,17308,17383,18035,18117,18126],"fullWord":2594},{"subwords":[2567,2577,2590,2596,12614,12646,19784],"fullWord":2596},{"subwords":[1671,1684,2577,2597,2598,2600,2601,2668,5918,12331,12332,12614,12622,12651,12654,17288,18035,18066,18117,19876],"fullWord":2601},{"subwords":[1560,1671,1673,1685,1721,2517,2577,2582,2602,2603,2697,4618,4630,4637,4774,4788,5445,5471,5479,5507,5511,5865,12331,12374,12614,12624,12659,18607,18610,19390,19397,19398,19434,19438,19439],"fullWord":2603},{"subwords":[1671,1685,1721,2390,2493,2494,2498,2500,2577,2602,2604,2610,2638,2641,2644,2697,12331,12374,12614,12659,14995,15019,15241,15312,15748,15749,15755,15777,15821,15822,15833,15858,18607,18649,19356,19390,19397,19399,19434,19438,19440,19476,19840,19866],"fullWord":2604},{"subwords":[657,716,1332,1502,2577,2597,2599,2606,2710,12219,12252,12311,12614,12651,21215],"fullWord":2606},{"subwords":[1560,1749,2058,2059,2070,2300,2517,2607,2608,2710,2721,4618,5114,5445,5471,5523,5567,12696,12752,21154,21193],"fullWord":2608},{"subwords":[1510,1636,2004,2007,2021,2022,2505,2550,2610,2611,2630,5632,10470,10960,10961,11029,14995,15749,15753,15755,15761,15777,15800,19840],"fullWord":2611},{"subwords":[1510,2021,2022,2505,2550,2610,2612,2630,2636,2667,2710,15749,15754,15765,19840],"fullWord":2612},{"subwords":[1560,1671,1673,2384,2517,2577,2582,2610,2613,2638,2639,4618,4774,4810,5417,5445,5471,5507,5511,5539,5865,12331,12358,12614,12624,12626,14995,15060,15227,15749,15755,15773,15777,15778,15821,15822,19645,19660,19840,19866],"fullWord":2613},{"subwords":[817,1366,1377,1535,1546,2308,2317,2610,2614,5588,5627,5976,14995,15749,15755,15777,19840,19847],"fullWord":2614},{"subwords":[1576,1587,1604,1696,2537,2610,2615,2616,5984,5988,7467,7975,8079,14995,15141,15749,15755,15777,15790,19840,19855],"fullWord":2616},{"subwords":[1604,1696,2537,2610,2615,2617,2648,5988,6008,8079,14995,15141,15749,15755,15777,15780,15790,19840,19855,19858],"fullWord":2617},{"subwords":[2496,2537,2545,2610,2615,2618,2619,2622,2656,2668,2673,8079,8081,8166,8934,8936,8940,8951,8958,15749,15764,15790,15794,15842,16737,16739,18035,19583,19584,19592,19840,19844],"fullWord":2619},{"subwords":[1604,1636,1696,2004,2007,2021,2537,2541,2543,2554,2556,2610,2615,2620,2630,5988,7477,7722,7724,8079,8083,10398,10470,10961,10981,10982,11029,14995,15141,15749,15755,15761,15777,15790,15800,19840,19855],"fullWord":2620},{"subwords":[2079,2160,2180,2258,2446,2537,2610,2615,2621,7771,7826,8079,12959,13051,15576,15749,15790,19840],"fullWord":2621},{"subwords":[337,349,385,1272,1307,1366,2021,2308,2326,2610,2623,2630,9376,10061,10121,10502,10504,10512,10675,14780,15399,15402,15749,19837,19840],"fullWord":2623},{"subwords":[1560,1777,1780,1782,1790,1867,2384,2413,2417,2517,2610,2624,4618,4714,4810,4935,5023,5362,5417,5445,5471,9384,9385,9449,14995,15005,15060,15402,15428,15433,15749,15755,15758,15773,15777,15778,19840],"fullWord":2624},{"subwords":[1790,2417,2420,2610,2625,2648,6008,9384,14995,15402,15749,15755,15759,15777,15780,19840],"fullWord":2625},{"subwords":[1790,1791,2417,2423,2489,2610,2626,2656,2662,2668,2680,9384,9389,9409,14995,15014,15018,15402,15410,15526,15749,15755,15757,15760,15764,15777,15782,15840,16423,16765,16796,16889,16890,17722,18035,18066,18071,18083,18150,19840,19844,19876,19880],"fullWord":2626},{"subwords":[1837,1850,2429,2487,2488,2577,2600,2610,2627,2628,2638,2643,2656,2668,9307,9409,12406,12409,12614,12622,15402,15410,15749,15764,15795,15799,15821,15832,16765,16858,16889,17288,17722,18035,18083,18117,19840,19844,19866,19867],"fullWord":2628},{"subwords":[385,481,1366,2021,2308,2610,2630,2631,2645,10061,10182,13204,13286,13391,14428,14536,14851,15749,19837,19840],"fullWord":2631},{"subwords":[1560,1636,1938,2004,2005,2007,2021,2384,2517,2610,2630,2632,4587,4618,4728,4810,5417,5445,5471,5472,5756,10378,10470,10961,11029,11030,14995,15060,15749,15755,15761,15773,15777,15778,15800,15801,19840],"fullWord":2632},{"subwords":[1636,2004,2007,2021,2610,2630,2633,2648,6008,10470,10961,11029,11031,14995,15749,15755,15761,15777,15780,15800,15802,19840],"fullWord":2633},{"subwords":[1636,1706,1749,2004,2007,2012,2021,2610,2630,2634,2636,2667,2710,2711,2721,2730,10470,10495,10961,11029,11065,11074,14995,15201,15749,15755,15761,15765,15777,15800,15866,19840,21222],"fullWord":2634},{"subwords":[1560,1671,1673,2384,2517,2577,2582,2610,2613,2638,2639,4618,4774,4810,5417,5445,5471,5507,5511,5539,5865,12331,12358,12614,12624,12626,14995,15060,15227,15749,15755,15773,15777,15778,15821,15822,19645,19660,19840,19866],"fullWord":2639},{"subwords":[1671,2577,2610,2638,2640,2648,6008,12331,12614,14995,15278,15749,15755,15777,15780,15821,15822,19840,19866],"fullWord":2640},{"subwords":[1671,1685,1721,2390,2493,2494,2498,2500,2577,2602,2604,2610,2638,2641,2644,2697,12331,12374,12614,12659,14995,15019,15241,15312,15748,15749,15755,15777,15821,15822,15833,15858,18607,18649,19356,19390,19397,19399,19434,19438,19440,19476,19840,19866],"fullWord":2641},{"subwords":[1671,1790,1837,2417,2429,2430,2487,2577,2610,2627,2638,2642,5996,9344,9384,12331,12406,12614,14995,15175,15402,15749,15755,15777,15795,15821,15822,19840,19864,19866],"fullWord":2642},{"subwords":[1560,2384,2517,2610,2645,2646,4618,4810,5417,5428,5445,5471,5525,5526,5528,13478,13577,13579,13602,14262,14404,14428,14438,14518,14995,15060,15248,15749,15755,15773,15777,15778,19840],"fullWord":2646},{"subwords":[1560,2384,2517,2610,2648,2649,4618,4810,5417,5445,5471,6008,14995,15060,15749,15755,15773,15775,15777,15778,15780,19840],"fullWord":2649},{"subwords":[2610,2648,2650,6008,14995,15749,15755,15777,15780,19840],"fullWord":2650},{"subwords":[2446,2476,2610,2648,2651,2652,2654,2656,2668,12959,12964,13007,13051,13052,15576,15590,15749,15764,17308,17451,18035,19840,19844],"fullWord":2652},{"subwords":[2271,2446,2480,2610,2648,2651,2653,12959,13051,15576,15734,15749,19840],"fullWord":2653},{"subwords":[67,73,75,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,1546,1547,2308,2317,2318,2343,2610,2656,2657,2658,2662,2668,5588,5599,5627,5976,5977,14881,14995,15014,15018,15749,15755,15757,15764,15777,15782,15840,15869,16270,16286,16419,16423,18035,18066,18071,18150,19840,19844,19847,19849,19868,19869,19871,19876,19880],"fullWord":2658},{"subwords":[67,385,392,905,1366,1419,1422,2021,2025,2308,2343,2610,2630,2635,2656,2657,2659,2668,10061,10071,10323,15749,15764,15942,16999,17141,18035,19837,19840,19844,19868,19871],"fullWord":2659},{"subwords":[67,905,1366,1419,1422,2308,2343,2610,2648,2654,2656,2657,2660,2668,15749,15764,18035,19840,19844,19868,19871],"fullWord":2660},{"subwords":[67,905,973,1366,1419,1422,1448,2308,2343,2347,2610,2656,2657,2661,2668,2687,15749,15764,18035,18043,19840,19844,19868,19871,19886],"fullWord":2661},{"subwords":[1715,2610,2656,2662,2663,2668,2672,2687,6039,14995,15014,15018,15749,15755,15757,15764,15777,15782,15840,15841,15849,16423,18035,18043,18066,18071,18072,18073,18150,19840,19844,19876,19880,19881,19882,19886],"fullWord":2663},{"subwords":[2498,2610,2656,2664,2665,2668,2687,2690,2694,2697,2700,15749,15764,15852,15856,15858,15861,17994,17996,18035,18043,18540,19371,19390,19403,19840,19844,19886],"fullWord":2665},{"subwords":[2127,2211,2219,2237,2260,2268,2446,2494,2498,2577,2602,2610,2638,2644,2666,2697,12481,12548,12574,12614,12659,12959,13008,13051,13059,15576,15691,15722,15749,15821,15833,15858,19036,19093,19105,19155,19390,19434,19462,19476,19780,19840,19866],"fullWord":2666},{"subwords":[2042,2048,2267,2300,2304,2505,2507,2509,2607,2609,2668,2669,2670,2696,2710,2714,17308,17472,18035,21193],"fullWord":2669},{"subwords":[1560,1574,2517,2527,2668,2671,2673,2674,4618,4629,4826,4849,5445,5451,5471,5478,8936,8940,8945,8946,8947,16574,16581,18035,18066,18067,19592,19876,19877],"fullWord":2674},{"subwords":[1636,2004,2008,2028,2668,2673,2675,8936,8940,8945,8947,10323,10470,10961,10962,11039,16574,16746,17128,18035,18066,19592,19876],"fullWord":2675},{"subwords":[2496,2610,2656,2662,2668,2673,2676,8552,8554,8556,8584,8934,8936,8940,8945,8947,14995,15014,15018,15749,15755,15757,15764,15777,15782,15840,15842,16423,16574,16737,18035,18066,18071,18150,19592,19840,19844,19876,19880,19883],"fullWord":2676},{"subwords":[1715,2668,2672,2673,2677,2687,6039,8936,8940,8945,8947,16574,16609,18035,18043,18066,18073,19592,19876,19882],"fullWord":2677},{"subwords":[1560,1574,1777,1780,1784,1788,2517,2527,2668,2671,2679,4618,4629,4714,4826,4849,4908,4935,4939,5037,5445,5451,5471,5478,9111,9127,9449,9450,16765,16780,18035,18066,18067,18083,19876,19877],"fullWord":2679},{"subwords":[1790,1791,2417,2423,2489,2610,2626,2656,2662,2668,2680,9384,9389,9409,14995,15014,15018,15402,15410,15526,15749,15755,15757,15760,15764,15777,15782,15840,16423,16765,16796,16889,16890,17722,18035,18066,18071,18083,18150,19840,19844,19876,19880],"fullWord":2680},{"subwords":[1715,2668,2672,2681,2687,6039,9431,16765,16766,16903,18035,18043,18066,18073,18083,19876,19882],"fullWord":2681},{"subwords":[2668,2682,2696,2710,2714,10323,10504,10516,16765,16767,17149,18035,18083],"fullWord":2682},{"subwords":[1797,1837,1850,2537,2545,2577,2585,2588,2600,2668,2683,7573,7604,7611,7759,7760,8151,8160,9307,12406,12409,12614,12622,16765,16815,16858,16866,17288,17292,18035,18083,18084,18117,18125,19885],"fullWord":2683},{"subwords":[1837,1850,1894,2577,2590,2595,2600,2668,2684,9276,9284,9307,9913,9929,12406,12409,12614,12622,16765,16858,16876,16954,16974,17288,18035,18083,18117,18126],"fullWord":2684},{"subwords":[67,586,712,1332,1359,1422,2567,2576,2577,2600,2668,2685,11213,11247,11262,11330,12219,12223,12244,12614,12622,12646,12650,15973,15986,17288,18035,18103,18117,19871],"fullWord":2685},{"subwords":[1671,1684,2567,2576,2577,2600,2668,2686,5845,5846,5847,5918,11512,11524,11534,11535,12152,12331,12332,12614,12622,12646,12650,17288,18035,18066,18103,18117,19876],"fullWord":2686},{"subwords":[1560,1574,1715,2517,2527,2668,2671,2672,2687,2688,4618,4629,4826,4849,5445,5451,5471,5478,6039,18035,18043,18062,18066,18067,18073,19876,19877,19882],"fullWord":2688},{"subwords":[1715,2668,2672,2687,2689,6039,18035,18043,18066,18073,19876,19882],"fullWord":2689},{"subwords":[1560,1574,1716,1721,1736,2517,2527,2668,2671,2690,2691,2697,2700,4618,4629,4630,4633,4637,4638,4826,4849,5445,5451,5471,5478,5479,5480,5548,16457,17994,17999,18035,18066,18067,18074,18540,18575,19390,19397,19398,19401,19403,19876,19877],"fullWord":2691},{"subwords":[1716,1721,1736,2498,2500,2502,2610,2656,2662,2664,2668,2690,2692,2697,2700,6018,14995,15014,15018,15019,15020,15306,15312,15748,15749,15755,15757,15764,15777,15782,15840,15852,15858,15861,16423,16457,17994,18035,18066,18071,18074,18150,18540,19356,19359,19390,19397,19399,19400,19401,19403,19840,19844,19876,19880],"fullWord":2692},{"subwords":[1636,1661,1663,1716,1721,1736,1948,2004,2008,2009,2011,2668,2690,2693,2697,2700,10323,10459,10460,10465,10470,10961,10962,11044,11050,11053,16457,17128,17147,17994,18035,18040,18045,18066,18074,18540,19390,19397,19401,19403,19422,19605,19876],"fullWord":2693},{"subwords":[31,72,77,693,694,1009,1074,1332,1342,1362,1462,1464,1530,1542,1546,1548,1671,1685,1721,1722,2577,2602,2697,2698,5620,5627,6055,6074,12219,12229,12300,12325,12331,12374,12614,12659,18302,18319,18408,18508,18541,18607,19390,19391,19397,19434,19435,19438],"fullWord":2698},{"subwords":[1636,1661,1721,2004,2007,2011,2021,2026,2498,2500,2610,2630,2697,2699,10460,10470,10961,11029,11050,14995,15019,15312,15748,15749,15755,15761,15777,15800,15858,19356,19390,19397,19399,19605,19840],"fullWord":2699},{"subwords":[1560,1721,2517,2697,2701,2702,2703,4618,4630,4637,5445,5471,5479,19390,19397,19398,19493],"fullWord":2703},{"subwords":[1721,2498,2500,2610,2697,2701,2702,2704,14995,15019,15312,15748,15749,15755,15777,15858,19356,19390,19397,19399,19493,19840,19900],"fullWord":2704},{"subwords":[1716,1721,1736,2668,2690,2697,2700,2701,2702,2705,2707,16457,17846,17994,18035,18066,18074,18540,18662,19390,19397,19401,19403,19493,19498,19876],"fullWord":2705},{"subwords":[2127,2237,2268,2577,2602,2697,2701,2706,12481,12574,12614,12659,13059,18969,19036,19131,19160,19390,19434,19493,19780],"fullWord":2706},{"subwords":[2668,2690,2695,2696,2697,2700,2708,2709,2710,2714,10323,11044,11049,17147,17149,17994,18018,18035,18046,18540,19390,19403,19605],"fullWord":2709},{"subwords":[1749,1751,2610,2656,2662,2667,2668,2696,2710,2711,2712,2714,2721,2722,2730,2731,14995,15014,15018,15749,15755,15757,15764,15765,15777,15782,15840,15866,15867,16423,18035,18066,18071,18077,18150,19840,19844,19876,19880,21130,21212],"fullWord":2712},{"subwords":[1797,1837,2537,2577,2585,2710,2713,7604,7759,8151,8180,12406,12614,21144],"fullWord":2713},{"subwords":[1560,2517,2715,2716,4618,5445,5471,21247,21249],"fullWord":2716},{"subwords":[2610,2715,2717,14995,15749,15755,15777,19840,21247],"fullWord":2717},{"subwords":[2668,2715,2718,18035,18066,18078,19876,21247,21248,21268],"fullWord":2718},{"subwords":[67,596,1158,1161,1210,1215,1332,1359,1422,2719,2720,12219,12223,12283,15986,16089,16095,18179,18195,20393,20449],"fullWord":2720},{"subwords":[1604,1671,1749,2079,2081,2093,2127,2134,2139,2140,2156,2300,2721,2723,5637,5639,5718,5953,7493,7771,7781,7815,7895,12331,12481,12509,12696,12876,21120,21183],"fullWord":2723},{"subwords":[49,67,385,392,1155,1157,1422,1498,1501,1502,1507,2724,2725,10061,10071,10292,10299,10304,10313,10323,15942,16089,16103,16999,17037,17039,17149,18179,18217,20449,20493,20496,21079,21082,21084,21093],"fullWord":2725},{"subwords":[1636,1671,1749,1817,1837,2721,2726,9293,10414,10495,10504,10536,10544,10625,10636,10662,11065,12331,12406,12438,12439,21120,21144],"fullWord":2726},{"subwords":[67,82,961,972,973,1422,1448,1455,1502,1507,2307,2727,13336,13344,13424,13436,16014,16020,16103,16109,17476,17507,17518,17520,17697,21064,21067],"fullWord":2727},{"subwords":[72,781,1269,1270,1462,1468,1502,2728,8321,8378,8420,13364,13375,13424,18302,18436,18806,21064],"fullWord":2728},{"subwords":[49,385,481,1502,2729,10061,10182,10304,13204,13424,13932,14009,21064,21094],"fullWord":2729},{"subwords":[51,183,1243,1366,1372,1502,2029,2030,2031,2058,2070,2300,2308,2315,2364,2446,2448,2732,4427,4578,5220,5303,5337,5430,12680,12959,14736,14939,15561,15576,15600,15864,21068,21154],"fullWord":2732},{"subwords":[67,1422,1502,1507,2735,2736,16089,16103,18179,18217,20449,20493,20496,21079,21093,21094],"fullWord":2736},{"subwords":[2058,2070,2271,2300,2446,2480,2737,5220,5281,5430,12959,15576,15600,15734,15737,20929,20932,21010,21154,21202],"fullWord":2737},{"subwords":[27,385,386,1210,1213,2738,2739,2740,2813,10061,10072],"fullWord":2740},{"subwords":[27,67,382,385,386,392,1210,1213,1214,1215,1327,1422,1423,2738,2739,2741,2757,2813,3017,10061,10071,10072,10323,15880,15942,16111,16999],"fullWord":2741},{"subwords":[27,596,1210,1332,2738,2742,2869,12219],"fullWord":2742},{"subwords":[17,27,93,1219,1767,2738,2743,3402,5632,9079],"fullWord":2743},{"subwords":[27,67,93,95,96,121,123,796,810,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2309,2312,2317,2318,2343,2738,2745,2746,2757,2941,2954,2960,3001,3021,4052,4054,5588,5599,5976,5977,6023,14717,14722,14881,14995,15014,15021,15048,15869,15880,16111,16142,16145,16270,16286,16298,16419,16423],"fullWord":2746},{"subwords":[27,67,647,691,1332,1359,1422,1435,1440,1763,1837,1850,2738,2747,2748,2757,2800,2869,2906,3402,9207,9208,9209,9307,12219,12223,12406,12409,15880,15986,16111,16134,16178,16765,16769,16858],"fullWord":2748},{"subwords":[27,30,43,93,94,385,399,1243,1246,1296,1301,1302,1515,1560,1636,1900,1938,2738,2749,2750,2766,2813,3447,4427,4431,4466,4587,4601,4618,4639,4641,4728,5756,10061,10072,10073,10074,10090,10093,10324,10327,10378],"fullWord":2750},{"subwords":[27,43,45,67,93,96,385,392,399,400,407,1301,1306,1422,1425,1636,1918,2738,2749,2751,2757,2813,3021,6023,10061,10071,10072,10073,10077,10323,10324,10360,15872,15880,15942,15948,16111,16121,16270,16274,16298,16999],"fullWord":2751},{"subwords":[27,504,596,1210,1332,2738,2752,2848,2869,11086,11213,12219,12244],"fullWord":2752},{"subwords":[27,93,112,114,528,1332,1342,1526,1530,1665,1671,2738,2753,2848,2853,2869,2883,5856,11086,11089,11213,11218,11437,11446,11512,12219,12229,12244,12245,12331],"fullWord":2753},{"subwords":[27,51,67,1422,2029,2034,2042,2048,2049,2738,2754,2755,2757,3617,3624,15880,16111,17308,17316],"fullWord":2755},{"subwords":[93,94,98,99,2759,2760,2766,3107,3172,4431,4639,5582,8217,8440],"fullWord":2760},{"subwords":[93,96,98,101,325,932,2759,2761,3021,3025,3107,3221,5582,6023,8362,15880,16270,16298,16574],"fullWord":2761},{"subwords":[90,93,98,126,1009,2759,2762,3052,3053,3107,3229,3238,5582,5620,6055,6057,6058,8378,8381,8461,18323,18541,18543,18570,18697],"fullWord":2762},{"subwords":[93,399,2763,2807,2813,2814,2822,3107,3108,3445,5640,5778,9760,10072,10073,10082,10128,10324,10338,10416],"fullWord":2763},{"subwords":[90,91,126,134,2765,3041,3052,3064,4238,4241,4375,4394,15880,16041,16157,16265,16266,18508,19871],"fullWord":2765},{"subwords":[93,94,106,148,326,327,328,2766,2767,3402,4431,4438,4590,4639,4714,4909,4910,4928,4935,4936,5659,9079,9082,9103],"fullWord":2767},{"subwords":[106,108,148,158,200,326,336,2766,2768,2778,2782,3402,4438,4445,4461,4901,4928,5037,5040,9127,15880,15893,15928,16114,16178,16769],"fullWord":2768},{"subwords":[93,94,114,115,126,127,605,693,694,695,1009,2766,2770,2772,2869,2883,2884,2908,2909,3052,3145,4431,4492,4494,4500,4512,4551,4605,4639,4644,4774,4788,5620,5849,5856,5865,6055,6057,6074,12229,12325,12374,18339,18408,18541,18607,18610],"fullWord":2770},{"subwords":[93,94,96,126,127,134,200,1009,2766,2771,2772,2773,2782,3021,3022,3041,3042,3043,3052,3057,3064,4238,4241,4431,4432,4551,4555,4639,4826,5616,5620,5626,6023,6055,6057,15880,15893,16041,16043,16044,16114,16157,16270,16293,16298,16304,16457,17806,18339,18340,18541,18559,18575],"fullWord":2773},{"subwords":[93,94,148,269,270,2766,2774,2775,2788,2789,4431,4438,4590,4639,5659,5707,7253],"fullWord":2775},{"subwords":[93,94,121,122,269,270,796,800,817,2766,2774,2776,2780,2788,2789,2790,2941,2949,2954,2955,3111,4062,4431,4516,4607,4639,4810,5310,5351,5588,5666,5707,5976,5988,7253,7375,7383,7461,7904,7905,7907,7908,14717,14718,14736,14758,14762,14763,14961,15021,15028,15060,15141],"fullWord":2776},{"subwords":[93,94,96,200,269,270,280,2766,2771,2774,2777,2782,2788,2789,2792,3021,3022,3171,4431,4432,4639,4707,4826,5707,5708,6023,7253,7258,7396,7460,15880,15893,15910,15912,16114,16116,16270,16298],"fullWord":2777},{"subwords":[106,326,341,540,2766,2779,2848,3402,4472,4896,4971,11086,11107,11145,11617,11626],"fullWord":2779},{"subwords":[93,94,96,121,122,123,200,796,800,810,817,825,905,906,2766,2771,2780,2781,2782,2941,2949,2953,2954,2955,2960,3001,3021,3022,3111,3112,4431,4432,4516,4520,4607,4611,4639,4810,4826,5588,5599,5976,5977,6023,14717,14718,14722,14736,14751,14881,14882,14961,14965,15021,15028,15048,15060,15087,15880,15890,15893,16114,16142,16145,16146,16270,16286,16298,16419],"fullWord":2781},{"subwords":[93,112,586,2783,2848,2853,3107,3110,4268,4293,5627,5846,11086,11089,11437,11459],"fullWord":2783},{"subwords":[93,96,121,123,796,810,817,818,820,825,905,906,931,2784,2941,2954,2960,3001,3017,3021,5588,5599,5976,5977,6023,14717,14722,14881,15021,15048,15880,15888,16142,16145,16270,16286,16298,16419],"fullWord":2784},{"subwords":[126,254,596,693,2787,2869,2908,3052,6225,6293,6344,18408],"fullWord":2787},{"subwords":[93,96,121,123,269,279,280,796,810,817,825,905,906,2788,2790,2791,2792,2941,2954,2960,3001,3021,3171,4062,4064,5588,5599,5976,5977,5988,5992,6023,7375,7391,7396,7461,7463,7904,7906,7939,14717,14722,14758,14762,14764,14773,14881,15021,15048,15141,15880,15910,15912,15914,16026,16116,16142,16145,16219,16270,16286,16298,16419],"fullWord":2791},{"subwords":[93,121,269,314,349,796,817,2788,2790,2794,2941,2954,3156,3402,3408,4062,5588,5976,5988,5993,7375,7461,7904,9079,9376,9384,14717,14758,14762,15021,15141,15150,15411,15461],"fullWord":2794},{"subwords":[337,2795,2797,2813,3100,3402,3487,7282,7293,7447,7585,9101,10072,10089,10109,10304],"fullWord":2795},{"subwords":[110,287,288,2796,2869,3402,7267,7283,7352,7578,7604,9207,9208,12230],"fullWord":2796},{"subwords":[104,126,2798,3052,3229,3605,3675,3826,3861,3965,8378,8714,8838,8892,12686,12690,12809,12895,18323,18333,18432,18743,19060],"fullWord":2798},{"subwords":[341,504,507,596,640,2799,2848,2869,3402,9207,9208,11086,11156,11213,11231,11232,11234,11617,11697,12244,12443],"fullWord":2799},{"subwords":[349,359,647,691,796,810,905,2800,2801,2802,2869,2906,2941,3001,3402,9207,9208,9209,9307,9376,9378,9409,12270,12273,12276,14784,14786,14821,14838,14839,15880,15986,16028,16134,16142,16178,16769,16858,16889,17722],"fullWord":2802},{"subwords":[93,399,472,2804,2813,3597,3701,3702,3708,5650,9614,10072,10073,10324,10443,10760,12845],"fullWord":2804},{"subwords":[712,2805,2806,2869,2906,9498,9677,9678,9734,15880,15986,16134,18117,19871],"fullWord":2806},{"subwords":[93,121,349,796,817,867,2807,2810,2941,2954,3156,3402,4107,5588,5976,5993,9079,9094,9376,9384,9396,14717,14729,14798,15021,15411,15422],"fullWord":2810},{"subwords":[110,287,369,2811,2869,3402,7283,7604,9207,9208,9276,9913,9922,12230,12418],"fullWord":2811},{"subwords":[337,2813,2814,2817,3402,3403,3597,3685,3701,3702,3711,10072,10760,10767,12812],"fullWord":2817},{"subwords":[337,340,2813,2815,2816,2818,2819,3402,6246,6249,6530,6641,9135,10072,15880,15931,15942,16178,16179,16769],"fullWord":2819},{"subwords":[337,481,2813,2820,2921,3202,3272,3273,3319,3402,3465,3529,4046,4047,8241,8321,8612,8664,10072,10182,10665,13154,13191,13204,13651,13652,13688],"fullWord":2820},{"subwords":[93,94,399,2766,2807,2808,2813,2822,2823,3447,4431,4466,4601,4639,4641,4651,4728,5756,5778,9760,10072,10073,10074,10082,10083,10090,10093,10128,10129,10324,10327,10338,10378,10416],"fullWord":2823},{"subwords":[93,121,399,796,817,867,2807,2813,2822,2824,2941,2954,2971,3470,3471,3493,3505,4107,5588,5592,5778,5976,9760,10072,10073,10075,10082,10084,10128,10130,10214,10324,10338,10355,10416,14717,14729,14798,14968,15021],"fullWord":2824},{"subwords":[382,442,461,2813,2826,2827,2828,2833,3017,10072,15880,15942],"fullWord":2828},{"subwords":[93,94,399,442,2766,2813,2826,2829,3128,3447,4431,4466,4601,4639,4641,4728,4744,5756,5780,10072,10073,10074,10090,10093,10102,10324,10327,10343,10378],"fullWord":2829},{"subwords":[93,121,399,442,449,796,817,2813,2826,2830,2941,2954,2971,3128,3129,3493,5588,5592,5780,5976,10072,10073,10075,10324,10343,10355,14717,14968,15021,15022],"fullWord":2830},{"subwords":[442,457,1155,1164,2813,2826,2832,3096,3482,3597,3701,3702,3714,4010,4018,10072,10292,10760,10761,10942,12856,13114,20378],"fullWord":2832},{"subwords":[111,442,461,2813,2826,2833,2834,3071,3074,3478,4280,4284,10072,15880,15942,16257,19871],"fullWord":2834},{"subwords":[93,94,112,399,2766,2813,2835,2836,2848,2853,2854,3447,3453,4431,4466,4472,4475,4601,4639,4641,4728,5658,5756,5782,10072,10073,10074,10090,10093,10136,10145,10146,10324,10327,10378,11086,11089,11090,11101,11107,11115,11173,11180,11437,11438,11442,11464,11492],"fullWord":2836},{"subwords":[93,112,121,399,796,817,869,2813,2835,2837,2848,2853,2854,2941,2954,2971,3453,3493,4065,4110,5588,5592,5782,5976,10072,10073,10075,10136,10145,10150,10324,10355,11086,11089,11091,11101,11173,11180,11276,11281,11282,11286,11303,11437,11442,11539,14717,14808,14968,14971,14975,15021,15202],"fullWord":2837},{"subwords":[442,464,594,2813,2826,2835,2838,2848,3100,3453,3487,10072,10089,10136,10304,11086,11173,11186,11408,21051,21153],"fullWord":2838},{"subwords":[796,809,2813,2840,2841,2941,2971,2972,2983,3100,3487,3577,3597,3701,3702,3890,4029,4232,10072,10089,10304,10760,10887,12680,12948,12965,12966,14735,14939,15592,15745,15864],"fullWord":2841},{"subwords":[93,94,204,399,1106,2766,2813,2842,2843,3080,3082,3447,3480,4431,4466,4569,4601,4639,4641,4728,4851,5756,10072,10073,10074,10090,10093,10285,10286,10324,10327,10378,10471,10472,19910,19923,19924,19986,19990,20014,20017],"fullWord":2843},{"subwords":[93,96,399,400,407,1106,1114,2813,2842,2844,3021,3080,3086,3480,6023,10072,10073,10077,10285,10289,10324,10360,10471,10472,15880,15942,15948,15966,16076,16121,16270,16274,16298,17029,17030,19923,19924,19925,19935,19967,19986,19987,20014],"fullWord":2844},{"subwords":[337,714,2813,2845,2869,3090,3402,3459,9207,9208,10072,10120,10619,12238,12438,19919,19920,19923,19948,20107,20110,20152,20153,20155],"fullWord":2845},{"subwords":[93,96,399,400,407,1167,1169,1170,1173,1182,1183,2813,2846,2847,3021,6023,10072,10073,10077,10301,10324,10360,10494,15880,15942,15948,16098,16121,16270,16274,16298,16483],"fullWord":2847},{"subwords":[504,508,973,975,2848,2849,2868,3017,3019,11086,11105,11330,11348,11349,12082,15880,15892,15973,16129,16133],"fullWord":2849},{"subwords":[27,93,95,112,121,513,796,817,869,1366,1377,1526,1535,1665,1700,2308,2309,2317,2380,2738,2745,2848,2850,2853,2941,2954,4052,4065,4110,5588,5803,5976,11086,11089,11091,11276,11281,11286,11437,11539,14717,14808,14975,14995,15021,15202],"fullWord":2850},{"subwords":[3,27,341,504,1210,2738,2848,2851,3402,9064,9077,9078,11086,11617],"fullWord":2851},{"subwords":[93,94,112,114,115,176,528,529,605,2766,2848,2852,2853,2869,2883,2884,4431,4472,4475,4479,4492,4494,4500,4605,4639,4774,5658,5856,5865,11086,11089,11090,11107,11115,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":2852},{"subwords":[93,96,112,113,399,400,407,470,2813,2835,2839,2848,2853,2854,2855,2868,3021,3453,3458,5782,5784,5845,6023,10072,10073,10077,10136,10145,10151,10161,10324,10360,11086,11089,11093,11101,11105,11173,11180,11181,11330,11437,11442,11444,11453,11560,11562,12080,15880,15942,15948,15949,15973,15978,16121,16129,16270,16274,16278,16298,17012],"fullWord":2855},{"subwords":[93,96,112,113,2848,2853,2856,2857,2868,3021,3732,3733,3734,3744,3750,5845,6023,11086,11089,11093,11105,11265,11330,11437,11453,11560,11813,12080,12872,15880,15973,15978,16129,16270,16278,16298,17316,17378,17382],"fullWord":2857},{"subwords":[93,112,121,504,796,817,818,869,2848,2853,2858,2941,2954,4065,4110,5588,5976,11086,11089,11091,11276,11281,11286,11437,11539,14717,14808,14975,15021,15202],"fullWord":2858},{"subwords":[93,94,112,574,732,733,2766,2848,2853,2859,2860,2921,2922,2923,4431,4472,4475,4484,4639,4643,5658,5956,11086,11089,11090,11107,11115,11270,11437,11438,13154,13155,13156,13171,13439,13478],"fullWord":2860},{"subwords":[93,112,121,574,732,735,796,817,869,2848,2853,2859,2861,2921,2922,2924,2941,2954,2987,2989,4065,4066,4077,4078,4110,5588,5956,5976,11086,11089,11091,11270,11276,11281,11286,11437,11539,13154,13155,13157,13286,13294,13439,13455,13577,13593,14240,14262,14717,14808,14816,14851,14852,14975,14979,15021,15025,15202,15209,15248,15747],"fullWord":2861},{"subwords":[574,579,961,2848,2859,2863,2864,2865,2868,2921,2932,2938,3732,3733,3734,3765,3770,3864,3883,4048,4237,11086,11105,11265,11270,11275,11330,11813,11947,11961,12872,12936,13154,13167,13336,13343,15880,15973,16014,16129,16130,16194,17298,17316,17378,17406,17476],"fullWord":2864},{"subwords":[574,579,586,961,2848,2859,2865,2866,2868,2921,2938,4048,4049,4237,4293,4302,4311,4367,11086,11105,11270,11275,11330,13154,13167,13336,14476,14477,14551,15880,15973,16014,16129,16130,16260,17476,18103,18104,18114,18135,19624,19628,19825,19871],"fullWord":2866},{"subwords":[596,657,658,2869,2870,2891,12252],"fullWord":2870},{"subwords":[596,605,2766,2869,2871,4492,4493],"fullWord":2871},{"subwords":[375,376,382,596,598,2813,2869,2872,2873,2906,3017,3459,3464,10072,12283,12284,15880,15942,15986,16134],"fullWord":2873},{"subwords":[93,114,596,728,732,753,2869,2874,2883,2921,2922,5856,5956,12229,12257,12259,12317,13154,13155,13178,13239,13245,13439,13453,13470,13539],"fullWord":2874},{"subwords":[596,605,796,2766,2869,2875,2941,2949,4492,4493,4532,12270,12274,14736,14821,14826],"fullWord":2875},{"subwords":[596,716,796,922,2869,2876,2941,2980,3100,4232,4400,12270,12282,12311,14735,14821,14939,15864,21075],"fullWord":2876},{"subwords":[596,657,658,2869,2877,2891,12252],"fullWord":2877},{"subwords":[93,114,399,2813,2814,2869,2878,2883,3107,3108,3459,3491,5640,5745,5856,5861,10072,10073,10164,10174,10324,10344,12229],"fullWord":2878},{"subwords":[93,114,121,796,817,2869,2879,2883,2885,2941,2954,2977,3107,4069,4106,5588,5595,5856,5976,12224,12229,12270,12319,14717,14821,15021],"fullWord":2879},{"subwords":[106,148,326,605,2766,2869,2880,3402,4438,4492,4928,4985,9207,9208],"fullWord":2880},{"subwords":[93,94,114,115,399,605,2766,2813,2869,2881,2883,2884,3447,3459,3491,4431,4466,4492,4494,4500,4601,4605,4639,4641,4728,4774,5745,5746,5756,5856,5861,5865,10072,10073,10074,10090,10093,10095,10164,10165,10169,10174,10324,10327,10344,10378,10427,12229],"fullWord":2881},{"subwords":[118,183,195,605,796,809,2766,2869,2882,2941,2949,3638,3639,3777,3893,3913,4436,4492,4532,5096,5172,5173,12270,12271,12274,12493,12548,12680,12965,12966,14736,14749,14821,14826,15561,15568,15592,15600],"fullWord":2882},{"subwords":[93,96,114,116,121,123,796,810,817,825,905,906,2869,2883,2885,2886,2887,2906,2941,2954,2960,2977,3001,3021,4069,4071,5588,5595,5598,5599,5856,5918,5976,5977,6000,6023,12224,12226,12229,12270,12273,12275,12319,12324,14717,14722,14821,14881,15021,15048,15880,15986,15995,15998,16134,16142,16145,16270,16286,16298,16419,17223],"fullWord":2886},{"subwords":[93,114,604,657,663,665,2869,2883,2888,2896,3402,3413,5856,5860,9079,9200,9207,9208,9297,12229,12252,12253,12410,12448],"fullWord":2888},{"subwords":[110,287,657,2869,2889,3402,7283,7604,9207,9208,9297,12230,12252],"fullWord":2889},{"subwords":[93,114,121,796,817,867,2807,2869,2883,2885,2890,2941,2954,2977,4069,4073,4107,5588,5595,5856,5976,9785,9836,9855,12224,12229,12270,12277,12319,12335,14717,14729,14798,14821,14840,15021],"fullWord":2890},{"subwords":[596,657,658,661,2869,2891,2892,2906,3017,12252,12283,15880,15986,16134],"fullWord":2892},{"subwords":[93,94,114,115,605,657,663,2766,2869,2883,2884,2893,4431,4492,4494,4500,4605,4639,4774,5856,5865,12229,12252,12253],"fullWord":2893},{"subwords":[93,114,399,657,663,2813,2869,2883,2894,3459,3491,5745,5856,5861,10072,10073,10164,10174,10324,10344,12229,12252,12253],"fullWord":2894},{"subwords":[93,114,121,657,663,796,817,2869,2883,2885,2895,2941,2954,2977,4069,5588,5595,5856,5976,12224,12229,12252,12253,12270,12319,14717,14821,15021],"fullWord":2895},{"subwords":[93,114,604,657,663,665,2869,2883,2888,2896,3402,3413,5856,5860,9079,9200,9207,9208,9297,12229,12252,12253,12410,12448],"fullWord":2896},{"subwords":[657,666,686,2869,2897,2903,3777,3808,12252,12528],"fullWord":2897},{"subwords":[126,657,666,686,693,2869,2898,2903,2908,2913,2914,3052,3605,3777,3808,3816,3965,3966,12252,12293,12528,12574,12575,12686,18333,18408,18432,19036],"fullWord":2898},{"subwords":[93,94,114,115,183,215,605,675,2766,2869,2883,2884,2900,2901,3638,3639,3644,3657,3777,3786,3787,4431,4492,4494,4500,4589,4605,4639,4656,4774,5096,5114,5172,5173,5176,5653,5856,5865,5953,12229,12493,12499,12721,12752,12874,12876],"fullWord":2901},{"subwords":[93,96,114,116,215,217,2869,2883,2887,2900,2902,2906,3021,3777,3786,3788,3814,5653,5856,5918,5953,5955,6023,12229,12506,12560,12561,12721,12722,12874,12875,12876,12879,15880,15986,15995,16134,16188,16270,16298,17316,17383],"fullWord":2902},{"subwords":[657,666,686,2869,2903,2904,2906,3777,3808,3812,3814,12252,12528,12560,15880,15986,16134,17316,17383],"fullWord":2904},{"subwords":[716,2869,2905,2921,2929,3100,3777,3825,3864,3888,4029,4400,12257,12311,13154,13239,13424,14115,21064,21183],"fullWord":2905},{"subwords":[93,94,114,115,126,127,605,693,694,695,1009,2766,2770,2772,2869,2883,2884,2908,2909,3052,3145,4431,4492,4494,4500,4512,4551,4605,4639,4644,4774,4788,5620,5849,5856,5865,6055,6057,6074,12229,12325,12374,18339,18408,18541,18607,18610],"fullWord":2909},{"subwords":[93,114,121,126,693,694,709,796,817,911,1009,2869,2883,2885,2908,2910,2941,2954,2962,2977,3003,3004,3052,3055,3145,3148,3161,4069,4085,5588,5595,5620,5849,5856,5976,5982,6055,6057,6074,12224,12229,12270,12319,12325,12338,12374,14717,14821,14847,14898,14901,14959,15021,15024,15049,15241,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,19197,19220],"fullWord":2910},{"subwords":[126,128,365,693,700,701,2869,2908,2911,3052,3180,3198,3229,3272,3273,3305,3306,3328,3402,3429,8378,8612,8660,8688,9207,9208,9213,9325,9440,12463,12612,18323,18347,18408,18684,18686,18731,18823,18894],"fullWord":2911},{"subwords":[93,114,126,399,488,693,694,1009,2813,2869,2883,2908,2912,3052,3135,3145,3459,3491,3495,5620,5648,5745,5849,5856,5861,6055,6057,6074,10072,10073,10164,10168,10174,10247,10251,10324,10344,10349,10376,10437,10460,12229,12292,12325,12374,18365,18370,18408,18541,18547,18607],"fullWord":2912},{"subwords":[126,657,666,686,693,2869,2898,2903,2908,2913,2914,3052,3605,3777,3808,3816,3965,3966,12252,12293,12528,12574,12575,12686,18333,18408,18432,19036],"fullWord":2914},{"subwords":[118,126,132,693,796,809,911,2869,2908,2913,2915,2941,3003,3009,3052,3605,3777,3816,3820,3913,3965,3966,4089,12270,12271,12293,12548,12574,12575,12680,12686,12965,12966,13008,14821,14847,14898,15568,15592,15691,18333,18408,18432,18449,18460,18463,19036,19093,19094,19098,19105],"fullWord":2915},{"subwords":[126,134,693,711,929,2869,2906,2907,2908,2913,2916,2917,3041,3052,3064,3603,3605,3611,3777,3814,3816,3958,3965,3966,3967,3971,4238,4241,12293,12560,12574,12575,12591,12686,12692,15880,15986,16041,16134,16136,16157,16205,17278,17316,17383,17435,17885,18333,18335,18408,18428,18432,18435,19036,19057],"fullWord":2916},{"subwords":[596,2869,2906,2919,3017,12283,15880,15986,16134,19948,19957],"fullWord":2919},{"subwords":[657,666,667,686,716,2869,2899,2903,2920,3100,3777,3808,3825,4029,4400,12252,12255,12311,12528,21183],"fullWord":2920},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":2925},{"subwords":[111,481,1060,2813,2815,2921,2927,3071,3465,4047,4049,4286,4302,6707,6821,10072,10182,13154,13204,13391],"fullWord":2927},{"subwords":[126,781,2921,2928,3052,3402,3429,4046,13154,13168,13169,13364,13438,13688,13850,13851,18347,18436,18823,18926],"fullWord":2928},{"subwords":[93,114,215,732,2869,2883,2900,2921,2922,2929,2930,3777,3786,3864,3867,5653,5856,5953,5956,12229,12257,12259,12317,12547,12721,12874,12876,12916,12917,12918,13154,13155,13239,13245,13439,13453,13470,13539,13564,14099,14105],"fullWord":2930},{"subwords":[961,2869,2906,2921,2929,2931,2932,2938,3777,3814,3864,3883,4048,4237,12257,12269,12560,12936,13154,13167,13239,13259,13336,13343,14112,15880,15986,16014,16134,16194,17220,17298,17316,17383,17406,17476,17490],"fullWord":2931},{"subwords":[93,126,732,781,1009,1028,2921,2922,2933,3052,3605,3864,3867,3965,3968,5620,5956,6055,6057,12686,12916,12917,12937,13154,13155,13168,13364,13367,13438,13439,13464,13613,14027,14188,18333,18432,18436,18437,18541,18981,18982,19075,19076],"fullWord":2933},{"subwords":[93,94,732,733,762,2766,2921,2922,2923,2934,4431,4639,5956,13154,13155,13156,13171,13268,13439,13478,13569,14237],"fullWord":2934},{"subwords":[93,121,732,735,762,796,817,2921,2922,2924,2935,2941,2954,2987,2989,4077,4078,5588,5956,5976,13154,13155,13157,13268,13276,13286,13294,13439,13455,13569,13577,14262,14278,14717,14851,14852,14979,15021,15025,15248],"fullWord":2935},{"subwords":[349,796,2921,2937,2941,2987,2994,3402,3419,3420,4046,4077,4106,9376,13154,13200,13286,13688,14851,15508],"fullWord":2937},{"subwords":[126,132,761,781,796,809,911,1028,2921,2939,2941,2987,3003,3010,3052,3605,3864,3881,3923,3965,4077,4188,12680,12686,12937,12965,12966,13008,13154,13168,13286,13328,13364,13438,14160,14188,14247,14350,14356,14851,14867,14898,14957,15592,15691,18333,18432,18436,18449,18463,18467,19075,19093,19094,19098,19221,19323],"fullWord":2939},{"subwords":[93,121,230,796,817,818,828,2785,2941,2942,2954,5588,5976,6210,6212,6308,6311,6317,6392,14717,15021,15114],"fullWord":2942},{"subwords":[93,121,126,796,817,818,911,1009,2941,2943,2944,2954,2962,3003,3004,3052,3055,3161,4085,5588,5620,5976,5982,6055,6057,14717,14898,14899,14901,14959,15021,15049,15312,15748,18449,18453,18541,18554,19197],"fullWord":2944},{"subwords":[126,134,796,810,905,911,918,2941,2943,2945,3001,3003,3011,3017,3041,3052,3064,4238,4241,14898,14899,14912,15880,15888,16041,16142,16157,17773,18449,18472,19381],"fullWord":2945},{"subwords":[27,51,118,796,809,1241,1332,1335,1366,1406,1409,2029,2030,2049,2127,2128,2211,2308,2337,2446,2462,2738,2869,2941,2946,2947,2981,3617,3622,3777,3913,4052,12219,12270,12271,12481,12548,12680,12959,12965,12966,14821,15568,15576,15592],"fullWord":2947},{"subwords":[27,51,796,809,1366,1502,2029,2030,2049,2300,2308,2364,2446,2738,2941,2946,2948,2981,3100,3617,3622,4029,4052,4232,12680,12959,12965,12966,14735,14939,15576,15592,15864],"fullWord":2948},{"subwords":[93,94,121,122,148,151,796,800,817,2766,2780,2941,2949,2950,2954,2955,3111,4431,4438,4516,4517,4590,4607,4639,4810,5340,5588,5659,5976,14717,14718,14736,14961,14962,15021,15028,15060],"fullWord":2950},{"subwords":[93,94,121,122,796,800,817,2766,2780,2941,2949,2951,2954,2955,2958,3111,4431,4516,4518,4607,4639,4810,5346,5588,5976,6008,14717,14718,14720,14736,14872,14961,14983,15021,15028,15060],"fullWord":2951},{"subwords":[106,124,326,349,796,852,854,2766,2941,2949,2952,3402,9376,14736,14776,15428],"fullWord":2952},{"subwords":[93,114,121,796,817,2869,2883,2885,2941,2954,2956,2977,4069,4120,5588,5595,5856,5976,5984,5998,12224,12229,12270,12319,12339,14717,14821,14830,15021,15023],"fullWord":2956},{"subwords":[93,121,796,817,2941,2954,2957,2958,4120,5588,5976,5984,6008,14717,14720,14872,14983,15021],"fullWord":2957},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2958,2959,2960,3001,3021,5588,5599,5976,5977,6008,6016,6023,14717,14720,14721,14722,14872,14881,14883,14983,14988,15021,15048,15880,16142,16145,16147,16270,16286,16298,16419],"fullWord":2959},{"subwords":[93,96,121,123,796,810,817,825,905,906,907,973,2941,2954,2960,2961,3001,3021,3024,3165,4084,4141,5588,5599,5976,5977,6023,6026,6039,14717,14722,14881,14885,15021,15048,15880,15892,16142,16145,16148,16155,16270,16286,16290,16291,16298,16303,16419],"fullWord":2961},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":2963},{"subwords":[111,796,828,1060,2813,2815,2941,2964,2971,3071,4312,4341,6308,6821,7045,7163,7194,7196,10072,19837],"fullWord":2964},{"subwords":[299,796,809,810,905,2941,2965,2966,3001,3171,3665,3670,4062,4064,7375,7391,7396,7939,12680,12683,12965,12966,12967,12971,13007,13018,14758,14773,15592,15599,15673,15880,15910,15921,16116,16142,16219,17303,17316],"fullWord":2966},{"subwords":[796,801,809,2921,2941,2967,2987,3202,3206,3354,3864,3881,3923,4077,4188,8321,8351,8696,8714,8845,8857,8858,12680,12965,12966,12968,13154,13286,13291,14014,14146,14350,14356,14775,14851,15386,15560,15592],"fullWord":2967},{"subwords":[93,96,121,123,349,359,796,810,817,825,858,863,905,906,2941,2954,2960,2968,3001,3021,3156,3157,3402,4158,5588,5599,5976,5977,5993,5994,6023,9079,9085,9376,9384,9389,9409,14717,14722,14788,14881,15021,15048,15411,15415,15526,15880,16028,16142,16145,16178,16270,16286,16298,16419,16769,16889,16890,17722],"fullWord":2968},{"subwords":[349,596,796,852,885,2801,2869,2941,2969,3402,4072,9207,9208,9376,9378,12270,14784,14821,14838],"fullWord":2969},{"subwords":[110,287,314,349,796,807,2801,2869,2941,2970,3402,3408,4062,7283,7375,7604,7918,8015,9207,9208,9376,9378,12230,12270,14726,14758,14784,14821,14832,14838,15461,15494],"fullWord":2970},{"subwords":[126,132,488,495,796,809,911,2813,2840,2941,2971,2972,2973,2983,3003,3052,3560,3597,3605,3701,3702,3728,3890,3965,4240,10072,10760,10897,12680,12686,12732,12948,12965,12966,13008,14898,15592,15691,18333,18365,18432,18449,18463,19093,19094,19098],"fullWord":2973},{"subwords":[504,596,796,869,2848,2869,2941,2974,4065,11086,11213,11276,11281,12244,12270,14808,14821],"fullWord":2974},{"subwords":[93,112,114,121,528,796,817,869,2848,2853,2869,2883,2885,2941,2954,2975,2977,4065,4069,4110,5588,5595,5856,5976,11086,11089,11091,11213,11218,11276,11281,11286,11437,11446,11512,11539,12224,12229,12244,12245,12248,12270,12319,14717,14808,14821,14975,15021,15202,15207],"fullWord":2975},{"subwords":[375,377,596,598,796,2813,2869,2872,2941,2971,2976,3459,4050,10072,12270,14821],"fullWord":2976},{"subwords":[93,114,121,227,716,796,817,1196,2869,2883,2885,2941,2954,2977,2978,2980,3100,4069,4232,4400,5588,5595,5856,5976,12224,12229,12270,12282,12311,12319,14717,14735,14821,14939,15021,15864,15866,21071,21075,21097,21099,21102,21120],"fullWord":2978},{"subwords":[93,114,121,349,796,817,2801,2869,2883,2885,2941,2954,2977,2979,3156,3402,3413,4069,5588,5595,5856,5976,5993,5996,9079,9207,9208,9376,9378,9384,12224,12229,12270,12319,12410,12412,14717,14784,14821,14838,15021,15175,15411],"fullWord":2979},{"subwords":[27,51,67,796,809,810,905,1366,1419,1422,2029,2030,2033,2034,2049,2308,2343,2446,2476,2738,2757,2941,2946,2981,2982,3001,3617,3622,3623,3624,4052,4054,12680,12683,12959,12964,12965,12966,12967,12971,13007,13018,15576,15590,15592,15599,15673,15880,16111,16142,17303,17308,17316],"fullWord":2982},{"subwords":[487,796,809,810,905,2813,2840,2941,2971,2972,2983,2984,3001,3597,3600,3701,3702,3703,3890,3891,10072,10181,10760,12680,12683,12948,12950,12965,12966,12967,12971,13007,13018,15592,15599,15673,15880,15942,16142,17303,17316,17354,17356],"fullWord":2984},{"subwords":[796,809,810,869,883,905,2848,2868,2941,2985,2986,3001,3732,3733,3734,3911,3912,4065,4068,11086,11102,11104,11105,11265,11276,11281,11284,11314,11330,11813,12680,12683,12872,12965,12966,12967,12971,13007,13018,14808,14820,15564,15567,15592,15599,15627,15638,15673,15880,15973,16129,16142,16221,17303,17316,17378],"fullWord":2986},{"subwords":[377,481,796,2813,2921,2941,2971,2987,2988,3465,4047,4050,4077,10072,10182,13154,13204,13286,13287,14851],"fullWord":2988},{"subwords":[93,94,121,122,732,733,735,796,800,817,2766,2780,2921,2922,2923,2924,2941,2949,2954,2955,2987,2989,2990,3111,4077,4078,4079,4431,4516,4607,4639,4810,5323,5588,5956,5976,13154,13155,13156,13157,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,14262,14717,14718,14736,14851,14852,14853,14961,14979,15021,15025,15028,15060,15064,15248],"fullWord":2990},{"subwords":[93,121,399,481,732,735,796,817,2813,2921,2922,2924,2941,2954,2971,2987,2989,2991,3465,3493,4047,4077,4078,5588,5592,5956,5976,10072,10073,10075,10182,10324,10350,10355,13154,13155,13157,13204,13207,13210,13286,13290,13294,13439,13450,13455,13456,13577,13885,13887,13940,14262,14717,14851,14852,14968,14979,15021,15025,15248],"fullWord":2991},{"subwords":[93,121,732,735,796,817,2921,2922,2924,2941,2954,2958,2987,2989,2992,4077,4078,5588,5956,5976,6008,13154,13155,13157,13286,13294,13297,13439,13455,13577,14262,14717,14720,14851,14852,14854,14872,14979,14983,15021,15025,15248],"fullWord":2992},{"subwords":[93,121,126,732,735,781,782,796,817,911,1009,2921,2922,2924,2941,2954,2962,2987,2989,2993,3003,3004,3052,3055,3161,4077,4078,4085,4139,5588,5620,5956,5976,5982,6055,6057,13154,13155,13157,13168,13286,13294,13328,13329,13364,13367,13372,13438,13439,13455,13460,13464,13577,13599,13613,14247,14248,14262,14717,14851,14852,14867,14898,14901,14957,14959,14979,15021,15025,15049,15248,15312,15748,18436,18437,18439,18449,18453,18467,18541,18554,19197,19221],"fullWord":2993},{"subwords":[796,810,812,905,961,2921,2938,2941,2987,2995,2996,3001,4048,4049,4077,4082,4237,4302,4311,4312,4350,4367,13154,13167,13286,13321,13336,14253,14403,14551,14851,14866,14891,15880,16014,16142,16152,16223,17476,17494,17687,18135,18146,19825,19868,19871],"fullWord":2996},{"subwords":[93,121,399,796,817,2813,2941,2954,2958,2971,2997,3493,5588,5592,5976,6008,10072,10073,10075,10324,10355,14717,14720,14872,14968,14983,15021],"fullWord":2997},{"subwords":[796,809,869,878,2848,2941,2985,2998,3732,3733,3911,4065,11086,11102,11265,11276,11281,12680,12965,12966,14808,15564,15570,15592,15627],"fullWord":2998},{"subwords":[126,132,796,809,911,2941,2999,3003,3052,3605,3965,12680,12686,12965,12966,13008,14898,15570,15592,15691,18333,18432,18449,18463,19093,19094,19098],"fullWord":2999},{"subwords":[118,119,796,809,810,905,909,2869,2906,2941,3001,3002,3777,3814,3913,3919,12270,12271,12272,12273,12548,12560,12680,12683,12965,12966,12967,12971,13007,13018,14821,15568,15569,15592,15599,15673,15880,15986,16134,16142,16203,17303,17316,17383,17384],"fullWord":3002},{"subwords":[93,94,121,122,126,127,796,800,817,911,1009,2766,2772,2780,2941,2949,2954,2955,2962,3003,3004,3005,3052,3055,3111,3161,4085,4086,4431,4516,4537,4551,4553,4607,4639,4810,4812,5327,5588,5620,5976,5982,6055,6057,14717,14718,14736,14898,14901,14902,14959,14961,15021,15028,15049,15060,15061,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19197,19198,19205,19233],"fullWord":3005},{"subwords":[93,121,126,399,405,488,491,796,817,911,1009,2813,2941,2954,2962,2971,3003,3004,3006,3052,3055,3135,3161,3469,3493,3495,4085,4240,5588,5592,5620,5648,5976,5982,6055,6057,10072,10073,10075,10247,10254,10324,10355,10376,10460,14717,14898,14901,14959,14968,15021,15049,15050,15312,15748,18365,18370,18372,18449,18453,18541,18547,18554,19197],"fullWord":3006},{"subwords":[93,121,126,796,817,911,1009,2941,2954,2958,2962,3003,3004,3007,3052,3055,3161,4085,4087,5588,5620,5976,5982,6008,6055,6057,14717,14720,14872,14898,14901,14903,14959,14983,15021,15049,15312,15748,18449,18453,18541,18554,18652,18653,19197,19199],"fullWord":3007},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":3008},{"subwords":[118,126,132,693,796,809,911,2869,2908,2913,2915,2941,3003,3009,3052,3605,3777,3816,3820,3913,3965,3966,4089,12270,12271,12293,12548,12574,12575,12680,12686,12965,12966,13008,14821,14847,14898,15568,15592,15691,18333,18408,18432,18449,18460,18463,19036,19093,19094,19098,19105],"fullWord":3009},{"subwords":[126,132,761,781,796,809,911,1028,2921,2939,2941,2987,3003,3010,3052,3605,3864,3881,3923,3965,4077,4188,12680,12686,12937,12965,12966,13008,13154,13168,13286,13328,13364,13438,14160,14188,14247,14350,14356,14851,14867,14898,14957,15592,15691,18333,18432,18436,18449,18463,18467,19075,19093,19094,19098,19221,19323],"fullWord":3010},{"subwords":[93,94,121,122,204,796,800,817,1106,1109,2766,2780,2941,2949,2954,2955,3012,3013,3080,3082,3083,3111,4091,4092,4431,4516,4569,4607,4639,4810,4851,5329,5588,5976,14717,14718,14736,14921,14922,14961,15021,15028,15060,15337,19910,19990],"fullWord":3013},{"subwords":[93,114,121,796,817,1106,1109,2869,2883,2885,2941,2954,2977,3012,3014,3080,3083,3084,4069,4091,4093,5588,5595,5856,5976,12224,12229,12270,12305,12319,14717,14821,14921,14925,15021,15337,19948,19950],"fullWord":3014},{"subwords":[93,121,796,817,1106,1109,2941,2954,2958,3012,3015,3080,3083,4091,4094,5588,5976,6008,14717,14720,14872,14921,14927,14983,15021,15337],"fullWord":3015},{"subwords":[93,96,121,123,796,810,817,825,905,906,1106,1109,1110,1114,2941,2954,2960,3001,3012,3016,3021,3080,3083,3085,3086,4091,4095,5588,5599,5976,5977,6023,14717,14722,14881,14921,14929,15021,15048,15337,15354,15880,16076,16078,16142,16145,16270,16286,16298,16419,19967,20070,20071],"fullWord":3016},{"subwords":[27,67,1210,1215,1422,2738,2757,3017,3018,15880,16111],"fullWord":3018},{"subwords":[0,2,9,27,67,317,325,932,1210,1215,1235,1269,1422,1431,2738,2757,3017,3020,3025,8362,15880,16111],"fullWord":3020},{"subwords":[93,96,114,116,647,648,691,2800,2869,2883,2887,2906,3021,3023,3402,3413,3415,5856,5918,6023,9079,9085,9207,9208,9209,9210,9307,12229,12410,15880,15986,15995,16134,16178,16270,16298,16769,16858,16859,16860],"fullWord":3023},{"subwords":[93,94,96,98,99,101,200,325,932,934,2766,2771,2782,3021,3022,3025,3026,3172,3173,3221,3222,4431,4432,4543,4614,4639,4826,5582,6023,8217,8219,8362,8440,8443,15880,15893,16114,16270,16298,16503,16504,16574,16581],"fullWord":3026},{"subwords":[93,96,98,101,121,123,325,796,801,804,810,817,825,905,906,932,2941,2954,2960,3001,3021,3025,3027,3206,3209,3211,3217,3221,3223,4083,5582,5588,5599,5976,5977,6023,8333,8338,8362,8453,8456,8552,8584,8934,14717,14722,14775,14881,14886,14958,15021,15048,15376,15377,15880,16142,16145,16270,16286,16287,16298,16419,16549,16574,16577],"fullWord":3027},{"subwords":[93,96,98,101,325,932,936,973,3021,3024,3025,3028,3165,3221,3224,3263,5582,6023,6039,8362,15880,15892,16033,16270,16291,16298,16303,16574,16609],"fullWord":3028},{"subwords":[93,96,98,101,325,932,1145,1150,3021,3025,3029,3096,3099,3221,3232,3235,3268,3271,5582,6023,8362,8409,8416,8417,8588,8594,15880,16089,16176,16270,16298,16475,16574,16610,20302,20449,20450,20599],"fullWord":3029},{"subwords":[104,325,932,3025,3030,3201,3675,3677,3826,3860,3944,8362,8714,12809,12810,12895,12898,15880,16686,17316],"fullWord":3030},{"subwords":[110,287,647,691,2800,2869,2906,3031,3171,3402,7283,7287,7396,7604,7611,9207,9208,9209,9307,12230,12233,15880,15910,15986,16001,16116,16134,16178,16769,16815,16858,16866,17211],"fullWord":3031},{"subwords":[117,647,691,2800,2869,2906,3032,3402,3403,3417,3689,3692,3777,3814,9097,9099,9207,9208,9209,9307,9360,9366,12560,15880,15986,16134,16178,16180,16769,16858,17316,17383,17391],"fullWord":3032},{"subwords":[93,94,96,200,950,952,2766,2771,2782,2807,2808,2809,3021,3022,3033,3034,4431,4432,4639,4651,4655,4826,4835,6023,15880,15884,15885,15893,15939,16114,16270,16298],"fullWord":3034},{"subwords":[93,96,126,134,950,1009,2807,2809,3021,3033,3035,3041,3042,3052,3057,3064,4238,4241,5616,5620,5626,6023,6055,6057,9804,15880,15884,15939,16041,16043,16157,16270,16293,16298,16304,16457,16940,17727,17746,17809,18326,18331,18358,18362,18484,18541,18545,18546,18559],"fullWord":3035},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":3037},{"subwords":[93,96,3021,3038,3076,4268,4271,5627,5656,6023,14589,14595,14635,14650,15880,16058,16270,16298,16416,18066,19871,19876],"fullWord":3038},{"subwords":[945,973,3017,3019,3039,3402,9410,15880,15892,16178,16769,16779,16903],"fullWord":3039},{"subwords":[973,3040,3402,15880,15892,16037,16178,16769,16779,16903],"fullWord":3040},{"subwords":[93,94,96,126,127,134,200,1009,2766,2771,2772,2773,2782,3021,3022,3041,3042,3043,3052,3057,3064,4238,4241,4431,4432,4551,4555,4639,4826,5616,5620,5626,6023,6055,6057,15880,15893,16041,16043,16044,16114,16157,16270,16293,16298,16304,16457,17806,18339,18340,18541,18559,18575],"fullWord":3043},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":3044},{"subwords":[93,96,126,134,973,982,990,1009,3021,3024,3041,3042,3045,3049,3052,3057,3064,3165,4238,4241,5616,5618,5620,5626,6023,6039,6055,6057,15880,15892,16041,16043,16046,16157,16159,16270,16291,16293,16296,16298,16303,16304,16306,16457,16464,18487,18541,18559],"fullWord":3045},{"subwords":[93,96,126,134,399,400,407,488,1009,2813,3021,3041,3042,3046,3052,3057,3064,3135,3137,3495,3496,4238,4241,5616,5620,5626,5648,5649,6023,6055,6057,10072,10073,10077,10241,10247,10324,10360,10366,10376,10459,10460,10465,15880,15942,15948,15960,16041,16043,16121,16157,16270,16274,16293,16298,16304,16457,16459,17022,17023,17750,17811,18341,18365,18368,18370,18374,18541,18547,18548,18559,18660],"fullWord":3046},{"subwords":[126,132,133,134,796,809,810,905,911,918,929,2941,3001,3003,3011,3041,3047,3048,3052,3064,3603,3605,3611,3958,3959,3965,3971,4238,4241,12680,12683,12686,12692,12965,12966,12967,12971,13007,13008,13011,13018,14898,14912,15574,15592,15599,15673,15691,15700,15880,16041,16142,16157,16205,16246,17303,17316,17429,17435,17773,17885,18333,18335,18432,18435,18449,18463,18464,18472,19093,19094,19097,19098,19100,19113,19381],"fullWord":3047},{"subwords":[126,132,133,134,796,809,810,905,911,918,929,2941,3001,3003,3011,3041,3047,3048,3052,3064,3603,3605,3611,3958,3959,3965,3971,4238,4241,12680,12683,12686,12692,12965,12966,12967,12971,13007,13008,13011,13018,14898,14912,15574,15592,15599,15673,15691,15700,15880,16041,16142,16157,16205,16246,17303,17316,17429,17435,17773,17885,18333,18335,18432,18435,18449,18463,18464,18472,19093,19094,19097,19098,19100,19113,19381],"fullWord":3048},{"subwords":[111,382,2813,3017,3050,3071,3074,3075,3478,10072,15880,15942,19871],"fullWord":3050},{"subwords":[90,105,126,3052,3053,3054,3059,3100,3229,8378,8420,18323,18806,21039],"fullWord":3054},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":3056},{"subwords":[126,3052,3058,4239,4375,7416,8175,8177,18336,18342,18495,18508,18515,19418,19493],"fullWord":3058},{"subwords":[117,126,128,130,693,700,701,2869,2908,2913,3052,3060,3402,3403,3429,3605,3609,3689,3777,3816,3965,3966,9097,9207,9208,9325,9335,9360,9367,12293,12463,12574,12575,12686,13038,18333,18347,18408,18432,18823,18894,19036,19049],"fullWord":3060},{"subwords":[126,128,369,693,700,701,2869,2908,3052,3061,3402,3429,9207,9208,9276,9325,9913,9946,9985,12418,12463,18326,18347,18408,18418,18823,18824,18894],"fullWord":3061},{"subwords":[126,596,693,781,2869,2908,2921,3052,3062,12257,13154,13168,13169,13239,13261,13364,13438,18408,18436],"fullWord":3062},{"subwords":[126,128,693,700,701,781,2869,2908,2921,3052,3063,3402,3429,4046,9203,9207,9208,9325,12257,12453,12463,13154,13168,13193,13197,13239,13255,13261,13364,13438,13688,13765,13799,13800,13850,13851,18347,18408,18436,18823,18894,18926],"fullWord":3063},{"subwords":[126,134,781,961,2921,2938,2940,3041,3052,3064,3065,4048,4049,4237,4238,4241,4302,4311,4367,4375,4394,13154,13167,13168,13170,13336,13352,13364,13385,13438,14427,14551,14561,14567,15880,16014,16041,16157,16265,16266,17476,17510,17695,18011,18135,18148,18436,18448,18508,19386,19453,19456,19825,19871],"fullWord":3065},{"subwords":[93,94,126,127,1009,2766,2772,3052,3066,4431,4551,4639,5620,6055,6057,18322,18336,18339,18495,18498,18541,18565],"fullWord":3066},{"subwords":[93,126,399,488,1009,2813,3052,3067,3135,3495,5620,5648,6055,6057,10072,10073,10247,10324,10376,10460,18322,18336,18365,18370,18495,18498,18541,18547,18565],"fullWord":3067},{"subwords":[111,1053,1072,2766,2813,3069,3071,3447,4263,5442,5452,10072,10090,10270],"fullWord":3069},{"subwords":[126,1064,3052,3070,3229,3384,4239,4375,7416,7551,8175,8233,8378,8951,9026,18323,18342,18508,18796,19418,19583,19892],"fullWord":3070},{"subwords":[111,950,1070,1071,2813,2822,2825,3033,3071,3072,3073,3074,3478,10072,10082,10086,10969,10972,15880,15884,15942,16255,17001,18051,18094,19871],"fullWord":3073},{"subwords":[111,382,2813,3017,3050,3071,3074,3075,3478,10072,15880,15942,19871],"fullWord":3075},{"subwords":[93,94,96,200,1053,2766,2771,2782,3021,3022,3076,3077,4263,4267,4268,4269,4271,4431,4432,4639,4826,4849,5455,5456,5471,5478,5627,5656,6023,15880,15893,16058,16059,16114,16252,16270,16298,18066,18067,19871,19876,19877],"fullWord":3077},{"subwords":[93,96,121,123,796,810,812,817,825,905,906,2941,2954,2960,3001,3021,3076,3078,3168,4224,4268,4271,4312,4326,4330,4350,4351,5588,5599,5627,5654,5655,5656,5976,5977,6023,14717,14722,14881,15021,15048,15777,15782,15840,15880,16058,16060,16142,16145,16270,16286,16298,16419,18056,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":3078},{"subwords":[93,96,973,3021,3024,3051,3076,3079,3165,4268,4271,4370,5627,5656,6023,6039,15880,15892,16058,16061,16270,16291,16298,16303,18066,18073,19871,19876,19882],"fullWord":3079},{"subwords":[93,126,1009,1106,3052,3080,3081,5620,6055,6057,18541,19908,19975,20095],"fullWord":3081},{"subwords":[93,114,121,796,817,1106,1109,2869,2883,2885,2941,2954,2977,3012,3014,3080,3083,3084,4069,4091,4093,5588,5595,5856,5976,12224,12229,12270,12305,12319,14717,14821,14921,14925,15021,15337,19948,19950],"fullWord":3084},{"subwords":[93,96,121,123,796,810,817,825,905,906,1106,1109,1110,1114,2941,2954,2960,3001,3012,3016,3021,3080,3083,3085,3086,4091,4095,5588,5599,5976,5977,6023,14717,14722,14881,14921,14929,15021,15048,15337,15354,15880,16076,16078,16142,16145,16270,16286,16298,16419,19967,20070,20071],"fullWord":3085},{"subwords":[349,796,852,2941,3087,3402,9376,20107,20117],"fullWord":3087},{"subwords":[93,96,1106,1114,1124,3021,3080,3086,3088,3089,3402,6023,9079,9085,15880,16076,16178,16270,16298,16769,19967,20107,20115,20119,20121,20129,20134,20191,20197],"fullWord":3089},{"subwords":[337,340,1124,2813,3090,3091,3402,10072,15880,15931,15942,16178,16179,16769,16844,17029,17035,19919,19923,20107,20110,20112,20115,20191],"fullWord":3091},{"subwords":[110,287,1115,2869,3092,3402,7283,7604,9207,9208,12230,19920,19948,20107,20152,20155],"fullWord":3092},{"subwords":[126,3052,3093,3095,3100,3402,3429,3440,9101,9453,18347,18823,19975,19977,20107,20210],"fullWord":3093},{"subwords":[126,132,796,809,911,2941,3003,3052,3094,3605,3965,12680,12686,12965,12966,13008,13087,14898,15592,15691,18333,18432,18449,18463,19093,19094,19098,19165,19975],"fullWord":3094},{"subwords":[110,287,1154,1158,2869,3096,3098,3402,7283,7604,7747,9207,9208,12230,20326,20349,20393,20399,20742,20774,20790],"fullWord":3098},{"subwords":[504,596,716,2848,2869,3100,3101,4400,11086,11213,11264,11408,11409,11410,12201,12244,12311,21051,21153],"fullWord":3101},{"subwords":[93,96,1196,1197,3021,3076,3100,3102,3103,4268,4271,5619,5627,5656,6023,15880,16058,16062,16103,16270,16298,18066,18077,19871,19876,21097,21105,21130],"fullWord":3103},{"subwords":[93,94,96,200,2766,2771,2782,3021,3022,3104,3105,3113,3117,3119,4431,4432,4639,4680,4826,5605,5606,6023,15880,15893,16114,16270,16298,16319,16320],"fullWord":3105},{"subwords":[93,96,973,3021,3024,3104,3106,3119,3165,5605,5611,6023,6031,6039,6042,15880,15892,16270,16291,16298,16303,16319,16342],"fullWord":3106},{"subwords":[93,94,96,121,122,123,200,796,800,810,817,825,905,906,2766,2771,2780,2781,2782,2941,2949,2953,2954,2955,2960,3001,3021,3022,3111,3112,4431,4432,4516,4520,4607,4611,4639,4810,4826,5588,5599,5976,5977,6023,14717,14718,14722,14736,14751,14881,14882,14961,14965,15021,15028,15048,15060,15087,15880,15890,15893,16114,16142,16145,16146,16270,16286,16298,16419],"fullWord":3112},{"subwords":[3113,3115,3116,3117,3119,3153,3154,4120,4121,4122,4130,4639,4678,4679,4680,4810,4826,5984,6023,15021,15028,15048,15060,15071,15087,15093,15096,16228,16229,16298,16311,16319,16320,16340,16425,16426],"fullWord":3116},{"subwords":[3118,3413,4639,4714,4720,4774,4909,4935,4947,4985,4988,4993,5856,5865,7493,7502,7604,9079,9082,9207,12410],"fullWord":3118},{"subwords":[3113,3120,3121,4639,4650,4714,4715,4728,4731,4739,4909,4935,5691,5756,5771,9079,9082,9108,9117,10378,10383,10414,10518,10530,10536,10537],"fullWord":3121},{"subwords":[3120,3122,4120,4125,5691,5735,5984,5995,9079,9384,10383,10388,10414,10518,10536,10549,10677,15021,15107,15188,15411,15444,15473],"fullWord":3122},{"subwords":[1576,1590,1636,3119,3124,3125,5691,5693,5790,6023,10323,10383,10392,10451,16298,16319],"fullWord":3125},{"subwords":[3126,4120,4125,4232,5691,5694,5698,5984,6189,6196,10383,10388,10391,10495,11061,11065,11074,15021,15107,15201,15866],"fullWord":3126},{"subwords":[93,337,399,422,2813,2814,3107,3108,3109,3120,3127,3402,5640,9079,10072,10073,10324,10414,10518,10536],"fullWord":3127},{"subwords":[93,121,399,442,449,796,817,2813,2826,2830,2941,2954,2971,3128,3129,3493,5588,5592,5780,5976,10072,10073,10075,10324,10343,10355,14717,14968,15021,15022],"fullWord":3129},{"subwords":[3113,3128,3130,4639,4728,4731,4744,5691,5756,5780,10378,10383],"fullWord":3130},{"subwords":[3128,3132,3133,3134,3555,3701,3708,3709,3714,5650,5780,5781,6023,10443,10447,10760,10888,12845,12848,16298,16368,17097,17316,17354,17359],"fullWord":3133},{"subwords":[3109,3120,3135,3136,3429,3430,5640,6057,9079,10376,10414,10460,10518,10536,10691,10694,18823,18844,18863,18866],"fullWord":3136},{"subwords":[3138,3145,5856,6057,11483,11512,11574,11578,12339,12374,18576,18579,18583,18595,18607],"fullWord":3138},{"subwords":[3113,3117,3119,3139,3140,4639,4680,4774,4785,4786,4826,5665,5856,5865,5875,5918,6023,12339,12340,12344,16160,16298,16319,16320,16335,16381],"fullWord":3140},{"subwords":[3119,3139,3141,3154,4120,4130,5856,5918,5984,5998,6000,6023,12339,15021,15048,16160,16228,16230,16298,16319,16335,16340,16425,17237],"fullWord":3141},{"subwords":[3119,3139,3142,3165,5856,5918,6023,6031,6039,6042,12339,12367,16160,16161,16298,16303,16319,16335,16342,16394],"fullWord":3142},{"subwords":[3143,3777,3786,3788,3814,3898,3902,3913,3919,3929,4181,4182,5653,5856,5918,5953,5955,6000,6004,6023,12506,12548,12556,12560,12561,12874,12875,12876,12879,12965,12971,12979,12982,13007,15021,15042,15043,15048,15238,15592,15599,15610,15611,15676,16188,16198,16203,16298,16391,17272,17316,17383,17419],"fullWord":3143},{"subwords":[3144,3165,4268,4271,4370,5656,5856,5918,6023,6039,12367,16298,16303,16398,18066,18073,18117,18130,19876,19882],"fullWord":3144},{"subwords":[3145,3146,3149,3161,4120,4144,5856,5928,5935,5984,5985,5998,6057,12339,12374,15021,15030,15241,15312,15748,18576,18583,18607,18642,18649,18650,19240],"fullWord":3146},{"subwords":[93,114,121,126,693,694,709,796,817,911,1009,2869,2883,2885,2908,2910,2941,2954,2962,2977,3003,3004,3052,3055,3145,3148,3161,4069,4085,5588,5595,5620,5849,5856,5976,5982,6055,6057,6074,12224,12229,12270,12319,12325,12338,12374,14717,14821,14847,14898,14901,14959,15021,15024,15049,15241,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,19197,19220],"fullWord":3148},{"subwords":[3145,3146,3149,3161,4120,4144,5856,5928,5935,5984,5985,5998,6057,12339,12374,15021,15030,15241,15312,15748,18576,18583,18607,18642,18649,18650,19240],"fullWord":3149},{"subwords":[3145,3151,4268,4293,4300,4375,4376,5846,5856,6057,11512,11534,11574,12184,12374,12659,18573,18595,18607,19434,19438,19730],"fullWord":3151},{"subwords":[93,121,399,401,796,817,2813,2941,2954,2971,3152,3493,4120,4125,5588,5592,5691,5976,5984,10072,10073,10075,10324,10355,10383,10388,14717,14968,15021,15107],"fullWord":3152},{"subwords":[3119,3154,3155,4120,4130,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,5984,6023,15021,15048,15058,15283,15334,15777,15782,15840,16228,16298,16307,16319,16340,16425,18056,18066,18071,18150,19876,19878,19880],"fullWord":3155},{"subwords":[93,96,121,123,349,359,796,810,817,825,858,863,905,906,2941,2954,2960,2968,3001,3021,3156,3157,3402,4158,5588,5599,5976,5977,5993,5994,6023,9079,9085,9376,9384,9389,9409,14717,14722,14788,14881,15021,15048,15411,15415,15526,15880,16028,16142,16145,16178,16270,16286,16298,16419,16769,16889,16890,17722],"fullWord":3157},{"subwords":[3119,3154,3158,4120,4130,4158,5735,5984,5995,6023,9079,9085,9384,9389,9409,15021,15048,15411,15415,15526,16178,16228,16298,16319,16340,16425,16769,16889,16890,16892,17722],"fullWord":3158},{"subwords":[3159,4159,4268,4293,4312,4326,4336,5654,5830,5846,9079,9384,11539,11541,11619,11743,15021,15202,15411,15480,15481,15777,15806,19850,19852,19862],"fullWord":3159},{"subwords":[3160,3161,4120,4131,4144,5984,5985,6057,11483,11539,11543,11574,11578,11581,11588,15021,15202,15214,15312,15748,18576,18579,18595,18642,18644,19240],"fullWord":3160},{"subwords":[3119,3154,3161,3162,4120,4130,4142,4144,4238,4241,5984,5985,5986,6018,6023,6046,6057,15021,15048,15290,15306,15312,15748,16228,16298,16302,16304,16319,16340,16425,16457,17823,17840,18576,18588,18642,18658,19240,19242],"fullWord":3162},{"subwords":[3163,9079,9384,15021,15337,15373,15411,15549,20102,20119,20129,20132,21023,21025,21029],"fullWord":3163},{"subwords":[3164,4268,4271,4293,5656,5845,5846,5847,6023,9079,9085,9422,11619,11759,11760,11764,12080,12152,12163,16178,16260,16298,16375,16769,18066,18083,18103,19876],"fullWord":3164},{"subwords":[3113,3117,3119,3165,3166,4639,4680,4826,6023,6031,6039,6042,16298,16303,16319,16320,16323,16342],"fullWord":3166},{"subwords":[3119,3165,3167,6023,6031,6039,6042,6043,16298,16303,16319,16342],"fullWord":3167},{"subwords":[93,96,121,123,796,810,812,817,825,905,906,2941,2954,2960,3001,3021,3076,3078,3168,4224,4268,4271,4312,4326,4330,4350,4351,5588,5599,5627,5654,5655,5656,5976,5977,6023,14717,14722,14881,15021,15048,15777,15782,15840,15880,16058,16060,16142,16145,16270,16286,16298,16419,18056,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":3168},{"subwords":[93,121,126,796,817,826,911,1009,2941,2954,2962,3003,3004,3052,3055,3161,3169,4085,4115,4120,4144,5588,5620,5622,5976,5982,5984,5985,6055,6057,14717,14898,14901,14959,15021,15049,15312,15748,18449,18453,18541,18554,18576,18642,19197,19240],"fullWord":3169},{"subwords":[3170,3547,3577,3701,3708,3777,3786,3789,3825,4029,5650,5653,5856,5861,5953,10443,10444,10495,10760,10822,11065,12504,12845,12874,12876,12882,21120,21183],"fullWord":3170},{"subwords":[93,94,98,99,2766,2785,3172,3174,3175,3253,4431,4595,4639,5582,6210,6211,6230,6231,6406,8217,8440],"fullWord":3175},{"subwords":[93,98,121,796,801,817,828,2785,2941,2954,3174,3176,3206,3209,3253,5582,5588,5976,6210,6212,6308,6311,6317,6392,8333,8453,8552,14717,14775,14958,15021,15114,15376],"fullWord":3176},{"subwords":[93,96,98,101,325,932,2785,2786,3021,3025,3174,3177,3221,3253,3254,5582,6023,6210,6214,8362,15880,15904,16270,16298,16574,16575],"fullWord":3177},{"subwords":[325,932,3025,3178,3179,8362,15880],"fullWord":3179},{"subwords":[325,647,691,932,2800,2869,2906,3025,3180,3181,3272,3273,3274,3305,3306,3307,3316,3402,8362,8612,8678,8679,9207,9208,9209,9213,9307,15880,15986,16134,16178,16629,16769,16858,16874],"fullWord":3181},{"subwords":[325,349,359,796,801,810,905,932,2941,3001,3025,3182,3183,3206,3217,3272,3273,3274,3402,4083,8245,8248,8362,8612,8678,8934,9376,9409,14775,14886,15416,15880,16028,16142,16178,16769,16889,17722],"fullWord":3183},{"subwords":[93,96,98,101,325,932,3021,3025,3184,3221,3272,3273,3274,3402,5582,6023,8362,8612,8625,8628,8678,9079,9085,15880,16178,16270,16298,16574,16769],"fullWord":3184},{"subwords":[93,98,126,399,488,1009,2813,3052,3135,3185,3229,3238,3255,3495,5582,5620,5648,6055,6057,6058,8258,8280,8378,8381,8445,8461,10072,10073,10246,10247,10257,10258,10324,10325,10373,10376,10460,10461,18323,18365,18370,18541,18543,18547,18570,18697],"fullWord":3185},{"subwords":[325,932,950,2813,2822,2825,3025,3033,3186,3187,3472,8209,8216,8362,10072,10082,10086,10231,15880,15884,15942,16501,17001],"fullWord":3187},{"subwords":[105,2812,2813,2822,3100,3186,3188,3487,8209,8215,8420,10072,10082,10089,10135,10304,21041,21047],"fullWord":3188},{"subwords":[325,574,579,932,961,2848,2859,2865,2868,2921,2938,3025,3189,3190,3191,3193,3202,3204,3225,3336,4048,4237,8290,8296,8321,8324,8362,8367,11086,11094,11097,11105,11270,11275,11330,11335,12079,13154,13167,13336,15880,15973,16014,16129,16130,16531,17476],"fullWord":3191},{"subwords":[105,574,2848,2859,2867,2921,3100,3189,3190,3192,3202,3336,8290,8321,8420,11086,11094,11270,11408,12079,13154,13424,21051,21064,21153],"fullWord":3192},{"subwords":[93,98,114,2759,2869,2883,3107,3194,5582,5856,8297,8540,12229],"fullWord":3194},{"subwords":[105,716,2869,3100,3195,4400,8420,12311],"fullWord":3195},{"subwords":[93,98,114,269,2788,2869,2883,3196,3197,5582,5856,7493,8233,8297,8304,8540,12229,12230],"fullWord":3197},{"subwords":[126,134,325,693,711,932,2869,2906,2907,2908,2917,3025,3041,3052,3064,3198,3199,3229,3230,4238,4241,8318,8362,8371,8378,8391,8935,12612,15880,15986,16041,16134,16136,16157,16559,17232,17764,18323,18324,18408,18428,18686],"fullWord":3199},{"subwords":[105,126,693,716,2869,2908,2918,3052,3059,3100,3198,3200,3229,4400,8378,8420,12311,12612,18323,18408,18686,18806,21039],"fullWord":3200},{"subwords":[93,98,399,403,481,732,2813,2921,2922,3202,3203,3236,3255,3465,4047,5582,5956,8258,8321,8445,8450,8525,8549,10072,10073,10182,10324,10325,10350,10373,13154,13155,13204,13207,13439,13443,13450,13885,13940],"fullWord":3203},{"subwords":[200,325,796,801,810,905,932,2766,2782,2941,2949,2953,3001,3025,3172,3173,3206,3207,3208,3217,4083,4543,8217,8327,8331,8362,8934,14736,14751,14775,14886,15880,15893,16114,16142,16503,16547],"fullWord":3208},{"subwords":[93,94,98,99,121,122,796,800,801,802,817,2766,2780,2941,2949,2954,2955,3111,3172,3206,3207,3209,3210,3242,4431,4516,4607,4639,4810,5582,5588,5976,8217,8327,8333,8334,8440,8453,8454,8552,8558,14717,14718,14736,14775,14958,14961,15021,15028,15060,15376],"fullWord":3210},{"subwords":[93,96,98,101,121,123,325,796,801,804,810,817,825,905,906,932,2941,2954,2960,3001,3021,3025,3027,3206,3209,3211,3217,3221,3223,4083,5582,5588,5599,5976,5977,6023,8333,8338,8362,8453,8456,8552,8584,8934,14717,14722,14775,14881,14886,14958,15021,15048,15376,15377,15880,16142,16145,16270,16286,16287,16298,16419,16549,16574,16577],"fullWord":3211},{"subwords":[93,98,121,269,796,801,817,2788,2790,2941,2954,3206,3209,3212,4062,5582,5588,5976,5988,7375,7461,7904,8233,8333,8453,8552,14717,14758,14762,14775,14958,15021,15141,15376],"fullWord":3212},{"subwords":[325,796,801,810,869,883,905,932,2848,2868,2941,3001,3025,3189,3193,3206,3213,3214,3217,3225,3336,4065,4068,4083,8290,8296,8346,8349,8362,8934,11086,11094,11097,11105,11276,11281,11283,11284,11314,11317,11330,11335,14775,14808,14820,14886,15880,15973,16129,16142,16221,16531],"fullWord":3214},{"subwords":[118,603,796,801,806,809,2869,2941,3206,3215,3777,3913,8696,8714,8789,8857,8858,8867,12270,12271,12480,12548,12680,12965,12966,12968,14775,14821,14822,14823,15386,15560,15568,15592],"fullWord":3215},{"subwords":[105,796,801,2941,3000,3100,3206,3216,3220,4232,8358,8420,14735,14775,14939,15864],"fullWord":3216},{"subwords":[126,134,325,796,801,810,905,911,918,932,2941,3001,3003,3011,3025,3041,3052,3064,3206,3217,3218,3219,3229,3230,4083,4238,4241,8360,8361,8362,8371,8378,8391,8934,8935,14775,14886,14898,14900,14912,15880,16041,16142,16157,16559,17773,17774,18323,18324,18449,18472,19224,19381],"fullWord":3219},{"subwords":[93,94,96,98,99,101,200,325,932,934,2766,2771,2782,3021,3022,3025,3026,3172,3173,3221,3222,4431,4432,4543,4614,4639,4826,5582,6023,8217,8219,8362,8440,8443,15880,15893,16114,16270,16298,16503,16504,16574,16581],"fullWord":3222},{"subwords":[93,96,98,101,121,123,325,796,801,804,810,817,825,905,906,932,2941,2954,2960,3001,3021,3025,3027,3206,3209,3211,3217,3221,3223,4083,5582,5588,5599,5976,5977,6023,8333,8338,8362,8453,8456,8552,8584,8934,14717,14722,14775,14881,14886,14958,15021,15048,15376,15377,15880,16142,16145,16270,16286,16287,16298,16419,16549,16574,16577],"fullWord":3223},{"subwords":[93,96,98,101,325,932,936,973,3021,3024,3025,3028,3165,3221,3224,3263,5582,6023,6039,8362,15880,15892,16033,16270,16291,16298,16303,16574,16609],"fullWord":3224},{"subwords":[325,932,973,2848,2868,3025,3189,3193,3225,3226,3336,8290,8296,8362,11086,11094,11097,11105,11330,11335,11348,12082,15880,15892,15973,16033,16129,16133,16531,16537,17160],"fullWord":3226},{"subwords":[105,325,932,944,2848,2868,3025,3100,3102,3189,3193,3225,3227,3336,8290,8296,8362,8420,8428,11086,11094,11097,11105,11330,11335,11340,11408,11424,15880,15973,16103,16129,16531,16572,16758,21051,21055,21153],"fullWord":3227},{"subwords":[93,96,98,101,126,134,325,932,1009,3021,3025,3041,3042,3052,3057,3064,3221,3228,3229,3230,3238,3239,3264,4238,4241,5582,5616,5620,5626,6023,6055,6057,6058,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,15880,15883,16041,16043,16157,16158,16270,16293,16298,16304,16457,16559,16574,18323,18324,18541,18543,18559,18570,18697],"fullWord":3228},{"subwords":[105,126,1047,3052,3059,3068,3100,3229,3231,8378,8420,18323,18336,18495,18691,18806,19389,21039],"fullWord":3231},{"subwords":[93,94,98,99,1145,1147,2766,3096,3097,3172,3232,3233,3268,4431,4574,4639,4865,5582,8217,8409,8410,8440,8588,20303,20309,20524,20599],"fullWord":3233},{"subwords":[93,98,121,796,801,817,1145,2941,2954,3096,3206,3209,3232,3234,3268,4096,4147,5582,5588,5976,8333,8409,8453,8552,8588,14717,14775,14933,14958,15021,15376,20410,20417,20510,20599],"fullWord":3234},{"subwords":[93,96,98,101,325,732,739,779,932,961,2921,2922,2926,2938,3021,3025,3202,3204,3221,3236,3237,4048,4237,5582,5956,6023,6033,8321,8324,8362,8367,8450,8452,8549,13154,13155,13159,13167,13336,13439,13443,13461,13643,15880,16014,16139,16270,16298,16543,16574,17476,17477,17525],"fullWord":3237},{"subwords":[93,96,98,101,126,134,325,932,1009,3021,3025,3041,3042,3052,3057,3064,3221,3228,3229,3230,3238,3239,3264,4238,4241,5582,5616,5620,5626,6023,6055,6057,6058,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,15880,15883,16041,16043,16157,16158,16270,16293,16298,16304,16457,16559,16574,18323,18324,18541,18543,18559,18570,18697],"fullWord":3239},{"subwords":[3240,3241,6023,8474,8476,16298,16574],"fullWord":3241},{"subwords":[93,94,98,99,121,122,796,800,801,802,817,2766,2780,2941,2949,2954,2955,3111,3172,3206,3207,3209,3210,3242,4431,4516,4607,4639,4810,5582,5588,5976,8217,8327,8333,8334,8440,8453,8454,8552,8558,14717,14718,14736,14775,14958,14961,15021,15028,15060,15376],"fullWord":3242},{"subwords":[3119,3243,3244,5740,5742,6023,8474,8476,8483,16298,16319,16326,16574],"fullWord":3244},{"subwords":[3243,3245,5740,6189,8474,8483,8607,9865],"fullWord":3245},{"subwords":[3119,3246,3247,4048,4237,6023,6033,8483,8549,13489,13510,16298,16319,16336,16574,16586,17525,17531],"fullWord":3247},{"subwords":[3119,3154,3248,3249,4120,4130,5984,6023,8483,8552,8562,8568,8584,8934,15021,15048,16228,16298,16319,16340,16425,16574,16587],"fullWord":3249},{"subwords":[3248,3250,4120,4232,5698,5984,6189,6196,8483,8552,8562,8607,15021,15866],"fullWord":3250},{"subwords":[3119,3251,6023,8483,16298,16319,16574],"fullWord":3251},{"subwords":[3119,3252,6023,6189,6198,8483,8607,16298,16319,16574,16758,21130],"fullWord":3252},{"subwords":[93,96,98,101,325,399,400,407,932,2813,3021,3025,3221,3255,3256,3472,5582,6023,8258,8262,8362,8445,8448,10072,10073,10077,10231,10324,10325,10360,10365,10373,15880,15942,15948,16121,16270,16274,16298,16524,16574],"fullWord":3256},{"subwords":[3257,3258,3272,3299,3305,3309,3336,3413,5856,8532,8540,8612,8625,8648,9079,9207,9213,11461,11489,11512,11619,11645,11697,11698,11706,12410,12415,12443],"fullWord":3258},{"subwords":[3259,4232,6008,8552,8583,8607,15021,15866],"fullWord":3259},{"subwords":[3161,3260,3261,4232,6057,6058,8552,8607,15021,15312,15317,15748,15866,18570,18572,18697,18724,18806,19257,19377,19570,21135],"fullWord":3261},{"subwords":[2486,2610,3262,3378,4242,4248,4251,4268,4312,4317,4326,5654,8552,8554,8936,8945,14995,15021,15749,15755,15777,19840],"fullWord":3262},{"subwords":[3165,3263,3264,3265,4238,4241,6023,6039,6057,6058,8586,8935,16298,16303,16304,16306,16457,16464,16574,16609,18570,18697],"fullWord":3265},{"subwords":[3264,3266,4238,4241,4423,6023,6057,6058,8586,8607,8935,16269,16298,16304,16457,16574,16758,18018,18019,18570,18572,18697,18724,18806,21130,21135],"fullWord":3266},{"subwords":[93,98,399,1106,2813,2842,3080,3255,3267,3480,5582,8258,8287,8400,8445,10072,10073,10285,10324,10325,10373,10471,10472,19923,19924,19986,20014],"fullWord":3267},{"subwords":[3113,3268,3269,4639,4865,6118,8483,8484,8588,8589,20524,20532,20533,20623],"fullWord":3269},{"subwords":[3248,3268,3270,4120,4147,5984,6118,6119,8483,8552,8562,8588,8590,15021,20532,20587,20623,20639],"fullWord":3270},{"subwords":[3272,3275,3276,3277,3281,8612,8614,8616,8678,16167,16178,16769,16772,16823,16954],"fullWord":3277},{"subwords":[3109,3120,3272,3275,3278,3289,3292,3511,5640,5769,8500,8612,8625,9079,10373,10414,10518,10536],"fullWord":3278},{"subwords":[3272,3275,3279,3280,3281,3944,8612,8678,8714,8739,12810,16178,16769,17316],"fullWord":3280},{"subwords":[3272,3282,3283,3284,4639,4714,4909,4910,4928,4935,4936,8612,8617,8619,8620,8625,8626,9079,9082],"fullWord":3284},{"subwords":[3272,3282,3283,3285,3406,4155,4639,4714,4810,4909,4911,4935,5023,8503,8552,8558,8612,8617,8619,8621,8625,8626,8672,8673,9079,9082,9384,9385,15021,15028,15060,15171,15411,15412,15416,15417,15428,15433],"fullWord":3285},{"subwords":[3272,3282,3283,3286,4639,4714,4826,4909,4913,4935,4939,5037,5040,5046,6023,8612,8617,8619,8623,8625,8626,8628,8678,9079,9082,9085,9111,9127,16178,16298,16574,16581,16615,16769,16780],"fullWord":3286},{"subwords":[3253,3254,3272,3287,3288,6023,6531,6532,6543,6642,8612,8625,8628,8678,9079,9085,9135,16178,16298,16574,16769],"fullWord":3288},{"subwords":[3120,3123,3272,3289,3290,3292,3293,3327,5769,6023,8500,8502,8612,8625,8628,8678,9079,9085,9416,10373,10414,10415,10518,10536,10551,16178,16179,16298,16574,16769,17062],"fullWord":3290},{"subwords":[3272,3291,3665,5641,5718,8612,8625,8714,8725,8731,8739,9079],"fullWord":3291},{"subwords":[3120,3123,3272,3289,3290,3292,3293,3327,5769,6023,8500,8502,8612,8625,8628,8678,9079,9085,9416,10373,10414,10415,10518,10536,10551,16178,16179,16298,16574,16769,17062],"fullWord":3293},{"subwords":[3272,3294,3295,3296,8612,8640,9152,10521],"fullWord":3296},{"subwords":[3272,3295,3297,8612,8640,8643,8678,9152,9155,16178,16179,16625,16769,16834],"fullWord":3297},{"subwords":[3272,3295,3298,8612,8640,8644,9101,9152,9157,10583],"fullWord":3298},{"subwords":[3257,3272,3282,3283,3299,3300,3336,4639,4714,4909,4935,4938,4971,4972,8532,8612,8617,8619,8625,8626,8648,9079,9082,9109,11461,11471,11619,11626],"fullWord":3300},{"subwords":[3257,3272,3299,3301,3336,4159,5830,8503,8532,8552,8612,8625,8648,8672,9079,9384,11461,11539,11541,11619,11743,15021,15171,15202,15411,15416,15417,15480,15481],"fullWord":3301},{"subwords":[3257,3272,3299,3302,3336,5845,6023,8532,8539,8612,8625,8628,8648,8678,9079,9085,9422,11461,11563,11619,11759,11764,12080,16178,16298,16375,16574,16627,16769],"fullWord":3302},{"subwords":[3272,3303,3304,3319,3321,3336,4046,4048,4237,8612,8648,8664,8671,8678,9178,9196,9422,11759,12079,13651,13702,13841,14421,16178,16627,16639,16769,16853,16883,17550],"fullWord":3304},{"subwords":[325,647,691,932,2800,2869,2906,3025,3180,3181,3272,3273,3274,3305,3306,3307,3316,3402,8362,8612,8678,8679,9207,9208,9209,9213,9307,15880,15986,16134,16178,16629,16769,16858,16874],"fullWord":3307},{"subwords":[3272,3275,3305,3308,3411,8612,9207,9213],"fullWord":3308},{"subwords":[3272,3305,3309,3310,3316,3413,3415,5856,5918,6023,8540,8547,8612,8625,8628,8678,8679,9079,9085,9207,9213,9215,9307,12410,12415,12417,16178,16298,16574,16629,16631,16769,16858,16859,16860,16874],"fullWord":3310},{"subwords":[3272,3305,3311,3312,3316,8612,8614,8616,8678,8679,9207,9213,9276,9284,9307,9913,9929,9984,12418,12423,16178,16629,16769,16772,16823,16858,16874,16876,16954,16974,17241],"fullWord":3312},{"subwords":[3272,3305,3311,3313,8612,8614,9096,9101,9207,9213,9276,9285,9913,12418,21144],"fullWord":3313},{"subwords":[3272,3305,3314,3315,3316,3417,3689,3692,3777,3814,3944,8612,8678,8679,8714,8739,8789,9097,9099,9207,9213,9307,9360,9366,12560,12565,12810,16178,16180,16629,16769,16858,16874,17316,17383,17391],"fullWord":3315},{"subwords":[3272,3305,3316,3317,3328,3331,3429,4238,4241,8612,8660,8663,8678,8679,8685,8688,8691,8935,9207,9213,9307,9318,9325,9440,9447,12463,12471,12612,16178,16629,16653,16769,16858,16874,16907,17255,17256,18731,18738,18742,18823,18830,18894,18919,18947],"fullWord":3317},{"subwords":[3272,3305,3318,3328,3429,8612,8660,8688,9207,9213,9325,9440,12463,12612,18731,18823,18894,21272],"fullWord":3318},{"subwords":[3272,3319,3320,4046,8612,8664,8670,9101,13651,13813,13829,21146],"fullWord":3320},{"subwords":[3272,3322,3323,8612,8614,8616,8678,8934,9396,9399,9409,9937,10041,15416,15422,15425,15534,16178,16644,16769,16772,16823,16889,16954,17722],"fullWord":3323},{"subwords":[3272,3319,3321,3324,3325,4046,4048,4169,4237,8612,8664,8671,8678,8934,9409,13651,13702,13841,14403,14421,15416,15508,15524,16178,16239,16639,16769,16883,16889,17550,17722],"fullWord":3325},{"subwords":[3272,3319,3324,3326,4046,4232,8612,8664,9101,13651,14302,14410,14578,15416,15508,21146],"fullWord":3326},{"subwords":[3120,3123,3272,3289,3290,3292,3293,3327,5769,6023,8500,8502,8612,8625,8628,8678,9079,9085,9416,10373,10414,10415,10518,10536,10551,16178,16179,16298,16574,16769,17062],"fullWord":3327},{"subwords":[3272,3305,3328,3329,3429,8612,8660,8688,9207,9213,9325,9440,12463,12612,18731,18823,18894],"fullWord":3329},{"subwords":[3272,3305,3314,3328,3330,3429,3689,3777,3816,3965,8612,8660,8688,8714,8739,8789,8892,9097,9207,9213,9325,9335,9360,9440,12463,12574,12579,12612,13038,18731,18743,18823,18894,19036,19049],"fullWord":3330},{"subwords":[3272,3332,3333,6023,8612,8625,8628,8678,8693,8694,9079,9085,16178,16298,16574,16655,16659,16769,20119,20121,20129,20134,20197],"fullWord":3333},{"subwords":[3272,3334,3335,3444,8612,9101,9453,20122],"fullWord":3334},{"subwords":[3337,3338,3628,3632,3944,8714,8715,8719,12810,16672,17316,17319],"fullWord":3338},{"subwords":[3272,3275,3279,3339,5641,5646,8612,8625,8714,8725,8739,9079],"fullWord":3339},{"subwords":[3272,3340,3341,3693,3694,3944,8612,8678,8714,8739,8857,8874,8934,9086,9087,9409,12810,12965,12968,12970,12971,13007,15386,15416,15592,15599,15681,16178,16769,16889,17316,17722],"fullWord":3341},{"subwords":[3342,3343,3638,3644,3657,3697,3698,4639,4651,4656,5096,5099,5114,5641,8474,8714,8715,8716,8721,8725,8726,8743,12752,12802],"fullWord":3343},{"subwords":[3342,3344,3361,3697,3898,3906,5641,8474,8552,8575,8714,8715,8717,8725,8728,8743,8857,12724,12727,12965,12968,12979,15021,15386,15592,15593,15610],"fullWord":3344},{"subwords":[3342,3345,3367,3697,3699,3944,5641,6023,8474,8476,8714,8715,8719,8725,8730,8743,8881,12810,16298,16574,16672,16676,17316,17319],"fullWord":3345},{"subwords":[3342,3346,3347,3697,4029,5641,8474,8607,8714,8715,8718,8725,8743,8744,9865,21174],"fullWord":3346},{"subwords":[3348,3361,3701,3708,3898,5641,5650,8552,8575,8714,8725,8728,8754,8756,8857,10373,10443,10760,10765,10882,12724,12727,12845,12965,12968,12979,15021,15386,15592,15610,15621],"fullWord":3348},{"subwords":[442,2813,2826,3349,3597,3701,3702,3714,8268,8270,8276,8714,10072,10729,10760,10761,10765,12856],"fullWord":3349},{"subwords":[3336,3350,3351,3354,3357,3732,3765,3770,3864,3883,3944,4048,4237,8714,8845,8856,8886,11947,11961,12079,12806,12808,12810,12872,12936,14172,16172,16194,16664,16693,17316,17406,17407],"fullWord":3351},{"subwords":[3352,3367,3675,3677,3826,3860,3944,5641,6023,8714,8725,8730,8881,12809,12810,12895,12898,16298,16574,16676,16686,17316],"fullWord":3352},{"subwords":[3353,3675,3677,3826,3860,3944,3964,4029,8714,12809,12810,12895,12898,16686,16758,17316,17472],"fullWord":3353},{"subwords":[3272,3305,3314,3319,3354,3355,3689,3777,3864,4046,8612,8664,8714,8739,8789,8845,8851,9097,9207,9213,9360,12453,13651,13666,13765,13768,13809,14032],"fullWord":3355},{"subwords":[3354,3356,3864,3888,4029,8714,8845,9058,12933,14130],"fullWord":3356},{"subwords":[796,801,809,2813,2840,2941,2971,2972,2983,3206,3358,3597,3701,3702,3890,8276,8696,8714,8857,8858,8861,10072,10201,10729,10760,10765,12680,12948,12965,12966,12968,14775,15386,15560,15592],"fullWord":3358},{"subwords":[3359,3360,3638,3656,3893,3897,3944,5096,5104,5216,5221,8714,8721,8724,8857,8874,8934,12810,12965,12968,12971,13007,15386,15592,15599,15600,15609,16243,16674,17316,17323],"fullWord":3360},{"subwords":[93,98,121,796,801,809,817,2941,2954,3206,3209,3361,3362,3898,5582,5588,5641,5976,8333,8453,8552,8575,8696,8714,8725,8728,8857,8858,8859,12680,12724,12727,12965,12966,12968,12979,14717,14775,14958,15021,15376,15386,15560,15592,15610],"fullWord":3362},{"subwords":[3359,3361,3363,3638,3644,3647,3657,3893,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,5641,8552,8558,8575,8714,8721,8725,8726,8728,8857,8864,12724,12727,12728,12752,12802,12965,12968,12979,15021,15028,15060,15078,15386,15592,15600,15603,15610],"fullWord":3363},{"subwords":[3361,3364,3367,3898,3902,3929,3944,3946,5641,6004,6023,8552,8575,8581,8584,8714,8725,8728,8729,8730,8857,8874,8875,8881,8934,12724,12725,12727,12729,12810,12965,12968,12971,12979,12982,13007,15021,15048,15386,15592,15599,15610,15611,15676,16198,16298,16574,16676,16678,16697,17316,17419],"fullWord":3364},{"subwords":[3272,3275,3279,3340,3365,3419,3693,4106,4175,8612,8714,8739,8857,9086,12965,12968,15386,15416,15592],"fullWord":3365},{"subwords":[3366,3370,3944,4225,4312,4350,8714,8720,8857,8874,8906,8910,8934,12810,12965,12968,12971,13007,13044,13051,13052,15386,15592,15599,15842,16210,17316,17451,18050,19592],"fullWord":3366},{"subwords":[3367,3368,3673,3777,3786,3788,3814,3944,5641,5653,5856,5918,5953,5955,6023,8540,8547,8714,8725,8730,8789,8793,8797,8881,12506,12560,12561,12565,12810,12874,12875,12876,12879,16188,16298,16574,16676,16685,17316,17383],"fullWord":3368},{"subwords":[3165,3263,3367,3369,3944,3947,5641,6023,6039,8714,8725,8730,8881,8883,12810,16298,16303,16574,16609,16676,16680,17316,17434],"fullWord":3369},{"subwords":[3268,3371,3372,3638,3644,3657,4010,4013,4639,4656,4865,4885,5096,5114,5641,8588,8714,8721,8725,8726,8920,8923,12752,12802,13110,13111,20524,20689,20875],"fullWord":3372},{"subwords":[3272,3336,3373,8612,8648,8678,8934,9409,9422,11759,15416,15480,15489,16178,16236,16627,16769,16889,17175,17722],"fullWord":3373},{"subwords":[3272,3328,3331,3374,3429,4238,4241,8612,8678,8685,8688,8691,8934,8935,9409,9440,9447,15416,16178,16648,16653,16769,16889,16907,17722,17881,18742,18823,18830,18947],"fullWord":3374},{"subwords":[796,801,809,869,2848,2941,2985,3189,3206,3213,3336,3375,3732,3733,3911,4065,8290,8346,8696,8714,8857,8858,11086,11094,11095,11102,11265,11276,11281,11283,11824,12680,12806,12965,12966,12968,14775,14808,15386,15560,15564,15592,15627],"fullWord":3375},{"subwords":[3257,3336,3361,3376,3732,3744,3748,3898,3911,5641,8532,8552,8575,8714,8725,8728,8775,8778,8857,11461,11539,11970,12724,12727,12806,12965,12968,12979,15021,15202,15386,15592,15610,15627,15632],"fullWord":3376},{"subwords":[3336,3377,3675,3732,3826,3911,8714,8786,8857,11921,11922,11936,12806,12809,12895,12965,12968,15386,15592,15627,15652],"fullWord":3377},{"subwords":[2505,2710,3378,3379,4242,4247,8936,8937],"fullWord":3379},{"subwords":[3380,3381,8941,8942,9019,16744,18050,18051,19592],"fullWord":3381},{"subwords":[3382,3383,4273,4275,8948,8950,16254,18050,19592],"fullWord":3383},{"subwords":[3336,3386,3387,4293,8970,12083,12127],"fullWord":3387},{"subwords":[3336,3386,3388,3389,3390,4048,4049,4237,4293,4302,4311,4367,8970,8982,8986,8988,9002,12079,12083,12158,14551,14552,16260,18050,18103,18114,18135,19592,19624,19628,19825],"fullWord":3389},{"subwords":[3391,3392,8941,8942,8989,8993,8995,8997,9019,16744,16748,17291,18050,18051,18117,18126,19592],"fullWord":3392},{"subwords":[3391,3393,8941,8989,8993,8996,21218],"fullWord":3393},{"subwords":[3394,3395,4225,4312,4341,4345,4350,8934,9004,9007,11028,11039,15842,16175,16746,17141,18050,19592],"fullWord":3395},{"subwords":[3396,3397,4225,4312,4350,8934,8989,8997,15821,15832,15842,16748,18050,18117,19592,19866,19867],"fullWord":3397},{"subwords":[3398,4225,4312,4350,8934,15842,18050,19592],"fullWord":3398},{"subwords":[3399,3400,4263,4268,4269,4375,4376,4639,5455,5462,5471,5479,5553,5688,6057,6058,8945,8946,9026,18570,18697,18794],"fullWord":3400},{"subwords":[3264,3399,3401,4238,4241,4268,4271,4375,4376,4379,4394,5656,6023,6057,6058,8586,8935,8945,8947,9026,9027,16265,16267,16298,16304,16457,16574,16753,16754,18050,18066,18074,18570,18697,18802,19485,19486,19592,19876],"fullWord":3401},{"subwords":[3109,3120,3404,4407,5640,9079,9101,10414,10495,10518,10536,11065],"fullWord":3404},{"subwords":[3405,3419,3421,3693,3898,4106,4175,9079,9384,12965,12979,15021,15411,15592,15610],"fullWord":3405},{"subwords":[3406,3407,4155,4158,4639,4714,4810,4826,4909,4911,4912,4913,4935,4939,5023,5037,5040,5367,6023,9079,9082,9085,9111,9127,9384,9385,9389,9409,15021,15028,15048,15060,15087,15411,15412,15415,15428,15433,15436,15443,15526,16178,16298,16769,16780,16889,16890,16891,17722],"fullWord":3407},{"subwords":[314,349,359,796,810,905,2941,3001,3171,3402,3408,3409,4062,4064,7375,7391,7396,7939,9376,9409,14758,14773,15461,15472,15880,15910,16028,16116,16142,16178,16219,16769,16889,17722],"fullWord":3409},{"subwords":[3406,3412,3413,4155,4639,4714,4774,4810,4909,4911,4935,4985,4988,4990,5023,5856,5865,5996,9079,9082,9207,9384,9385,12358,12410,12412,15021,15028,15060,15175,15227,15411,15412,15428,15433,15491],"fullWord":3412},{"subwords":[93,112,114,341,528,537,614,2848,2853,2869,2883,3402,3413,3414,5856,9079,9083,9207,9208,11086,11089,11156,11157,11213,11218,11234,11437,11446,11489,11512,11617,11619,11645,11697,11698,11706,12229,12244,12245,12410,12443],"fullWord":3414},{"subwords":[3413,3416,4268,5856,9079,9207,12410,14635,14659,14674],"fullWord":3416},{"subwords":[3272,3319,3324,3418,4046,5959,8503,8549,8552,8612,8625,8664,8672,9079,9384,13577,13578,13651,13705,13712,14262,14294,15021,15171,15248,15411,15416,15417,15508,15509],"fullWord":3418},{"subwords":[3109,3120,3419,3421,3422,3504,4106,5640,9079,9384,10414,10518,10536,10549,10677,15021,15188,15411,15444,15473],"fullWord":3422},{"subwords":[3419,3423,4106,4293,4312,15480,15806,19862],"fullWord":3423},{"subwords":[3419,3424,4106,4312,4350,9409,16178,16769,16889,17722,18083,19862],"fullWord":3424},{"subwords":[3425,4268,4312,4326,4336,5654,9079,9384,14635,14659,14682,15021,15274,15411,15777,19850,19862],"fullWord":3425},{"subwords":[3426,4312,4350,9409,16178,16769,16889,17722,18083,19862],"fullWord":3426},{"subwords":[3427,16178,16769,16779,16903,17316,17434],"fullWord":3427},{"subwords":[3161,3429,3430,3432,3433,3434,4142,4158,4238,4241,6018,6023,6057,9079,9085,9384,9389,9409,9447,15021,15048,15051,15306,15312,15411,15415,15526,15542,15543,15748,16178,16298,16304,16457,16769,16889,16890,16907,16911,17722,17881,18823,18830,18844,18847,18849,18850,18941,18943,18947,19267,19269,19277],"fullWord":3433},{"subwords":[3429,3430,3431,3435,4639,4714,4909,4925,4935,4942,5677,5680,6057,9079,9082,18823,18835,18844,18845],"fullWord":3435},{"subwords":[3429,3430,3434,3436,4238,4241,6023,6057,9079,9085,9090,9447,16178,16298,16304,16457,16769,16907,16911,18823,18830,18844,18850,18947],"fullWord":3436},{"subwords":[3429,3437,4239,7604,7637,9092,9207,9325,12463,18823,18894,18901],"fullWord":3437},{"subwords":[3429,3438,3689,3693,3777,3816,3913,3933,3965,9097,9207,9325,9335,9338,9340,9360,9400,12463,12469,12513,12548,12574,12965,13008,13038,15504,15592,15691,18823,18894,18945,19036,19049,19093,19098,19105,19292],"fullWord":3438},{"subwords":[3429,3439,4226,4238,4241,4312,4350,4356,4357,4375,4388,4394,9100,9409,9447,15427,15852,15854,15858,15861,16178,16265,16769,16889,16907,16917,17722,17881,18083,18085,18823,18830,18947,19862],"fullWord":3439},{"subwords":[3429,3430,3434,3441,3442,4238,4241,6023,6057,6105,6106,9079,9085,9447,16178,16298,16304,16457,16769,16907,16911,18823,18830,18844,18850,18947,20088,20095,20101,20119,20121,20129,20134,20197],"fullWord":3442},{"subwords":[3443,6023,9079,9085,9452,16178,16298,16769,20119,20121,20129,20134,20197],"fullWord":3443},{"subwords":[950,2813,2814,2822,2825,3033,3445,3446,10072,10082,10086,15880,15884,15942,17001],"fullWord":3446},{"subwords":[337,340,341,347,470,555,2813,2835,2839,2848,2868,3402,3450,3451,3453,3458,9414,9422,10072,10136,10161,10584,10585,10586,11086,11105,11148,11151,11173,11182,11330,11617,11618,11659,11685,11759,15880,15931,15942,15973,16129,16178,16179,16764,16769,17012,17076],"fullWord":3451},{"subwords":[594,2813,2835,2848,3100,3453,3454,3487,10072,10089,10136,10304,11086,11173,11408,21051,21153],"fullWord":3454},{"subwords":[796,809,869,2813,2835,2840,2848,2941,2971,2972,2983,2985,3453,3455,3597,3701,3702,3732,3733,3890,3911,4065,10072,10136,10738,10760,11086,11102,11173,11265,11276,11281,11303,11863,11963,12680,12948,12965,12966,14808,15564,15592,15627],"fullWord":3455},{"subwords":[470,481,486,574,579,961,2813,2835,2839,2848,2859,2865,2868,2921,2938,3453,3456,3457,3458,3465,3466,3473,4047,4048,4237,10072,10136,10158,10160,10161,10182,10194,10957,11086,11105,11173,11270,11275,11330,13154,13167,13204,13224,13227,13232,13336,13919,14414,15880,15942,15973,16014,16126,16129,16130,17012,17019,17476],"fullWord":3457},{"subwords":[2813,2869,2906,3171,3449,3459,3460,3461,3464,7293,7316,7396,7660,10072,10109,10115,12230,12233,15880,15910,15942,15986,16001,16116,16134,17003,17014,17211],"fullWord":3461},{"subwords":[950,2813,2822,2825,2869,2906,3033,3459,3462,3463,3464,9959,10072,10082,10086,10177,15880,15884,15942,15986,16007,16134,17001,17207],"fullWord":3463},{"subwords":[93,111,399,2813,3071,3468,3584,4268,5627,5970,10072,10073,10324,10470,14589,14595,14609,14610,14635],"fullWord":3468},{"subwords":[93,121,126,399,405,488,491,796,817,911,1009,2813,2941,2954,2962,2971,3003,3004,3006,3052,3055,3135,3161,3469,3493,3495,4085,4240,5588,5592,5620,5648,5976,5982,6055,6057,10072,10073,10075,10247,10254,10324,10355,10376,10460,14717,14898,14901,14959,14968,15021,15049,15050,15312,15748,18365,18370,18372,18449,18453,18541,18547,18554,19197],"fullWord":3469},{"subwords":[93,121,399,796,817,867,2807,2813,2822,2824,2941,2954,2971,3470,3471,3493,3505,4107,5588,5592,5778,5976,9760,10072,10073,10075,10082,10084,10128,10130,10214,10324,10338,10355,10416,14717,14729,14798,14968,15021],"fullWord":3471},{"subwords":[481,486,961,972,973,2813,2921,2938,3465,3466,3473,3474,3476,4047,4048,4237,10072,10182,10194,10236,13154,13167,13204,13232,13336,13344,15880,15892,15942,16014,16020,16126,16127,17019,17020,17476,17507],"fullWord":3474},{"subwords":[126,134,481,486,488,781,961,2813,2921,2938,3041,3052,3064,3465,3466,3467,3473,3475,4047,4048,4237,4238,4241,10072,10182,10194,10241,13154,13167,13168,13170,13204,13232,13336,13352,13364,13385,13438,13922,13929,14427,15880,15942,15960,16014,16041,16126,16157,17019,17022,17476,17510,17605,18365,18368,18436,18448,19386],"fullWord":3475},{"subwords":[973,2813,3100,3102,3476,3477,3487,3490,10072,10089,10236,10304,10313,15880,15892,15942,16103,16109,16128,17039,17041,17149],"fullWord":3477},{"subwords":[93,96,111,399,400,407,2813,3021,3071,3074,3076,3478,3479,3584,3586,4268,4271,5627,5656,6023,10072,10073,10077,10324,10360,10470,10965,15880,15942,15948,16058,16121,16270,16274,16298,17128,18066,19871,19876],"fullWord":3479},{"subwords":[93,121,399,796,817,1106,1109,2813,2842,2941,2954,2971,3012,3080,3083,3480,3481,3493,4091,5588,5592,5976,10072,10073,10075,10285,10287,10324,10355,10471,10472,14717,14921,14923,14968,15021,15337,19923,19924,19986,20014,20015],"fullWord":3481},{"subwords":[93,94,399,1145,1147,1155,2766,2813,3096,3097,3447,3482,3483,3509,4431,4466,4574,4601,4639,4641,4728,4865,5756,10072,10073,10074,10090,10093,10292,10293,10324,10327,10378,10490,20303,20309,20369,20370,20501,20502,20524,20566],"fullWord":3483},{"subwords":[93,121,399,796,817,1145,1155,2813,2941,2954,2971,3096,3482,3484,3493,3509,4096,4097,4147,5588,5592,5976,10072,10073,10075,10292,10324,10355,14717,14933,14968,15021,20369,20371,20410,20417,20501,20510],"fullWord":3484},{"subwords":[1187,2813,2846,2869,3459,3486,3597,3612,3701,3702,3777,10072,10301,10741,10760,10953],"fullWord":3486},{"subwords":[93,94,399,1196,2766,2813,3100,3447,3487,3488,4431,4466,4578,4601,4639,4641,4645,4728,4729,5567,5756,10072,10073,10074,10078,10089,10090,10093,10108,10304,10305,10324,10327,10332,10378,10495,11065,21050,21097],"fullWord":3488},{"subwords":[93,399,1196,2813,3100,3487,3489,10072,10073,10078,10089,10304,10324,10495,11065,21050,21094,21097],"fullWord":3489},{"subwords":[93,96,114,116,399,400,407,2813,2869,2883,2887,2906,3021,3459,3464,3491,3492,5745,5748,5856,5861,5918,6023,10072,10073,10077,10164,10167,10174,10175,10324,10344,10348,10360,10433,12229,15880,15942,15948,15986,15995,16121,16134,16270,16274,16298],"fullWord":3492},{"subwords":[93,96,121,123,399,400,407,796,810,817,825,905,906,2813,2941,2954,2960,2971,3001,3021,3493,3494,5588,5592,5593,5599,5976,5977,6023,10072,10073,10075,10076,10077,10207,10228,10324,10355,10360,14717,14722,14805,14881,14968,14973,15021,15048,15880,15942,15948,16121,16123,16142,16145,16182,16270,16274,16286,16298,16419,16420],"fullWord":3494},{"subwords":[93,96,126,134,399,400,407,488,1009,2813,3021,3041,3042,3046,3052,3057,3064,3135,3137,3495,3496,4238,4241,5616,5620,5626,5648,5649,6023,6055,6057,10072,10073,10077,10241,10247,10324,10360,10366,10376,10459,10460,10465,15880,15942,15948,15960,16041,16043,16121,16157,16270,16274,16293,16298,16304,16457,16459,17022,17023,17750,17811,18341,18365,18368,18370,18374,18541,18547,18548,18559,18660],"fullWord":3496},{"subwords":[93,399,401,1106,2813,2842,3080,3480,3497,5629,5691,6092,10072,10073,10285,10324,10368,10383,10471,10472,19923,19924,19986,19992,20014],"fullWord":3497},{"subwords":[3135,3137,3498,3499,3500,3501,4238,4241,5705,5706,5765,6023,6057,6443,6445,10376,10394,10396,10459,10460,10465,16298,16304,16365,16457],"fullWord":3501},{"subwords":[3503,4232,5988,7477,7992,8195,10398,10495,11065,11074,15021,15141,15201,15866],"fullWord":3503},{"subwords":[3109,3120,3419,3421,3422,3504,4106,5640,9079,9384,10414,10518,10536,10549,10677,15021,15188,15411,15444,15473],"fullWord":3504},{"subwords":[3505,3506,5778,5779,6023,10416,10417,15021,15037,15048,16298],"fullWord":3506},{"subwords":[3507,4120,4125,5691,5796,5984,6092,6100,10383,10388,10471,10479,15021,15107,15337,15340,19992,19996],"fullWord":3507},{"subwords":[3120,3123,3508,5799,6023,6107,6110,9079,9085,9416,10414,10415,10471,10481,10486,10518,10536,10551,10711,10719,16178,16179,16298,16769,17062,20004,20007,20119,20121,20129,20134,20144,20197],"fullWord":3508},{"subwords":[3113,3509,3510,4639,4728,4731,4865,5691,5756,6118,10378,10383,10490,20524,20532,20533,20566],"fullWord":3510},{"subwords":[3109,3120,3272,3275,3278,3289,3292,3511,5640,5769,8500,8612,8625,9079,10373,10414,10518,10536],"fullWord":3511},{"subwords":[3512,3513,9150,9151,10525,10528,16178,16179,16769,16772,16829,16954,17066],"fullWord":3513},{"subwords":[3120,3135,3145,3413,3429,3430,3514,3523,5856,5861,6057,9079,9207,9290,9325,9328,9334,10376,10414,10437,10439,10460,10518,10536,10544,10625,10656,10691,10694,12374,12410,12438,12439,12463,18607,18823,18844,18863,18866,18894,18898],"fullWord":3514},{"subwords":[3429,3515,3516,4238,4241,6647,6651,6654,6782,6786,9135,9447,10557,10560,10686,10691,10707,16178,16179,16769,16801,16840,16907,17093,18823,18830,18863,18947],"fullWord":3516},{"subwords":[337,341,1175,2813,2821,2835,2846,2848,3402,3450,3453,3517,10072,10136,10301,10584,10585,11086,11148,11173,11182,11401,11402,11617,11659,11797],"fullWord":3517},{"subwords":[3518,3519,9077,9078,9422,10323,10504,10516,10584,10587,10593,11616,11659,11685,11759,16178,16179,16765,16769,17076],"fullWord":3519},{"subwords":[3120,3123,3520,3521,5782,5784,5845,6023,9079,9085,9416,9422,10414,10415,10518,10536,10551,10584,10595,10598,11619,11659,11668,11671,11685,11759,11764,12080,16178,16179,16298,16375,16769,17062,17076,17077,17171],"fullWord":3521},{"subwords":[3272,3275,3305,3411,3522,8612,9207,9213,12438],"fullWord":3522},{"subwords":[3171,3524,3525,7604,7611,9207,9307,10637,10642,10654,12438,12442,16178,16179,16769,16815,16858,16866,17083],"fullWord":3525},{"subwords":[3524,3526,7604,9101,9207,9293,10637,10662,11067,12438,21144],"fullWord":3526},{"subwords":[3527,3528,9150,9151,9207,9276,9284,9307,9902,9904,9913,9929,10525,10528,10645,10648,10654,12418,12423,12438,12442,16178,16179,16769,16772,16829,16858,16876,16954,16974,17066,17085,17241],"fullWord":3528},{"subwords":[3120,3531,3584,4268,9079,10414,10470,10518,10536,10552,10673,14635,14659],"fullWord":3531},{"subwords":[2758,2813,2814,3532,3597,3701,3702,10072,10760],"fullWord":3532},{"subwords":[487,950,2813,2822,2825,3033,3533,3534,3597,3600,3701,3702,3703,10013,10014,10072,10082,10086,10181,10760,10768,10772,12675,12677,15880,15884,15942,16988,17001,17294,17316,17319,17354],"fullWord":3534},{"subwords":[3535,3701,3708,5640,5641,5650,8714,8725,8754,10373,10443,10760,10765,12845],"fullWord":3535},{"subwords":[3536,3537,3628,3632,3701,10760,10768,10772,17316,17319,17354],"fullWord":3537},{"subwords":[3538,3539,3577,3638,3701,3704,4029,5096,10760,12745,12750,12767,12837,21154],"fullWord":3539},{"subwords":[3541,3542,3577,3665,3701,4029,7895,10760,10793,10802,10813],"fullWord":3542},{"subwords":[3544,3545,3553,3554,3701,3732,3765,3770,3864,3883,4047,4048,4237,10760,10864,10874,10957,11947,11961,12872,12936,14056,14087,16194,17104,17316,17354,17406],"fullWord":3545},{"subwords":[442,2813,2826,2869,3459,3546,3597,3701,3702,3714,3777,10072,10727,10741,10760,10761,12856],"fullWord":3546},{"subwords":[3538,3547,3548,3638,3644,3657,3701,3704,3708,3777,3786,3787,4639,4656,4728,4774,5096,5114,5144,5146,5172,5176,5650,5653,5756,5856,5861,5865,5953,10378,10427,10443,10444,10760,10780,10781,10822,12493,12499,12504,12752,12837,12838,12845,12874,12876],"fullWord":3548},{"subwords":[3547,3549,3555,3701,3708,3709,3777,3786,3788,3814,5650,5653,5856,5861,5918,5953,5955,6023,10433,10443,10444,10447,10760,10822,10888,12504,12505,12506,12560,12561,12845,12848,12874,12875,12876,12879,16188,16298,17097,17316,17354,17359,17383],"fullWord":3549},{"subwords":[3550,3685,3689,3701,3711,3713,3777,3800,9097,9207,9360,10652,10663,10760,10767,10814,12438,12812],"fullWord":3550},{"subwords":[3551,3552,3701,3777,3804,3807,3814,10760,10768,10772,12490,12492,12560,17316,17319,17354,17383],"fullWord":3552},{"subwords":[3538,3540,3555,3556,3638,3644,3649,3656,3657,3658,3701,3704,3707,3708,3709,4639,4656,4728,4826,5096,5104,5114,5117,5144,5146,5148,5221,5223,5650,5756,5760,6023,10378,10443,10447,10760,10780,10782,10888,12752,12755,12837,12844,12845,12848,16185,16298,17044,17097,17316,17323,17354,17357,17359,17360],"fullWord":3556},{"subwords":[3555,3557,3701,3708,3709,3898,3902,3929,5650,6004,6023,10443,10447,10760,10882,10883,10888,10889,12845,12848,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15621,15622,15676,16198,16298,17097,17316,17354,17359,17419,17420],"fullWord":3557},{"subwords":[3165,3555,3558,3701,3708,3709,5650,6023,6039,10443,10447,10453,10760,10787,10888,10891,10893,12845,12848,16298,16303,17097,17098,17316,17354,17359,17363,17434],"fullWord":3558},{"subwords":[3135,3137,3555,3559,3560,3564,3701,3708,3709,3728,3729,3940,3958,3965,3968,3970,3971,4238,4241,5650,6023,6057,10376,10443,10447,10459,10460,10465,10760,10888,10896,10897,10901,12845,12848,16205,16298,16304,16457,17097,17113,17316,17354,17359,17435,17903,18981,18985,19017],"fullWord":3559},{"subwords":[3135,3560,3561,3562,3701,3708,3728,3965,3968,5641,5650,6057,6058,8523,8714,8725,8754,8770,8892,8896,10373,10376,10443,10460,10461,10760,10765,10897,10898,12845,18570,18697,18743,18744,18981,19017],"fullWord":3562},{"subwords":[3560,3561,3563,3564,3701,3728,3729,3944,3958,3965,3971,4238,4241,8714,8770,8771,8887,8892,8901,8935,10760,10765,10766,10896,10897,10898,10901,12810,16205,16704,17113,17114,17316,17354,17435,18743,19123],"fullWord":3563},{"subwords":[3560,3565,3577,3701,3728,3965,4029,10760,10897,12740,19131,19186,19389],"fullWord":3565},{"subwords":[3538,3540,3566,3567,3638,3656,3701,3704,3707,3979,4263,4267,5096,5104,5221,5523,5524,10760,10778,10906,12837,12844,16185,16252,17316,17323,17354,17357,17442],"fullWord":3567},{"subwords":[3538,3566,3568,3577,3638,3701,3704,3979,4029,4263,5096,5498,5523,10760,10906,10976,12767,12837,21154,21193],"fullWord":3568},{"subwords":[3560,3564,3569,3570,3701,3728,3729,3958,3965,3971,4238,4241,4289,4291,4375,4394,10760,10778,10779,10896,10897,10901,10905,10929,10931,11044,13055,13059,13082,16205,16212,16265,17113,17147,17316,17354,17435,17442,19605],"fullWord":3570},{"subwords":[3547,3571,3572,3701,3708,3777,3786,3997,3999,5650,5653,5856,5861,5953,10443,10444,10471,10488,10760,10822,10935,12504,12601,12845,12874,12876,13093,20233,20250,20251,20262],"fullWord":3572},{"subwords":[3571,3573,3701,3708,3898,3997,4001,5650,10443,10471,10488,10760,10882,10935,10938,12845,12965,12979,13095,15021,15337,15592,15610,15621,15728,20016,20233,20250,20251],"fullWord":3573},{"subwords":[3555,3571,3574,3701,3708,3709,3997,4004,5650,6023,10443,10447,10471,10488,10760,10888,10935,10940,12845,12848,16298,17097,17316,17354,17359,17374,20233,20234,20250,20251,20252],"fullWord":3574},{"subwords":[3575,3576,3701,3777,3814,4010,4018,4020,4028,10760,10942,10952,12560,12606,12610,13114,13118,13119,13124,16214,16216,17121,17284,17316,17354,17383,17464,17469,20897],"fullWord":3576},{"subwords":[3538,3577,3578,3638,3644,3657,3701,3704,3708,4029,4639,4656,4661,4728,5096,5114,5144,5146,5567,5650,5756,10378,10443,10495,10760,10780,11065,12752,12767,12837,12845,21154,21155,21158],"fullWord":3578},{"subwords":[1510,2505,2550,2710,3580,3581,4242,4247,10976],"fullWord":3581},{"subwords":[3582,3583,10969,10972,16255,18051,18094],"fullWord":3583},{"subwords":[3524,3587,3592,4276,7604,7759,8151,9207,10637,10981,11012,12438,19585],"fullWord":3587},{"subwords":[3588,3589,4047,4048,4049,4237,4285,4293,4302,4311,4367,10957,10995,10999,13988,13997,14003,14551,16258,16260,17135,17136,18103,18114,18135,19624,19628,19825],"fullWord":3589},{"subwords":[3588,3590,4047,4049,4293,4302,10957,10976,10995,11000,13988,13998,14009,19624,21224],"fullWord":3590},{"subwords":[3591,4285,4293,10976,12151,16260,17135,17149,18103],"fullWord":3591},{"subwords":[3593,3594,10969,10972,11021,11023,16255,17140,17291,18051,18094,18117,18126],"fullWord":3594},{"subwords":[88,90,91,126,134,929,3041,3052,3064,3595,3596,3603,3605,3611,3627,3958,3965,3971,4238,4241,12686,12692,15880,16041,16157,16205,17316,17435,17885,18333,18335,18432,18435],"fullWord":3596},{"subwords":[93,94,183,399,472,2766,2813,3447,3538,3597,3598,3638,3639,3640,3644,3657,3701,3702,3704,3708,4431,4466,4601,4639,4641,4656,4728,5096,5114,5144,5146,5650,5756,10072,10073,10074,10090,10093,10324,10327,10378,10443,10730,10760,10780,12752,12837,12845],"fullWord":3598},{"subwords":[93,121,399,472,796,809,817,2813,2840,2941,2954,2971,2972,2983,3493,3597,3599,3701,3702,3708,3890,3898,5588,5592,5650,5976,10072,10073,10075,10324,10355,10443,10760,10882,12680,12845,12947,12948,12965,12966,12979,14717,14968,15021,15592,15610,15621],"fullWord":3599},{"subwords":[126,134,781,929,961,1028,2921,2932,2938,3041,3052,3064,3601,3603,3605,3611,3864,3883,3958,3965,3971,4048,4237,4238,4241,12686,12692,12936,12937,12944,13154,13167,13168,13170,13336,13343,13352,13364,13385,13438,14182,14188,14201,14427,15880,16014,16041,16157,16194,16205,17298,17316,17406,17435,17476,17510,17644,17885,17921,18333,18335,18432,18435,18436,18448,19075,19090,19386],"fullWord":3601},{"subwords":[93,96,121,123,796,809,810,817,825,891,905,906,2941,2954,2960,3001,3021,3602,3898,3902,3929,5588,5599,5976,5977,6004,6023,12680,12683,12965,12966,12967,12971,12979,12982,13007,13018,14717,14722,14881,15021,15048,15592,15599,15610,15611,15673,15676,15880,16142,16145,16198,16270,16286,16298,16419,17303,17316,17419],"fullWord":3602},{"subwords":[126,134,929,930,973,988,990,3041,3049,3052,3064,3603,3604,3605,3611,3958,3963,3965,3971,4238,4241,12685,12686,12692,15880,15892,16041,16157,16159,16205,16208,17316,17434,17435,17436,17885,17886,18333,18335,18432,18435,18487,19125],"fullWord":3604},{"subwords":[93,94,126,127,183,1009,2766,2772,3052,3605,3606,3638,3639,3644,3657,3965,3968,3969,4431,4551,4639,4656,5096,5114,5234,5237,5620,6055,6057,12686,12730,12752,18333,18339,18432,18541,18970,18981,18983],"fullWord":3606},{"subwords":[93,126,1009,3052,3605,3607,3965,3968,5620,6055,6057,12686,18333,18432,18541,18576,18981],"fullWord":3607},{"subwords":[93,121,126,132,796,809,817,911,1009,2941,2954,2962,3003,3004,3052,3055,3161,3605,3608,3898,3965,3968,4085,5588,5620,5976,5982,6055,6057,12680,12686,12688,12955,12965,12966,12979,13008,14717,14898,14901,14959,15021,15049,15052,15312,15592,15610,15691,15694,15748,18333,18432,18449,18453,18463,18541,18554,18981,19093,19094,19098,19101,19197],"fullWord":3608},{"subwords":[126,134,929,3041,3052,3064,3402,3403,3429,3603,3605,3609,3610,3611,3958,3965,3971,4238,4241,9367,9368,9447,12686,12692,13031,13038,15880,16041,16157,16178,16205,16207,16769,16907,17316,17435,17885,17897,18333,18335,18347,18432,18435,18823,18830,18947],"fullWord":3610},{"subwords":[2813,2846,3597,3612,3613,3701,3702,10072,10301,10760,10953],"fullWord":3613},{"subwords":[93,94,183,1167,1168,2766,3612,3614,3638,3639,3644,3650,3657,4431,4639,4656,5096,5114,12752],"fullWord":3614},{"subwords":[93,121,796,809,817,1167,2941,2954,3612,3615,3898,5588,5976,12680,12965,12966,12979,14717,15021,15373,15592,15610],"fullWord":3615},{"subwords":[93,96,1167,1173,3021,3612,3616,6023,13131,15880,16098,16270,16298,16483,17316,17471],"fullWord":3616},{"subwords":[27,51,72,126,385,488,495,1462,1922,1967,1971,1989,2029,2037,2049,2100,2115,2237,2738,2756,2813,3052,3560,3597,3605,3617,3618,3701,3702,3728,3965,10061,10072,10748,10760,10897,12686,12732,18302,18333,18365,18432],"fullWord":3618},{"subwords":[2042,2072,2205,2446,3617,3619,3898,5632,12959,12965,12979,14995,15021,15576,15579,15592,15610],"fullWord":3619},{"subwords":[1510,1636,1969,1971,2042,2106,3617,3620,3701,3708,5632,5650,10443,10748,10753,10760,12845],"fullWord":3620},{"subwords":[2127,2237,2268,2577,2580,2602,2697,3617,3621,3777,3816,3965,3981,4242,4300,4375,12481,12574,12614,12659,13059,19036,19390,19434,19655,19780],"fullWord":3621},{"subwords":[27,51,67,796,809,810,905,1366,1419,1422,2029,2030,2033,2034,2049,2308,2343,2446,2476,2738,2757,2941,2946,2981,2982,3001,3617,3622,3623,3624,4052,4054,12680,12683,12959,12964,12965,12966,12967,12971,13007,13018,15576,15590,15592,15599,15673,15880,16111,16142,17303,17308,17316],"fullWord":3623},{"subwords":[2042,2271,3617,3625,4010,5632,13110,20519,20875],"fullWord":3625},{"subwords":[117,2869,3402,3403,3626,3689,3777,3800,9097,9207,9208,9360],"fullWord":3626},{"subwords":[3628,3629,3638,3644,3657,3697,3698,4639,4651,4656,5096,5099,5114,12752],"fullWord":3629},{"subwords":[3628,3630,3697,3898,3906,4106,4176,12965,12979,15021,15592,15593,15610],"fullWord":3630},{"subwords":[3536,3628,3631,3697,3701,3708,5640,5650,5778,10416,10443,10760,10768,12845],"fullWord":3631},{"subwords":[3628,3633,3864,3984,4049,4302,14016,14435],"fullWord":3633},{"subwords":[3627,3634,3635,3636,3637,3826,3860,15880,17316],"fullWord":3636},{"subwords":[3638,3642,3644,3645,3647,3657,3893,3894,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,12745,12746,12752,12965,12979,15021,15028,15060,15078,15592,15600,15603,15610],"fullWord":3642},{"subwords":[3538,3638,3643,3644,3645,3657,3701,3704,3708,4639,4656,4728,5096,5114,5144,5146,5147,5650,5756,10378,10443,10760,10780,12745,12752,12837,12845],"fullWord":3643},{"subwords":[3413,3638,3644,3646,3657,3689,3690,3777,3786,3787,4639,4656,4714,4774,4909,4935,4985,4988,5096,5114,5172,5176,5653,5856,5865,5953,9079,9082,9097,9110,9207,9360,12410,12493,12499,12752,12757,12758,12874,12876],"fullWord":3646},{"subwords":[3638,3644,3647,3648,3649,3656,3657,3658,3893,3897,3898,3899,3902,3929,4118,4119,4639,4656,4659,4660,4810,4826,5096,5104,5114,5115,5116,5117,5216,5221,5223,5225,6004,6023,12752,12755,12965,12971,12979,12982,13007,15021,15028,15048,15060,15078,15081,15087,15592,15599,15600,15603,15609,15610,15611,15676,15677,16198,16199,16243,16298,17316,17323,17419],"fullWord":3648},{"subwords":[3638,3644,3647,3651,3657,3665,3893,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,5123,5125,5351,5718,5988,5989,7782,7788,7855,7856,7977,12752,12798,12965,12979,15021,15028,15060,15078,15141,15592,15600,15603,15610],"fullWord":3651},{"subwords":[3638,3652,3679,4029,5096,6541,6872,9101,12757,21140,21154],"fullWord":3652},{"subwords":[3638,3653,3665,3682,3689,3777,4947,4985,4993,4998,5096,5123,5142,5172,5179,7604,7782,9097,9207,9218,9360,12493,12509,12757,12758],"fullWord":3653},{"subwords":[3638,3654,3655,3656,3777,3782,3785,3814,3826,3852,3853,3860,5096,5104,5172,5188,5221,12493,12501,12560,17262,17316,17323,17383,17397],"fullWord":3655},{"subwords":[3659,3732,3744,3751,3765,3771,3772,3775,3864,3867,3965,3968,6057,11574,11947,11948,12010,12011,12916,12917,12937,13438,13613,14024,14027,14093,14188,18595,18596,18601,18981,19026,19032,19075,19076],"fullWord":3659},{"subwords":[3660,3898,4106,4120,5984,12965,12979,15021,15592,15610],"fullWord":3660},{"subwords":[93,395,399,472,1106,2813,2842,3080,3480,3571,3597,3661,3701,3702,3708,3997,5650,10072,10073,10285,10324,10443,10471,10472,10488,10760,10935,12845,13087,13088,19923,19924,19986,20014,20231,20233,20250,20251],"fullWord":3661},{"subwords":[3662,3898,5950,6874,6940,6947,6955,7103,12771,12777,12965,12979,15021,15114,15592,15610],"fullWord":3662},{"subwords":[3663,3679,3689,3777,3791,6593,6872,9097,9207,9257,9360,12771],"fullWord":3663},{"subwords":[3145,3147,3665,3666,3777,3786,3816,3817,3965,3968,4239,5653,5718,5856,5953,6057,7493,7512,7540,7815,7874,12374,12509,12574,12581,12874,12876,18607,18981,18993,19036,19038,19043],"fullWord":3666},{"subwords":[3638,3644,3657,3665,3667,4639,4656,5096,5114,5123,5125,5709,5718,7522,7782,12752],"fullWord":3667},{"subwords":[3429,3665,3668,3826,3861,3965,4239,7637,7826,7874,13038,18823,18993,19000,19060],"fullWord":3668},{"subwords":[299,2869,3665,3669,3777,3794,12230,12509],"fullWord":3669},{"subwords":[299,2797,3096,3100,3665,3671,4010,4029,7447,7895,20326,20493,21079,21162,21202,21228],"fullWord":3671},{"subwords":[3272,3340,3361,3672,3693,3898,5641,8503,8552,8575,8577,8612,8625,8672,8714,8725,8728,8739,8857,9079,9086,9384,12724,12727,12965,12968,12979,15021,15171,15386,15411,15416,15417,15592,15610],"fullWord":3672},{"subwords":[3248,3361,3674,3898,4120,5641,5643,5984,8483,8552,8562,8575,8714,8725,8728,8857,12724,12727,12965,12968,12979,15021,15092,15386,15592,15610],"fullWord":3674},{"subwords":[3675,3676,3826,3861,3965,8714,8838,8857,8892,12809,12895,12965,12968,13008,13009,13010,15386,15592,15659,15691,15697,18743,18749,18754,18777,19060,19093,19098,19099,19106],"fullWord":3676},{"subwords":[3675,3677,3678,3826,3860,3944,8714,8812,12809,12810,12895,12898,16686,17316],"fullWord":3678},{"subwords":[3638,3644,3657,3679,3680,4639,4656,4714,4909,4935,5096,5114,5950,6406,6537,6541,6543,6872,6874,9079,9082,9110,12752,12757],"fullWord":3680},{"subwords":[3413,3665,3682,3683,3689,3777,3786,5653,5718,5856,5953,7493,7502,7604,7815,9079,9097,9207,9218,9360,12410,12509,12874,12876],"fullWord":3683},{"subwords":[3171,3417,3665,3670,3682,3684,3689,3692,3777,3814,3951,7604,7611,9097,9099,9207,9218,9307,9360,9366,12509,12512,12560,16178,16180,16769,16815,16858,16866,17316,17383,17389,17391],"fullWord":3684},{"subwords":[3120,3538,3638,3644,3657,3685,3686,3701,3704,3708,4639,4656,4714,4728,4739,4909,4935,5096,5098,5114,5144,5145,5146,5650,5756,9079,9082,9110,9117,9125,10378,10414,10443,10518,10530,10533,10536,10537,10760,10767,10780,12752,12757,12812,12815,12837,12841,12845],"fullWord":3686},{"subwords":[3120,3685,3687,3693,3701,3708,3898,5650,9079,9384,10414,10443,10518,10536,10549,10677,10760,10767,10882,12812,12816,12845,12965,12979,12992,15021,15039,15188,15246,15411,15444,15473,15592,15610,15617,15621],"fullWord":3687},{"subwords":[3413,3638,3644,3646,3657,3689,3690,3777,3786,3787,4639,4656,4714,4774,4909,4935,4985,4988,5096,5114,5172,5176,5653,5856,5865,5953,9079,9082,9097,9110,9207,9360,12410,12493,12499,12752,12757,12758,12874,12876],"fullWord":3690},{"subwords":[3413,3689,3691,3693,3777,3786,3898,3913,4181,5653,5856,5953,5996,9079,9097,9207,9360,9384,9400,12410,12412,12513,12514,12548,12874,12876,12965,12979,15021,15040,15042,15175,15238,15411,15592,15610],"fullWord":3691},{"subwords":[126,337,434,488,495,2813,3052,3402,3403,3429,3560,3597,3605,3609,3685,3695,3701,3702,3728,3965,9367,9437,10072,10126,10691,10760,10767,10897,12686,12732,12812,13038,18333,18347,18349,18365,18432,18823,18863,19002],"fullWord":3695},{"subwords":[3429,3696,3958,3965,3971,4238,4241,4375,4388,4394,9100,9369,9447,13038,13048,13055,13059,13082,16178,16205,16212,16265,16769,16907,16917,17316,17435,17897,18083,18085,18823,18830,18947],"fullWord":3696},{"subwords":[3665,3682,3689,3700,3777,3804,7604,9097,9142,9207,9218,9276,9360,9913,9922,10015,12418,12490,12509,12825],"fullWord":3700},{"subwords":[3538,3638,3644,3647,3657,3701,3704,3705,3708,3893,3898,3899,4118,4639,4656,4659,4728,4810,5096,5114,5115,5144,5146,5650,5756,10378,10443,10760,10780,10878,10882,12752,12837,12839,12845,12965,12979,15021,15028,15060,15078,15592,15600,15603,15610,15621],"fullWord":3705},{"subwords":[3538,3577,3638,3701,3704,3706,3714,3720,4029,5096,5150,5155,10760,12767,12837,21154],"fullWord":3706},{"subwords":[3555,3584,3586,3701,3708,3709,3710,4268,4271,5650,5656,6023,10443,10447,10470,10760,10778,10888,10925,10965,12845,12848,13021,13053,16298,16402,17097,17128,17316,17354,17359,17442,18066,19876],"fullWord":3710},{"subwords":[3685,3688,3701,3711,3712,10760,10767,12812,12822,16178,16179,16769,16837,17316,17350,17354,17364],"fullWord":3712},{"subwords":[442,796,809,2813,2826,2840,2941,2971,2972,2983,3597,3701,3702,3714,3715,3890,10072,10760,10761,12680,12856,12948,12965,12966,15592,15623],"fullWord":3715},{"subwords":[126,442,455,488,495,1018,2813,2826,3052,3560,3597,3605,3701,3702,3714,3716,3728,3965,10072,10760,10761,10897,12686,12732,12856,18333,18365,18381,18432,19019],"fullWord":3716},{"subwords":[3120,3128,3131,3132,3685,3701,3708,3714,3717,5650,5780,9079,9152,10414,10443,10518,10536,10760,10767,12812,12845],"fullWord":3717},{"subwords":[3553,3701,3714,3718,3826,3841,3854,3864,4047,10760,10774,10833,10849,10864,14019,14056,14080,14086,14121],"fullWord":3718},{"subwords":[3701,3714,3719,3826,3841,10760,10774,10833],"fullWord":3719},{"subwords":[3171,3541,3543,3665,3670,3701,3721,3826,3841,3847,3860,7826,7847,10760,10774,10777,10793,10809,10810,10811,10833,10854,13024,17099,17316,17354,17370],"fullWord":3721},{"subwords":[3701,3722,3723,3777,3814,3826,3841,3847,3852,3853,3860,10760,10774,10777,10833,10845,10847,10854,12521,12560,13024,17316,17354,17370,17383,17397],"fullWord":3723},{"subwords":[3577,3701,3722,3724,3777,3825,3826,3841,3848,3852,4029,10760,10774,10833,10845,10848,12521,12882,21183],"fullWord":3724},{"subwords":[3701,3725,3726,3826,3841,3847,3860,10760,10774,10777,10833,10854,12965,12971,13007,13024,15592,15599,17316,17354,17370],"fullWord":3726},{"subwords":[3701,3725,3727,3826,3841,4312,4341,10760,10774,10833,10922,12965,13051,15592],"fullWord":3727},{"subwords":[3701,3730,3732,3777,4293,10760,11891,12138,12522,19655],"fullWord":3730},{"subwords":[3584,3701,3708,3731,3898,4213,4268,4312,4326,4341,5650,5654,10443,10470,10760,10882,10922,10974,11029,12845,12965,12979,13051,15021,15592,15610,15621,15706,15777,15800,19597],"fullWord":3731},{"subwords":[27,51,72,126,1020,1462,2029,2037,2049,2237,2738,2756,2848,3052,3605,3617,3732,3733,3735,3736,3965,11086,11265,11361,11814,11817,12010,12686,18302,18333,18389,18432,19026,19028],"fullWord":3736},{"subwords":[1560,2058,2059,3617,3638,3644,3657,3732,3735,3737,3738,3744,4618,4639,4656,4763,4764,5096,5114,5163,5165,11817,11831,11833,12752],"fullWord":3738},{"subwords":[1700,2072,2205,2446,3617,3732,3735,3737,3739,3744,3748,3898,3911,11539,11817,11970,12861,12959,12965,12979,14995,15021,15041,15202,15576,15579,15592,15610,15627,15632],"fullWord":3739},{"subwords":[1711,3617,3624,3732,3735,3737,3740,3743,3744,3750,5845,6023,11817,11823,12080,12872,16298,17308,17316,17382],"fullWord":3740},{"subwords":[2160,2173,2176,2182,2224,3617,3624,3732,3735,3741,3742,3743,3826,3849,3851,3860,3955,11817,11823,11921,11941,12872,17308,17316],"fullWord":3742},{"subwords":[3638,3644,3657,3732,3744,3745,3826,3827,4639,4656,4763,5096,5114,5163,5165,5193,11831,11833,11844,11921,11923,11926,12752],"fullWord":3745},{"subwords":[3638,3644,3657,3732,3744,3746,4029,4415,4639,4656,4661,4763,5096,5114,5163,5165,5567,11831,11833,12752,21154],"fullWord":3746},{"subwords":[3577,3701,3708,3732,3744,3747,4029,4415,5650,5782,5785,10443,10495,10760,11065,11870,11884,12845],"fullWord":3747},{"subwords":[3732,3744,3748,3749,3750,3898,3902,3911,3912,3929,5845,6004,6023,11539,11970,11973,11987,12080,12872,12965,12971,12979,12982,13007,15021,15048,15202,15224,15592,15599,15610,15611,15627,15632,15638,15676,16198,16298,17316,17382,17419],"fullWord":3749},{"subwords":[3257,3336,3732,3744,3751,3752,3775,3965,3968,5641,6057,6058,8532,8714,8725,8775,8892,11461,11574,12010,12011,12018,12806,18570,18595,18697,18705,18743,18967,18981,19026,19032],"fullWord":3752},{"subwords":[3732,3744,3750,3751,3753,3775,3776,3940,3958,3965,3968,3970,3971,4238,4241,5845,6023,6057,11574,12007,12010,12011,12014,12030,12080,12872,16205,16298,16304,16457,17198,17316,17382,17435,17830,18595,18981,18985,19026,19032,19033,19034],"fullWord":3753},{"subwords":[3429,3679,3732,3754,3965,6651,6872,11854,12010,12022,12785,12869,13038,18823,18882,19026],"fullWord":3754},{"subwords":[3732,3755,3756,3954,9422,11759,11772,11854,12872,13025,16178,16769,17316],"fullWord":3756},{"subwords":[3665,3682,3689,3732,3757,3777,7604,7755,9097,9207,9218,9360,11649,11697,11711,11854,11891,12443,12509,12522],"fullWord":3757},{"subwords":[3429,3440,3732,3758,3965,4029,9101,11854,12010,12869,13038,18823,18882,19026,19186],"fullWord":3758},{"subwords":[560,561,2848,2868,3732,3733,3734,3759,3760,11086,11105,11265,11330,11813,11885,11890,12872,15880,15973,16129,17316,17378],"fullWord":3760},{"subwords":[3732,3744,3761,3762,9079,11508,11619,11688,11690,11854,11885],"fullWord":3762},{"subwords":[3429,3732,3763,3965,11854,11885,12010,12869,13038,18823,18882,19026],"fullWord":3763},{"subwords":[3732,3764,3777,3826,3852,11885,11891,11911,11921,11931,12522],"fullWord":3764},{"subwords":[3638,3644,3657,3732,3744,3765,3766,3864,3867,3869,4639,4656,4763,5096,5114,5163,5165,5200,11831,11833,11947,11948,11949,12752,12916,12917,13478,14020,14024,14093],"fullWord":3766},{"subwords":[3544,3553,3701,3708,3732,3744,3765,3767,3864,3867,4047,5650,5782,10443,10760,10864,10865,10957,11870,11947,11948,12845,12916,12917,14024,14056,14061,14093],"fullWord":3767},{"subwords":[3544,3553,3577,3701,3732,3765,3768,3864,3888,4029,4047,10760,10864,10957,11884,11947,11962,13981,14009,14056,14088],"fullWord":3768},{"subwords":[3732,3765,3769,3770,3826,3854,3857,3860,3864,3883,3955,4048,4237,11921,11941,11947,11961,12872,12905,12936,14019,16190,16194,17316,17406],"fullWord":3769},{"subwords":[3659,3732,3744,3751,3765,3771,3772,3775,3864,3867,3965,3968,6057,11574,11947,11948,12010,12011,12916,12917,12937,13438,13613,14024,14027,14093,14188,18595,18596,18601,18981,19026,19032,19075,19076],"fullWord":3772},{"subwords":[3732,3765,3770,3771,3773,3864,3883,3958,3965,3971,4048,4237,4238,4241,11947,11961,12007,12010,12030,12872,12936,12937,12944,13438,14182,14188,14201,14427,16194,16205,17316,17406,17435,17644,17907,17921,19026,19034,19075,19090,19386],"fullWord":3773},{"subwords":[126,134,929,1020,1022,2848,2868,3041,3052,3064,3603,3605,3611,3732,3733,3734,3774,3958,3965,3971,4238,4241,11086,11105,11265,11330,11332,11356,11361,11376,11813,11814,11816,12007,12010,12030,12686,12692,12872,15880,15973,16041,16129,16157,16205,17316,17378,17435,17885,18333,18335,18389,18407,18432,18435,19026,19034],"fullWord":3774},{"subwords":[3732,3744,3750,3751,3753,3775,3776,3940,3958,3965,3968,3970,3971,4238,4241,5845,6023,6057,11574,12007,12010,12011,12014,12030,12080,12872,16205,16298,16304,16457,17198,17316,17382,17435,17830,18595,18981,18985,19026,19032,19033,19034],"fullWord":3776},{"subwords":[3777,3778,3779,3814,3944,8714,8789,12560,12565,12810,17316,17383],"fullWord":3779},{"subwords":[3777,3778,3780,3825,4029,8714,8789,21183],"fullWord":3780},{"subwords":[3777,3781,3913,3920,4106,4312,12548,12719,12965,13051,15592,15821,19655,19866],"fullWord":3781},{"subwords":[3638,3654,3732,3777,3782,3783,3826,3852,5096,5163,5172,5193,11831,11844,11891,11897,11911,11921,11923,11931,12493,12522],"fullWord":3783},{"subwords":[3638,3654,3777,3782,3784,3826,3852,3893,3896,3913,4186,5096,5172,5186,5196,12493,12548,12762,12965,12976,15592,15600,15640,15642],"fullWord":3784},{"subwords":[3638,3654,3655,3656,3777,3782,3785,3814,3826,3852,3853,3860,5096,5104,5172,5188,5221,12493,12501,12560,17262,17316,17323,17383,17397],"fullWord":3785},{"subwords":[3777,3786,3788,3789,3790,3814,3825,3942,3964,4029,5653,5856,5918,5953,5955,6023,12506,12560,12561,12564,12573,12874,12875,12876,12879,13147,16188,16298,17316,17383,17472,18283,18287,21120,21122,21130,21183],"fullWord":3790},{"subwords":[27,51,232,1241,1332,1335,2029,2049,2127,2128,2738,2869,3617,3777,3791,3792,6293,6868,12219,12481,12672],"fullWord":3792},{"subwords":[3777,3786,3791,3793,3898,3913,4181,5653,5856,5950,5953,6453,6467,6874,6940,6947,6955,7067,7103,12548,12874,12876,12965,12979,15021,15042,15114,15238,15592,15610],"fullWord":3793},{"subwords":[299,304,2869,2906,3171,3665,3670,3777,3794,3795,3814,7396,12230,12233,12509,12512,12560,15880,15910,15921,15986,16001,16116,16134,17211,17316,17383,17389],"fullWord":3795},{"subwords":[3665,3777,3786,3796,5653,5718,5856,5953,7467,7493,7496,7815,12339,12509,12789,12874,12876],"fullWord":3796},{"subwords":[3665,3777,3786,3797,3898,3913,4181,5653,5718,5856,5894,5953,5988,5989,7493,7788,7815,7816,7855,7977,12347,12509,12548,12798,12874,12876,12965,12979,15021,15042,15141,15238,15592,15610],"fullWord":3797},{"subwords":[3171,3665,3670,3777,3798,3799,3814,3826,3852,3853,3860,7826,7841,7844,7847,12509,12512,12560,17316,17383,17389,17397],"fullWord":3799},{"subwords":[3417,3689,3692,3777,3800,3801,3814,9097,9099,9207,9307,9360,9366,12560,16178,16180,16769,16858,17316,17383,17391],"fullWord":3801},{"subwords":[3413,3415,3417,3689,3692,3777,3786,3788,3802,3814,3948,3953,5653,5856,5918,5953,5955,6023,9079,9085,9097,9099,9207,9307,9360,9366,12410,12506,12516,12560,12561,12874,12875,12876,12879,16178,16180,16188,16298,16769,16858,16859,16860,17316,17383,17391],"fullWord":3802},{"subwords":[3638,3644,3657,3697,3698,3777,3786,3787,3804,3805,4639,4651,4656,4774,5096,5099,5114,5172,5176,5653,5856,5865,5953,9836,9837,9841,12335,12490,12491,12493,12499,12752,12874,12876],"fullWord":3805},{"subwords":[3697,3777,3786,3804,3806,3898,3906,3913,4181,5653,5856,5953,9836,9841,9855,10044,12335,12490,12548,12874,12876,12965,12979,15021,15036,15042,15238,15592,15593,15610],"fullWord":3806},{"subwords":[3638,3644,3657,3777,3786,3787,3808,3809,4639,4656,4774,5096,5114,5172,5176,5184,5653,5856,5865,5953,12353,12493,12499,12528,12530,12533,12752,12874,12876],"fullWord":3809},{"subwords":[3777,3786,3808,3810,3898,3913,4181,5653,5856,5953,12353,12528,12530,12533,12548,12874,12876,12965,12979,15021,15042,15238,15592,15610],"fullWord":3810},{"subwords":[3413,3689,3777,3786,3808,3811,5653,5856,5953,9079,9097,9207,9297,9360,12353,12410,12448,12528,12530,12533,12874,12876],"fullWord":3811},{"subwords":[3638,3654,3689,3777,3782,3813,3826,3852,4985,5096,5172,9097,9207,9360,12493,12757,12758],"fullWord":3813},{"subwords":[3701,3777,3814,3815,3821,10760,10778,12560,12597,12888,17316,17354,17383,17442,18117,19655,19659],"fullWord":3815},{"subwords":[3145,3147,3150,3777,3786,3788,3814,3816,3817,3818,3940,3958,3965,3968,3970,3971,4238,4241,5653,5856,5918,5953,5955,6023,6057,12368,12374,12376,12506,12560,12561,12574,12581,12585,12591,12874,12875,12876,12879,12884,16163,16188,16205,16298,16304,16399,16457,16461,17278,17316,17383,17435,17834,17909,18607,18624,18981,18985,19036,19038,19042,19057],"fullWord":3818},{"subwords":[118,126,132,693,796,809,911,2869,2908,2913,2915,2941,3003,3009,3052,3605,3777,3816,3820,3913,3965,3966,4089,12270,12271,12293,12548,12574,12575,12680,12686,12965,12966,13008,14821,14847,14898,15568,15592,15691,18333,18408,18432,18449,18460,18463,19036,19093,19094,19098,19105],"fullWord":3820},{"subwords":[3777,3786,3822,3997,3999,5653,5856,5953,12874,12876,13093,13130,20102,20233,20262,20281],"fullWord":3822},{"subwords":[3777,3786,3789,3823,3825,3997,3999,4007,4029,5653,5856,5944,5946,5953,12874,12876,13093,20233,20262,21120,21183],"fullWord":3823},{"subwords":[3777,3824,3825,3826,3852,4029,12605,20262,21183],"fullWord":3824},{"subwords":[3119,3826,3828,3829,3860,6023,16298,16319,17316],"fullWord":3829},{"subwords":[3826,3830,3831,3860,3898,3902,3929,6004,6023,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15675,15676,16198,16298,17316,17419],"fullWord":3831},{"subwords":[3826,3832,3833,3860,3942,3964,4029,6023,13147,16298,17316,17396,17472,21130],"fullWord":3833},{"subwords":[3665,3682,3689,3777,3798,3826,3834,3852,7604,7826,7841,9097,9207,9218,9360,12509],"fullWord":3834},{"subwords":[3638,3644,3657,3697,3698,3826,3827,3835,3836,4639,4651,4656,5096,5099,5114,12752],"fullWord":3836},{"subwords":[3697,3826,3830,3835,3837,3898,3906,4184,12965,12979,15021,15044,15592,15593,15610,15648],"fullWord":3837},{"subwords":[3697,3826,3832,3835,3838,3840,4029,9865,21174],"fullWord":3838},{"subwords":[3538,3638,3644,3657,3701,3704,3708,3826,3827,3841,3842,4639,4656,4728,5096,5114,5144,5146,5650,5756,10378,10443,10760,10774,10775,10780,10833,12752,12837,12845,12846],"fullWord":3842},{"subwords":[3701,3708,3725,3826,3830,3841,3843,3898,5650,10443,10760,10774,10833,10882,12845,12846,12965,12979,15021,15592,15610,15621],"fullWord":3843},{"subwords":[3577,3701,3708,3826,3832,3841,3844,3848,4029,5650,10443,10495,10760,10774,10833,11065,12845,12846],"fullWord":3844},{"subwords":[3120,3685,3701,3708,3826,3841,3845,5650,9079,10414,10443,10518,10536,10760,10767,10774,10833,12812,12845,12846,12850],"fullWord":3845},{"subwords":[3577,3701,3714,3720,3826,3841,3846,3848,4029,10760,10774,10833],"fullWord":3846},{"subwords":[2160,2173,3617,3732,3735,3737,3741,3744,3826,3849,3850,11817,11921,12709],"fullWord":3850},{"subwords":[2160,2173,2176,2182,2224,3617,3624,3732,3735,3741,3742,3743,3826,3849,3851,3860,3955,11817,11823,11921,11941,12872,17308,17316],"fullWord":3851},{"subwords":[3638,3644,3657,3826,3827,3854,3855,3864,3867,3869,4639,4656,5096,5114,5200,12752,12916,12917,13478,14019,14020],"fullWord":3855},{"subwords":[3826,3830,3854,3856,3864,3867,3870,3898,3923,4188,12916,12917,12965,12979,13577,14019,14127,14147,14262,14350,14356,15021,15248,15592,15610,15663],"fullWord":3856},{"subwords":[3826,3854,3857,3858,3859,3860,3861,3863,3864,3883,3958,3965,3971,4048,4237,4238,4241,12905,12936,12937,12944,13438,14019,14182,14188,14201,14427,16190,16192,16194,16205,17316,17399,17406,17435,17644,17919,17921,19060,19075,19086,19090,19386],"fullWord":3859},{"subwords":[3429,3430,3826,3861,3862,3965,3968,6057,9079,13038,18823,18844,18981,19060],"fullWord":3862},{"subwords":[481,486,487,961,2813,2921,2932,2938,3465,3466,3473,3553,3554,3597,3600,3701,3702,3703,3864,3865,3866,3883,4047,4048,4237,10072,10181,10182,10194,10760,10864,10874,12913,12914,12936,13154,13167,13204,13232,13336,13343,14056,14087,15880,15942,16014,16126,16194,17019,17104,17298,17316,17354,17406,17476],"fullWord":3866},{"subwords":[3628,3697,3864,3867,3868,12916,12917,13472,14016,14044],"fullWord":3868},{"subwords":[3864,3867,3870,3871,3872,3883,3884,3898,3902,3923,3924,3925,3929,4048,4188,4189,4237,6004,6023,6033,12916,12917,12925,12936,12965,12971,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14356,14383,14384,14403,15021,15048,15248,15272,15305,15592,15599,15610,15611,15663,15668,15676,16194,16195,16198,16298,17316,17406,17419,17525,17638],"fullWord":3871},{"subwords":[3638,3644,3657,3864,3867,3869,3873,4046,4639,4656,4714,4909,4935,5014,5096,5114,5200,5959,9079,9082,9110,12752,12757,12916,12917,13478,13705,13710,14020,14032],"fullWord":3873},{"subwords":[3693,3864,3867,3870,3874,3898,3923,4046,4188,5959,9079,9384,12916,12917,12965,12979,13577,13705,13712,14032,14147,14262,14294,14350,14356,15021,15248,15411,15508,15509,15592,15610,15663],"fullWord":3874},{"subwords":[3864,3867,3872,3875,3883,3884,3948,4046,4048,4237,5959,5961,6023,6033,9079,9085,9374,12916,12917,12925,12936,13607,13702,13705,13716,14032,14039,14166,14421,16178,16194,16195,16298,16769,16883,17316,17406,17525,17550,17553],"fullWord":3875},{"subwords":[3665,3682,3689,3777,3864,3876,4046,7604,7612,9097,9207,9218,9360,12453,12509,13721,13765,13773,13809,14032,14107],"fullWord":3876},{"subwords":[3553,3560,3701,3728,3826,3841,3854,3858,3861,3864,3877,3965,4047,10760,10774,10833,10849,10860,10864,10897,12937,13438,13973,14019,14056,14086,14121,14188,19060,19062,19075],"fullWord":3877},{"subwords":[3826,3854,3858,3861,3864,3878,3965,3984,4049,4302,4375,12937,13059,13438,14019,14188,14224,14561,19060,19075,19453],"fullWord":3878},{"subwords":[3638,3644,3657,3864,3867,3869,3879,4639,4656,5096,5114,5200,12752,12916,12917,12933,13478,13569,14020,14130,14131,14237],"fullWord":3879},{"subwords":[3864,3867,3870,3880,3898,3923,4188,12916,12917,12933,12965,12979,13569,13577,14130,14131,14147,14262,14278,14350,14356,14379,15021,15248,15592,15610,15663],"fullWord":3880},{"subwords":[796,809,810,905,961,2921,2932,2938,2941,2987,2995,3001,3864,3881,3882,3883,3923,3924,4048,4077,4082,4188,4189,4237,12680,12683,12936,12965,12966,12967,12971,13007,13018,13154,13167,13286,13321,13336,13343,14246,14350,14351,14356,14383,14403,14851,14866,14891,15592,15599,15673,15880,16014,16016,16142,16152,16194,16223,17298,17303,17316,17406,17476,17494],"fullWord":3882},{"subwords":[3165,3864,3867,3872,3883,3884,3885,4048,4237,6023,6033,6039,12916,12917,12925,12936,13607,13608,14166,14170,14179,16194,16195,16196,16298,16303,17316,17406,17414,17434,17525,17529],"fullWord":3885},{"subwords":[3161,3864,3867,3870,3886,3898,3923,3965,3968,4139,4188,6057,12916,12917,12937,12965,12979,13008,13438,13577,13599,13613,13624,14027,14147,14160,14188,14262,14350,14356,14957,15021,15052,15248,15312,15592,15610,15663,15691,15694,15748,18981,19075,19076,19079,19093,19098,19101,19323,19324],"fullWord":3886},{"subwords":[111,481,2813,2921,3071,3465,3553,3597,3701,3702,3864,3865,3887,3984,4047,4049,4286,4302,4305,10072,10182,10760,10864,10917,12913,13154,13204,13391,14056],"fullWord":3887},{"subwords":[3889,3965,3968,4268,4375,4376,6057,13059,14635,14694,14703,18981,19091],"fullWord":3889},{"subwords":[487,796,809,810,905,2813,2840,2941,2971,2972,2983,2984,3001,3597,3600,3701,3702,3703,3890,3891,10072,10181,10760,12680,12683,12948,12950,12965,12966,12967,12971,13007,13018,15592,15599,15673,15880,15942,16142,17303,17316,17354,17356],"fullWord":3891},{"subwords":[1636,1971,2072,2106,2205,2446,3617,3701,3708,3892,3898,5650,10443,10748,10753,10760,10882,12845,12959,12965,12979,14995,15021,15576,15579,15586,15592,15610,15621],"fullWord":3892},{"subwords":[3638,3642,3644,3645,3647,3657,3893,3894,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,12745,12746,12752,12965,12979,15021,15028,15060,15078,15592,15600,15603,15610],"fullWord":3894},{"subwords":[3638,3644,3647,3657,3893,3895,3898,3899,3900,4118,4639,4656,4659,4810,5096,5114,5115,6008,12752,12965,12974,12979,15021,15028,15046,15060,15078,15592,15600,15603,15610],"fullWord":3895},{"subwords":[3638,3654,3777,3782,3784,3826,3852,3893,3896,3913,4186,5096,5172,5186,5196,12493,12548,12762,12965,12976,15592,15600,15640,15642],"fullWord":3896},{"subwords":[3898,3900,3901,3902,3929,6004,6008,6016,6023,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,16198,16200,16298,17316,17419,17423],"fullWord":3901},{"subwords":[3171,3665,3670,3693,3694,3903,3904,7627,9409,12965,12971,12989,12995,13007,15461,15472,15592,15599,16178,16769,16889,17316,17722],"fullWord":3904},{"subwords":[3665,3682,3689,3693,3777,3903,3905,3913,7604,8015,8045,9097,9207,9218,9360,9400,12509,12513,12548,12965,12989,12995,15461,15494,15592],"fullWord":3905},{"subwords":[3638,3644,3647,3657,3697,3698,3893,3898,3899,3906,3907,4118,4639,4651,4656,4659,4810,5096,5099,5101,5114,5115,5348,5355,12752,12965,12979,15021,15028,15060,15078,15592,15593,15594,15600,15603,15610],"fullWord":3907},{"subwords":[3697,3898,3900,3906,3908,6008,12965,12979,15021,15592,15593,15595,15610],"fullWord":3908},{"subwords":[93,114,118,121,215,796,809,817,2869,2883,2885,2900,2941,2954,2977,3777,3786,3898,3913,3914,4069,4181,5588,5595,5653,5856,5953,5976,12224,12229,12270,12271,12319,12548,12680,12721,12874,12876,12965,12966,12979,14717,14821,15021,15042,15238,15568,15592,15610],"fullWord":3914},{"subwords":[3638,3644,3647,3657,3777,3786,3787,3893,3898,3899,3913,3915,4118,4181,4639,4656,4659,4774,4810,5096,5114,5115,5172,5176,5392,5653,5856,5865,5953,12358,12493,12499,12548,12752,12874,12876,12965,12979,15021,15028,15042,15060,15078,15227,15238,15592,15600,15603,15610],"fullWord":3915},{"subwords":[3547,3701,3708,3777,3786,3898,3913,3916,4181,5650,5653,5856,5861,5914,5953,10443,10444,10760,10822,10824,10882,10886,12504,12548,12845,12874,12876,12965,12979,15021,15042,15238,15592,15610,15621],"fullWord":3916},{"subwords":[3777,3786,3898,3900,3913,3917,4181,5653,5856,5953,6008,12548,12874,12876,12965,12979,15021,15042,15238,15592,15610],"fullWord":3917},{"subwords":[3145,3147,3161,3777,3786,3816,3817,3898,3913,3918,3965,3968,4181,5653,5856,5953,6057,12374,12548,12574,12581,12583,12590,12874,12876,12965,12979,13008,15021,15042,15052,15238,15241,15312,15592,15610,15691,15694,15748,18607,18621,18649,18981,19036,19038,19040,19093,19098,19101,19105],"fullWord":3918},{"subwords":[118,796,809,2869,2941,3777,3826,3852,3913,3922,4186,12270,12271,12548,12680,12965,12966,14734,14821,15568,15592],"fullWord":3922},{"subwords":[3864,3867,3870,3871,3872,3883,3884,3898,3902,3923,3924,3925,3929,4048,4188,4189,4237,6004,6023,6033,12916,12917,12925,12936,12965,12971,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14356,14383,14384,14403,15021,15048,15248,15272,15305,15592,15599,15610,15611,15663,15668,15676,16194,16195,16198,16298,17316,17406,17419,17525,17638],"fullWord":3925},{"subwords":[3864,3883,3923,3924,3926,3984,3990,4048,4049,4188,4189,4195,4196,4237,4302,4311,4312,4350,4367,12936,12945,12965,12971,13007,13051,13052,14220,14223,14350,14356,14383,14403,14551,15592,15599,16194,16210,17316,17406,17447,17451,17687,18135,19825],"fullWord":3926},{"subwords":[796,809,2813,2840,2941,2971,2972,2983,3597,3701,3702,3890,3927,10072,10760,12680,12948,12965,12966,15570,15592],"fullWord":3927},{"subwords":[3701,3708,3898,3900,3928,5650,6008,10443,10760,10882,12845,12965,12979,15021,15592,15610,15621],"fullWord":3928},{"subwords":[3165,3898,3902,3929,3930,4141,4191,4192,6004,6023,6039,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,15679,16198,16201,16298,16303,17316,17419,17424,17434],"fullWord":3930},{"subwords":[3161,3898,3902,3929,3931,3940,3958,3961,3965,3968,3970,3971,4142,4238,4241,6004,6018,6023,6028,6057,12965,12971,12979,12982,13007,13008,13011,15021,15048,15052,15054,15306,15312,15592,15599,15610,15611,15676,15691,15694,15695,15700,15748,16198,16205,16298,16304,16305,16457,17316,17419,17429,17435,17924,18981,18985,19093,19098,19100,19101,19103,19113],"fullWord":3931},{"subwords":[3161,3898,3932,3965,3968,6057,6171,12965,12979,13008,13141,15021,15052,15312,15373,15592,15610,15691,15694,15748,18677,18981,19093,19098,19101],"fullWord":3932},{"subwords":[3429,3438,3689,3693,3777,3816,3913,3933,3965,9097,9207,9325,9335,9338,9340,9360,9400,12463,12469,12513,12548,12574,12965,13008,13038,15504,15592,15691,18823,18894,18945,19036,19049,19093,19098,19105,19292],"fullWord":3933},{"subwords":[3898,3934,3997,4001,4120,5984,6092,6100,12965,12979,13095,15021,15337,15592,15610,15728,19992,19996,20233],"fullWord":3934},{"subwords":[3898,3902,3929,3935,3997,4001,4002,4004,6004,6023,12965,12971,12979,12982,13007,13095,13099,15021,15048,15337,15354,15592,15599,15610,15611,15676,15728,15732,16198,16298,16453,17316,17419,20070,20077,20233,20234],"fullWord":3935},{"subwords":[3161,3898,3936,3965,3968,3997,4001,4003,4005,6057,12965,12979,13008,13095,13100,15021,15052,15312,15337,15592,15610,15691,15694,15728,15748,18981,19093,19098,19101,19165,19340,19989,20080,20095,20097,20233,20265,20267],"fullWord":3936},{"subwords":[796,809,2941,3100,3937,4029,4045,4105,4232,4425,12680,12965,12966,14735,14939,15592,15864],"fullWord":3937},{"subwords":[3165,3938,3939,6023,6039,16298,16303,17316,17434],"fullWord":3939},{"subwords":[3165,3940,3941,3957,3958,3963,3965,3968,3970,3971,4238,4241,6023,6039,6057,16205,16208,16298,16303,16304,16306,16457,16464,17316,17434,17435,17436,18981,18985,19125],"fullWord":3941},{"subwords":[3165,3942,3943,3964,4029,6023,6039,13147,16298,16303,17316,17434,17472,17475,21130],"fullWord":3943},{"subwords":[3367,3638,3644,3649,3656,3657,3658,3944,3945,4639,4656,4826,5096,5104,5114,5117,5221,5223,5641,6023,8714,8721,8724,8725,8726,8730,8881,8882,12752,12755,12802,12810,16298,16574,16581,16674,16676,16677,17316,17323],"fullWord":3945},{"subwords":[3361,3364,3367,3898,3902,3929,3944,3946,5641,6004,6023,8552,8575,8581,8584,8714,8725,8728,8729,8730,8857,8874,8875,8881,8934,12724,12725,12727,12729,12810,12965,12968,12971,12979,12982,13007,15021,15048,15386,15592,15599,15610,15611,15676,16198,16298,16574,16676,16678,16697,17316,17419],"fullWord":3946},{"subwords":[3165,3263,3367,3369,3944,3947,5641,6023,6039,8714,8725,8730,8881,8883,12810,16298,16303,16574,16609,16676,16680,17316,17434],"fullWord":3947},{"subwords":[3693,3694,3898,3902,3929,3948,3949,4158,6004,6023,9079,9085,9384,9389,9409,12965,12971,12979,12982,13007,13022,15021,15048,15411,15415,15526,15592,15599,15610,15611,15676,16178,16198,16298,16769,16889,16890,17316,17419,17722],"fullWord":3949},{"subwords":[3165,3948,3950,6023,6039,9079,9085,9412,16178,16298,16303,16769,16779,16903,17316,17434],"fullWord":3950},{"subwords":[3171,3417,3665,3670,3682,3684,3689,3692,3777,3814,3951,7604,7611,9097,9099,9207,9218,9307,9360,9366,12509,12512,12560,16178,16180,16769,16815,16858,16866,17316,17383,17389,17391],"fullWord":3951},{"subwords":[3577,3579,3685,3688,3701,3952,3964,4029,9101,10760,10767,12812,12822,12824,16178,16179,16769,16837,17149,17316,17350,17354,17364,17472],"fullWord":3952},{"subwords":[3413,3415,3417,3689,3692,3777,3786,3788,3802,3814,3948,3953,5653,5856,5918,5953,5955,6023,9079,9085,9097,9099,9207,9307,9360,9366,12410,12506,12516,12560,12561,12874,12875,12876,12879,16178,16180,16188,16298,16769,16858,16859,16860,17316,17383,17391],"fullWord":3953},{"subwords":[3732,3755,3756,3954,9422,11759,11772,11854,12872,13025,16178,16769,17316],"fullWord":3954},{"subwords":[3732,3826,3860,3955,3956,11921,11941,12002,12082,12872,17316,17434],"fullWord":3956},{"subwords":[3165,3940,3941,3957,3958,3963,3965,3968,3970,3971,4238,4241,6023,6039,6057,16205,16208,16298,16303,16304,16306,16457,16464,17316,17434,17435,17436,18981,18985,19125],"fullWord":3957},{"subwords":[126,132,133,134,796,809,810,905,911,918,929,2941,3001,3003,3011,3041,3047,3048,3052,3064,3603,3605,3611,3958,3959,3965,3971,4238,4241,12680,12683,12686,12692,12965,12966,12967,12971,13007,13008,13011,13018,14898,14912,15574,15592,15599,15673,15691,15700,15880,16041,16142,16157,16205,16246,17303,17316,17429,17435,17773,17885,18333,18335,18432,18435,18449,18463,18464,18472,19093,19094,19097,19098,19100,19113,19381],"fullWord":3959},{"subwords":[3638,3644,3649,3656,3657,3658,3940,3958,3960,3965,3968,3969,3970,3971,4238,4241,4639,4656,4826,5096,5104,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,6023,6057,12752,12755,16205,16298,16304,16457,17316,17323,17435,18575,18981,18983,18985],"fullWord":3960},{"subwords":[3161,3898,3902,3929,3931,3940,3958,3961,3965,3968,3970,3971,4142,4238,4241,6004,6018,6023,6028,6057,12965,12971,12979,12982,13007,13008,13011,15021,15048,15052,15054,15306,15312,15592,15599,15610,15611,15676,15691,15694,15695,15700,15748,16198,16205,16298,16304,16305,16457,17316,17419,17429,17435,17924,18981,18985,19093,19098,19100,19101,19103,19113],"fullWord":3961},{"subwords":[3560,3564,3577,3579,3701,3728,3729,3958,3962,3964,3965,3971,4029,4238,4241,4423,10760,10896,10897,10901,12740,12741,16205,17113,17149,17316,17354,17435,17472,18018,19186,19195],"fullWord":3962},{"subwords":[126,134,693,711,929,2869,2906,2907,2908,2913,2916,2917,3041,3052,3064,3603,3605,3611,3777,3814,3816,3958,3965,3966,3967,3971,4238,4241,12293,12560,12574,12575,12591,12686,12692,15880,15986,16041,16134,16136,16157,16205,17278,17316,17383,17435,17885,18333,18335,18408,18428,18432,18435,19036,19057],"fullWord":3967},{"subwords":[3161,3898,3965,3968,3973,6057,12737,12965,12979,13008,13041,15021,15052,15312,15592,15610,15691,15694,15748,18981,19093,19098,19101,19117,19118,19131,19134,19138,19331],"fullWord":3973},{"subwords":[3777,3816,3819,3826,3852,3861,3965,3974,12574,12887,13043,18969,19036,19060,19066,19131,19143],"fullWord":3974},{"subwords":[299,796,809,2941,2965,3665,3976,4062,4312,7375,8094,8099,12680,12965,12966,13051,14758,15592,15790],"fullWord":3976},{"subwords":[3171,3370,3384,3385,3665,3670,3944,3977,3978,7871,8166,8714,8720,8731,8737,8951,8958,12810,13044,17316,17439,18050,19583,19584,19592],"fullWord":3978},{"subwords":[3584,3701,3708,3980,4268,5650,5651,5691,10383,10443,10470,10760,12845],"fullWord":3980},{"subwords":[3777,3814,3816,3821,3958,3965,3971,3981,3982,4238,4241,4300,4301,4375,4394,12560,12574,12591,12597,12659,12663,12888,13055,13059,13082,16205,16212,16265,17278,17281,17316,17383,17435,18005,18117,19036,19057,19410,19434,19452,19655,19659,19780],"fullWord":3982},{"subwords":[3777,3816,3825,3965,3981,3983,4029,4300,4375,12574,12659,13059,19036,19059,19186,19434,19655,19780,21183,21193],"fullWord":3983},{"subwords":[3638,3644,3657,3864,3867,3869,3984,3985,3986,4049,4263,4268,4269,4302,4639,4656,5096,5114,5200,5254,5455,5471,5523,5525,5526,12752,12916,12917,13478,14020,14433,14438],"fullWord":3986},{"subwords":[3864,3867,3872,3883,3884,3984,3985,3987,3990,4048,4049,4237,4268,4271,4302,4311,4367,5656,6023,6033,12916,12917,12925,12936,12945,13607,14166,14433,14434,14551,16194,16195,16298,17316,17406,17447,17525,18066,18135,18136,19825,19876],"fullWord":3987},{"subwords":[3553,3584,3701,3708,3864,3867,3984,3985,3988,4047,4049,4268,4302,5650,10443,10470,10760,10864,10865,10917,10918,12845,12916,12917,14056,14061,14433,14454],"fullWord":3988},{"subwords":[3777,3826,3852,3854,3864,3984,3989,4049,4302,14019,14484,19655,19813],"fullWord":3989},{"subwords":[3898,3902,3929,3991,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,6004,6023,12965,12971,12979,12982,13007,13051,13052,15021,15048,15592,15599,15610,15611,15676,15706,15708,15716,15777,15782,15840,16198,16210,16298,17316,17419,17451,17452,18056,18066,18071,18150,19876,19880],"fullWord":3991},{"subwords":[3958,3965,3971,3992,3993,4226,4238,4241,4312,4350,4356,4357,4375,4394,12965,12971,13007,13008,13011,13051,13052,13055,13059,13082,15592,15599,15691,15700,15720,15722,15727,15852,15858,15861,16205,16210,16212,16265,17316,17429,17435,17451,19093,19098,19100,19113,19121,19155,19158],"fullWord":3993},{"subwords":[3417,3689,3692,3777,3814,3821,3994,9097,9099,9207,9223,9307,9360,9366,9369,12560,12597,12888,13048,16178,16180,16769,16858,17316,17383,17391,18083,18117,19655,19659],"fullWord":3994},{"subwords":[3370,3944,3958,3965,3971,3995,3996,4238,4241,4375,4394,8714,8720,8887,8892,8901,8935,9026,9027,12810,13044,13055,13059,13082,16205,16212,16265,16704,16709,16753,17316,17435,17460,18050,18743,18759,18762,18802,19123,19148,19486,19592],"fullWord":3996},{"subwords":[3777,3786,3788,3814,3997,3999,4000,4004,5653,5856,5918,5953,5955,6023,12506,12560,12561,12874,12875,12876,12879,13093,13094,16188,16298,17316,17383,20233,20234,20262],"fullWord":4000},{"subwords":[3898,3902,3929,3935,3997,4001,4002,4004,6004,6023,12965,12971,12979,12982,13007,13095,13099,15021,15048,15337,15354,15592,15599,15610,15611,15676,15728,15732,16198,16298,16453,17316,17419,20070,20077,20233,20234],"fullWord":4002},{"subwords":[3161,3898,3936,3965,3968,3997,4001,4003,4005,6057,12965,12979,13008,13095,13100,15021,15052,15312,15337,15592,15610,15691,15694,15728,15748,18981,19093,19098,19101,19165,19340,19989,20080,20095,20097,20233,20265,20267],"fullWord":4003},{"subwords":[3940,3958,3965,3968,3970,3971,3997,4004,4005,4006,4238,4241,6023,6057,16205,16298,16304,16457,17316,17435,17938,18981,18985,19165,20088,20095,20097,20101,20233,20234,20265,20269],"fullWord":4006},{"subwords":[3942,3964,3997,4004,4007,4008,4029,6023,13147,16298,17316,17472,20233,20234,21130],"fullWord":4008},{"subwords":[3665,3682,3689,3777,4009,7604,7889,9097,9207,9218,9360,12509,20152,20164,20262],"fullWord":4009},{"subwords":[183,796,809,2766,2941,2949,3096,3638,3639,3893,4010,4011,4096,4198,4199,4574,5096,5330,12680,12965,12966,14736,14933,15561,15592,15600,15734,20303,20410,20412,20868,20929],"fullWord":4011},{"subwords":[2160,2271,2300,2302,3617,3826,4010,4012,4029,20903,21202],"fullWord":4012},{"subwords":[3898,3902,3929,4010,4014,4015,4028,4147,4150,4198,4206,6004,6023,6029,12965,12971,12979,12982,13007,13110,13112,15021,15048,15302,15592,15599,15610,15611,15676,15734,15744,16198,16214,16232,16298,16445,16475,17316,17419,17464,17466,18272,20875,20877,20933,20947],"fullWord":4015},{"subwords":[3693,3898,4010,4014,4016,4026,4147,4198,9079,9384,12965,12979,13110,15021,15411,15592,15610,15734,20560,20817,20875,20933],"fullWord":4016},{"subwords":[3665,3682,3689,3777,4010,4017,7604,7892,9097,9207,9218,9360,12509,12606,13113,13119,20742,20774,20790,20804,20897],"fullWord":4017},{"subwords":[3509,3538,3638,3644,3657,3701,3704,3708,4010,4013,4018,4019,4639,4656,4728,4865,5096,5114,5144,5146,5271,5650,5756,10378,10443,10490,10760,10780,10942,10944,12752,12837,12845,13110,13111,13114,20524,20566,20875,20883],"fullWord":4019},{"subwords":[1158,2848,2869,3096,3732,3733,3777,4010,4021,11086,11213,11265,11399,11810,11891,12066,12071,12244,12522,12606,13119,20393,20890,20897],"fullWord":4021},{"subwords":[3732,3744,3777,3786,4010,4022,5653,5856,5909,5953,11512,11536,11595,11891,12066,12071,12390,12522,12525,12606,12866,12874,12876,13110,13119,20579,20875,20896,20897],"fullWord":4022},{"subwords":[126,781,1028,2921,3052,3096,3605,3864,3965,4010,4023,4399,12686,12937,13154,13168,13364,13408,13438,14188,14229,18333,18432,18436,18521,19075,19166,19548,20927],"fullWord":4023},{"subwords":[93,732,1145,2921,2922,3096,3864,3867,4010,4024,5956,12916,12917,13110,13154,13155,13408,13439,13630,14229,20875,20927],"fullWord":4024},{"subwords":[3826,3854,3864,4010,4025,14019,14229,14234,20903,20927],"fullWord":4025},{"subwords":[3693,3898,4010,4014,4016,4026,4147,4198,9079,9384,12965,12979,13110,15021,15411,15592,15610,15734,20560,20817,20875,20933],"fullWord":4026},{"subwords":[3940,3942,3958,3964,3965,3968,3970,3971,4029,4031,4238,4241,4423,6023,6057,13147,16205,16298,16304,16457,17316,17435,17472,18018,18019,18981,18985,19186,19195,21130,21135],"fullWord":4031},{"subwords":[3272,3944,3964,4029,4032,8612,8678,8714,8739,9101,12810,16178,16758,16769,17316,17472],"fullWord":4032},{"subwords":[3826,3832,3861,3965,3968,4029,4033,6057,12893,18981,19060,19186,21135],"fullWord":4033},{"subwords":[3864,3883,3888,3964,3984,3990,4029,4034,4035,4048,4049,4237,4302,4311,4367,12936,12945,14187,14551,16194,17316,17406,17447,17450,17472,17697,18135,19825,21193,21224],"fullWord":4035},{"subwords":[3777,3786,3788,3814,4036,4037,4038,5653,5856,5918,5953,5955,6023,12506,12560,12561,12874,12875,12876,12879,16188,16298,17316,17383,21255,21297,21301],"fullWord":4037},{"subwords":[3942,3964,4029,4038,4039,4040,4045,6023,13147,13148,16298,17316,17472,21130],"fullWord":4040},{"subwords":[3693,3898,4041,4042,9079,9384,12965,12979,15021,15411,15592,15610,21260,21312],"fullWord":4042},{"subwords":[3948,4038,4041,4043,6023,9079,9085,16178,16298,16769,16929,17316],"fullWord":4043},{"subwords":[3577,3685,3701,4029,4044,4045,9101,10760,10767,12812,12824],"fullWord":4044},{"subwords":[377,382,796,810,905,2813,2941,2971,3001,3017,4050,4051,10072,10226,14880,15880,15888,15889,15942,16118,16142],"fullWord":4051},{"subwords":[25,27,796,1234,1366,1367,1502,2308,2364,2738,2744,2941,3100,4052,4053,4232,14735,14939,15864],"fullWord":4053},{"subwords":[796,810,867,868,905,950,2941,3001,3033,4055,4056,4106,14729,14733,15880,15884,16142],"fullWord":4056},{"subwords":[796,867,2812,2941,3100,4055,4057,4106,4232,14729,14735,14939,15864,21041,21047],"fullWord":4057},{"subwords":[93,94,121,122,396,399,796,800,817,2766,2780,2813,2941,2949,2954,2955,2971,3111,3447,3493,4058,4431,4466,4516,4601,4607,4639,4641,4728,4810,5588,5592,5756,5976,10072,10073,10074,10075,10090,10093,10097,10202,10324,10327,10355,10378,14717,14718,14736,14961,14968,15021,15028,15038,15060],"fullWord":4058},{"subwords":[126,134,254,796,810,828,905,911,918,2941,3001,3003,3011,3041,3052,3064,4059,4060,4238,4241,6225,6228,6308,6332,6334,6339,6344,6354,7042,7044,14754,14757,14898,14912,15880,16041,16142,16150,16157,17773,18449,18472,19381],"fullWord":4060},{"subwords":[126,254,796,828,911,919,2941,3003,3052,3100,4059,4061,4232,6225,6308,6315,6332,6344,6386,7042,7050,7140,14735,14754,14898,14939,15864,18449,19231,19377],"fullWord":4061},{"subwords":[796,2797,2941,3100,4062,4063,4232,7267,7375,7395,7447,7961,14735,14758,14767,14939,15864],"fullWord":4063},{"subwords":[574,579,796,810,869,883,905,961,2848,2859,2865,2868,2921,2938,2941,2987,2995,3001,4048,4065,4066,4067,4068,4077,4082,4237,11086,11105,11270,11275,11276,11281,11284,11314,11330,13154,13167,13286,13321,13336,14240,14241,14403,14808,14816,14818,14820,14851,14866,14891,15747,15880,15973,16014,16129,16130,16142,16152,16221,16223,17476,17494],"fullWord":4067},{"subwords":[93,94,114,115,121,122,605,608,796,800,817,2766,2780,2869,2883,2884,2885,2941,2949,2954,2955,2977,3111,4069,4070,4431,4492,4494,4496,4500,4516,4532,4605,4607,4639,4774,4810,5588,5595,5856,5865,5976,12224,12225,12229,12270,12274,12319,12358,14717,14718,14736,14821,14826,14961,15021,15028,15060,15227],"fullWord":4070},{"subwords":[93,96,114,116,121,123,796,810,817,825,905,906,2869,2883,2885,2886,2887,2906,2941,2954,2960,2977,3001,3021,4069,4071,5588,5595,5598,5599,5856,5918,5976,5977,6000,6023,12224,12226,12229,12270,12273,12275,12319,12324,14717,14722,14821,14881,15021,15048,15880,15986,15995,15998,16134,16142,16145,16270,16286,16298,16419,17223],"fullWord":4071},{"subwords":[349,596,796,852,885,2801,2869,2941,2969,3402,4072,9207,9208,9376,9378,12270,14784,14821,14838],"fullWord":4072},{"subwords":[796,810,867,868,905,950,2869,2906,2941,3001,3033,4073,4074,12270,12273,12277,12279,14729,14733,14821,14840,14845,15880,15884,15986,16007,16134,16142,17207,17227],"fullWord":4074},{"subwords":[716,796,867,2812,2869,2941,2980,3100,4073,4075,4232,4400,12270,12277,12282,12311,14729,14735,14821,14840,14939,15864,21041,21047,21059,21075],"fullWord":4075},{"subwords":[657,716,796,2869,2899,2941,2980,3100,4076,4232,4400,12252,12255,12270,12282,12311,14735,14821,14939,15864,21075],"fullWord":4076},{"subwords":[93,94,121,122,732,733,735,796,800,817,2766,2780,2921,2922,2923,2924,2941,2949,2954,2955,2987,2989,2990,3111,4077,4078,4079,4431,4516,4607,4639,4810,5323,5588,5956,5976,13154,13155,13156,13157,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,14262,14717,14718,14736,14851,14852,14853,14961,14979,15021,15025,15028,15060,15064,15248],"fullWord":4079},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":4080},{"subwords":[762,796,2921,2936,2941,2987,3100,4077,4081,4232,13154,13268,13286,13424,14258,14410,14735,14851,14939,15864,21064],"fullWord":4081},{"subwords":[93,94,121,122,126,127,796,800,817,911,1009,2766,2772,2780,2941,2949,2954,2955,2962,3003,3004,3005,3052,3055,3111,3161,4085,4086,4431,4516,4537,4551,4553,4607,4639,4810,4812,5327,5588,5620,5976,5982,6055,6057,14717,14718,14736,14898,14901,14902,14959,14961,15021,15028,15049,15060,15061,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19197,19198,19205,19233],"fullWord":4086},{"subwords":[93,121,126,796,817,911,1009,2941,2954,2958,2962,3003,3004,3007,3052,3055,3161,4085,4087,5588,5620,5976,5982,6008,6055,6057,14717,14720,14872,14898,14901,14903,14959,14983,15021,15049,15312,15748,18449,18453,18541,18554,18652,18653,19197,19199],"fullWord":4087},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":4088},{"subwords":[118,126,132,693,796,809,911,2869,2908,2913,2915,2941,3003,3009,3052,3605,3777,3816,3820,3913,3965,3966,4089,12270,12271,12293,12548,12574,12575,12680,12686,12965,12966,13008,14821,14847,14898,15568,15592,15691,18333,18408,18432,18449,18460,18463,19036,19093,19094,19098,19105],"fullWord":4089},{"subwords":[126,796,911,2941,2943,3003,3052,4090,14898,14899,18449,19975],"fullWord":4090},{"subwords":[93,94,121,122,204,796,800,817,1106,1109,2766,2780,2941,2949,2954,2955,3012,3013,3080,3082,3083,3111,4091,4092,4431,4516,4569,4607,4639,4810,4851,5329,5588,5976,14717,14718,14736,14921,14922,14961,15021,15028,15060,15337,19910,19990],"fullWord":4092},{"subwords":[93,114,121,796,817,1106,1109,2869,2883,2885,2941,2954,2977,3012,3014,3080,3083,3084,4069,4091,4093,5588,5595,5856,5976,12224,12229,12270,12305,12319,14717,14821,14921,14925,15021,15337,19948,19950],"fullWord":4093},{"subwords":[93,121,796,817,1106,1109,2941,2954,2958,3012,3015,3080,3083,4091,4094,5588,5976,6008,14717,14720,14872,14921,14927,14983,15021,15337],"fullWord":4094},{"subwords":[93,96,121,123,796,810,817,825,905,906,1106,1109,1110,1114,2941,2954,2960,3001,3012,3016,3021,3080,3083,3085,3086,4091,4095,5588,5599,5976,5977,6023,14717,14722,14881,14921,14929,15021,15048,15337,15354,15880,16076,16078,16142,16145,16270,16286,16298,16419,19967,20070,20071],"fullWord":4095},{"subwords":[796,810,905,1155,1157,2813,2941,2971,3001,3096,3099,3482,3485,4096,4097,4098,4100,10072,10292,10299,14933,14938,15880,15942,16089,16142,16226,17037,20302,20410,20442,20449],"fullWord":4098},{"subwords":[796,1155,1166,2813,2941,2971,3096,3100,3482,3487,4096,4097,4099,4232,10072,10089,10292,10304,14735,14933,14937,14939,15864,20410,20448,20493,21010,21079,21082,21228],"fullWord":4099},{"subwords":[118,716,796,809,2869,2941,2980,3100,3777,3825,3913,3921,4029,4101,4183,4232,4400,12270,12271,12282,12311,12548,12680,12965,12966,14735,14821,14939,14942,15568,15592,15864,21075,21183],"fullWord":4101},{"subwords":[93,94,121,122,213,796,800,817,2766,2780,2941,2949,2954,2955,3111,4102,4103,4425,4431,4516,4584,4607,4639,4810,5588,5976,14717,14718,14736,14945,14946,14961,15021,15028,15060,21249],"fullWord":4103},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2960,3001,3021,4102,4104,4425,4426,5588,5599,5976,5977,6023,14717,14722,14881,14945,14950,15021,15048,15880,16142,16145,16270,16286,16298,16419],"fullWord":4104},{"subwords":[93,96,121,123,796,810,817,825,867,868,905,906,950,953,2807,2809,2941,2954,2960,3001,3021,3033,4107,4108,5588,5599,5976,5977,6023,14717,14722,14729,14733,14798,14802,14881,15021,15037,15048,15880,15884,15886,15939,16142,16145,16270,16286,16298,16419],"fullWord":4108},{"subwords":[93,121,227,796,817,867,1196,2807,2812,2941,2954,3100,4107,4109,4232,5588,5976,9865,14717,14729,14735,14798,14939,15021,15864,15866,21041,21047,21071,21097,21099],"fullWord":4109},{"subwords":[93,96,112,113,121,123,796,810,817,825,869,883,905,906,2848,2853,2868,2941,2954,2960,3001,3021,4065,4068,4110,4111,5588,5599,5845,5976,5977,6023,11086,11089,11091,11092,11093,11105,11276,11281,11284,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,12080,14717,14722,14808,14820,14881,14975,14978,15021,15048,15202,15224,15880,15973,15978,16129,16142,16145,16221,16227,16270,16278,16286,16298,16419,17161],"fullWord":4111},{"subwords":[93,112,121,227,796,817,869,884,1196,2848,2853,2941,2954,3100,4065,4110,4112,4232,4415,5588,5976,11086,11089,11091,11276,11281,11286,11329,11408,11437,11539,11542,14717,14735,14808,14939,14975,15021,15202,15864,15866,21051,21071,21097,21099,21153],"fullWord":4112},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2960,3001,3021,3104,3119,3154,4113,4120,4130,5588,5599,5605,5609,5976,5977,5978,5984,6023,14717,14722,14881,15021,15048,15880,16024,16142,16145,16228,16270,16286,16298,16319,16340,16419,16425],"fullWord":4113},{"subwords":[93,96,121,123,227,796,810,817,825,905,906,1196,1197,2941,2954,2960,3001,3021,3100,3102,4114,4232,5588,5599,5619,5976,5977,6023,14717,14722,14735,14881,14939,14944,15021,15048,15282,15864,15865,15866,15867,15880,16103,16105,16142,16145,16149,16156,16270,16286,16298,16419,21071,21097,21099,21104,21105,21130,21212],"fullWord":4114},{"subwords":[93,121,126,796,817,826,911,1009,2941,2954,2962,3003,3004,3052,3055,3161,3169,4085,4115,4120,4144,5588,5620,5622,5976,5982,5984,5985,6055,6057,14717,14898,14901,14959,15021,15049,15312,15748,18449,18453,18541,18554,18576,18642,19197,19240],"fullWord":4115},{"subwords":[3248,4106,4116,4120,5984,8483,8552,8562,15021],"fullWord":4116},{"subwords":[3161,3406,3429,3430,3431,3432,4117,4155,4639,4714,4810,4909,4911,4925,4935,4942,5023,5024,5034,5677,5680,6057,9079,9082,9384,9385,15021,15028,15051,15060,15312,15318,15411,15412,15428,15433,15542,15748,18823,18835,18844,18845,18847,18941,18942,19267,19268,19274],"fullWord":4117},{"subwords":[3638,3644,3647,3648,3649,3656,3657,3658,3893,3897,3898,3899,3902,3929,4118,4119,4639,4656,4659,4660,4810,4826,5096,5104,5114,5115,5116,5117,5216,5221,5223,5225,6004,6023,12752,12755,12965,12971,12979,12982,13007,15021,15028,15048,15060,15078,15081,15087,15592,15599,15600,15603,15609,15610,15611,15676,15677,16198,16199,16243,16298,17316,17323,17419],"fullWord":4119},{"subwords":[3113,3115,3116,3117,3119,3153,3154,4120,4121,4122,4130,4639,4678,4679,4680,4810,4826,5984,6023,15021,15028,15048,15060,15071,15087,15093,15096,16228,16229,16298,16311,16319,16320,16340,16425,16426],"fullWord":4122},{"subwords":[3119,3154,4120,4123,4124,4130,5740,5742,5984,6023,15021,15037,15048,15103,15105,16228,16298,16319,16326,16340,16425],"fullWord":4124},{"subwords":[3119,3154,4120,4125,4126,4130,5691,5693,5790,5984,6023,10383,10388,10390,10392,10451,15021,15048,15107,15110,16228,16298,16319,16340,16425],"fullWord":4126},{"subwords":[3119,3154,4048,4120,4127,4128,4130,4135,4137,4237,5984,6023,6033,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,15021,15048,15248,15272,15305,16228,16298,16319,16336,16340,16425,17525,17658],"fullWord":4128},{"subwords":[4120,4127,4129,4135,4138,4140,4232,5698,5984,6189,6196,13489,13506,13509,13577,13583,14262,14290,14410,14576,15021,15248,15866,21127],"fullWord":4129},{"subwords":[3119,3154,4120,4130,4131,4132,5845,5984,6023,11539,11543,11546,12080,15021,15048,15202,15224,16228,16298,16319,16330,16340,16425],"fullWord":4132},{"subwords":[4120,4125,4133,5691,5856,5861,5984,5998,10383,10388,12339,15021,15107],"fullWord":4133},{"subwords":[3701,3708,3898,4120,4125,4134,5650,5651,5691,5984,10383,10388,10443,10760,10882,12845,12965,12979,15021,15107,15592,15610,15621],"fullWord":4134},{"subwords":[3113,3115,3153,4120,4121,4127,4135,4136,4639,4673,4678,4810,5984,13478,13489,13490,13506,13577,13583,14262,15021,15028,15060,15093,15248],"fullWord":4136},{"subwords":[3119,3154,4048,4120,4127,4128,4130,4135,4137,4237,5984,6023,6033,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,15021,15048,15248,15272,15305,16228,16298,16319,16336,16340,16425,17525,17658],"fullWord":4137},{"subwords":[4120,4127,4129,4135,4138,4140,4232,5698,5984,6189,6196,13489,13506,13509,13577,13583,14262,14290,14410,14576,15021,15248,15866,21127],"fullWord":4138},{"subwords":[3161,3165,4141,4142,4143,4238,4241,6018,6023,6039,6057,15021,15048,15306,15309,15312,15748,16298,16303,16304,16306,16457,16464,19253],"fullWord":4143},{"subwords":[3161,3419,3421,3429,3430,3432,4106,4145,6057,9079,9384,15021,15051,15312,15411,15542,15748,18823,18844,18847,18941,19267],"fullWord":4145},{"subwords":[3145,3161,3413,3429,3430,3432,4146,5856,5996,6057,9079,9207,9245,9325,9331,9338,9384,12374,12410,12412,12463,12464,12466,15021,15051,15175,15241,15312,15411,15542,15748,18607,18649,18823,18844,18847,18894,18898,18941,19267,19289],"fullWord":4146},{"subwords":[3113,3115,3153,4120,4121,4147,4148,4639,4678,4810,4865,5361,5984,6118,6119,15021,15028,15060,15093,15362,20524,20532,20533,20587],"fullWord":4148},{"subwords":[3509,4120,4125,4147,4149,5691,5984,6118,6119,10383,10388,15021,15107,20532,20587],"fullWord":4149},{"subwords":[3419,4106,4153,4154,9396,9399,9409,10041,15422,15425,15534,16178,16769,16772,16889,16954,17722],"fullWord":4154},{"subwords":[4156,4157,4158,6008,6016,6023,9079,9085,9384,9389,9409,15021,15048,15411,15413,15414,15415,15526,15528,16178,16298,16769,16889,16890,17722],"fullWord":4157},{"subwords":[93,112,121,341,343,349,537,553,796,817,869,2848,2853,2941,2954,3156,3402,4065,4110,4159,4160,5588,5830,5976,5993,9079,9376,9384,11086,11089,11091,11276,11281,11286,11292,11437,11539,11541,11617,11619,11743,14717,14808,14810,14975,15021,15202,15411,15480,15481],"fullWord":4160},{"subwords":[4158,4159,4161,5830,5831,5845,6023,9079,9085,9384,9389,9409,9422,11539,11541,11619,11743,11745,11759,11764,11765,12080,15021,15048,15202,15224,15411,15415,15480,15481,15484,15489,15526,16178,16236,16298,16375,16769,16889,16890,17722],"fullWord":4161},{"subwords":[4046,4048,4162,4163,4169,4237,9178,9196,9409,9422,11759,13702,14313,14326,14339,14403,14421,15480,15489,15508,15524,15747,16178,16236,16237,16239,16769,16853,16883,16889,17550,17722],"fullWord":4163},{"subwords":[4046,4162,4164,4232,9101,9178,11755,14302,14313,14410,14578,15480,15490,15508,15747,21146],"fullWord":4164},{"subwords":[3413,4165,5856,5894,5988,5996,7493,7502,7604,8015,9079,9207,9384,12410,12412,15021,15141,15173,15175,15234,15411,15461,15494],"fullWord":4165},{"subwords":[3165,4141,4158,4166,6023,6039,9079,9085,9384,9389,9409,15021,15048,15411,15415,15526,15530,16178,16298,16303,16769,16779,16889,16890,16895,16899,16903,17722],"fullWord":4166},{"subwords":[3419,4106,4167,9392,9409,16178,16769,16889,17722],"fullWord":4167},{"subwords":[4168,9392,9409,9413,16178,16769,16779,16889,16899,16903,17722],"fullWord":4168},{"subwords":[4046,4048,4169,4170,4237,9409,13702,13844,14342,14403,14421,15508,15524,16178,16239,16240,16769,16779,16883,16888,16889,16899,16903,17550,17559,17722],"fullWord":4170},{"subwords":[4046,4048,4169,4171,4232,4237,9101,9409,13702,14302,14403,14410,14421,14578,15508,15524,16178,16239,16769,16883,16889,17550,17560,17597,17672,17697,17722,21146,21152,21212],"fullWord":4171},{"subwords":[796,809,810,867,868,905,950,2941,3001,3033,3906,3909,4172,4173,12675,12677,12680,12683,12835,12836,12965,12966,12967,12971,13007,13018,14729,14733,15592,15593,15597,15599,15673,15880,15884,16142,17294,17303,17316,17319],"fullWord":4173},{"subwords":[796,809,867,2812,2941,3100,3906,3910,4029,4172,4174,4232,9797,12675,12680,12831,12835,12965,12966,14729,14735,14939,15592,15593,15598,15864,21041,21047,21191],"fullWord":4174},{"subwords":[3628,3632,3906,3909,4106,4176,4177,12965,12971,13007,15592,15593,15597,15599,17316,17319],"fullWord":4177},{"subwords":[4106,4178,4312,4350,12719,12720,12965,12971,13007,13051,13052,15592,15599,16210,17316,17451,18049],"fullWord":4178},{"subwords":[3958,3965,3971,4179,4180,4238,4241,6940,6982,6987,7103,7117,12785,12965,12971,13007,13008,13011,15592,15599,15691,15700,16205,17316,17340,17429,17435,19093,19098,19100,19113],"fullWord":4180},{"subwords":[3143,3777,3786,3788,3814,3898,3902,3913,3919,3929,4181,4182,5653,5856,5918,5953,5955,6000,6004,6023,12506,12548,12556,12560,12561,12874,12875,12876,12879,12965,12971,12979,12982,13007,15021,15042,15043,15048,15238,15592,15599,15610,15611,15676,16188,16198,16203,16298,16391,17272,17316,17383,17419],"fullWord":4182},{"subwords":[3826,3835,3839,3860,3906,3909,4184,4185,12965,12971,13007,15592,15593,15597,15599,15648,15651,17316,17319],"fullWord":4185},{"subwords":[3777,3814,3826,3852,3853,3860,3913,3919,4186,4187,12548,12560,12965,12971,13007,15592,15599,16203,17316,17383,17397],"fullWord":4187},{"subwords":[2300,2304,2446,2476,3617,3624,3964,4029,4190,4232,12959,12964,12965,12971,13007,15576,15590,15592,15599,15690,17308,17316,17472,21212],"fullWord":4190},{"subwords":[3165,3898,3902,3929,3930,4141,4191,4192,6004,6023,6039,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,15679,16198,16201,16298,16303,17316,17419,17424,17434],"fullWord":4192},{"subwords":[3965,4106,4193,8714,8857,8892,12965,12968,13008,13009,15386,15592,15691,18743,18749,18777,19093,19098,19099],"fullWord":4193},{"subwords":[3370,3975,4106,4194,4312,8714,8857,8906,12719,12965,12968,13044,13051,15386,15592],"fullWord":4194},{"subwords":[3864,3883,3923,3924,3926,3984,3990,4048,4049,4188,4189,4195,4196,4237,4302,4311,4312,4350,4367,12936,12945,12965,12971,13007,13051,13052,14220,14223,14350,14356,14383,14403,14551,15592,15599,16194,16210,17316,17406,17447,17451,17687,18135,19825],"fullWord":4196},{"subwords":[3864,3888,3923,3984,4029,4034,4049,4188,4195,4197,4232,4302,4312,12965,13051,14220,14350,14356,14410,15592,15672,21193,21196,21224],"fullWord":4197},{"subwords":[3638,3656,3893,3897,4010,4028,4198,4199,4200,4206,5096,5104,5216,5221,5282,12965,12971,13007,15592,15599,15600,15609,15734,15744,16214,16243,17316,17323,17464,18270,20929,20931],"fullWord":4200},{"subwords":[3638,3893,4010,4027,4029,4198,4199,4201,4232,5096,5220,5281,5430,12965,15592,15600,15734,15737,20929,20932,21010,21154,21202],"fullWord":4201},{"subwords":[3638,3644,3647,3657,3893,3898,3899,4010,4013,4014,4118,4147,4198,4199,4202,4639,4656,4659,4810,4865,5096,5114,5115,5273,5361,12752,12965,12979,13110,13111,15021,15028,15060,15078,15592,15600,15603,15610,15734,15738,20524,20875,20929,20933],"fullWord":4202},{"subwords":[3898,3900,4010,4014,4147,4198,4203,6008,12965,12979,13110,15021,15592,15610,15734,15741,20875,20933],"fullWord":4203},{"subwords":[3777,3814,3913,3919,4010,4028,4198,4204,4205,4206,12548,12560,12606,12610,12965,12971,13007,13119,13124,15592,15599,15734,15744,16203,16214,17284,17316,17383,17464,17469,18273,20897,20944],"fullWord":4205},{"subwords":[4207,4208,4232,4263,4265,4312,4321,4325,5430,5466,15772],"fullWord":4208},{"subwords":[4207,4209,4210,4263,4268,4269,4312,4321,4326,4327,4328,4348,4639,4810,5455,5471,5654,6008,15021,15028,15056,15060,15773,15775,15777,15778,15780],"fullWord":4210},{"subwords":[4207,4209,4211,4212,4224,4263,4267,4268,4269,4271,4312,4321,4324,4326,4327,4330,4350,4351,4352,4639,4810,4826,4849,5455,5456,5471,5478,5654,5655,5656,6023,15021,15028,15048,15060,15087,15773,15777,15778,15782,15840,16252,16298,18056,18066,18067,18071,18150,19846,19876,19877,19880],"fullWord":4211},{"subwords":[3161,4142,4214,4215,4224,4226,4238,4241,4268,4271,4312,4326,4330,4331,4350,4351,4356,4357,4375,4376,4378,4379,4394,5654,5655,5656,6018,6019,6020,6023,6057,15021,15048,15059,15306,15312,15748,15777,15782,15840,15852,15858,15861,16265,16267,16298,16304,16457,18056,18066,18071,18074,18150,19350,19352,19356,19359,19876,19880],"fullWord":4215},{"subwords":[4158,4216,4224,4268,4271,4312,4326,4330,4336,4337,4350,4351,5654,5655,5656,6023,9079,9085,9384,9389,9409,15021,15048,15411,15415,15526,15777,15782,15840,16178,16298,16769,16796,16889,16890,17722,18056,18066,18071,18083,18150,19850,19862,19876,19880],"fullWord":4216},{"subwords":[2567,2576,2610,2656,2668,4217,4218,4242,4262,4293,4312,4317,4320,4350,15749,15764,15806,15820,16247,16260,18035,18103,19840,19844],"fullWord":4218},{"subwords":[2567,2610,2667,2710,4217,4219,4232,4242,4293,4312,4317,15749,15765,15806,19840],"fullWord":4219},{"subwords":[4220,4232,4293,4312,12127,15806,15812],"fullWord":4220},{"subwords":[4048,4049,4221,4222,4237,4293,4302,4311,4312,4350,4367,14403,14551,15747,15806,15815,15818,15820,16260,17687,18103,18114,18135,19624,19628,19825],"fullWord":4222},{"subwords":[3396,4106,4223,4312,8989,15821,19866],"fullWord":4223},{"subwords":[4226,4227,4238,4241,4312,4350,4356,4357,4370,4375,4394,15852,15856,15858,15861,16265,16268,19371,19886],"fullWord":4227},{"subwords":[4226,4228,4232,4238,4241,4312,4350,4356,4357,4360,4375,4394,4423,15852,15857,15858,15861,16265,18018,19377,21212,21226,21227],"fullWord":4228},{"subwords":[4106,4229,4312,4357,4375,9012,9026,15858,15859,18789],"fullWord":4229},{"subwords":[4224,4230,4231,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,6023,15021,15048,15373,15777,15782,15840,16298,16483,18056,18066,18071,18150,19876,19880],"fullWord":4231},{"subwords":[4232,4233,7604,8015,9101,9207,15461,15494,21144],"fullWord":4233},{"subwords":[3864,3888,3923,3965,4029,4188,4232,4234,4235,12937,12965,13008,13438,14160,14188,14350,14356,14410,14957,15592,15672,15691,19075,19093,19098,19122,19186,19323,19347,19377,19567,19573],"fullWord":4235},{"subwords":[4048,4232,4234,4236,4237,4238,4241,4423,13438,14403,14410,14427,14957,17672,17697,18018,19377,19386,21212],"fullWord":4236},{"subwords":[27,93,269,315,1256,1546,1604,2537,2738,2788,4242,4243,4244,4248,4268,5627,7242],"fullWord":4244},{"subwords":[27,67,712,1332,1359,1422,2577,2600,2668,2738,2757,2869,2906,4242,4243,4245,4246,4262,12219,12223,12614,12622,15880,15986,16111,16134,16250,17288,18035,18117,19871],"fullWord":4246},{"subwords":[2505,2509,2668,4242,4248,4249,4253,4262,4268,4271,5632,5635,5656,6023,16298,18035,18066,19876],"fullWord":4249},{"subwords":[2486,2610,2656,2662,2668,4224,4242,4248,4251,4252,4253,4262,4268,4271,4312,4317,4320,4326,4330,4350,4351,5654,5655,5656,6023,14995,15014,15018,15021,15048,15749,15755,15757,15764,15777,15782,15840,16247,16298,16423,18035,18056,18066,18071,18150,19840,19844,19876,19880],"fullWord":4252},{"subwords":[2668,4242,4254,4255,4262,16178,16765,16769,18035,18083],"fullWord":4255},{"subwords":[1797,1837,2537,2577,2585,4242,4256,4276,7604,7759,8151,9207,12406,12614],"fullWord":4256},{"subwords":[2567,2576,2668,4242,4257,4262,4293,9077,9078,9422,11616,11759,12163,16178,16260,16765,16769,18035,18083,18103],"fullWord":4257},{"subwords":[1881,1889,2668,2690,2697,2700,3429,4238,4241,4242,4258,4259,4260,4262,4375,4388,4394,9100,9447,16178,16265,16765,16769,16907,16917,17994,18035,18083,18085,18540,18823,18830,18947,19390,19403],"fullWord":4258},{"subwords":[1881,1889,2668,2690,2697,2700,3429,4238,4241,4242,4258,4259,4260,4262,4375,4388,4394,9100,9447,16178,16265,16765,16769,16907,16917,17994,18035,18083,18085,18540,18823,18830,18947,19390,19403],"fullWord":4260},{"subwords":[1777,1851,2058,2517,3617,3638,4242,4261,4263,5096,5445,5449,5523,9369,9449,12700,12757,13048],"fullWord":4261},{"subwords":[3584,3585,4263,4264,4268,4269,4639,4728,5455,5466,5467,5471,5472,5756,10378,10470],"fullWord":4264},{"subwords":[3584,3585,4263,4266,4268,4269,4639,4728,5455,5471,5472,5485,5756,7477,7478,7722,7723,10378,10398,10470,10981,10982],"fullWord":4266},{"subwords":[3413,4268,4270,4276,5856,7493,7502,7604,7759,8151,9079,9207,12410],"fullWord":4270},{"subwords":[93,96,126,134,138,140,1009,3021,3041,3042,3052,3057,3064,3076,4238,4241,4268,4271,4272,4375,4376,4379,4394,5616,5620,5626,5627,5656,6023,6055,6057,15880,16041,16043,16058,16070,16157,16265,16266,16267,16270,16293,16298,16304,16457,18066,18074,18508,18541,18559,19871,19876],"fullWord":4272},{"subwords":[4263,4268,4269,4273,4274,4639,5455,5471,5481,6406,6501],"fullWord":4274},{"subwords":[3128,3584,3585,4263,4268,4269,4280,4281,4639,4728,4744,5455,5471,5472,5492,5756,5780,10378,10470],"fullWord":4281},{"subwords":[3128,3584,4213,4268,4280,4282,4312,4326,4341,5654,5780,10470,10974,11029,15021,15777,15800,19597],"fullWord":4282},{"subwords":[3128,3135,3584,4268,4280,4283,4289,4375,4376,5780,6057,10376,10460,10470,11050,18591,19425,19605],"fullWord":4283},{"subwords":[93,111,399,481,732,2813,2921,2922,3071,3465,3584,4047,4049,4268,4286,4287,4302,5627,5956,10072,10073,10182,10324,10350,10470,13154,13155,13204,13207,13391,13439,13450,13885,13940,14433,14454],"fullWord":4287},{"subwords":[111,481,486,961,2813,2921,2938,3071,3074,3465,3466,3473,3478,4047,4048,4049,4237,4286,4288,4302,4311,4367,10072,10182,10194,13154,13167,13204,13232,13336,13391,14003,14551,15880,15942,16014,16126,16258,17019,17476,18135,19825,19871],"fullWord":4288},{"subwords":[3429,4289,4290,4375,10691,18823,18863,19605],"fullWord":4290},{"subwords":[3584,4213,4268,4292,4312,4326,4341,4361,5654,10470,10471,10974,11029,15021,15337,15777,15800,19597],"fullWord":4292},{"subwords":[1700,2486,2567,2610,4217,4242,4248,4251,4268,4293,4294,4312,4317,4326,5654,5846,11539,14995,15021,15202,15749,15755,15777,15806,19614,19840],"fullWord":4294},{"subwords":[4293,4295,4296,9207,9223,9307,9422,11697,11728,11735,11759,12163,12443,12447,16178,16260,16769,16858,18083,18103,18117],"fullWord":4296},{"subwords":[4293,4295,4297,9207,11697,12127,12443],"fullWord":4297},{"subwords":[4268,4298,4312,4326,5654,5856,12651,15021,15777,15821,15822,19866],"fullWord":4298},{"subwords":[4046,4048,4049,4237,4263,4267,4302,4303,4304,4311,4367,4369,5014,5021,5037,5040,5525,9127,9449,9450,13702,13871,14421,14438,14441,14551,16178,16252,16769,16883,17550,17675,18083,18135,19825],"fullWord":4304},{"subwords":[111,481,2813,2921,3071,3465,3553,3597,3701,3702,3864,3865,3887,3984,4047,4049,4286,4302,4305,10072,10182,10760,10864,10917,12913,13154,13204,13391,14056],"fullWord":4305},{"subwords":[762,961,2921,2938,4048,4049,4237,4302,4306,4307,4311,4367,13154,13167,13268,13281,13336,14506,14507,14510,14515,14551,15880,16014,17476,18135,19825,19871],"fullWord":4307},{"subwords":[4049,4263,4268,4269,4302,4308,4639,5455,5471,5525,5526,13478,13569,14237,14433,14438,14506,19814],"fullWord":4308},{"subwords":[4049,4268,4302,4309,4312,4326,5654,13569,13577,13602,14262,14278,14433,14506,14518,15021,15248,15777,19815],"fullWord":4309},{"subwords":[3419,4046,4049,4106,4302,4310,4312,15508,19862],"fullWord":4310},{"subwords":[796,2941,3100,4106,4232,4312,4313,14735,14939,15864,21216],"fullWord":4313},{"subwords":[93,121,796,817,2941,2954,2958,4268,4312,4314,4326,4328,5588,5627,5654,5976,6008,14717,14720,14872,14983,15021,15056,15777,15780,19847],"fullWord":4314},{"subwords":[349,796,1084,2941,3402,4312,4315,4333,9376,19862],"fullWord":4315},{"subwords":[93,121,126,138,139,796,817,911,1009,1096,2941,2954,2962,3003,3004,3052,3055,3161,4085,4214,4268,4312,4316,4326,4357,4375,4376,4378,5588,5620,5627,5654,5976,5982,6019,6055,6057,14717,14898,14901,14959,15021,15049,15059,15312,15748,15777,15858,18449,18453,18508,18541,18554,19197,19350,19356,19847],"fullWord":4316},{"subwords":[1560,2384,2486,2517,2610,4207,4209,4242,4248,4250,4251,4263,4268,4269,4312,4317,4318,4321,4326,4327,4618,4639,4810,5417,5445,5455,5471,5654,14995,15021,15028,15060,15749,15755,15773,15777,15778,19840],"fullWord":4318},{"subwords":[2486,2610,2648,4242,4248,4251,4268,4312,4317,4319,4326,4328,5654,6008,14995,15021,15056,15749,15755,15777,15780,19840],"fullWord":4319},{"subwords":[4207,4209,4263,4268,4269,4312,4321,4322,4326,4327,4639,4810,5455,5466,5467,5471,5654,15021,15028,15060,15773,15777,15778,19578],"fullWord":4322},{"subwords":[3584,3585,4207,4209,4213,4263,4268,4269,4312,4321,4323,4326,4327,4341,4342,4639,4728,4810,5455,5471,5472,5654,5756,10378,10470,10974,11029,11030,15021,15028,15060,15773,15777,15778,15800,15801,19597],"fullWord":4323},{"subwords":[4224,4268,4271,4312,4326,4328,4329,4330,4350,4351,4353,5654,5655,5656,6008,6016,6023,15021,15048,15056,15057,15777,15780,15781,15782,15840,16298,18056,18066,18071,18150,18152,19876,19880],"fullWord":4329},{"subwords":[3161,4142,4214,4215,4224,4226,4238,4241,4268,4271,4312,4326,4330,4331,4350,4351,4356,4357,4375,4376,4378,4379,4394,5654,5655,5656,6018,6019,6020,6023,6057,15021,15048,15059,15306,15312,15748,15777,15782,15840,15852,15858,15861,16265,16267,16298,16304,16457,18056,18066,18071,18074,18150,19350,19352,19356,19359,19876,19880],"fullWord":4331},{"subwords":[4147,4268,4312,4326,4332,5654,6507,7194,15021,15114,15777],"fullWord":4332},{"subwords":[93,121,349,796,817,1084,2941,2954,3156,3402,4268,4312,4326,4333,4334,4336,5588,5627,5654,5976,5993,9079,9376,9384,14717,15021,15411,15777,19847,19850,19862],"fullWord":4334},{"subwords":[111,337,349,796,1084,2813,2941,2971,3071,3402,3452,4312,4333,4335,4341,9376,10072,10121,10502,10675,10966,14780,15399,19836,19837,19862],"fullWord":4335},{"subwords":[4158,4216,4224,4268,4271,4312,4326,4330,4336,4337,4350,4351,5654,5655,5656,6023,9079,9085,9384,9389,9409,15021,15048,15411,15415,15526,15777,15782,15840,16178,16298,16769,16796,16889,16890,17722,18056,18066,18071,18083,18150,19850,19862,19876,19880],"fullWord":4337},{"subwords":[4276,4312,4338,7604,7759,8015,8151,9207,9221,15461,15494,15790,15795,15798,15821,15824,15826,19748,19862,19866],"fullWord":4338},{"subwords":[3693,3694,4312,4339,4340,4350,9369,9409,12965,12971,13007,13048,13051,13052,15592,15599,16178,16210,16769,16889,17316,17451,17722,18083,19862],"fullWord":4340},{"subwords":[3584,3585,4207,4209,4213,4263,4268,4269,4312,4321,4323,4326,4327,4341,4342,4639,4728,4810,5455,5471,5472,5654,5756,10378,10470,10974,11029,11030,15021,15028,15060,15773,15777,15778,15800,15801,19597],"fullWord":4342},{"subwords":[3584,4213,4268,4312,4326,4328,4341,4343,5654,6008,10470,10974,11029,11031,15021,15056,15777,15780,15800,15802,19597],"fullWord":4343},{"subwords":[3509,3584,4147,4213,4268,4312,4326,4341,4344,5654,10470,10974,11029,15021,15777,15800,19597],"fullWord":4344},{"subwords":[796,2869,2941,4312,4347,12270,14821,15821,19866],"fullWord":4347},{"subwords":[4207,4209,4210,4263,4268,4269,4312,4321,4326,4327,4328,4348,4639,4810,5455,5471,5654,6008,15021,15028,15056,15060,15773,15775,15777,15778,15780],"fullWord":4348},{"subwords":[4156,4268,4312,4326,4328,4336,4349,5654,6008,9079,9384,15021,15056,15411,15413,15777,15780,19850,19862],"fullWord":4349},{"subwords":[4207,4209,4211,4212,4224,4263,4267,4268,4269,4271,4312,4321,4324,4326,4327,4330,4350,4351,4352,4639,4810,4826,4849,5455,5456,5471,5478,5654,5655,5656,6023,15021,15028,15048,15060,15087,15773,15777,15778,15782,15840,16252,16298,18056,18066,18067,18071,18150,19846,19876,19877,19880],"fullWord":4352},{"subwords":[4224,4268,4271,4312,4326,4328,4329,4330,4350,4351,4353,5654,5655,5656,6008,6016,6023,15021,15048,15056,15057,15777,15780,15781,15782,15840,16298,18056,18066,18071,18150,18152,19876,19880],"fullWord":4353},{"subwords":[3165,4141,4224,4268,4271,4312,4326,4330,4350,4351,4354,4370,4372,5654,5655,5656,6023,6039,15021,15048,15777,15782,15840,15841,15849,16298,16303,18056,18057,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886],"fullWord":4354},{"subwords":[4312,4350,4355,12965,12971,13007,13051,13052,15592,15599,16210,17316,17451],"fullWord":4355},{"subwords":[3161,4214,4268,4312,4326,4328,4357,4358,4375,4376,4378,5654,6008,6019,6057,15021,15056,15059,15312,15748,15777,15780,15858,18652,19350,19356,19358],"fullWord":4358},{"subwords":[4232,4240,4289,4312,4341,4346,4357,4359,4375,10976,15858,19365,19377,19605,21226],"fullWord":4359},{"subwords":[4226,4228,4232,4238,4241,4312,4350,4356,4357,4360,4375,4394,4423,15852,15857,15858,15861,16265,18018,19377,21212,21226,21227],"fullWord":4360},{"subwords":[4207,4209,4263,4268,4269,4312,4321,4326,4327,4361,4362,4639,4810,5455,5471,5654,15021,15028,15060,15337,15773,15777,15778],"fullWord":4362},{"subwords":[4224,4268,4271,4312,4326,4330,4350,4351,4361,4363,5654,5655,5656,6023,15021,15048,15337,15354,15777,15782,15840,16298,18056,18066,18071,18150,19876,19880,20070],"fullWord":4363},{"subwords":[3161,4214,4268,4312,4326,4357,4361,4364,4375,4376,4378,5654,6019,6057,15021,15059,15312,15337,15748,15777,15858,19350,19356,20080,20095],"fullWord":4364},{"subwords":[4232,4268,4312,4326,4361,4365,4366,5654,15021,15337,15777,15866,20085],"fullWord":4365},{"subwords":[4048,4049,4237,4263,4267,4268,4269,4271,4302,4311,4367,4368,4639,4826,4849,5455,5456,5471,5478,5525,5526,5531,5656,6023,6033,13478,13488,14416,14433,14434,14438,14441,14551,16252,16298,17525,17530,17675,17676,18066,18067,18135,18136,19825,19876,19877],"fullWord":4368},{"subwords":[4046,4048,4049,4237,4263,4267,4302,4303,4304,4311,4367,4369,5014,5021,5037,5040,5525,9127,9449,9450,13702,13871,14421,14438,14441,14551,16178,16252,16769,16883,17550,17675,18083,18135,19825],"fullWord":4369},{"subwords":[3165,4263,4267,4268,4269,4271,4370,4371,4639,4826,4849,5455,5456,5471,5478,5656,6023,6039,16252,16253,16298,16303,18062,18066,18067,18073,19876,19877,19882],"fullWord":4371},{"subwords":[3165,4141,4224,4268,4271,4312,4326,4330,4350,4351,4354,4370,4372,5654,5655,5656,6023,6039,15021,15048,15777,15782,15840,15841,15849,16298,16303,18056,18057,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886],"fullWord":4372},{"subwords":[3165,4268,4271,4370,4373,5656,6023,6039,16298,16303,18066,18073,19876,19882],"fullWord":4373},{"subwords":[3732,3958,3965,3971,4238,4241,4293,4374,4375,4394,12007,12010,12030,12177,12872,13055,13059,13082,16205,16212,16260,16265,17203,17316,17435,18103,18112,19026,19034],"fullWord":4374},{"subwords":[3135,3584,4268,4289,4375,4376,4377,4382,6057,10376,10460,10470,10495,10976,11050,11065,19605,21135,21222],"fullWord":4377},{"subwords":[4238,4241,4268,4271,4375,4376,4379,4380,4394,5656,6023,6057,16265,16267,16298,16304,16457,17846,18066,18074,18662,19493,19498,19876],"fullWord":4380},{"subwords":[4238,4241,4268,4271,4375,4376,4379,4381,4382,4383,4394,4423,5656,6023,6057,16265,16267,16298,16304,16457,18018,18019,18066,18074,18076,18077,19876,21130,21135],"fullWord":4381},{"subwords":[4238,4241,4268,4271,4375,4376,4379,4381,4382,4383,4394,4423,5656,6023,6057,16265,16267,16298,16304,16457,18018,18019,18066,18074,18076,18077,19876,21130,21135],"fullWord":4383},{"subwords":[3429,3430,3434,4238,4241,4268,4271,4375,4376,4379,4384,4385,4388,4394,5656,6023,6057,9079,9085,9100,9447,16178,16265,16267,16298,16304,16457,16769,16907,16911,16917,18066,18074,18083,18085,18086,18823,18830,18844,18850,18947,19876],"fullWord":4385},{"subwords":[3429,4238,4241,4300,4301,4375,4386,4387,4388,4394,9100,9207,9223,9307,9318,9325,9447,12463,12471,12659,12663,16178,16265,16769,16858,16907,16917,17255,18005,18083,18085,18117,18823,18830,18894,18919,18947,19434,19444,19445,19447,19452,19701,19706],"fullWord":4387},{"subwords":[111,126,134,488,2813,3041,3052,3064,3071,3074,3478,4238,4241,4289,4291,4375,4389,4394,10072,10241,11044,15880,15942,15960,16041,16066,16157,16265,16266,17022,17147,18365,18368,18388,18508,19427,19605,19871],"fullWord":4389},{"subwords":[3135,3161,3584,4213,4214,4240,4268,4289,4312,4326,4341,4357,4375,4376,4378,4390,5654,6019,6057,10376,10460,10470,10974,11029,11050,15021,15059,15312,15748,15777,15800,15858,19350,19356,19597,19605],"fullWord":4390},{"subwords":[3135,3584,4268,4289,4375,4376,4391,4396,6057,10376,10460,10470,11050,19493,19605],"fullWord":4391},{"subwords":[3965,4273,4375,4392,12771,12774,12785,13059,18986,18991,19414,19580],"fullWord":4392},{"subwords":[3965,4375,4393,13059,19131,19160,19493,19499],"fullWord":4393},{"subwords":[3161,4214,4268,4312,4326,4357,4375,4376,4378,4395,5654,6019,6057,15021,15059,15312,15748,15777,15858,19350,19356,19493,19900],"fullWord":4395},{"subwords":[3135,3584,4268,4289,4375,4376,4391,4396,6057,10376,10460,10470,11050,19493,19605],"fullWord":4396},{"subwords":[4048,4049,4237,4238,4241,4302,4311,4367,4375,4394,4397,4398,13438,14427,14551,14561,14567,16265,18135,18148,19386,19453,19456,19825],"fullWord":4398},{"subwords":[716,2869,3100,3402,4400,4401,4418,9101,9207,9208,12311,21144],"fullWord":4401},{"subwords":[657,716,2869,2899,3100,3402,4400,4402,9101,9207,9208,9297,12252,12255,12311,21144],"fullWord":4402},{"subwords":[2079,2093,2300,2446,3617,3665,4029,4232,4404,7771,7781,7870,7895,8199,12959,12965,12991,15576,15592],"fullWord":4404},{"subwords":[200,2766,2782,3100,3102,4405,4406,4578,4582,15880,15893,16103,16114,21096],"fullWord":4406},{"subwords":[4407,4408,4639,4728,5567,5640,5756,10378,10495,11065],"fullWord":4408},{"subwords":[4106,4232,4407,4409,5640,10495,11065,11074,15021,15201,15866],"fullWord":4409},{"subwords":[4407,4410,5640,6023,10495,10496,11065,11066,16298,17149,21130],"fullWord":4410},{"subwords":[3577,3579,3701,3964,4029,4411,4412,10760,17149,17316,17354,17472],"fullWord":4412},{"subwords":[3145,4239,4413,5856,6057,7493,7512,7540,12374,18607,21120,21135],"fullWord":4413},{"subwords":[27,49,385,594,1324,1326,1502,2738,2813,2835,2848,3100,3453,3487,4414,10061,10072,10089,10136,10139,10304,11086,11173,11408,21051,21153],"fullWord":4414},{"subwords":[3732,3744,3750,3942,3964,4029,4415,4416,4417,5845,6023,11997,12080,12872,13147,16298,17316,17382,17472,21130],"fullWord":4417},{"subwords":[4418,4419,9101,9207,9307,16178,16769,16858,18283,21144,21145],"fullWord":4419},{"subwords":[4140,4232,4420,8549,8552,8607,9051,9053,13577,13578,14262,14290,14410,14576,15021,15248,15866,21127],"fullWord":4420},{"subwords":[4048,4140,4232,4237,4421,6023,6033,6038,13577,14262,14281,14290,14293,14403,14410,14576,14577,15021,15048,15248,15272,15305,15866,15867,16298,17525,17672,17697,21127,21130,21212],"fullWord":4421},{"subwords":[4048,4049,4232,4237,4302,4311,4312,4350,4367,4422,14403,14410,14549,14551,17670,17672,17687,17697,18135,18298,19825,21212,21224],"fullWord":4422},{"subwords":[3429,3440,4238,4241,4423,4424,9101,9447,16178,16769,16907,18018,18823,18830,18947],"fullWord":4424},{"subwords":[17,30,148,1219,1243,1246,1515,1560,4427,4428,4438,4590,4618,5632,5659],"fullWord":4428},{"subwords":[17,30,43,385,399,1219,1220,1243,1246,1296,1301,1302,1510,1515,1560,1636,1895,1900,1938,4427,4429,4466,4587,4601,4618,4728,5632,5756,10061,10090,10093,10324,10327,10378],"fullWord":4429},{"subwords":[0,2,200,317,325,932,2766,2782,3017,3025,3172,3173,4433,4434,4543,8217,8362,15880,15893,16114,16503],"fullWord":4434},{"subwords":[106,126,169,183,326,2766,3052,3402,3403,3429,3605,3609,3638,3639,3965,4435,4923,4925,4926,5096,5234,9367,12686,12730,12757,13038,18333,18339,18347,18432,18823,18970],"fullWord":4435},{"subwords":[118,183,195,605,796,809,2766,2869,2882,2941,2949,3638,3639,3777,3893,3913,4436,4492,4532,5096,5172,5173,12270,12271,12274,12493,12548,12680,12965,12966,14736,14749,14821,14826,15561,15568,15592,15600],"fullWord":4436},{"subwords":[126,488,2766,2813,3052,3100,3447,3487,4437,4578,10072,10089,10090,10108,10304,18339,18365],"fullWord":4437},{"subwords":[148,149,183,4438,4441,4442,4590,5114,5659,12745,12752],"fullWord":4442},{"subwords":[148,158,183,197,200,4438,4441,4443,4444,4445,4590,4594,4826,5114,5117,5221,5223,5224,5659,12745,12751,12752,12755,15893,16270,17323,17324],"fullWord":4443},{"subwords":[176,183,215,528,529,605,675,4446,4472,4475,4479,4492,4500,4605,4763,4767,4774,5114,5163,5165,5172,5173,5176,5658,5865,5953,11107,11115,11213,11218,11219,11265,11437,11438,11446,11512,11516,11810,11811,11831,11833,11891,11893,11896,12229,12244,12245,12246,12493,12499,12522,12523,12525,12752,12866,12876],"fullWord":4446},{"subwords":[254,255,817,828,911,1009,4447,4448,4516,4537,4551,4553,4595,4607,4683,4701,4810,4812,5307,5327,5588,5620,5705,5976,5982,6055,6230,6231,6232,6308,6317,6318,6332,6333,6344,6347,6348,6392,6399,6406,6485,7042,7056,7073,14736,14754,14755,14898,14901,14902,14961,15060,15114,15135,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19205,19233,19243],"fullWord":4448},{"subwords":[254,488,4447,4449,4578,6230,6344,6353,6386,6717,6730,6854,10090,10108,10304,18339],"fullWord":4449},{"subwords":[269,270,817,4450,4516,4607,4810,5310,5351,5588,5666,5707,5709,5976,5988,7253,7267,7269,7270,7271,7375,7383,7461,7907,7908,14736,14758,14762,14763,14765,14961,15060,15141],"fullWord":4450},{"subwords":[51,183,299,1210,1243,1256,2029,2058,2079,4427,4451,4452,5123,7242,7253,7761,7771,7782],"fullWord":4452},{"subwords":[183,197,200,269,270,280,299,4451,4453,4454,4707,4826,5114,5117,5123,5125,5127,5139,5221,5222,5223,5707,5708,5718,5721,7253,7258,7396,7460,7761,7763,7782,7785,7790,12752,12755,13015,15893,15910,15912,15921,16270,16273,17323,17324],"fullWord":4453},{"subwords":[0,317,326,337,372,4455,4891,8217,8241,8617,10090,10119,10530],"fullWord":4455},{"subwords":[177,183,326,341,540,552,605,643,4457,4472,4479,4492,4896,4971,4985,5163,5164,5172,5173,9360,11107,11145,11156,11213,11265,11626,11697,11702,11810,11831,11841,11854,11891,11893,12244,12443,12493,12522,12523,12758],"fullWord":4457},{"subwords":[183,326,341,540,4458,4472,4578,4896,4971,5163,11107,11145,11265,11408,11420,11626,11831,11841,11854,21051,21140,21154],"fullWord":4458},{"subwords":[169,326,605,693,700,716,4459,4492,4578,4985,5008,9325,12311,12463,18339,18347,18408,18843,18894,18925,21140,21144],"fullWord":4459},{"subwords":[200,326,327,331,336,948,949,973,4461,4462,4714,4826,4901,4935,4939,5037,6039,9103,9106,9111,9127,15893,15928,15929,16270,16291,16780,16782,16903],"fullWord":4462},{"subwords":[169,183,326,4464,5234,9367,9885,9946,12675,12686,18339,18347,18432,18970],"fullWord":4464},{"subwords":[183,4465,4548,5234,12675,12686,18339,18432,18970],"fullWord":4465},{"subwords":[399,488,1009,4466,4468,4551,4601,4604,4615,4728,4747,5620,5756,6055,8217,8258,8259,8280,8281,8378,8381,8382,8440,8445,8461,8509,10090,10093,10247,10248,10257,10258,10259,10324,10327,10378,10460,18339,18370,18541,18547,18697],"fullWord":4468},{"subwords":[200,382,442,461,4469,10090,10107,15893,15942,15944],"fullWord":4469},{"subwords":[200,399,407,442,461,4466,4467,4470,4601,4603,4728,4744,4745,4826,5756,5760,5780,5781,10090,10093,10099,10102,10105,10107,10227,10324,10327,10331,10343,10360,10378,15893,15942,15948,16270,16274,16368,17044],"fullWord":4470},{"subwords":[141,144,269,270,504,4472,4473,4475,5658,5707,7253,7317,7323,7324,7489,11107,11115,11127,11128,11437,11438,11487],"fullWord":4473},{"subwords":[144,145,200,504,950,4472,4474,4489,11107,11123,11330,11341,15893,15973],"fullWord":4474},{"subwords":[148,4438,4472,4475,4477,4590,5658,5659,11107,11115,11437,11438],"fullWord":4477},{"subwords":[817,869,871,4472,4475,4478,4516,4607,4810,4818,4819,5318,5342,5588,5658,5976,11107,11115,11120,11276,11286,11437,11438,11539,14736,14808,14814,14961,14975,15060,15202],"fullWord":4478},{"subwords":[148,176,528,529,605,4438,4472,4475,4479,4480,4492,4500,4590,4605,4757,4774,5658,5659,5865,11107,11113,11115,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":4480},{"subwords":[176,528,529,605,608,817,869,871,4472,4475,4479,4481,4492,4500,4516,4532,4605,4607,4774,4810,4818,4819,5318,5342,5588,5595,5658,5865,5976,11107,11115,11120,11213,11218,11219,11276,11286,11437,11438,11446,11512,11516,11539,12229,12244,12245,12246,12248,12274,12319,12358,14736,14808,14821,14826,14961,14975,15060,15202,15207,15208,15227],"fullWord":4481},{"subwords":[169,177,179,326,341,540,605,693,700,4472,4479,4482,4492,4896,4971,4985,5008,9325,11107,11145,11156,11213,11255,11361,11371,11626,11697,11702,11729,12244,12443,12463,18339,18347,18389,18408,18882,18894],"fullWord":4482},{"subwords":[148,574,732,733,4438,4472,4475,4484,4485,4590,5658,5659,5956,11107,11115,11270,11437,11438,13171,13439,13478],"fullWord":4485},{"subwords":[176,528,529,574,605,732,733,4472,4475,4479,4484,4486,4492,4500,4605,4774,5658,5865,5956,11107,11115,11213,11218,11219,11270,11437,11438,11446,11512,11516,12229,12244,12245,12246,12257,12259,12317,13171,13239,13245,13246,13439,13453,13478,13539,13544],"fullWord":4486},{"subwords":[574,732,733,735,817,869,871,4472,4475,4484,4487,4516,4607,4810,4818,4819,5318,5323,5342,5588,5658,5956,5976,11107,11115,11120,11270,11276,11286,11437,11438,11539,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,13593,14240,14262,14736,14808,14816,14817,14851,14852,14853,14961,14975,14979,15060,15202,15209,15248,15747],"fullWord":4487},{"subwords":[481,574,578,594,4472,4484,4488,4578,10090,10108,10136,10158,10182,10304,10957,11107,11116,11173,11270,11408,13171,13204,13224,13228,13424,13932,14009,21051,21064],"fullWord":4488},{"subwords":[200,399,407,470,4466,4467,4472,4475,4476,4489,4490,4601,4603,4728,4826,5658,5756,5760,5782,5784,5845,10090,10093,10099,10107,10136,10145,10146,10147,10151,10161,10227,10324,10327,10331,10360,10378,11107,11115,11123,11173,11180,11181,11330,11437,11438,11440,11442,11444,11453,11464,11465,11492,11495,11560,15893,15942,15948,15949,15973,15978,16270,16274,16278,17012,17044],"fullWord":4490},{"subwords":[183,197,200,605,610,4472,4479,4483,4489,4491,4492,5163,5171,5172,5173,5188,5221,11107,11123,11213,11245,11247,11265,11330,11345,11810,11812,11813,11831,11845,11891,11893,11894,11915,12244,12493,12501,12522,12523,12524,12527,12560,12872,15893,15973,15986,15988,17323,17324,17378,17383],"fullWord":4491},{"subwords":[93,94,114,115,148,605,2766,2869,2883,2884,4431,4438,4492,4494,4495,4500,4590,4605,4639,4774,5659,5856,5865,12229],"fullWord":4495},{"subwords":[93,94,114,115,121,122,605,608,796,800,817,2766,2780,2869,2883,2884,2885,2941,2949,2954,2955,2977,3111,4069,4070,4431,4492,4494,4496,4500,4516,4532,4605,4607,4639,4774,4810,5588,5595,5856,5865,5976,12224,12225,12229,12270,12274,12319,12358,14717,14718,14736,14821,14826,14961,15021,15028,15060,15227],"fullWord":4496},{"subwords":[93,94,96,114,115,116,200,605,607,610,926,2766,2771,2782,2869,2883,2884,2887,2906,3021,3022,4431,4432,4492,4494,4497,4500,4501,4605,4606,4639,4774,4785,4826,5856,5865,5875,5918,6023,12229,15880,15893,15986,15988,15995,15996,16114,16134,16270,16298,16308,16381],"fullWord":4497},{"subwords":[148,151,605,608,817,4438,4492,4498,4500,4516,4517,4532,4533,4590,4605,4607,4774,4810,5340,5588,5595,5659,5865,5976,12229,12274,12319,12358,14736,14821,14826,14961,14962,15060,15227],"fullWord":4498},{"subwords":[148,155,399,605,4438,4466,4492,4499,4500,4590,4601,4605,4728,4774,5659,5745,5746,5756,5865,10090,10093,10094,10095,10169,10171,10174,10324,10327,10344,10378,10427,12229],"fullWord":4499},{"subwords":[148,269,270,605,4438,4492,4500,4502,4503,4590,4605,4774,5659,5707,5865,7253,7493,12229,12230],"fullWord":4503},{"subwords":[269,270,605,608,622,817,4492,4500,4502,4504,4516,4532,4605,4607,4774,4810,5310,5351,5588,5595,5666,5707,5865,5894,5976,5988,7253,7346,7375,7383,7384,7461,7493,7907,7908,7928,7929,12229,12230,12274,12319,12358,14736,14758,14762,14763,14821,14826,14832,14833,14834,14961,15060,15141,15227],"fullWord":4504},{"subwords":[269,270,399,605,620,625,626,4466,4492,4500,4502,4505,4601,4605,4728,4774,5707,5745,5746,5756,5865,7253,7293,7298,7477,7478,7493,7494,7649,7650,7658,7674,7680,10090,10093,10095,10109,10169,10174,10324,10327,10344,10378,10398,10427,12229,12230],"fullWord":4505},{"subwords":[326,327,337,338,399,423,430,431,605,637,4466,4492,4500,4507,4601,4605,4714,4728,4739,4774,4776,4891,4898,4935,4985,4988,5745,5746,5756,5865,9103,9104,9117,10090,10093,10095,10119,10120,10169,10174,10324,10327,10344,10378,10414,10427,10530,10536,10537,10544,10622,10625,10628,12229,12238,12239,12438,12439],"fullWord":4507},{"subwords":[200,325,326,336,605,610,647,691,932,4461,4492,4508,4543,4901,4985,5007,5037,5046,8217,8298,8302,8362,8366,8617,8649,8652,8678,8679,9127,9307,15893,15928,15986,15988,16503,16629,16858,16874],"fullWord":4508},{"subwords":[605,608,817,867,4492,4500,4509,4510,4516,4522,4524,4532,4605,4607,4774,4810,5316,5322,5355,5588,5595,5865,5976,9785,9836,9855,9968,12229,12243,12274,12277,12278,12319,12358,14736,14798,14799,14821,14826,14840,14841,14961,15060,15227],"fullWord":4510},{"subwords":[438,605,716,4492,4509,4511,4578,10090,10108,10135,10169,10177,10180,10304,12311,21047,21059],"fullWord":4511},{"subwords":[30,605,1053,1243,1246,1332,1336,1342,1343,1490,1515,1530,1546,1560,1671,1673,2517,2577,2582,4427,4492,4500,4513,4562,4605,4618,4774,5445,5471,5507,5511,5627,5865,12219,12229,12331,12614,12624],"fullWord":4513},{"subwords":[732,733,735,762,817,4514,4516,4607,4810,5323,5588,5956,5976,13171,13174,13268,13276,13286,13292,13294,13295,13439,13455,13478,13569,13577,14237,14262,14278,14736,14851,14852,14853,14863,14961,14979,15060,15248],"fullWord":4514},{"subwords":[399,481,732,733,762,770,4466,4515,4601,4728,5756,5956,10090,10093,10182,10189,10190,10324,10327,10350,10378,13171,13204,13207,13208,13268,13439,13450,13478,13479,13569,13940,13941,13950,14237],"fullWord":4515},{"subwords":[200,817,825,905,906,4516,4518,4519,4520,4607,4611,4810,4826,5346,5588,5599,5976,5977,6008,6016,14736,14751,14872,14881,14882,14883,14961,14965,14983,14988,15060,15087,15893,16270,16286,16419],"fullWord":4519},{"subwords":[287,326,349,605,854,4492,4502,4521,4532,4890,4947,4985,4986,4993,5310,5314,7253,7283,7375,7604,7617,7907,7918,7928,7997,8015,8016,9376,9378,12227,12230,12274,14736,14758,14776,14784,14821,14826,14832,14838,15428,15461,15491,15494],"fullWord":4521},{"subwords":[148,151,817,867,4438,4516,4517,4522,4523,4590,4607,4810,5316,5340,5355,5588,5659,5976,14736,14798,14799,14961,14962,15060],"fullWord":4523},{"subwords":[605,608,817,867,4492,4500,4509,4510,4516,4522,4524,4532,4605,4607,4774,4810,5316,5322,5355,5588,5595,5865,5976,9785,9836,9855,9968,12229,12243,12274,12277,12278,12319,12358,14736,14798,14799,14821,14826,14840,14841,14961,15060,15227],"fullWord":4524},{"subwords":[817,867,4516,4518,4522,4525,4607,4810,5316,5346,5355,5588,5976,6008,14736,14798,14799,14800,14872,14961,14983,15060],"fullWord":4525},{"subwords":[227,817,867,1196,4516,4522,4526,4531,4578,4607,4613,4810,4814,5316,5337,5355,5430,5567,5570,5575,5588,5976,9865,14736,14798,14799,14939,14940,14961,14966,15060,15864,15866,21047,21068,21071,21097,21099],"fullWord":4526},{"subwords":[326,327,329,349,351,817,854,867,4516,4522,4527,4599,4607,4714,4810,4935,4957,4959,5023,5030,5316,5355,5588,5976,9103,9376,9384,9385,9396,9397,9885,14736,14776,14798,14799,14961,15060,15428,15433],"fullWord":4527},{"subwords":[396,399,817,867,4466,4516,4522,4528,4601,4607,4728,4810,5316,5355,5588,5592,5756,5778,5976,9760,10090,10093,10097,10128,10129,10130,10202,10214,10215,10324,10327,10338,10355,10378,10416,14736,14798,14799,14961,14968,15060],"fullWord":4528},{"subwords":[438,867,4522,4529,4531,4578,5337,5430,10090,10108,10135,10202,10206,10214,10218,10304,14736,14939,15864,21047,21068],"fullWord":4529},{"subwords":[148,151,605,608,817,4438,4492,4498,4500,4516,4517,4532,4533,4590,4605,4607,4774,4810,5340,5588,5595,5659,5865,5976,12229,12274,12319,12358,14736,14821,14826,14961,14962,15060,15227],"fullWord":4533},{"subwords":[396,399,605,608,817,4466,4492,4500,4516,4532,4534,4601,4605,4607,4728,4774,4810,5588,5592,5595,5745,5746,5756,5865,5976,10090,10093,10095,10097,10169,10172,10174,10202,10324,10327,10344,10355,10356,10378,10427,12229,12274,12319,12358,14736,14821,14826,14961,14968,15060,15225,15227],"fullWord":4534},{"subwords":[605,608,817,4492,4500,4516,4518,4532,4535,4605,4607,4774,4810,5346,5588,5595,5865,5976,6008,6009,12229,12274,12319,12358,14736,14821,14826,14872,14961,14983,15060,15227,15275],"fullWord":4535},{"subwords":[148,151,817,911,1009,4438,4516,4517,4537,4538,4551,4552,4553,4590,4607,4810,4812,5327,5340,5588,5620,5659,5976,5982,6055,14736,14898,14901,14902,14961,14962,15060,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19205,19206,19233],"fullWord":4538},{"subwords":[817,911,1009,4516,4518,4537,4539,4551,4553,4607,4810,4812,5327,5346,5588,5620,5976,5982,6008,6055,14736,14872,14898,14901,14902,14903,14961,14983,15060,15312,15316,15318,15748,18339,18449,18450,18453,18454,18470,18541,18554,18652,18653,19205,19207,19233],"fullWord":4539},{"subwords":[183,195,204,605,4492,4532,4541,5172,5173,12274,12493,12548,12598,12680,13087,14736,14749,14821,14826,15561,15568,15600,19948,20262],"fullWord":4541},{"subwords":[326,349,605,854,1158,4492,4532,4542,4574,4576,4985,4986,5314,5330,5335,9355,9376,9378,12227,12274,14736,14776,14784,14821,14826,14838,14933,15428,15491,20303,20314,20349,20393,20394,20410,20412,20432,20774,20779],"fullWord":4542},{"subwords":[148,158,200,325,932,934,4438,4445,4543,4544,4590,4594,4614,4826,5659,8217,8219,8362,8440,8443,15893,16270,16503,16504,16505,16574,16581],"fullWord":4544},{"subwords":[200,325,817,825,905,906,932,934,4516,4520,4543,4545,4607,4611,4614,4810,4826,5588,5599,5976,5977,8217,8219,8327,8331,8333,8334,8338,8362,8440,8443,8453,8454,8456,8552,8558,8561,8584,8934,14736,14751,14775,14881,14882,14886,14961,14965,15060,15087,15376,15377,15893,16270,16286,16419,16503,16504,16506,16547,16549,16550,16574,16577,16581,16604,16722],"fullWord":4545},{"subwords":[200,325,932,934,936,973,4543,4546,4614,4826,6039,8217,8219,8362,8440,8443,15893,16033,16035,16270,16291,16503,16504,16507,16509,16574,16581,16582,16609],"fullWord":4546},{"subwords":[211,911,919,4537,4548,4549,4578,5327,5337,5430,14736,14898,14899,14939,15864,18339,18449,18452,19231,19377,21068],"fullWord":4549},{"subwords":[0,126,317,2766,3052,3172,3229,4433,4548,4550,8217,8378,18323,18339],"fullWord":4550},{"subwords":[200,817,825,905,906,911,918,993,1009,4516,4520,4537,4540,4551,4553,4554,4555,4607,4611,4810,4812,4813,4826,5327,5328,5360,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14736,14751,14881,14882,14898,14901,14902,14905,14912,14961,14965,15060,15087,15306,15312,15318,15748,15893,16041,16043,16044,16270,16286,16293,16419,16457,17773,17775,17776,17806,18339,18340,18449,18450,18453,18454,18455,18472,18541,18554,18557,18559,18575,19205,19208,19233,19234,19381],"fullWord":4554},{"subwords":[169,287,326,605,693,700,4492,4502,4556,4890,4947,4985,4993,5008,7253,7283,7289,7416,7561,7604,7637,7745,9325,12230,12463,18339,18342,18347,18408,18410,18894,18901],"fullWord":4556},{"subwords":[169,204,210,326,327,1009,1106,1120,4551,4557,4569,4572,4714,4851,4935,4942,5067,5071,5620,5680,6055,9103,18339,18347,18541,18835,18844,18845,19910,19975,19990,20095,20107,20126,20129,20130,20210,20211],"fullWord":4557},{"subwords":[200,605,610,693,711,712,1053,1074,1076,4492,4558,4567,4568,5507,5522,5548,12300,12659,12663,15893,15986,15988,16041,17765,17999,18005,18058,18117,18339,18340,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":4558},{"subwords":[200,586,1053,4472,4489,4559,4560,5548,11107,11123,11330,11356,11361,11376,11392,12091,12097,12177,15893,15973,16041,17203,17999,18103,18339,18340,18389,18407,18508,19871],"fullWord":4560},{"subwords":[911,1053,1078,4537,4548,4561,5327,14736,14898,14899,15858,18339,18449,18508,19465],"fullWord":4561},{"subwords":[30,148,1053,1243,1246,1490,1515,1546,1560,2517,4427,4438,4562,4563,4590,4618,5440,5445,5466,5467,5471,5627,5659],"fullWord":4563},{"subwords":[30,817,1053,1243,1246,1366,1372,1377,1378,1490,1515,1535,1536,1546,1560,2308,2315,2317,2376,2384,2517,2610,4427,4516,4562,4564,4607,4618,4619,4810,5303,5417,5445,5471,5588,5627,5976,14736,14961,14995,15060,15749,15755,15773,15777,15778,19840,19847],"fullWord":4564},{"subwords":[30,67,73,74,200,1053,1243,1246,1254,1422,1425,1426,1490,1491,1515,1518,1546,1547,1560,1574,2517,2527,2668,2671,4427,4430,4562,4565,4566,4618,4629,4826,4849,5445,5451,5471,5478,5627,15893,16270,18035,18066,18067,19871,19876,19877],"fullWord":4565},{"subwords":[200,605,610,693,711,712,1053,1074,1076,4492,4558,4567,4568,5507,5522,5548,12300,12659,12663,15893,15986,15988,16041,17765,17999,18005,18058,18117,18339,18340,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":4568},{"subwords":[200,204,209,326,327,331,336,948,1106,1114,1120,1124,4461,4569,4570,4571,4714,4826,4851,4852,4901,4935,4939,5037,5067,5070,5071,5076,9103,9106,9111,9127,15893,15928,16076,16077,16270,16780,19910,19911,19967,19990,20107,20115,20126,20129,20130,20134,20191,20192,20197,20198],"fullWord":4570},{"subwords":[169,170,200,204,210,326,336,1120,1124,4461,4571,4572,4573,4901,5037,5067,5070,9127,9447,15893,15928,16041,16907,17741,18339,18340,18347,18947,19911,19970,19975,19978,20107,20115,20191,20207,20210],"fullWord":4573},{"subwords":[148,155,399,1145,1147,1155,4438,4466,4574,4575,4590,4601,4728,4865,5659,5756,10090,10093,10094,10292,10293,10324,10327,10378,10490,20303,20306,20309,20310,20369,20370,20501,20502,20524,20566],"fullWord":4575},{"subwords":[148,605,617,1145,1147,1158,1159,4438,4492,4500,4574,4576,4577,4590,4605,4774,4865,5659,5865,12229,12390,20303,20309,20310,20393,20394,20396,20397,20505,20524,20579,20581],"fullWord":4577},{"subwords":[30,148,1196,1243,1245,1246,1502,1503,1515,1519,1560,1749,2721,4427,4438,4578,4579,4590,4618,5564,5567,5568,5659,5662,21097],"fullWord":4579},{"subwords":[4578,4580,6230,6386,6730,6854,10090,10108,10304,21094],"fullWord":4580},{"subwords":[169,326,337,434,488,4456,4578,4581,4891,9124,9128,9437,9439,10090,10108,10119,10126,10127,10304,10530,10691,18339,18347,18349,18833,18843,18863,21140],"fullWord":4581},{"subwords":[183,605,693,716,4492,4578,4583,5172,5173,5234,5249,12293,12311,12493,12574,12575,12686,18339,18408,18432,18970,18972,18977,19036,19059,19186,21154,21183,21184],"fullWord":4583},{"subwords":[213,287,326,605,4492,4502,4585,4890,4947,4985,4993,7253,7283,7604,12230,12313,21230,21269,21276],"fullWord":4585},{"subwords":[213,399,4466,4584,4586,4601,4728,5756,10090,10093,10314,10315,10324,10327,10378,21241,21249],"fullWord":4586},{"subwords":[93,94,114,115,183,215,605,675,2766,2869,2883,2884,2900,2901,3638,3639,3644,3657,3777,3786,3787,4431,4492,4494,4500,4589,4605,4639,4656,4774,5096,5114,5172,5173,5176,5653,5856,5865,5953,12229,12493,12499,12721,12752,12874,12876],"fullWord":4589},{"subwords":[148,605,4438,4492,4500,4590,4591,4605,4667,4774,5659,5665,5865,5867,12229,12339,12340],"fullWord":4591},{"subwords":[148,151,817,4438,4516,4517,4590,4592,4607,4667,4678,4810,5340,5588,5589,5659,5976,5984,14736,14961,14962,15060,15069,15093],"fullWord":4592},{"subwords":[148,155,399,1196,4438,4466,4578,4590,4593,4601,4728,4729,5564,5567,5568,5659,5662,5756,10090,10093,10094,10108,10304,10305,10324,10327,10332,10378,10495,11065,21050,21097],"fullWord":4593},{"subwords":[605,4492,4500,4595,4596,4605,4774,5665,5865,6230,6231,6293,6406,6409,6412,6453,6458,12229,12339,12340],"fullWord":4596},{"subwords":[817,828,4516,4595,4597,4607,4678,4688,4810,5588,5589,5976,5984,6230,6231,6232,6308,6317,6318,6392,6393,6406,6409,6412,7056,7057,7058,14736,14961,15060,15093,15098,15114,15115],"fullWord":4597},{"subwords":[399,1196,4466,4578,4595,4598,4601,4706,4728,4729,5567,5756,5765,6230,6231,6386,6406,6509,6730,6731,6734,6740,6854,10090,10093,10108,10304,10305,10324,10327,10332,10333,10336,10378,10495,11065,21050,21097],"fullWord":4598},{"subwords":[200,326,327,329,330,331,336,349,351,359,817,825,854,858,863,905,906,948,4461,4516,4520,4599,4600,4607,4611,4714,4810,4826,4901,4935,4939,5023,5037,5367,5588,5599,5976,5977,9103,9106,9111,9127,9376,9377,9384,9385,9389,9409,14736,14751,14776,14779,14788,14789,14881,14882,14961,14965,15060,15087,15428,15433,15436,15443,15526,15893,15928,16028,16270,16286,16419,16780,16889,16890,16891,17722],"fullWord":4600},{"subwords":[396,399,401,817,4466,4516,4601,4602,4607,4678,4728,4731,4810,5588,5589,5592,5691,5756,5757,5976,5984,10090,10093,10097,10202,10324,10327,10330,10355,10378,10383,10388,14736,14961,14968,15060,15093,15107],"fullWord":4602},{"subwords":[817,4516,4518,4607,4608,4678,4810,5346,5588,5589,5976,5984,6008,6012,14736,14872,14961,14964,14983,14984,15060,15093,15276],"fullWord":4608},{"subwords":[220,221,326,327,329,349,351,817,854,4516,4599,4607,4609,4678,4714,4810,4935,5023,5588,5589,5725,5735,5976,5984,5995,9103,9108,9376,9384,9385,14736,14776,14961,15060,15093,15428,15433],"fullWord":4609},{"subwords":[227,396,399,817,1196,4466,4516,4578,4601,4607,4610,4613,4728,4729,4810,4814,5337,5430,5567,5570,5588,5592,5594,5756,5976,10090,10093,10097,10108,10202,10206,10304,10305,10306,10324,10327,10332,10355,10359,10378,10495,11065,11074,14736,14939,14940,14961,14966,14968,15060,15077,15183,15201,15864,15866,21050,21068,21071,21097,21099],"fullWord":4610},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4612,4615,4810,4812,5327,5588,5600,5620,5976,5982,6055,8217,8327,8333,8334,8360,8378,8381,8382,8383,8390,8440,8453,8454,8458,8461,8552,8558,14736,14775,14898,14901,14902,14961,15060,15312,15318,15376,15748,18339,18449,18450,18453,18454,18541,18554,18697,18765,19205,19233],"fullWord":4612},{"subwords":[200,325,932,934,1009,4543,4551,4555,4614,4615,4616,4826,5616,5620,5626,6055,8217,8219,8227,8228,8362,8371,8373,8374,8378,8381,8382,8385,8391,8440,8443,8461,8467,8586,8935,15893,16041,16043,16044,16270,16293,16457,16503,16504,16559,16574,16581,17806,18339,18340,18541,18559,18575,18697],"fullWord":4616},{"subwords":[1009,1196,4551,4578,4615,4617,5567,5620,6055,8217,8378,8381,8382,8420,8422,8440,8444,8461,8607,9035,18339,18541,18697,18724,18806,21097,21098,21135],"fullWord":4617},{"subwords":[30,817,867,1243,1246,1288,1289,1290,1366,1372,1377,1378,1395,1396,1515,1521,1535,1536,1560,2308,2315,2317,2333,2334,2376,2378,2384,4427,4516,4522,4607,4618,4619,4620,4810,5303,5316,5355,5588,5976,9849,14736,14798,14799,14961,14995,15060],"fullWord":4620},{"subwords":[30,67,200,817,825,905,906,1243,1246,1254,1366,1372,1374,1376,1377,1378,1381,1419,1422,1425,1426,1428,1515,1518,1535,1536,1537,1539,1560,1574,2308,2315,2316,2317,2318,2343,2376,2377,2384,4427,4430,4516,4520,4607,4611,4618,4619,4621,4629,4810,4826,5303,5305,5588,5599,5976,5977,14736,14751,14881,14882,14961,14965,14995,15014,15060,15087,15869,15878,15893,16270,16286,16419,16423],"fullWord":4621},{"subwords":[30,67,200,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,1576,1590,4427,4430,4618,4622,4629,4680,4826,5605,5606,15893,16270,16272,16319,16320],"fullWord":4622},{"subwords":[30,31,72,1009,1243,1246,1462,1464,1466,1515,1542,1560,1576,1591,1721,1722,1725,4427,4551,4618,4623,4630,5620,6055,18302,18339,18541,18576,18577],"fullWord":4623},{"subwords":[1560,1576,1767,1777,1780,4618,4624,4714,4935,5632,5633,9108],"fullWord":4624},{"subwords":[1560,1574,1716,1721,1736,1777,1780,1784,1785,1786,1788,1881,1884,1887,1889,4618,4625,4626,4629,4630,4633,4714,4724,4826,4908,4935,4939,4942,4945,5037,5063,5680,5684,9111,9127,9447,16457,16765,16780,16907,16911,16912,17856,18540,18575,18835,18837,18844,18845,18850,18947],"fullWord":4626},{"subwords":[1560,1576,1582,1671,1673,1679,2058,2059,2127,2130,2134,2135,4618,4627,4774,5114,5172,5176,5177,5637,5665,5865,5953,12331,12339,12340,12481,12493,12499,12752,12876],"fullWord":4627},{"subwords":[1560,1574,1777,1780,1782,1783,1784,1788,1790,1791,1867,1871,2384,2413,2414,2417,2423,4618,4628,4629,4714,4810,4826,4908,4935,4939,5023,5037,5362,5363,5367,9111,9127,9384,9385,9389,9409,14995,15005,15006,15014,15060,15087,15402,15410,15428,15433,15436,15443,15526,16423,16765,16780,16889,16890,16891,17722],"fullWord":4628},{"subwords":[1560,1576,1591,1721,1725,4618,4630,4631,18576,18577],"fullWord":4631},{"subwords":[1560,1721,2058,2059,2072,2205,2207,2219,2237,2384,2446,4618,4630,4632,4810,5114,5115,5234,5237,5239,12752,12959,12960,12979,13008,14995,15060,15078,15312,15318,15576,15579,15580,15600,15603,15610,15691,15694,15748,18981,18983,19093,19101,19310,19311],"fullWord":4632},{"subwords":[1560,1574,1604,1617,2517,2521,2524,2527,2537,2545,2668,2671,4618,4629,4634,4635,4826,4849,5445,5451,5471,5478,5485,5488,7460,18035,18066,18067,19876,19877],"fullWord":4635},{"subwords":[1560,1671,1673,2517,2577,2582,2590,2591,4618,4636,4774,5445,5471,5489,5507,5511,5516,5865,9836,12331,12614,12624,12640,19595],"fullWord":4636},{"subwords":[1560,1574,1716,1721,1736,2517,2527,2668,2671,2690,2691,2697,2700,4618,4629,4630,4633,4637,4638,4826,4849,5445,5451,5471,5478,5479,5480,5548,16457,17994,17999,18035,18066,18067,18074,18540,18575,19390,19397,19398,19401,19403,19876,19877],"fullWord":4638},{"subwords":[93,94,148,2766,3113,3114,4431,4438,4590,4639,4640,4667,5659],"fullWord":4640},{"subwords":[93,94,96,200,399,400,407,2766,2771,2782,2813,3021,3022,3447,3448,4431,4432,4466,4467,4601,4603,4639,4641,4642,4728,4826,5756,5760,6023,10072,10073,10074,10077,10090,10093,10099,10107,10227,10324,10327,10331,10360,10378,15880,15893,15942,15948,16114,16119,16121,16122,16270,16274,16298,17044],"fullWord":4642},{"subwords":[93,94,112,574,732,733,2766,2848,2853,2859,2860,2921,2922,2923,4431,4472,4475,4484,4639,4643,5658,5956,11086,11089,11090,11107,11115,11270,11437,11438,13154,13155,13156,13171,13439,13478],"fullWord":4643},{"subwords":[93,94,114,115,126,127,605,693,694,695,1009,2766,2770,2772,2869,2883,2884,2908,2909,3052,3145,4431,4492,4494,4500,4512,4551,4605,4639,4644,4774,4788,5620,5849,5856,5865,6055,6057,6074,12229,12325,12374,18339,18408,18541,18607,18610],"fullWord":4644},{"subwords":[93,94,96,200,1196,1197,2766,2771,2782,3021,3022,3100,3102,4431,4432,4578,4582,4639,4645,4646,4826,5567,5572,5619,6023,15880,15893,16103,16114,16270,16298,21096,21097,21105,21130],"fullWord":4646},{"subwords":[3113,3429,3430,3431,4639,4647,4714,4715,4909,4925,4935,4942,5677,5680,6057,9079,9082,9108,18576,18577,18823,18835,18844,18845],"fullWord":4647},{"subwords":[3113,3145,4639,4648,4774,4788,5665,5856,5865,6057,12339,12340,12374,18576,18577,18583,18607,18610],"fullWord":4648},{"subwords":[3113,3114,4639,4649,4667,4714,4715,4716,4909,4910,4928,4935,4936,9079,9082,9108],"fullWord":4649},{"subwords":[3113,3120,3121,4639,4650,4714,4715,4728,4731,4739,4909,4935,5691,5756,5771,9079,9082,9108,9117,10378,10383,10414,10518,10530,10536,10537],"fullWord":4650},{"subwords":[3113,3114,4639,4651,4652,4667,5740,5741],"fullWord":4652},{"subwords":[3113,3115,3153,4120,4121,4123,4639,4651,4653,4678,4810,5348,5355,5740,5741,5984,15021,15028,15035,15060,15093,15103],"fullWord":4653},{"subwords":[3113,4639,4651,4654,4728,4731,5691,5740,5741,5756,5778,9812,10378,10383,10386,10416],"fullWord":4654},{"subwords":[3638,3644,3657,3965,3968,3969,4639,4656,4657,5096,5114,5234,5237,6057,12752,18981,18983],"fullWord":4657},{"subwords":[3113,3114,3638,3644,3645,3657,4639,4656,4658,4667,5096,5114,12745,12752],"fullWord":4658},{"subwords":[3638,3644,3647,3648,3649,3656,3657,3658,3893,3897,3898,3899,3902,3929,4118,4119,4639,4656,4659,4660,4810,4826,5096,5104,5114,5115,5116,5117,5216,5221,5223,5225,6004,6023,12752,12755,12965,12971,12979,12982,13007,15021,15028,15048,15060,15078,15081,15087,15592,15599,15600,15603,15609,15610,15611,15676,15677,16198,16199,16243,16298,17316,17323,17419],"fullWord":4660},{"subwords":[3638,3644,3649,3656,3657,3658,3942,3964,4029,4639,4656,4661,4662,4826,5096,5104,5114,5117,5221,5223,5567,5572,6023,12752,12755,13147,16298,17316,17323,17472,21096,21130,21154],"fullWord":4662},{"subwords":[3113,3115,3153,4120,4121,4639,4663,4678,4810,5984,15021,15028,15029,15060,15093],"fullWord":4663},{"subwords":[3113,3114,4263,4268,4269,4639,4665,4667,4846,4847,5455,5466,5467,5471,5685,5686],"fullWord":4665},{"subwords":[4263,4268,4269,4375,4376,4639,4666,5455,5462,5464,5466,5467,5471,5479,5688,6057],"fullWord":4666},{"subwords":[171,1196,4578,4670,4726,5567,6189,6191,9471,9524,21097],"fullWord":4670},{"subwords":[4673,4674,4774,5665,5865,5957,12339,12340,13478,13489,13490,13499,13500,13539,13544],"fullWord":4674},{"subwords":[4673,4675,4678,4810,5957,5984,13478,13489,13490,13506,13507,13577,13583,14262,15060,15093,15248],"fullWord":4675},{"subwords":[4673,4676,4728,4731,5567,5691,5694,5756,6189,6191,10378,10383,10495,11065,13478,13489,13490,13495,13950,14009,21115,21116,21127],"fullWord":4676},{"subwords":[93,94,2766,2785,3113,4431,4595,4639,4681,6210,6211,6230,6231,6406,6409,6412],"fullWord":4681},{"subwords":[4472,4475,4595,4671,4682,5658,5663,5827,6230,6231,6285,6286,6406,6409,6412,6446,11107,11115,11437,11438,11478,11605],"fullWord":4682},{"subwords":[200,254,1009,4447,4551,4555,4595,4683,4684,4701,4826,5616,5620,5626,5705,5706,6055,6230,6231,6234,6236,6339,6340,6344,6347,6348,6349,6354,6397,6399,6402,6406,6408,6485,6487,15893,15904,16041,16043,16044,16270,16293,16457,17806,18339,18340,18541,18559,18575],"fullWord":4684},{"subwords":[254,1009,4447,4551,4595,4683,4685,4701,5620,5705,6055,6230,6231,6344,6347,6348,6399,6406,6409,6412,6420,6485,6489,6490,18339,18541,18576,18577],"fullWord":4685},{"subwords":[3113,4639,4686,4701,5705,6057,6406,6409,6412,6420,6489,6490,18576,18577],"fullWord":4686},{"subwords":[4667,4687,4774,5665,5865,5867,6406,6409,6412,6453,6458,6459,12339,12340],"fullWord":4687},{"subwords":[4678,4679,4680,4688,4689,4810,4826,5984,6406,6408,6409,6412,6414,6419,7056,7057,7058,7061,15060,15071,15087,15093,15096,15098,15101,15114,15115,15134,16311,16319,16320,16340,16425,16426,16431],"fullWord":4689},{"subwords":[4667,4690,4714,4928,4935,4936,6406,6409,6412,6537,6543,9108],"fullWord":4690},{"subwords":[4678,4688,4691,4714,4810,4935,5023,5725,5735,5984,5995,6406,6409,6412,6537,6543,6621,6622,6623,7056,7057,7058,7081,9108,9384,9385,15060,15093,15098,15114,15115,15428,15433,15446],"fullWord":4691},{"subwords":[4680,4692,4714,4826,4935,4939,5037,6406,6408,6409,6412,6414,6419,6537,6539,6542,6543,9108,9111,9127,9135,16319,16320,16780],"fullWord":4692},{"subwords":[4693,4714,4728,4731,4739,4935,5691,5756,5765,5771,6406,6409,6412,6416,6537,6538,6543,6546,6568,6569,6740,6743,6764,9108,9117,10378,10383,10414,10530,10536,10537,10539,10554],"fullWord":4693},{"subwords":[4694,4714,4774,4935,4985,4988,5665,5865,6406,6409,6412,6453,6458,6537,6543,6548,6593,6598,6601,6602,9108,12339,12340],"fullWord":4694},{"subwords":[399,401,4466,4595,4601,4695,4728,4731,5691,5756,5765,6230,6231,6406,6409,6412,6416,6734,6740,6743,10090,10093,10324,10327,10333,10334,10378,10383],"fullWord":4695},{"subwords":[183,4472,4475,4595,4696,4763,5114,5163,5165,5658,5827,5950,6230,6231,6285,6286,6406,6446,6864,6865,6874,11107,11115,11265,11437,11438,11605,11831,11833,12672,12752],"fullWord":4696},{"subwords":[4697,4698,4826,5114,5117,5123,5125,5127,5139,5221,5223,5718,5721,5950,6406,6408,6874,6879,6885,6893,7460,7782,7785,7790,12752,12755,17323],"fullWord":4698},{"subwords":[4699,4763,4810,4818,5114,5115,5163,5165,5213,5827,5950,6406,6446,6874,6940,6951,6955,6973,6977,7056,7103,7111,11539,11605,11831,11833,11970,12752,12979,15060,15078,15114,15202,15600,15603,15610,15627,15632],"fullWord":4699},{"subwords":[227,817,828,1196,4516,4578,4595,4607,4613,4700,4706,4810,4814,5337,5430,5567,5570,5588,5976,6230,6231,6232,6239,6308,6317,6318,6386,6392,6406,6509,7050,7051,7056,7140,14736,14939,14940,14961,14966,15060,15114,15864,15866,21068,21071,21097,21099],"fullWord":4700},{"subwords":[4678,4688,4701,4702,4810,4842,5705,5984,6406,6409,6412,6420,6489,6490,7056,7057,7058,7073,15060,15093,15098,15114,15115,15135,15312,15318,15748,18576,18577,19240,19241,19243],"fullWord":4702},{"subwords":[4701,4703,4706,4728,4736,5567,5705,5756,5765,6406,6443,6509,6740,6854,10378,10394,10397,10460,10495,11065,21135],"fullWord":4703},{"subwords":[4680,4704,4826,4849,5471,5478,6406,6408,6409,6412,6414,6419,6501,6504,7152,7210,7211,7212,16319,16320,18066,18067,18068,19876,19877,19878],"fullWord":4704},{"subwords":[4705,5471,6406,6409,6412,6501,6512,7229,7230,7231,21249,21251],"fullWord":4705},{"subwords":[200,269,270,280,973,4707,4708,4826,5707,5708,6039,7253,7258,7396,7398,7412,7460,15893,15910,15912,15915,15923,16270,16291],"fullWord":4708},{"subwords":[4671,4678,4709,4810,4818,5351,5667,5669,5984,5988,7467,7468,7489,7530,7979,11478,11487,11539,11543,11548,11549,15060,15093,15141,15202],"fullWord":4709},{"subwords":[4678,4710,4810,5351,5667,5669,5984,5988,7467,7468,7979,15060,15093,15141],"fullWord":4710},{"subwords":[4711,4712,4826,4849,5471,5478,5485,5488,5845,5846,5847,7460,7489,7492,7545,7546,8145,8150,11487,12081,12091,12097,12104,12107,12152,12153,16317,17199,17201,18066,18067,18103,19876,19877],"fullWord":4712},{"subwords":[4713,4774,4810,5114,5115,5172,5176,5392,5865,5953,8540,8552,8558,8575,8579,8721,8725,8726,8728,8789,8793,8794,8795,8857,8864,8867,8868,12358,12493,12499,12548,12752,12802,12876,12979,15060,15078,15227,15238,15386,15600,15603,15610],"fullWord":4713},{"subwords":[3113,3114,4639,4649,4667,4714,4715,4716,4909,4910,4928,4935,4936,9079,9082,9108],"fullWord":4716},{"subwords":[3113,3115,3153,3406,4120,4121,4155,4639,4678,4714,4715,4717,4810,4909,4911,4935,5023,5725,5735,5984,5995,9079,9082,9108,9384,9385,15021,15028,15060,15093,15411,15412,15428,15433],"fullWord":4717},{"subwords":[3113,3117,3119,4639,4680,4714,4715,4718,4826,4909,4913,4935,4939,5037,5040,6023,9079,9082,9085,9108,9111,9127,16178,16298,16319,16320,16769,16780],"fullWord":4718},{"subwords":[4639,4714,4719,4909,4935,6406,6537,6543,9079,9082],"fullWord":4719},{"subwords":[4714,4720,4721,4774,4785,4826,4832,4935,4939,4947,4956,4985,4988,4992,4993,4999,5007,5037,5716,5865,5875,5918,7460,7493,7511,7604,7611,9111,9127,9307,16381,16780,16815,16817,16858,16860,16866,16867,16868,17243],"fullWord":4721},{"subwords":[4714,4722,4723,4826,4935,4938,4939,4971,4972,4975,4983,5037,5055,5845,6039,9109,9111,9127,9422,9423,11569,11626,11641,11764,11774,11776,12082,16356,16375,16376,16780,16782,16903],"fullWord":4723},{"subwords":[4714,4724,4725,4826,4834,4935,4939,4942,4945,5037,5063,5680,5684,6039,9111,9127,9447,16457,16464,16780,16782,16903,16907,16911,16912,16913,16915,17856,17857,18575,18835,18837,18844,18845,18850,18947],"fullWord":4725},{"subwords":[3113,4639,4727,5737,6057,9531,9557,18576,18577],"fullWord":4727},{"subwords":[200,399,407,1196,1197,4466,4467,4578,4582,4601,4603,4728,4729,4730,4826,5567,5572,5619,5756,5760,10090,10093,10099,10107,10108,10227,10304,10305,10313,10324,10327,10331,10332,10360,10378,10495,10496,11065,11066,11080,15893,15902,15942,15948,16103,16270,16274,17039,17044,17149,21050,21096,21097,21105,21130],"fullWord":4730},{"subwords":[148,155,399,401,4438,4466,4590,4601,4667,4728,4731,4732,4733,5659,5691,5756,10090,10093,10094,10324,10327,10328,10378,10383],"fullWord":4732},{"subwords":[4728,4731,4735,5691,5756,10378,10383,10460,18576,18577],"fullWord":4735},{"subwords":[4701,4728,4736,4737,4826,5705,5706,5756,5760,5765,6406,6408,6443,6445,6740,10378,10394,10396,10459,10460,10465,16365,16457,17044,18575],"fullWord":4737},{"subwords":[3120,3135,3429,3430,3431,4639,4714,4728,4739,4740,4749,4909,4925,4935,4942,5677,5680,5756,6057,9079,9082,9117,10376,10378,10414,10460,10518,10530,10536,10537,10691,10694,18823,18835,18844,18845,18863,18864,18866,18867],"fullWord":4740},{"subwords":[4671,4714,4728,4731,4739,4741,4935,4938,4971,4972,5691,5756,5771,5782,9108,9109,9117,10378,10383,10414,10530,10536,10537,10584,10595,10596,11478,11492,11626,11659,11663,11668],"fullWord":4741},{"subwords":[4714,4724,4728,4739,4742,4743,4826,4935,4939,4942,4945,5037,5063,5680,5684,5756,5760,9111,9117,9121,9122,9127,9416,9417,9419,9436,9447,10378,10414,10415,10459,10460,10465,10530,10535,10536,10537,10551,10686,10687,10691,10694,10697,10707,16457,16780,16784,16840,16841,16907,16911,16912,17044,17068,17069,17093,17856,17862,18575,18835,18837,18844,18845,18850,18863,18864,18865,18866,18867,18870,18947],"fullWord":4743},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":4748},{"subwords":[3120,3135,3429,3430,3431,4639,4714,4728,4739,4740,4749,4909,4925,4935,4942,5677,5680,5756,6057,9079,9082,9117,10376,10378,10414,10460,10518,10530,10536,10537,10691,10694,18823,18835,18844,18845,18863,18864,18866,18867],"fullWord":4749},{"subwords":[4667,4728,4731,4733,4750,5466,5467,5471,5472,5473,5691,5756,5792,5793,10378,10383,10470],"fullWord":4750},{"subwords":[4728,4731,4751,5471,5472,5485,5667,5691,5756,5792,7467,7468,7477,7478,7678,7722,7723,10378,10379,10383,10398,10470,10981,10982],"fullWord":4751},{"subwords":[4728,4731,4752,4850,5471,5472,5691,5756,5792,6182,10378,10383,10470,10494,11058,11059],"fullWord":4752},{"subwords":[4667,4728,4731,4733,4753,4754,5691,5756,6092,10378,10383,10471,19992,20017],"fullWord":4754},{"subwords":[4678,4728,4731,4753,4755,4810,5691,5756,5757,5796,5984,6092,6100,10378,10383,10388,10471,10479,15060,15093,15107,15337,15340,19992,19996,20017,20057],"fullWord":4755},{"subwords":[4680,4728,4731,4734,4753,4756,4826,5691,5693,5756,5760,5790,5798,6092,6104,10378,10383,10385,10392,10451,10471,16319,16320,17044,19992,20000,20017,20018],"fullWord":4756},{"subwords":[148,176,528,529,605,4438,4472,4475,4479,4480,4492,4500,4590,4605,4757,4774,5658,5659,5865,11107,11113,11115,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":4757},{"subwords":[176,528,529,605,4472,4475,4479,4492,4500,4605,4671,4758,4774,5658,5663,5665,5822,5865,5881,11107,11115,11213,11218,11219,11437,11438,11446,11478,11512,11516,12229,12244,12245,12246,12339,12340],"fullWord":4758},{"subwords":[4671,4759,4774,4788,5665,5822,5865,11478,11483,11512,11516,11574,11578,11579,12339,12340,12374,18576,18577,18579,18583,18595,18607,18610],"fullWord":4759},{"subwords":[4671,4672,4680,4714,4722,4760,4826,4935,4938,4939,4971,4972,4975,4983,5037,5845,9108,9109,9111,9127,9422,11478,11479,11626,11641,11764,16319,16320,16330,16375,16780],"fullWord":4760},{"subwords":[4714,4722,4724,4761,4762,4826,4935,4938,4939,4942,4945,4971,4972,4975,4983,5037,5063,5680,5684,5832,5833,5845,9109,9111,9127,9422,9444,9446,9447,11574,11626,11641,11642,11764,11780,11781,11786,11789,16375,16457,16780,16907,16911,16912,17179,17180,17830,17856,18575,18595,18835,18837,18844,18845,18850,18882,18886,18887,18891,18947],"fullWord":4762},{"subwords":[1560,1574,1711,2058,2059,2062,2069,4588,4618,4629,4763,4764,4765,4769,4826,5114,5117,5163,5165,5167,5171,5221,5223,5845,11817,11823,11831,11833,11839,11845,12752,12755,12872,17308,17323,17382],"fullWord":4765},{"subwords":[4667,4671,4763,4766,5114,5163,5165,5166,11478,11831,11833,12745,12752],"fullWord":4766},{"subwords":[4763,4767,4768,4769,4774,4785,4826,5114,5117,5163,5165,5167,5171,5172,5176,5188,5221,5223,5845,5865,5875,5918,5953,5955,11512,11516,11520,11524,11567,11831,11833,11839,11845,11891,11896,11915,12493,12499,12500,12501,12506,12522,12525,12527,12560,12561,12562,12752,12755,12866,12868,12872,12876,12879,16381,17323,17382,17383,17387],"fullWord":4768},{"subwords":[4671,4763,4770,5114,5163,5165,5234,5237,5838,5839,11478,11483,11574,11578,11579,11831,11833,12010,12011,12752,18576,18577,18579,18595,18981,18983,19026,19032],"fullWord":4770},{"subwords":[4671,4678,4771,4772,4810,4818,5424,5471,5846,5984,11478,11539,11543,12091,15060,15093,15202,15773,15777,15778,15806],"fullWord":4772},{"subwords":[4771,4773,4810,4818,4824,4826,4849,5424,5425,5471,5478,5845,5846,5847,11539,12091,12097,12152,12153,12154,15060,15087,15202,15224,15773,15777,15778,15782,15806,15820,15840,16317,16446,18066,18067,18071,18103,18150,19846,19876,19877,19880],"fullWord":4773},{"subwords":[4774,4775,5471,5485,5507,5511,5513,5665,5667,5865,5876,7467,7468,7493,7496,7759,8151,12339,12340,12624,12629],"fullWord":4775},{"subwords":[326,327,337,338,399,423,430,431,605,637,4466,4492,4500,4507,4601,4605,4714,4728,4739,4774,4776,4891,4898,4935,4985,4988,5745,5746,5756,5865,9103,9104,9117,10090,10093,10095,10119,10120,10169,10174,10324,10327,10344,10378,10414,10427,10530,10536,10537,10544,10622,10625,10628,12229,12238,12239,12438,12439],"fullWord":4776},{"subwords":[4667,4714,4774,4777,4928,4935,4936,4985,4988,4989,5665,5865,5867,9108,9224,12339,12340],"fullWord":4777},{"subwords":[4678,4714,4774,4778,4810,4935,4985,4988,4990,5023,5665,5725,5735,5865,5868,5984,5995,5996,5998,9108,9384,9385,9387,12339,12340,12358,12360,15060,15093,15175,15176,15227,15428,15433,15491],"fullWord":4778},{"subwords":[4680,4714,4774,4779,4785,4786,4826,4935,4939,4985,4988,4992,5007,5037,5665,5865,5875,5918,9108,9111,9127,9307,12339,12340,12344,16319,16320,16335,16352,16353,16381,16780,16858,16860,17243],"fullWord":4779},{"subwords":[4714,4722,4774,4780,4781,4785,4826,4935,4938,4939,4971,4972,4975,4983,4985,4988,4992,5007,5037,5845,5865,5875,5918,9109,9111,9127,9307,9422,11489,11512,11516,11520,11524,11626,11641,11645,11646,11697,11702,11705,11706,11707,11710,11728,11764,12443,12447,16375,16381,16780,16858,16860,17243],"fullWord":4781},{"subwords":[4667,4774,4782,5665,5865,5867,12339,12340],"fullWord":4782},{"subwords":[4714,4774,4783,4785,4826,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,9111,9127,9297,9299,9302,9307,12448,12449,16381,16780,16858,16860,16879,17243],"fullWord":4783},{"subwords":[4774,4784,4788,5114,5172,5176,5177,5234,5237,5665,5865,5953,12339,12340,12374,12493,12499,12574,12581,12582,12752,12876,18576,18577,18583,18607,18610,18981,18983,19036,19038,19039],"fullWord":4784},{"subwords":[4678,4679,4680,4774,4785,4786,4787,4810,4826,5665,5865,5868,5869,5875,5918,5984,5998,6000,12339,12340,12344,12358,12359,15060,15071,15087,15093,15096,15227,15230,16311,16319,16320,16335,16340,16381,16383,16425,16426,17237],"fullWord":4787},{"subwords":[399,488,605,693,694,695,1009,4466,4492,4500,4512,4551,4601,4604,4605,4728,4747,4774,4788,4789,5620,5745,5746,5756,5865,6055,6074,10090,10093,10095,10169,10174,10247,10248,10251,10324,10327,10344,10349,10378,10427,10437,10460,12229,12292,12325,12374,18339,18370,18408,18541,18547,18607,18610],"fullWord":4789},{"subwords":[4667,4774,4788,4790,5665,5865,5867,12339,12340,12374,18576,18577,18583,18607,18610,18611],"fullWord":4790},{"subwords":[4714,4774,4788,4791,4935,4942,4985,4988,5008,5680,5865,9225,9297,9299,9325,9329,12374,12448,12463,18607,18610,18835,18844,18845,18894,18898,18899,18916],"fullWord":4791},{"subwords":[4667,4774,4793,5466,5467,5471,5507,5510,5511,5665,5865,5867,5876,5877,12339,12340,12624],"fullWord":4793},{"subwords":[4678,4774,4794,4810,5665,5865,5868,5984,5998,6092,6093,6100,12339,12340,12358,12363,12364,12386,15060,15093,15227,15337,19992,19996,20027,20030,20057],"fullWord":4794},{"subwords":[148,151,183,191,192,817,4438,4441,4516,4517,4590,4607,4796,4810,5114,5115,5340,5588,5659,5976,12680,12681,12745,12746,12752,12979,12980,14736,14961,14962,15060,15078,15561,15600,15603,15610],"fullWord":4796},{"subwords":[161,732,733,735,781,782,817,911,1009,4516,4537,4551,4553,4607,4797,4805,4810,4812,5323,5327,5588,5620,5956,5976,5982,6055,13171,13174,13286,13292,13294,13295,13328,13329,13330,13364,13367,13368,13372,13439,13455,13460,13464,13478,13577,13599,13613,13616,14247,14248,14249,14262,14736,14851,14852,14853,14867,14898,14901,14902,14961,14979,15060,15248,15312,15318,15748,18339,18436,18437,18438,18439,18449,18450,18453,18454,18467,18541,18554,19205,19221,19233],"fullWord":4797},{"subwords":[4667,4673,4774,4798,5665,5865,5867,12339,12340,13478,13489,13490,13499,13539,13544,13545],"fullWord":4798},{"subwords":[3429,3430,3431,4046,4639,4714,4799,4805,4909,4925,4935,4942,5014,5022,5677,5680,5959,6057,9079,9082,13438,13478,13613,13705,13710,13850,18641,18823,18835,18844,18845,18926],"fullWord":4799},{"subwords":[4728,4800,5114,5146,5200,5205,5208,5567,5756,10378,10443,10495,10780,10864,10865,10866,11065,12752,12767,12837,12845,12916,13478,13950,13967,13981,13982,14009,14020,14056,14061,14063,14088,21115,21127,21154,21155,21158],"fullWord":4800},{"subwords":[4801,4803,4805,4810,5114,5115,5200,5202,5215,5234,5237,5239,5402,5405,12752,12916,12937,12938,12979,13008,13478,13486,13577,13599,13613,13624,14020,14027,14147,14148,14160,14162,14188,14262,14350,14357,15060,15078,15248,15312,15318,15600,15603,15610,15663,15664,15691,15694,15748,18981,18983,19075,19076,19077,19079,19093,19101,19310,19311,19323,19324],"fullWord":4801},{"subwords":[4673,4677,4680,4802,4826,5114,5117,5200,5204,5221,5223,5967,6033,12752,12755,12916,12925,12936,13478,13483,13488,13489,13490,13510,13607,14020,14023,14166,14167,16319,16320,16336,17323,17406,17530,17532],"fullWord":4802},{"subwords":[4803,4804,4805,4826,4837,5114,5117,5118,5200,5204,5221,5223,5233,5234,5237,5241,5245,6033,6049,12752,12755,12916,12925,12936,12937,12938,12944,13478,13488,13607,13609,13613,13626,14020,14023,14027,14030,14166,14167,14182,14184,14188,14201,14427,16409,16457,17323,17406,17435,17530,17644,17836,17921,18575,18981,18983,18985,19075,19076,19077,19081,19090,19386],"fullWord":4804},{"subwords":[4805,4806,4807,4826,6033,8549,8586,8935,13478,13488,13609,13613,13626,14427,16409,16457,16574,16581,17530,17836,18575,18697,19386],"fullWord":4807},{"subwords":[4673,4805,4808,5471,5479,5525,5526,6077,13478,13489,13490,13613,14438,14561,18576,18577,19453],"fullWord":4808},{"subwords":[4805,4809,5471,5479,5525,5526,5555,5567,13478,13613,14438,14561,19453,19559,19560,21127,21135,21224],"fullWord":4809},{"subwords":[326,327,329,337,338,349,351,396,399,817,854,857,4466,4516,4599,4601,4607,4714,4728,4739,4810,4811,4891,4893,4935,5023,5588,5592,5756,5976,9103,9104,9117,9119,9376,9384,9385,10090,10093,10097,10119,10121,10122,10124,10202,10324,10327,10355,10378,10414,10502,10530,10531,10536,10537,10549,10675,10677,14736,14776,14780,14781,14961,14968,15060,15399,15428,15433,15444,15473,15474],"fullWord":4811},{"subwords":[200,817,825,905,906,911,918,993,1009,4516,4520,4537,4540,4551,4553,4554,4555,4607,4611,4810,4812,4813,4826,5327,5328,5360,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14736,14751,14881,14882,14898,14901,14902,14905,14912,14961,14965,15060,15087,15306,15312,15318,15748,15893,16041,16043,16044,16270,16286,16293,16419,16457,17773,17775,17776,17806,18339,18340,18449,18450,18453,18454,18455,18472,18541,18554,18557,18559,18575,19205,19208,19233,19234,19381],"fullWord":4813},{"subwords":[4667,4678,4714,4810,4816,4928,4935,4936,5023,5364,5725,5735,5984,5995,9108,9384,9385,15060,15069,15074,15093,15428,15433],"fullWord":4816},{"subwords":[4678,4714,4810,4817,4935,5023,5071,5073,5381,5725,5735,5984,5995,6092,6100,9108,9384,9385,15060,15093,15337,15428,15433,15549,15550,19992,19996,20057,20058,20126,20129,20130,20132],"fullWord":4817},{"subwords":[396,399,817,869,871,4466,4472,4475,4516,4601,4607,4728,4810,4818,4819,4820,5318,5342,5588,5592,5658,5756,5782,5976,10090,10093,10097,10136,10145,10146,10150,10202,10324,10327,10355,10378,11107,11115,11120,11173,11180,11276,11286,11303,11304,11437,11438,11442,11464,11492,11539,14736,14808,14961,14968,14971,14975,15060,15202],"fullWord":4820},{"subwords":[200,817,825,869,871,883,905,906,4472,4475,4476,4489,4516,4520,4607,4611,4810,4818,4819,4821,4824,4826,5318,5321,5342,5343,5588,5599,5658,5845,5976,5977,11107,11115,11120,11121,11123,11276,11286,11287,11314,11315,11330,11333,11437,11438,11440,11453,11539,11560,14736,14751,14808,14820,14881,14882,14961,14965,14975,14978,15060,15087,15202,15224,15893,15973,15978,16270,16278,16286,16419,17161],"fullWord":4821},{"subwords":[3406,4155,4159,4639,4714,4810,4818,4822,4909,4911,4935,4938,4971,4972,4973,5023,5830,9079,9082,9109,9384,9385,11471,11539,11541,11619,11626,11743,11744,15021,15028,15060,15202,15411,15412,15428,15433,15480,15481,15482],"fullWord":4822},{"subwords":[4714,4722,4810,4818,4823,4824,4826,4935,4938,4939,4971,4972,4973,4974,4975,4983,5023,5037,5367,5830,5831,5845,9109,9111,9127,9384,9385,9389,9409,9422,11539,11626,11641,11743,11744,11745,11764,11765,15060,15087,15202,15224,15428,15433,15436,15443,15480,15481,15482,15484,15489,15526,16375,16780,16889,16890,16891,17722],"fullWord":4823},{"subwords":[4714,4810,4825,4826,4935,4939,5023,5026,5037,5365,5366,5367,6008,6016,9111,9127,9384,9385,9389,9409,15060,15087,15428,15433,15434,15435,15436,15443,15526,15528,16780,16889,16890,16891,17722],"fullWord":4825},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":4827},{"subwords":[148,158,200,605,607,610,4438,4445,4492,4500,4501,4590,4594,4605,4606,4774,4785,4826,4828,5659,5865,5875,5918,12229,15893,15894,15986,15988,15990,15995,15996,16270,16308,16381],"fullWord":4828},{"subwords":[4232,4639,4664,4810,4826,4829,5430,5439,5567,5570,5571,5572,6023,15021,15028,15048,15060,15087,15866,15867,16298,21096,21130,21212],"fullWord":4829},{"subwords":[4678,4679,4680,4810,4826,4830,4842,4843,5360,5984,6018,6046,15060,15071,15087,15093,15096,15290,15306,15307,15312,15318,15748,16311,16319,16320,16340,16425,16426,16457,17816,17823,17840,18575,18576,18577,18588,18658,19240,19241,19242],"fullWord":4830},{"subwords":[4714,4720,4721,4774,4785,4826,4832,4935,4939,4947,4956,4985,4988,4992,4993,4999,5007,5037,5716,5865,5875,5918,7460,7493,7511,7604,7611,9111,9127,9307,16381,16780,16815,16817,16858,16860,16866,16867,16868,17243],"fullWord":4832},{"subwords":[4678,4679,4680,4714,4810,4826,4833,4935,4939,5023,5037,5367,5725,5726,5735,5984,5995,9108,9111,9127,9384,9385,9389,9409,15060,15071,15087,15093,15096,15294,15428,15433,15436,15443,15526,16311,16319,16320,16340,16425,16426,16780,16889,16890,16891,16892,17722],"fullWord":4833},{"subwords":[4714,4724,4725,4826,4834,4935,4939,4942,4945,5037,5063,5680,5684,6039,9111,9127,9447,16457,16464,16780,16782,16903,16907,16911,16912,16913,16915,17856,17857,18575,18835,18837,18844,18845,18850,18947],"fullWord":4834},{"subwords":[4803,4804,4805,4826,4837,5114,5117,5118,5200,5204,5221,5223,5233,5234,5237,5241,5245,6033,6049,12752,12755,12916,12925,12936,12937,12938,12944,13478,13488,13607,13609,13613,13626,14020,14023,14027,14030,14166,14167,14182,14184,14188,14201,14427,16409,16457,17323,17406,17435,17530,17644,17836,17921,18575,18981,18983,18985,19075,19076,19077,19081,19090,19386],"fullWord":4837},{"subwords":[93,94,98,99,126,127,1009,2766,2772,3052,3172,3229,3238,4431,4551,4615,4639,4838,5582,5620,6055,6057,6058,8217,8378,8381,8382,8440,8461,18323,18339,18541,18543,18570,18697],"fullWord":4838},{"subwords":[169,326,327,337,338,399,434,488,1009,4466,4551,4601,4604,4714,4728,4739,4747,4839,4891,4935,4942,4963,5620,5680,5756,6055,9103,9104,9117,9437,10090,10093,10119,10126,10247,10248,10324,10327,10378,10414,10460,10530,10536,10537,10691,10694,18339,18347,18349,18350,18370,18541,18547,18833,18835,18844,18845,18863,18864,18866,18867],"fullWord":4839},{"subwords":[169,326,327,605,693,694,695,700,1009,4492,4500,4512,4551,4605,4714,4774,4788,4840,4898,4935,4942,4985,4988,5008,5620,5680,5865,6055,6074,9103,9325,12229,12325,12374,12463,18339,18347,18408,18541,18607,18610,18835,18844,18845,18894,18898,18899],"fullWord":4840},{"subwords":[4774,4788,4841,5665,5865,12339,12340,12374,12377,18576,18577,18583,18607,18610,18615,18630,18631,18969],"fullWord":4841},{"subwords":[4678,4679,4680,4810,4826,4830,4842,4843,5360,5984,6018,6046,15060,15071,15087,15093,15096,15290,15306,15307,15312,15318,15748,16311,16319,16320,16340,16425,16426,16457,17816,17823,17840,18575,18576,18577,18588,18658,19240,19241,19242],"fullWord":4843},{"subwords":[4680,4826,4844,16319,16320,16457,17816,17846,18575,18576,18577,18588,18662,18663],"fullWord":4844},{"subwords":[4810,4845,5114,5115,5234,5237,5239,5260,5471,5479,5523,12752,12979,13008,13051,13059,13065,13066,13080,15060,15078,15082,15312,15318,15600,15603,15610,15691,15694,15706,15722,15723,15724,15748,15773,15777,15778,15858,18981,18983,19093,19101,19155,19156,19310,19311,19356,19357,19411,19465,19895],"fullWord":4845},{"subwords":[3113,3114,4263,4268,4269,4639,4665,4667,4846,4847,5455,5466,5467,5471,5685,5686],"fullWord":4847},{"subwords":[3113,3117,3119,4263,4267,4268,4269,4271,4639,4680,4826,4846,4848,4849,5455,5456,5471,5478,5656,5685,5687,6023,16252,16298,16316,16319,16320,18066,18067,18068,19876,19877,19878],"fullWord":4848},{"subwords":[4714,4774,4853,4935,4985,4988,5071,5665,5865,5871,5939,6092,6093,9108,12339,12340,12387,19992,20008,20010,20027,20126,20129,20130,20152,20157,20159],"fullWord":4853},{"subwords":[4680,4826,4854,6092,6104,16319,16320,16457,17816,17848,18575,18576,18577,18588,19992,20000,20088,20091,20095,20101],"fullWord":4854},{"subwords":[3113,4639,4714,4715,4855,4909,4935,5071,6092,9079,9082,9108,19991,19992,20119,20120,20126,20129,20130],"fullWord":4855},{"subwords":[4714,4728,4739,4742,4826,4856,4857,4935,4939,5037,5071,5076,5756,5760,5799,6107,6110,9111,9117,9121,9127,9416,9417,10378,10414,10415,10471,10481,10486,10530,10535,10536,10537,10551,10711,10712,10719,16780,16784,17044,17068,17069,20004,20007,20017,20018,20126,20129,20130,20134,20144,20197,20198],"fullWord":4857},{"subwords":[4680,4714,4826,4858,4935,4939,5037,5071,5076,6092,6104,9108,9111,9127,16319,16320,16780,16798,16799,19992,20000,20126,20129,20130,20134,20197,20198],"fullWord":4858},{"subwords":[4714,4859,4928,4931,4935,4936,5011,5071,5072,5114,5267,9110,12745,12752,13101,20126,20127,20129,20130,20243,20244],"fullWord":4859},{"subwords":[4714,4810,4860,4935,5023,5071,5073,5114,5115,5267,5268,5381,5408,9110,9384,9385,12752,12979,13095,13101,15060,15078,15337,15428,15433,15549,15550,15600,15603,15610,15728,15729,20058,20126,20127,20129,20130,20132,20183,20243,20245],"fullWord":4860},{"subwords":[4862,5114,5234,5237,5267,6092,12752,18576,18577,18981,18983,19165,19992,20095,20097,20098,20265,20266],"fullWord":4862},{"subwords":[4810,4863,5114,5115,5260,5267,5268,5408,5471,5523,12752,12979,13051,13095,15060,15078,15337,15600,15603,15610,15706,15728,15729,15773,15777,15778],"fullWord":4863},{"subwords":[4864,5114,5234,5237,5267,5471,5479,5523,12752,13059,13065,18981,18983,19165,20095,20097,20265,20266],"fullWord":4864},{"subwords":[4678,4714,4810,4865,4867,4935,5023,5361,5725,5735,5984,5995,6118,6119,9108,9384,9385,15060,15093,15362,15428,15433,20524,20532,20533,20560,20561,20587,20720,20724,20738,20817,20818,20990],"fullWord":4867},{"subwords":[4714,4728,4739,4865,4868,4874,4935,5567,5756,9117,9124,9128,10378,10414,10490,10495,10530,10536,10537,11065,20524,20566,20720,20721,20733,20735,20751,20755,20756,20771,21016,21138,21140,21142],"fullWord":4868},{"subwords":[4714,4720,4774,4865,4869,4935,4947,4985,4988,4993,5865,6122,7493,7604,12390,20524,20579,20581,20720,20722,20742,20774,20779,20785,20786,20790,20791],"fullWord":4869},{"subwords":[399,481,732,733,1145,1147,1155,4466,4574,4601,4728,4865,4870,5756,5956,10090,10093,10182,10292,10293,10324,10327,10350,10378,10490,13171,13204,13207,13208,13408,13409,13413,13439,13450,13478,13479,13630,13940,13941,13950,20303,20309,20369,20370,20501,20502,20524,20566],"fullWord":4870},{"subwords":[4728,4865,4871,5114,5146,5271,5756,10378,10443,10490,10780,10833,10942,10944,12752,12837,12845,12846,13110,13111,13114,20524,20566,20875,20883,20903,20904,20910,20917,20918],"fullWord":4871},{"subwords":[4763,4810,4818,4865,4872,5114,5115,5163,5165,5213,5273,5361,11536,11539,11595,11831,11833,11970,12066,12067,12068,12752,12979,13110,13111,15060,15078,15202,15600,15603,15610,15627,15632,15734,15738,20524,20875,20929,20933,20940,20941],"fullWord":4872},{"subwords":[4680,4714,4826,4831,4875,4876,4935,4939,5037,6144,9108,9111,9127,16319,16320,16483,16484,16780,16922],"fullWord":4876},{"subwords":[4678,4810,4842,4877,5984,6142,6171,15060,15093,15312,15318,15373,15748,18576,18577,18677,19240,19241],"fullWord":4877},{"subwords":[4810,4878,5114,5115,5234,5237,5239,6171,12752,12979,13008,13141,15060,15078,15083,15312,15318,15373,15600,15603,15610,15691,15694,15748,18677,18981,18983,19093,19101,19310,19311],"fullWord":4878},{"subwords":[3413,4639,4714,4774,4879,4909,4935,4985,4988,5856,5865,9079,9082,9207,12410,21249,21255,21272,21273],"fullWord":4879},{"subwords":[0,144,317,504,505,869,4472,4880,5318,5319,8217,8290,8327,8346,11107,11276,14736,14775,14808],"fullWord":4880},{"subwords":[4728,4826,4881,4882,5114,5117,5146,5148,5221,5223,5756,5760,8509,8721,8724,8725,8726,8730,8749,8752,8754,8755,8757,8881,8882,10378,10443,10447,10780,10782,10888,12752,12755,12802,12810,12837,12844,12845,12848,16574,16581,16602,16674,16676,16677,17044,17097,17323,17354,17357,17359,17360],"fullWord":4882},{"subwords":[4883,4884,5037,5046,5221,5233,5234,5242,5245,8617,8678,8685,8688,8691,8721,8724,8739,8741,8887,8892,8901,8935,9127,9447,12810,16653,16674,16704,16907,17323,17435,18742,18743,18947,19123],"fullWord":4884},{"subwords":[0,317,596,605,716,1194,4492,4493,4578,4887,8217,8298,8303,8420,8421,12311],"fullWord":4887},{"subwords":[148,326,327,328,341,342,540,541,4438,4472,4475,4590,4714,4888,4896,4928,4935,4936,4938,4971,4972,5658,5659,9103,9109,11107,11115,11145,11437,11438,11467,11626],"fullWord":4888},{"subwords":[106,148,326,2766,3402,4438,4889,4928],"fullWord":4889},{"subwords":[148,155,326,327,328,337,338,399,4438,4466,4590,4601,4714,4728,4739,4891,4892,4928,4935,4936,5659,5756,9103,9104,9117,9118,10090,10092,10093,10094,10119,10324,10327,10378,10414,10530,10536,10537],"fullWord":4892},{"subwords":[326,327,329,337,338,349,351,396,399,817,854,857,4466,4516,4599,4601,4607,4714,4728,4739,4810,4811,4891,4893,4935,5023,5588,5592,5756,5976,9103,9104,9117,9119,9376,9384,9385,10090,10093,10097,10119,10121,10122,10124,10202,10324,10327,10355,10378,10414,10502,10530,10531,10536,10537,10549,10675,10677,14736,14776,14780,14781,14961,14968,15060,15399,15428,15433,15444,15473,15474],"fullWord":4893},{"subwords":[183,299,326,337,415,418,4451,4890,4891,4894,4947,5123,7253,7293,7361,7585,7586,7649,7761,7764,7782,7801,9125,10090,10109,10119,10530,10533,10730,10793,10803,12812,12837],"fullWord":4894},{"subwords":[326,327,329,349,351,732,733,735,817,854,4516,4599,4607,4714,4810,4899,4935,5014,5023,5323,5377,5588,5956,5976,9103,9376,9384,9385,13171,13174,13176,13190,13200,13201,13286,13292,13294,13295,13439,13455,13478,13577,13705,13710,13712,14262,14303,14306,14736,14776,14851,14852,14853,14857,14961,14979,15060,15076,15248,15250,15428,15433,15508,15509],"fullWord":4899},{"subwords":[169,179,183,326,341,540,1020,4472,4896,4902,4971,5163,5234,9367,11107,11145,11265,11361,11626,11814,11831,11841,11854,12010,12686,12869,18339,18347,18389,18432,18882,18970,19026],"fullWord":4902},{"subwords":[1560,1767,1777,1780,1781,4618,4714,4904,4928,4935,4936,5632],"fullWord":4904},{"subwords":[1560,1767,1777,1780,1782,1790,1867,2384,2404,2405,2413,2417,4618,4714,4810,4905,4935,5023,5362,5632,9384,9385,14995,15005,15060,15402,15405,15428,15433],"fullWord":4905},{"subwords":[1510,1560,1636,1767,1770,1777,1780,1817,1938,4587,4618,4714,4728,4739,4906,4935,5632,5756,9117,10378,10414,10504,10505,10530,10536,10537],"fullWord":4906},{"subwords":[1767,1777,2505,2517,4907,5445,9449,9885],"fullWord":4907},{"subwords":[3406,3407,4155,4158,4639,4714,4810,4826,4909,4911,4912,4913,4935,4939,5023,5037,5040,5367,6023,9079,9082,9085,9111,9127,9384,9385,9389,9409,15021,15028,15048,15060,15087,15411,15412,15415,15428,15433,15436,15443,15526,16178,16298,16769,16780,16889,16890,16891,17722],"fullWord":4912},{"subwords":[3406,4155,4639,4714,4810,4909,4911,4915,4935,5023,9079,9082,9089,9384,9385,15021,15028,15060,15411,15412,15428,15433],"fullWord":4915},{"subwords":[4916,4947,4985,4993,7604,9092,9207],"fullWord":4916},{"subwords":[3406,4155,4639,4651,4714,4810,4909,4911,4917,4918,4935,4957,4959,5023,5030,5348,5355,9079,9082,9094,9384,9385,9396,9397,9885,15021,15028,15060,15411,15412,15422,15423,15428,15433],"fullWord":4918},{"subwords":[4639,4651,4714,4909,4914,4917,4919,4922,4935,4957,5567,5575,9079,9082,9096,9101,9865,9885,21140],"fullWord":4919},{"subwords":[4639,4651,4714,4909,4917,4920,4935,4957,9079,9082,9885],"fullWord":4920},{"subwords":[3429,3638,3656,3958,3965,3971,4238,4241,4923,4924,4925,5037,5040,5042,5096,5104,5221,5233,5234,5245,9127,9447,12757,13038,16178,16205,16769,16907,17316,17323,17435,17897,18823,18830,18947],"fullWord":4924},{"subwords":[3429,4263,4293,4375,4925,4927,4971,5462,9449,11626,12091,18823,18882,19429],"fullWord":4927},{"subwords":[4714,4728,4739,4928,4929,4935,4936,5756,9117,9118,10378,10414,10530,10532,10536,10537],"fullWord":4929},{"subwords":[4714,4826,4928,4930,4935,4936,4939,5037,9111,9127,16780,16781],"fullWord":4930},{"subwords":[4714,4826,4928,4931,4932,4933,4935,4936,4939,5011,5012,5037,5114,5117,5221,5223,5224,5728,9110,9111,9127,12745,12751,12752,12755,16780,16781,17323],"fullWord":4932},{"subwords":[4714,4720,4774,4935,4937,4947,4985,4988,4993,5865,7493,7505,7604],"fullWord":4937},{"subwords":[4680,4714,4728,4731,4734,4739,4742,4826,4935,4939,4940,5037,5691,5693,5756,5760,5771,5773,5790,9108,9111,9117,9121,9127,9416,9417,10378,10383,10385,10392,10414,10415,10451,10530,10535,10536,10537,10551,16319,16320,16780,16784,17044,17068,17069],"fullWord":4940},{"subwords":[4680,4714,4826,4935,4939,4941,5037,6031,6039,6042,9108,9111,9127,16319,16320,16323,16342,16780,16782,16903],"fullWord":4941},{"subwords":[4667,4714,4928,4935,4936,4942,4943,5680,5681,9108,18576,18577,18835,18836,18844,18845],"fullWord":4943},{"subwords":[4678,4714,4810,4842,4935,4942,4944,5023,5034,5680,5725,5735,5984,5995,9108,9384,9385,15060,15093,15095,15312,15318,15321,15322,15428,15433,15542,15748,18576,18577,18835,18844,18845,18847,18848,18941,18942,19240,19241,19274],"fullWord":4944},{"subwords":[4714,4810,4935,4946,5023,6406,6537,6543,6544,6553,6554,6555,6621,6622,6623,7056,7081,9384,9385,15060,15114,15428,15433,15446,15450,15451],"fullWord":4946},{"subwords":[326,341,540,4472,4578,4890,4896,4947,4948,4971,7253,7317,7345,7447,8186,11107,11127,11132,11145,11408,11626,11649,21051,21140],"fullWord":4948},{"subwords":[4714,4724,4826,4935,4939,4942,4945,4947,4949,4956,5037,5063,5680,5684,5716,7460,7540,7541,7635,7637,9111,9127,9447,16457,16780,16907,16911,16912,17856,18575,18835,18837,18844,18845,18850,18947],"fullWord":4949},{"subwords":[4714,4928,4935,4936,4947,4950,5709,7578],"fullWord":4950},{"subwords":[4714,4810,4935,4947,4951,5023,5028,5351,5709,5988,7578,7617,7997,9384,9385,15060,15141,15428,15433,15437,15461,15462],"fullWord":4951},{"subwords":[4947,4952,4953,4956,5037,5046,7460,7635,7637,8617,8678,8685,8688,8691,8935,9127,9447,16653,16805,16809,16907,18742,18947],"fullWord":4953},{"subwords":[4947,4954,4955,4956,5037,7460,7635,7637,9127,9447,16907,18947],"fullWord":4955},{"subwords":[4714,4810,4826,4835,4935,4939,4957,4959,4960,4961,5023,5030,5032,5037,5050,5355,5356,5367,9111,9127,9384,9385,9389,9396,9397,9399,9409,9885,9894,10041,15060,15087,15428,15433,15436,15443,15526,15534,15535,16780,16889,16890,16891,16954,16955,16959,16960,17722],"fullWord":4960},{"subwords":[4947,4962,4985,4993,7604,9276,9885,9913,9914,9922],"fullWord":4962},{"subwords":[169,326,327,337,338,399,434,488,1009,4466,4551,4601,4604,4714,4728,4739,4747,4839,4891,4935,4942,4963,5620,5680,5756,6055,9103,9104,9117,9437,10090,10093,10119,10126,10247,10248,10324,10327,10378,10414,10460,10530,10536,10537,10691,10694,18339,18347,18349,18350,18370,18541,18547,18833,18835,18844,18845,18863,18864,18866,18867],"fullWord":4963},{"subwords":[4714,4728,4739,4928,4931,4935,4936,4964,4965,5011,5114,5146,5147,5756,9110,9117,9118,9125,10378,10414,10443,10530,10533,10536,10537,10780,12745,12752,12812,12815,12837,12841,12845],"fullWord":4965},{"subwords":[4928,4931,4933,4964,4966,5037,5221,9125,9126,9127,10530,10533,10534,10535,12745,12751,12812,12822,12837,12844,16837,17068,17323,17350,17354,17357,17364,17365],"fullWord":4966},{"subwords":[4714,4728,4739,4935,4942,4970,5471,5472,5479,5680,5756,9117,9449,10378,10414,10460,10470,10530,10536,10537,10552,10553,10691,10694,11050,11052,18835,18844,18845,18863,18864,18866,18867,19605,19897],"fullWord":4970},{"subwords":[4714,4722,4810,4818,4823,4824,4826,4935,4938,4939,4971,4972,4973,4974,4975,4983,5023,5037,5367,5830,5831,5845,9109,9111,9127,9384,9385,9389,9409,9422,11539,11626,11641,11743,11744,11745,11764,11765,15060,15087,15202,15224,15428,15433,15436,15443,15480,15481,15482,15484,15489,15526,16375,16780,16889,16890,16891,17722],"fullWord":4974},{"subwords":[4971,4976,11626,11637,18843,18882,18892,21140],"fullWord":4976},{"subwords":[4714,4928,4935,4936,4938,4971,4972,4978,9109,11626,11688,11689],"fullWord":4978},{"subwords":[4714,4810,4818,4935,4938,4971,4972,4973,4979,5023,5830,9109,9384,9385,11539,11626,11688,11689,11692,11743,11744,15060,15202,15428,15433,15480,15481,15482,15487],"fullWord":4979},{"subwords":[4971,4980,5163,5234,5523,9369,9449,11626,11831,11841,11854,12010,12091,12760,12869,13048,13059,18882,19026,19429],"fullWord":4980},{"subwords":[4714,4728,4739,4935,4938,4971,4972,4981,5014,5756,5782,9109,9117,9178,9184,9186,10378,10414,10530,10536,10537,10584,10595,10596,10611,10612,10665,10957,11492,11626,11659,11663,11668,13478,13705,13710,13743,13744,13950,13958],"fullWord":4981},{"subwords":[4971,4977,4982,5014,9124,9128,9178,9192,10530,10584,10611,10618,10665,10957,11626,11659,11663,14009,21140,21146],"fullWord":4982},{"subwords":[4971,4984,11626,11637,18882,18892,20842],"fullWord":4984},{"subwords":[200,326,336,349,359,605,610,647,691,854,905,4461,4492,4532,4536,4901,4985,4986,4987,5007,5037,5314,5315,9127,9307,9376,9378,9409,12227,12228,12274,12276,14736,14751,14776,14779,14784,14786,14821,14826,14828,14838,14839,15428,15443,15491,15493,15893,15928,15986,15988,16028,16858,16889,17722],"fullWord":4987},{"subwords":[4714,4774,4785,4810,4826,4935,4939,4985,4988,4990,4991,4992,5007,5023,5037,5367,5865,5875,5918,5996,6000,9111,9127,9307,9384,9385,9389,9409,12358,12359,15060,15087,15175,15177,15227,15230,15296,15428,15433,15436,15443,15491,15493,15500,15501,15526,15527,16381,16439,16780,16858,16860,16889,16890,16891,16893,17243,17244,17722],"fullWord":4991},{"subwords":[4714,4720,4774,4928,4935,4936,4947,4985,4988,4989,4993,4994,5865,7493,7604],"fullWord":4994},{"subwords":[4714,4720,4774,4795,4935,4947,4985,4988,4993,4995,5001,5567,5569,5573,5579,5675,5865,6199,7493,7604,21120,21140,21144],"fullWord":4995},{"subwords":[4947,4985,4993,4996,5001,5573,7604,8617,8649,9044,12429,21140,21144],"fullWord":4996},{"subwords":[4714,4720,4728,4739,4774,4935,4947,4985,4988,4993,4997,5756,5865,5890,7477,7478,7484,7493,7586,7604,7680,7684,9117,9265,10378,10398,10414,10427,10530,10536,10537,10544,10625,10628,10637,12438,12439],"fullWord":4997},{"subwords":[4947,4956,4985,4993,4999,5000,5007,5037,5485,5488,5507,5513,5515,5522,7460,7604,7611,7759,7760,8151,8160,9127,9307,9449,9450,16815,16858,16866,17292,18083,18084,18117,18125,19885],"fullWord":5000},{"subwords":[4947,4985,4993,5002,7604,9231,9297],"fullWord":5002},{"subwords":[4971,4985,5003,5507,5516,9276,9449,9885,9913,9914,11626,11697,11702,11721,12091,12443],"fullWord":5003},{"subwords":[4714,4774,4928,4935,4936,4985,4988,4989,5005,5865,9297,9299,12448],"fullWord":5005},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5006,5023,5865,5874,5996,9297,9299,9300,9384,9385,12358,12448,15060,15175,15227,15428,15433,15491],"fullWord":5006},{"subwords":[4714,4774,4788,4928,4935,4936,4942,4985,4988,4989,5008,5009,5680,5865,9325,12374,12463,18607,18610,18835,18836,18844,18845,18894,18898,18899],"fullWord":5009},{"subwords":[4714,4826,4928,4931,4932,4933,4935,4936,4939,5011,5012,5037,5114,5117,5221,5223,5224,5728,9110,9111,9127,12745,12751,12752,12755,16780,16781,17323],"fullWord":5012},{"subwords":[4985,5013,5172,9357,9360,12474,12493,12758,21024],"fullWord":5013},{"subwords":[4714,4728,4739,4935,5014,5015,5756,9117,10378,10414,10494,10530,10536,10537,10665,13478,13705,13710,13743,13744,13874,13875,13950,13958],"fullWord":5015},{"subwords":[4928,4931,4934,5014,5016,5208,12745,14020,14032,21140,21146,21154],"fullWord":5016},{"subwords":[4714,4728,4739,4935,5014,5017,5114,5146,5200,5756,9110,9117,9125,10378,10414,10443,10530,10533,10536,10537,10665,10780,10864,10865,10866,12752,12812,12815,12837,12841,12845,12916,13478,13705,13710,13743,13744,13950,13958,13967,14020,14032,14056,14061,14063],"fullWord":5017},{"subwords":[4714,4928,4935,4936,5014,5018,13478,13569,13705,13710,13813,13815,13816,14237],"fullWord":5018},{"subwords":[4714,4810,4935,5014,5019,5023,5377,9384,9385,13478,13569,13577,13705,13710,13712,13813,13815,13816,13817,14237,14262,14278,14303,14306,15060,15076,15248,15428,15433,15508,15509,15519],"fullWord":5019},{"subwords":[3161,3406,3429,3430,3431,3432,4117,4155,4639,4714,4810,4909,4911,4925,4935,4942,5023,5024,5034,5677,5680,6057,9079,9082,9384,9385,15021,15028,15051,15060,15312,15318,15411,15412,15428,15433,15542,15748,18823,18835,18844,18845,18847,18941,18942,19267,19268,19274],"fullWord":5024},{"subwords":[4714,4728,4739,4810,4935,5023,5025,5374,5430,5567,5570,5756,9117,9119,9124,9128,9384,9385,10378,10414,10495,10530,10536,10537,10549,10677,11065,11074,15060,15077,15201,15428,15433,15442,15444,15473,15474,15866,21140,21142],"fullWord":5025},{"subwords":[4714,4724,4810,4826,4935,4939,4942,4945,5023,5027,5034,5035,5037,5060,5063,5360,5367,5368,5680,5684,6018,9111,9127,9384,9385,9389,9409,9447,15060,15087,15306,15312,15318,15428,15433,15436,15443,15526,15542,15543,15748,16457,16780,16889,16890,16891,16907,16911,16912,17722,17856,17881,17970,18575,18835,18837,18844,18845,18847,18849,18850,18941,18942,18943,18947,19274,19277],"fullWord":5027},{"subwords":[4714,4810,4826,4935,4939,4947,4956,5023,5028,5029,5037,5351,5353,5367,5716,5988,5992,7460,7617,7621,7997,7999,8000,9111,9127,9384,9385,9389,9409,15060,15087,15141,15428,15433,15436,15437,15439,15443,15461,15472,15526,16780,16889,16890,16891,17722],"fullWord":5029},{"subwords":[4714,4810,4928,4935,4936,4957,4958,4959,5023,5030,5031,5355,5364,9384,9385,9396,9397,9885,9887,15060,15074,15428,15433],"fullWord":5031},{"subwords":[4928,4985,5033,10530,12438,15428,15491],"fullWord":5033},{"subwords":[200,326,336,341,347,349,359,540,544,554,555,854,869,883,905,4461,4472,4489,4896,4901,4971,4983,5037,5038,5318,5321,9127,9376,9409,9422,11107,11123,11145,11147,11276,11285,11314,11330,11626,11628,11641,14736,14751,14776,14779,14808,14820,15428,15443,15480,15489,15893,15928,15973,16028,16764,16889,17722],"fullWord":5038},{"subwords":[67,200,326,336,349,359,854,905,1243,1254,1366,1372,1376,1419,1422,1763,1777,1788,1867,1871,2308,2315,2316,2324,2325,2343,4427,4430,4461,4901,4908,5037,5039,5303,5305,5362,5363,9127,9376,9409,14715,14736,14751,14776,14779,15402,15410,15428,15443,15893,15928,16028,16765,16889,17722],"fullWord":5039},{"subwords":[4639,4714,4826,4909,4910,4913,4928,4935,4936,4939,5037,5040,5041,6023,9079,9082,9085,9111,9127,16178,16298,16769,16780,16781],"fullWord":5041},{"subwords":[3638,3656,5037,5040,5042,5043,5044,5096,5104,5221,5229,9127,12757,16178,16769,16779,16903,17316,17323,17332,17434],"fullWord":5043},{"subwords":[4263,4267,4370,5037,5040,5044,5045,9127,9449,9450,16178,16252,16253,16769,16779,16903,18062,18083],"fullWord":5045},{"subwords":[4714,4826,4928,4935,4936,4939,5037,5046,5047,8617,8619,8620,8623,8625,8626,8628,8678,9111,9127,16574,16581,16615,16780,16781],"fullWord":5047},{"subwords":[4714,4826,4935,4939,5037,5046,5048,6039,8617,8619,8623,8625,8626,8628,8678,8681,8682,9111,9127,16574,16581,16582,16609,16615,16619,16780,16782,16903],"fullWord":5048},{"subwords":[4714,4826,4835,4928,4935,4936,4939,4957,4958,4961,5037,5050,5051,9111,9127,9885,9894,16780,16781,16954,16955,16959],"fullWord":5051},{"subwords":[200,326,336,337,340,341,347,470,540,544,555,4461,4472,4489,4891,4895,4896,4901,4971,4983,5037,5053,9127,9414,9422,10090,10107,10119,10136,10161,10530,10535,10584,10585,10586,11107,11123,11145,11147,11148,11151,11173,11182,11330,11626,11628,11641,11659,11663,11685,15893,15928,15931,15942,15973,16764,17012,17068,17076],"fullWord":5053},{"subwords":[200,326,336,341,347,540,544,555,4461,4463,4472,4489,4578,4582,4896,4901,4971,4983,5037,5054,9127,9422,11107,11123,11145,11147,11330,11408,11424,11626,11628,11641,15893,15928,15973,16103,16764,21051,21055,21096,21140,21141],"fullWord":5054},{"subwords":[4714,4722,4723,4826,4935,4938,4939,4971,4972,4975,4983,5037,5055,5845,6039,9109,9111,9127,9422,9423,11569,11626,11641,11764,11774,11776,12082,16356,16375,16376,16780,16782,16903],"fullWord":5055},{"subwords":[4714,4774,4785,4795,4826,4935,4939,4985,4988,4992,5007,5037,5056,5567,5572,5579,5580,5865,5875,5918,9111,9127,9307,16381,16780,16788,16858,16860,17243,18287,21096,21120,21122,21130,21140,21141,21144,21145],"fullWord":5056},{"subwords":[4985,5007,5037,5057,5172,5188,5221,5277,5280,5282,9127,9237,9238,9307,9360,9366,12493,12501,12560,12606,12610,12758,13119,13124,16858,17284,17323,17383,17464,17469,20774,20779,20783,20804,20806,20807,20897],"fullWord":5057},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5014,5021,5037,5058,5756,5760,6033,9111,9117,9121,9127,9416,9417,10378,10414,10415,10530,10535,10536,10537,10551,10665,10672,10681,10682,13478,13488,13705,13710,13716,13743,13744,13745,13950,13958,13961,14421,16780,16784,16883,17044,17068,17069,17088,17530,17562,17563],"fullWord":5058},{"subwords":[169,170,200,326,336,337,340,434,488,4461,4891,4895,4901,5037,5059,9127,9437,9447,10090,10107,10119,10126,10241,10530,10535,10686,10691,10707,15893,15928,15931,15942,15960,16041,16840,16907,17022,17068,17093,17741,18339,18340,18347,18349,18353,18833,18863,18947],"fullWord":5059},{"subwords":[4714,4826,4849,4935,4939,5037,5061,5471,5478,6039,9111,9127,9431,9432,9449,9450,16780,16782,16903,18062,18066,18067,18073,18083,19876,19877,19882],"fullWord":5061},{"subwords":[4714,4810,4935,4942,5023,5034,5064,5680,5682,8503,8552,8558,8617,8619,8621,8625,8626,8672,8673,8688,9384,9385,15060,15312,15318,15428,15433,15542,15748,18697,18701,18739,18835,18844,18845,18847,18941,18942,19274],"fullWord":5064},{"subwords":[5037,5065,5066,5221,5233,5234,5245,9127,9447,16907,17323,17435,18947,18950,18964,19130,19131,19144],"fullWord":5066},{"subwords":[200,204,326,336,605,610,647,691,1120,1124,4461,4492,4571,4901,4985,5007,5037,5067,5068,5069,5070,9127,9307,15893,15928,15986,15988,16858,19911,19920,19948,19957,20107,20113,20114,20115,20152,20154,20167,20191],"fullWord":5069},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5071,5073,5074,5076,5367,5381,5385,9111,9127,9384,9385,9389,9409,15060,15087,15337,15354,15428,15433,15436,15443,15526,15549,15550,15554,16780,16889,16890,16891,17722,20058,20070,20126,20129,20130,20132,20133,20134,20197,20198],"fullWord":5074},{"subwords":[4714,4810,4935,4942,5023,5034,5071,5073,5075,5381,5680,9384,9385,15060,15312,15318,15337,15428,15433,15542,15549,15550,15555,15748,18835,18844,18845,18847,18941,18942,19274,20058,20080,20095,20126,20129,20130,20132],"fullWord":5075},{"subwords":[4714,4724,4826,4935,4939,4942,4945,5037,5063,5071,5076,5077,5680,5684,9111,9127,9447,16457,16780,16907,16911,16912,17856,18575,18835,18837,18844,18845,18850,18947,20088,20095,20101,20126,20129,20130,20134,20197,20198],"fullWord":5077},{"subwords":[4714,4928,4935,4936,5071,5072,5078,9451,20126,20129,20130],"fullWord":5078},{"subwords":[4714,4774,4935,4985,4988,5071,5079,5865,9451,12387,20008,20027,20126,20129,20130,20152,20157,20159],"fullWord":5079},{"subwords":[4947,4985,4993,5080,7604,7644,20152],"fullWord":5080},{"subwords":[5037,5081,5082,5221,5233,5234,5245,9127,9447,13101,16907,17323,17435,18947,19165,20243,20246],"fullWord":5082},{"subwords":[4985,5083,5084,5085,9297,9592,9593],"fullWord":5085},{"subwords":[4985,5007,5037,5083,5084,5086,5088,9127,9297,9302,9307,9592,9594,9595,16858],"fullWord":5086},{"subwords":[4985,5083,5084,5087,9297,9592,21140,21144],"fullWord":5087},{"subwords":[30,43,51,53,183,184,385,388,399,472,1243,1246,1296,1301,1302,1515,1560,1636,1900,1938,2029,2058,2059,2100,2102,2106,4427,4466,4587,4601,4618,4728,5089,5114,5146,5756,10061,10090,10093,10324,10327,10378,10443,10730,10748,10753,10754,10780,12752,12837,12845],"fullWord":5089},{"subwords":[1560,2042,2058,2059,2072,2205,2207,2384,2446,4618,4810,5090,5114,5115,5632,12752,12959,12960,12979,14995,15060,15078,15576,15577,15579,15580,15600,15603,15610],"fullWord":5090},{"subwords":[1767,1777,1837,1840,1851,2042,2058,2127,2130,4985,5091,5172,9360,12406,12481,12493,12700,12758],"fullWord":5091},{"subwords":[1560,1574,1777,1780,1784,1788,1851,1858,2058,2059,2062,2065,2069,2099,4618,4629,4714,4826,4908,4935,4939,5037,5092,5114,5117,5221,5223,5728,9110,9111,9127,12700,12701,12752,12755,16765,16780,17308,17323],"fullWord":5092},{"subwords":[51,67,183,197,200,385,392,487,1243,1254,1296,1300,1422,2029,2034,2058,2069,2100,2101,2102,4427,4430,4587,5093,5221,10061,10071,10090,10107,10181,10323,10730,10733,10748,10758,12837,12844,15893,15942,16999,17096,17308,17323,17324,17354,17357],"fullWord":5093},{"subwords":[51,67,183,197,200,201,905,1243,1254,1366,1372,1376,1419,1422,2029,2030,2031,2032,2033,2034,2058,2069,2308,2315,2316,2343,2446,2448,2449,2476,4427,4430,5094,5216,5217,5221,5303,5305,12680,12683,12959,12964,13007,14736,14751,15561,15563,15576,15590,15600,15609,15673,15893,16030,17303,17308,17323,17324],"fullWord":5094},{"subwords":[2058,2069,2127,2130,2133,2151,2152,2153,2160,2178,2179,2182,2227,5095,5172,5188,5221,12481,12489,12493,12501,12560,17259,17262,17308,17323,17383,17397],"fullWord":5095},{"subwords":[3145,3147,3638,3644,3657,3777,3786,3787,3816,3817,3965,3968,3969,4639,4656,4774,4788,5096,5097,5114,5172,5176,5234,5237,5653,5856,5865,5953,6057,12374,12493,12499,12574,12581,12582,12752,12874,12876,18607,18610,18981,18983,19036,19038,19039],"fullWord":5097},{"subwords":[3120,3538,3638,3644,3657,3685,3686,3701,3704,3708,4639,4656,4714,4728,4739,4909,4935,5096,5098,5114,5144,5145,5146,5650,5756,9079,9082,9110,9117,9125,10378,10414,10443,10518,10530,10533,10536,10537,10760,10767,10780,12752,12757,12812,12815,12837,12841,12845],"fullWord":5098},{"subwords":[3638,3644,3645,3657,3697,3698,4639,4651,4656,5096,5099,5100,5114,12745,12752],"fullWord":5100},{"subwords":[3638,3644,3647,3657,3697,3698,3893,3898,3899,3906,3907,4118,4639,4651,4656,4659,4810,5096,5099,5101,5114,5115,5348,5355,12752,12965,12979,15021,15028,15060,15078,15592,15593,15594,15600,15603,15610],"fullWord":5101},{"subwords":[3638,3644,3657,3697,3698,3965,3968,3969,4639,4651,4656,5096,5099,5102,5114,5234,5237,6057,12752,18981,18983,19010,19011],"fullWord":5102},{"subwords":[3638,3826,3861,3893,3965,5096,5105,5196,5234,12762,12965,12976,13008,15592,15600,15642,15659,15691,15697,19060,19093,19098,19106,19310],"fullWord":5105},{"subwords":[4810,5106,5114,5115,12745,12746,12752,12979,15060,15078,15600,15601,15603,15610],"fullWord":5106},{"subwords":[5107,5108,5114,5123,5125,5718,7782,12745,12752],"fullWord":5108},{"subwords":[4810,5107,5109,5114,5115,5123,5125,5351,5718,5988,5989,7782,7788,7855,7856,12745,12746,12752,12798,12979,15060,15078,15141,15600,15603,15610],"fullWord":5109},{"subwords":[4826,5107,5110,5114,5117,5123,5125,5127,5139,5221,5223,5224,5718,5721,7460,7782,7785,7790,12745,12751,12752,12755,17323],"fullWord":5110},{"subwords":[4826,5111,5112,5113,5114,5117,5221,5223,5224,12745,12751,12752,12755,17323],"fullWord":5112},{"subwords":[5114,5120,5121,5950,6406,6874,12745,12752,12771,12775],"fullWord":5121},{"subwords":[4810,5114,5115,5120,5122,5950,6406,6874,6940,6951,6955,7056,7103,12752,12771,12775,12777,12979,15060,15078,15114,15600,15603,15610],"fullWord":5122},{"subwords":[5111,5123,5124,5163,5193,7782,7826,7828,11831,11844,11921,11923,12745],"fullWord":5124},{"subwords":[183,191,269,270,299,817,4451,4516,4607,4810,5114,5115,5123,5125,5126,5310,5351,5588,5666,5707,5718,5976,5988,5989,7253,7375,7383,7461,7761,7782,7788,7855,7856,7907,7908,12680,12681,12752,12798,12979,12980,14736,14758,14762,14763,14961,15060,15078,15141,15561,15600,15603,15610],"fullWord":5126},{"subwords":[4826,5114,5117,5123,5125,5127,5128,5129,5139,5140,5221,5223,5567,5572,5675,5718,5721,7460,7782,7785,7790,7895,7897,12752,12755,13147,16315,17323,17472,21096,21130,21154],"fullWord":5129},{"subwords":[5107,5114,5123,5125,5130,5709,5718,7522,7782,12745,12752],"fullWord":5130},{"subwords":[4810,5114,5115,5123,5125,5131,5351,5709,5718,5988,5989,7522,7782,7788,7855,7856,7858,7859,8043,12752,12798,12979,15060,15078,15141,15600,15603,15610],"fullWord":5131},{"subwords":[4714,4935,4947,5114,5123,5125,5132,5133,5709,5718,7522,7523,7578,7782,9110,12752],"fullWord":5132},{"subwords":[4714,4826,4935,4939,4947,4956,5037,5114,5117,5123,5125,5127,5133,5134,5139,5221,5223,5716,5718,5721,5728,7460,7523,7524,7782,7785,7790,9110,9111,9127,12752,12755,16780,17323],"fullWord":5134},{"subwords":[4728,5114,5123,5125,5135,5146,5709,5718,5756,7477,7478,7522,7525,7782,7801,10378,10398,10443,10780,10783,10793,10796,10798,12752,12792,12793,12837,12845],"fullWord":5135},{"subwords":[183,197,200,299,4451,4454,4472,4489,5123,5136,5137,5139,5163,5171,5221,7253,7258,7317,7342,7396,7460,7761,7763,7782,7785,11107,11123,11127,11140,11265,11330,11813,11831,11845,12081,12872,15893,15910,15921,15973,17188,17323,17324,17378],"fullWord":5137},{"subwords":[183,299,605,4451,4492,4502,5123,5138,5172,5173,5179,7253,7365,7761,7782,7813,12230,12257,12493,12509,13171,13239,13251,14020,14102,14107],"fullWord":5138},{"subwords":[4947,4956,4985,4993,4998,4999,5007,5037,5123,5139,5142,5143,5172,5179,5180,5188,5221,5228,7460,7604,7611,7782,7785,9127,9307,9360,9366,12493,12501,12509,12512,12560,12758,16815,16858,16866,17323,17383,17389],"fullWord":5143},{"subwords":[4947,4985,4993,4998,5123,5142,5149,5172,5179,7586,7604,7782,7801,9125,9235,9360,10530,10533,10637,10641,10652,10663,10793,10814,10826,12438,12493,12509,12758,12812,12837],"fullWord":5149},{"subwords":[183,442,5150,5151,5389,10090,10202,10730,10878,12680,12837,12856,12948,14736,15561,15600,15623],"fullWord":5151},{"subwords":[4728,4744,5114,5146,5147,5150,5152,5756,5780,10378,10443,10780,12745,12752,12837,12845],"fullWord":5152},{"subwords":[5150,5153,10833,10849,10864,12837,13967,14020,14056,14080,14086,14121],"fullWord":5153},{"subwords":[183,468,605,4472,4479,4492,5156,5163,5172,5173,10090,10136,10169,10730,10738,10741,11107,11173,11213,11265,11810,11831,11832,11865,11891,11893,12244,12493,12494,12522,12523,12837],"fullWord":5156},{"subwords":[4728,4763,4767,4774,5114,5146,5157,5163,5165,5172,5176,5756,5782,5865,5953,10378,10422,10427,10443,10444,10780,10781,10822,11492,11500,11512,11516,11831,11833,11834,11865,11870,11891,11896,12493,12499,12504,12522,12525,12752,12837,12838,12845,12866,12876],"fullWord":5157},{"subwords":[5158,5159,5196,5197,5216,5221,5397,5398,10833,10854,10878,10881,12762,12764,12837,12844,12976,12977,13007,13024,15600,15609,15642,15643,17323,17354,17357,17370],"fullWord":5159},{"subwords":[5158,5160,5196,5260,5397,5523,10833,10878,10906,10922,12762,12765,12837,12976,13051,15600,15642],"fullWord":5160},{"subwords":[177,183,326,341,540,552,605,643,4457,4472,4479,4492,4896,4971,4985,5163,5164,5172,5173,9360,11107,11145,11156,11213,11265,11626,11697,11702,11810,11831,11841,11854,11891,11893,12244,12443,12493,12522,12523,12758],"fullWord":5164},{"subwords":[4947,4971,4985,4993,4998,5123,5142,5163,5168,5172,5179,7604,7782,9360,11626,11649,11697,11702,11711,11831,11841,11854,11891,12443,12493,12509,12522,12758],"fullWord":5168},{"subwords":[4971,4985,5163,5169,5172,9113,9357,9360,11626,11637,11697,11702,11714,11831,11841,11854,11891,12443,12493,12522,12758],"fullWord":5169},{"subwords":[4971,4985,5163,5170,5172,5193,9360,11626,11697,11702,11831,11841,11844,11854,11891,11897,11911,11921,11923,11931,12443,12493,12522,12758],"fullWord":5170},{"subwords":[148,183,605,4438,4441,4492,5172,5173,5174,10090,10169,10730,10741,12493,12494,12745,12837],"fullWord":5174},{"subwords":[183,215,605,675,693,694,695,1009,1024,1025,4492,4500,4512,4551,4605,4774,4788,5114,5172,5173,5175,5176,5234,5237,5620,5865,5953,6055,6074,12229,12293,12325,12374,12493,12499,12574,12575,12581,12582,12686,12687,12752,12876,18339,18408,18432,18541,18607,18610,18970,18981,18983,19036,19038,19039],"fullWord":5175},{"subwords":[4680,4774,4785,4786,4826,5114,5117,5172,5176,5177,5178,5188,5221,5223,5665,5865,5875,5918,5953,5955,12339,12340,12344,12493,12499,12500,12501,12506,12560,12561,12562,12752,12755,12876,12879,16319,16320,16335,16381,17323,17383,17387],"fullWord":5178},{"subwords":[4774,4795,5114,5172,5176,5181,5290,5567,5575,5579,5865,5953,9836,9837,9841,9865,12493,12499,12752,12876,21120,21154,21174,21175,21183,21184],"fullWord":5181},{"subwords":[183,197,200,605,610,657,666,686,4492,5172,5173,5182,5183,5188,5221,12252,12493,12501,12528,12560,15893,15986,15988,17323,17324,17383],"fullWord":5183},{"subwords":[4774,5114,5172,5176,5184,5185,5865,5953,12353,12493,12499,12528,12533,12745,12752,12876],"fullWord":5185},{"subwords":[5172,5186,5187,5188,5196,5197,5216,5221,12493,12501,12548,12560,12762,12764,12976,12977,13007,15600,15609,15640,15641,15642,15643,17262,17323,17383,17397],"fullWord":5187},{"subwords":[5172,5188,5189,5190,5221,5233,5234,5245,5507,5522,5523,5524,5548,12493,12501,12503,12560,12574,12591,12597,12659,12663,12888,13055,13059,13082,17278,17281,17323,17383,17435,17445,17999,18005,18117,19036,19057,19434,19452,19664,19780],"fullWord":5190},{"subwords":[148,183,4438,4441,5111,5191,12745],"fullWord":5191},{"subwords":[4728,5111,5114,5146,5147,5192,5756,10378,10443,10780,10833,12745,12752,12837,12845,12846],"fullWord":5192},{"subwords":[4763,5111,5114,5163,5165,5166,5193,5194,11831,11833,11844,11921,11923,11926,12745,12752],"fullWord":5194},{"subwords":[4810,5114,5115,5196,5198,5292,5293,5296,12752,12762,12906,12907,12976,12979,15060,15078,15600,15603,15605,15610,15642,21249,21260,21304],"fullWord":5198},{"subwords":[183,189,605,693,781,1028,4492,5172,5173,5199,5234,12257,12293,12493,12574,12575,12686,12937,13171,13239,13261,13364,14020,14102,14188,18339,18408,18432,18436,18970,19036,19075],"fullWord":5199},{"subwords":[4810,4826,5114,5115,5116,5117,5200,5202,5203,5204,5215,5216,5221,5223,5225,5402,5403,6004,6033,12752,12755,12916,12925,12936,12979,12982,13007,13478,13486,13487,13488,13577,13607,14020,14023,14147,14148,14149,14166,14167,14168,14262,14281,14350,14357,14358,14383,14384,14385,14403,15060,15078,15081,15087,15248,15272,15305,15600,15603,15609,15610,15611,15663,15664,15668,15676,15677,17323,17406,17419,17530,17638,17639],"fullWord":5203},{"subwords":[4714,4810,4935,5014,5023,5114,5115,5200,5202,5206,5215,5377,5402,9110,9384,9385,12752,12916,12979,13478,13486,13577,13587,13705,13710,13712,14020,14032,14147,14148,14262,14303,14306,14350,14357,15060,15076,15078,15248,15428,15433,15508,15509,15600,15603,15610,15663,15664],"fullWord":5206},{"subwords":[4947,4985,4993,4998,5014,5123,5142,5172,5179,5207,7604,7612,7782,9360,12453,12493,12509,12758,13721,13765,13773,13809,14020,14032,14102,14107,14109],"fullWord":5207},{"subwords":[148,183,4438,4441,5111,5196,5209,12680,12745,12762,12976,14736,15561,15600,15642],"fullWord":5209},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5114,5115,5116,5117,5211,5212,5216,5219,5221,5223,5225,5367,5728,6004,9110,9111,9127,9384,9385,9389,9409,12752,12755,12979,12982,13007,13022,15060,15078,15081,15087,15428,15433,15436,15443,15526,15600,15603,15609,15610,15611,15676,15677,16780,16889,16890,16891,17323,17419,17722],"fullWord":5211},{"subwords":[4763,4810,4818,5114,5115,5163,5165,5213,5214,6008,11539,11831,11833,11970,12752,12974,12979,15060,15078,15202,15600,15603,15610,15627,15632],"fullWord":5214},{"subwords":[183,197,200,487,905,5216,5217,5218,5221,10090,10107,10181,10202,10205,10730,10733,10878,10881,12680,12683,12837,12844,12948,12950,13007,14736,14751,15561,15563,15600,15609,15673,15893,15942,16030,17303,17323,17324,17354,17356,17357],"fullWord":5218},{"subwords":[183,197,200,269,270,280,299,4451,4453,4454,4707,4826,5114,5117,5123,5125,5127,5139,5221,5222,5223,5707,5708,5718,5721,7253,7258,7396,7460,7761,7763,7782,7785,7790,12752,12755,13015,15893,15910,15912,15921,16270,16273,17323,17324],"fullWord":5222},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5226,5227,5229,5231,5358,5406,6004,6039,12752,12755,12979,12982,13007,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,15679,17323,17332,17419,17424,17434],"fullWord":5226},{"subwords":[4947,4956,4985,4993,4998,4999,5007,5037,5123,5139,5142,5143,5172,5179,5180,5188,5221,5228,7460,7604,7611,7782,7785,9127,9307,9360,9366,12493,12501,12509,12512,12560,12758,16815,16858,16866,17323,17383,17389],"fullWord":5228},{"subwords":[4826,5114,5117,5221,5223,5224,5227,5229,5230,6039,12745,12751,12752,12755,17323,17332,17434],"fullWord":5230},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5226,5227,5229,5231,5358,5406,6004,6039,12752,12755,12979,12982,13007,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,15679,17323,17332,17419,17424,17434],"fullWord":5231},{"subwords":[4826,5114,5117,5221,5223,5227,5229,5232,6039,12752,12755,17323,17332,17434],"fullWord":5232},{"subwords":[183,269,270,299,1009,4451,4551,5114,5123,5125,5234,5235,5237,5620,5707,5718,6055,7253,7416,7417,7418,7540,7761,7768,7782,7874,12686,12752,18339,18342,18432,18541,18970,18981,18983,18993,18994,18995,18996],"fullWord":5235},{"subwords":[148,183,911,4438,4441,4537,5234,5236,5327,12680,12686,12745,13008,14736,14898,15561,15600,15691,18339,18432,18449,18451,18463,18970,19093,19094,19310],"fullWord":5236},{"subwords":[4810,4826,5114,5115,5116,5117,5118,5216,5221,5223,5225,5233,5234,5237,5239,5240,5241,5245,5360,6004,6018,12752,12755,12979,12982,13007,13008,13011,15060,15078,15081,15087,15306,15312,15318,15600,15603,15609,15610,15611,15676,15677,15691,15694,15695,15700,15748,16457,17323,17419,17429,17430,17435,17924,17925,17981,18575,18981,18983,18985,19093,19101,19103,19113,19310,19311],"fullWord":5240},{"subwords":[4714,4810,4935,4942,5023,5034,5114,5115,5234,5237,5239,5243,5387,5680,5683,9110,9384,9385,12752,12979,13008,15060,15078,15312,15318,15428,15433,15504,15505,15542,15600,15603,15610,15691,15694,15748,18835,18844,18845,18847,18941,18942,18945,18981,18983,19093,19101,19274,19292,19293,19310,19311],"fullWord":5243},{"subwords":[4947,4985,4993,4998,5008,5123,5142,5172,5179,5234,5244,7604,7637,7782,7874,9267,9325,9335,9360,12463,12493,12509,12574,12758,18894,18901,18993,19036,19043],"fullWord":5244},{"subwords":[5114,5234,5237,5238,5246,12745,12752,18981,18983,19131,19134,19135],"fullWord":5246},{"subwords":[4810,5114,5115,5234,5237,5239,5247,12752,12979,13008,13041,15060,15078,15312,15318,15600,15603,15610,15691,15694,15701,15748,18981,18983,19093,19101,19117,19118,19131,19134,19135,19138,19310,19311,19331],"fullWord":5247},{"subwords":[4728,5114,5146,5161,5234,5237,5248,5756,10378,10443,10460,10780,10897,10902,12752,12837,12845,18981,18983,19016,19017,19131,19134,19135],"fullWord":5248},{"subwords":[1560,1636,1938,2004,2005,2058,2059,2102,2106,2251,2517,4587,4618,4728,5114,5146,5250,5445,5471,5472,5523,5756,10378,10443,10470,10748,10753,10754,10780,10906,10961,12752,12837,12845],"fullWord":5250},{"subwords":[2058,2070,2102,2300,2517,2607,2710,4587,5251,5445,5498,5523,10748,10906,12767,12837,21154,21193],"fullWord":5251},{"subwords":[2058,2069,2237,2268,2269,2517,2527,2668,2690,2697,2700,5221,5233,5234,5245,5252,5253,5445,5451,5523,5524,5548,13055,13059,13082,17308,17323,17435,17994,17999,18035,18540,19390,19403],"fullWord":5253},{"subwords":[3370,3638,3644,3657,4263,4268,4269,4639,4656,5096,5114,5254,5255,5455,5471,5523,5641,8714,8721,8725,8726,8945,8946,12752,12802,13044],"fullWord":5255},{"subwords":[5123,5139,5221,5256,5257,5485,5488,5523,5524,7460,7782,7785,7871,8166,8721,8724,8731,8737,8951,8958,12810,16674,17323,17439,19583,19584,19592],"fullWord":5257},{"subwords":[5123,5234,5242,5256,5258,5485,5523,7782,7874,7875,7886,8175,8721,8731,8892,8951,9026,13046,13059,18743,18759,18794,18796,18993,19151,19418,19583],"fullWord":5258},{"subwords":[5123,5140,5256,5259,5485,5523,7782,7895,8180,8721,8731,8951,19583,21154,21193],"fullWord":5259},{"subwords":[4810,5114,5115,5260,5261,5471,5523,6008,12752,12974,12978,12979,13051,15060,15078,15600,15603,15610,15706,15773,15775,15777,15778,15780],"fullWord":5261},{"subwords":[5220,5260,5262,5430,5498,5523,10878,10887,10906,10922,10924,12767,12837,13051,15600,21154,21193,21196],"fullWord":5262},{"subwords":[4826,4849,5114,5117,5221,5223,5224,5263,5264,5466,5467,5468,5470,5471,5478,5523,5524,12745,12751,12752,12755,17323,18066,18067,19876,19877],"fullWord":5264},{"subwords":[4810,4826,4849,5114,5115,5116,5117,5216,5221,5223,5225,5260,5263,5265,5471,5478,5523,5524,6004,12752,12755,12979,12982,13007,13051,13052,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,15706,15708,15716,15717,15773,15777,15778,15782,15840,17323,17419,17451,17453,18060,18066,18067,18071,18150,19846,19876,19877,19880],"fullWord":5265},{"subwords":[4826,4849,5114,5117,5221,5223,5227,5229,5263,5266,5471,5478,5523,5524,6039,12752,12755,17323,17332,17434,17457,17458,18062,18066,18067,18073,19876,19877,19882],"fullWord":5266},{"subwords":[5037,5046,5221,5270,8617,8678,8721,8724,8739,9127,12810,13101,16655,16674,17323,20243,20246],"fullWord":5270},{"subwords":[4728,4826,4865,4873,5114,5117,5146,5148,5221,5223,5271,5272,5282,5283,5756,5760,10378,10443,10447,10490,10780,10782,10888,10942,10944,10952,12752,12755,12837,12844,12845,12848,13110,13111,13112,13114,13118,16475,17044,17059,17097,17121,17122,17323,17354,17357,17359,17360,17464,17465,20524,20531,20566,20569,20875,20877,20883,20884],"fullWord":5272},{"subwords":[4810,4826,4865,4873,5114,5115,5116,5117,5216,5221,5223,5225,5273,5274,5282,5283,5285,5361,5415,6004,12752,12755,12979,12982,13007,13110,13111,13112,15060,15078,15081,15087,15302,15600,15603,15609,15610,15611,15676,15677,15734,15738,15744,16445,16475,17323,17419,17464,17465,17466,18270,18272,20524,20531,20875,20877,20929,20931,20933,20947],"fullWord":5274},{"subwords":[4810,4865,4874,5114,5115,5220,5273,5275,5281,5361,5430,5567,5570,12752,12979,13110,13111,13145,15060,15078,15600,15603,15610,15734,15737,15738,15866,20524,20875,20929,20932,20933,21010,21016,21138,21154,21189,21202,21203],"fullWord":5275},{"subwords":[4947,4985,4993,4998,5123,5142,5172,5179,5276,5277,7604,7782,7892,9237,9360,12493,12509,12606,12758,13113,13119,20742,20774,20779,20790,20804,20897],"fullWord":5276},{"subwords":[4774,4865,5114,5172,5176,5277,5278,5865,5872,5909,5953,12390,12493,12499,12606,12745,12752,12876,13110,13111,13119,13120,20524,20579,20581,20875,20897],"fullWord":5278},{"subwords":[4774,4810,4865,5114,5115,5172,5176,5273,5277,5279,5361,5392,5412,5865,5872,5909,5953,12358,12390,12493,12499,12548,12606,12752,12876,12979,13110,13111,13119,13120,13121,15060,15078,15227,15238,15368,15600,15603,15610,15734,15738,20524,20579,20581,20875,20897,20898,20929,20933,20944,20984],"fullWord":5279},{"subwords":[4826,4865,4873,5114,5117,5221,5223,5224,5282,5283,5284,12745,12751,12752,12755,13110,13111,13112,16475,17323,17464,17465,20524,20531,20875,20877],"fullWord":5284},{"subwords":[4810,4826,4865,4873,5114,5115,5116,5117,5216,5221,5223,5225,5273,5274,5282,5283,5285,5361,5415,6004,12752,12755,12979,12982,13007,13110,13111,13112,15060,15078,15081,15087,15302,15600,15603,15609,15610,15611,15676,15677,15734,15738,15744,16445,16475,17323,17419,17464,17465,17466,18270,18272,20524,20531,20875,20877,20929,20931,20933,20947],"fullWord":5285},{"subwords":[4826,4865,4873,5114,5117,5221,5223,5227,5229,5282,5283,5286,6039,12752,12755,13110,13111,13112,16475,16482,17323,17332,17434,17464,17465,17470,20524,20531,20875,20877],"fullWord":5286},{"subwords":[4714,4826,4935,4939,5037,5114,5117,5221,5223,5287,5288,5728,9110,9111,9127,12752,12755,13131,13136,13137,16483,16780,16922,17323,17471],"fullWord":5288},{"subwords":[4774,4785,4795,4826,5114,5117,5172,5176,5188,5221,5223,5290,5291,5567,5572,5579,5580,5865,5875,5918,5953,5955,12493,12499,12500,12501,12506,12560,12561,12562,12564,12573,12752,12755,12876,12879,13147,16381,17323,17383,17387,17472,18287,18288,21096,21120,21122,21130,21154,21183,21184],"fullWord":5291},{"subwords":[4774,4785,4826,5114,5117,5172,5176,5188,5221,5223,5292,5293,5294,5295,5298,5865,5875,5918,5953,5955,12493,12499,12500,12501,12506,12560,12561,12562,12752,12755,12876,12879,16381,17323,17383,17387,21249,21250,21255,21257,21297,21298,21301],"fullWord":5295},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5292,5293,5296,5297,5298,6004,12752,12755,12979,12982,13007,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,17323,17419,21249,21250,21260,21263],"fullWord":5297},{"subwords":[4714,4810,4935,5023,5114,5115,5292,5293,5296,5299,9110,9384,9385,12752,12979,15060,15078,15428,15433,15600,15603,15610,21249,21260,21312],"fullWord":5299},{"subwords":[5141,5292,5300,5302,9124,9125,9128,10530,10533,12767,12812,12824,12837,21140,21154],"fullWord":5300},{"subwords":[4947,4985,4993,4998,5123,5142,5172,5179,5292,5301,7604,7782,9360,12493,12509,12758,21269,21276,21281],"fullWord":5301},{"subwords":[49,385,1243,1251,1296,1366,1372,1502,2308,2315,2364,4427,4578,4587,5303,5304,5337,5430,10061,10090,10108,10202,10206,10304,14736,14939,15864,21068],"fullWord":5304},{"subwords":[796,801,869,2766,2848,2941,2949,3172,3189,3206,3207,3213,3336,4065,4472,5306,5318,8217,8290,8327,8346,11086,11094,11107,11276,11281,11283,14736,14775,14808],"fullWord":5306},{"subwords":[200,254,828,905,911,918,4447,4537,4540,5307,5308,5327,5328,6230,6236,6308,6316,6332,6334,6339,6344,6354,7042,7044,14736,14751,14754,14757,14898,14912,15893,16041,17773,18339,18340,18449,18472,19381],"fullWord":5308},{"subwords":[254,828,911,919,4447,4537,4578,5307,5309,5327,5337,5430,6230,6308,6332,6344,6386,7042,7050,7140,14736,14754,14898,14939,15864,18339,18449,18452,19231,19377,21068],"fullWord":5309},{"subwords":[4578,5310,5311,5337,5430,7253,7267,7375,7395,7447,7907,7961,14736,14758,14767,14939,15864,21068],"fullWord":5311},{"subwords":[183,195,299,605,837,4451,4492,4502,4532,5123,5172,5173,5179,5310,5312,7253,7375,7761,7782,7813,7907,7928,8038,12230,12274,12493,12509,12548,12680,12951,12983,14736,14749,14758,14821,14826,14832,15561,15568,15600],"fullWord":5312},{"subwords":[200,326,336,349,359,605,610,647,691,854,905,4461,4492,4532,4536,4901,4985,4986,4987,5007,5037,5314,5315,9127,9307,9376,9378,9409,12227,12228,12274,12276,14736,14751,14776,14779,14784,14786,14821,14826,14828,14838,14839,15428,15443,15491,15493,15893,15928,15986,15988,16028,16858,16889,17722],"fullWord":5315},{"subwords":[200,817,825,867,868,905,906,950,952,953,4516,4520,4522,4530,4607,4611,4810,4826,4835,5316,5317,5355,5356,5588,5599,5976,5977,14736,14751,14798,14799,14802,14881,14882,14961,14965,15060,15087,15893,15939,16270,16286,16419],"fullWord":5317},{"subwords":[144,145,200,504,869,883,905,4472,4489,5318,5319,5320,5321,11107,11119,11123,11276,11314,11330,14736,14751,14808,14820,15893,15973],"fullWord":5320},{"subwords":[148,151,732,733,735,817,4438,4516,4517,4590,4607,4810,5323,5324,5340,5588,5659,5956,5976,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,14262,14736,14851,14852,14853,14961,14962,14979,15060,15248],"fullWord":5324},{"subwords":[732,733,735,817,4516,4518,4607,4810,5323,5325,5346,5588,5956,5976,6008,13171,13174,13286,13292,13294,13295,13297,13318,13439,13455,13478,13577,14262,14736,14851,14852,14853,14854,14872,14961,14979,14983,15060,15248],"fullWord":5325},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":5326},{"subwords":[817,1145,1147,4516,4518,4574,4607,4810,4865,5330,5331,5346,5361,5588,5976,6008,14736,14872,14933,14934,14961,14983,15060,15084,15358,20303,20309,20311,20410,20412,20415,20417,20418,20440,20510,20524],"fullWord":5331},{"subwords":[200,905,1155,1157,4574,5330,5332,5333,5336,10090,10107,10202,10205,10292,10299,14736,14751,14933,14938,15893,15942,16089,17037,18203,20303,20318,20410,20412,20416,20442,20449],"fullWord":5333},{"subwords":[1155,1166,4574,4578,5330,5332,5334,5337,5430,10090,10108,10202,10206,10292,10304,14736,14933,14937,14939,15864,20303,20410,20412,20448,20493,21010,21068,21079,21082],"fullWord":5334},{"subwords":[148,151,227,817,1196,4438,4516,4517,4578,4590,4607,4613,4810,4814,5337,5338,5340,5430,5431,5564,5567,5568,5570,5588,5659,5662,5976,14736,14939,14940,14961,14962,14966,15060,15864,15866,21068,21069,21071,21097,21099],"fullWord":5338},{"subwords":[148,151,152,158,200,817,825,905,906,4438,4445,4516,4517,4520,4590,4594,4607,4611,4810,4826,5340,5341,5588,5599,5659,5976,5977,14736,14751,14881,14882,14961,14962,14963,14965,15060,15087,15893,15895,16270,16286,16419],"fullWord":5341},{"subwords":[200,817,825,869,871,883,905,906,4472,4475,4476,4489,4516,4520,4607,4611,4810,4818,4819,4821,4824,4826,5318,5321,5342,5343,5588,5599,5658,5845,5976,5977,11107,11115,11120,11121,11123,11276,11286,11287,11314,11315,11330,11333,11437,11438,11440,11453,11539,11560,14736,14751,14808,14820,14881,14882,14961,14965,14975,14978,15060,15087,15202,15224,15893,15973,15978,16270,16278,16286,16419,17161],"fullWord":5343},{"subwords":[817,869,871,911,1009,4472,4475,4516,4537,4551,4553,4607,4810,4812,4818,4819,5318,5327,5342,5344,5588,5620,5658,5976,5982,6055,11107,11115,11120,11276,11286,11320,11321,11361,11362,11363,11364,11437,11438,11456,11539,11574,11575,14736,14808,14898,14901,14902,14961,14975,15060,15202,15312,15318,15748,18339,18389,18393,18394,18396,18449,18450,18453,18454,18541,18549,18554,18595,18644,19205,19216,19233],"fullWord":5344},{"subwords":[227,817,869,871,884,1196,4472,4475,4516,4578,4607,4613,4810,4814,4818,4819,5318,5337,5342,5345,5430,5567,5570,5588,5658,5976,11107,11115,11120,11276,11286,11329,11408,11437,11438,11539,14736,14808,14939,14940,14961,14966,14975,15060,15202,15864,15866,21051,21068,21071,21097,21099],"fullWord":5345},{"subwords":[227,817,1196,4516,4518,4578,4607,4613,4810,4814,5337,5346,5347,5430,5433,5567,5570,5588,5976,6008,14736,14872,14939,14940,14961,14966,14983,15060,15086,15864,15866,21068,21071,21073,21097,21099],"fullWord":5347},{"subwords":[4639,4651,4655,4810,4826,4835,5348,5349,5355,5356,6023,15021,15028,15037,15048,15060,15087,16298],"fullWord":5349},{"subwords":[4667,4678,4810,5350,5351,5667,5668,5669,5984,5988,7467,7468,7979,15060,15069,15093,15141],"fullWord":5350},{"subwords":[4810,5351,5352,5430,5567,5570,5675,5709,5988,7992,8195,8196,15060,15141,15866,21109],"fullWord":5352},{"subwords":[4714,4728,4739,4810,4928,4935,4936,5023,5354,5364,5756,9117,9118,9119,9384,9385,10378,10414,10530,10536,10537,10549,10677,15060,15074,15428,15432,15433,15444,15473,15474],"fullWord":5354},{"subwords":[4639,4774,4810,5357,5856,5865,8540,8552,8558,12358,15021,15028,15060,15227],"fullWord":5357},{"subwords":[4810,4826,5358,5359,5430,5439,5567,5570,5571,5572,6039,15060,15087,15866,15867,21096,21130,21212],"fullWord":5359},{"subwords":[4714,4810,4825,4826,4935,4939,5023,5026,5037,5365,5366,5367,6008,6016,9111,9127,9384,9385,9389,9409,15060,15087,15428,15433,15434,15435,15436,15443,15526,15528,16780,16889,16890,16891,17722],"fullWord":5366},{"subwords":[4714,4724,4810,4826,4935,4939,4942,4945,5023,5027,5034,5035,5037,5060,5063,5360,5367,5368,5680,5684,6018,9111,9127,9384,9385,9389,9409,9447,15060,15087,15306,15312,15318,15428,15433,15436,15443,15526,15542,15543,15748,16457,16780,16889,16890,16891,16907,16911,16912,17722,17856,17881,17970,18575,18835,18837,18844,18845,18847,18849,18850,18941,18942,18943,18947,19274,19277],"fullWord":5368},{"subwords":[5034,5035,5037,5060,5369,5370,6542,6621,6636,6637,6647,6651,6654,9127,9135,9409,9447,15428,15443,15458,15460,16801,16889,16907,17722,17881,18947],"fullWord":5370},{"subwords":[5034,5036,5369,5371,5430,6621,6651,7140,15428,15458,18843,19377,21140],"fullWord":5371},{"subwords":[4967,4968,5037,5372,5373,9127,9152,9155,9409,10530,10535,15428,15443,15477,15479,16834,16889,17068,17722],"fullWord":5373},{"subwords":[4985,5007,5030,5032,5037,5050,5375,5376,9127,9276,9284,9307,9396,9399,9409,9885,9894,9913,9914,9918,9929,10041,15428,15443,15491,15493,15498,15499,15534,16858,16876,16889,16954,16955,16974,17722],"fullWord":5376},{"subwords":[5014,5020,5377,5378,5430,13813,13829,14237,14410,15428,15508,21140,21146],"fullWord":5378},{"subwords":[4714,4728,4739,4810,4856,4935,5023,5071,5073,5381,5382,5756,6107,9117,9119,9384,9385,10378,10414,10471,10481,10530,10536,10537,10549,10677,10711,10712,10716,10722,15060,15337,15428,15433,15444,15473,15474,15549,15550,20004,20017,20058,20126,20129,20130,20132,20144,20146],"fullWord":5382},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5071,5073,5381,5383,5865,5996,9384,9385,12358,12387,15060,15175,15227,15337,15428,15433,15491,15549,15550,15551,20008,20027,20058,20126,20129,20130,20132,20152,20157,20159],"fullWord":5383},{"subwords":[4714,4810,4935,5023,5026,5071,5073,5365,5381,5384,6008,9384,9385,15060,15337,15428,15433,15434,15549,15550,15552,20058,20126,20129,20130,20132],"fullWord":5384},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5071,5073,5074,5076,5367,5381,5385,9111,9127,9384,9385,9389,9409,15060,15087,15337,15354,15428,15433,15436,15443,15526,15549,15550,15554,16780,16889,16890,16891,17722,20058,20070,20126,20129,20130,20132,20133,20134,20197,20198],"fullWord":5385},{"subwords":[4810,5114,5115,5123,5125,5260,5351,5386,5420,5471,5485,5523,5718,5988,5989,7782,7788,7855,7856,7883,7884,12752,12798,12979,13051,15060,15078,15141,15600,15603,15610,15614,15615,15706,15709,15710,15773,15777,15778,15790,19855,19856],"fullWord":5386},{"subwords":[5034,5035,5037,5060,5212,5216,5219,5221,5233,5234,5245,5387,5388,9127,9409,9447,13007,13008,13011,15428,15443,15504,15507,15600,15609,15691,15700,16889,16907,17323,17429,17435,17722,17881,18945,18946,18947,19093,19113,19114,19292,19294,19310,19313],"fullWord":5388},{"subwords":[5150,5154,5216,5221,5389,5390,10878,10881,12837,12844,13007,15600,15609,15623,15626,17323,17354,17357],"fullWord":5390},{"subwords":[5150,5155,5220,5389,5391,5430,10878,10880,10887,12767,12837,15600,15623,21154],"fullWord":5391},{"subwords":[4774,4810,5114,5115,5172,5176,5392,5393,5865,5953,12358,12493,12496,12499,12548,12745,12746,12752,12876,12979,15060,15078,15227,15238,15600,15603,15610],"fullWord":5393},{"subwords":[4774,4810,5114,5115,5172,5176,5392,5394,5865,5953,6008,12358,12493,12499,12548,12752,12876,12974,12979,15060,15078,15227,15238,15600,15603,15610],"fullWord":5394},{"subwords":[4774,4785,4810,4826,5114,5115,5116,5117,5172,5176,5188,5216,5221,5223,5225,5392,5395,5865,5875,5918,5953,5955,6000,6004,12358,12359,12493,12499,12500,12501,12506,12548,12556,12560,12561,12562,12752,12755,12876,12879,12979,12982,13007,15060,15078,15081,15087,15227,15230,15238,15600,15603,15609,15610,15611,15676,15677,16381,16391,17272,17273,17323,17383,17387,17419],"fullWord":5395},{"subwords":[5123,5172,5179,5186,5196,5396,7782,7826,7828,7841,12493,12509,12548,12762,12976,15600,15640,15642],"fullWord":5396},{"subwords":[5158,5159,5196,5197,5216,5221,5397,5398,10833,10854,10878,10881,12762,12764,12837,12844,12976,12977,13007,13024,15600,15609,15642,15643,17323,17354,17357,17370],"fullWord":5398},{"subwords":[5196,5197,5215,5216,5221,5399,5400,5402,5403,12762,12764,12905,12936,12976,12977,13007,14020,14023,14127,14350,14357,14358,14383,14403,15600,15609,15642,15643,17323,17406,17410,17636],"fullWord":5400},{"subwords":[5196,5208,5215,5220,5399,5401,5402,5430,12762,12976,14020,14127,14350,14357,14410,15600,15642,15672,21154],"fullWord":5401},{"subwords":[5208,5215,5216,5220,5221,5402,5403,5404,5430,5439,12936,13007,14020,14023,14187,14350,14357,14358,14383,14389,14403,14410,15600,15609,15672,15690,17323,17406,17472,17672,17697,21096,21154,21212],"fullWord":5404},{"subwords":[5216,5220,5221,5229,5406,5407,5430,5439,13007,15600,15609,15690,17323,17332,17434,17472,17475,21096,21154,21212],"fullWord":5407},{"subwords":[4810,5114,5115,5267,5268,5408,5409,12745,12746,12752,12979,13095,15060,15078,15337,15600,15603,15610,15728,15729],"fullWord":5409},{"subwords":[4810,5114,5115,5267,5268,5408,5410,6008,12752,12974,12979,13095,15060,15078,15337,15600,15603,15610,15728,15729,15730],"fullWord":5410},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5267,5268,5269,5408,5411,6004,12752,12755,12979,12982,13007,13095,13099,15060,15078,15081,15087,15337,15354,15600,15603,15609,15610,15611,15676,15677,15728,15729,15732,16453,17323,17419,20070,20077],"fullWord":5411},{"subwords":[5172,5277,5412,5413,12493,12548,12606,12745,13119,15600,15734,20897,20929,20944],"fullWord":5413},{"subwords":[5172,5188,5216,5221,5277,5280,5282,5412,5414,12493,12501,12548,12560,12606,12610,13007,13119,13124,15600,15609,15734,15744,17284,17323,17383,17464,17469,18270,18273,20897,20929,20931,20944],"fullWord":5414},{"subwords":[4810,4826,4865,4873,5114,5115,5116,5117,5216,5221,5223,5225,5273,5274,5282,5283,5285,5361,5415,6004,12752,12755,12979,12982,13007,13110,13111,13112,15060,15078,15081,15087,15302,15600,15603,15609,15610,15611,15676,15677,15734,15738,15744,16445,16475,17323,17419,17464,17465,17466,18270,18272,20524,20531,20875,20877,20929,20931,20933,20947],"fullWord":5415},{"subwords":[5216,5220,5221,5281,5282,5416,5430,5439,13007,15600,15609,15690,15734,15737,15744,17323,17464,17472,18270,20929,20931,20932,21010,21096,21154,21202,21211,21212],"fullWord":5416},{"subwords":[4810,5351,5419,5420,5466,5467,5471,5485,5988,15060,15141,15773,15777,15778,15790,19578,19855,19856],"fullWord":5419},{"subwords":[4928,5037,5422,5423,5466,5470,9127,9409,9449,9450,15428,15443,16889,17722,18083,19846],"fullWord":5423},{"subwords":[5426,5427,5507,5516,5519,5522,5539,5541,5546,15821,15832,15848,18117,18126,19846,19866,19867],"fullWord":5427},{"subwords":[4810,4826,4849,5428,5429,5471,5478,5525,5526,5528,5529,5531,6033,13478,13488,13577,13579,13581,13602,14262,14281,14403,14404,14405,14416,14438,14441,14518,14544,14545,14551,15060,15087,15248,15272,15305,15773,15777,15778,15782,15840,17530,17675,17676,17687,18066,18067,18071,18135,18136,18137,18150,19825,19846,19876,19877,19880],"fullWord":5429},{"subwords":[148,158,200,905,4438,4445,4578,4582,5337,5339,5430,5431,5432,5439,5564,5566,14736,14751,14939,14944,15864,15865,15893,16103,21068,21070,21096,21212],"fullWord":5432},{"subwords":[4810,4826,5430,5433,5434,5439,5567,5570,5571,5572,6008,6016,15060,15086,15087,15866,15867,21096,21130,21212],"fullWord":5434},{"subwords":[4810,4826,5360,5430,5435,5439,5567,5570,5571,5572,6018,15060,15087,15306,15312,15318,15748,15866,15867,16457,18018,18019,18020,18575,19257,19258,19377,19570,19571,19572,21096,21130,21135,21212],"fullWord":5435},{"subwords":[4947,4985,4993,5001,5430,5436,5573,7604,7617,7997,8015,8016,15428,15440,15461,15491,15494,21140,21144],"fullWord":5436},{"subwords":[5161,5220,5234,5249,5430,5437,10878,10887,10897,12767,12837,13008,15600,15691,19016,19093,19122,19186,19310,19347,19377,19573,21154],"fullWord":5437},{"subwords":[5220,5234,5249,5430,5438,13008,15600,15691,19093,19122,19186,19310,19347,19377,19573,21154],"fullWord":5438},{"subwords":[442,464,1053,1072,4471,4578,5442,5443,5492,5495,5498,10090,10108,10270,10304],"fullWord":5443},{"subwords":[1560,2505,2517,4618,5445,5446,5466,5467,5471,5632],"fullWord":5446},{"subwords":[1560,2384,2505,2517,2610,4618,4810,5417,5445,5447,5471,5632,14995,15060,15749,15751,15755,15773,15777,15778,19840],"fullWord":5447},{"subwords":[1767,1777,1837,1840,2505,2517,2577,2582,4985,5445,5448,5507,9449,12406,12614,19641],"fullWord":5448},{"subwords":[1777,1837,1840,1955,2517,2548,2577,2582,4587,4985,5445,5450,5507,9449,10504,10530,12406,12438,12614,19641],"fullWord":5450},{"subwords":[126,134,200,1053,2766,2782,3041,3052,3064,4238,4241,4263,4267,4375,4394,5453,5454,5462,5465,5548,15880,15893,16041,16114,16157,16252,16265,16266,17999,18339,18340,18508,19871],"fullWord":5454},{"subwords":[4263,4268,4269,4278,4639,4651,5455,5457,5458,5466,5467,5471,5489,19595],"fullWord":5458},{"subwords":[4207,4209,4263,4268,4269,4278,4312,4321,4326,4327,4639,4651,4810,5348,5355,5455,5457,5459,5471,5489,5654,15021,15028,15060,15766,15767,15773,15777,15778,19595],"fullWord":5459},{"subwords":[4263,4268,4269,4278,4639,4651,4714,4909,4917,4935,4957,5455,5457,5460,5471,5489,9079,9082,9449,9885,19595],"fullWord":5460},{"subwords":[111,126,202,488,1053,1072,2766,2813,3052,3071,3447,4263,4289,4375,5442,5452,5453,5462,5463,10072,10090,10270,18339,18365,18508,19605],"fullWord":5463},{"subwords":[4263,4268,4269,4375,4376,4639,4666,5455,5462,5464,5466,5467,5471,5479,5688,6057],"fullWord":5464},{"subwords":[4928,5037,5046,5466,5469,5470,8617,8678,9127,9449,9450,18083,19592],"fullWord":5469},{"subwords":[4667,4728,4731,4733,4750,5466,5467,5471,5472,5473,5691,5756,5792,5793,10378,10383,10470],"fullWord":5473},{"subwords":[4678,4728,4731,4810,5471,5472,5474,5691,5756,5757,5792,5794,5984,6083,10378,10383,10388,10470,11029,11030,15060,15093,15107,15773,15777,15778,15800,15801],"fullWord":5474},{"subwords":[4728,4744,5114,5146,5150,5471,5472,5475,5492,5523,5756,5780,10378,10443,10470,10780,10906,12752,12837,12845],"fullWord":5475},{"subwords":[605,657,663,1053,4492,4500,4605,4774,5471,5477,5507,5511,5627,5865,12229,12252,12624,12651],"fullWord":5477},{"subwords":[4728,5471,5472,5481,5482,5484,5756,5765,6406,6501,6740,6821,6824,6825,7153,10378,10470,10978,10979],"fullWord":5482},{"subwords":[4810,5471,5481,5483,6406,6501,7056,7075,7194,15060,15114,15773,15777,15778,15783,15784],"fullWord":5483},{"subwords":[4728,5471,5472,5481,5482,5484,5756,5765,6406,6501,6740,6821,6824,6825,7153,10378,10470,10978,10979],"fullWord":5484},{"subwords":[5123,5172,5179,5485,5486,5507,5513,5523,7759,7782,7818,8151,8152,8153,12493,12509,19664],"fullWord":5486},{"subwords":[5123,5234,5485,5487,5523,7782,7874,7886,8175,13059,18993,19418],"fullWord":5487},{"subwords":[3135,3584,3585,4263,4268,4269,4289,4375,4376,4639,4728,5455,5462,5471,5472,5479,5491,5688,5756,6057,10376,10378,10460,10470,11050,11052,19605],"fullWord":5491},{"subwords":[4728,4744,5466,5467,5471,5472,5492,5493,5756,5780,10378,10470],"fullWord":5493},{"subwords":[4728,4744,4810,5471,5472,5492,5494,5756,5780,10378,10470,11029,11030,15060,15773,15777,15778,15800,15801],"fullWord":5494},{"subwords":[4728,4826,4849,5471,5472,5476,5478,5496,5497,5756,5760,6039,10378,10453,10470,17044,17046,17128,17129,17130,18062,18066,18067,18073,19876,19877,19882],"fullWord":5497},{"subwords":[1560,2517,2567,4618,5445,5466,5467,5471,5499,5500,5846,12091],"fullWord":5500},{"subwords":[1511,1560,1700,2384,2517,2567,2610,4618,4771,4810,4818,5417,5424,5445,5471,5499,5501,5846,11539,12091,14995,15060,15202,15749,15755,15773,15777,15778,15806,19614,19840],"fullWord":5501},{"subwords":[2517,2567,2710,4587,5445,5498,5499,5502,12091],"fullWord":5502},{"subwords":[5466,5467,5471,5503,5504,5525,5526,5527,5846,12091,13478,14438,19624,19625],"fullWord":5504},{"subwords":[4771,4810,4818,5424,5428,5471,5503,5505,5525,5526,5528,5846,11539,12091,13478,13577,13579,13593,13602,14262,14404,14438,14518,15060,15202,15248,15747,15773,15777,15778,15806,15815,19624,19625],"fullWord":5505},{"subwords":[4263,4267,4268,4269,4271,4639,4774,4785,4826,4849,5455,5456,5471,5478,5507,5508,5509,5511,5512,5522,5656,5856,5865,5875,5918,6023,12624,12627,16252,16298,16381,18066,18067,18117,19876,19877],"fullWord":5509},{"subwords":[4667,4774,4793,5466,5467,5471,5507,5510,5511,5665,5865,5867,5876,5877,12339,12340,12624],"fullWord":5510},{"subwords":[4774,5466,5467,5471,5485,5507,5511,5513,5514,5865,7493,7759,8151,12624,12629,12630],"fullWord":5514},{"subwords":[4774,5466,5467,5471,5489,5507,5511,5516,5517,5865,9836,12624,12640,19595],"fullWord":5517},{"subwords":[4774,4810,5355,5426,5471,5489,5507,5511,5516,5518,5539,5865,9836,9855,12358,12624,12626,12640,15060,15227,15773,15777,15778,15821,15822,19595,19660,19866],"fullWord":5518},{"subwords":[4774,5466,5467,5471,5507,5511,5520,5865,12624,12651],"fullWord":5520},{"subwords":[4774,4810,5471,5507,5511,5521,5539,5865,12358,12624,12626,12651,15060,15227,15773,15777,15778,15821,15822,19660,19866],"fullWord":5521},{"subwords":[4810,4826,4849,5428,5429,5471,5478,5525,5526,5528,5529,5531,6033,13478,13488,13577,13579,13581,13602,14262,14281,14403,14404,14405,14416,14438,14441,14518,14544,14545,14551,15060,15087,15248,15272,15305,15773,15777,15778,15782,15840,17530,17675,17676,17687,18066,18067,18071,18135,18136,18137,18150,19825,19846,19876,19877,19880],"fullWord":5529},{"subwords":[4810,5428,5430,5471,5525,5526,5528,5530,5567,5570,13478,13577,13579,13582,13602,14262,14290,14404,14410,14438,14518,14576,15060,15248,15773,15777,15778,15866,21127,21224],"fullWord":5530},{"subwords":[4947,4985,4993,5014,5485,5507,5513,5525,5532,7604,7612,7759,8151,9449,12453,13721,13765,13773,14438,14449,14484],"fullWord":5532},{"subwords":[4728,4850,5471,5472,5525,5526,5533,5534,5756,10378,10470,10494,11058,11059,13478,13950,14438,14454,14455],"fullWord":5534},{"subwords":[5466,5467,5471,5525,5526,5527,5535,13478,13569,14237,14438,14506,19814],"fullWord":5535},{"subwords":[4810,4826,4849,5358,5471,5478,5537,6039,15060,15087,15773,15777,15778,15782,15840,15841,15849,18062,18064,18066,18067,18071,18072,18073,18149,18150,19846,19876,19877,19880,19881,19882,19886],"fullWord":5537},{"subwords":[4947,4985,4993,5420,5485,5507,5513,5538,5539,7604,7617,7759,7997,8015,8016,8151,9449,15428,15461,15491,15494,15790,15795,15798,15821,15824,19748,19866],"fullWord":5538},{"subwords":[4774,4810,5466,5467,5471,5507,5511,5539,5540,5865,12358,12624,12626,15060,15227,15773,15777,15778,15821,15822,19578,19660,19866],"fullWord":5540},{"subwords":[5424,5425,5544,5545,12091,12097,15806,15820,18103,19846],"fullWord":5545},{"subwords":[4826,4835,4849,5466,5467,5468,5470,5471,5478,5489,5490,5546,5547,18066,18067,19595,19596,19876,19877],"fullWord":5547},{"subwords":[4826,4849,5466,5467,5468,5470,5471,5478,5479,5480,5548,5549,16457,17999,18066,18067,18074,18575,19876,19877],"fullWord":5549},{"subwords":[4810,4826,4849,5360,5471,5478,5479,5480,5543,5548,5550,6018,15060,15087,15306,15312,15318,15748,15773,15776,15777,15778,15782,15840,15852,15853,15858,15861,16457,17999,18066,18067,18071,18074,18150,18575,19356,19357,19359,19465,19466,19846,19876,19877,19880],"fullWord":5550},{"subwords":[5525,5548,5551,14427,14438,14441,14551,14561,14567,17675,17999,18135,18148,19386,19453,19456,19825],"fullWord":5551},{"subwords":[4714,4724,4826,4849,4935,4939,4942,4945,5037,5063,5471,5478,5479,5480,5548,5554,5680,5684,9111,9127,9447,9449,9450,16457,16780,16907,16911,16912,16917,17856,17999,18066,18067,18074,18083,18085,18086,18087,18575,18835,18837,18844,18845,18850,18947,19876,19877],"fullWord":5554},{"subwords":[183,204,867,4522,5556,12675,12680,12835,13087,14736,15561,15600,20235],"fullWord":5556},{"subwords":[200,828,905,4574,5330,5336,5557,5558,6230,6236,6308,6316,7240,14736,14751,14933,14938,15893,16089,18203,20303,20318,20410,20412,20416,20442,20449],"fullWord":5558},{"subwords":[4728,4744,4745,4826,4865,4873,5559,5560,5756,5760,5780,5781,10378,10490,16368,16475,17044,17059,18233,20524,20531,20566,20569,20571,20573],"fullWord":5560},{"subwords":[4947,4952,5562,7637,8617,8688,19525,20646,20680,20731,20742,20746,20842,20845],"fullWord":5562},{"subwords":[30,43,49,385,399,1196,1243,1246,1251,1296,1301,1302,1502,1503,1515,1519,1560,1636,1637,1749,1900,1938,2721,4427,4466,4578,4587,4601,4618,4728,4729,5563,5567,5756,10061,10090,10093,10108,10304,10305,10324,10327,10332,10378,10495,11065,21050,21097],"fullWord":5563},{"subwords":[106,109,148,326,2766,2769,3100,3402,4438,4578,4928,4934,5564,5565,9101,21140],"fullWord":5565},{"subwords":[4714,4720,4774,4795,4935,4947,4985,4988,4993,4995,5001,5567,5569,5573,5579,5675,5865,6199,7493,7604,21120,21140,21144],"fullWord":5569},{"subwords":[4947,4956,4985,4993,4999,5001,5007,5037,5573,5574,7460,7604,7611,9127,9307,16815,16858,16866,21096,21140,21141,21144,21145],"fullWord":5574},{"subwords":[4947,4985,4993,5001,5004,5573,5576,7604,9276,9285,9885,9913,9914,9922,21140,21144],"fullWord":5576},{"subwords":[183,605,685,716,4472,4479,4492,4578,5163,5172,5173,5577,11107,11213,11264,11265,11408,11420,11810,11831,11891,11893,11895,11920,12201,12244,12311,12493,12522,12523,21051,21154,21183,21184],"fullWord":5577},{"subwords":[200,605,610,693,711,716,4492,4578,4582,5578,12286,12311,12312,15893,15986,15988,15994,16041,16103,17765,17802,18018,18339,18340,18408,18428,18429,21096],"fullWord":5578},{"subwords":[4774,4795,5114,5172,5176,5290,5567,5568,5579,5581,5662,5865,5953,12493,12498,12499,12745,12752,12876,21120,21154,21183,21184],"fullWord":5581},{"subwords":[269,279,280,311,313,817,825,905,906,5583,5584,5588,5599,5605,5609,5976,5977,5978,5984,5988,5992,7375,7391,7396,7461,7463,7467,7473,7939,7970,14758,14762,14764,14773,14881,15141,15148,15910,15912,15914,16024,16026,16270,16286,16319,16340,16419,16425,16433],"fullWord":5584},{"subwords":[269,280,294,399,401,407,5585,5586,5605,5607,5691,5693,5790,7260,7293,7298,7300,7316,7396,7467,7473,7477,7486,7678,7679,10109,10115,10324,10360,10361,10383,10392,10398,10412,10451,15910,15912,15942,15948,16270,16274,16319,17003],"fullWord":5586},{"subwords":[269,294,295,399,401,488,1009,5585,5587,5620,5691,5750,6055,7293,7298,7416,7417,7467,7477,7487,7540,7678,10109,10247,10324,10383,10398,10402,10460,18342,18370,18541,18547,18576],"fullWord":5587},{"subwords":[399,817,828,1060,5588,5590,5592,5627,5765,5976,6308,6317,6392,6464,6710,6734,6821,6824,7045,7153,7194,7196,10324,10333,10355,10470,11029,14968,15114,15777,15800,19837,19847,19848],"fullWord":5590},{"subwords":[269,287,349,622,817,5588,5591,5595,5894,5976,5988,5996,7283,7285,7375,7461,7493,7604,7918,8015,9376,9378,9384,12229,12230,12319,14758,14762,14784,14821,14832,14833,14838,15141,15142,15150,15154,15173,15175,15234,15461,15494],"fullWord":5591},{"subwords":[605,608,817,4492,4500,4516,4532,4605,4607,4678,4774,4810,5588,5589,5595,5596,5665,5865,5866,5868,5976,5984,5998,12229,12274,12319,12321,12339,12340,12358,14736,14821,14826,14830,14961,15060,15093,15227],"fullWord":5596},{"subwords":[817,5588,5595,5597,5976,5984,5998,6008,12229,12319,12322,12339,14821,14830,14872,14983,15275],"fullWord":5597},{"subwords":[325,817,825,905,906,911,918,932,993,1009,5588,5599,5600,5601,5616,5620,5626,5976,5977,5982,6018,6055,8228,8333,8338,8360,8361,8362,8371,8373,8378,8381,8383,8384,8385,8391,8453,8456,8458,8460,8461,8467,8552,8584,8586,8934,8935,14775,14881,14886,14898,14901,14905,14912,15306,15312,15376,15377,15748,16041,16043,16270,16286,16293,16419,16457,16549,16559,16574,16577,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,18697,19224,19381],"fullWord":5601},{"subwords":[227,817,911,919,1009,1196,5588,5600,5602,5620,5976,5982,6055,8333,8360,8378,8381,8383,8420,8423,8453,8458,8461,8552,8607,14775,14898,14901,14939,15312,15376,15398,15748,15864,15866,18449,18453,18541,18554,18558,18697,18724,18806,19231,19257,19377,19570,21071,21097,21098,21099,21135],"fullWord":5602},{"subwords":[817,818,1143,1145,1167,5588,5603,5976,14933,15361,15373,20410,20417,20485,20486,20510],"fullWord":5603},{"subwords":[269,349,817,1145,5588,5604,5976,5988,7375,7461,7991,9376,9384,14758,14762,14933,15141,15150,15461,20326,20327,20329,20410,20417,20510,20560,20742,20817],"fullWord":5604},{"subwords":[399,401,407,973,5605,5607,5608,5611,5691,5693,5790,5791,6031,6039,6042,10230,10236,10324,10360,10361,10364,10383,10392,10451,10453,15942,15948,15950,16270,16274,16277,16291,16319,16329,16342],"fullWord":5608},{"subwords":[817,825,905,906,907,973,5588,5599,5605,5609,5610,5611,5976,5977,5978,5981,5984,6031,6039,6042,14881,14885,16024,16025,16270,16286,16290,16291,16319,16340,16341,16342,16419,16425,16429],"fullWord":5610},{"subwords":[220,223,349,359,817,825,858,863,905,906,5588,5599,5605,5609,5612,5735,5976,5977,5978,5984,5995,9376,9384,9389,9409,14788,14881,15526,16024,16028,16270,16286,16319,16340,16419,16425,16889,16890,16892,17722],"fullWord":5612},{"subwords":[973,5605,5611,5613,6031,6039,6042,16270,16291,16319,16342,16903],"fullWord":5613},{"subwords":[337,340,362,399,407,1196,1197,5614,5619,9416,10304,10313,10324,10360,10414,10415,10495,10496,10536,10551,11065,11066,15931,15942,15948,16103,16270,16274,17039,17149,21050,21097,21105,21130],"fullWord":5614},{"subwords":[214,269,280,287,647,648,691,5615,5716,5918,7283,7287,7396,7493,7511,7604,7611,9307,12229,12230,12233,15910,15912,15986,15995,16001,16270,16815,16858,16860,16866,16867,17211],"fullWord":5615},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":5617},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":5623},{"subwords":[227,817,826,911,919,1009,1196,5588,5620,5622,5624,5698,5976,5982,5984,6055,6189,6196,14898,14901,14939,15312,15748,15864,15866,18449,18453,18541,18554,18558,18576,19231,19240,19257,19377,19570,21071,21097,21099,21135],"fullWord":5624},{"subwords":[269,277,287,693,694,700,1009,5620,5625,6055,6074,7283,7289,7416,7417,7493,7512,7540,7561,7604,7637,7745,9263,9325,12229,12230,12325,12374,12463,18342,18347,18408,18410,18541,18607,18844,18894,18898,18901,18902],"fullWord":5625},{"subwords":[1604,1611,1633,1671,1767,1797,1837,1845,5632,5634,7493,7567,7604,12331,12406],"fullWord":5634},{"subwords":[1560,1777,1780,4618,4639,4714,4909,4935,5636,9079,9082],"fullWord":5636},{"subwords":[3113,3638,3644,3657,4639,4656,5096,5114,5641,5642,8483,8484,8714,8721,8725,8726,12752,12802],"fullWord":5642},{"subwords":[3248,3361,3674,3898,4120,5641,5643,5984,8483,8552,8562,8575,8714,8725,8728,8857,12724,12727,12965,12968,12979,15021,15092,15386,15592,15610],"fullWord":5643},{"subwords":[3119,3367,3944,5641,5644,6023,8483,8714,8725,8730,8881,12810,16298,16319,16574,16676,17316],"fullWord":5644},{"subwords":[4029,5641,5645,6189,8483,8607,8714,8725],"fullWord":5645},{"subwords":[3272,3275,3279,3339,5641,5646,8612,8625,8714,8725,8739,9079],"fullWord":5646},{"subwords":[93,121,337,349,399,422,796,817,857,2813,2941,2954,2971,3120,3156,3402,3452,3493,5588,5592,5647,5976,5993,9079,9376,9384,10072,10073,10075,10079,10121,10324,10355,10414,10502,10518,10536,10549,10675,10677,14717,14780,14968,15021,15188,15399,15411,15444,15473],"fullWord":5647},{"subwords":[93,96,126,134,399,400,407,488,1009,2813,3021,3041,3042,3046,3052,3057,3064,3135,3137,3495,3496,4238,4241,5616,5620,5626,5648,5649,6023,6055,6057,10072,10073,10077,10241,10247,10324,10360,10366,10376,10459,10460,10465,15880,15942,15948,15960,16041,16043,16121,16157,16270,16274,16293,16298,16304,16457,16459,17022,17023,17750,17811,18341,18365,18368,18370,18374,18541,18547,18548,18559,18660],"fullWord":5649},{"subwords":[3119,3555,3701,3708,3709,5650,5651,5652,5691,5693,5790,6023,10383,10392,10443,10447,10451,10760,10888,12845,12848,16298,16319,17097,17316,17354,17359],"fullWord":5652},{"subwords":[93,112,2848,2853,5657,11086,11089,11427,11437,21251],"fullWord":5657},{"subwords":[4667,4714,4928,4935,4936,5660,9108],"fullWord":5660},{"subwords":[4667,4668,4680,4714,4826,4928,4935,4936,4939,5037,5661,9108,9111,9127,16319,16320,16780,16781],"fullWord":5661},{"subwords":[200,4472,4475,4476,4489,4671,4672,4680,4826,5605,5606,5658,5663,5664,5845,11107,11115,11123,11330,11437,11438,11440,11453,11478,11479,11560,15893,15973,15978,16270,16278,16280,16319,16320,16330],"fullWord":5664},{"subwords":[4678,4679,4680,4810,4826,5351,5353,5667,5669,5670,5671,5984,5988,5992,7460,7467,7468,7473,7979,7980,15060,15071,15087,15093,15096,15141,15148,16311,16313,16319,16320,16340,16425,16426,16433],"fullWord":5670},{"subwords":[4678,4714,4810,4935,4947,5023,5028,5351,5667,5669,5672,5725,5735,5984,5988,5995,7467,7468,7617,7979,7997,9108,9384,9385,15060,15093,15141,15428,15433,15437,15461],"fullWord":5672},{"subwords":[4714,4728,4739,4935,4947,5567,5673,5675,5756,7477,7478,7484,7586,7684,9117,9124,9128,10378,10382,10398,10414,10495,10530,10536,10537,11065,21140,21142],"fullWord":5673},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5674,5709,5865,7493,7578,7604],"fullWord":5674},{"subwords":[1560,1576,1636,1642,1643,1777,1780,1817,1938,1939,4587,4618,4714,4728,4731,4739,4935,5676,5691,5756,5771,9108,9117,10378,10383,10414,10504,10530,10536,10537],"fullWord":5676},{"subwords":[3429,3430,3431,3434,4238,4241,4639,4714,4724,4826,4909,4913,4925,4935,4939,4942,4945,5037,5040,5063,5677,5678,5680,5684,6023,6057,9079,9082,9085,9111,9127,9447,16178,16298,16304,16457,16769,16780,16907,16911,16912,17856,18575,18823,18830,18835,18837,18844,18845,18850,18947],"fullWord":5678},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5114,5117,5172,5176,5188,5221,5223,5679,5728,5865,5875,5918,5953,5955,9110,9111,9127,9307,9360,9366,12493,12499,12500,12501,12506,12516,12517,12560,12561,12562,12752,12755,12758,12876,12879,12886,16381,16780,16858,16860,17243,17323,17383,17387],"fullWord":5679},{"subwords":[4667,4714,4928,4935,4936,4942,4943,5680,5681,9108,18576,18577,18835,18836,18844,18845],"fullWord":5681},{"subwords":[4714,4810,4935,4942,5023,5034,5114,5115,5234,5237,5239,5243,5387,5680,5683,9110,9384,9385,12752,12979,13008,15060,15078,15312,15318,15428,15433,15504,15505,15542,15600,15603,15610,15691,15694,15748,18835,18844,18845,18847,18941,18942,18945,18981,18983,19093,19101,19274,19292,19293,19310,19311],"fullWord":5683},{"subwords":[3113,3114,4263,4268,4269,4639,4665,4667,4846,4847,5455,5466,5467,5471,5685,5686],"fullWord":5686},{"subwords":[3113,3117,3119,4263,4267,4268,4269,4271,4639,4680,4826,4846,4848,4849,5455,5456,5471,5478,5656,5685,5687,6023,16252,16298,16316,16319,16320,18066,18067,18068,19876,19877,19878],"fullWord":5687},{"subwords":[4238,4241,4263,4267,4268,4269,4271,4375,4376,4379,4394,4639,4826,4849,5455,5456,5462,5465,5471,5478,5479,5480,5548,5656,5688,5689,6023,6057,16252,16265,16267,16298,16304,16457,17999,18066,18067,18074,18575,19876,19877],"fullWord":5689},{"subwords":[148,151,817,1145,1147,4438,4516,4517,4574,4590,4607,4810,4865,5330,5340,5361,5588,5659,5690,5976,14736,14933,14961,14962,15060,20303,20305,20309,20310,20311,20410,20412,20413,20417,20418,20510,20524],"fullWord":5690},{"subwords":[5691,5692,5695,5735,5984,5995,9132,9384,10383,10388,10414,10536,10549,10677,15107,15444,15473],"fullWord":5692},{"subwords":[5695,5696,5735,5984,5995,6008,9132,9384],"fullWord":5696},{"subwords":[5691,5694,5697,5698,5735,5984,5995,6189,6196,6200,9384,10383,10388,10391,10414,10495,10536,10549,10677,11065,11074,15107,15201,15444,15473,15866],"fullWord":5697},{"subwords":[5699,5705,6057,6409,6420,6489,18576],"fullWord":5699},{"subwords":[5700,6509,6543,6544,6553,6560,9134],"fullWord":5700},{"subwords":[5701,5765,6757,6821,6824,6851,7153,10470,10494,10978,11058,11059],"fullWord":5701},{"subwords":[5702,5705,5950,6495,6874,6940,6955,6982,6983,7073,7103,12771,12777,12785,12787,12979,13008,15114,15135,15312,15610,15691,15694,15748,18981,18986,19093,19101,19243],"fullWord":5702},{"subwords":[5703,5704,6409,6419,7210,7212,16319,18066,19876,19878],"fullWord":5704},{"subwords":[4049,4268,4302,5709,5710,13516,14433,14449],"fullWord":5710},{"subwords":[5709,5712,5713,5715,5984,5988,5992,7467,7473,15141,15148,16319,16340,16425,16433],"fullWord":5713},{"subwords":[5709,5714,5718,5953,7493,7522,7815,7818,12509,12876],"fullWord":5714},{"subwords":[5716,5717,6031,6039,6042,7467,7473,16319,16342,16351,16790,16792,16903],"fullWord":5717},{"subwords":[5716,5718,5719,5721,5845,7489,7492,7526,7633,7790,9422,11487,11649,11654,11764,11772,11854,12081,12872,16375,17188,17382],"fullWord":5719},{"subwords":[5716,5718,5720,5721,7540,7541,7635,7637,7790,7874,9447,16457,16907,16911,17435,17895,18844,18850,18947,18981,18985,18993,19001],"fullWord":5720},{"subwords":[5722,5984,5988,5992,6031,6039,6042,7467,7473,15141,15148,16319,16340,16341,16342,16425,16429,16433,16434],"fullWord":5722},{"subwords":[5723,5724,5984,5988,5992,6018,6046,7467,7473,7537,7540,7541,7987,7988,15141,15148,15290,15306,15312,15748,16319,16340,16425,16433,16457,17823,17840,18576,18588,18658,19240,19242],"fullWord":5724},{"subwords":[4678,4679,4680,4714,4810,4826,4833,4935,4939,5023,5037,5367,5725,5726,5735,5984,5995,9108,9111,9127,9384,9385,9389,9409,15060,15071,15087,15093,15096,15294,15428,15433,15436,15443,15526,16311,16319,16320,16340,16425,16426,16780,16889,16890,16891,16892,17722],"fullWord":5726},{"subwords":[183,326,327,337,338,399,472,4466,4601,4714,4728,4739,4891,4935,5114,5146,5727,5756,9103,9104,9110,9117,9125,10090,10093,10119,10324,10327,10378,10414,10443,10530,10533,10536,10537,10730,10780,12752,12812,12815,12837,12841,12845],"fullWord":5727},{"subwords":[5691,5729,5765,6409,6416,6543,6544,6553,6568,6743,10383,10414,10536,10539,10554],"fullWord":5729},{"subwords":[5730,5731,7540,7637,8498,8499,8625,8630,8633,8688,18697,18729,18844],"fullWord":5731},{"subwords":[5716,5730,5732,7540,7541,7635,7637,8506,8586,8625,8628,8678,8685,8688,8691,8935,9447,16457,16574,16653,16805,16809,16907,16911,18697,18742,18844,18850,18947],"fullWord":5732},{"subwords":[5730,5733,7540,7637,8607,8625,8688,18697,18724,18806,18844,21135,21136],"fullWord":5733},{"subwords":[5735,5736,5984,5995,6066,8483,8503,8552,8562,8625,8672,8688,9384,15312,15321,15542,15748,18576,18697,18698,18701,18712,18767,18844,18847,18941,19240],"fullWord":5736},{"subwords":[93,126,1009,3052,5620,5737,5738,6055,6057,9531,9557,18541,18576],"fullWord":5738},{"subwords":[3119,4238,4241,5737,5739,6023,6057,9531,9553,9557,9558,16298,16304,16319,16457,18576,18588],"fullWord":5739},{"subwords":[337,399,401,423,430,612,637,5691,5744,5745,10120,10174,10324,10344,10383,10414,10536,10544,10625,12229,12238,12339,12438,12439],"fullWord":5744},{"subwords":[200,399,407,605,607,610,4466,4467,4492,4500,4501,4601,4603,4605,4606,4728,4774,4785,4826,5745,5746,5747,5748,5756,5760,5865,5875,5918,10090,10093,10095,10096,10099,10107,10169,10173,10174,10175,10227,10324,10327,10331,10344,10348,10360,10378,10427,10429,10433,12229,15893,15942,15948,15986,15988,15995,15996,16270,16274,16308,16381,17044],"fullWord":5747},{"subwords":[399,401,407,481,486,732,739,779,959,961,5605,5607,5691,5693,5749,5790,5956,6033,10182,10194,10195,10324,10350,10353,10360,10361,10383,10392,10451,13204,13207,13211,13232,13336,13439,13450,13452,13461,13462,13489,13495,13498,13510,13940,13943,13944,15942,15948,16014,16270,16274,16319,16336,16403,17019,17049,17476,17488],"fullWord":5749},{"subwords":[399,401,488,1009,4466,4551,4601,4604,4728,4731,4747,5620,5691,5750,5751,5756,6055,10090,10093,10247,10248,10324,10327,10378,10383,10460,18339,18370,18541,18547,18576,18577],"fullWord":5751},{"subwords":[399,401,405,488,491,817,826,911,1009,5588,5592,5620,5622,5691,5750,5752,5976,5982,5984,6055,10247,10254,10324,10355,10383,10388,10460,14898,14901,14968,15107,15182,15186,15312,15748,18370,18372,18449,18453,18541,18547,18554,18576,19240],"fullWord":5752},{"subwords":[399,401,407,488,1009,5605,5607,5616,5620,5626,5691,5693,5750,5753,5790,6055,10241,10247,10324,10360,10361,10366,10383,10392,10451,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16319,16457,16458,16459,17022,17023,17052,17750,17811,17818,17828,18341,18370,18374,18541,18547,18548,18559,18560,18562,18576,18588,18660],"fullWord":5753},{"subwords":[1636,1659,1660,1949,1996,1999,2106,2108,2271,2273,2274,2280,2284,2287,2288,5754,5755,10323,10443,10447,10748,10753,10755,10758,10888,10942,10952,12845,12848,13110,13112,13114,13118,16475,17059,17096,17097,17121,17308,17354,17359,17464,18262,20519,20523,20875,20877],"fullWord":5755},{"subwords":[4678,4679,4680,4728,4731,4734,4810,4826,5691,5693,5756,5757,5758,5760,5790,5984,10378,10383,10385,10388,10390,10392,10451,15060,15071,15087,15093,15096,15107,15110,16311,16319,16320,16340,16425,16426,17044],"fullWord":5758},{"subwords":[4680,4728,4731,4734,4826,5691,5693,5756,5759,5760,5790,10378,10383,10385,10392,10451,10459,10460,10465,16319,16320,16457,17044,17052,17816,17818,17828,18575,18576,18577,18588],"fullWord":5759},{"subwords":[3119,3135,3137,4238,4241,5691,5693,5761,5762,5790,6023,6057,10376,10383,10392,10451,10459,10460,10465,16298,16304,16319,16364,16457,17052,17818,17828,18576,18588],"fullWord":5762},{"subwords":[5691,5763,6092,6093,10383,10471,10474,12339,19992],"fullWord":5763},{"subwords":[5691,5764,5953,6092,6093,10383,10443,10444,10445,10471,10488,10822,10935,12339,12504,12601,12845,12876,13093,19992,20250,20251,20262],"fullWord":5764},{"subwords":[5765,5766,5767,5918,6453,6463,6543,6568,6572,6593,6601,6606,6619,6767,9135,9307,9416,10414,10415,10433,10536,10539,10544,10548,10551,10554,10625,10634,10654,12438,12439,12442,16365,16858,16860],"fullWord":5767},{"subwords":[5765,5768,5769,6543,6568,6572,6642,6752,6767,8500,8502,8625,8628,8678,9135,9416,10414,10415,10536,10539,10551,10554,16365,16574,16596],"fullWord":5768},{"subwords":[3120,3135,3429,3430,5770,6057,9079,10376,10414,10460,10518,10524,10536,10691,10694,18823,18844,18863,18866],"fullWord":5770},{"subwords":[4667,4714,4728,4731,4733,4739,4928,4935,4936,5691,5756,5771,5772,9108,9117,9118,10378,10383,10414,10530,10536,10537],"fullWord":5772},{"subwords":[4680,4714,4728,4731,4734,4739,4742,4826,4935,4939,4940,5037,5691,5693,5756,5760,5771,5773,5790,9108,9111,9117,9121,9127,9416,9417,10378,10383,10385,10392,10414,10415,10451,10530,10535,10536,10537,10551,16319,16320,16780,16784,17044,17068,17069],"fullWord":5773},{"subwords":[337,399,5769,5774,8241,8250,8258,8445,8500,8625,9480,9481,10324,10414,10536],"fullWord":5774},{"subwords":[5691,5693,5775,5776,5790,9416,9419,9436,9447,10383,10392,10414,10415,10451,10459,10460,10465,10536,10551,10686,10691,10694,10697,10707,16319,16457,16840,16907,16911,17052,17093,17818,17828,17862,18576,18588,18844,18850,18863,18866,18870,18947],"fullWord":5776},{"subwords":[5777,9384,10414,10494,10536,10549,10677,15373,15444,15473,21024],"fullWord":5777},{"subwords":[5691,5735,5782,5783,5830,5984,5995,9384,10383,10388,10414,10536,10549,10584,10595,10677,11539,11543,11659,11668,11669,11743,15107,15202,15444,15473,15480,15481],"fullWord":5783},{"subwords":[4673,4728,4731,5114,5146,5200,5691,5756,5786,5787,5967,10378,10383,10443,10780,10864,10865,10866,12752,12837,12845,12916,13478,13489,13490,13495,13950,13967,14020,14056,14061,14063],"fullWord":5787},{"subwords":[5691,5786,5788,5984,10383,10388,10443,10448,10864,10865,10867,10882,12845,12916,12979,13489,13495,13506,13577,13583,14056,14061,14064,14147,14262,14350,14365,15107,15248,15259,15610,15621,15663],"fullWord":5788},{"subwords":[5691,5693,5786,5789,5790,6033,10383,10392,10443,10447,10451,10864,10865,10869,10874,10888,12845,12848,12916,12925,12936,13489,13495,13498,13510,13607,14056,14061,14066,14087,14166,16319,16336,17049,17097,17104,17105,17354,17359,17406],"fullWord":5789},{"subwords":[4667,4728,4731,4733,4750,5466,5467,5471,5472,5473,5691,5756,5792,5793,10378,10383,10470],"fullWord":5793},{"subwords":[4678,4728,4731,4810,5471,5472,5474,5691,5756,5757,5792,5794,5984,6083,10378,10383,10388,10470,11029,11030,15060,15093,15107,15773,15777,15778,15800,15801],"fullWord":5794},{"subwords":[4680,4728,4731,4734,4826,4849,5471,5472,5476,5478,5496,5691,5693,5756,5760,5790,5792,5795,10378,10383,10385,10392,10451,10470,16319,16320,17044,17128,17129,18066,18067,18068,19876,19877,19878],"fullWord":5795},{"subwords":[5691,5693,5790,5796,5797,5798,5984,6092,6100,6104,10383,10388,10390,10392,10451,10471,10479,10480,15107,15110,15337,15340,15341,15354,16319,16340,16425,16449,16472,19992,19996,19998,20000,20070,20073],"fullWord":5797},{"subwords":[5769,5799,5800,6107,6110,8500,8502,8625,8628,8678,8693,8694,9416,10414,10415,10471,10481,10486,10536,10551,10711,10719,16574,16655,16659,20004,20007,20129,20134,20144,20197],"fullWord":5800},{"subwords":[43,385,399,516,1301,1324,1526,1636,1665,1907,5782,5801,10061,10136,10139,10145,10324,10420,11173,11180,11437,11442,11491],"fullWord":5801},{"subwords":[528,1288,1332,1342,1353,1521,1526,1530,1665,1671,5802,9768,9836,11167,11213,11218,11437,11446,11512,12219,12229,12244,12245,12331],"fullWord":5802},{"subwords":[513,817,867,869,1288,1290,1366,1377,1395,1521,1526,1535,1665,1700,2308,2317,2333,2378,2380,5588,5803,5804,5976,9768,9849,11167,11168,11276,11286,11296,11437,11539,14798,14808,14975,14995,15202],"fullWord":5804},{"subwords":[67,513,514,817,825,869,883,905,906,1366,1377,1381,1419,1422,1425,1428,1526,1528,1535,1539,1665,1666,1700,1701,2308,2317,2318,2343,2380,2381,5588,5599,5803,5805,5845,5976,5977,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14881,14975,14978,14995,15014,15202,15224,15869,15973,15978,16270,16278,16286,16419,16423,17161],"fullWord":5805},{"subwords":[67,79,80,1196,1197,1422,1425,1502,1507,1526,1528,1529,1665,1666,1749,1751,2721,2722,5619,5806,5807,5845,11330,11408,11413,11424,11437,11453,11560,15973,15978,16103,16270,16278,16284,21051,21055,21097,21105,21130],"fullWord":5807},{"subwords":[1560,1574,1576,1590,4588,4618,4629,4671,4672,4680,4826,5808,5809,5845,11478,11479,16319,16320,16330],"fullWord":5809},{"subwords":[1576,1587,1588,1590,1700,1701,5810,5811,5845,5984,11539,11543,11546,14995,15014,15202,15224,16319,16330,16340,16423,16425],"fullWord":5811},{"subwords":[1560,1749,2058,2059,2070,2300,2721,4618,4763,4764,5114,5163,5165,5567,5812,11817,11831,11833,12696,12752,21154],"fullWord":5812},{"subwords":[1636,1817,1851,1852,1853,2095,2106,5782,5813,9077,10414,10443,10504,10536,10584,10587,10591,10595,10609,10748,10753,11659,11668,11817,11821,11822,11854,11856,11870,12695,12700,12812,12845],"fullWord":5813},{"subwords":[1711,1712,1715,2230,5814,5845,6039,11569,11817,11823,11996,12002,12082,12872,17308,17315,17382,17434],"fullWord":5814},{"subwords":[1711,2271,2287,2288,5815,5816,5845,11536,11538,11595,11602,11817,11823,12066,12072,12872,13110,13112,16475,17308,17382,17464,18262,20519,20523,20875,20877,20892,20895],"fullWord":5816},{"subwords":[1700,1749,2072,2205,2300,2446,2721,2730,5817,11539,11817,11970,12696,12861,12959,12979,13145,14995,15202,15576,15579,15610,15627,15632,15866,21189],"fullWord":5817},{"subwords":[3119,5818,5819,5845,6023,12080,16298,16319,16330],"fullWord":5819},{"subwords":[5820,5821,5845,5984,11539,11543,11546,15202,15224,15286,16319,16330,16332,16340,16425],"fullWord":5821},{"subwords":[4671,4672,4680,4774,4785,4786,4826,5665,5822,5823,5845,5865,5875,5918,11478,11479,11512,11516,11520,11524,11528,12339,12340,12344,16319,16320,16330,16335,16373,16381],"fullWord":5823},{"subwords":[5820,5824,5984,5988,7467,7489,7530,11487,11539,11543,11548,15141,15202],"fullWord":5824},{"subwords":[3429,3430,5826,5832,6057,9079,9444,11483,11574,11578,11619,11786,18576,18579,18595,18823,18844,18882,18886],"fullWord":5826},{"subwords":[5735,5828,5830,5984,5988,5995,7467,7489,7530,8009,8010,9384,11487,11539,11543,11548,11649,11743,15141,15153,15202,15461,15480,15481],"fullWord":5828},{"subwords":[5834,5835,5845,11483,11486,11574,11578,11583,16319,16330,16457,17830,18576,18579,18582,18588,18595],"fullWord":5835},{"subwords":[5836,5845,9422,11688,11694,11764,16319,16330,16375],"fullWord":5836},{"subwords":[4671,4763,4770,5114,5163,5165,5234,5237,5838,5839,11478,11483,11574,11578,11579,11831,11833,12010,12011,12752,18576,18577,18579,18595,18981,18983,19026,19032],"fullWord":5839},{"subwords":[5838,5840,5984,11483,11539,11543,11574,11578,11580,11581,11588,11592,11970,11989,12010,12011,12979,13008,15202,15214,15222,15312,15610,15627,15632,15691,15694,15748,18576,18579,18595,18644,18981,19026,19032,19093,19101,19240],"fullWord":5840},{"subwords":[5838,5841,5845,11483,11486,11574,11578,11583,12007,12010,12011,12014,12030,12872,16319,16330,16457,17198,17382,17435,17830,18576,18579,18582,18588,18595,18981,18985,19026,19032,19033,19034],"fullWord":5841},{"subwords":[5735,5830,5842,5984,5995,9178,9189,9384,11539,11543,11743,13489,13506,13577,13583,13593,13705,13712,14262,14276,14313,14317,15202,15248,15480,15481,15508,15509,15747],"fullWord":5842},{"subwords":[5782,5785,5843,10443,10495,10864,10865,10957,11065,11870,11884,11947,11948,11954,11962,12205,12845,12916,13981,14009,14024,14056,14061,14088,14093,21115,21127],"fullWord":5843},{"subwords":[5844,11539,11574,11592,11947,11948,11951,11970,11989,12010,12011,12916,12937,12979,13008,13577,13593,13599,13613,13624,14024,14027,14093,14147,14160,14188,14262,14350,14359,14369,15202,15248,15312,15610,15627,15632,15634,15663,15691,15694,15747,15748,18595,18596,18601,18644,18981,19026,19032,19075,19076,19079,19093,19101,19318,19319,19323,19324],"fullWord":5844},{"subwords":[43,385,399,401,612,1301,1303,1332,1342,1530,1576,1582,1636,1671,1679,5691,5745,5848,10061,10174,10324,10344,10383,12219,12229,12331,12339],"fullWord":5848},{"subwords":[93,96,114,116,126,134,693,694,697,711,927,1009,2869,2883,2887,2906,2907,2908,2917,3021,3041,3042,3052,3057,3064,3145,3150,4238,4241,5616,5620,5626,5849,5850,5856,5918,6023,6055,6057,6074,6075,12229,12289,12325,12330,12368,12374,12376,15880,15986,15995,16041,16043,16134,16136,16157,16163,16270,16293,16298,16299,16304,16399,16457,17763,18408,18428,18541,18559,18607,18624],"fullWord":5850},{"subwords":[399,401,528,612,5691,5745,5782,5851,5881,10136,10145,10174,10324,10344,10383,10418,11173,11180,11213,11218,11437,11442,11446,11512,12229,12244,12245,12339],"fullWord":5851},{"subwords":[215,528,817,869,5588,5595,5852,5953,5976,11213,11218,11243,11265,11276,11286,11437,11446,11512,11539,11810,11891,11970,11977,12229,12244,12245,12248,12319,12522,12525,12548,12550,12551,12680,12866,12876,12979,14808,14821,14975,15202,15207,15238,15564,15568,15610,15627,15628,15632],"fullWord":5852},{"subwords":[693,694,697,711,1009,5605,5616,5620,5621,5626,5853,5854,5918,6055,6074,6075,12229,12289,12325,12330,12339,12368,12374,12376,15986,15995,16012,16041,16043,16045,16270,16293,16319,16335,16380,16399,16457,16458,18408,18428,18541,18559,18560,18576,18583,18585,18588,18607,18624,18625],"fullWord":5854},{"subwords":[93,114,126,128,693,694,700,701,1009,2869,2883,2908,3052,3145,3402,3413,3429,3430,5620,5849,5855,5856,6055,6057,6074,9079,9207,9208,9325,12229,12325,12374,12410,12463,18347,18408,18541,18607,18823,18844,18894,18898],"fullWord":5855},{"subwords":[93,114,269,2788,2869,2883,5856,5857,7467,7493,7496,12229,12230,12339],"fullWord":5857},{"subwords":[93,112,114,528,574,732,2848,2853,2859,2869,2883,2921,2922,5856,5858,5956,11086,11089,11213,11218,11270,11437,11446,11512,12229,12244,12245,12257,12259,12317,13154,13155,13239,13245,13439,13453,13470,13539],"fullWord":5858},{"subwords":[93,96,114,116,2869,2883,2887,2906,3021,3104,3119,3139,5605,5856,5859,5918,6023,12229,12339,15880,15986,15995,16134,16160,16270,16285,16298,16319,16335,16385],"fullWord":5859},{"subwords":[93,114,604,657,663,665,2869,2883,2888,2896,3402,3413,5856,5860,9079,9200,9207,9208,9297,12229,12252,12253,12410,12448],"fullWord":5860},{"subwords":[3113,3638,3644,3657,3777,3786,3787,4639,4656,4774,5096,5114,5172,5176,5177,5653,5665,5856,5862,5865,5953,12339,12340,12493,12499,12752,12874,12876],"fullWord":5862},{"subwords":[3777,3786,3898,3913,4120,4181,5653,5856,5863,5953,5984,5998,12339,12548,12874,12876,12965,12979,15021,15042,15238,15592,15610],"fullWord":5863},{"subwords":[3145,3150,4238,4241,4423,5856,5864,5918,6023,6057,12368,12374,12376,16163,16298,16304,16399,16457,18018,18019,18283,18287,18607,18624,21120,21122,21130,21135],"fullWord":5864},{"subwords":[605,608,817,4492,4500,4516,4532,4605,4607,4678,4774,4810,5588,5589,5595,5596,5665,5865,5866,5868,5976,5984,5998,12229,12274,12319,12321,12339,12340,12358,14736,14821,14826,14830,14961,15060,15093,15227],"fullWord":5866},{"subwords":[4678,4679,4680,4774,4785,4786,4787,4810,4826,5665,5865,5868,5869,5875,5918,5984,5998,6000,12339,12340,12344,12358,12359,15060,15071,15087,15093,15096,15227,15230,16311,16319,16320,16335,16340,16381,16383,16425,16426,17237],"fullWord":5869},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5865,5870,7493,7604,7609,9297,9299,12448],"fullWord":5870},{"subwords":[4714,4774,4853,4935,4985,4988,5071,5665,5865,5871,5939,6092,6093,9108,12339,12340,12387,19992,20008,20010,20027,20126,20129,20130,20152,20157,20159],"fullWord":5871},{"subwords":[4774,4785,4826,4865,4873,5114,5117,5172,5176,5188,5221,5223,5277,5280,5282,5283,5865,5872,5873,5875,5909,5918,5953,5955,12390,12397,12493,12499,12500,12501,12506,12560,12561,12562,12606,12610,12752,12755,12876,12879,13110,13111,13112,13119,13120,13124,16381,16475,16481,17284,17285,17323,17383,17387,17464,17465,17469,20524,20531,20579,20581,20583,20584,20875,20877,20897],"fullWord":5873},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5006,5023,5865,5874,5996,9297,9299,9300,9384,9385,12358,12448,15060,15175,15227,15428,15433,15491],"fullWord":5874},{"subwords":[4667,4774,4793,5466,5467,5471,5507,5510,5511,5665,5865,5867,5876,5877,12339,12340,12624],"fullWord":5877},{"subwords":[4680,4774,4785,4786,4826,4849,5471,5478,5507,5511,5512,5522,5665,5865,5875,5876,5878,5918,5923,5924,12339,12340,12344,12624,12627,16319,16320,16335,16381,18066,18067,18068,18117,19876,19877,19878],"fullWord":5878},{"subwords":[4678,4774,4810,5471,5507,5511,5539,5665,5865,5868,5876,5879,5938,5984,5998,12339,12340,12358,12624,12626,15060,15093,15227,15773,15777,15778,15821,15822,19660,19866],"fullWord":5879},{"subwords":[4774,4810,5114,5115,5172,5176,5260,5392,5471,5507,5511,5523,5539,5865,5880,5953,12358,12493,12499,12548,12624,12626,12752,12876,12979,13051,15060,15078,15227,15238,15600,15603,15610,15706,15714,15773,15777,15778,15821,15822,19660,19664,19665,19866],"fullWord":5880},{"subwords":[528,531,5605,5845,5881,5882,5918,11213,11218,11221,11247,11248,11330,11437,11446,11450,11453,11512,11524,11560,12229,12244,12245,12250,12339,15973,15978,15986,15995,16270,16278,16281,16319,16330,16335,16373],"fullWord":5882},{"subwords":[5698,5884,5894,5984,5988,5998,6189,6196,7467,7493,7496,7509,7984,7986,7992,8195,12339,15141,15866,21120],"fullWord":5884},{"subwords":[93,114,2785,2869,2883,5856,5885,6210,6293,6409,6453,6454,12229,12339],"fullWord":5885},{"subwords":[254,615,657,663,693,694,1009,5620,5705,5886,6055,6074,6293,6344,6347,6399,6453,6485,12229,12252,12325,12374,18408,18541,18607],"fullWord":5886},{"subwords":[4728,4774,5114,5146,5172,5176,5756,5765,5865,5888,5950,5953,6406,6440,6453,6458,6740,6793,6874,6902,6917,6920,10378,10427,10443,10444,10780,10781,10822,12493,12499,12504,12752,12837,12838,12845,12876],"fullWord":5888},{"subwords":[269,5709,5889,7267,7269,7352,7467,7493,7496,12229,12230,12339],"fullWord":5889},{"subwords":[4714,4720,4728,4739,4774,4935,4947,4985,4988,4993,4997,5756,5865,5890,7477,7478,7484,7493,7586,7604,7680,7684,9117,9265,10378,10398,10414,10427,10530,10536,10537,10544,10625,10628,10637,12438,12439],"fullWord":5890},{"subwords":[5891,7467,7493,7496,7503,7604,9297,12339,12448],"fullWord":5891},{"subwords":[4714,4720,4774,4810,4935,4947,4985,4988,4990,4993,5023,5028,5351,5865,5892,5894,5988,5996,7493,7604,7617,7997,8015,8016,9384,9385,12358,15060,15075,15141,15173,15175,15227,15234,15428,15433,15437,15461,15491,15494,15495],"fullWord":5892},{"subwords":[5893,5894,5988,5996,7493,7512,7540,7604,7628,7637,8015,8035,9245,9325,9331,9338,9384,12374,12463,12464,12466,15141,15173,15175,15234,15241,15312,15461,15494,15542,15748,18607,18649,18844,18847,18855,18894,18898,18901,18902,18941,19280,19289],"fullWord":5893},{"subwords":[269,528,622,817,869,5588,5595,5894,5895,5976,5988,7317,7323,7326,7375,7461,7489,7493,7530,7531,7921,11127,11128,11213,11218,11223,11224,11276,11286,11288,11437,11446,11487,11512,11539,12229,12230,12244,12245,12248,12319,14758,14762,14771,14808,14821,14832,14833,14975,15141,15202,15207],"fullWord":5895},{"subwords":[5765,5896,6453,6821,6824,6838,7153,7179,7477,7493,7680,7722,7759,8132,8151,10398,10470,10981,10982,11008,11012,11013],"fullWord":5896},{"subwords":[269,287,341,528,5897,7283,7317,7323,7334,7335,7489,7493,7604,9158,11127,11128,11132,11156,11157,11213,11218,11223,11437,11446,11487,11489,11512,11645,11649,11697,11706,11711,12229,12230,12244,12245,12443],"fullWord":5897},{"subwords":[5898,5953,9297,9360,9592,9614,9624,9625,12353,12448,12528,12533,12876],"fullWord":5898},{"subwords":[5899,5900,5918,5953,5955,9614,9615,9616,9617,9644,9647,9672,9676,12506,12560,12561,12564,12573,12876,12879,13147,17383,17472,18287,21120,21122,21130,21183],"fullWord":5900},{"subwords":[93,114,399,401,612,2813,2869,2883,3459,3491,5691,5745,5856,5861,5901,10072,10073,10164,10174,10324,10344,10383,12229,12339],"fullWord":5901},{"subwords":[5902,5918,9290,9291,9307,9312,9318,9325,9328,9334,9416,9419,9436,9447,10414,10415,10433,10437,10459,10460,10465,10536,10544,10548,10551,10625,10634,10654,10656,10659,10686,10688,10691,10694,10697,10707,12368,12374,12376,12438,12439,12442,12463,12471,16399,16400,16457,16826,16840,16858,16860,16907,16911,17093,17255,17826,17862,18607,18624,18844,18850,18863,18866,18870,18894,18898,18900,18919,18920,18947],"fullWord":5902},{"subwords":[5845,5903,5918,8483,8532,8534,8539,8540,8547,11512,11524,11563,12339,16319,16330,16335,16373,16574,16583],"fullWord":5903},{"subwords":[5832,5904,6079,9325,9444,11489,11512,11574,11645,11697,11706,11729,11733,11786,12374,12443,12463,18595,18607,18844,18882,18886,18894,18898,18925,21120,21135,21136,21144],"fullWord":5904},{"subwords":[605,657,663,4492,4500,4605,4774,5665,5865,5905,12229,12252,12339,12340],"fullWord":5905},{"subwords":[5906,5907,5918,9297,9302,9307,12448,12449,12651,12654,16858,16860,18066,18083,18117,19876],"fullWord":5907},{"subwords":[5718,5908,5953,7493,7759,7815,8151,8540,8725,8731,8789,8793,8945,8951,8952,8989,8990,12509,12876,19583],"fullWord":5908},{"subwords":[269,311,622,817,5583,5588,5595,5894,5910,5976,5984,5988,5998,7375,7461,7467,7493,7496,7497,7509,7984,12229,12230,12319,12339,14758,14762,14821,14830,14832,14833,15141],"fullWord":5910},{"subwords":[693,694,709,732,735,781,782,817,911,1009,5588,5595,5620,5911,5934,5956,5976,5982,6055,6074,12229,12257,12259,12317,12319,12325,12374,13239,13245,13261,13286,13294,13296,13328,13329,13364,13367,13369,13372,13439,13453,13455,13460,13464,13539,13560,13577,13599,13613,14247,14248,14262,14821,14847,14851,14852,14867,14898,14901,14979,15241,15248,15312,15748,18408,18436,18437,18439,18449,18453,18460,18467,18541,18554,18607,18649,19221,19251],"fullWord":5911},{"subwords":[3272,3305,3309,3413,5856,5912,5996,8503,8540,8552,8612,8625,8672,9079,9207,9213,9384,12410,12412,12415,15021,15171,15175,15383,15411,15416,15417],"fullWord":5912},{"subwords":[1576,1582,1587,1671,1679,2072,2127,2134,2136,2205,2211,2212,2446,5637,5913,5953,5984,5998,12331,12339,12481,12548,12876,12959,12979,14995,15238,15576,15579,15610],"fullWord":5913},{"subwords":[5780,5914,5915,5953,10443,10444,10822,10824,10882,10886,12504,12520,12548,12845,12876,12979,15238,15610,15621,15623],"fullWord":5915},{"subwords":[5914,5916,5918,5953,5955,6000,6004,10433,10443,10444,10447,10822,10824,10825,10882,10883,10886,10888,10889,12504,12505,12506,12548,12556,12560,12561,12845,12848,12876,12879,12979,12982,13007,15238,15610,15611,15621,15622,15676,16391,17097,17272,17354,17359,17383,17419,17420],"fullWord":5916},{"subwords":[5917,5953,12374,12548,12574,12581,12583,12590,12876,12887,12979,13008,15238,15241,15312,15610,15659,15691,15694,15697,15748,18607,18621,18649,18981,19036,19038,19040,19060,19093,19101,19105,19106],"fullWord":5917},{"subwords":[5716,5918,5919,7493,7511,7604,7611,9297,9302,9307,12448,12449,16815,16858,16860,16866,16867],"fullWord":5919},{"subwords":[5691,5693,5790,5918,5920,9307,9416,10383,10392,10414,10415,10433,10434,10451,10536,10544,10548,10551,10625,10634,10654,12339,12438,12439,12442,16319,16335,16352,16387,16858,16860],"fullWord":5920},{"subwords":[5918,5922,5953,5955,10433,10443,10444,10447,10470,10822,10888,10925,11008,11009,12504,12505,12506,12560,12561,12597,12845,12848,12876,12879,12888,13053,16402,17097,17128,17354,17359,17383,17442,18066,18117,19876],"fullWord":5922},{"subwords":[4680,4774,4785,4786,4826,4849,5471,5478,5507,5511,5512,5522,5665,5865,5875,5876,5878,5918,5923,5924,12339,12340,12344,12624,12627,16319,16320,16335,16381,18066,18067,18068,18117,19876,19877,19878],"fullWord":5924},{"subwords":[5918,5923,5925,6031,6039,6042,12339,12367,16319,16335,16342,16394,16398,18066,18073,18117,18130,19876,19878,19882],"fullWord":5925},{"subwords":[5918,5923,5926,5938,5984,5998,6000,12339,12655,15334,15777,15782,15821,15822,15823,15832,15840,16319,16335,16340,16425,17237,18066,18071,18117,18150,19866,19867,19876,19878,19880],"fullWord":5926},{"subwords":[337,399,423,430,434,488,637,693,694,700,1009,5620,5745,5927,6055,6074,9290,9325,9328,9334,9437,10120,10126,10174,10247,10251,10263,10324,10344,10349,10414,10437,10460,10536,10544,10625,10656,10691,10694,12229,12238,12292,12325,12374,12438,12439,12463,18347,18349,18370,18408,18541,18547,18607,18844,18863,18866,18894,18898],"fullWord":5927},{"subwords":[5918,5928,5929,5935,5984,5998,5999,6000,6018,6046,12339,12362,12368,12370,12374,12376,15241,15245,15289,15290,15306,15312,15748,16319,16335,16340,16399,16425,16457,17237,17823,17840,17843,18576,18583,18585,18588,18607,18624,18625,18627,18649,18650,18651,18658,19240,19242],"fullWord":5929},{"subwords":[3145,3413,3429,3430,5856,5930,6057,9079,9207,9325,12339,12374,12410,12424,12463,18576,18583,18607,18823,18844,18894,18898],"fullWord":5930},{"subwords":[5735,5928,5931,5935,5984,5995,5996,5998,9245,9325,9331,9338,9384,9387,12339,12374,12463,12464,12466,15175,15241,15312,15321,15542,15748,18576,18583,18607,18649,18650,18844,18847,18894,18898,18941,19240,19289],"fullWord":5931},{"subwords":[5932,9325,12374,12381,12463,12472,18607,18630,18636,18844,18894,18898,18921,18925,18950,18969,19389,21120,21135,21136,21144],"fullWord":5932},{"subwords":[1671,1685,1721,2127,2134,2237,5637,5933,5953,11512,11574,11817,11891,11916,12010,12011,12331,12374,12481,12522,12525,12574,12581,12866,12876,18595,18607,18981,19026,19028,19032,19036,19038],"fullWord":5933},{"subwords":[693,694,709,732,735,781,782,817,911,1009,5588,5595,5620,5911,5934,5956,5976,5982,6055,6074,12229,12257,12259,12317,12319,12325,12374,13239,13245,13261,13286,13294,13296,13328,13329,13364,13367,13369,13372,13439,13453,13455,13460,13464,13539,13560,13577,13599,13613,14247,14248,14262,14821,14847,14851,14852,14867,14898,14901,14979,15241,15248,15312,15748,18408,18436,18437,18439,18449,18453,18460,18467,18541,18554,18607,18649,19221,19251],"fullWord":5934},{"subwords":[5928,5935,5936,5984,5998,6062,12339,12374,15241,15312,15748,18576,18583,18584,18607,18649,18650,19240],"fullWord":5936},{"subwords":[4714,4774,4853,4935,4985,4988,5071,5665,5865,5871,5939,6092,6093,9108,12339,12340,12387,19992,20008,20010,20027,20126,20129,20130,20152,20157,20159],"fullWord":5939},{"subwords":[5735,5940,5984,5995,5996,5998,6092,6093,6100,9384,9387,12339,12363,12386,12387,15175,15337,15549,15551,19992,19996,20008,20011,20041,20129,20132,20152,20157],"fullWord":5940},{"subwords":[5918,5941,6092,6093,6097,6104,9307,12339,12387,16319,16335,16352,16470,16798,16858,16860,19992,20000,20008,20012,20129,20134,20152,20157,20161,20167,20197],"fullWord":5941},{"subwords":[5918,5942,5943,5953,5955,9307,9360,9366,12387,12506,12516,12560,12561,12876,12879,13093,13094,13102,13103,16858,16860,17383,20008,20012,20129,20134,20152,20157,20161,20164,20165,20167,20197,20262],"fullWord":5943},{"subwords":[5918,5944,5945,5946,5953,5955,12506,12560,12561,12564,12573,12876,12879,13093,13094,13147,17383,17472,18287,20262,21120,21122,21130,21183],"fullWord":5945},{"subwords":[617,732,735,817,1145,1158,5588,5595,5947,5956,5976,12229,12257,12259,12317,12319,12390,13239,13245,13286,13294,13408,13410,13415,13418,13439,13453,13455,13539,13577,13630,14254,14262,14821,14851,14852,14933,14979,15248,20393,20396,20410,20417,20432,20436,20505,20510,20579,20973,20984],"fullWord":5947},{"subwords":[5883,5948,6189,11512,12339,21119,21120,21251,21255],"fullWord":5948},{"subwords":[3777,3786,5653,5856,5949,5953,12339,12874,12876],"fullWord":5949},{"subwords":[215,337,399,423,430,472,477,637,680,5745,5951,5953,9360,10120,10174,10324,10344,10414,10443,10444,10536,10544,10625,10652,10663,10741,10814,10822,12229,12238,12438,12439,12504,12812,12845,12876],"fullWord":5951},{"subwords":[5769,5952,8500,8510,8523,8625,8645,8688,8725,8739,8754,8770,8892,8896,10414,10443,10460,10536,10691,10694,10698,10699,10702,10897,10898,12812,12845,18697,18743,18744,18844,18863,18866,18981,19002,19017],"fullWord":5952},{"subwords":[215,645,657,663,665,666,686,5953,5954,9200,9297,9360,12229,12252,12353,12448,12528,12533,12876],"fullWord":5954},{"subwords":[93,337,399,422,481,732,2813,2921,2922,3120,3402,3465,3529,4046,4047,5956,5959,5960,9079,10072,10073,10182,10324,10350,10414,10518,10536,10665,13154,13155,13191,13204,13207,13439,13450,13688,13705,13743,13885,13896,13940],"fullWord":5960},{"subwords":[5718,5953,5962,7493,7604,7612,7815,9360,12453,12509,12547,12876,12916,12918,12927,13516,13539,13564,13705,13721,13722,13765,13769,13773,13809,14032,14105,14107],"fullWord":5962},{"subwords":[5718,5963,7477,7525,7612,7708,10398,10414,10443,10536,10665,10793,10796,10864,10865,12792,12812,12845,12916,13516,13705,13721,13743,14032,14056,14061],"fullWord":5963},{"subwords":[732,5956,5964,12916,13439,13705,14032,21238,21282],"fullWord":5964},{"subwords":[3354,3357,3367,3864,3867,3872,3883,3884,3944,4048,4237,5641,5965,5966,6023,6033,8549,8714,8725,8730,8845,8846,8850,8856,8881,8886,12810,12916,12917,12925,12936,13607,14166,14172,16194,16195,16298,16574,16676,16693,16694,17316,17406,17407,17525],"fullWord":5966},{"subwords":[5953,5968,11512,11891,11899,11920,11947,11948,11954,11962,12205,12522,12525,12547,12866,12876,12916,12918,13539,13564,13567,14024,14093,14105,14115,21120,21127,21183],"fullWord":5968},{"subwords":[399,407,5627,5970,5971,10324,10360,10470,14589,14595,14609,14610,14635,14650,15942,15948,16270,16274,16416,17128,17712,18066,19871,19876],"fullWord":5971},{"subwords":[1009,5620,5627,5972,6055,14589,14595,14630,14635,18508,18541,18576],"fullWord":5972},{"subwords":[5973,5974,6033,9375,13705,13716,13830,13832,13871,14421,14551,14635,14650,14659,14678,14679,16416,16883,18066,18083,18135,18136,19825,19876],"fullWord":5974},{"subwords":[5975,14588,14635,14656,14659,14666,14689,14690,18844,21135,21136],"fullWord":5975},{"subwords":[200,817,825,905,906,4516,4520,4607,4611,4678,4679,4680,4810,4826,5588,5589,5599,5605,5606,5609,5976,5977,5978,5979,5984,14736,14751,14881,14882,14961,14965,15060,15071,15087,15093,15096,15893,16024,16270,16286,16288,16311,16319,16320,16340,16419,16425,16426],"fullWord":5979},{"subwords":[817,825,905,906,5588,5599,5605,5609,5976,5977,5978,5980,5984,6008,6016,14872,14881,14883,14983,14988,16024,16270,16286,16289,16319,16340,16419,16425,16428],"fullWord":5980},{"subwords":[817,825,905,906,907,973,5588,5599,5605,5609,5610,5611,5976,5977,5978,5981,5984,6031,6039,6042,14881,14885,16024,16025,16270,16286,16290,16291,16319,16340,16341,16342,16419,16425,16429],"fullWord":5981},{"subwords":[1700,1790,2417,2428,2567,2610,5830,5846,5983,9077,9170,9171,9384,11539,11743,14995,15202,15402,15480,15481,15749,15755,15777,15806,19614,19840],"fullWord":5983},{"subwords":[3119,3154,3161,3162,4120,4130,4142,4144,4238,4241,5984,5985,5986,6018,6023,6046,6057,15021,15048,15290,15306,15312,15748,16228,16298,16302,16304,16319,16340,16425,16457,17823,17840,18576,18588,18642,18658,19240,19242],"fullWord":5986},{"subwords":[5909,5953,5984,5987,5998,6118,6119,12339,12390,12394,12548,12606,12876,12979,13110,13119,13121,15232,15238,15368,15610,15734,20532,20541,20579,20587,20875,20897,20933,20944,20984],"fullWord":5987},{"subwords":[5718,5721,5988,5989,5990,5991,5992,6004,6018,7540,7541,7788,7789,7790,7855,7857,7867,7874,8056,8057,12798,12799,12979,12982,13007,13008,13011,15141,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17924,18981,18985,18993,19001,19093,19101,19103,19113],"fullWord":5991},{"subwords":[93,96,121,123,349,359,796,810,817,825,858,863,905,906,2941,2954,2960,2968,3001,3021,3156,3157,3402,4158,5588,5599,5976,5977,5993,5994,6023,9079,9085,9376,9384,9389,9409,14717,14722,14788,14881,15021,15048,15411,15415,15526,15880,16028,16142,16145,16178,16270,16286,16298,16419,16769,16889,16890,17722],"fullWord":5994},{"subwords":[5735,5830,5984,5995,5996,5997,5998,9384,9387,11489,11512,11539,11543,11645,11697,11706,11708,11743,12339,12443,15175,15202,15480,15481],"fullWord":5997},{"subwords":[5918,5928,5929,5935,5984,5998,5999,6000,6018,6046,12339,12362,12368,12370,12374,12376,15241,15245,15289,15290,15306,15312,15748,16319,16335,16340,16399,16425,16457,17237,17823,17840,17843,18576,18583,18585,18588,18607,18624,18625,18627,18649,18650,18651,18658,19240,19242],"fullWord":5999},{"subwords":[4667,4678,4810,5114,5115,5984,6001,6002,12745,12746,12752,12979,15060,15069,15078,15093,15600,15603,15610],"fullWord":6002},{"subwords":[4678,4679,4680,4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5984,6001,6003,6004,6005,12752,12755,12979,12982,13007,15060,15071,15078,15079,15081,15087,15093,15096,15600,15603,15609,15610,15611,15676,15677,16311,16319,16320,16340,16425,16426,17323,17419],"fullWord":6003},{"subwords":[5984,6004,6005,6006,6031,6039,6042,12979,12982,13007,15610,15611,15676,15679,16319,16340,16341,16342,16425,16429,17419,17424,17434],"fullWord":6006},{"subwords":[3161,3429,3430,3432,3693,3898,3965,3968,6007,6057,9079,9384,12965,12979,13008,13038,15021,15051,15052,15312,15411,15504,15542,15592,15610,15691,15694,15748,18823,18844,18847,18941,18945,18981,19093,19098,19101,19267,19292],"fullWord":6007},{"subwords":[605,608,817,4492,4500,4516,4518,4532,4535,4605,4607,4774,4810,5346,5588,5595,5865,5976,6008,6009,12229,12274,12319,12358,14736,14821,14826,14872,14961,14983,15060,15227,15275],"fullWord":6009},{"subwords":[693,694,709,817,911,1009,5588,5595,5620,5976,5982,6008,6010,6055,6074,12229,12319,12325,12374,14821,14847,14849,14872,14898,14901,14903,14983,15241,15275,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,18652,18653],"fullWord":6010},{"subwords":[817,818,911,1009,5588,5620,5976,5982,6008,6011,6055,14871,14872,14898,14899,14901,14903,14983,15312,15748,18449,18453,18541,18554,18652,18653],"fullWord":6011},{"subwords":[5894,5988,5996,6008,6013,7493,7604,8015,9384,15141,15173,15175,15234,15461,15494,15496],"fullWord":6013},{"subwords":[6004,6008,6014,6015,6016,12979,12982,13007,15610,15611,15676,17419,17423],"fullWord":6015},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6017,6018,6055,14881,14898,14901,14905,14912,14945,14950,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19381,19575,19576,21264,21266,21267],"fullWord":6017},{"subwords":[3161,4142,4214,4215,4224,4226,4238,4241,4268,4271,4312,4326,4330,4331,4350,4351,4356,4357,4375,4376,4378,4379,4394,5654,5655,5656,6018,6019,6020,6023,6057,15021,15048,15059,15306,15312,15748,15777,15782,15840,15852,15858,15861,16265,16267,16298,16304,16457,18056,18066,18071,18074,18150,19350,19352,19356,19359,19876,19880],"fullWord":6020},{"subwords":[6018,6021,6022,6033,13577,13599,13602,13609,13613,13626,14262,14281,14284,14403,14427,14518,14524,14544,14551,14561,14567,15248,15272,15305,15306,15312,15748,15777,15782,15840,15852,15858,15861,16409,16457,16468,17687,17693,17836,17961,18013,18066,18071,18074,18135,18136,18137,18148,18150,19356,19359,19386,19453,19456,19482,19825,19826,19876,19880],"fullWord":6022},{"subwords":[93,96,732,739,779,961,2921,2922,2926,2938,3021,3104,3119,4048,4237,5605,5956,6023,6024,6033,13154,13155,13159,13167,13336,13439,13440,13442,13461,13462,13489,13510,15880,16014,16139,16270,16298,16319,16336,17476,17477,17525],"fullWord":6024},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":6025},{"subwords":[93,96,121,123,796,810,817,825,905,906,907,973,2941,2954,2960,2961,3001,3021,3024,3165,4084,4141,5588,5599,5976,5977,6023,6026,6039,14717,14722,14881,14885,15021,15048,15880,15892,16142,16145,16148,16155,16270,16286,16290,16291,16298,16303,16419],"fullWord":6026},{"subwords":[3119,3268,3271,6023,6027,6118,6121,8483,8588,8594,16298,16319,16475,16574,16610,20532,20623],"fullWord":6027},{"subwords":[3161,3898,3902,3929,3931,3940,3958,3961,3965,3968,3970,3971,4142,4238,4241,6004,6018,6023,6028,6057,12965,12971,12979,12982,13007,13008,13011,15021,15048,15052,15054,15306,15312,15592,15599,15610,15611,15676,15691,15694,15695,15700,15748,16198,16205,16298,16304,16305,16457,17316,17419,17429,17435,17924,18981,18985,19093,19098,19100,19101,19103,19113],"fullWord":6028},{"subwords":[3898,3902,3929,4010,4014,4015,4028,4147,4150,4198,4206,6004,6023,6029,12965,12971,12979,12982,13007,13110,13112,15021,15048,15302,15592,15599,15610,15611,15676,15734,15744,16198,16214,16232,16298,16445,16475,17316,17419,17464,17466,18272,20875,20877,20933,20947],"fullWord":6029},{"subwords":[3638,3644,3649,3656,3657,3658,4263,4267,4268,4269,4271,4639,4656,4826,4849,5096,5104,5114,5117,5221,5223,5254,5263,5455,5456,5471,5478,5523,5524,5656,6023,6030,12752,12755,16252,16298,17316,17323,18066,18067,19876,19877],"fullWord":6030},{"subwords":[5845,6032,9422,11656,11657,11764,11772,11854,12834,12872,16375,16954,16969,17190,17382],"fullWord":6032},{"subwords":[337,340,362,399,407,481,486,732,739,779,961,5956,6033,6034,9416,10182,10188,10194,10195,10324,10350,10353,10360,10414,10415,10536,10551,10665,10666,10672,10681,13191,13192,13204,13207,13211,13232,13336,13439,13450,13452,13461,13705,13716,13743,13745,13839,13940,13943,13961,14421,15931,15942,15948,16014,16270,16274,16403,16405,16883,17019,17088,17476,17488,17563],"fullWord":6034},{"subwords":[4673,4677,4680,4714,4826,4935,4939,5014,5021,5037,6033,6035,9108,9111,9127,13478,13483,13488,13489,13490,13510,13705,13710,13716,14421,16319,16320,16336,16780,16883,17530,17532,17562],"fullWord":6035},{"subwords":[6031,6033,6036,6039,6042,13489,13510,13705,13716,13844,14421,16319,16336,16338,16342,16883,16888,16903,17567],"fullWord":6036},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":6037},{"subwords":[973,980,1196,1197,5619,6039,6040,6041,16037,16040,16103,16109,16270,16291,21097,21105,21130],"fullWord":6041},{"subwords":[1009,5605,5616,5620,5626,6044,6055,16041,16043,16270,16293,16319,16457,16458,17788,17790,17846,18490,18495,18498,18503,18541,18559,18560,18565,18567,18576,18588,18662],"fullWord":6044},{"subwords":[5845,6045,11483,11486,11574,11578,11583,16319,16330,16457,17830,18576,18579,18582,18588,18595],"fullWord":6045},{"subwords":[5984,6018,6031,6039,6042,6046,6047,15290,15291,15306,15309,15312,15748,16319,16340,16341,16342,16425,16429,16430,16457,16464,17823,17824,17840,17842,18576,18588,18658,19240,19242,19253],"fullWord":6047},{"subwords":[5984,6018,6046,6048,6066,6067,8483,8552,8562,8568,8584,8586,8934,8935,15290,15306,15312,15748,16319,16340,16425,16457,16574,16587,16589,17823,17840,18576,18588,18658,18697,18698,18712,18713,18716,18767,18768,19240,19242],"fullWord":6048},{"subwords":[6033,6039,6049,6050,12916,12925,12936,12937,12944,13607,13608,13609,13612,13613,13626,14027,14030,14166,14170,14179,14182,14186,14188,14201,14422,14427,16409,16414,16457,16464,17406,17414,17434,17435,17436,17644,17645,17836,17838,17921,17922,18981,18985,19075,19076,19081,19090,19125,19386],"fullWord":6050},{"subwords":[227,817,825,905,906,911,918,919,993,1009,1196,1197,5588,5599,5616,5619,5620,5626,5976,5977,5982,6018,6051,6055,14881,14898,14901,14905,14912,14939,14944,15282,15306,15312,15748,15864,15865,15866,15867,16041,16043,16056,16103,16105,16270,16286,16293,16419,16457,17773,17775,17802,17804,17956,18018,18019,18449,18453,18455,18472,18541,18554,18557,18558,18559,19231,19232,19257,19258,19377,19381,19570,19572,21071,21074,21097,21099,21104,21105,21106,21130,21135,21212],"fullWord":6051},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":6052},{"subwords":[5845,5846,5847,6018,6053,11539,11574,12152,12154,12177,12179,12184,12187,12188,15202,15224,15306,15312,15748,15777,15782,15806,15820,15840,15852,15858,15861,16446,16457,17203,17830,17989,18066,18071,18074,18103,18150,18595,18644,18648,19356,19359,19876,19880],"fullWord":6053},{"subwords":[6018,6039,6054,15306,15309,15312,15748,15777,15782,15840,15841,15849,15850,15852,15856,15858,15861,16457,16464,18066,18071,18072,18073,18074,18075,18150,18153,19253,19356,19359,19371,19876,19880,19881,19882,19886],"fullWord":6054},{"subwords":[3113,4639,6057,6058,6059,8483,8484,18570,18576,18577,18697,18698],"fullWord":6059},{"subwords":[3161,3248,3260,4120,4144,5984,5985,6057,6058,6060,6066,8483,8552,8562,15021,15312,15317,15748,18570,18576,18642,18697,18698,18712,18767,19240],"fullWord":6060},{"subwords":[3119,3264,4238,4241,6023,6057,6058,6061,8483,8586,8935,16298,16304,16319,16457,16574,16589,18570,18576,18588,18697,18698,18716],"fullWord":6061},{"subwords":[5928,5935,5936,5984,5998,6062,12339,12374,15241,15312,15748,18576,18583,18584,18607,18649,18650,19240],"fullWord":6062},{"subwords":[693,694,1009,5620,5621,5853,6055,6063,6074,8378,8381,8461,8483,8540,12229,12325,12328,12339,12374,12612,18408,18541,18576,18583,18607,18686,18687,18697,18698,18708],"fullWord":6063},{"subwords":[6065,8483,8540,12339,12374,12612,18576,18583,18607,18697,18698,18708],"fullWord":6065},{"subwords":[5984,6018,6046,6048,6066,6067,8483,8552,8562,8568,8584,8586,8934,8935,15290,15306,15312,15748,16319,16340,16425,16457,16574,16587,16589,17823,17840,18576,18588,18658,18697,18698,18712,18713,18716,18767,18768,19240,19242],"fullWord":6067},{"subwords":[3264,3272,3328,3331,3429,3430,3434,4238,4241,6023,6057,6058,6068,6069,8506,8586,8612,8625,8628,8678,8685,8688,8691,8935,9079,9085,9440,9442,9447,16178,16298,16304,16457,16574,16653,16769,16907,16911,18570,18697,18742,18823,18830,18844,18850,18947],"fullWord":6069},{"subwords":[3145,3272,3305,3309,3328,3413,3429,3430,5856,6057,6058,6068,6070,8540,8612,8625,8660,8688,9079,9207,9213,9325,9440,12374,12410,12415,12463,12612,18570,18607,18609,18697,18708,18731,18732,18823,18844,18894,18898],"fullWord":6070},{"subwords":[6072,6073,8586,8607,8935,10459,10460,10465,10495,10496,11065,11066,16457,16574,16758,17149,18018,18019,18023,18697,18724,18806,21130,21135],"fullWord":6073},{"subwords":[5691,5775,6076,10383,10414,10443,10460,10536,10691,10694,10897,12812,12845,18576,18844,18863,18866,18981,19002,19017],"fullWord":6076},{"subwords":[4680,4826,4849,5471,5478,5479,5480,5548,6077,6078,16319,16320,16457,17816,17999,18066,18067,18068,18074,18575,18576,18577,18588,19876,19877,19878],"fullWord":6078},{"subwords":[3248,4120,4268,4312,4326,5654,5984,6080,8483,8552,8562,8945,15021,15777],"fullWord":6080},{"subwords":[3120,3584,3585,4263,4268,4269,4639,4714,4728,4739,4909,4935,5455,5471,5472,5756,6081,9079,9082,9117,9449,10378,10414,10470,10518,10530,10536,10537,10552,10967],"fullWord":6081},{"subwords":[6082,7467,7493,7496,7759,8151,12339],"fullWord":6082},{"subwords":[5718,6084,7477,7525,7722,7727,7895,8180,10398,10443,10470,10495,10793,10796,10813,10981,10982,11065,12792,12845,19590,21193,21222],"fullWord":6084},{"subwords":[817,867,1070,5588,5627,5740,5976,5984,6085,14798,15103,15777,19595,19847],"fullWord":6085},{"subwords":[5984,6086,12916,12979,13051,13489,13506,13577,13583,13602,14147,14220,14262,14350,14518,14519,15248,15610,15663,15706,15777,15836],"fullWord":6086},{"subwords":[148,204,1106,4438,4569,4590,4667,4851,5629,5630,5659,6087,6088,6092,19910,19990,19992],"fullWord":6088},{"subwords":[204,817,1106,1109,4516,4569,4607,4678,4810,4851,5329,5588,5589,5629,5630,5976,5984,6087,6089,6092,6100,14736,14921,14922,14961,14990,14991,15060,15093,15337,19910,19990,19992,19996,20057],"fullWord":6089},{"subwords":[200,204,1106,1114,4569,4680,4826,4851,4852,5605,5606,5629,5630,5631,6087,6090,6092,6104,15893,16076,16077,16270,16319,16320,19910,19967,19990,19992,20000],"fullWord":6090},{"subwords":[4774,5665,5865,6092,6093,6094,12339,12340,19992,20027,20029],"fullWord":6094},{"subwords":[5984,5998,6092,6093,6095,6100,12339,12363,12386,15111,15337,19992,19996,20032],"fullWord":6095},{"subwords":[5691,5694,5946,6092,6093,6096,6189,10383,10471,10489,10495,11065,12339,19992,21120],"fullWord":6096},{"subwords":[5918,6092,6093,6097,6098,6099,6104,12339,12368,12374,12376,16319,16335,16399,16457,16470,17848,17849,18576,18583,18585,18588,18607,18624,18625,19992,20000,20046,20049,20088,20095,20101],"fullWord":6099},{"subwords":[5984,6018,6046,6092,6100,6101,6102,6104,15290,15306,15312,15337,15354,15748,16319,16340,16425,16449,16457,16472,17823,17840,17848,18576,18588,18658,19240,19242,19992,19996,19998,20000,20070,20073,20080,20088,20095,20101],"fullWord":6102},{"subwords":[3429,3430,3434,3441,3442,4238,4241,6023,6057,6105,6106,9079,9085,9447,16178,16298,16304,16457,16769,16907,16911,18823,18830,18844,18850,18947,20088,20095,20101,20119,20121,20129,20134,20197],"fullWord":6106},{"subwords":[5691,5735,5796,5984,5995,6092,6100,6107,6108,9384,10383,10388,10414,10471,10479,10481,10483,10536,10549,10677,10711,10716,10722,15107,15198,15337,15340,15348,15444,15473,15549,19992,19996,20004,20006,20129,20132,20144,20146],"fullWord":6108},{"subwords":[5780,6107,6109,9152,9157,9453,10414,10471,10481,10489,10495,10536,10583,10711,10713,11065,20004,20129,20144,20145,21110],"fullWord":6109},{"subwords":[3413,5856,6092,6093,6111,9079,9207,12339,12387,12410,12424,19992,20008,20037,20119,20129,20152,20157],"fullWord":6111},{"subwords":[5114,5267,5740,5741,6092,6112,6113,12752,19992],"fullWord":6113},{"subwords":[5740,5984,6092,6100,6112,6114,12979,13095,15103,15337,15352,15610,15728,19992,19996],"fullWord":6114},{"subwords":[5740,5742,6092,6104,6112,6115,16319,16326,19992,20000],"fullWord":6115},{"subwords":[5691,6092,6116,10383,10443,10471,10488,10935,12845,19992,20250,20251],"fullWord":6116},{"subwords":[5953,6092,6093,6117,12339,12876,13093,19992,20262,21251,21255,21297],"fullWord":6117},{"subwords":[93,126,1009,1167,3052,5620,6055,6057,6123,6124,6171,18528,18541,18677],"fullWord":6124},{"subwords":[93,96,126,134,1009,1167,1173,3021,3041,3042,3052,3057,3064,4238,4241,5616,5620,5626,6023,6055,6057,6123,6125,6171,15880,16041,16043,16098,16157,16270,16293,16298,16304,16457,16483,18528,18532,18541,18559,18677,18681],"fullWord":6125},{"subwords":[399,407,488,1009,1167,1169,1170,1173,1182,1183,5616,5620,5626,6055,6126,6127,6171,10241,10247,10256,10301,10302,10324,10360,10366,10459,10460,10465,10494,15942,15948,15960,16041,16043,16098,16270,16274,16293,16457,16459,16483,17022,17023,17750,17811,18341,18370,18374,18528,18532,18541,18547,18548,18559,18660,18677,18681],"fullWord":6127},{"subwords":[93,98,121,796,801,817,1167,2941,2954,3206,3209,5582,5588,5976,6130,8333,8453,8552,8595,14717,14775,14958,15021,15373,15376],"fullWord":6130},{"subwords":[3119,5691,5693,5790,6023,6131,6132,6138,6139,6144,10383,10392,10451,10494,16298,16319,16483],"fullWord":6132},{"subwords":[6057,6133,6138,6160,6171,13438,13489,13613,18576,18677],"fullWord":6133},{"subwords":[3119,3165,6023,6031,6039,6042,6134,6138,6139,6144,16298,16303,16319,16342,16483,16485],"fullWord":6134},{"subwords":[3119,6023,6135,6138,6139,6144,9079,9085,16178,16298,16319,16483,16769,16922],"fullWord":6135},{"subwords":[3429,3430,6057,6136,6138,6154,6171,9079,18576,18677,18823,18844],"fullWord":6136},{"subwords":[3119,4268,4271,5656,6023,6137,6138,6139,6144,16298,16319,16483,18066,19876,19878],"fullWord":6137},{"subwords":[817,1167,1168,4516,4607,4678,4810,5588,5589,5976,5984,6140,14736,14961,15060,15093,15373],"fullWord":6140},{"subwords":[6141,6171,11483,11574,11578,13489,13613,18576,18579,18595,18596,18677],"fullWord":6141},{"subwords":[5984,6018,6046,6142,6143,6144,6170,6171,15290,15306,15312,15373,15374,15748,16319,16340,16425,16457,16483,17823,17840,18576,18588,18658,18677,19240,19242],"fullWord":6143},{"subwords":[399,401,1167,1169,1182,5691,6145,8258,8445,8483,8488,8595,10301,10324,10383,10494],"fullWord":6145},{"subwords":[6146,6171,8552,8575,8595,8725,8728,8857,8892,12979,13008,13009,13036,13141,15312,15373,15386,15610,15691,15694,15748,18677,18697,18743,18749,18777,18781,18981,19093,19101],"fullWord":6146},{"subwords":[5846,6147,8483,8532,8534,8595,8945,8970,12199],"fullWord":6147},{"subwords":[4714,4728,4731,4739,4935,5691,5756,5771,6148,6149,9108,9117,10378,10383,10414,10494,10530,10536,10537],"fullWord":6149},{"subwords":[5691,5693,5790,6144,6148,6150,9416,10383,10392,10414,10415,10451,10494,10536,10551,16319,16483,16827,16922],"fullWord":6150},{"subwords":[3120,6151,9079,10414,10494,10518,10536,21024],"fullWord":6151},{"subwords":[6039,6152,6153,6154,6156,6171,9447,16457,16464,16483,16490,16497,16903,16907,16911,16913,16915,16922,16923,16925,16926,17857,18677,18844,18850,18947],"fullWord":6153},{"subwords":[4714,4935,4942,5680,6154,6155,6171,9108,18576,18577,18677,18835,18844,18845],"fullWord":6155},{"subwords":[4826,4849,4850,5114,5117,5221,5223,5263,5471,5478,5523,5524,6157,12752,12755,13131,16483,17323,17471,18066,18067,19876,19877],"fullWord":6157},{"subwords":[3429,3430,3965,3968,6057,6154,6158,6171,9079,13038,18677,18823,18844,18981,19182],"fullWord":6158},{"subwords":[605,732,733,740,1167,1168,4492,4500,4605,4774,5865,5956,6159,12229,12257,12259,12317,13171,13239,13245,13246,13422,13439,13453,13478,13539,13544],"fullWord":6159},{"subwords":[6057,6133,6138,6160,6171,13438,13489,13613,18576,18677],"fullWord":6160},{"subwords":[5691,5693,5790,6033,6144,6161,6162,10383,10392,10451,10494,13489,13495,13498,13510,16319,16336,16483,17049],"fullWord":6162},{"subwords":[4673,4774,5665,5865,6163,12339,12340,13478,13489,13490,13499,13539,13544],"fullWord":6163},{"subwords":[5984,6142,6164,6171,13489,13506,13577,13583,13599,13613,13617,14262,15248,15312,15373,15748,18576,18677,19240],"fullWord":6164},{"subwords":[5735,5984,5995,6165,9384,13489,13506,13577,13583,13705,13712,13874,14262,14345,15248,15373,15508,15509],"fullWord":6165},{"subwords":[6166,6167,6171,12916,12937,12979,13008,13141,13577,13599,13613,13624,14027,14147,14160,14188,14234,14262,14350,15248,15312,15373,15610,15663,15691,15694,15748,18677,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":6167},{"subwords":[6033,6144,6166,6168,6169,12916,12925,12936,13131,13489,13510,13607,14166,14234,14235,16319,16336,16483,17406,17471],"fullWord":6169},{"subwords":[5984,6018,6046,6142,6143,6144,6170,6171,15290,15306,15312,15373,15374,15748,16319,16340,16425,16457,16483,17823,17840,18576,18588,18658,18677,19240,19242],"fullWord":6170},{"subwords":[693,694,1009,1044,1167,5620,6055,6074,6171,6172,12229,12325,12374,12402,18408,18495,18498,18528,18541,18565,18607,18630,18677,18679,18682,18969],"fullWord":6172},{"subwords":[4774,4788,5665,5865,6171,6173,12339,12340,12374,12402,18576,18577,18583,18607,18610,18677],"fullWord":6173},{"subwords":[6171,6174,12339,12374,12402,18576,18583,18607,18615,18630,18677,18682,18969],"fullWord":6174},{"subwords":[5928,5935,5984,5998,6142,6171,6175,12339,12374,12402,15241,15312,15373,15748,18576,18583,18607,18649,18650,18677,19240],"fullWord":6175},{"subwords":[5780,6171,6176,6177,10443,10460,10494,10897,10953,12845,18591,18677,18981,19017,19019],"fullWord":6177},{"subwords":[6171,6176,6178,10443,10447,10459,10460,10465,10494,10888,10896,10897,10901,10953,10954,12845,12848,13131,16457,16483,16494,17097,17113,17354,17359,17435,17471,17903,18677,18981,18985,19017],"fullWord":6178},{"subwords":[6171,6179,12979,13008,13041,13141,15312,15373,15610,15691,15694,15748,18677,18682,18981,19093,19101,19117,19118,19131,19134,19138,19331],"fullWord":6179},{"subwords":[817,825,905,906,911,918,993,1009,1167,1173,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,6171,6180,6181,14881,14898,14901,14905,14912,15306,15312,15373,15748,16041,16043,16098,16270,16286,16293,16419,16457,16483,17773,17775,18449,18453,18455,18472,18528,18530,18531,18532,18541,18554,18557,18559,18677,18681,19381],"fullWord":6181},{"subwords":[4667,4850,5466,5467,5471,6182,6183],"fullWord":6183},{"subwords":[4680,4826,4831,4849,4850,4875,5471,5478,6144,6182,6184,16319,16320,16483,16484,18066,18067,18068,19876,19877,19878],"fullWord":6184},{"subwords":[6171,6185,6186,10459,10460,10465,10470,10494,11044,11050,11053,11058,11059,11060,16457,16483,17128,17147,18066,18074,18677,19422,19500,19502,19605,19876],"fullWord":6186},{"subwords":[2610,2656,2662,2668,6187,6188,14995,15014,15018,15373,15749,15755,15757,15764,15777,15782,15840,16423,16483,18035,18066,18071,18150,19840,19844,19876,19880],"fullWord":6188},{"subwords":[4049,4268,4302,6189,6190,13489,14433,21127,21224],"fullWord":6190},{"subwords":[5691,5694,5765,6189,6192,6409,6416,6509,6743,6821,6824,6854,7153,10383,10470,10495,11065,21222],"fullWord":6192},{"subwords":[6189,6193,6199,7467,7493,7496,7503,7604,12339,21120,21144],"fullWord":6193},{"subwords":[5691,5694,6189,6194,10383,10460,10495,11065,18576,21135],"fullWord":6194},{"subwords":[4714,4728,4731,4739,4935,5567,5691,5694,5756,5771,6189,6191,6195,9108,9117,9124,9128,10378,10383,10414,10495,10530,10536,10537,11065,21140,21142],"fullWord":6195},{"subwords":[5698,5735,5984,5995,6189,6196,6197,6198,6200,6201,9384,9389,9409,15526,15866,15867,16319,16340,16425,16889,16890,16892,17722,21130,21212],"fullWord":6201},{"subwords":[232,596,1210,1332,1837,6203,6250,6293,6390,6520,6593,12219,12236,12406],"fullWord":6203},{"subwords":[30,43,232,385,399,1243,1246,1296,1301,1302,1515,1560,1636,1900,1938,4427,4466,4587,4595,4601,4618,4728,5756,5765,6204,6205,6230,6231,6406,6677,6734,6740,10061,10090,10093,10324,10327,10333,10378],"fullWord":6205},{"subwords":[43,44,232,385,399,817,828,1301,1304,1366,1377,1383,1535,1636,1915,1933,2308,2317,5588,5592,5765,5976,6204,6206,6308,6317,6392,6464,6677,6710,6734,10061,10324,10333,10355,14968,14995,15114],"fullWord":6206},{"subwords":[43,45,67,232,385,392,399,402,407,1301,1306,1422,1425,1636,1918,5765,6204,6207,6281,6677,6679,6734,6735,10061,10071,10323,10324,10333,10335,10360,15872,15904,15942,15948,16270,16274,16365,16999],"fullWord":6207},{"subwords":[27,232,349,796,828,1366,1383,1391,2308,2738,2941,3402,4052,4151,6208,6254,6308,6390,6520,6530,6621,9376,14714,15402],"fullWord":6208},{"subwords":[93,94,2766,2785,4431,4595,4639,6209,6210,6211,6230,6231,6406],"fullWord":6209},{"subwords":[93,96,121,123,796,810,817,825,828,905,906,2785,2786,2941,2954,2960,3001,3021,5588,5599,5976,5977,6023,6210,6212,6213,6214,6308,6311,6314,6317,6321,6392,6395,14717,14722,14881,15021,15048,15114,15134,15880,15904,15906,16142,16145,16150,16270,16286,16298,16419,16431],"fullWord":6213},{"subwords":[93,96,126,134,254,1009,2785,2786,3021,3041,3042,3052,3057,3064,4238,4241,5616,5620,5626,5705,5706,6023,6055,6057,6210,6214,6215,6216,6225,6228,6339,6344,6347,6349,6354,6397,6399,6402,6485,6487,15880,15904,16041,16043,16157,16270,16293,16298,16304,16457,18541,18559],"fullWord":6216},{"subwords":[93,732,1060,2785,2921,2922,4049,4268,4302,5627,5956,6210,6217,13154,13155,13439,14433],"fullWord":6217},{"subwords":[337,372,409,2813,2815,2818,3402,6218,6219,6246,6530,10072],"fullWord":6219},{"subwords":[945,3017,3402,6218,6220,6336,6530,9135,9410,15880,16178,16769],"fullWord":6220},{"subwords":[93,96,2785,2786,3021,3402,6023,6210,6214,6221,6222,6530,6543,9079,9085,9135,15880,15904,16178,16270,16298,16769],"fullWord":6222},{"subwords":[93,337,399,422,2785,2813,2815,2818,3120,3402,3498,5765,6210,6221,6223,6246,6403,6530,6543,6568,6734,9079,10072,10073,10324,10333,10414,10518,10536,10539,10554],"fullWord":6223},{"subwords":[110,287,2869,3402,6224,6240,6250,6293,6296,6530,6560,6593,7283,7604,9207,9208,12230,12236],"fullWord":6224},{"subwords":[126,132,252,254,796,809,828,911,2941,3003,3052,3605,3965,4059,4179,6225,6226,6227,6308,6328,6332,6344,6940,6941,6982,7042,7103,12672,12680,12686,12785,12965,12966,13008,14754,14898,15592,15691,18333,18432,18449,18463,19093,19094,19098],"fullWord":6227},{"subwords":[111,409,1060,2813,2815,3071,6229,6821,10072],"fullWord":6229},{"subwords":[200,817,825,828,905,906,4516,4520,4595,4607,4611,4810,4826,5588,5599,5976,5977,6230,6231,6232,6233,6234,6236,6308,6316,6317,6318,6321,6392,6395,6406,6408,7056,14736,14751,14881,14882,14961,14965,15060,15087,15114,15134,15893,15904,15906,16270,16286,16419,16431],"fullWord":6233},{"subwords":[287,326,605,4492,4502,4890,4947,4985,4993,6230,6235,6240,6250,6293,6296,6560,6593,6598,7253,7283,7604,12230,12236],"fullWord":6235},{"subwords":[93,96,2785,2786,3021,3104,3119,5605,6023,6210,6214,6237,6396,6404,6409,6419,15880,15904,16270,16298,16319],"fullWord":6237},{"subwords":[220,242,349,817,828,5588,5735,5976,5984,5995,6238,6254,6255,6308,6317,6392,6409,6543,6621,6622,7057,9376,9384,15098,15114,15446],"fullWord":6238},{"subwords":[269,270,4595,5707,5709,6230,6231,6240,6241,6406,7253,7267,7269,7270],"fullWord":6241},{"subwords":[254,299,300,6240,6242,6243,6344,6885,7267,7416,7768,7874,12672,12686,12785,18342,18432,18993,18994],"fullWord":6242},{"subwords":[254,299,6240,6243,6244,6245,6339,6344,6354,6355,6885,6893,7396,7416,7423,7768,7770,7874,12672,12674,12686,12692,12785,15910,15921,16041,17334,17340,17435,17732,17885,18342,18345,18432,18435,18993,18994,18997,19001],"fullWord":6244},{"subwords":[241,326,327,337,338,399,4466,4595,4601,4714,4728,4739,4891,4935,5756,5765,6230,6231,6246,6247,6406,6537,6538,6543,6546,6568,6569,6734,6740,6764,9103,9104,9117,10090,10093,10119,10324,10327,10333,10378,10414,10530,10536,10537,10539,10554],"fullWord":6247},{"subwords":[337,399,442,5765,5780,6246,6248,6276,6430,6431,6543,6568,6577,6578,6686,6734,9144,9152,10324,10333,10343,10414,10536,10539,10554],"fullWord":6248},{"subwords":[242,349,817,828,5588,5595,5976,5996,6250,6251,6254,6255,6293,6308,6317,6392,6453,6467,6543,6593,6601,6604,6621,6622,9250,9261,9376,9378,9384,12229,12236,12319,14784,14821,14838,15114,15175,15446],"fullWord":6251},{"subwords":[254,647,691,693,700,704,711,6250,6252,6253,6261,6264,6293,6302,6339,6344,6354,6518,6519,6593,6619,6647,6651,6654,9135,9307,9318,9325,9447,12236,12237,12463,12471,15936,15986,16041,16047,16801,16858,16907,17255,17742,18347,18408,18428,18894,18919,18947],"fullWord":6253},{"subwords":[242,326,327,329,349,351,817,828,854,4516,4595,4599,4607,4714,4810,4935,5023,5588,5976,6230,6231,6232,6254,6255,6256,6308,6317,6318,6392,6406,6537,6543,6621,6622,6623,7056,7081,9103,9376,9384,9385,14736,14776,14961,15060,15114,15428,15433,15446],"fullWord":6256},{"subwords":[242,349,352,817,828,5588,5976,6008,6254,6255,6257,6308,6317,6319,6392,6543,6621,6622,6624,7076,7083,9376,9384,14872,14983,15114,15446,15448],"fullWord":6257},{"subwords":[337,349,361,828,6246,6254,6258,6260,6308,6386,6566,6621,6688,6730,6854,7028,7050,7140,9376,10121,10304,10502,10675,14780,14939,15399,15558,15864],"fullWord":6258},{"subwords":[254,325,932,6261,6262,6263,6264,6339,6344,6354,6518,6519,6642,6647,6651,6654,8229,8232,8362,8371,8378,8391,8678,8685,8688,8691,8935,9135,9447,15938,16041,16511,16559,16621,16653,16801,16907,18347,18684,18742,18947],"fullWord":6263},{"subwords":[817,828,867,5588,5740,5976,5984,6265,6267,6268,6308,6317,6392,6409,7053,7057,9852,14798,15098,15103,15114],"fullWord":6267},{"subwords":[817,825,828,867,868,905,906,950,953,5588,5599,5976,5977,6265,6268,6269,6271,6308,6317,6321,6392,6395,7053,7054,9852,9854,14798,14802,14881,15114,15134,15904,15906,15939,16270,16286,16419,16431],"fullWord":6269},{"subwords":[227,817,828,867,1196,5588,5976,6239,6265,6268,6270,6308,6317,6386,6392,6509,7050,7053,7055,7140,9852,9865,14798,14939,15114,15864,15866,21047,21071,21097,21099],"fullWord":6270},{"subwords":[287,369,6240,6250,6272,6293,6296,6560,6593,6613,7283,7604,9276,9913,9922,12230,12236],"fullWord":6272},{"subwords":[349,359,828,867,868,905,950,6254,6259,6273,6274,6308,6621,6636,7096,9135,9376,9396,9399,9409,9752,9753,10041,15534,16028,16889,16954,17722],"fullWord":6274},{"subwords":[2813,2815,2869,3459,3597,3701,3702,3777,3791,6275,6293,6682,6702,6861,6871,10072,10734,10741,10760,12672],"fullWord":6275},{"subwords":[399,442,448,5745,5765,5780,6276,6277,6293,6430,6431,6453,6702,6734,10174,10324,10333,10343,10344,12229],"fullWord":6277},{"subwords":[399,442,449,817,828,5588,5592,5765,5780,5976,6276,6278,6308,6317,6392,6430,6431,6464,6710,6734,10324,10333,10343,10355,14968,15114],"fullWord":6278},{"subwords":[442,457,1155,1164,6276,6279,6723,6817,6861,7014,10292,10734,10942,12672,12856,13114,20378,20885],"fullWord":6279},{"subwords":[399,402,407,817,825,828,905,906,5588,5592,5593,5599,5765,5976,5977,6281,6282,6308,6317,6321,6392,6395,6464,6710,6712,6734,6735,10207,10228,10324,10333,10335,10355,10360,14805,14881,14968,14973,15114,15134,15904,15906,15942,15948,16270,16274,16286,16365,16419,16420,16431],"fullWord":6282},{"subwords":[337,340,362,399,402,407,5765,6246,6249,6281,6283,6543,6568,6572,6734,6735,6767,9135,9416,10324,10333,10335,10360,10414,10415,10536,10539,10551,10554,15904,15931,15942,15948,16270,16274,16365],"fullWord":6283},{"subwords":[254,255,399,405,488,491,817,828,911,1009,5588,5592,5620,5705,5765,5976,5982,6055,6284,6308,6317,6332,6344,6347,6392,6399,6443,6464,6485,6486,6710,6717,6734,7042,7073,10247,10254,10324,10333,10355,10394,10460,14754,14898,14901,14968,15114,15135,15312,15748,18370,18372,18449,18453,18541,18547,18554,19243],"fullWord":6284},{"subwords":[337,341,594,6246,6288,6386,6585,6588,6701,6730,6854,10136,10304,10584,10585,10618,11148,11173,11182,11408,11659,21051],"fullWord":6288},{"subwords":[341,528,5827,6250,6285,6289,6293,6446,6453,6543,6593,6601,11156,11157,11213,11218,11437,11446,11489,11512,11645,11697,11706,12229,12236,12244,12245,12443],"fullWord":6289},{"subwords":[287,341,6240,6250,6290,6293,6296,6560,6593,7283,7317,7334,7604,11127,11132,11156,11213,11606,11649,11697,11711,12230,12236,12244,12443],"fullWord":6290},{"subwords":[325,341,347,555,556,932,6291,6642,8290,8296,8362,8648,8678,9135,9422,11330,11335,15973,16531,16627,16764],"fullWord":6291},{"subwords":[586,1060,6292,6864,6867,11265,11330,11813,12672,12674,12872,15973,17334,17378,18103,18112,19580,19581,19871],"fullWord":6292},{"subwords":[183,605,4472,4479,4492,5163,5172,5173,6230,6293,6294,6864,6917,11107,11213,11265,11605,11810,11831,11891,11893,12244,12493,12522,12523,12672],"fullWord":6294},{"subwords":[269,270,605,4492,4500,4502,4595,4605,4774,5707,5865,6230,6231,6240,6293,6296,6297,6406,6453,6458,7253,7348,7493,12229,12230],"fullWord":6297},{"subwords":[254,693,694,1009,5620,5705,6055,6074,6293,6299,6344,6347,6399,6453,6485,9494,9495,9532,9557,12229,12325,12374,18408,18541,18607],"fullWord":6299},{"subwords":[605,657,663,4492,4500,4595,4605,4774,5865,6230,6231,6293,6300,6406,6453,6458,12229,12252],"fullWord":6300},{"subwords":[657,663,817,828,5588,5595,5976,6293,6301,6308,6317,6392,6453,6467,12229,12252,12319,14821,15114],"fullWord":6301},{"subwords":[183,254,605,693,4447,4492,5172,5173,5234,6230,6293,6303,6344,6917,6925,12293,12493,12574,12575,12672,12686,12785,18339,18408,18432,18970,19036],"fullWord":6303},{"subwords":[254,693,1020,6293,6304,6344,6864,6925,11213,11265,11361,11810,11814,11891,12010,12244,12293,12522,12574,12575,12672,12686,12785,18389,18408,18432,19026,19036],"fullWord":6304},{"subwords":[349,359,828,905,6254,6259,6305,6306,6308,6621,6636,9135,9375,9376,9379,9409,16028,16889,17722],"fullWord":6306},{"subwords":[349,828,1060,6254,6305,6307,6308,6621,7045,7194,9376,9379,14589,14599,14659,14660],"fullWord":6307},{"subwords":[200,230,231,828,905,6230,6236,6308,6309,6310,6316,14736,14751,15893],"fullWord":6310},{"subwords":[93,94,121,122,796,800,817,828,2766,2780,2785,2941,2949,2954,2955,3111,4431,4516,4595,4607,4639,4810,5588,5976,6210,6211,6212,6230,6231,6232,6308,6311,6312,6317,6318,6392,6406,7056,14717,14718,14736,14961,15021,15028,15060,15114],"fullWord":6312},{"subwords":[93,121,796,817,828,2785,2941,2954,2958,5588,5976,6008,6210,6212,6308,6311,6313,6317,6319,6392,14717,14720,14872,14983,15021,15114],"fullWord":6313},{"subwords":[93,96,121,123,796,810,817,825,828,905,906,2785,2786,2941,2954,2960,3001,3021,5588,5599,5976,5977,6023,6210,6212,6213,6214,6308,6311,6314,6317,6321,6392,6395,14717,14722,14881,15021,15048,15114,15134,15880,15904,15906,16142,16145,16150,16270,16286,16298,16419,16431],"fullWord":6314},{"subwords":[817,825,828,905,906,5588,5599,5976,5977,6008,6016,6308,6317,6319,6320,6321,6392,6395,14872,14881,14883,14983,14988,15114,15134,15904,15906,16270,16286,16419,16431],"fullWord":6320},{"subwords":[230,349,596,828,852,6250,6254,6293,6308,6322,6593,6621,9261,9376,9378,12236,14784,14821,14838],"fullWord":6322},{"subwords":[287,349,828,6240,6250,6254,6293,6296,6308,6323,6560,6593,6621,7026,7087,7283,7375,7604,7918,8015,9261,9376,9378,12230,12236,14758,14784,14821,14832,14838,15461,15494],"fullWord":6323},{"subwords":[817,828,869,871,4472,4475,4516,4595,4607,4810,4818,4819,5318,5342,5588,5658,5827,5976,6230,6231,6232,6285,6286,6308,6317,6318,6324,6325,6392,6406,6446,7030,7031,7056,11107,11115,11120,11276,11286,11437,11438,11539,11605,14736,14808,14961,14975,15060,15114,15202],"fullWord":6325},{"subwords":[817,828,869,872,5588,5827,5976,6008,6285,6308,6317,6319,6324,6326,6392,6446,7030,7032,11276,11286,11437,11539,14808,14872,14975,14983,14986,15114,15202],"fullWord":6326},{"subwords":[252,828,6308,6328,6329,6940,6941,7103,12672,12680,12771],"fullWord":6329},{"subwords":[252,828,902,6308,6328,6331,6940,6941,7103,7123,12672,12680,14933,15570,15734,20410],"fullWord":6331},{"subwords":[254,255,817,828,911,1009,4447,4448,4516,4537,4551,4553,4595,4607,4683,4701,4810,4812,5307,5327,5588,5620,5705,5976,5982,6055,6230,6231,6232,6308,6317,6318,6332,6333,6344,6347,6348,6392,6399,6406,6485,7042,7056,7073,14736,14754,14755,14898,14901,14902,14961,15060,15114,15135,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19205,19233,19243],"fullWord":6333},{"subwords":[93,96,973,2785,2786,3021,3024,3165,6023,6039,6210,6214,6335,6479,15880,15892,15904,15907,16270,16291,16298,16303],"fullWord":6335},{"subwords":[945,3017,3402,6218,6220,6336,6530,9135,9410,15880,16178,16769],"fullWord":6336},{"subwords":[200,325,932,934,4543,4595,4614,4826,6230,6231,6234,6236,6337,6406,6408,8217,8219,8362,8440,8443,15893,15904,16270,16503,16504,16574,16575,16581],"fullWord":6337},{"subwords":[325,932,936,973,6039,6338,6479,8362,15904,15907,16033,16270,16291,16574,16575,16576,16609],"fullWord":6338},{"subwords":[200,254,1009,4447,4551,4555,4595,4683,4684,4701,4826,5616,5620,5626,5705,5706,6055,6230,6231,6234,6236,6339,6340,6344,6347,6348,6349,6354,6397,6399,6402,6406,6408,6485,6487,15893,15904,16041,16043,16044,16270,16293,16457,17806,18339,18340,18541,18559,18575],"fullWord":6340},{"subwords":[254,693,694,697,711,1009,5616,5620,5626,5705,5706,5918,6055,6074,6075,6293,6295,6302,6339,6341,6344,6347,6349,6354,6397,6399,6402,6453,6463,6485,6487,12229,12289,12325,12330,12368,12374,12376,15904,15986,15995,16041,16043,16270,16293,16399,16457,18408,18428,18541,18559,18607,18624],"fullWord":6341},{"subwords":[254,255,256,817,825,828,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5705,5706,5976,5977,5982,6018,6055,6308,6317,6321,6332,6334,6339,6342,6344,6347,6349,6354,6392,6395,6397,6399,6402,6485,6487,7042,7044,7073,7074,14754,14757,14881,14898,14901,14905,14912,15114,15134,15135,15306,15312,15748,15904,15906,16041,16043,16270,16286,16293,16419,16431,16457,17773,17775,17944,18449,18453,18455,18472,18541,18554,18557,18559,19243,19381],"fullWord":6342},{"subwords":[254,383,399,409,488,1009,5620,5705,5765,6055,6344,6345,6346,6347,6399,6443,6485,6486,6717,6734,10247,10324,10333,10394,10460,18370,18541,18547],"fullWord":6346},{"subwords":[254,255,817,828,911,1009,5588,5600,5620,5705,5976,5982,6055,6308,6317,6332,6344,6347,6350,6392,6399,6485,7042,7073,8229,8231,8333,8360,8378,8381,8383,8453,8458,8461,8492,8552,14754,14775,14898,14901,15114,15135,15312,15376,15748,18449,18453,18541,18554,18697,19243],"fullWord":6350},{"subwords":[254,1020,6344,6351,6864,8229,8290,8378,8892,11265,11361,11369,11814,12010,12018,12672,12686,12690,12785,12806,18389,18432,18743,18967,19026],"fullWord":6351},{"subwords":[254,287,693,700,6240,6250,6252,6261,6293,6296,6344,6352,6518,6560,6593,6651,7283,7289,7416,7561,7575,7604,7637,7745,9325,12230,12236,12463,18342,18347,18408,18410,18894,18901],"fullWord":6352},{"subwords":[254,973,990,6339,6343,6344,6354,6355,6356,6992,12672,12674,12685,12686,12692,12785,16041,17334,17337,17340,17345,17434,17435,17436,17885,17886,18432,18435,18487,19125],"fullWord":6356},{"subwords":[254,1009,4447,4551,4595,4683,4701,5620,5705,6055,6230,6231,6344,6347,6348,6357,6399,6406,6485,18339,18495,18498,18541,18565],"fullWord":6357},{"subwords":[254,693,694,1009,1044,5620,5705,6055,6074,6293,6344,6347,6358,6399,6453,6485,12229,12325,12374,18408,18495,18498,18541,18565,18607,18630,18969],"fullWord":6358},{"subwords":[254,255,817,828,911,1009,5588,5620,5705,5976,5982,6055,6308,6317,6332,6344,6347,6359,6392,6399,6485,7042,7073,14754,14898,14901,15114,15135,15312,15748,18449,18453,18476,18495,18498,18499,18541,18554,18565,18672,19235,19243],"fullWord":6359},{"subwords":[254,1060,6339,6344,6354,6360,6372,6373,16041,18508,19412,19413,19871],"fullWord":6360},{"subwords":[93,96,1060,2785,2786,3021,3076,4268,4271,5627,5656,6023,6210,6214,6361,7210,15880,15904,16058,16270,16298,18066,19871,19876],"fullWord":6361},{"subwords":[93,126,138,254,1009,1060,2785,3052,4268,4375,4376,5620,5627,5705,6055,6057,6210,6215,6225,6344,6347,6362,6373,6399,6485,18508,18541,19412],"fullWord":6362},{"subwords":[254,488,1060,6339,6344,6354,6363,6364,6372,6373,6717,6719,6720,6821,6845,10241,11044,15942,15960,16041,16066,17022,17147,18091,18388,18508,19412,19413,19427,19605,19871],"fullWord":6364},{"subwords":[254,488,1060,6344,6353,6363,6365,6373,6386,6717,6730,6821,6850,6854,10304,18508,19412,19605],"fullWord":6365},{"subwords":[596,1060,5627,6293,6366,6367,6368,6453,7179,12229],"fullWord":6368},{"subwords":[375,409,596,598,1060,6293,6366,6367,6369,6702,6821,7179,11001,19600],"fullWord":6369},{"subwords":[596,712,1060,6293,6302,6366,6367,6370,6371,7179,12283,15986,16068,17209,18117,19871],"fullWord":6370},{"subwords":[1060,1106,1114,5627,6374,6375,7210,15904,16076,16270,18033,18066,19871,19876,19903,19967],"fullWord":6375},{"subwords":[252,253,828,905,6308,6328,6330,6377,6378,6940,6941,7103,12672,12674,12680,12683,13007,13087,15673,16083,17303,17334,17335],"fullWord":6378},{"subwords":[252,828,1060,6308,6328,6377,6379,6940,6941,7008,7045,7103,7194,12672,12680,13051,13087,19580],"fullWord":6379},{"subwords":[605,617,1145,1147,1158,1159,4492,4500,4574,4576,4595,4605,4774,4865,5865,6230,6231,6293,6380,6381,6406,6453,6458,6507,7240,12229,12390,20303,20309,20393,20394,20396,20397,20505,20524,20579,20581],"fullWord":6381},{"subwords":[617,817,828,1145,1158,5588,5595,5976,6293,6308,6317,6380,6382,6392,6453,6467,6507,12229,12319,12390,14821,14933,15114,20319,20393,20396,20410,20417,20432,20505,20510,20579,20984],"fullWord":6382},{"subwords":[287,1177,6240,6250,6293,6296,6383,6385,6560,6593,6661,7283,7604,12230,12236,12474],"fullWord":6385},{"subwords":[287,716,6240,6250,6293,6296,6386,6387,6560,6593,7283,7447,7604,12230,12236,12311,21058,21144],"fullWord":6387},{"subwords":[287,6240,6250,6293,6296,6389,6560,6593,7283,7604,12230,12236,12313,21230,21269,21276],"fullWord":6389},{"subwords":[254,399,488,1009,1196,5620,5705,5765,6055,6344,6347,6353,6386,6391,6399,6401,6443,6485,6486,6509,6717,6730,6734,6854,10247,10304,10324,10333,10336,10394,10397,10460,10495,11065,18370,18541,18547,21050,21097,21135],"fullWord":6391},{"subwords":[817,828,4516,4595,4597,4607,4678,4688,4810,5588,5589,5976,5984,6230,6231,6232,6308,6317,6318,6392,6393,6406,6409,6412,7056,7057,7058,14736,14961,15060,15093,15098,15114,15115],"fullWord":6393},{"subwords":[817,828,5588,5976,5984,6008,6308,6317,6319,6392,6394,6409,7057,7060,7068,14872,14983,15098,15114,15116],"fullWord":6394},{"subwords":[254,973,982,990,1009,5616,5618,5620,5626,5705,5706,6039,6055,6339,6343,6344,6347,6349,6354,6397,6398,6399,6402,6479,6485,6487,15904,15907,15908,16041,16043,16046,16270,16291,16293,16296,16457,16464,18487,18541,18559],"fullWord":6398},{"subwords":[247,254,255,817,826,828,911,1009,5588,5620,5622,5705,5976,5982,5984,6055,6308,6317,6332,6344,6347,6392,6399,6400,6409,6420,6485,6489,7042,7057,7073,14754,14898,14901,15098,15114,15135,15312,15748,18449,18453,18541,18554,18576,19240,19243],"fullWord":6400},{"subwords":[254,399,488,1009,1196,5620,5705,5765,6055,6344,6347,6353,6386,6391,6399,6401,6443,6485,6486,6509,6717,6730,6734,6854,10247,10304,10324,10333,10336,10394,10397,10460,10495,11065,18370,18541,18547,21050,21097,21135],"fullWord":6401},{"subwords":[4263,4268,4269,4639,4774,5455,5471,5507,5508,5511,5856,5865,6405,6406,6453,6458,6501,7179,7180,12624,19676],"fullWord":6405},{"subwords":[183,191,245,252,817,828,4516,4595,4607,4810,5114,5115,5588,5950,5976,6230,6231,6232,6308,6317,6318,6328,6392,6406,6407,6874,6940,6941,6951,6955,7056,7103,12672,12680,12681,12752,12979,12980,14736,14961,15060,15078,15114,15561,15600,15603,15610],"fullWord":6407},{"subwords":[1576,1579,1636,5691,5765,6409,6410,6416,6743,10383],"fullWord":6410},{"subwords":[1576,1579,1581,1636,1749,2721,5691,5694,5765,6189,6409,6411,6416,6509,6743,6854,10383,10495,11065],"fullWord":6411},{"subwords":[4678,4688,4810,5984,6406,6409,6412,6413,7056,7057,7058,15060,15093,15098,15099,15114,15115],"fullWord":6413},{"subwords":[6409,6415,6421,6453,6543,6560,6593,6601,7467,7493,7496,7503,7604,12339],"fullWord":6415},{"subwords":[5691,5765,5984,6409,6416,6417,6743,6746,7057,10383,10388,15098,15107,15114],"fullWord":6417},{"subwords":[5716,5918,6421,6422,6453,6463,6543,6560,6564,6593,6601,6606,6619,7493,7511,7604,7611,9135,9307,16815,16858,16860,16866,16867],"fullWord":6422},{"subwords":[5705,5706,5918,6423,6424,6425,6453,6463,6543,6593,6601,6606,6607,6619,6647,6651,6654,9135,9252,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16801,16858,16860,16907,16911,17255,17826,18607,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":6424},{"subwords":[5705,5706,6039,6425,6426,6479,6543,6647,6650,6651,6654,9135,9447,16457,16464,16801,16804,16903,16907,16911,16913,16915,17857,18844,18850,18947],"fullWord":6426},{"subwords":[5705,5706,6425,6427,6509,6543,6647,6651,6654,9135,9447,16457,16801,16907,16911,18018,18019,18844,18850,18947,21130,21135,21136,21137],"fullWord":6427},{"subwords":[5691,5765,5766,6409,6416,6428,6453,6543,6568,6593,6601,6743,10383,10414,10536,10539,10544,10554,10625,12339,12438,12439],"fullWord":6428},{"subwords":[399,442,5765,5780,6276,6430,6431,6432,6734,8258,8264,8268,8445,8513,10324,10333,10343],"fullWord":6432},{"subwords":[399,402,407,442,461,5765,5780,5781,6276,6280,6281,6430,6431,6433,6438,6734,6735,10324,10333,10335,10343,10360,15904,15942,15948,16270,16274,16365,16368],"fullWord":6433},{"subwords":[4728,4731,4744,5691,5756,5765,5780,6406,6409,6412,6416,6430,6434,6740,6743,10378,10383],"fullWord":6434},{"subwords":[5691,5765,5780,5984,6409,6416,6430,6435,6743,6746,7057,10383,10388,15098,15107,15114],"fullWord":6435},{"subwords":[5691,5765,5780,5950,6409,6416,6430,6436,6743,6793,6874,10383,10443,12845],"fullWord":6436},{"subwords":[5765,5780,5950,6430,6437,6507,6756,6793,6817,6874,7014,10443,10942,12845,13110,13114,20571,20875,20885],"fullWord":6437},{"subwords":[5765,5918,5950,5953,5955,6440,6441,6453,6463,6793,6794,6874,6879,10433,10443,10444,10447,10822,10888,12504,12505,12506,12560,12561,12845,12848,12876,12879,16365,17097,17354,17359,17383],"fullWord":6441},{"subwords":[5765,5950,5953,6440,6442,6453,6509,6793,6854,6874,10443,10444,10495,10822,11065,12504,12845,12876,12882,21120,21183],"fullWord":6442},{"subwords":[4701,4728,4731,4736,5691,5705,5756,5765,6406,6409,6412,6416,6420,6443,6444,6489,6490,6740,6743,6749,10378,10383,10394,10460,18576,18577],"fullWord":6444},{"subwords":[399,401,5691,5765,5782,5827,6285,6409,6416,6446,6447,6696,6734,6743,10136,10145,10324,10333,10383,11173,11180,11437,11442],"fullWord":6447},{"subwords":[5827,5845,6409,6419,6446,6448,6449,16319,16330],"fullWord":6449},{"subwords":[245,252,817,828,869,5588,5827,5950,5976,6285,6308,6317,6324,6328,6392,6446,6450,6864,6866,6874,6940,6941,6955,6973,6974,7030,7103,7111,11265,11276,11286,11437,11539,11970,12672,12680,12979,14808,14975,15114,15202,15564,15610,15627,15632],"fullWord":6450},{"subwords":[5827,5845,5846,5847,6446,6451,6452,7169,7171,7172,7173,7194,7206,7210,11539,12152,12154,15114,15134,15202,15224,15777,15782,15806,15820,15840,16431,16446,18066,18071,18103,18150,18155,19876,19880],"fullWord":6452},{"subwords":[3113,4639,4774,5665,5856,5865,6406,6409,6412,6453,6454,6455,6458,12339,12340],"fullWord":6455},{"subwords":[4120,5856,5984,5998,6409,6453,6454,6456,6467,7057,12339,15021,15098,15114],"fullWord":6456},{"subwords":[3119,3139,5856,5918,6023,6404,6409,6419,6453,6454,6457,6463,12339,16160,16298,16319,16335],"fullWord":6457},{"subwords":[4667,4687,4774,5665,5865,5867,6406,6409,6412,6453,6458,6459,12339,12340],"fullWord":6459},{"subwords":[4678,4688,4774,4810,5665,5865,5868,5984,5998,6406,6409,6412,6453,6458,6460,6467,7056,7057,7058,12339,12340,12358,15060,15093,15098,15114,15115,15227],"fullWord":6460},{"subwords":[5691,5765,6409,6416,6453,6462,6743,10383,12339],"fullWord":6462},{"subwords":[5827,5830,5831,5845,6446,6465,6466,6543,6621,6622,6626,6629,6634,6636,7085,9135,9384,9389,9409,9422,11539,11743,11745,11764,11765,15114,15134,15202,15224,15446,15480,15481,15484,15489,15526,16375,16431,16437,16889,16890,17722],"fullWord":6466},{"subwords":[5705,5984,6008,6409,6420,6470,6489,7057,7060,7068,7073,15098,15114,15116,15135,15312,15748,18576,18652,18655,19240,19243],"fullWord":6470},{"subwords":[4156,6008,6471,6543,6621,6622,6624,7083,9079,9384,15021,15114,15411,15413,15446,15448],"fullWord":6471},{"subwords":[6008,6016,6472,6543,6621,6622,6624,6625,6626,6636,7083,7084,7085,9135,9384,9389,9409,15114,15134,15446,15448,15526,15528,16431,16437,16889,16890,17722],"fullWord":6472},{"subwords":[5827,5846,6008,6446,6451,6473,7169,7171,7194,11539,15114,15202,15777,15780,15806],"fullWord":6473},{"subwords":[5691,5765,5984,6083,6409,6416,6475,6743,6746,6821,6824,7057,7153,7155,7194,7196,10383,10388,10470,11029,15098,15107,15114,15136,15777,15800],"fullWord":6475},{"subwords":[4714,4810,4935,5023,5071,5073,5381,6406,6476,6537,6543,6621,6622,6623,6657,6658,7056,7081,9384,9385,15060,15114,15337,15428,15433,15446,15549,15550,20058,20126,20129,20130,20132],"fullWord":6476},{"subwords":[5950,6008,6477,6874,6940,6955,7103,12979,13095,15114,15337,15610,15728,15730],"fullWord":6477},{"subwords":[3119,4268,4271,5656,6023,6404,6409,6419,6478,7210,7212,16298,16319,18066,19876,19878],"fullWord":6478},{"subwords":[4680,4826,6031,6039,6042,6406,6408,6409,6412,6414,6419,6479,6480,6481,16319,16320,16323,16342],"fullWord":6481},{"subwords":[6031,6039,6042,6043,6409,6419,6479,6480,6482,16319,16342],"fullWord":6482},{"subwords":[254,399,402,407,488,1009,5616,5620,5626,5705,5706,5765,6055,6281,6339,6344,6347,6349,6354,6397,6399,6402,6443,6445,6483,6485,6486,6487,6717,6719,6734,6735,10241,10247,10324,10333,10335,10360,10366,10394,10396,10459,10460,10465,15904,15942,15948,15960,16041,16043,16270,16274,16293,16365,16457,16459,17022,17023,17750,17811,18341,18370,18374,18541,18547,18548,18559,18660],"fullWord":6483},{"subwords":[5705,5706,5984,6018,6046,6409,6419,6420,6484,6489,6491,7057,7061,7062,7073,7074,15098,15101,15114,15134,15135,15290,15306,15312,15748,16319,16340,16425,16431,16457,17823,17840,18576,18588,18658,19240,19242,19243],"fullWord":6484},{"subwords":[5705,6421,6423,6453,6493,6543,6560,6593,6601,6651,7493,7512,7540,7575,7604,7637,9325,12374,12463,18607,18844,18894,18898,18901,18902],"fullWord":6493},{"subwords":[5705,5706,6425,6494,6543,6642,6647,6651,6654,8492,8495,8506,8586,8625,8628,8678,8685,8688,8691,8935,9135,9447,16457,16574,16621,16653,16801,16907,16911,18697,18727,18742,18844,18850,18947],"fullWord":6494},{"subwords":[5705,5706,5950,6004,6018,6495,6496,6874,6879,6940,6955,6959,6960,6982,6983,6984,6987,6997,7073,7074,7103,7106,7117,12785,12787,12979,12982,13007,13008,13011,15114,15134,15135,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16431,16457,17340,17342,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,19243],"fullWord":6496},{"subwords":[4701,5705,6406,6409,6412,6420,6489,6490,6497,18576,18577],"fullWord":6497},{"subwords":[5705,5984,6409,6420,6489,6498,7057,7073,15098,15114,15135,15312,15748,18576,19240,19243],"fullWord":6498},{"subwords":[5691,5705,5765,6409,6416,6420,6443,6489,6499,6743,6749,10383,10394,10460,18576],"fullWord":6499},{"subwords":[399,1053,1060,1072,4466,4595,4601,4728,5442,5471,5472,5627,5756,5765,6230,6231,6406,6501,6502,6734,6740,6821,6824,6825,7153,10090,10093,10270,10271,10324,10327,10333,10378,10470],"fullWord":6502},{"subwords":[4667,5466,5467,5471,6406,6409,6412,6501,6503],"fullWord":6503},{"subwords":[5984,6092,6100,6104,6409,6419,6505,6506,7057,7061,15098,15101,15114,15134,15337,15354,16319,16340,16425,16431,16449,16472,19992,19996,19998,20000,20070,20073],"fullWord":6506},{"subwords":[5705,5706,6118,6121,6409,6419,6420,6489,6491,6507,6508,16319,16457,16475,17850,18231,18576,18588,20532,20551,20553,20554,20591,20594,20596],"fullWord":6508},{"subwords":[5705,5706,6189,6198,6409,6419,6420,6489,6491,6509,6511,16319,16457,18018,18019,18576,18588,21130,21135],"fullWord":6511},{"subwords":[6406,6409,6412,6512,6514,21249,21251],"fullWord":6514},{"subwords":[6409,6419,6512,6513,6515,16319,21251,21252],"fullWord":6515},{"subwords":[93,114,2785,2869,2883,3402,3413,5856,6210,6221,6250,6293,6453,6516,6530,6543,6593,6601,9079,9207,9208,12229,12236,12410],"fullWord":6516},{"subwords":[3402,3403,3679,3681,6517,6530,6872,9135,12672,12674,15880,16178,16769,17316,17334,17339],"fullWord":6517},{"subwords":[1560,1767,1777,1780,4618,4714,4935,5632,6390,6406,6520,6521,6537,6543],"fullWord":6521},{"subwords":[1767,1790,2404,2417,2418,5632,6390,6520,6522,6523,6525,6543,6621,6622,9384,14995,15114,15402,15446],"fullWord":6522},{"subwords":[1790,1791,2417,2418,2419,2423,6390,6520,6523,6524,6525,6526,6528,6543,6621,6622,6626,6636,7085,9135,9384,9389,9409,14995,15014,15114,15134,15402,15410,15446,15526,16423,16431,16437,16765,16889,16890,17722],"fullWord":6524},{"subwords":[1790,1791,2417,2418,2419,2423,6390,6520,6523,6524,6525,6526,6528,6543,6621,6622,6626,6636,7085,9135,9384,9389,9409,14995,15014,15114,15134,15402,15410,15446,15526,16423,16431,16437,16765,16889,16890,17722],"fullWord":6526},{"subwords":[1837,2429,6390,6520,6527,6593,6621,12406,15402],"fullWord":6527},{"subwords":[232,337,385,1060,1272,1307,6246,6390,6520,6529,6677,6821,6822,10061,10504],"fullWord":6529},{"subwords":[3253,3254,3272,3287,3288,6023,6531,6532,6543,6642,8612,8625,8628,8678,9079,9085,9135,16178,16298,16574,16769],"fullWord":6532},{"subwords":[3272,4277,6533,6534,6642,8612,8678,9135,16178,16769,18050,18083,19592],"fullWord":6534},{"subwords":[3120,3498,5765,5778,6535,6543,6568,6737,6762,9079,9150,10414,10416,10518,10525,10536,10539,10554,10566],"fullWord":6535},{"subwords":[4714,4728,4739,4928,4935,4936,5756,5765,6406,6536,6537,6538,6543,6546,6568,6569,6740,6764,9117,9118,10378,10414,10530,10536,10537,10539,10554],"fullWord":6536},{"subwords":[4701,4714,4935,4942,4947,5680,5705,6406,6492,6537,6540,6543,6560,6651,7540,7575,7576,7637,18835,18844,18845],"fullWord":6540},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5756,5760,5765,6406,6408,6537,6538,6539,6542,6543,6546,6547,6568,6569,6572,6740,6764,6767,9111,9117,9121,9127,9135,9416,9417,10378,10414,10415,10530,10535,10536,10537,10539,10551,10554,16365,16780,16784,17044,17068,17069],"fullWord":6547},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,6406,6408,6453,6458,6461,6463,6537,6539,6542,6543,6548,6549,6593,6598,6600,6601,6602,6606,6619,9111,9127,9135,9307,16381,16780,16858,16860,17243],"fullWord":6549},{"subwords":[4120,5735,5984,5995,6409,6543,6550,6621,6622,7057,9079,9384,15021,15098,15114,15411,15446],"fullWord":6550},{"subwords":[254,1009,5616,5620,5626,5705,5706,6055,6261,6264,6339,6344,6347,6349,6354,6397,6399,6402,6425,6485,6487,6518,6519,6543,6552,6647,6651,6654,9135,9447,15904,16041,16043,16270,16293,16457,16801,16907,16911,18347,18541,18559,18844,18850,18947],"fullWord":6552},{"subwords":[5703,6543,6544,6545,6553,6555,6556,6557,6621,6622,6626,6636,7085,9135,9384,9389,9409,15114,15134,15446,15450,15453,15526,16431,16437,16889,16890,17722],"fullWord":6556},{"subwords":[6558,6559,6642,6647,6651,6654,8678,8685,8688,8691,8935,9135,9447,16621,16653,16801,16907,17858,18742,18851,18854,18947],"fullWord":6559},{"subwords":[4714,4935,4947,5709,6406,6537,6543,6560,6561,7578],"fullWord":6561},{"subwords":[6560,6562,6563,6564,6642,6647,6651,6654,7575,7577,7635,7637,8678,8685,8688,8691,8935,9135,9447,16621,16653,16801,16805,16809,16907,18742,18947],"fullWord":6563},{"subwords":[5988,6543,6560,6565,6621,6622,7087,7130,7194,8001,9384,15114,15141,15446,15461,15777,15790,19855],"fullWord":6565},{"subwords":[5765,6543,6568,6570,6571,6572,6621,6622,6626,6636,6765,6766,6767,7085,9135,9384,9389,9409,9416,10414,10415,10536,10539,10549,10550,10551,10554,10555,10556,10677,15114,15134,15444,15445,15446,15454,15457,15473,15475,15526,16365,16431,16437,16889,16890,17072,17722],"fullWord":6571},{"subwords":[5705,5706,5765,6425,6443,6445,6543,6568,6572,6573,6574,6647,6651,6654,6767,6768,6782,6784,6785,6786,9135,9416,9419,9436,9447,9448,10394,10396,10414,10415,10459,10460,10465,10536,10539,10551,10554,10557,10560,10686,10691,10694,10697,10707,16365,16457,16801,16840,16907,16911,17093,17860,17862,18844,18850,18863,18866,18870,18947],"fullWord":6574},{"subwords":[337,428,442,6246,6276,6575,6577,6686,9146,9152],"fullWord":6575},{"subwords":[6560,6576,6593,6772,7604,10637,12438],"fullWord":6576},{"subwords":[4714,4728,4739,4744,4935,4967,5756,5765,5780,6406,6430,6537,6538,6543,6546,6568,6569,6577,6578,6579,6740,6764,9117,9152,10378,10414,10530,10536,10537,10539,10554],"fullWord":6579},{"subwords":[5765,5780,6430,6543,6568,6570,6577,6578,6580,6621,6622,6765,7091,9152,9153,9384,10414,10536,10539,10549,10554,10555,10677,15114,15120,15444,15446,15454,15473,15477],"fullWord":6580},{"subwords":[5765,5780,5781,6430,6438,6543,6568,6572,6577,6578,6581,6583,6767,9135,9152,9155,9416,10414,10415,10536,10539,10551,10554,10679,16365,16368,16834],"fullWord":6581},{"subwords":[5705,5765,5780,6430,6443,6543,6568,6573,6577,6578,6582,6651,6782,6784,9152,10394,10414,10460,10536,10539,10554,10557,10580,10691,10694,18591,18844,18863,18866,18872],"fullWord":6582},{"subwords":[4714,4728,4739,4935,4938,4971,4972,5756,5765,5782,5827,6406,6446,6537,6538,6543,6546,6568,6569,6585,6586,6740,6764,9109,9117,10378,10414,10530,10536,10537,10539,10554,10584,10595,10596,11492,11605,11626,11659,11663,11668],"fullWord":6586},{"subwords":[5705,5765,6443,6543,6568,6570,6573,6589,6621,6622,6651,6765,6779,6782,6784,7073,9384,10394,10414,10460,10536,10539,10549,10554,10555,10557,10559,10677,10691,10694,10695,10705,15114,15124,15135,15197,15312,15444,15446,15454,15458,15473,15542,15748,18844,18847,18863,18866,18868,18941,19243,19279],"fullWord":6589},{"subwords":[6590,6591,6642,6647,6651,6654,6782,6786,8645,8647,8678,8685,8688,8691,8935,9135,9447,10557,10560,10686,10691,10698,10707,16621,16653,16801,16840,16907,17093,18742,18863,18947],"fullWord":6591},{"subwords":[6590,6592,6651,6653,6782,6854,8645,8688,10557,10691,10698,18806,18863],"fullWord":6592},{"subwords":[337,399,423,430,637,5745,5765,5766,6246,6250,6293,6453,6543,6568,6593,6594,6595,6601,6702,6734,10120,10174,10324,10333,10344,10414,10536,10539,10544,10554,10625,12229,12236,12238,12438,12439],"fullWord":6595},{"subwords":[337,340,639,647,691,6246,6249,6250,6293,6302,6593,6594,6596,6619,6702,6706,9135,9307,10120,10654,12236,12237,12238,12241,12438,12442,15931,15942,15986,16858,17006,17214],"fullWord":6596},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5865,5996,6406,6453,6458,6467,6537,6543,6548,6593,6598,6599,6601,6602,6604,6621,6622,6623,7056,7081,7082,9250,9384,9385,12358,15060,15073,15114,15175,15227,15428,15433,15446,15491],"fullWord":6599},{"subwords":[5765,5766,6453,6509,6543,6568,6593,6601,6603,6854,9293,10414,10495,10536,10539,10544,10554,10625,10636,10662,11065,12438,12439,21120,21144],"fullWord":6603},{"subwords":[5996,6453,6467,6469,6509,6543,6551,6593,6601,6604,6605,6621,6622,7140,9250,9384,15114,15172,15175,15446,15866,21120,21144],"fullWord":6605},{"subwords":[5705,5706,5918,6423,6424,6425,6453,6463,6543,6593,6601,6606,6607,6619,6647,6651,6654,9135,9252,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16801,16858,16860,16907,16911,17255,17826,18607,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":6607},{"subwords":[5894,5988,5996,6421,6453,6467,6543,6560,6593,6601,6604,6608,6621,6622,7087,7094,7493,7604,8001,8015,9250,9384,15114,15141,15173,15175,15234,15446,15461,15494],"fullWord":6608},{"subwords":[337,428,6246,6250,6293,6593,6594,6609,6702,9146,10120,12236,12238,12438],"fullWord":6609},{"subwords":[6593,6610,6611,6619,6642,8678,8679,9135,9307,12462,16629,16858,16874],"fullWord":6611},{"subwords":[5705,6423,6453,6543,6593,6601,6612,6651,9325,12374,12463,18607,18844,18894,18898],"fullWord":6612},{"subwords":[4714,4774,4935,4957,4985,4988,5865,6406,6453,6458,6537,6543,6548,6593,6598,6601,6602,6613,6614,9276,9277,9836,9885,9913,9914,9919,9979,9980],"fullWord":6614},{"subwords":[657,6250,6293,6593,6616,6617,9297,12236,12252],"fullWord":6617},{"subwords":[4714,4774,4935,4985,4988,5865,5887,6406,6453,6458,6537,6543,6548,6593,6598,6601,6602,6616,6618,9297,9299,12448],"fullWord":6618},{"subwords":[6008,6016,6472,6543,6621,6622,6624,6625,6626,6636,7083,7084,7085,9135,9384,9389,9409,15114,15134,15446,15448,15526,15528,16431,16437,16889,16890,17722],"fullWord":6625},{"subwords":[6560,6593,6621,6627,7087,7604,8015,9391,15461,15494],"fullWord":6627},{"subwords":[6593,6613,6621,6628,9276,9396,9913,15498],"fullWord":6628},{"subwords":[4714,4810,4818,4935,4938,4971,4972,4973,5023,5827,5830,6406,6446,6465,6537,6543,6621,6622,6623,6629,6631,7056,7081,9109,9384,9385,11539,11605,11626,11743,11744,15060,15114,15202,15428,15433,15446,15480,15481,15482],"fullWord":6631},{"subwords":[5827,5830,6008,6446,6465,6543,6621,6622,6624,6629,6632,7083,9384,11539,11743,15114,15202,15446,15448,15480,15481],"fullWord":6632},{"subwords":[6585,6588,6621,6629,6633,6854,7140,10584,10618,11659,11755,15480,15490],"fullWord":6633},{"subwords":[6621,6636,6637,6638,6647,6650,6651,6654,9135,9409,9447,15458,15460,16801,16804,16889,16899,16903,16907,16915,17722,17881,17882,18947],"fullWord":6638},{"subwords":[6621,6636,6637,6639,6640,6642,6647,6651,6654,8678,8685,8688,8691,8934,8935,9135,9409,9447,15458,15460,16621,16648,16653,16728,16801,16889,16907,17722,17881,18742,18947],"fullWord":6640},{"subwords":[337,340,2813,2815,2816,2818,2819,3402,6246,6249,6530,6641,9135,10072,15880,15931,15942,16178,16179,16769],"fullWord":6641},{"subwords":[4714,4826,4935,4939,5037,5046,6406,6408,6537,6539,6542,6543,6642,6643,8617,8619,8623,8625,8626,8628,8678,9111,9127,9135,16574,16581,16615,16780],"fullWord":6643},{"subwords":[6543,6621,6622,6626,6636,6642,6644,7071,7085,8503,8505,8552,8584,8625,8628,8672,8676,8678,8934,9135,9384,9389,9409,15114,15134,15446,15526,16431,16437,16574,16606,16617,16642,16889,16890,17722],"fullWord":6644},{"subwords":[6039,6479,6543,6642,6645,8625,8628,8678,8681,9135,16574,16609,16619,16903],"fullWord":6645},{"subwords":[4701,4714,4724,4826,4935,4939,4942,4945,5037,5063,5680,5684,5705,5706,6406,6408,6425,6492,6537,6539,6542,6543,6647,6648,6651,6654,9111,9127,9135,9447,16457,16780,16801,16802,16907,16911,16912,17856,18575,18835,18837,18844,18845,18850,18947],"fullWord":6648},{"subwords":[3429,4238,4241,6647,6649,6651,6654,9135,9447,16178,16769,16801,16907,18823,18830,18947],"fullWord":6649},{"subwords":[6651,6652,6782,6821,10557,10691,10978,18851,18863,19414,19605],"fullWord":6652},{"subwords":[4701,4714,4935,4942,5680,5705,6406,6492,6537,6543,6651,6655,18835,18844,18845,18950],"fullWord":6655},{"subwords":[5705,6543,6621,6622,6651,6656,7073,9384,15114,15124,15135,15312,15446,15458,15542,15748,18844,18847,18941,18950,18953,18963,19243,19303],"fullWord":6656},{"subwords":[6543,6621,6622,6626,6636,6657,6658,6659,6660,7085,9135,9384,9389,9409,15114,15134,15337,15354,15446,15526,15549,15554,16431,16437,16889,16890,17722,20070,20129,20132,20133,20134,20197],"fullWord":6659},{"subwords":[254,1009,1167,5620,5705,6055,6154,6171,6261,6344,6347,6383,6399,6485,6518,6543,6651,6661,6662,6663,18347,18528,18533,18541,18677,18844],"fullWord":6662},{"subwords":[6543,6621,6622,6626,6636,6661,6663,6664,6665,6666,7085,9135,9384,9389,9409,15114,15126,15134,15373,15446,15526,16431,16437,16483,16889,16890,16922,17722],"fullWord":6665},{"subwords":[6560,6593,6661,6667,7604,9254,12474,21024],"fullWord":6667},{"subwords":[6661,6668,6669,7024,9135,13871,13874,14418,14421,14551,16883,16922,18083,18135,19825],"fullWord":6669},{"subwords":[4714,4935,6406,6512,6537,6543,6670,6671,21249],"fullWord":6671},{"subwords":[6512,6543,6621,6622,6670,6672,7100,7101,9384,15114,15446],"fullWord":6672},{"subwords":[5765,6512,6543,6568,6670,6673,10414,10536,10539,10554],"fullWord":6673},{"subwords":[5216,5221,6675,6676,6940,6951,6954,7103,13007,15600,15609,17323],"fullWord":6676},{"subwords":[49,232,385,1234,1502,1510,1895,6386,6677,6678,6730,6854,10061,10304],"fullWord":6678},{"subwords":[950,2813,2815,2816,2822,2825,3033,6680,6681,6690,6715,10072,10082,10086,15880,15884,15942,17001],"fullWord":6681},{"subwords":[2813,2815,2869,3459,3597,3701,3702,3777,3791,6275,6293,6682,6702,6861,6871,10072,10734,10741,10760,12672],"fullWord":6682},{"subwords":[6240,6386,6683,6684,6730,6854,7267,7293,7447,10109,10304],"fullWord":6684},{"subwords":[299,478,629,6240,6293,6296,6683,6685,6702,6795,6861,6885,7293,7361,7764,7807,10109,10734,10741,10793,10794,10826,12230,12509,12672],"fullWord":6685},{"subwords":[337,340,442,461,6246,6249,6276,6280,6577,6583,6686,6687,9135,9152,9155,15931,15942,16834],"fullWord":6687},{"subwords":[337,340,349,359,828,860,905,6246,6249,6254,6259,6308,6566,6621,6636,6688,6689,7028,7029,9135,9376,9409,10121,10125,10502,10503,10675,10676,14780,14783,15399,15400,15931,15942,16028,16889,17722],"fullWord":6689},{"subwords":[399,4466,4595,4601,4728,5756,5765,5778,6230,6231,6265,6266,6406,6690,6691,6692,6734,6740,9760,10090,10093,10128,10129,10324,10327,10333,10338,10378,10416],"fullWord":6692},{"subwords":[399,817,828,867,5588,5592,5765,5778,5976,6265,6268,6308,6317,6392,6464,6690,6691,6693,6710,6734,7053,9760,9852,10128,10130,10214,10324,10333,10338,10355,10416,14798,14968,15114],"fullWord":6693},{"subwords":[399,402,407,950,5765,5778,5779,6265,6271,6281,6690,6691,6694,6715,6734,6735,9760,9761,10128,10132,10324,10333,10335,10338,10341,10360,10416,10417,15904,15939,15942,15948,16270,16274,16365,17007],"fullWord":6694},{"subwords":[43,232,385,399,516,1301,1324,1526,1636,1665,1907,5765,5782,5827,6204,6285,6446,6677,6695,6696,6734,10061,10136,10139,10145,10324,10333,11173,11180,11437,11442,11491],"fullWord":6695},{"subwords":[399,4466,4472,4475,4595,4601,4728,5658,5756,5765,5782,5827,6230,6231,6285,6286,6406,6446,6696,6697,6734,6740,10090,10093,10136,10145,10146,10324,10327,10333,10378,11107,11115,11173,11180,11437,11438,11442,11464,11492,11605],"fullWord":6697},{"subwords":[399,817,828,869,5588,5592,5765,5782,5827,5976,6285,6308,6317,6324,6392,6446,6464,6696,6698,6710,6734,7030,10136,10145,10150,10324,10333,10355,11173,11180,11276,11286,11303,11437,11442,11539,14808,14968,14971,14975,15114,15202],"fullWord":6698},{"subwords":[399,402,407,470,5765,5782,5784,5827,5845,6281,6285,6287,6446,6696,6699,6700,6734,6735,10136,10145,10151,10161,10324,10333,10335,10360,11173,11180,11181,11330,11437,11442,11444,11453,11560,15904,15942,15948,15949,15973,15978,16270,16274,16278,16365,17012],"fullWord":6699},{"subwords":[269,399,620,625,5745,5765,6240,6293,6296,6453,6683,6702,6703,6734,7293,7298,7348,7477,7493,7494,7674,7680,10109,10174,10324,10333,10344,10398,12229,12230],"fullWord":6703},{"subwords":[950,6293,6302,6690,6702,6704,6705,6706,6715,9959,10177,15942,15986,16007],"fullWord":6705},{"subwords":[481,762,772,6386,6707,6708,6730,6854,10182,10189,10304,13204,13268,13424,13932,14009,21064],"fullWord":6708},{"subwords":[396,399,410,817,828,4466,4516,4595,4601,4607,4728,4810,5588,5592,5756,5765,5976,6230,6231,6232,6308,6317,6318,6392,6406,6464,6710,6711,6734,6740,7056,10090,10093,10097,10202,10324,10327,10333,10355,10378,14736,14961,14968,15060,15114],"fullWord":6711},{"subwords":[399,402,407,817,825,828,905,906,5588,5592,5593,5599,5765,5976,5977,6281,6282,6308,6317,6321,6392,6395,6464,6710,6712,6734,6735,10207,10228,10324,10333,10335,10355,10360,14805,14881,14968,14973,15114,15134,15904,15906,15942,15948,16270,16274,16286,16365,16419,16420,16431],"fullWord":6712},{"subwords":[325,932,944,6386,6388,6713,6714,6730,6733,6854,8264,8362,8420,8428,10231,10304,10313,15942,16103,16530,16572,16758,17039,17149],"fullWord":6714},{"subwords":[950,957,973,6690,6715,6716,10236,15942],"fullWord":6716},{"subwords":[254,442,464,488,6276,6344,6353,6386,6717,6718,6730,6854,10304,18381,18384],"fullWord":6718},{"subwords":[254,488,1060,6339,6344,6354,6363,6364,6372,6373,6717,6719,6720,6821,6845,10241,11044,15942,15960,16041,16066,17022,17147,18091,18388,18508,19412,19413,19427,19605,19871],"fullWord":6720},{"subwords":[254,488,693,1060,1074,6293,6344,6363,6366,6373,6702,6717,6721,6821,7179,11001,12292,12300,12659,18408,18508,19412,19434,19435,19600,19605],"fullWord":6721},{"subwords":[252,828,6308,6328,6377,6722,6803,6861,6940,6941,7103,10734,12672,12680,12948,13087,13088,19923,19932,20250],"fullWord":6722},{"subwords":[399,1145,1147,1155,4466,4574,4595,4601,4728,4865,5756,5765,6230,6231,6406,6507,6723,6724,6734,6740,6756,7240,10090,10093,10292,10293,10324,10327,10333,10378,10490,20303,20309,20369,20370,20501,20502,20524,20566],"fullWord":6724},{"subwords":[399,1167,1169,1182,5745,5765,6293,6383,6453,6702,6727,6728,6734,6757,10174,10301,10324,10333,10344,10494,12229],"fullWord":6728},{"subwords":[399,402,407,1167,1169,1170,1173,1182,1183,5765,6281,6383,6384,6727,6729,6734,6735,6757,10301,10324,10333,10335,10360,10494,15904,15942,15948,16098,16270,16274,16365,16483],"fullWord":6729},{"subwords":[399,1196,4466,4578,4595,4598,4601,4706,4728,4729,5567,5756,5765,6230,6231,6386,6406,6509,6730,6731,6734,6740,6854,10090,10093,10108,10304,10305,10324,10327,10332,10333,10336,10378,10495,11065,21050,21097],"fullWord":6731},{"subwords":[227,399,817,828,1196,5588,5592,5594,5765,5976,6239,6308,6317,6386,6392,6464,6509,6710,6730,6732,6734,6854,6855,7050,7140,10304,10306,10324,10333,10336,10355,10359,10495,11065,11074,14939,14968,15114,15130,15183,15201,15864,15866,21050,21071,21097,21099],"fullWord":6732},{"subwords":[3253,3498,5691,5765,6409,6416,6736,6743,8483,8488,10373,10383,10384],"fullWord":6736},{"subwords":[3498,3499,5765,5778,5779,6023,6737,6738,10416,10417,16298,16365],"fullWord":6738},{"subwords":[3498,5765,5778,6509,6737,6739,6854,9865,10416,10495,11065],"fullWord":6739},{"subwords":[4728,4731,5667,5691,5756,5765,6406,6409,6412,6416,6740,6741,6743,7467,7468,7477,7478,7678,10378,10379,10383,10398],"fullWord":6741},{"subwords":[4706,4728,5567,5675,5756,5765,6406,6509,6740,6742,6854,7477,7478,10378,10382,10398,10495,11065],"fullWord":6742},{"subwords":[3498,5691,5765,6409,6416,6743,6744,10383],"fullWord":6744},{"subwords":[3498,5691,5694,5765,6189,6409,6416,6509,6743,6745,6854,10383,10495,11061,11065],"fullWord":6745},{"subwords":[5691,5693,5765,5790,5984,6409,6416,6418,6419,6743,6746,6747,6748,7057,7061,10383,10388,10390,10392,10451,15098,15101,15107,15110,15114,15134,16319,16340,16365,16425,16431],"fullWord":6747},{"subwords":[5691,5693,5705,5706,5765,5790,6409,6416,6418,6419,6420,6443,6445,6489,6491,6743,6748,6749,6750,10383,10392,10394,10396,10451,10459,10460,10465,16319,16365,16457,17052,17818,17828,18576,18588],"fullWord":6750},{"subwords":[5691,5693,5765,5790,5918,6409,6416,6418,6419,6453,6463,6743,6748,6751,10383,10392,10433,10434,10451,12339,16319,16335,16365],"fullWord":6751},{"subwords":[5765,6509,6752,6753,6854,8607,10495,10496,11065,11066,16365,16574,16596,16758,17149,21130],"fullWord":6753},{"subwords":[3135,3253,3498,3500,5705,5765,6057,6058,6443,6488,6754,8492,10373,10376,10394,10460,10461,18570,18697],"fullWord":6754},{"subwords":[5765,6509,6755,6821,6824,6854,6855,7140,7153,7194,7196,7207,10470,10495,11029,11065,11074,15114,15130,15201,15777,15800,15866,21222],"fullWord":6755},{"subwords":[4728,4731,5691,5756,5765,6406,6409,6412,6416,6740,6743,6757,6758,10378,10383,10494],"fullWord":6758},{"subwords":[5691,5693,5765,5790,6144,6409,6416,6418,6419,6743,6748,6757,6759,10383,10392,10451,10494,16319,16365,16483],"fullWord":6759},{"subwords":[5765,5950,6757,6760,6793,6874,6940,6955,7017,7103,10443,10494,10882,10953,12845,12979,15114,15373,15610,15621],"fullWord":6760},{"subwords":[4706,4728,4731,5567,5691,5694,5756,5765,6189,6191,6406,6409,6412,6416,6509,6740,6743,6761,6854,10378,10383,10495,11065],"fullWord":6761},{"subwords":[6762,6763,9135,9150,9151,10525,10528,16178,16179,16769,16772,16829,16954,17066],"fullWord":6763},{"subwords":[5765,6543,6568,6570,6571,6572,6621,6622,6626,6636,6765,6766,6767,7085,9135,9384,9389,9409,9416,10414,10415,10536,10539,10549,10550,10551,10554,10555,10556,10677,15114,15134,15444,15445,15446,15454,15457,15473,15475,15526,16365,16431,16437,16889,16890,17072,17722],"fullWord":6766},{"subwords":[5705,5706,5765,6425,6443,6445,6543,6568,6572,6573,6574,6647,6651,6654,6767,6768,6782,6784,6785,6786,9135,9416,9419,9436,9447,9448,10394,10396,10414,10415,10459,10460,10465,10536,10539,10551,10554,10557,10560,10686,10691,10694,10697,10707,16365,16457,16801,16840,16907,16911,17093,17860,17862,18844,18850,18863,18866,18870,18947],"fullWord":6768},{"subwords":[6560,6562,6590,6651,6769,6782,7575,7596,7637,8645,8688,10557,10563,10691,10698,18863],"fullWord":6769},{"subwords":[6585,6587,6588,6770,6854,9135,9422,10584,10618,11659,11685,17076,17082,17149],"fullWord":6770},{"subwords":[3272,3305,6567,6593,6597,6771,8612,9207,9213,12438],"fullWord":6771},{"subwords":[6560,6564,6593,6619,6772,6773,7604,7611,9135,9307,10637,10642,10654,12438,12442,16815,16858,16866,17083],"fullWord":6773},{"subwords":[6593,6619,6647,6651,6654,6774,6775,6782,6786,9135,9307,9318,9325,9334,9447,10557,10560,10654,10656,10659,10686,10691,10707,12438,12442,12463,12471,16801,16840,16858,16907,17093,17255,18863,18894,18919,18947],"fullWord":6775},{"subwords":[6593,6651,6653,6774,6776,6782,6854,9293,9325,9334,10557,10656,10660,10662,10691,12426,12438,12463,18863,18894,18925,21144],"fullWord":6776},{"subwords":[6621,6636,6637,6647,6651,6654,6779,6780,6782,6786,9135,9409,9447,10557,10560,10686,10691,10707,15458,15460,16801,16840,16889,16907,17093,17722,17881,18863,18947],"fullWord":6780},{"subwords":[6621,6651,6653,6779,6781,6782,6854,7140,10557,10691,15458,18863,19377],"fullWord":6781},{"subwords":[3272,3328,3429,3515,6567,6590,6651,6782,6783,8612,8645,8688,9440,10523,10557,10691,10698,18823,18863],"fullWord":6783},{"subwords":[5705,5706,5765,6425,6443,6445,6543,6568,6572,6573,6574,6647,6651,6654,6767,6768,6782,6784,6785,6786,9135,9416,9419,9436,9447,9448,10394,10396,10414,10415,10459,10460,10465,10536,10539,10551,10554,10557,10560,10686,10691,10694,10697,10707,16365,16457,16801,16840,16907,16911,17093,17860,17862,18844,18850,18863,18866,18870,18947],"fullWord":6785},{"subwords":[254,474,487,488,495,496,6339,6344,6354,6355,6717,6719,6787,6788,6861,6863,10181,10241,10734,10737,10788,10791,10896,10897,10901,12672,12674,12686,12692,12785,15942,15960,16041,17022,17113,17334,17340,17354,17435,17885,18432,18435],"fullWord":6788},{"subwords":[254,474,488,495,6344,6353,6386,6717,6730,6787,6789,6854,6861,10304,10734,10788,10792,10897,12672,12686,12769,12785,18432,19186],"fullWord":6789},{"subwords":[3701,6790,6791,6911,6912,10760,10768,10772,17316,17319,17354],"fullWord":6791},{"subwords":[3577,3701,4029,6790,6792,6854,6911,10760,10768,21180],"fullWord":6792},{"subwords":[5221,6796,6797,6902,6905,6928,6929,6930,6932,10833,10837,10854,12837,12844,13024,17323,17354,17357,17370],"fullWord":6797},{"subwords":[5765,5950,6509,6793,6798,6854,6874,6930,10443,10495,10833,11065,12845,12846],"fullWord":6798},{"subwords":[6799,6800,6930,6932,6940,7103,10833,10837,10854,13007,13024,15644,15647,17354,17370],"fullWord":6800},{"subwords":[6801,6802,6854,6937,10864,10873,12933,13971,13981,14009,14056,14088,14089,14130],"fullWord":6802},{"subwords":[245,252,399,472,817,828,5588,5592,5765,5950,5976,6308,6317,6328,6392,6464,6710,6734,6793,6803,6804,6861,6874,6940,6941,6955,7103,10324,10333,10355,10443,10734,10736,10882,12672,12680,12845,12948,12979,14968,15114,15610,15621],"fullWord":6804},{"subwords":[252,442,828,6276,6308,6328,6803,6805,6861,6940,6941,7103,10734,12672,12680,12856,12948,15623],"fullWord":6805},{"subwords":[252,253,487,828,905,6308,6328,6330,6803,6806,6861,6863,6940,6941,7103,10181,10734,10737,12672,12674,12680,12683,12948,12950,13007,15673,15942,17303,17334,17335,17354,17356],"fullWord":6806},{"subwords":[5705,5765,5950,6443,6495,6793,6807,6874,6940,6955,6982,6983,7073,7103,10394,10443,10460,10788,10790,10882,10897,12785,12787,12845,12979,13008,15114,15135,15312,15610,15621,15691,15694,15748,18981,19017,19093,19101,19243],"fullWord":6807},{"subwords":[6541,6620,6621,6808,6896,6902,6940,6951,7103,9125,10530,10533,10878,12812,12837,15428,15600,15617],"fullWord":6808},{"subwords":[6593,6621,6809,6896,6940,7103,9257,9360,9400,10652,10663,10814,10886,12438,12513,12548,12812,15617],"fullWord":6809},{"subwords":[6810,6811,6854,10893,10895,17149,17354,17434,17472,17475],"fullWord":6811},{"subwords":[6812,6813,6821,6842,6843,6845,6940,6999,7003,7008,7009,7103,7194,7196,7199,7206,10922,10923,13007,13051,13052,17141,17354,17442,17451,18155,19580,19581],"fullWord":6813},{"subwords":[6812,6814,6821,6842,6854,6940,6999,7008,7103,7140,7194,7196,7207,10887,10922,10924,13051,19580,21193,21196],"fullWord":6814},{"subwords":[6815,6816,6821,6845,6999,7003,10788,10791,10896,10897,10901,10905,10929,10931,11044,12785,13055,13059,13082,17113,17147,17340,17354,17435,17442,18991,18992,19580,19581,19605],"fullWord":6816},{"subwords":[4728,4865,5114,5146,5271,5756,5765,5950,6406,6507,6740,6756,6793,6817,6818,6874,6902,7014,7015,7240,10378,10443,10490,10780,10942,10944,12752,12837,12845,13110,13111,13114,20524,20566,20875,20883,20885,20886],"fullWord":6818},{"subwords":[5765,5950,6507,6756,6793,6817,6819,6874,6940,6955,7014,7016,7103,7123,10443,10882,10942,10945,12845,12979,13110,13114,15114,15128,15610,15621,15734,15739,20875,20885,20887,20933],"fullWord":6819},{"subwords":[5705,5765,6443,6453,6821,6824,6826,6846,7153,7179,10394,10437,10460,10470,11008,11010,11050,12374,12659,18607,19434,19438,19605,19677,19719],"fullWord":6826},{"subwords":[5037,6542,6821,6828,6829,6845,7152,7217,9127,9135,9449,9450,10530,10535,17068,18083],"fullWord":6829},{"subwords":[4728,5471,5472,5489,5756,5765,5778,6406,6501,6740,6821,6824,6825,6830,6831,7153,10378,10416,10470,10987,19595],"fullWord":6831},{"subwords":[5765,5778,5779,6821,6824,6827,6830,6832,6845,7153,7156,7210,7214,10416,10417,10470,10987,16365,17128,18066,18094,19595,19596,19876],"fullWord":6832},{"subwords":[5765,5778,6509,6821,6824,6830,6833,6834,6854,7153,9865,10416,10470,10495,10987,11065,19595,21218,21222],"fullWord":6833},{"subwords":[4728,5471,5472,5756,5765,5782,5827,5846,6406,6446,6501,6740,6821,6824,6825,6835,6836,7153,7169,7170,10378,10470,11492,11605,12091,12110,12111],"fullWord":6836},{"subwords":[5765,5782,5784,5827,5845,5846,5847,6446,6821,6824,6827,6835,6837,6845,7153,7156,7169,7173,7210,7214,10470,12110,12112,12152,16365,17128,17135,18066,18103,19876],"fullWord":6837},{"subwords":[6821,6839,6840,6845,7179,7187,7190,11021,11023,17140,18094,18117,18126],"fullWord":6840},{"subwords":[6821,6834,6839,6841,6854,7179,7187,7191,11021,11024,21218],"fullWord":6841},{"subwords":[6812,6813,6821,6842,6843,6845,6940,6999,7003,7008,7009,7103,7194,7196,7199,7206,10922,10923,13007,13051,13052,17141,17354,17442,17451,18155,19580,19581],"fullWord":6843},{"subwords":[6821,6844,6854,7140,7194,7196,7205,7207],"fullWord":6844},{"subwords":[4701,4728,4736,5471,5472,5479,5705,5756,5765,6406,6443,6501,6740,6821,6824,6825,6846,6847,7153,10378,10394,10460,10470,11050,11052,19605],"fullWord":6847},{"subwords":[5705,5765,6443,6821,6824,6846,6848,7073,7153,7194,7196,10394,10460,10470,11029,11050,15114,15135,15312,15748,15777,15800,15858,19243,19356,19468,19605],"fullWord":6848},{"subwords":[5705,5706,5765,6443,6445,6500,6821,6824,6827,6845,6846,6849,7153,7156,7210,7214,10394,10396,10459,10460,10465,10470,11044,11050,11053,16365,16457,17128,17147,18066,18074,19422,19605,19876],"fullWord":6849},{"subwords":[4728,4850,5471,5472,5756,5765,6406,6501,6740,6757,6821,6824,6825,6851,6852,7153,10378,10470,10494,11058,11059],"fullWord":6852},{"subwords":[5765,6757,6821,6824,6827,6845,6851,6853,7153,7156,7210,7214,10470,10494,11058,11059,11060,16365,16483,17128,18066,19876],"fullWord":6853},{"subwords":[5765,6509,6854,6855,6856,7140,10495,10496,11065,11066,11074,11075,15114,15130,15134,15201,15866,15867,16365,16431,17149,17150,21130,21212],"fullWord":6856},{"subwords":[6560,6593,6772,6854,6857,7604,9293,10637,10662,11067,12438,21144],"fullWord":6857},{"subwords":[594,716,6293,6386,6701,6702,6730,6854,6858,10136,10304,11173,11213,11238,11264,11408,12201,12244,12311,21051],"fullWord":6858},{"subwords":[5765,5782,5785,5827,6446,6453,6509,6854,6859,10495,11065,11512,21120],"fullWord":6859},{"subwords":[1155,6386,6723,6726,6730,6854,6860,10292,10304,20493,21079,21082,21094],"fullWord":6860},{"subwords":[183,186,399,472,4466,4595,4601,4728,5114,5146,5756,5765,5950,6230,6231,6406,6734,6740,6793,6861,6862,6874,6902,10090,10093,10324,10327,10333,10378,10443,10730,10734,10735,10780,12672,12752,12837,12845],"fullWord":6862},{"subwords":[183,4472,4475,4595,4696,4763,5114,5163,5165,5658,5827,5950,6230,6231,6285,6286,6406,6446,6864,6865,6874,11107,11115,11265,11437,11438,11605,11831,11833,12672,12752],"fullWord":6865},{"subwords":[245,252,817,828,869,5588,5827,5950,5976,6285,6308,6317,6324,6328,6392,6446,6450,6864,6866,6874,6940,6941,6955,6973,6974,7030,7103,7111,11265,11276,11286,11437,11539,11970,12672,12680,12979,14808,14975,15114,15202,15564,15610,15627,15632],"fullWord":6866},{"subwords":[1560,2042,2058,2059,4618,5114,5632,5950,6406,6868,6869,6874,12752],"fullWord":6869},{"subwords":[4810,5114,5115,5950,6406,6873,6874,6940,6951,6952,6955,7056,7103,12745,12746,12752,12979,15060,15078,15114,15600,15603,15610],"fullWord":6873},{"subwords":[5918,5950,5953,5955,6453,6463,6874,6875,6876,6879,8540,8547,8725,8730,8789,8793,8797,8881,12506,12560,12561,12565,12810,12876,12879,16574,16676,16685,17383],"fullWord":6876},{"subwords":[215,528,5827,5950,5953,6285,6293,6446,6453,6864,6874,6877,11213,11218,11265,11437,11446,11512,11810,11891,12229,12244,12245,12522,12525,12672,12866,12876],"fullWord":6877},{"subwords":[5827,5950,5953,6409,6446,6453,6874,6878,11512,11891,12339,12522,12525,12866,12876],"fullWord":6878},{"subwords":[254,399,472,474,488,495,1009,5620,5705,5765,5950,6055,6344,6347,6399,6443,6485,6486,6717,6734,6787,6793,6861,6874,6880,10247,10324,10333,10394,10443,10460,10734,10788,10897,12672,12686,12785,12845,18370,18432,18541,18547,18981,19017],"fullWord":6880},{"subwords":[4701,4714,4935,4942,5114,5234,5237,5680,5705,5950,6406,6492,6537,6541,6543,6651,6874,6881,6882,9110,12752,12785,18835,18844,18845,18981,18983],"fullWord":6882},{"subwords":[5705,5950,6495,6874,6883,6933,6935,6940,6955,6982,6983,7073,7103,12785,12787,12979,13008,15114,15135,15312,15610,15644,15659,15691,15694,15697,15748,18981,19060,19093,19101,19106,19243],"fullWord":6883},{"subwords":[5705,5706,5950,6500,6874,6879,6884,7210,12785,13055,13059,13082,16457,17340,17435,18066,18074,18981,18985,18991,18992,19580,19581,19876],"fullWord":6884},{"subwords":[5718,5721,5950,6509,6874,6879,6885,6886,6887,6893,6894,7790,7895,7897,13147,17472,21130],"fullWord":6887},{"subwords":[4697,5114,5123,5125,5709,5718,5950,6406,6874,6885,6888,7522,7782,12752],"fullWord":6888},{"subwords":[5709,5718,5950,5988,5989,6874,6885,6889,6940,6955,6961,7103,7107,7522,7788,7792,7855,7858,8043,12798,12979,15114,15141,15610],"fullWord":6889},{"subwords":[5716,5718,5721,5950,6543,6560,6564,6874,6879,6885,6891,6892,6893,7790,9135],"fullWord":6892},{"subwords":[1636,1817,1851,1852,2095,2106,5765,5950,6390,6520,6543,6568,6793,6868,6874,6895,6896,10414,10443,10504,10536,10539,10554,10748,10753,12695,12700,12812,12845],"fullWord":6895},{"subwords":[4714,4728,4739,4935,5114,5146,5756,5765,5950,6406,6537,6538,6541,6543,6546,6568,6569,6740,6764,6793,6874,6896,6897,6902,9110,9117,9125,10378,10414,10443,10530,10533,10536,10537,10539,10554,10780,12752,12812,12815,12837,12841,12845],"fullWord":6897},{"subwords":[6647,6650,6651,6654,6900,6901,9135,9447,12785,16801,16804,16903,16907,16915,17340,17345,17434,17435,17436,18947,19125],"fullWord":6901},{"subwords":[4728,5114,5146,5147,5756,5765,5950,6406,6740,6793,6874,6902,6903,10378,10443,10780,12745,12752,12837,12845],"fullWord":6903},{"subwords":[4728,4810,5114,5115,5146,5756,5765,5950,6406,6740,6793,6874,6902,6904,6940,6951,6955,7056,7103,10378,10443,10780,10878,10882,12752,12837,12839,12845,12979,15060,15078,15114,15131,15600,15603,15610,15621],"fullWord":6904},{"subwords":[252,337,349,828,6246,6254,6308,6328,6566,6621,6688,6803,6861,6896,6906,6907,6940,6941,7028,7103,9376,10121,10502,10675,10734,12672,12680,12812,12948,14780,15399,15617],"fullWord":6907},{"subwords":[6896,6898,6909,6910,6930,6932,9135,10833,10837,10854,12812,12822,12850,12851,13024,16837,17350,17354,17364,17370],"fullWord":6910},{"subwords":[6854,6911,6912,6913,16992,17149,17354,17472,21180,21182],"fullWord":6913},{"subwords":[6817,6914,6930,7014,10833,10942,13114,20885,20903,20913,20917],"fullWord":6914},{"subwords":[5705,5827,5950,5953,6446,6453,6874,6916,6925,11512,11574,11891,11916,12010,12011,12374,12522,12525,12574,12581,12785,12786,12866,12876,18595,18607,18981,19026,19032,19036,19038],"fullWord":6916},{"subwords":[4774,5114,5172,5176,5865,5950,5953,6406,6453,6458,6874,6917,6918,12493,12499,12745,12752,12876],"fullWord":6918},{"subwords":[4774,4810,5114,5115,5172,5176,5392,5865,5950,5953,6406,6453,6458,6467,6874,6917,6919,6940,6951,6955,7056,7067,7103,7112,12358,12493,12499,12548,12752,12876,12979,15060,15078,15114,15227,15238,15600,15603,15610],"fullWord":6919},{"subwords":[4728,4774,5114,5146,5172,5176,5756,5765,5865,5888,5950,5953,6406,6440,6453,6458,6740,6793,6874,6902,6917,6920,10378,10427,10443,10444,10780,10781,10822,12493,12499,12504,12752,12837,12838,12845,12876],"fullWord":6920},{"subwords":[5172,6854,6902,6917,6921,12493,12767,12837,12882,21154,21183,21184],"fullWord":6921},{"subwords":[4774,5114,5172,5176,5471,5507,5511,5523,5865,5950,5953,6406,6453,6458,6501,6874,6917,6923,6924,7004,7179,7180,12493,12499,12624,12752,12876,19580,19664,19676],"fullWord":6924},{"subwords":[254,474,488,495,693,6293,6344,6702,6717,6787,6861,6925,6926,10734,10741,10788,10897,12292,12293,12574,12575,12576,12672,12686,12785,18386,18408,18432,19036,19037],"fullWord":6926},{"subwords":[4728,5114,5146,5756,5765,5950,6406,6740,6793,6796,6874,6902,6928,6930,6931,10378,10443,10780,10833,12752,12837,12845,12846],"fullWord":6931},{"subwords":[4701,5114,5234,5237,5705,5950,6406,6874,6928,6933,6934,12752,12785,18981,18983,19060],"fullWord":6934},{"subwords":[5705,5950,6495,6874,6883,6933,6935,6940,6955,6982,6983,7073,7103,12785,12787,12979,13008,15114,15135,15312,15610,15644,15659,15691,15694,15697,15748,18981,19060,19093,19101,19106,19243],"fullWord":6935},{"subwords":[5765,5950,6512,6793,6874,6930,6936,10443,10833,12845,12846,12906,21304],"fullWord":6936},{"subwords":[5114,5200,5950,6406,6874,6937,6938,12752,12916,12933,13478,13569,14020,14130,14131,14237],"fullWord":6938},{"subwords":[245,252,269,299,817,828,5588,5718,5950,5976,5988,5989,6240,6308,6317,6328,6392,6874,6885,6940,6941,6942,6955,6961,7026,7103,7107,7375,7461,7788,7792,7855,12672,12680,12798,12979,14758,14762,15114,15141,15610],"fullWord":6942},{"subwords":[252,253,828,905,6308,6328,6330,6386,6388,6940,6941,6943,6944,7050,7052,7103,7140,12672,12674,12680,12683,12769,12770,13007,14939,14944,15673,15690,15864,15865,16103,17303,17334,17335,17472,17473,21212],"fullWord":6944},{"subwords":[51,183,232,252,828,1243,1366,1372,1383,2029,2030,2031,2058,2308,2315,2446,2448,4427,5303,6230,6308,6328,6868,6940,6941,6945,6951,7103,12672,12680,12959,14736,15561,15576,15600],"fullWord":6945},{"subwords":[1777,1851,1867,2058,2439,2446,5362,6390,6520,6541,6620,6621,6868,6940,6946,6951,7103,12700,12959,15402,15428,15576,15600],"fullWord":6946},{"subwords":[3638,3644,3647,3657,3893,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,5950,6406,6874,6940,6947,6948,6951,6955,7056,7103,12752,12965,12979,15021,15028,15060,15078,15114,15592,15600,15603,15610],"fullWord":6948},{"subwords":[3898,3900,5950,6008,6874,6940,6947,6949,6955,7103,12965,12979,15021,15114,15592,15610],"fullWord":6949},{"subwords":[3898,3902,3929,5950,6004,6023,6874,6879,6940,6947,6950,6955,6959,7070,7103,7106,12965,12971,12979,12982,13007,15021,15048,15114,15134,15592,15599,15610,15611,15676,16198,16298,16431,17316,17419],"fullWord":6950},{"subwords":[4810,5114,5115,5950,6406,6873,6874,6940,6951,6952,6955,7056,7103,12745,12746,12752,12979,15060,15078,15114,15600,15603,15610],"fullWord":6952},{"subwords":[4928,4931,6541,6620,6621,6940,6951,6953,7103,12745,15428,15600],"fullWord":6953},{"subwords":[1749,2072,2205,2300,2446,2721,2730,5950,6509,6868,6874,6940,6955,6956,7022,7103,7140,12696,12959,12979,13145,14995,15114,15576,15579,15610,15866,21189],"fullWord":6956},{"subwords":[4810,5114,5115,5196,5950,6406,6874,6928,6940,6951,6955,6957,7056,7103,12752,12762,12976,12979,15060,15078,15114,15600,15603,15605,15610,15642,15644,15645],"fullWord":6957},{"subwords":[5718,5950,5988,5989,6874,6885,6940,6955,6958,6961,6966,7103,7107,7788,7792,7826,7836,7855,12798,12979,15114,15141,15610,15644],"fullWord":6958},{"subwords":[5705,5706,5950,6004,6018,6495,6496,6874,6879,6940,6955,6959,6960,6982,6983,6984,6987,6997,7073,7074,7103,7106,7117,12785,12787,12979,12982,13007,13008,13011,15114,15134,15135,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16431,16457,17340,17342,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,19243],"fullWord":6960},{"subwords":[4697,4810,5114,5115,5123,5125,5351,5718,5950,5988,5989,6406,6874,6885,6940,6951,6955,6961,6962,7056,7103,7107,7782,7788,7792,7855,7856,12752,12798,12979,15060,15078,15114,15141,15600,15603,15610],"fullWord":6962},{"subwords":[5718,5950,5988,5989,6008,6874,6885,6940,6955,6961,6963,7103,7107,7788,7792,7855,12798,12979,15114,15141,15610,15612],"fullWord":6963},{"subwords":[5718,5721,5950,5988,5989,5992,6004,6874,6879,6885,6893,6940,6955,6959,6961,6964,7103,7106,7107,7109,7788,7789,7790,7792,7793,7855,7857,7867,12798,12799,12979,12982,13007,15114,15134,15141,15610,15611,15676,16431,17419],"fullWord":6964},{"subwords":[5705,5718,5950,5988,5989,5990,6495,6874,6885,6940,6955,6961,6965,6982,6983,7073,7103,7107,7540,7788,7792,7855,7874,8056,12785,12787,12798,12979,13008,15114,15135,15141,15312,15610,15691,15694,15748,18981,18993,19093,19101,19243],"fullWord":6965},{"subwords":[6885,6933,6940,6966,6967,6982,7103,7107,7826,7836,7874,8056,12785,13008,15644,15659,15691,15697,18993,19000,19060,19093,19106],"fullWord":6967},{"subwords":[6593,6621,6651,6925,6940,6968,6982,7103,7114,9257,9325,9335,9338,9340,9360,9400,12463,12469,12513,12548,12574,12785,13008,15458,15504,15691,18894,18945,19036,19093,19105,19292],"fullWord":6968},{"subwords":[4810,5114,5115,5355,5950,6406,6874,6940,6951,6955,6969,6970,7056,7103,9852,12752,12979,15060,15078,15114,15600,15603,15610],"fullWord":6970},{"subwords":[5950,6008,6874,6940,6955,6969,6971,7103,9852,12979,15114,15610],"fullWord":6971},{"subwords":[252,828,869,6308,6324,6328,6803,6861,6864,6940,6941,6973,6974,6975,7103,7111,10136,10734,10738,11173,11265,11276,11303,11863,11963,12672,12680,12948,14808,15564,15627],"fullWord":6975},{"subwords":[252,254,570,828,869,911,1020,6308,6324,6328,6332,6344,6864,6940,6941,6973,6974,6976,6982,7042,7103,7111,11265,11276,11320,11361,11814,11989,12010,12672,12680,12686,12785,13008,14754,14808,14898,15564,15627,15691,18389,18432,18449,18463,19026,19093,19094,19216],"fullWord":6976},{"subwords":[4699,4763,4810,4818,5114,5115,5163,5165,5213,5827,5950,6406,6446,6874,6940,6951,6955,6973,6977,7056,7103,7111,11539,11605,11831,11833,11970,12752,12979,15060,15078,15114,15202,15600,15603,15610,15627,15632],"fullWord":6977},{"subwords":[5827,5950,6008,6446,6874,6940,6955,6973,6978,7103,7111,11539,11970,12979,15114,15132,15202,15610,15627,15632],"fullWord":6978},{"subwords":[3679,3693,3732,3911,6621,6629,6872,6940,6973,6979,7103,7111,11623,11854,12965,15480,15592,15627],"fullWord":6979},{"subwords":[5950,5984,6004,6005,6409,6419,6874,6879,6940,6955,6959,6981,7057,7061,7103,7106,12979,12982,13007,15098,15101,15114,15134,15610,15611,15676,16319,16340,16425,16431,17419],"fullWord":6981},{"subwords":[5705,5706,5950,6004,6018,6495,6496,6874,6879,6940,6955,6959,6960,6982,6983,6984,6987,6997,7073,7074,7103,7106,7117,12785,12787,12979,12982,13007,13008,13011,15114,15134,15135,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16431,16457,17340,17342,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,19243],"fullWord":6984},{"subwords":[6621,6636,6637,6647,6651,6654,6900,6940,6982,6986,6987,7103,7117,9135,9409,9447,12785,13007,13008,13011,15458,15460,15504,15507,15691,15700,16801,16889,16907,17340,17429,17435,17722,17881,18945,18946,18947,19093,19113,19114,19292,19294,19313],"fullWord":6986},{"subwords":[6940,6973,6980,6989,6990,7008,7009,7103,7111,7194,7206,12872,13007,13051,13052,15627,15638,15806,15820,17451,18103,18112,18155,19580,19581],"fullWord":6990},{"subwords":[6940,6991,7103,7123,7140,8857,8920,9032,15386,15734,20689,20712,21010,21202],"fullWord":6991},{"subwords":[973,5950,6039,6479,6874,6879,6992,6993,6994,12672,12674,12684,13029,15904,15907,16270,16291,17334,17337,17434],"fullWord":6993},{"subwords":[5950,6039,6479,6874,6879,6994,6995,17434],"fullWord":6995},{"subwords":[6810,6896,6898,6996,9135,10893,12812,12822,16837,16839,16903,17350,17352,17354,17364,17434],"fullWord":6996},{"subwords":[5705,5706,5950,6004,6018,6495,6496,6874,6879,6940,6955,6959,6960,6982,6983,6984,6987,6997,7073,7074,7103,7106,7117,12785,12787,12979,12982,13007,13008,13011,15114,15134,15135,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16431,16457,17340,17342,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,19243],"fullWord":6997},{"subwords":[6885,6998,7874,7875,7886,8175,8731,8892,8951,9026,12785,13046,13059,18743,18759,18796,18991,18993,19151,19418,19580,19583],"fullWord":6998},{"subwords":[4728,5114,5146,5471,5472,5523,5756,5765,5950,6406,6501,6740,6793,6821,6824,6825,6874,6902,6999,7000,7153,10378,10443,10470,10780,10906,12752,12837,12845,19580],"fullWord":7000},{"subwords":[5765,5950,6793,6812,6821,6824,6842,6874,6940,6955,6999,7001,7008,7103,7153,7194,7196,10443,10470,10882,10922,11029,12845,12979,13051,15114,15610,15621,15706,15777,15800,19580],"fullWord":7001},{"subwords":[6821,6854,6915,6999,7002,7164,7167,19580,21193],"fullWord":7002},{"subwords":[5172,5188,5221,5507,5522,5523,5524,6917,6922,6923,7004,7005,7152,7179,7180,7182,12493,12501,12503,12560,12597,12888,17323,17383,17445,18117,19580,19581,19664],"fullWord":7005},{"subwords":[6925,6927,7006,7007,7179,12560,12574,12591,12597,12659,12663,12785,12888,13055,13059,13082,17278,17281,17340,17383,17435,18005,18117,18991,18992,19036,19057,19434,19452,19580,19581,19780],"fullWord":7007},{"subwords":[6940,6982,6985,7008,7010,7103,7120,7194,8857,8892,8906,9012,9026,12785,13008,13009,13051,13059,15386,15691,15722,15858,15859,18743,18749,18759,18777,18789,18991,19093,19155,19468,19580],"fullWord":7010},{"subwords":[1106,5629,5950,6092,6409,6874,7011,7012,12672,13087,19992],"fullWord":7012},{"subwords":[399,472,1106,5765,5950,6734,6793,6861,6874,7011,7013,10285,10324,10333,10443,10471,10472,10488,10734,10935,12672,12845,13087,13088,19923,19924,19986,20014,20250,20251],"fullWord":7013},{"subwords":[4728,4865,5114,5146,5271,5756,5765,5950,6406,6507,6740,6756,6793,6817,6818,6874,6902,7014,7015,7240,10378,10443,10490,10780,10942,10944,12752,12837,12845,13110,13111,13114,20524,20566,20875,20883,20885,20886],"fullWord":7015},{"subwords":[5765,5950,6507,6756,6793,6817,6819,6874,6940,6955,7014,7016,7103,7123,10443,10882,10942,10945,12845,12979,13110,13114,15114,15128,15610,15621,15734,15739,20875,20885,20887,20933],"fullWord":7016},{"subwords":[5950,6543,6621,6622,6661,6663,6664,6874,6940,6955,7017,7018,7103,9384,12979,15114,15126,15373,15446,15610],"fullWord":7018},{"subwords":[6661,6854,6896,7017,7019,7021,10953,12812,12824,13143],"fullWord":7019},{"subwords":[6560,6593,6661,6885,7017,7020,7604,7821,9257,9360,12474,12509],"fullWord":7020},{"subwords":[5950,6004,6509,6874,6879,6940,6955,6959,7022,7023,7103,7106,7140,12979,12982,13007,13145,13146,13147,15114,15134,15610,15611,15676,15690,15866,15867,16431,17419,17472,21130,21189,21190,21212],"fullWord":7023},{"subwords":[230,231,796,810,828,905,2941,3001,3017,6308,7025,15880,15888,16142,16150],"fullWord":7025},{"subwords":[337,340,349,359,828,860,905,6246,6249,6254,6259,6308,6566,6621,6636,6688,6689,7028,7029,9135,9376,9409,10121,10125,10502,10503,10675,10676,14780,14783,15399,15400,15931,15942,16028,16889,17722],"fullWord":7029},{"subwords":[817,828,869,871,4472,4475,4516,4595,4607,4810,4818,4819,5318,5342,5588,5658,5827,5976,6230,6231,6232,6285,6286,6308,6317,6318,6324,6325,6392,6406,6446,7030,7031,7056,11107,11115,11120,11276,11286,11437,11438,11539,11605,14736,14808,14961,14975,15060,15114,15202],"fullWord":7031},{"subwords":[817,828,869,872,5588,5827,5976,6008,6285,6308,6317,6319,6324,6326,6392,6446,7030,7032,11276,11286,11437,11539,14808,14872,14975,14983,14986,15114,15202],"fullWord":7032},{"subwords":[817,825,828,869,883,905,906,5588,5599,5827,5845,5976,5977,6285,6287,6308,6317,6321,6324,6327,6392,6395,6446,7030,7033,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14881,14975,14978,15114,15134,15202,15224,15904,15906,15973,15978,16270,16278,16286,16419,16431,17161],"fullWord":7033},{"subwords":[230,596,796,828,2869,2941,6293,6308,7034,7035,12270,14821],"fullWord":7035},{"subwords":[93,114,121,796,817,828,2785,2869,2883,2885,2941,2954,2977,4069,5588,5595,5856,5976,6210,6212,6293,6308,6311,6317,6392,6453,6467,7034,7036,12224,12229,12270,12319,14717,14821,15021,15114],"fullWord":7036},{"subwords":[118,252,796,809,828,2869,2941,3777,3791,3913,6293,6308,6328,6940,6941,7034,7037,7103,12270,12271,12548,12672,12680,12965,12966,14821,15568,15592],"fullWord":7037},{"subwords":[796,810,828,905,2869,2906,2941,3001,6293,6302,6308,7034,7038,12270,12273,14821,15880,15986,16134,16142,16150],"fullWord":7038},{"subwords":[828,867,868,905,950,6293,6302,6308,7039,7040,12277,12279,14821,14840,14845,15986,16007,17227],"fullWord":7040},{"subwords":[732,735,762,817,828,5588,5956,5976,6308,6317,6392,7041,13268,13276,13286,13294,13439,13455,13569,13577,14262,14278,14851,14852,14979,15114,15248],"fullWord":7041},{"subwords":[254,255,817,828,911,1009,5588,5620,5705,5976,5982,6008,6055,6308,6317,6319,6332,6344,6347,6392,6399,6485,7042,7043,7073,14754,14756,14872,14898,14901,14903,14983,15114,15135,15312,15748,18449,18453,18541,18554,18652,18653,19243],"fullWord":7043},{"subwords":[200,828,905,1053,1060,6230,6236,6308,6316,7045,7046,7047,7049,7152,7194,7206,14736,14751,15893,18155,19846,19868,19871],"fullWord":7047},{"subwords":[817,828,1060,5588,5595,5627,5976,6293,6308,6317,6366,6392,6453,6467,7045,7048,7179,7194,12229,12319,14821,15114,15777,15821,15822,19847,19866],"fullWord":7048},{"subwords":[227,817,828,1196,4516,4578,4595,4607,4613,4700,4706,4810,4814,5337,5430,5567,5570,5588,5976,6230,6231,6232,6239,6308,6317,6318,6386,6392,6406,6509,7050,7051,7056,7140,14736,14939,14940,14961,14966,15060,15114,15864,15866,21068,21071,21097,21099],"fullWord":7051},{"subwords":[817,825,828,867,868,905,906,950,953,5588,5599,5976,5977,6265,6268,6269,6271,6308,6317,6321,6392,6395,7053,7054,9852,9854,14798,14802,14881,15114,15134,15904,15906,15939,16270,16286,16419,16431],"fullWord":7054},{"subwords":[227,817,828,867,1196,5588,5976,6239,6265,6268,6270,6308,6317,6386,6392,6509,7050,7053,7055,7140,9852,9865,14798,14939,15114,15864,15866,21047,21071,21097,21099],"fullWord":7055},{"subwords":[5691,5694,5698,5765,5984,6189,6196,6409,6416,6509,6510,6743,6746,6854,6855,7057,7059,7140,10383,10388,10391,10495,11065,11074,15098,15102,15107,15114,15130,15201,15866],"fullWord":7059},{"subwords":[5705,5706,5984,6018,6046,6409,6419,6420,6484,6489,6491,7057,7061,7062,7073,7074,15098,15101,15114,15134,15135,15290,15306,15312,15748,16319,16340,16425,16431,16457,17823,17840,18576,18588,18658,19240,19242,19243],"fullWord":7062},{"subwords":[5984,6409,6512,7057,7063,15098,15114,21251],"fullWord":7063},{"subwords":[3253,5856,6453,6467,7064,8540,8552,15021,15114],"fullWord":7064},{"subwords":[5827,5846,6446,6451,6453,6467,7065,7169,7171,7179,7194,11512,11534,11539,15114,15202,15777,15806,15821,15822,19866],"fullWord":7065},{"subwords":[6453,6467,6469,6509,6512,7066,7140,15114,15866,21120,21255],"fullWord":7066},{"subwords":[5984,6008,6016,6409,6419,7057,7060,7061,7068,7069,15098,15101,15114,15116,15117,15134,16319,16340,16425,16428,16431],"fullWord":7069},{"subwords":[3898,3902,3929,5950,6004,6023,6874,6879,6940,6947,6950,6955,6959,7070,7103,7106,12965,12971,12979,12982,13007,15021,15048,15114,15134,15592,15599,15610,15611,15676,16198,16298,16431,17316,17419],"fullWord":7070},{"subwords":[5918,5950,5953,5955,6000,6004,6453,6463,6467,6468,6874,6879,6940,6955,6959,7067,7072,7103,7106,12506,12548,12556,12560,12561,12876,12879,12979,12982,13007,15114,15134,15238,15610,15611,15676,16391,16431,17272,17383,17419],"fullWord":7072},{"subwords":[349,359,828,905,6254,6259,6308,6621,6636,7076,7077,9135,9376,9409,16028,16889,17722],"fullWord":7077},{"subwords":[349,361,828,6254,6260,6308,6386,6621,6635,7050,7076,7078,7140,9376,14877,14939,15864],"fullWord":7078},{"subwords":[326,349,361,828,854,4460,4578,4900,5337,5430,6230,6254,6260,6308,6386,6621,7050,7079,7140,9376,14736,14776,14939,15428,15864,21068,21140],"fullWord":7079},{"subwords":[4714,4810,4935,4947,5023,5028,5351,5988,6406,6537,6543,6560,6621,6622,6623,7056,7080,7081,7087,7617,7997,8001,9384,9385,15060,15114,15141,15428,15433,15437,15446,15461],"fullWord":7080},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5865,5996,6406,6453,6458,6467,6537,6543,6548,6593,6598,6599,6601,6602,6604,6621,6622,6623,7056,7081,7082,9250,9384,9385,12358,15060,15073,15114,15175,15227,15428,15433,15446,15491],"fullWord":7082},{"subwords":[6008,6016,6472,6543,6621,6622,6624,6625,6626,6636,7083,7084,7085,9135,9384,9389,9409,15114,15134,15446,15448,15526,15528,16431,16437,16889,16890,17722],"fullWord":7084},{"subwords":[5735,5984,5995,6409,6512,6543,6621,6622,7057,7086,7100,9384,15098,15114,15446,21251],"fullWord":7086},{"subwords":[6560,6562,6621,6639,6651,7087,7088,7575,7628,7630,7637,8004,8035,8688,15458,15461,15464,19280],"fullWord":7088},{"subwords":[4947,6560,6621,7087,7089,7617,7997,15428,15461,15468],"fullWord":7089},{"subwords":[6577,6583,6621,6636,7091,7092,9135,9152,9155,9409,15477,15479,16834,16889,17722],"fullWord":7092},{"subwords":[6577,6584,6621,6854,7091,7093,7140,9152,9157,10583,15477],"fullWord":7093},{"subwords":[5894,5988,5996,6421,6453,6467,6543,6560,6593,6601,6604,6608,6621,6622,7087,7094,7493,7604,8001,8015,9250,9384,15114,15141,15173,15175,15234,15446,15461,15494],"fullWord":7094},{"subwords":[6560,6593,6621,7087,7095,7140,7143,7604,8015,15461,15494,21144],"fullWord":7095},{"subwords":[6621,6636,7096,7097,9135,9396,9399,9409,9941,10041,15534,15537,16889,16899,16903,16954,16985,17722],"fullWord":7097},{"subwords":[6621,6636,7096,7098,7140,9135,9396,9399,9409,10041,15534,15538,16889,16954,16992,17722,21212],"fullWord":7098},{"subwords":[6621,6896,6940,7099,7103,12812,15617,20171,20250],"fullWord":7099},{"subwords":[6621,6670,6674,7100,7101,7102,7140],"fullWord":7102},{"subwords":[3906,3909,6940,6969,6972,7103,7104,7105,12965,12971,13007,15592,15593,15597,15599,17316,17319],"fullWord":7105},{"subwords":[6885,6890,6894,6940,7103,7107,7108,7140,7870,7895,8043,8199,12991],"fullWord":7108},{"subwords":[3679,3685,3693,3701,6621,6872,6896,6908,6940,7103,7110,10760,10767,12812,12965,15592,15617],"fullWord":7110},{"subwords":[5172,5188,5216,5221,6917,6922,6940,6951,6954,7103,7112,7113,12493,12501,12548,12560,13007,15600,15609,17323,17383],"fullWord":7113},{"subwords":[6925,6927,6940,6982,6987,7103,7114,7115,7117,12548,12560,12574,12591,12785,13007,13008,13011,15691,15700,17276,17278,17340,17383,17429,17435,19036,19057,19093,19105,19113],"fullWord":7115},{"subwords":[6940,6982,6987,7103,7117,7118,12785,13007,13008,13011,15691,15700,17340,17345,17429,17433,17434,17435,17436,19093,19113,19125],"fullWord":7118},{"subwords":[6940,6982,6987,6988,7103,7117,7119,7140,12785,13007,13008,13011,15690,15691,15700,17340,17346,17429,17435,17472,17933,18018,19093,19113,19122,19186,19195,19347,19348,19377,19573,19574,21212],"fullWord":7119},{"subwords":[6940,6982,6985,6987,7103,7116,7117,7120,7121,8857,8874,8879,8887,8892,8901,8934,8935,12785,12810,13007,13008,13009,13011,15386,15691,15700,16701,16704,17340,17429,17435,18743,18749,18777,19093,19113,19123],"fullWord":7121},{"subwords":[6940,6982,6985,6988,7103,7120,7122,7140,8857,8892,12785,13008,13009,15386,15691,18743,18749,18777,18806,19093,19122,19186,19347,19377,19573],"fullWord":7122},{"subwords":[6940,7103,7123,7124,7125,12548,12560,12606,12610,13007,13119,13124,15734,15744,17284,17383,17464,17469,18273,20897,20944],"fullWord":7125},{"subwords":[6940,7103,7123,7126,7140,13007,15690,15734,15744,17464,17472,21010,21202,21211,21212],"fullWord":7126},{"subwords":[6940,7103,7123,7127,7140,15734,21010,21202],"fullWord":7127},{"subwords":[5950,5953,6453,6467,6512,6874,6940,6955,7067,7103,7128,7129,12548,12876,12979,15114,15238,15610,21255,21260,21297,21299],"fullWord":7129},{"subwords":[828,1060,6240,6308,6683,6821,7026,7045,7130,7131,7157,7194,7196,7293,7375,8099,8132,10109,10981,14758,15790,19837],"fullWord":7131},{"subwords":[6621,6636,6637,6647,6651,6654,7133,7134,7194,7206,9135,9409,9447,15458,15460,15852,15858,15861,16801,16889,16907,16917,17722,17881,18083,18085,18155,18947,19468,19470],"fullWord":7134},{"subwords":[6621,6651,7133,7135,7140,7194,7207,15458,15858,19377,19468,19471,21226],"fullWord":7135},{"subwords":[7024,7136,7137,7194,7206,14403,14418,14551,15747,15806,15815,15818,15820,17687,18103,18114,18135,18155,19624,19628,19825],"fullWord":7137},{"subwords":[7136,7138,7140,7178,7194,7207,14410,15747,15806,15815,19624,21224],"fullWord":7138},{"subwords":[254,828,905,911,918,1060,6308,6332,6334,6339,6344,6354,6372,6373,7042,7044,7045,7049,7139,7194,7206,14754,14757,14898,14912,15852,15858,15861,16041,17773,18155,18172,18449,18472,18508,19381,19412,19413,19468,19470,19868,19871],"fullWord":7139},{"subwords":[6008,6016,6474,6509,7140,7141,7142,15114,15133,15134,15866,15867,16431,21130,21212],"fullWord":7142},{"subwords":[6560,6593,6621,7087,7095,7140,7143,7604,8015,15461,15494,21144],"fullWord":7143},{"subwords":[716,828,6293,6308,6386,7050,7140,7144,12257,12282,12311,13239,13286,13424,14258,14410,14821,14851,14939,15864,21064,21075],"fullWord":7144},{"subwords":[1560,2505,2517,4618,5445,5471,5632,6406,6501,7145],"fullWord":7145},{"subwords":[4263,4268,4269,4278,4639,4651,5455,5457,5471,5489,6406,6501,7146,7147,19595],"fullWord":7147},{"subwords":[4728,5466,5467,5471,5472,5756,5765,6406,6501,6740,6821,6824,6825,7148,7153,10378,10470],"fullWord":7148},{"subwords":[5466,5467,5471,5485,6406,6501,7149,7150],"fullWord":7150},{"subwords":[4826,4849,5471,5478,5485,5488,6406,6408,6501,6504,7149,7151,7152,7159,7210,7211,7460,18066,18067,19876,19877],"fullWord":7151},{"subwords":[4728,4731,5471,5472,5691,5756,5765,5792,6406,6409,6412,6416,6501,6740,6743,6821,6824,6825,7153,7154,10378,10383,10470],"fullWord":7154},{"subwords":[5691,5765,5984,6083,6409,6416,6475,6743,6746,6821,6824,7057,7153,7155,7194,7196,10383,10388,10470,11029,15098,15107,15114,15136,15777,15800],"fullWord":7155},{"subwords":[5471,5485,5709,6406,6501,7149,7158],"fullWord":7158},{"subwords":[5471,5485,6406,6501,7149,7160,7161],"fullWord":7161},{"subwords":[6008,7162,7194,8552,8583,8945,15114,15777,15780],"fullWord":7162},{"subwords":[111,796,828,1060,2813,2815,2941,2964,2971,3071,4312,4341,6308,6821,7045,7163,7194,7196,10072,19837],"fullWord":7163},{"subwords":[4728,4744,5471,5472,5492,5756,5765,5780,6406,6430,6501,6740,6821,6824,6825,7153,7164,7165,10378,10470],"fullWord":7165},{"subwords":[5765,5780,6430,6821,6824,7153,7164,7166,7194,7196,10470,11029,15114,15777,15800],"fullWord":7166},{"subwords":[1636,2004,2567,5765,5782,5827,5846,6446,6821,6822,6824,6835,7153,7168,7169,10470,10961,12110,19612],"fullWord":7168},{"subwords":[5827,5845,5846,5847,6446,6451,6452,7169,7171,7172,7173,7194,7206,7210,11539,12152,12154,15114,15134,15202,15224,15777,15782,15806,15820,15840,16431,16446,18066,18071,18103,18150,18155,19876,19880],"fullWord":7172},{"subwords":[5705,5706,5827,5845,5846,5847,6446,6500,7169,7173,7174,7175,7210,11574,12152,12177,12184,12188,16457,17203,17830,18066,18074,18103,18595,19876],"fullWord":7175},{"subwords":[5827,5830,5846,6446,6451,6465,6543,6621,6622,6629,7169,7171,7176,7194,9384,11539,11743,15114,15202,15446,15480,15481,15777,15806],"fullWord":7176},{"subwords":[6560,6593,7177,7179,7184,7604,7759,8145,8151,11606,11649,11697,11711,12104,12443],"fullWord":7177},{"subwords":[4774,5466,5467,5471,5507,5511,5865,6406,6453,6458,6501,7179,7180,7181,12624,19676],"fullWord":7181},{"subwords":[1060,6240,6293,6296,6366,6683,6702,6821,6838,7157,7179,7183,7293,7759,8132,8151,10109,10981,11001,11012,12230,19600],"fullWord":7183},{"subwords":[4276,6560,6593,7179,7184,7185,7604,7759,8151,9207],"fullWord":7185},{"subwords":[7159,7179,7186,7759,7760,8151,8160,17292,18117,18125],"fullWord":7186},{"subwords":[4774,5471,5489,5507,5511,5516,5865,6406,6453,6458,6501,7179,7180,7187,7188,9836,12624,12640,19595,19676],"fullWord":7188},{"subwords":[6453,6467,7179,7187,7189,7194,9836,9852,9855,12640,15114,15777,15821,15822,19595,19866],"fullWord":7189},{"subwords":[4774,5471,5507,5511,5865,6406,6453,6458,6501,7179,7180,7192,12624,12651,19676],"fullWord":7192},{"subwords":[5765,6453,6821,6824,7153,7179,7193,10470,11008,12651],"fullWord":7193},{"subwords":[6543,6621,6622,6626,6636,7085,7194,7195,7206,7210,9135,9384,9389,9409,15114,15134,15446,15526,15777,15782,15840,16431,16437,16796,16889,16890,17722,18066,18071,18083,18150,18155,19876,19880],"fullWord":7195},{"subwords":[4728,4810,5471,5472,5756,5765,6406,6501,6740,6821,6824,6825,7056,7075,7153,7194,7196,7197,10378,10470,11029,11030,15060,15114,15773,15777,15778,15800,15801],"fullWord":7197},{"subwords":[5765,6008,6821,6824,7153,7194,7196,7198,10470,11029,11031,15114,15777,15780,15800,15802],"fullWord":7198},{"subwords":[5950,6008,6874,6940,6955,7008,7103,7194,7200,7201,12979,13051,15114,15610,15706,15777,15780,19580],"fullWord":7201},{"subwords":[6940,7008,7009,7103,7194,7200,7202,7206,13007,13051,13052,17451,18155,19580,19581],"fullWord":7202},{"subwords":[4810,5471,6008,6406,6501,7056,7075,7194,7203,15060,15114,15773,15775,15777,15778,15780],"fullWord":7203},{"subwords":[6940,7008,7103,7123,7194,7200,7204,13051,15734,19580],"fullWord":7204},{"subwords":[6512,7194,7206,7208,7209,7210,7229,7233,15114,15134,15777,15782,15840,16431,18066,18071,18078,18150,18155,19876,19880,21268],"fullWord":7209},{"subwords":[6031,6039,6042,6409,6419,6479,6480,7210,7212,7213,7216,7222,16319,16342,18066,18073,19876,19878,19882],"fullWord":7213},{"subwords":[5765,6039,6479,6821,6824,6827,6845,7153,7156,7210,7214,7215,7216,7222,10453,10470,16365,16367,17128,17130,18066,18073,19876,19882],"fullWord":7215},{"subwords":[5765,6543,6568,6572,6767,6821,6824,6827,6845,7153,7156,7210,7214,7217,7218,9135,9416,10414,10415,10470,10536,10539,10551,10552,10554,16365,17128,18066,18083,19876],"fullWord":7218},{"subwords":[6821,6845,7217,7219,7222,9135,16903,18083],"fullWord":7219},{"subwords":[6560,6564,6593,6619,7159,7179,7184,7220,7604,7611,7759,7760,8151,8160,9135,9307,16815,16858,16866,17292,18083,18084,18117,18125,19885],"fullWord":7220},{"subwords":[6593,6619,6899,7179,7221,9135,9257,9260,9307,9360,9366,9369,12560,12597,12888,13048,16858,17383,18083,18117,19580,19581],"fullWord":7221},{"subwords":[4826,4849,5471,5478,6039,6406,6408,6479,6501,6504,7152,7210,7211,7216,7222,7223,18062,18066,18067,18073,19876,19877,19882],"fullWord":7223},{"subwords":[6039,6479,7194,7206,7210,7216,7222,7224,15114,15134,15777,15782,15840,15841,15849,16431,16432,18066,18071,18072,18073,18150,18155,18158,19876,19880,19881,19882,19886],"fullWord":7224},{"subwords":[6039,6479,7210,7216,7222,7225,18066,18073,19876,19882],"fullWord":7225},{"subwords":[3429,4238,4241,4375,4388,4394,6647,6651,6654,7226,9100,9135,9447,16178,16265,16769,16801,16907,16917,18083,18085,18823,18830,18947],"fullWord":7226},{"subwords":[5705,5765,6443,6543,6568,6573,6651,6782,6784,6821,6824,6846,7153,7227,10394,10414,10460,10470,10536,10539,10552,10553,10554,10557,10691,10694,11050,18844,18863,18866,19605,19897],"fullWord":7227},{"subwords":[5705,7073,7194,7228,15114,15135,15312,15748,15777,15858,19243,19356,19468],"fullWord":7228},{"subwords":[6409,6419,6512,6513,7210,7212,7229,7231,7232,7233,16319,18066,18078,19876,19878,21251,21252,21268],"fullWord":7232},{"subwords":[6821,6845,7217,7234,7235,9135,18083],"fullWord":7235},{"subwords":[6560,6593,7179,7184,7236,7604,7759,8151,21269,21276,21315],"fullWord":7236},{"subwords":[5471,6406,6501,6512,7229,7230,7237,7238,21249],"fullWord":7238},{"subwords":[6512,7210,7229,7233,7237,7239,18066,18078,19876,21268],"fullWord":7239},{"subwords":[6854,7241,10788,10792,10897,12771,12785,18986,18989,19186],"fullWord":7241},{"subwords":[17,30,269,270,1219,1243,1246,1247,1256,1515,1560,1604,4427,4618,5632,5707,7242,7243,7253],"fullWord":7243},{"subwords":[17,25,269,817,1219,1256,1366,1367,1377,1386,1535,1604,1696,2308,2317,2319,5588,5632,5976,5988,7242,7244,7375,7377,7461,7900,14758,14762,14995,15141],"fullWord":7244},{"subwords":[17,43,269,385,399,1219,1220,1256,1257,1301,1510,1604,1636,1895,5632,7242,7245,7248,7293,7298,7477,7676,10061,10109,10324,10398],"fullWord":7245},{"subwords":[25,51,299,1256,1366,1367,2029,2030,2042,2079,2308,2319,2446,7242,7246,7375,7377,7380,7771,7900,12680,12959,14758,15576],"fullWord":7246},{"subwords":[30,43,269,270,385,399,1243,1246,1247,1256,1257,1296,1301,1302,1515,1560,1604,1636,1900,1929,1938,4427,4466,4587,4601,4618,4728,5707,5756,7242,7248,7249,7253,7293,7298,7477,7478,7649,7650,7676,10061,10090,10093,10109,10324,10327,10378,10398],"fullWord":7249},{"subwords":[43,45,67,269,280,385,392,399,407,1256,1257,1258,1266,1301,1306,1422,1425,1604,1617,1636,1918,7242,7248,7250,7252,7260,7293,7298,7300,7316,7396,7477,7486,7676,10061,10071,10109,10115,10323,10324,10360,10398,10412,15872,15910,15912,15942,15948,16270,16274,16999,17003],"fullWord":7250},{"subwords":[148,149,269,270,4438,4590,5659,5707,7253,7254],"fullWord":7254},{"subwords":[148,151,269,270,817,4438,4516,4517,4590,4607,4810,5310,5340,5351,5588,5659,5666,5707,5976,5988,7253,7255,7375,7383,7461,7907,7908,7909,14736,14758,14762,14763,14961,14962,15060,15141],"fullWord":7255},{"subwords":[4578,6230,6240,6386,6683,6730,6854,7253,7256,7293,7447,7649,7654,10090,10108,10109,10304],"fullWord":7256},{"subwords":[269,270,1009,4551,5620,5707,5709,6055,7253,7257,7267,7269,7270,7416,7417,7418,7540,18339,18342,18343,18541],"fullWord":7257},{"subwords":[93,269,286,337,399,422,2788,2813,3120,3402,7259,7293,7298,7477,7585,7647,9079,10072,10073,10109,10324,10398,10414,10518,10536],"fullWord":7259},{"subwords":[269,270,4595,5707,6230,6231,6240,6406,7253,7261,7262,7263],"fullWord":7263},{"subwords":[269,817,828,5588,5976,5988,6240,6308,6317,6392,7026,7261,7262,7264,7375,7461,14758,14762,15114,15141],"fullWord":7264},{"subwords":[269,280,5703,6240,6245,7261,7262,7265,7266,7396,15904,15910,15912,16270],"fullWord":7265},{"subwords":[269,279,280,817,825,905,906,5588,5599,5709,5715,5976,5977,5988,5992,7267,7269,7271,7272,7273,7280,7375,7391,7396,7461,7463,7939,14758,14762,14764,14773,14881,15141,15910,15912,15914,15918,16026,16270,16286,16419],"fullWord":7272},{"subwords":[269,270,5707,5709,7253,7267,7269,7270,7274],"fullWord":7274},{"subwords":[269,817,5588,5709,5976,5988,7267,7269,7271,7275,7375,7461,14758,14762,15141],"fullWord":7275},{"subwords":[269,399,5709,7267,7269,7276,7293,7298,7477,10109,10324,10398],"fullWord":7276},{"subwords":[287,288,7267,7277,7283,7352,7578,7604,12230],"fullWord":7277},{"subwords":[504,596,7267,7268,7278,7317,7352,11127,11213,12230,12244],"fullWord":7278},{"subwords":[269,528,5709,7267,7269,7279,7317,7323,7352,7489,7493,11127,11128,11213,11218,11223,11437,11446,11487,11512,12229,12230,12244,12245],"fullWord":7279},{"subwords":[269,1009,1196,5620,6055,7281,7289,7416,7417,7447,7540,7637,18342,18347,18541,18844,21097,21135,21136],"fullWord":7281},{"subwords":[269,270,287,326,327,605,4492,4500,4502,4605,4714,4720,4774,4890,4898,4935,4947,4985,4988,4993,5707,5865,7253,7283,7284,7493,7604,9103,12229,12230],"fullWord":7284},{"subwords":[269,287,349,622,817,5588,5591,5595,5894,5976,5988,5996,7283,7285,7375,7461,7493,7604,7918,8015,9376,9378,9384,12229,12230,12319,14758,14762,14784,14821,14832,14833,14838,15141,15142,15150,15154,15173,15175,15234,15461,15494],"fullWord":7285},{"subwords":[287,337,416,426,716,7282,7283,7286,7293,7447,7585,7604,9288,9293,10109,10120,10304,10308,10637,10662,11067,12230,12238,12311,12438,21058,21144],"fullWord":7286},{"subwords":[287,290,634,647,691,693,700,704,711,7283,7287,7288,7289,7292,7396,7416,7423,7561,7562,7604,7611,7635,7637,7745,7746,9307,9318,9325,9447,12230,12233,12463,12471,15910,15936,15986,16001,16041,16047,16048,16815,16858,16866,16907,17211,17255,17732,17742,17870,18342,18345,18347,18408,18410,18416,18428,18894,18901,18907,18919,18947],"fullWord":7288},{"subwords":[169,269,270,326,327,1009,4551,4714,4890,4935,4942,4947,5620,5680,5707,6055,7253,7289,7290,7416,7417,7418,7540,7637,9103,18339,18342,18347,18541,18835,18844,18845],"fullWord":7290},{"subwords":[269,349,817,911,1009,5588,5620,5976,5982,5988,6055,7289,7291,7375,7416,7417,7461,7540,7628,7637,7946,7972,7990,8035,9376,9382,9384,14758,14762,14898,14901,15141,15150,15312,15461,15542,15748,18342,18347,18449,18453,18541,18554,18844,18847,18855,18941,19261,19280],"fullWord":7291},{"subwords":[411,7293,7294,7296,7297,7447,10109,10301,10304],"fullWord":7297},{"subwords":[269,375,399,411,412,596,598,620,625,5745,7293,7294,7298,7299,7477,7493,7494,7674,7680,10109,10174,10324,10344,10398,12229,12230],"fullWord":7299},{"subwords":[269,270,399,442,4466,4601,4728,4744,5707,5756,5780,7253,7293,7298,7301,7302,7477,7478,7649,7650,10090,10093,10102,10109,10324,10327,10343,10378,10398,10400],"fullWord":7302},{"subwords":[269,297,399,442,450,464,1196,5780,7293,7298,7301,7303,7310,7447,7477,10109,10304,10324,10343,10398,10400,10495,11065,21050,21097,21110],"fullWord":7303},{"subwords":[337,442,2813,2826,2831,3402,7293,7301,7304,7585,7590,9152,10072,10109,10576],"fullWord":7304},{"subwords":[299,442,478,629,7293,7301,7305,7361,7764,10109,10727,10741,10793,10794,10826,12230,12509,12856],"fullWord":7305},{"subwords":[299,442,481,7293,7301,7306,7312,7361,7365,7708,7764,10109,10182,10793,10864,12856,12913,13204,13217,14056,14080],"fullWord":7306},{"subwords":[442,481,7293,7301,7308,7365,8135,8141,10109,10182,10981,13204,13217,13391,13987,14449,14460],"fullWord":7308},{"subwords":[442,461,7293,7301,7307,7309,7316,7396,7433,8135,8139,10109,10115,10981,10986,15910,15942,17003,17131,19871],"fullWord":7309},{"subwords":[299,488,495,7293,7311,7361,7416,7694,7764,7768,7826,7874,10109,10793,10809,10833,10860,10897,12686,18342,18432,18993,18994,19000,19060,19062],"fullWord":7311},{"subwords":[299,481,486,487,961,7293,7312,7313,7316,7361,7364,7365,7373,7396,7408,7708,7709,7764,7767,10109,10115,10181,10182,10194,10793,10811,10864,10874,12913,12914,12936,13204,13232,13336,13343,14056,14087,15910,15921,15942,16014,17003,17019,17099,17104,17298,17354,17406,17476],"fullWord":7313},{"subwords":[269,299,399,472,817,833,5588,5592,5718,5976,5988,5989,7293,7298,7314,7361,7363,7375,7461,7477,7525,7661,7764,7788,7855,10109,10110,10208,10211,10324,10355,10398,10443,10793,10796,10882,12680,12792,12794,12798,12845,12948,12979,14758,14762,14968,15141,15143,15610,15621],"fullWord":7314},{"subwords":[299,325,487,932,7293,7315,7316,7361,7364,7396,7399,7764,7767,7871,8233,8237,8276,8279,8362,8731,8737,10109,10115,10181,10231,10793,10811,12810,15910,15921,15942,16513,16667,17003,17099,17354],"fullWord":7315},{"subwords":[67,504,1210,1215,1256,1266,1422,7242,7252,7317,7318,7319,7342,7396,11127,11140,11330,12081,15910,15911,15973,15974],"fullWord":7319},{"subwords":[72,341,1256,1282,1462,1797,1881,7242,7289,7317,7320,7416,7637,9064,9077,11127,11132,11361,11649,18302,18342,18347,18389,18882],"fullWord":7320},{"subwords":[43,269,385,399,516,1256,1257,1301,1324,1526,1604,1636,1665,1907,5782,7242,7248,7293,7298,7317,7321,7323,7477,7489,7671,7676,10061,10109,10136,10139,10145,10324,10398,11127,11128,11173,11180,11437,11442,11487,11491],"fullWord":7321},{"subwords":[51,299,385,1256,1324,2029,2079,2100,7242,7293,7317,7322,7361,7693,7696,7703,7764,7771,10061,10109,10136,10139,10738,10748,10793,11127,11173,11265,11817],"fullWord":7322},{"subwords":[269,297,399,594,1196,5782,5785,7293,7298,7317,7323,7325,7330,7345,7447,7477,7489,7671,7673,8186,10109,10136,10145,10304,10324,10398,10495,11065,11127,11128,11173,11180,11408,11437,11442,11445,11487,21050,21051,21097],"fullWord":7325},{"subwords":[269,280,1009,5616,5620,5626,5845,6055,7317,7323,7327,7328,7342,7396,7416,7417,7419,7423,7489,7492,7540,7541,11127,11128,11129,11140,11330,11356,11361,11362,11366,11376,11437,11453,11456,11457,11487,11560,11574,11575,12081,15910,15912,15973,15978,16041,16043,16270,16278,16293,16457,17732,17733,17813,17830,18342,18345,18389,18393,18398,18407,18541,18549,18552,18559,18595],"fullWord":7328},{"subwords":[269,1009,5620,6055,7317,7323,7329,7416,7417,7467,7489,7540,11127,11128,11361,11362,11437,11456,11483,11487,11574,11575,11578,18342,18389,18393,18541,18549,18576,18579,18595],"fullWord":7329},{"subwords":[269,341,343,349,553,817,869,5588,5830,5976,5988,7317,7323,7326,7332,7375,7461,7489,7530,7921,8009,8010,9158,9376,9384,11127,11128,11132,11276,11286,11288,11292,11437,11487,11539,11649,11742,11743,14758,14762,14808,14810,14975,15141,15150,15202,15461,15480,15481],"fullWord":7332},{"subwords":[337,341,594,7282,7293,7317,7333,7345,7447,7585,7688,8186,10109,10136,10304,10584,10585,10618,11127,11132,11148,11173,11182,11408,11649,11659,21051],"fullWord":7333},{"subwords":[269,287,341,528,5897,7283,7317,7323,7334,7335,7489,7493,7604,9158,11127,11128,11132,11156,11157,11213,11218,11223,11437,11446,11487,11489,11512,11645,11649,11697,11706,11711,12229,12230,12244,12245,12443],"fullWord":7335},{"subwords":[287,288,341,7267,7283,7317,7334,7336,7352,7578,7604,11127,11132,11156,11213,11649,11697,11711,12230,12244,12443],"fullWord":7336},{"subwords":[287,341,347,555,647,691,7283,7287,7317,7334,7337,7342,7396,7604,7611,9307,9422,11127,11132,11140,11156,11159,11213,11247,11330,11649,11654,11697,11711,11728,12081,12230,12233,12244,12443,12447,15910,15973,15986,16001,16764,16813,16815,16858,16866,17211],"fullWord":7337},{"subwords":[504,7317,7338,7339,7342,7396,11127,11135,11136,11140,11197,11198,11330,12081,15910,15911,15973],"fullWord":7339},{"subwords":[269,817,869,5588,5976,5988,7317,7323,7326,7340,7375,7461,7489,7530,7921,7922,11127,11128,11276,11286,11288,11437,11487,11539,14758,14762,14808,14975,15141,15202],"fullWord":7340},{"subwords":[299,560,568,7317,7341,11127,11213,11228,11265,11810,11885,11891,12230,12244,12509,12522],"fullWord":7341},{"subwords":[586,7317,7342,7343,7344,7396,7416,7423,8095,8145,8150,8171,8175,8176,11127,11140,11142,11330,11356,11361,11376,11392,12081,12104,12107,12177,15910,15973,16041,17201,17203,17732,18103,18342,18345,18389,18407,18508,19418,19421,19871],"fullWord":7344},{"subwords":[269,270,605,608,622,817,4492,4500,4502,4504,4516,4532,4605,4607,4774,4810,5310,5351,5588,5595,5666,5707,5865,5894,5976,5988,7253,7346,7375,7383,7384,7461,7493,7907,7908,7928,7929,12229,12230,12274,12319,12358,14736,14758,14762,14763,14821,14826,14832,14833,14834,14961,15060,15141,15227],"fullWord":7346},{"subwords":[287,326,605,4492,4502,4890,4947,4985,4993,7253,7283,7347,7604,8217,8220,8233,8298,8304,8617,8649,12230,12429],"fullWord":7347},{"subwords":[269,280,5918,6240,6245,6293,6295,6296,6298,6302,6453,6463,7348,7349,7396,7493,7511,12229,12230,12233,15904,15910,15912,15986,15995,16001,16270,17211],"fullWord":7349},{"subwords":[269,280,1106,1114,1115,5918,6091,7350,7351,7396,7439,7493,7511,12229,12230,12233,12305,12308,15910,15912,15986,15995,16001,16076,16270,17211,19948,19950,19952,19957,19967,20001,20002,20003],"fullWord":7351},{"subwords":[269,270,605,4492,4500,4502,4605,4774,5707,5709,5865,7253,7267,7269,7270,7352,7353,7493,12229,12230,12231],"fullWord":7353},{"subwords":[269,622,817,5588,5595,5709,5894,5976,5988,7267,7269,7271,7352,7354,7375,7461,7493,7931,12229,12230,12232,12319,14758,14762,14821,14832,14833,15141],"fullWord":7354},{"subwords":[269,280,5709,5715,5918,7267,7269,7273,7280,7352,7355,7357,7396,7493,7511,12229,12230,12233,15910,15912,15986,15995,16001,16270,17211],"fullWord":7355},{"subwords":[716,7267,7293,7352,7356,7447,10109,10304,12230,12311,21058],"fullWord":7356},{"subwords":[269,277,615,657,663,693,694,1009,5620,6055,6074,7358,7416,7417,7493,7512,7540,7745,12229,12230,12252,12325,12374,18342,18408,18410,18541,18607],"fullWord":7358},{"subwords":[269,279,280,622,623,817,825,905,906,5588,5595,5598,5599,5894,5918,5976,5977,5988,5992,6000,7359,7375,7391,7396,7461,7463,7493,7511,7743,7939,12229,12230,12233,12275,12319,12324,14758,14762,14764,14773,14821,14832,14833,14836,14881,15141,15910,15912,15914,15986,15995,15998,16001,16003,16026,16270,16286,16419,17211,17223],"fullWord":7359},{"subwords":[633,693,716,911,919,7360,7375,7395,7416,7447,7745,7933,7961,12230,12282,12311,14758,14821,14832,14837,14847,14898,14939,15864,18342,18408,18410,18417,18449,18460,19231,19377,21058,21075],"fullWord":7360},{"subwords":[183,269,270,299,399,472,4451,4466,4601,4728,5114,5123,5125,5146,5707,5718,5756,7253,7293,7298,7361,7362,7477,7478,7525,7649,7650,7761,7764,7765,7782,7801,10090,10093,10109,10324,10327,10378,10398,10443,10730,10780,10783,10793,10796,12752,12792,12793,12837,12845],"fullWord":7362},{"subwords":[269,299,399,472,817,833,5588,5592,5718,5976,5988,5989,7293,7298,7314,7361,7363,7375,7461,7477,7525,7661,7764,7788,7855,10109,10110,10208,10211,10324,10355,10398,10443,10793,10796,10882,12680,12792,12794,12798,12845,12948,12979,14758,14762,14968,15141,15143,15610,15621],"fullWord":7363},{"subwords":[269,279,280,732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,5988,5992,6033,7365,7366,7368,7369,7370,7373,7375,7391,7396,7408,7410,7461,7463,7935,7936,7939,7940,13184,13186,13187,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13516,13519,13577,14262,14281,14403,14758,14762,14764,14773,14851,14852,14856,14866,14881,14891,14979,14982,15141,15248,15272,15305,15910,15912,15914,16014,16026,16270,16286,16419,17476,17494,17495,17499,17523],"fullWord":7369},{"subwords":[287,288,750,7267,7283,7352,7365,7371,7578,7604,7612,12230,12257,12453,13188,13193,13239,13251,13721,13765,13773],"fullWord":7371},{"subwords":[269,270,732,733,762,5707,5956,7253,7365,7366,7367,7372,13171,13184,13185,13268,13439,13478,13516,13569,14237],"fullWord":7372},{"subwords":[263,269,817,818,5588,5709,5976,5988,7267,7268,7269,7271,7375,7376,7461,14758,14759,14762,15141],"fullWord":7376},{"subwords":[30,269,270,817,1243,1246,1247,1249,1256,1366,1372,1377,1378,1386,1387,1515,1535,1536,1560,1604,1696,2308,2315,2317,2319,2376,2384,4427,4516,4607,4618,4619,4810,5303,5310,5351,5588,5666,5707,5976,5988,7242,7253,7375,7377,7378,7383,7461,7900,7907,7908,14736,14758,14762,14763,14961,14995,15060,15141],"fullWord":7378},{"subwords":[43,44,269,385,399,817,833,1256,1257,1301,1304,1366,1377,1386,1535,1604,1636,1696,1915,1933,2308,2317,2319,5588,5592,5976,5988,7242,7248,7293,7298,7375,7377,7379,7461,7477,7661,7676,7900,10061,10109,10110,10208,10324,10355,10398,14758,14762,14968,14995,15141,15143],"fullWord":7379},{"subwords":[118,299,796,809,837,2869,2941,2965,3665,3777,3794,3913,4062,7375,7382,8038,12230,12270,12271,12509,12548,12680,12951,12965,12966,12983,14758,14821,14832,15568,15592],"fullWord":7382},{"subwords":[269,270,605,608,622,817,4492,4500,4502,4504,4516,4532,4605,4607,4774,4810,5310,5351,5588,5595,5666,5707,5865,5894,5976,5988,7253,7346,7375,7383,7384,7461,7493,7907,7908,7928,7929,12229,12230,12274,12319,12358,14736,14758,14762,14763,14821,14826,14832,14833,14834,14961,15060,15141,15227],"fullWord":7384},{"subwords":[269,399,817,833,5588,5592,5709,5976,5988,7267,7269,7271,7293,7298,7375,7385,7461,7477,7661,10109,10110,10113,10208,10324,10355,10398,14758,14762,14766,14968,15141,15143],"fullWord":7385},{"subwords":[325,349,359,905,932,7375,7386,7391,7396,7399,7939,8233,8237,8245,8248,8362,8678,8934,9376,9409,14758,14773,14775,14886,15461,15472,15910,16028,16513,16805,16889,17722],"fullWord":7386},{"subwords":[314,337,349,796,2813,2941,2971,3402,3408,3452,4062,7293,7375,7387,7585,7622,7916,9376,10072,10109,10121,10502,10675,14758,14780,15399,15461],"fullWord":7387},{"subwords":[269,622,817,5588,5595,5894,5976,5988,6008,7375,7388,7461,7493,12229,12230,12319,14758,14762,14821,14832,14833,14835,14872,14983,15141,15275],"fullWord":7388},{"subwords":[269,277,622,693,694,709,817,831,911,1009,5588,5595,5620,5894,5976,5982,5988,6055,6074,7375,7389,7416,7417,7461,7493,7512,7540,7745,7933,7946,7972,7990,12229,12230,12319,12325,12374,14758,14762,14821,14832,14833,14847,14898,14901,15141,15241,15312,15748,18342,18408,18410,18449,18453,18460,18541,18554,18607,18649],"fullWord":7389},{"subwords":[269,817,911,1009,5588,5620,5976,5982,5988,6008,6055,7375,7390,7392,7416,7417,7461,7540,7946,7948,7972,7990,14758,14762,14872,14898,14901,14903,14983,15141,15312,15748,18342,18449,18453,18541,18554,18652,18653],"fullWord":7390},{"subwords":[269,817,911,1009,5588,5620,5976,5982,5988,6008,6055,7375,7390,7392,7416,7417,7461,7540,7946,7948,7972,7990,14758,14762,14872,14898,14901,14903,14983,15141,15312,15748,18342,18449,18453,18541,18554,18652,18653],"fullWord":7392},{"subwords":[325,905,911,918,932,7375,7391,7393,7394,7396,7399,7416,7423,7550,7551,7552,7939,8233,8237,8360,8361,8362,8371,8378,8391,8934,8935,14758,14773,14775,14886,14898,14912,15910,16041,16513,16559,17732,17773,18342,18345,18449,18472,19224,19381],"fullWord":7394},{"subwords":[67,1210,1215,1256,1266,1422,7242,7252,7267,7268,7280,7396,7397,15910,15911],"fullWord":7397},{"subwords":[200,269,270,280,325,932,934,4543,4614,4707,4826,5707,5708,7253,7258,7396,7399,7400,7460,8217,8219,8233,8237,8362,8440,8443,15893,15910,15912,16270,16503,16504,16513,16574,16581],"fullWord":7400},{"subwords":[269,279,280,325,817,825,905,906,932,5588,5599,5976,5977,5988,5992,7375,7391,7396,7399,7401,7461,7463,7939,8233,8237,8333,8338,8362,8453,8456,8552,8584,8934,14758,14762,14764,14773,14775,14881,14886,15141,15376,15377,15910,15912,15914,16026,16270,16286,16419,16513,16549,16574,16577],"fullWord":7401},{"subwords":[269,280,325,932,936,973,6039,7396,7398,7399,7402,8233,8237,8362,15910,15912,15915,15923,16033,16270,16291,16513,16515,16574,16609],"fullWord":7402},{"subwords":[6240,6245,6386,6388,6560,6564,7396,7403,7447,7452,9135,15910,15924,16103],"fullWord":7403},{"subwords":[269,280,950,1009,5616,5620,5626,6055,7396,7404,7416,7417,7419,7423,7540,7541,9804,9826,9828,15910,15912,15939,16041,16043,16270,16293,16457,16937,16940,17732,17733,17746,17809,18342,18345,18358,18362,18484,18541,18545,18546,18559],"fullWord":7404},{"subwords":[290,337,340,434,488,7289,7292,7293,7316,7396,7405,7416,7423,7585,7596,7597,7635,7637,9437,9447,10109,10115,10126,10241,10686,10691,10707,15910,15931,15942,15960,16041,16840,16907,17003,17022,17093,17732,18342,18345,18347,18349,18353,18863,18947],"fullWord":7405},{"subwords":[504,596,619,7317,7342,7396,7406,11127,11140,11213,11216,11247,11330,12081,12230,12233,12244,12283,15910,15911,15973,15986,16001,16002,17211],"fullWord":7406},{"subwords":[269,280,528,531,5845,5918,7317,7323,7327,7342,7396,7407,7489,7492,7493,7511,11127,11128,11129,11140,11213,11218,11221,11223,11225,11247,11248,11330,11437,11446,11450,11453,11487,11512,11524,11560,12081,12229,12230,12233,12244,12245,12250,15910,15912,15973,15978,15986,15995,16001,16270,16278,17211],"fullWord":7407},{"subwords":[200,269,270,280,732,733,739,779,961,4707,4826,5707,5708,5956,6033,7253,7258,7365,7366,7367,7370,7373,7396,7408,7409,7460,13171,13177,13184,13185,13187,13336,13439,13461,13478,13488,13516,13519,15893,15910,15912,16014,16270,17476,17481,17530],"fullWord":7409},{"subwords":[269,279,280,732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,5988,5992,6033,7365,7366,7368,7369,7370,7373,7375,7391,7396,7408,7410,7461,7463,7935,7936,7939,7940,13184,13186,13187,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13516,13519,13577,14262,14281,14403,14758,14762,14764,14773,14851,14852,14856,14866,14881,14891,14979,14982,15141,15248,15272,15305,15910,15912,15914,16014,16026,16270,16286,16419,17476,17494,17495,17499,17523],"fullWord":7410},{"subwords":[200,269,270,280,973,4707,4708,4826,5707,5708,6039,7253,7258,7396,7398,7412,7460,15893,15910,15912,15915,15923,16270,16291],"fullWord":7412},{"subwords":[269,279,280,817,825,905,906,907,973,5588,5599,5976,5977,5988,5992,6039,7375,7391,7396,7398,7413,7461,7463,7939,7942,14758,14762,14764,14773,14881,14885,15141,15910,15912,15914,15915,15923,16026,16027,16270,16286,16290,16291,16419],"fullWord":7413},{"subwords":[269,280,973,980,6039,7396,7398,7414,15910,15912,15915,15923,16037,16270,16291],"fullWord":7414},{"subwords":[269,817,911,1009,5588,5600,5620,5976,5982,5988,6055,7375,7393,7416,7417,7420,7461,7540,7551,7946,7972,7990,8233,8333,8360,8378,8381,8383,8453,8458,8461,8552,14758,14762,14775,14898,14901,15141,15312,15376,15748,18342,18449,18453,18541,18554,18697],"fullWord":7420},{"subwords":[287,288,693,700,7267,7283,7289,7352,7416,7421,7561,7578,7604,7637,7745,9325,12230,12463,18342,18347,18408,18410,18894,18901],"fullWord":7421},{"subwords":[67,72,1256,1266,1422,1456,1462,1482,1502,1507,7242,7252,7396,7416,7423,7424,7447,7452,15910,15924,16041,16103,17723,17732,17740,17802,18018,18302,18318,18342,18345,18540],"fullWord":7424},{"subwords":[93,98,269,315,2788,3384,4268,5582,5627,7425,8233,8238,8945,8951,8952,19583],"fullWord":7425},{"subwords":[299,3370,3384,3665,3977,7426,8094,8233,8714,8731,8951,13044,19583],"fullWord":7426},{"subwords":[269,270,315,1053,5471,5485,5627,5707,5709,7253,7267,7269,7270,7427,7429,7430],"fullWord":7430},{"subwords":[269,315,817,842,1062,5588,5627,5709,5976,5988,7267,7269,7271,7375,7429,7431,7461,8099,14758,14762,15141,15777,15790,19847,19855],"fullWord":7431},{"subwords":[269,280,315,316,5627,5709,5715,7267,7269,7273,7280,7396,7429,7432,15910,15912,16270,18066,19871,19874,19876],"fullWord":7432},{"subwords":[269,280,315,316,5627,7396,7436,7437,7453,7458,15910,15912,16270,18066,18078,19871,19874,19876,21230,21232,21268],"fullWord":7437},{"subwords":[267,269,1106,1115,5709,7267,7268,7269,7438,7439],"fullWord":7438},{"subwords":[269,280,399,407,1106,1114,1115,7260,7293,7298,7300,7316,7396,7439,7440,7441,7477,7486,10109,10115,10285,10289,10324,10360,10398,10412,10471,10472,15910,15912,15942,15948,15966,16076,16270,16274,17003,17029,17030,19923,19924,19925,19935,19967,19986,19987,20003,20014],"fullWord":7441},{"subwords":[299,1115,7396,7416,7423,7442,7443,7768,7770,7874,7889,7891,12686,12692,13087,15910,15921,16041,17435,17732,17885,18342,18345,18432,18435,18993,18994,18997,19001,19165,19970,19975,19978],"fullWord":7443},{"subwords":[269,270,1145,1147,4574,4865,5707,7253,7444,7445,9826,20303,20309,20326,20327,20328,20361,20362,20497,20524],"fullWord":7445},{"subwords":[269,817,867,1145,5588,5976,5988,7375,7444,7446,7461,7991,9826,14758,14762,14798,14933,15141,20326,20327,20329,20361,20365,20410,20417,20423,20497,20510,20979],"fullWord":7446},{"subwords":[269,280,1009,1196,1197,5616,5619,5620,5626,6055,7396,7416,7417,7419,7423,7447,7449,7452,7540,7541,15910,15912,15924,16041,16043,16103,16270,16293,16457,17732,17733,17737,17740,17802,18018,18019,18342,18345,18541,18559,21097,21105,21106,21130,21135],"fullWord":7449},{"subwords":[269,1009,1196,5620,6055,7416,7417,7447,7450,7540,18342,18541,21094,21097,21135],"fullWord":7450},{"subwords":[51,269,299,1256,1604,2029,2079,5718,7242,7453,7454,7771,21230],"fullWord":7454},{"subwords":[269,279,280,817,825,905,906,5588,5599,5976,5977,5988,5992,7375,7391,7396,7453,7456,7457,7458,7461,7463,7939,7966,7969,14758,14762,14764,14773,14881,14945,14950,15141,15910,15912,15914,16026,16270,16286,16419,21230,21232],"fullWord":7457},{"subwords":[287,288,7267,7283,7352,7459,7578,7604,12230,12313,21230,21269,21276],"fullWord":7459},{"subwords":[269,270,311,312,817,4516,4607,4678,4810,5310,5351,5583,5588,5589,5666,5667,5669,5707,5976,5984,5988,7253,7375,7383,7461,7462,7467,7468,7907,7908,7979,14736,14758,14762,14763,14961,15060,15093,15141],"fullWord":7462},{"subwords":[3171,3665,3670,3697,3699,5718,5721,6023,7464,7465,7466,7790,9826,9828,16298,17316,17319],"fullWord":7465},{"subwords":[269,1145,5709,6118,7267,7269,7467,7469,20326,20327,20532],"fullWord":7469},{"subwords":[5709,7467,7470,7493,7496,7503,7578,7604,12339],"fullWord":7470},{"subwords":[5709,5712,5735,5984,5988,5995,7467,7475,7578,9384,15141,15461],"fullWord":7475},{"subwords":[214,269,280,325,932,5716,7396,7399,7476,8233,8237,8362,8625,8628,8678,15910,15912,16270,16513,16574,16805],"fullWord":7476},{"subwords":[4667,4728,4731,4733,5667,5668,5691,5756,7467,7468,7477,7478,7479,7678,10378,10379,10383,10398],"fullWord":7479},{"subwords":[4678,4728,4731,4810,5351,5667,5669,5691,5756,5757,5984,5988,7467,7468,7477,7478,7480,7678,7979,10378,10379,10380,10383,10388,10398,10405,15060,15093,15107,15141],"fullWord":7480},{"subwords":[5691,5693,5790,7467,7473,7474,7477,7482,7483,7486,7678,7679,10383,10392,10398,10412,10451,16319],"fullWord":7483},{"subwords":[4728,4731,4744,5667,5691,5756,5780,7467,7468,7477,7478,7485,7678,10378,10379,10383,10398],"fullWord":7485},{"subwords":[7489,7490,7493,7505,7604,11487,11489,11512,11645,11649,11697,11706,11711,11714,12443],"fullWord":7490},{"subwords":[4678,4774,4810,5351,5665,5667,5669,5865,5868,5894,5984,5988,5998,7467,7468,7493,7495,7496,7509,7979,7984,12339,12340,12358,15060,15093,15141,15227],"fullWord":7495},{"subwords":[269,311,622,817,5583,5588,5595,5894,5910,5976,5984,5988,5998,7375,7461,7467,7493,7496,7497,7509,7984,12229,12230,12319,12339,14758,14762,14821,14830,14832,14833,15141],"fullWord":7497},{"subwords":[269,1106,1107,1115,5629,6092,6093,7350,7439,7467,7493,7496,7500,12229,12230,12305,12339,19948,19950,19992,20001],"fullWord":7500},{"subwords":[269,286,287,337,399,416,423,426,430,620,625,637,5745,7283,7293,7298,7477,7493,7494,7501,7585,7604,7674,7680,9265,10109,10120,10174,10324,10344,10398,10414,10536,10544,10621,10625,10637,12229,12230,12238,12438,12439],"fullWord":7501},{"subwords":[5716,5918,7467,7473,7493,7496,7498,7503,7504,7511,7604,7611,9307,12339,16319,16325,16335,16351,16352,16790,16815,16818,16858,16860,16866,16867],"fullWord":7504},{"subwords":[5716,5918,7493,7506,7511,7518,7604,7611,7759,7760,8127,8151,8160,9307,12348,16815,16858,16860,16866,16867,17292,18066,18083,18084,18117,18125,19876,19885],"fullWord":7506},{"subwords":[5718,5953,7467,7489,7493,7496,7508,7526,7753,7815,11487,11512,11891,12339,12509,12522,12525,12789,12866,12876],"fullWord":7508},{"subwords":[5894,5918,5984,5988,5992,5998,6000,7467,7473,7493,7496,7498,7509,7510,7511,7984,7985,12339,15141,15148,16319,16335,16340,16425,16433,17237],"fullWord":7510},{"subwords":[7477,7487,7493,7512,7513,7540,7596,7604,7637,7680,7690,9265,9290,9325,9328,9334,10398,10408,10414,10437,10460,10536,10544,10625,10637,10656,10691,10694,12374,12438,12439,12463,18607,18844,18863,18866,18894,18898,18901,18902,18905],"fullWord":7513},{"subwords":[5691,7467,7477,7487,7493,7496,7499,7512,7514,7540,7678,7680,10383,10398,10437,10460,12339,12374,18576,18583,18607],"fullWord":7514},{"subwords":[7477,7487,7493,7512,7515,7540,7680,10398,10437,10460,10495,11065,12374,18607,21120,21135],"fullWord":7515},{"subwords":[5894,5937,5988,7493,7512,7516,7540,7992,8195,12374,15141,15241,15312,15748,15866,18607,18649,19257,19377,19570,21120,21135],"fullWord":7516},{"subwords":[4680,4826,5114,5117,5123,5125,5127,5139,5221,5223,5667,5671,5718,5721,7460,7467,7468,7473,7519,7520,7782,7785,7790,12752,12755,12789,12790,16313,16319,16320,17323],"fullWord":7520},{"subwords":[3638,3644,3657,3665,4639,4656,4714,4909,4935,4947,5096,5114,5123,5125,5133,5718,7521,7523,7782,9079,9082,9110,12752,12757],"fullWord":7521},{"subwords":[4714,4826,4935,4939,4947,4956,5037,5114,5117,5123,5125,5127,5133,5134,5139,5221,5223,5716,5718,5721,5728,7460,7523,7524,7782,7785,7790,9110,9111,9127,12752,12755,16780,17323],"fullWord":7524},{"subwords":[5709,5712,5718,5984,5988,5989,7467,7522,7527,7788,7855,7858,8043,12789,12798,12979,15141,15610],"fullWord":7527},{"subwords":[269,270,396,399,817,833,834,4466,4516,4601,4607,4728,4810,5310,5351,5588,5592,5666,5707,5756,5976,5988,7253,7293,7298,7375,7383,7461,7477,7478,7528,7649,7650,7661,7662,7907,7908,10090,10093,10097,10109,10110,10202,10208,10324,10327,10355,10378,10398,14736,14758,14762,14763,14961,14968,15060,15141,15143],"fullWord":7528},{"subwords":[1604,1636,1696,1790,1797,1817,1819,2417,2424,5988,7477,7529,7567,7569,7622,7682,9384,10398,10414,10504,10509,10514,10536,10549,10562,10677,14995,15141,15402,15444,15461,15473],"fullWord":7529},{"subwords":[269,528,622,817,869,5588,5595,5894,5895,5976,5988,7317,7323,7326,7375,7461,7489,7493,7530,7531,7921,11127,11128,11213,11218,11223,11224,11276,11286,11288,11437,11446,11487,11512,11539,12229,12230,12244,12245,12248,12319,14758,14762,14771,14808,14821,14832,14833,14975,15141,15202,15207],"fullWord":7531},{"subwords":[5894,5984,5988,5998,7467,7489,7493,7496,7509,7530,7532,7984,11487,11512,11539,11543,11548,12339,15141,15202],"fullWord":7532},{"subwords":[4774,4810,5351,5420,5471,5485,5507,5511,5513,5539,5865,5894,5988,7493,7535,7759,8151,12358,12624,12626,12629,12631,15060,15141,15227,15773,15777,15778,15790,15821,15822,15824,19660,19855,19856,19866],"fullWord":7535},{"subwords":[6031,6039,6042,7467,7473,7537,7538,7539,7540,7541,16319,16342,16457,16464,18576,18588],"fullWord":7538},{"subwords":[5723,5984,5988,7467,7540,7542,7987,15141,15312,15748,18576,19240],"fullWord":7542},{"subwords":[6033,7540,7541,7543,7544,8107,8171,8175,8176,13516,13519,13609,13613,13626,14427,14449,14451,14551,14561,14567,16409,16457,16468,17836,18013,18066,18074,18135,18136,18148,19386,19418,19421,19453,19456,19825,19826,19876],"fullWord":7544},{"subwords":[269,1145,5709,7267,7269,7547,20326,20327],"fullWord":7547},{"subwords":[5698,5984,5988,5992,6189,6196,6197,6198,7467,7473,7548,7992,7996,8195,8197,15141,15148,15866,15867,16319,16340,16425,16433,21130,21212],"fullWord":7548},{"subwords":[5718,7540,7555,7874,7875,8725,8731,8892,18697,18743,18981,18993,19131,19134],"fullWord":7555},{"subwords":[7556,7557,7871,7874,7875,7877,8731,8737,8887,8891,8892,8901,8935,12810,16704,16707,17434,17435,17436,18743,18993,19001,19123,19125],"fullWord":7557},{"subwords":[7556,7558,7871,7874,7875,7877,7895,7897,8731,8737,8887,8892,8901,8935,12810,16704,16758,17435,17472,17896,18018,18743,18806,18993,19001,19123,19186,19195,21166],"fullWord":7558},{"subwords":[7559,7560,7871,8166,8731,8737,8951,8958,10793,10811,10910,10981,10986,11039,12810,16746,17099,17118,17131,17354,17439,17442,19583,19584,19592],"fullWord":7560},{"subwords":[287,290,634,647,691,693,700,704,711,7283,7287,7288,7289,7292,7396,7416,7423,7561,7562,7604,7611,7635,7637,7745,7746,9307,9318,9325,9447,12230,12233,12463,12471,15910,15936,15986,16001,16041,16047,16048,16815,16858,16866,16907,17211,17255,17732,17742,17870,18342,18345,18347,18408,18410,18416,18428,18894,18901,18907,18919,18947],"fullWord":7562},{"subwords":[1560,1604,1767,1777,1780,1797,4618,4714,4935,4947,5632,7563,7567,7568],"fullWord":7563},{"subwords":[1604,1696,1767,1790,1797,2404,2417,2424,5632,5988,7564,7567,7569,9384,14995,15141,15402,15461],"fullWord":7564},{"subwords":[1604,1721,1767,1797,1881,1884,5632,7540,7565,7567,7637,18844],"fullWord":7565},{"subwords":[1767,1797,1837,1847,1851,2042,2079,2127,2140,7566,7604,7771,9360,12406,12481,12509,12700],"fullWord":7566},{"subwords":[1604,1617,1696,1697,1790,1791,1797,2417,2423,2424,2426,5716,5988,5992,7567,7569,7570,7571,7573,9384,9389,9409,14995,15014,15141,15402,15410,15461,15472,15526,16423,16765,16889,16890,17722],"fullWord":7570},{"subwords":[1604,1636,1661,1721,1797,1817,1819,1881,1884,7477,7487,7540,7567,7572,7596,7637,7682,10398,10408,10414,10460,10504,10536,10691,10694,18844,18863,18866],"fullWord":7572},{"subwords":[148,326,4438,4890,4928,4947,5014,7253,7365,7574,7612,13171,13190,13721],"fullWord":7574},{"subwords":[4701,4714,4935,4942,4947,5680,5705,6406,6492,6537,6540,6543,6560,6651,7540,7575,7576,7637,18835,18844,18845],"fullWord":7576},{"subwords":[5709,7477,7578,7580,10398,10414,10536],"fullWord":7580},{"subwords":[7578,7581,7796,7826,9136,10793,10809,10833,12812,12850],"fullWord":7581},{"subwords":[5709,5715,5716,7578,7582,7583,7584,8127,18066,18083,19876],"fullWord":7584},{"subwords":[4714,4728,4739,4928,4935,4936,4947,5756,7477,7478,7484,7586,7587,7684,7685,9117,9118,10378,10398,10414,10530,10536,10537],"fullWord":7587},{"subwords":[4714,4728,4739,4810,4935,4947,5023,5028,5351,5756,5988,7477,7478,7484,7586,7588,7617,7620,7622,7684,7686,7997,9117,9119,9384,9385,10378,10398,10414,10530,10536,10537,10549,10562,10677,15060,15141,15151,15428,15433,15437,15444,15461,15473,15474],"fullWord":7588},{"subwords":[4714,4728,4739,4744,4935,4947,4967,5756,5780,7477,7478,7484,7586,7590,7591,7684,9117,9152,10378,10398,10414,10530,10536,10537],"fullWord":7591},{"subwords":[5780,5988,7477,7590,7592,7622,8006,8007,9152,9153,9384,10398,10414,10536,10549,10562,10677,15141,15444,15461,15473,15477],"fullWord":7592},{"subwords":[5780,7477,7590,7593,9152,10398,10414,10536],"fullWord":7593},{"subwords":[337,341,385,1256,1272,1307,1324,1797,7242,7293,7317,7585,7598,7682,7688,9064,9077,10061,10109,10136,10139,10504,10584,10585,10587,11127,11132,11148,11173,11182,11649,11659],"fullWord":7598},{"subwords":[5716,5782,5784,5845,7477,7486,7489,7492,7599,7600,7688,7689,9416,9422,10398,10412,10414,10415,10536,10551,10584,10595,10598,11487,11649,11654,11659,11668,11671,11685,11764,12081,16375,17076,17077,17171],"fullWord":7600},{"subwords":[5782,5832,7477,7487,7489,7540,7596,7599,7601,7637,7688,9444,10398,10408,10414,10460,10536,10584,10595,10691,10694,11487,11502,11574,11649,11659,11668,11686,11786,18595,18844,18863,18866,18882,18886],"fullWord":7601},{"subwords":[4714,4935,4938,4947,4971,4972,5014,7489,7602,7603,7612,9109,9178,9184,11487,11626,11633,11649,12078,13478,13516,13705,13710,13721],"fullWord":7603},{"subwords":[5709,5894,5988,5996,7493,7578,7604,7605,8015,9384,12427,15141,15173,15175,15234,15461,15494],"fullWord":7605},{"subwords":[7578,7604,7606,7607,7797,7818,9142,9276,9360,9913,9922,10015,12509,12825],"fullWord":7606},{"subwords":[7578,7604,7606,7607,7797,7818,9142,9276,9360,9913,9922,10015,12509,12825],"fullWord":7607},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5865,5870,7493,7604,7609,9297,9299,12448],"fullWord":7609},{"subwords":[5894,5988,5996,7493,7604,7610,8015,9297,9300,9384,12448,15141,15173,15175,15234,15461,15494],"fullWord":7610},{"subwords":[4714,4935,4947,5014,7612,7613,13478,13516,13569,13705,13710,13721,13813,13815,13816,14237],"fullWord":7613},{"subwords":[5988,7612,7614,8022,8023,8028,9384,13516,13569,13577,13705,13712,13721,13813,13815,13817,14262,14278,14311,15141,15248,15461,15508,15509],"fullWord":7614},{"subwords":[4714,4810,4928,4935,4936,4947,5023,5028,5351,5364,5988,7617,7618,7997,7998,9384,9385,15060,15074,15141,15428,15433,15437,15438,15461],"fullWord":7618},{"subwords":[4714,4810,4935,4947,5023,5026,5028,5351,5365,5988,6008,7617,7619,7997,9384,9385,15060,15141,15428,15433,15434,15437,15461],"fullWord":7619},{"subwords":[4714,4728,4739,4810,4935,4947,5023,5028,5351,5756,5988,7477,7478,7484,7586,7588,7617,7620,7622,7684,7686,7997,9117,9119,9384,9385,10378,10398,10414,10530,10536,10537,10549,10562,10677,15060,15141,15151,15428,15433,15437,15444,15461,15473,15474],"fullWord":7620},{"subwords":[5988,7477,7622,7623,9384,10398,10414,10536,10549,10562,10677,15141,15444,15461,15473],"fullWord":7623},{"subwords":[4714,4810,4935,4942,4947,5023,5028,5034,5351,5680,5988,7540,7617,7628,7629,7637,7997,8035,9384,9385,15060,15141,15312,15318,15428,15433,15437,15461,15542,15748,18835,18844,18845,18847,18855,18941,18942,19274,19280],"fullWord":7629},{"subwords":[7628,7630,7631,7632,7635,7637,8033,8035,8036,8678,8685,8688,8691,8934,8935,9409,9447,15461,15464,15466,15472,16648,16653,16805,16809,16889,16907,17722,17881,18742,18947,19280],"fullWord":7631},{"subwords":[7633,7634,9422,9423,11649,11654,11772,11773,11774,11854,12002,12081,12082,12872,16903,17188,17434],"fullWord":7634},{"subwords":[5716,5918,7493,7511,7604,7611,7638,7639,7640,7643,9307,12387,16815,16858,16860,16866,16867,20008,20012,20129,20134,20152,20157,20161,20167,20197],"fullWord":7640},{"subwords":[5716,5988,5992,7638,7641,7642,7643,9384,9389,9409,15141,15337,15354,15461,15472,15526,15549,15554,16889,16890,17722,20070,20129,20132,20133,20134,20197],"fullWord":7642},{"subwords":[7633,7645,7646,9422,11649,11654,11772,11854,12081,12872,17188,21269,21271],"fullWord":7646},{"subwords":[93,96,269,280,399,400,407,2788,2792,2813,3021,3171,3449,6023,7260,7293,7298,7300,7316,7396,7477,7486,7647,7648,10072,10073,10077,10109,10115,10324,10360,10398,10412,15880,15910,15912,15942,15948,16116,16121,16270,16274,16298,17003],"fullWord":7648},{"subwords":[200,269,270,280,399,407,4466,4467,4601,4603,4707,4728,4826,5707,5708,5756,5760,7253,7258,7260,7293,7298,7300,7316,7396,7460,7477,7478,7481,7486,7649,7650,7651,7653,10090,10093,10099,10107,10109,10115,10227,10324,10327,10331,10360,10378,10398,10412,15893,15910,15912,15942,15948,16270,16274,17003,17044],"fullWord":7651},{"subwords":[442,464,4471,4578,7253,7293,7301,7310,7447,7649,7652,7654,10090,10108,10109,10304],"fullWord":7652},{"subwords":[269,286,337,399,436,1106,1115,6107,7293,7298,7439,7440,7477,7585,7638,7655,10109,10285,10324,10398,10414,10471,10472,10481,10536,10711,19919,19923,19924,19986,20004,20014,20107,20110,20129,20144],"fullWord":7655},{"subwords":[299,869,7293,7317,7361,7375,7656,7693,7703,7764,7921,10109,10136,10211,10738,10793,11127,11173,11265,11276,11303,11863,11963,12680,12948,14758,14808,15564,15627],"fullWord":7656},{"subwords":[93,114,269,399,620,625,2788,2813,2869,2883,3459,3460,3491,5745,5856,5861,7293,7298,7477,7493,7494,7647,7657,7674,7680,10072,10073,10109,10164,10174,10324,10344,10398,12229,12230],"fullWord":7657},{"subwords":[200,605,610,4492,4502,4506,7253,7258,7293,7316,7396,7460,7649,7653,7658,7659,7660,10090,10107,10109,10115,10169,10173,12230,12233,15893,15910,15942,15986,15988,16001,17003,17014,17211],"fullWord":7659},{"subwords":[269,270,396,399,817,833,834,4466,4516,4601,4607,4728,4810,5310,5351,5588,5592,5666,5707,5756,5976,5988,7253,7293,7298,7375,7383,7461,7477,7478,7528,7649,7650,7661,7662,7907,7908,10090,10093,10097,10109,10110,10202,10208,10324,10327,10355,10378,10398,14736,14758,14762,14763,14961,14968,15060,15141,15143],"fullWord":7662},{"subwords":[269,279,280,399,407,817,825,833,835,905,906,5588,5592,5593,5599,5976,5977,5988,5992,7260,7293,7298,7300,7316,7375,7391,7396,7461,7463,7477,7486,7661,7663,7939,10109,10110,10111,10115,10207,10208,10210,10228,10324,10355,10360,10398,10412,14758,14762,14764,14773,14805,14881,14968,14973,15141,15143,15910,15912,15914,15942,15948,16026,16270,16274,16286,16419,16420,17003],"fullWord":7663},{"subwords":[973,7293,7316,7396,7415,7447,7452,7665,7666,10109,10115,10236,10304,10313,15910,15923,15924,15942,16103,16109,17003,17005,17039,17041,17149],"fullWord":7666},{"subwords":[213,269,270,399,4466,4584,4601,4728,5707,5756,7253,7293,7298,7453,7455,7477,7478,7649,7650,7667,7668,10090,10093,10109,10314,10315,10324,10327,10378,10398,21230,21241,21249],"fullWord":7668},{"subwords":[269,399,817,833,5588,5592,5976,5988,7293,7298,7375,7453,7456,7461,7477,7661,7667,7669,7966,10109,10110,10208,10314,10324,10355,10398,14758,14762,14945,14968,15141,15143,21230,21241],"fullWord":7669},{"subwords":[269,280,399,407,7260,7293,7298,7300,7316,7396,7453,7458,7477,7486,7667,7670,10109,10115,10314,10316,10324,10360,10398,10412,15910,15912,15942,15948,16270,16274,17003,21230,21232,21241,21243],"fullWord":7670},{"subwords":[269,280,399,407,470,5782,5784,5845,7260,7293,7298,7300,7316,7317,7323,7327,7342,7396,7477,7486,7489,7492,7671,7672,10109,10115,10136,10145,10151,10161,10324,10360,10398,10412,11127,11128,11129,11140,11173,11180,11181,11330,11437,11442,11444,11453,11487,11560,12081,15910,15912,15942,15948,15949,15973,15978,16270,16274,16278,17003,17012],"fullWord":7672},{"subwords":[269,297,399,594,1196,5782,5785,7293,7298,7317,7323,7325,7330,7345,7447,7477,7489,7671,7673,8186,10109,10136,10145,10304,10324,10398,10495,11065,11127,11128,11173,11180,11408,11437,11442,11445,11487,21050,21051,21097],"fullWord":7673},{"subwords":[269,280,399,407,620,621,625,628,5745,5748,5918,7260,7293,7298,7300,7316,7396,7477,7486,7493,7494,7511,7660,7674,7675,7680,7681,10109,10115,10174,10175,10324,10344,10348,10360,10398,10412,10433,12229,12230,12233,15910,15912,15942,15948,15986,15995,16001,16270,16274,17003,17014,17211],"fullWord":7675},{"subwords":[1797,1803,1822,1827,1834,7590,7595,7682,7683,9152,9157,10504,10583],"fullWord":7683},{"subwords":[4714,4728,4739,4928,4935,4936,4947,5756,7477,7478,7484,7586,7587,7684,7685,9117,9118,10378,10398,10414,10530,10536,10537],"fullWord":7685},{"subwords":[4714,4728,4739,4810,4935,4947,5023,5028,5351,5756,5988,7477,7478,7484,7586,7588,7617,7620,7622,7684,7686,7997,9117,9119,9384,9385,10378,10398,10414,10530,10536,10537,10549,10562,10677,15060,15141,15151,15428,15433,15437,15444,15461,15473,15474],"fullWord":7686},{"subwords":[4714,4728,4739,4742,4826,4935,4939,4947,4956,5037,5716,5756,5760,7460,7477,7478,7481,7484,7486,7586,7589,7684,7687,9111,9117,9121,9127,9416,9417,10378,10398,10412,10414,10415,10530,10535,10536,10537,10551,16780,16784,17044,17068,17069],"fullWord":7687},{"subwords":[7596,7597,7604,7611,7635,7637,7690,7691,9307,9318,9325,9334,9447,10637,10642,10654,10656,10659,10686,10691,10707,12438,12442,12463,12471,16815,16840,16858,16866,16907,17083,17093,17255,17870,18863,18894,18901,18907,18919,18947],"fullWord":7691},{"subwords":[3272,3328,3429,4239,7596,7637,7692,8612,8645,8688,9440,10523,10563,10691,10698,18823,18863],"fullWord":7692},{"subwords":[299,487,488,495,496,7293,7316,7361,7364,7396,7416,7423,7694,7695,7764,7767,7768,7770,7874,10109,10115,10181,10241,10793,10811,10896,10897,10901,12686,12692,15910,15921,15942,15960,16041,17003,17022,17099,17113,17354,17435,17732,17885,18342,18345,18432,18435,18993,18994,18997,19001],"fullWord":7695},{"subwords":[51,299,385,442,1256,1315,1320,2029,2079,2100,2110,7242,7293,7301,7361,7696,7697,7764,7771,10061,10109,10748,10793,12856],"fullWord":7697},{"subwords":[1560,1604,1636,1929,1938,2058,2059,2079,2087,2088,2102,2106,4587,4618,4728,5114,5123,5125,5146,5718,5756,7477,7478,7525,7696,7698,7699,7771,7782,7801,10378,10398,10443,10748,10753,10754,10780,10783,10793,10796,12752,12792,12793,12837,12845],"fullWord":7699},{"subwords":[1604,1617,1636,2079,2087,2089,2091,2106,2108,5718,5721,7477,7486,7525,7696,7698,7700,7701,7771,7780,7790,10323,10398,10412,10443,10447,10748,10753,10755,10758,10793,10796,10797,10811,10888,12792,12796,12845,12848,17096,17097,17099,17308,17354,17359],"fullWord":7700},{"subwords":[7703,7704,7705,7706,7826,7847,10793,10809,10810,10811,10833,10842,10844,10854,11921,11941,12081,12872,13024,17099,17188,17354,17370],"fullWord":7706},{"subwords":[7703,7705,7707,7826,7895,8186,10793,10809,10813,10833,10842,11884,11921,12858],"fullWord":7707},{"subwords":[299,337,349,7293,7361,7375,7585,7622,7710,7764,7916,9376,10109,10121,10211,10502,10675,10793,10803,12680,12812,12948,12995,14758,14780,15399,15461,15617],"fullWord":7710},{"subwords":[7712,7713,7895,7897,10793,10811,10813,10893,10895,17099,17101,17149,17354,17434,17472,17475],"fullWord":7713},{"subwords":[4728,5114,5123,5125,5146,5267,5718,5756,7477,7478,7525,7714,7715,7782,7801,7889,10378,10398,10443,10471,10488,10780,10783,10793,10796,10935,10936,12752,12792,12793,12837,12845,20017,20250,20251],"fullWord":7715},{"subwords":[5718,5988,5989,7477,7525,7714,7716,7788,7855,7889,8067,8069,10398,10443,10471,10488,10793,10796,10882,10935,10938,12792,12794,12798,12845,12979,13095,15141,15337,15610,15621,15728,20250,20251],"fullWord":7716},{"subwords":[5718,5721,7477,7486,7525,7714,7717,7790,7889,10398,10412,10443,10447,10471,10488,10793,10796,10797,10811,10888,10935,10940,12792,12796,12845,12848,17097,17099,17354,17359,17374,20250,20251,20252],"fullWord":7717},{"subwords":[4728,4865,5114,5123,5125,5146,5271,5718,5756,7477,7478,7525,7718,7719,7782,7801,10378,10398,10443,10490,10780,10783,10793,10796,10942,10944,12752,12792,12793,12837,12845,13110,13111,13114,20524,20566,20875,20883],"fullWord":7719},{"subwords":[5718,5988,5989,7477,7525,7718,7720,7788,7855,7991,8071,8073,10398,10443,10793,10796,10882,10942,10945,12792,12794,12798,12845,12979,13110,13114,15141,15610,15621,15734,15739,20875,20933],"fullWord":7720},{"subwords":[5988,5992,7477,7486,7722,7724,7725,7726,8083,8084,10398,10412,10470,10981,10982,10983,10986,11029,11033,15141,15777,15782,15790,15794,15800,15804,15840,17128,17131,17141,18066,18071,18150,18160,19855,19860,19876,19880],"fullWord":7725},{"subwords":[5988,7477,7622,7722,7724,7728,8083,8119,9384,10398,10414,10470,10536,10549,10552,10562,10677,10981,10982,11029,15141,15444,15461,15473,15777,15790,15800,19585,19586,19855],"fullWord":7728},{"subwords":[7590,7595,7729,8135,8140,8180,9152,9157,10583,10981,19585,19588,19590],"fullWord":7729},{"subwords":[7578,7604,7730,7759,8151,8153,10637,10981,11012,12438,19585],"fullWord":7730},{"subwords":[7731,7732,8135,8140,8145,8180,8186,10981,12104,12118,19590],"fullWord":7732},{"subwords":[7477,7487,7540,7596,7637,7722,7733,7734,8119,8122,8175,10398,10408,10414,10460,10470,10536,10552,10553,10691,10694,10981,10982,11050,18844,18863,18866,19418,19585,19605,19897],"fullWord":7734},{"subwords":[7477,7487,7493,7512,7540,7680,7722,7733,7735,7759,8151,8175,10398,10437,10460,10470,10981,10982,11008,11010,11012,11013,11050,12374,12659,18607,19418,19434,19438,19605,19719],"fullWord":7735},{"subwords":[3541,3577,3665,3701,3714,3720,4029,7737,7810,7895,10760,10793,10813],"fullWord":7737},{"subwords":[7738,7739,8188,8191,13681,14009,16758,17149,17697,18276],"fullWord":7739},{"subwords":[905,7293,7316,7375,7391,7396,7660,7740,7741,7743,7939,10109,10115,12230,12233,14758,14773,14821,14832,15910,15942,15986,16001,17003,17014,17211,17229],"fullWord":7741},{"subwords":[633,716,7293,7375,7395,7447,7664,7740,7742,7961,8193,10109,10304,12230,12282,12311,14758,14821,14832,14837,14939,15864,21058,21075],"fullWord":7742},{"subwords":[269,270,605,617,1145,1147,1158,1159,4492,4500,4502,4574,4576,4605,4774,4865,5707,5865,7253,7493,7747,7748,12229,12230,12390,20303,20309,20326,20327,20328,20393,20394,20396,20397,20399,20505,20524,20579,20581],"fullWord":7748},{"subwords":[269,617,622,817,1145,1158,5588,5595,5894,5976,5988,7375,7461,7493,7747,7749,7991,12229,12230,12319,12390,14758,14762,14821,14832,14833,14933,15141,20326,20327,20329,20338,20393,20396,20399,20410,20417,20432,20505,20510,20579,20972,20984],"fullWord":7749},{"subwords":[5716,5918,6039,7493,7511,7604,7611,7752,9307,12367,16815,16822,16858,16860,16861,16866,16867,16870,16873,16881,16903],"fullWord":7752},{"subwords":[5718,5721,5845,5918,5953,5955,7489,7492,7493,7511,7526,7753,7754,7790,7815,11487,11512,11524,11567,11891,11915,12081,12506,12509,12512,12522,12525,12527,12560,12561,12866,12868,12872,12876,12879,16345,17188,17382,17383,17389],"fullWord":7754},{"subwords":[3665,3682,3689,3732,3757,3777,7604,7755,9097,9207,9218,9360,11649,11697,11711,11854,11891,12443,12509,12522],"fullWord":7755},{"subwords":[7756,7826,7841,11891,11911,11921,11931,12509,12522,12528,12541],"fullWord":7756},{"subwords":[5718,5721,5918,5953,5955,6039,7493,7511,7536,7757,7790,7815,12367,12506,12509,12512,12560,12561,12563,12876,12879,16345,16346,16347,17383,17388,17389,17390,17395,17434],"fullWord":7757},{"subwords":[7604,7611,7758,9307,9360,9366,12509,12512,12560,16815,16822,16858,16866,16873,16881,16903,17383,17389,17390,17395,17434],"fullWord":7758},{"subwords":[148,183,269,270,299,4438,4441,4451,4590,5107,5114,5123,5125,5659,5707,5718,7253,7761,7762,7782,12745,12752],"fullWord":7762},{"subwords":[183,269,270,299,399,472,4451,4466,4601,4728,5114,5123,5125,5146,5707,5718,5756,7253,7293,7298,7361,7362,7477,7478,7525,7649,7650,7761,7764,7765,7782,7801,10090,10093,10109,10324,10327,10378,10398,10443,10730,10780,10783,10793,10796,12752,12792,12793,12837,12845],"fullWord":7765},{"subwords":[269,286,299,337,399,472,5718,7293,7298,7361,7477,7525,7585,7764,7766,10109,10324,10398,10414,10443,10536,10793,10796,10803,12792,12812,12845],"fullWord":7766},{"subwords":[269,299,1009,5620,5718,6055,7416,7417,7467,7540,7768,7769,7874,12686,12789,18342,18432,18541,18576,18981,18993,18994,18995],"fullWord":7769},{"subwords":[1560,1604,2042,2058,2059,2079,4618,5114,5123,5125,5632,5718,7771,7772,7782,12752],"fullWord":7772},{"subwords":[1604,1616,1721,2042,2079,2237,5632,5718,7540,7771,7773,7874,18981,18993],"fullWord":7773},{"subwords":[1510,1604,1636,1969,2042,2079,2087,2106,5632,5718,7477,7525,7696,7698,7771,7774,10398,10443,10748,10753,10793,10796,12792,12845],"fullWord":7774},{"subwords":[1604,1617,1797,1851,1858,2079,2085,2086,2091,2099,5716,5718,5721,7567,7571,7573,7771,7775,7780,7790,12700,12701,16765,17308],"fullWord":7775},{"subwords":[1604,1616,1636,1661,1721,1989,2079,2087,2106,2115,2237,5718,7477,7487,7525,7540,7696,7698,7771,7776,7874,10398,10443,10460,10748,10753,10793,10796,10897,12792,12845,18981,18993,19017],"fullWord":7776},{"subwords":[1797,1837,1847,1851,1852,2079,2095,2127,2140,7604,7682,7696,7771,7777,9360,10504,10637,10641,10652,10663,10748,10793,10814,10826,12406,12438,12481,12509,12700,12812],"fullWord":7777},{"subwords":[1604,1617,2079,2091,2160,2182,5718,5721,7771,7778,7779,7780,7790,7826,7847,7848,12709,12710,17308],"fullWord":7778},{"subwords":[148,183,299,4438,4441,4451,4472,5123,5136,5163,7253,7317,7761,7782,7783,11107,11127,11265,11831,12745],"fullWord":7783},{"subwords":[5123,5139,5172,5179,5180,5188,5221,7460,7782,7785,7786,7826,7828,7833,7841,7844,7847,12493,12501,12509,12512,12560,17262,17323,17383,17389,17397],"fullWord":7786},{"subwords":[4947,5123,5234,7637,7782,7787,7874,18993,19166,19525,19548,20742,20842],"fullWord":7787},{"subwords":[5718,7467,7540,7553,7791,7874,7875,8483,8725,8731,8892,12789,18576,18697,18698,18743,18981,18993],"fullWord":7791},{"subwords":[5718,5721,5950,5988,5989,5992,6004,6874,6879,6885,6893,6940,6955,6959,6961,6964,7103,7106,7107,7109,7788,7789,7790,7792,7793,7855,7857,7867,12798,12799,12979,12982,13007,15114,15134,15141,15610,15611,15676,16431,17419],"fullWord":7793},{"subwords":[5718,5950,5988,5989,6874,6885,6940,6955,6961,7103,7107,7788,7792,7794,7855,12771,12777,12798,12979,15114,15141,15610],"fullWord":7794},{"subwords":[5709,5718,7477,7522,7525,7702,7795,10398,10443,10793,10796,12792,12845],"fullWord":7795},{"subwords":[7578,7582,7604,7611,7797,7798,7818,7820,9307,9360,9366,12509,12511,12512,12560,16815,16858,16866,17383,17389],"fullWord":7798},{"subwords":[5718,5988,5989,5990,7540,7628,7637,7788,7799,7800,7855,7874,8020,8035,8056,9384,12798,12979,12995,13008,15141,15312,15461,15504,15542,15610,15691,15694,15748,18844,18847,18855,18941,18945,18981,18993,19093,19101,19280,19292],"fullWord":7799},{"subwords":[5718,5988,5989,5990,7540,7628,7637,7788,7799,7800,7855,7874,8020,8035,8056,9384,12798,12979,12995,13008,15141,15312,15461,15504,15542,15610,15691,15694,15748,18844,18847,18855,18941,18945,18981,18993,19093,19101,19280,19292],"fullWord":7800},{"subwords":[4728,4774,5114,5123,5125,5146,5172,5176,5179,5718,5756,5865,5953,7477,7478,7493,7525,7680,7782,7801,7802,7815,10378,10398,10427,10443,10444,10780,10781,10783,10793,10796,10822,10826,10827,12493,12499,12504,12509,12752,12792,12793,12837,12838,12845,12876],"fullWord":7802},{"subwords":[4728,4810,5114,5115,5123,5125,5146,5351,5718,5756,5988,5989,7477,7478,7525,7782,7788,7801,7803,7855,7856,10378,10398,10443,10780,10783,10785,10793,10796,10878,10882,12752,12792,12793,12794,12798,12837,12839,12845,12979,15060,15078,15141,15600,15603,15610,15621],"fullWord":7803},{"subwords":[5718,5721,5782,5784,5845,7477,7486,7489,7492,7525,7526,7703,7704,7790,7805,7806,10398,10412,10443,10447,10793,10796,10797,10811,10888,11487,11870,11871,12081,12792,12796,12845,12848,12872,17097,17099,17188,17354,17359,17382],"fullWord":7806},{"subwords":[4697,4728,5114,5123,5125,5146,5718,5756,5765,5950,6406,6740,6793,6795,6874,6885,6902,7477,7478,7525,7782,7801,7807,7808,10378,10398,10443,10780,10783,10793,10796,12752,12792,12793,12837,12845],"fullWord":7808},{"subwords":[5718,5765,5950,5988,5989,6793,6795,6874,6885,6940,6955,6961,7103,7107,7477,7525,7788,7792,7807,7809,7855,10398,10443,10793,10796,10882,12792,12794,12798,12845,12979,15114,15141,15610,15621],"fullWord":7809},{"subwords":[2079,2091,2160,2173,2176,2182,2224,7771,7779,7780,7811,7812,7826,7847,11817,11823,11921,11941,12081,12872,17188,17308],"fullWord":7812},{"subwords":[183,197,200,299,304,605,610,4451,4454,4492,4502,4506,5123,5139,5172,5173,5179,5180,5188,5221,7253,7258,7396,7460,7761,7763,7782,7785,7813,7814,12230,12233,12493,12501,12509,12512,12560,15893,15910,15921,15986,15988,16001,17211,17323,17324,17383,17389],"fullWord":7814},{"subwords":[5718,5721,5894,5918,5953,5955,5988,5989,5992,6000,6004,7493,7511,7788,7789,7790,7815,7816,7817,7855,7857,7867,12347,12506,12509,12512,12548,12556,12560,12561,12798,12799,12876,12879,12979,12982,13007,15141,15238,15610,15611,15676,16345,16391,17272,17383,17389,17419],"fullWord":7817},{"subwords":[4774,5114,5123,5125,5172,5176,5179,5709,5718,5865,5953,7493,7522,7782,7815,7818,7819,12493,12499,12509,12752,12876],"fullWord":7819},{"subwords":[6560,6564,6593,6619,6885,6893,6899,7604,7611,7821,7822,9135,9257,9260,9307,9360,9366,12509,12512,12560,16815,16858,16866,17383,17389],"fullWord":7822},{"subwords":[6885,6893,7823,7824,7826,7836,7838,7841,7844,7847,12509,12512,12560,17383,17389,17397],"fullWord":7824},{"subwords":[7825,7826,7841,7846,8731,8789,8831,8845,12509,12809,12895,13667,14107,14118],"fullWord":7825},{"subwords":[1604,1696,2072,2079,2160,2165,2180,2205,2446,5718,5988,5989,7771,7788,7826,7827,7855,12709,12798,12959,12979,14995,15141,15576,15579,15610],"fullWord":7827},{"subwords":[2058,2070,2079,2093,2160,2300,2302,5123,5140,7771,7781,7782,7826,7828,7829,7834,7895,21154],"fullWord":7829},{"subwords":[4810,5114,5115,5123,5125,5196,5351,5718,5988,5989,7782,7788,7826,7828,7830,7855,7856,12752,12762,12798,12976,12979,15060,15078,15141,15600,15603,15605,15610,15642],"fullWord":7830},{"subwords":[4714,4935,4947,5114,5123,5125,5133,5718,7523,7782,7826,7828,7831,9110,12752],"fullWord":7831},{"subwords":[5123,5140,7782,7784,7801,7826,7828,7832,7834,7895,10793,10809,10813,10833,12767,12837,12858,21154],"fullWord":7832},{"subwords":[4697,5114,5123,5125,5718,5950,6406,6874,6885,6928,7782,7826,7828,7836,7837,12752],"fullWord":7837},{"subwords":[7796,7826,7839,7895,10793,10802,10809,10813,10833,12858],"fullWord":7839},{"subwords":[5718,5988,5989,7788,7826,7840,7855,9384,12798,12979,12995,15141,15461,15610],"fullWord":7840},{"subwords":[5718,5953,7493,7815,7826,7835,7841,7842,7845,7895,12509,12876,21120,21183],"fullWord":7842},{"subwords":[5718,5953,7493,7604,7815,7826,7841,7843,9360,12509,12876],"fullWord":7843},{"subwords":[4826,5114,5117,5123,5125,5127,5139,5221,5223,5718,5721,7460,7782,7785,7790,7826,7828,7833,7847,7848,7849,12752,12755,17323],"fullWord":7849},{"subwords":[5718,5721,6039,7536,7790,7826,7847,7848,7850,16347,17434],"fullWord":7850},{"subwords":[5718,5721,7790,7826,7835,7847,7848,7851,7852,7895,7897,13147,17396,17472,21130],"fullWord":7851},{"subwords":[5718,5988,5989,7788,7853,7855,8051,8549,8552,8575,8725,8728,8731,8845,8846,8848,8857,12798,12916,12979,13516,13577,14147,14262,14350,15141,15248,15386,15610,15663],"fullWord":7853},{"subwords":[299,487,836,905,7293,7316,7361,7364,7375,7391,7396,7764,7767,7854,7939,10109,10115,10181,10211,10212,10793,10811,12680,12683,12948,12950,13007,14758,14773,15673,15910,15921,15942,17003,17099,17303,17354,17356],"fullWord":7854},{"subwords":[4810,5114,5115,5123,5125,5131,5351,5709,5718,5988,5989,7522,7782,7788,7855,7856,7858,7859,8043,12752,12798,12979,15060,15078,15141,15600,15603,15610],"fullWord":7859},{"subwords":[5709,5718,5988,5989,6008,7522,7788,7855,7858,7860,8043,12798,12979,15141,15610,15612],"fullWord":7860},{"subwords":[5709,5715,5718,5721,5988,5989,5992,6004,7522,7788,7789,7790,7855,7857,7858,7861,7867,8043,8044,12798,12799,12979,12982,13007,15141,15610,15611,15676,17419],"fullWord":7861},{"subwords":[5709,5718,5988,5989,5990,7522,7540,7788,7855,7858,7862,7874,8043,8056,12798,12979,13008,15141,15312,15610,15691,15694,15748,18981,18993,19093,19101],"fullWord":7862},{"subwords":[7796,7818,7826,7841,7863,8043,12509,12548],"fullWord":7863},{"subwords":[5718,5988,5989,6008,7788,7855,7864,9384,12798,12979,12995,15141,15461,15469,15610,15612],"fullWord":7864},{"subwords":[7622,7625,7711,7865,7870,7895,8199,10793,10813,10887,12812,12824,12991,12995,15461,15617,15620,21167],"fullWord":7865},{"subwords":[7578,7604,7797,7818,7866,8015,8018,8043,8045,9360,9400,12509,12513,12548,12995,15461,15494],"fullWord":7866},{"subwords":[5718,5721,5988,5989,5992,6004,6039,7536,7788,7789,7790,7855,7857,7867,7868,8055,12798,12799,12800,12979,12982,13007,15141,15610,15611,15676,15679,16347,17419,17424,17434],"fullWord":7868},{"subwords":[5718,5721,6033,7477,7486,7525,7708,7709,7790,7872,10398,10412,10443,10447,10793,10796,10797,10811,10864,10865,10869,10874,10888,12792,12796,12845,12848,12916,12925,12936,13516,13519,13607,14056,14061,14066,14087,14166,17097,17099,17104,17105,17354,17359,17406],"fullWord":7872},{"subwords":[7612,7615,7873,9374,12936,13721,13730,13844,14032,14421,16883,16888,16903,17406,17414,17434],"fullWord":7873},{"subwords":[3272,3328,3429,3665,3965,4239,7637,7874,7875,7876,8612,8688,8714,8731,8739,8892,9440,13038,18743,18823,18993],"fullWord":7876},{"subwords":[5718,5953,7493,7512,7540,7815,7874,7878,12374,12509,12574,12581,12876,18607,18630,18969,18981,18993,19036,19038,19043,19131,19134],"fullWord":7878},{"subwords":[5114,5123,5125,5471,5485,5523,5709,5718,7522,7782,7879,7880,12752],"fullWord":7880},{"subwords":[5709,5718,5988,5989,7522,7788,7855,7858,7879,7881,8043,12798,12979,13051,15141,15610,15614,15706,15709,15777,15790,19855],"fullWord":7881},{"subwords":[5709,5715,5718,5721,7522,7790,7879,7882,18066,19876],"fullWord":7882},{"subwords":[4810,5114,5115,5123,5125,5260,5351,5386,5420,5471,5485,5523,5718,5988,5989,7782,7788,7855,7856,7883,7884,12752,12798,12979,13051,15060,15078,15141,15600,15603,15610,15614,15615,15706,15709,15710,15773,15777,15778,15790,19855,19856],"fullWord":7884},{"subwords":[5123,5139,5216,5221,5260,5420,5421,5485,5488,5523,5524,7460,7782,7785,7883,7885,13007,13051,13052,15600,15609,15790,15794,17323,17451,18060,19846],"fullWord":7885},{"subwords":[5718,5894,5953,5988,5989,7493,7788,7815,7816,7855,7889,7890,8067,12347,12509,12548,12798,12876,12979,13093,13095,15141,15238,15337,15610,15728,20262],"fullWord":7890},{"subwords":[4774,4865,5114,5123,5125,5172,5176,5179,5277,5718,5865,5872,5909,5953,7493,7782,7815,7892,7893,12390,12493,12499,12509,12606,12752,12876,13110,13111,13119,13120,20524,20579,20581,20875,20897],"fullWord":7893},{"subwords":[7871,7895,7896,7897,8678,8731,8737,8739,12810,16758,16805,17472,21166,21167,21171],"fullWord":7896},{"subwords":[263,264,377,382,411,414,829,830,905,7293,7294,7295,7316,7375,7391,7396,7898,7899,7939,10109,10115,14758,14759,14760,14773,15910,15911,15942,17003],"fullWord":7899},{"subwords":[25,1234,1256,1366,1367,1502,2308,2319,2364,7242,7247,7375,7377,7395,7447,7900,7901,7961,14758,14939,15864],"fullWord":7901},{"subwords":[50,269,622,817,1256,1332,1342,1345,1347,1366,1377,1386,1406,1530,1535,1604,1605,1671,1696,2308,2317,2319,2337,5588,5595,5894,5976,5988,7242,7375,7377,7461,7493,7900,7902,12219,12229,12230,12319,12331,14758,14762,14821,14832,14833,14995,15141],"fullWord":7902},{"subwords":[93,94,121,122,269,270,796,800,817,2766,2774,2776,2780,2788,2789,2790,2941,2949,2954,2955,3111,4062,4431,4516,4607,4639,4810,5310,5351,5588,5666,5707,5976,5988,7253,7375,7383,7461,7904,7905,7907,7908,14717,14718,14736,14758,14762,14763,14961,15021,15028,15060,15141],"fullWord":7905},{"subwords":[93,96,121,123,269,279,280,796,810,817,825,905,906,2788,2790,2791,2792,2941,2954,2960,3001,3021,3171,4062,4064,5588,5599,5976,5977,5988,5992,6023,7375,7391,7396,7461,7463,7904,7906,7939,14717,14722,14758,14762,14764,14773,14881,15021,15048,15141,15880,15910,15912,15914,16026,16116,16142,16145,16219,16270,16286,16298,16419],"fullWord":7906},{"subwords":[148,151,269,270,817,4438,4516,4517,4590,4607,4810,5310,5340,5351,5588,5659,5666,5707,5976,5988,7253,7255,7375,7383,7461,7907,7908,7909,14736,14758,14762,14763,14961,14962,15060,15141],"fullWord":7909},{"subwords":[269,270,817,4516,4518,4607,4810,5310,5346,5351,5588,5666,5707,5976,5988,6008,7253,7375,7383,7461,7907,7908,7910,14736,14758,14762,14763,14872,14961,14983,15060,15141,15145],"fullWord":7910},{"subwords":[200,269,270,279,280,817,825,905,906,4516,4520,4607,4611,4707,4810,4826,5310,5313,5351,5353,5588,5599,5666,5707,5708,5976,5977,5988,5992,7253,7258,7375,7383,7391,7396,7460,7461,7463,7907,7908,7911,7912,7939,14736,14751,14758,14762,14763,14764,14773,14881,14882,14961,14965,15060,15087,15141,15893,15910,15912,15914,16026,16270,16286,16419],"fullWord":7911},{"subwords":[254,828,905,911,918,6240,6245,6308,6332,6334,6339,6344,6354,7026,7027,7042,7044,7375,7391,7396,7416,7423,7913,7914,7939,14754,14757,14758,14773,14898,14912,15910,16041,17732,17773,18342,18345,18449,18472,19381],"fullWord":7914},{"subwords":[0,263,283,317,504,505,869,7317,7375,7915,7921,8233,8290,8346,11127,11276,14758,14759,14775,14808],"fullWord":7915},{"subwords":[337,340,349,359,832,860,905,7293,7316,7375,7391,7396,7585,7622,7624,7916,7917,7939,9376,9409,10109,10115,10121,10125,10502,10503,10675,10676,14758,14773,14780,14783,15399,15400,15461,15472,15910,15931,15942,16028,16889,17003,17722],"fullWord":7917},{"subwords":[287,349,359,647,691,905,7283,7287,7375,7391,7396,7604,7611,7626,7743,7918,7919,7939,8015,8019,9307,9376,9378,9409,12230,12233,12276,14758,14773,14784,14786,14821,14832,14838,14839,14890,15461,15472,15494,15497,15910,15986,16001,16028,16815,16858,16866,16889,17211,17722],"fullWord":7919},{"subwords":[287,349,361,633,716,7283,7375,7395,7447,7604,7918,7920,7961,8015,9376,9378,12230,12282,12311,14758,14784,14787,14821,14832,14837,14838,14939,14941,15461,15494,15864,21058,21075,21144],"fullWord":7920},{"subwords":[269,817,869,5588,5976,5988,7317,7323,7326,7340,7375,7461,7489,7530,7921,7922,11127,11128,11276,11286,11288,11437,11487,11539,14758,14762,14808,14975,15141,15202],"fullWord":7922},{"subwords":[869,884,7317,7345,7375,7395,7447,7921,7923,7961,8186,11127,11276,11329,11408,14758,14808,14939,15864,21051],"fullWord":7923},{"subwords":[574,579,869,883,905,961,7317,7342,7365,7373,7375,7391,7396,7408,7921,7924,7925,7926,7939,7940,11127,11140,11270,11275,11276,11314,11330,12078,12081,13286,13321,13336,14240,14241,14403,14758,14773,14808,14816,14818,14820,14851,14866,14891,15747,15910,15973,16014,17476,17494],"fullWord":7925},{"subwords":[269,270,605,608,622,817,4492,4500,4502,4504,4516,4532,4605,4607,4774,4810,5310,5351,5588,5595,5666,5707,5865,5894,5976,5988,7253,7346,7375,7383,7384,7461,7493,7907,7908,7928,7929,12229,12230,12274,12319,12358,14736,14758,14762,14763,14821,14826,14832,14833,14834,14961,15060,15141,15227],"fullWord":7929},{"subwords":[200,605,610,905,4492,4502,4506,4532,4536,5310,5313,7253,7258,7375,7391,7396,7460,7743,7907,7912,7928,7930,7939,12230,12233,12274,14736,14751,14758,14773,14821,14826,14828,14832,15893,15910,15986,15988,16001,17211],"fullWord":7930},{"subwords":[269,622,817,5588,5595,5709,5894,5976,5988,7267,7269,7271,7352,7354,7375,7461,7493,7931,12229,12230,12232,12319,14758,14762,14821,14832,14833,15141],"fullWord":7931},{"subwords":[633,657,716,7375,7395,7447,7932,7961,12230,12252,12282,12311,14758,14821,14832,14837,14939,15864,21058,21075],"fullWord":7932},{"subwords":[634,693,711,905,911,918,7375,7391,7396,7416,7423,7743,7745,7746,7933,7934,7939,12230,12233,14758,14773,14821,14832,14847,14850,14898,14912,15910,15986,16001,16041,17211,17732,17773,18342,18345,18408,18410,18416,18428,18449,18460,18462,18472,19381],"fullWord":7934},{"subwords":[269,279,280,732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,5988,5992,6033,7365,7366,7368,7369,7370,7373,7375,7391,7396,7408,7410,7461,7463,7935,7936,7939,7940,13184,13186,13187,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13516,13519,13577,14262,14281,14403,14758,14762,14764,14773,14851,14852,14856,14866,14881,14891,14979,14982,15141,15248,15272,15305,15910,15912,15914,16014,16026,16270,16286,16419,17476,17494,17495,17499,17523],"fullWord":7936},{"subwords":[325,905,932,961,7365,7373,7375,7391,7396,7399,7408,7937,7938,7939,7940,8233,8237,8321,8324,8351,8354,8362,8367,8934,13286,13321,13336,14403,14758,14773,14775,14851,14866,14886,14891,15910,16014,16513,16556,17476,17494],"fullWord":7938},{"subwords":[905,961,972,973,7365,7373,7375,7391,7396,7408,7411,7939,7940,7941,7942,13286,13321,13336,13344,14403,14758,14773,14851,14866,14891,14894,15910,15923,16014,16020,17476,17494,17504,17507],"fullWord":7941},{"subwords":[905,973,7375,7391,7395,7396,7415,7447,7452,7939,7942,7943,7961,7965,14758,14773,14939,14944,15864,15865,15910,15923,15924,16103,16109,21212],"fullWord":7943},{"subwords":[263,265,269,817,818,911,1009,5588,5620,5976,5982,5988,6055,7375,7416,7417,7461,7540,7944,7945,7946,7972,7990,14758,14759,14762,14898,14899,14901,15141,15312,15748,18342,18449,18453,18541,18554],"fullWord":7945},{"subwords":[269,270,817,911,1009,4516,4537,4551,4553,4607,4810,4812,5310,5327,5351,5588,5620,5666,5707,5976,5982,5988,6055,7253,7375,7383,7416,7417,7418,7461,7540,7907,7908,7946,7947,7972,7990,14736,14758,14762,14763,14898,14901,14902,14961,15060,15141,15312,15318,15748,18339,18342,18449,18450,18453,18454,18541,18554,19205,19233],"fullWord":7947},{"subwords":[269,817,911,1009,5588,5620,5976,5982,5988,6008,6055,7375,7390,7392,7416,7417,7461,7540,7946,7948,7972,7990,14758,14762,14872,14898,14901,14903,14983,15141,15312,15748,18342,18449,18453,18541,18554,18652,18653],"fullWord":7948},{"subwords":[269,279,280,817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,5988,5992,6018,6055,7375,7391,7396,7416,7417,7419,7423,7461,7463,7540,7541,7939,7946,7949,7972,7973,7990,14758,14762,14764,14773,14881,14898,14901,14905,14912,15141,15306,15312,15748,15910,15912,15914,16026,16041,16043,16270,16286,16293,16419,16457,17732,17733,17735,17773,17775,18342,18345,18449,18453,18455,18472,18541,18554,18557,18559,19381],"fullWord":7949},{"subwords":[263,349,852,911,1030,7289,7375,7416,7628,7637,7944,7950,8035,9376,14758,14759,14898,14899,15461,18342,18347,18348,18449,18815,19280],"fullWord":7950},{"subwords":[287,349,693,700,911,7283,7289,7375,7416,7561,7604,7628,7637,7745,7918,7933,7951,8015,8035,9325,9338,9339,9376,9378,12230,12463,14758,14784,14821,14832,14838,14847,14898,14908,15461,15494,18342,18347,18408,18410,18449,18458,18460,18894,18901,19212,19280],"fullWord":7951},{"subwords":[290,349,359,905,911,918,997,7289,7292,7375,7391,7396,7416,7423,7628,7632,7635,7637,7939,7952,8033,8035,8036,9376,9409,9447,14758,14773,14898,14912,15461,15472,15910,16028,16041,16889,16907,16908,17722,17732,17744,17773,17881,17967,18342,18345,18347,18449,18472,18474,18947,19280,19381],"fullWord":7952},{"subwords":[204,269,270,817,1106,1109,1115,4516,4569,4607,4810,4851,5310,5329,5351,5588,5666,5707,5976,5988,7253,7375,7383,7439,7461,7907,7908,7953,7954,14736,14758,14762,14763,14921,14922,14961,15060,15141,15337,19910,19990],"fullWord":7954},{"subwords":[269,399,817,833,1106,1109,1115,5588,5592,5976,5988,7293,7298,7375,7439,7440,7461,7477,7661,7953,7955,10109,10110,10208,10285,10287,10324,10355,10398,10471,10472,14758,14762,14921,14923,14968,15141,15143,15337,19923,19924,19986,20014,20015],"fullWord":7955},{"subwords":[269,622,817,1106,1109,1115,5588,5595,5894,5976,5988,7350,7375,7439,7461,7493,7953,7956,12229,12230,12305,12319,14758,14762,14821,14832,14833,14921,14925,15141,15337,19948,19950,20001],"fullWord":7956},{"subwords":[269,817,1106,1109,1115,5588,5976,5988,6008,7375,7439,7461,7953,7957,14758,14762,14872,14921,14927,14983,15141,15337],"fullWord":7957},{"subwords":[269,279,280,817,825,905,906,1106,1109,1110,1114,1115,5588,5599,5976,5977,5988,5992,7375,7391,7396,7439,7461,7463,7939,7953,7958,14758,14762,14764,14773,14881,14921,14929,15141,15337,15354,15910,15912,15914,16026,16076,16078,16270,16286,16419,19967,20003,20070,20071],"fullWord":7958},{"subwords":[204,326,349,854,1115,1120,4890,4947,5067,5310,7253,7375,7617,7907,7959,7997,9376,14736,14758,14776,15428,15461,20107],"fullWord":7959},{"subwords":[227,269,270,817,1196,4516,4578,4607,4613,4810,4814,5310,5337,5351,5430,5567,5570,5588,5666,5675,5707,5976,5988,7253,7375,7383,7395,7447,7448,7461,7907,7908,7961,7962,7992,8195,8196,14736,14758,14762,14763,14939,14940,14961,14966,15060,15141,15864,15866,21068,21071,21097,21099],"fullWord":7962},{"subwords":[227,269,817,1196,5588,5976,5988,6008,7375,7395,7447,7448,7461,7961,7963,7992,8195,14758,14762,14872,14939,14983,15141,15864,15866,21071,21073,21097,21099],"fullWord":7963},{"subwords":[7293,7375,7395,7447,7451,7664,7961,7964,8193,10109,10304,14758,14939,15864,21094],"fullWord":7964},{"subwords":[213,269,270,817,4516,4584,4607,4810,5310,5351,5588,5666,5707,5976,5988,7253,7375,7383,7453,7455,7456,7461,7907,7908,7966,7967,14736,14758,14762,14763,14945,14946,14961,15060,15141,21230,21249],"fullWord":7967},{"subwords":[269,817,5588,5976,5988,6008,7375,7453,7456,7461,7966,7968,14758,14762,14872,14945,14948,14983,15141,21230],"fullWord":7968},{"subwords":[269,279,280,817,825,905,906,5588,5599,5976,5977,5988,5992,7375,7391,7396,7453,7456,7457,7458,7461,7463,7939,7966,7969,14758,14762,14764,14773,14881,14945,14950,15141,15910,15912,15914,16026,16270,16286,16419,21230,21232],"fullWord":7969},{"subwords":[269,279,280,311,313,817,825,905,906,5583,5584,5588,5599,5605,5609,5976,5977,5978,5984,5988,5992,7375,7391,7396,7461,7463,7467,7473,7939,7970,14758,14762,14764,14773,14881,15141,15148,15910,15912,15914,16024,16026,16270,16286,16319,16340,16419,16425,16433],"fullWord":7970},{"subwords":[227,269,279,280,817,825,905,906,1196,1197,5588,5599,5619,5976,5977,5988,5992,7375,7391,7395,7396,7447,7448,7452,7461,7463,7939,7961,7965,7971,7992,7996,8195,8197,14758,14762,14764,14773,14881,14939,14944,15141,15282,15864,15865,15866,15867,15910,15912,15914,15924,16026,16103,16105,16270,16286,16419,21071,21097,21099,21104,21105,21130,21212],"fullWord":7971},{"subwords":[269,279,280,817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,5988,5992,6018,6055,7375,7391,7396,7416,7417,7419,7423,7461,7463,7540,7541,7939,7946,7949,7972,7973,7990,14758,14762,14764,14773,14881,14898,14901,14905,14912,15141,15306,15312,15748,15910,15912,15914,16026,16041,16043,16270,16286,16293,16419,16457,17732,17733,17735,17773,17775,18342,18345,18449,18453,18455,18472,18541,18554,18557,18559,19381],"fullWord":7973},{"subwords":[269,311,817,1106,1109,1115,5583,5588,5629,5976,5984,5988,6092,6100,7375,7439,7461,7467,7953,7974,14758,14762,14921,14990,15141,15337,19992,19996,20059],"fullWord":7974},{"subwords":[1576,1587,1588,1590,1604,1617,1696,1697,5984,5988,5992,7467,7473,7975,7976,14995,15014,15141,15148,16319,16340,16423,16425,16433],"fullWord":7976},{"subwords":[4120,5984,5988,7467,7978,15021,15141],"fullWord":7978},{"subwords":[4678,4679,4680,4810,4826,5351,5353,5667,5669,5670,5671,5984,5988,5992,7460,7467,7468,7473,7979,7980,15060,15071,15087,15093,15096,15141,15148,16311,16313,16319,16320,16340,16425,16426,16433],"fullWord":7980},{"subwords":[4678,4810,5351,5430,5567,5570,5667,5669,5675,5698,5984,5988,6189,6191,6196,7467,7468,7979,7981,7992,7993,8195,8196,15060,15089,15093,15097,15141,15866],"fullWord":7981},{"subwords":[5740,5742,5984,5988,5992,7467,7471,7472,7473,7982,7983,9826,9828,15103,15105,15141,15148,16319,16326,16340,16425,16433],"fullWord":7983},{"subwords":[5894,5918,5984,5988,5992,5998,6000,7467,7473,7493,7496,7498,7509,7510,7511,7984,7985,12339,15141,15148,16319,16335,16340,16425,16433,17237],"fullWord":7985},{"subwords":[5698,5884,5894,5984,5988,5998,6189,6196,7467,7493,7496,7509,7984,7986,7992,8195,12339,15141,15866,21120],"fullWord":7986},{"subwords":[5723,5724,5984,5988,5992,6018,6046,7467,7473,7537,7540,7541,7987,7988,15141,15148,15290,15306,15312,15748,16319,16340,16425,16433,16457,17823,17840,18576,18588,18658,19240,19242],"fullWord":7988},{"subwords":[5837,5988,7489,7491,7530,7534,7989,7992,8186,8195,11487,11539,15141,15202,15866],"fullWord":7989},{"subwords":[4678,4810,5351,5430,5567,5570,5667,5669,5675,5698,5984,5988,6189,6191,6196,7467,7468,7979,7981,7992,7993,8195,8196,15060,15089,15093,15097,15141,15866],"fullWord":7993},{"subwords":[5698,5984,5988,6008,6189,6196,7467,7992,7994,8195,15141,15866],"fullWord":7994},{"subwords":[5988,7477,7992,7995,8195,10398,10495,11065,11074,15141,15201,15866],"fullWord":7995},{"subwords":[4714,4810,4928,4935,4936,4947,5023,5028,5351,5364,5988,7617,7618,7997,7998,9384,9385,15060,15074,15141,15428,15433,15437,15438,15461],"fullWord":7998},{"subwords":[4714,4810,4826,4935,4939,4947,4956,5023,5028,5029,5037,5351,5353,5367,5716,5988,5992,7460,7617,7621,7997,7999,8000,9111,9127,9384,9385,9389,9409,15060,15087,15141,15428,15433,15436,15437,15439,15443,15461,15472,15526,16780,16889,16890,16891,17722],"fullWord":7999},{"subwords":[5716,5988,5992,6543,6560,6564,6621,6622,6626,6636,7085,7087,7090,8001,8002,9135,9384,9389,9409,15114,15134,15141,15446,15461,15472,15526,16431,16437,16889,16890,17722],"fullWord":8002},{"subwords":[5735,5984,5988,5995,6092,6100,7467,7638,7641,8003,9384,15141,15337,15461,15549,19992,19996,20059,20129,20132],"fullWord":8003},{"subwords":[6560,6564,6621,6636,6637,6647,6651,6654,7087,7090,7575,7577,7628,7632,7635,7637,8004,8005,8033,8035,8036,9135,9409,9447,15458,15460,15461,15472,16801,16889,16907,17722,17881,18947,19280],"fullWord":8005},{"subwords":[5780,5988,7477,7590,7592,7622,8006,8007,9152,9153,9384,10398,10414,10536,10549,10562,10677,15141,15444,15461,15473,15477],"fullWord":8007},{"subwords":[7590,7594,7622,7624,8006,8008,9152,9155,9409,15461,15472,15477,15479,16834,16889,17722],"fullWord":8008},{"subwords":[4714,4810,4818,4935,4938,4947,4971,4972,4973,5023,5028,5351,5830,5988,7489,7530,7617,7997,8009,8010,8011,9109,9384,9385,11487,11539,11626,11633,11649,11743,11744,15060,15141,15202,15428,15433,15437,15461,15480,15481,15482],"fullWord":8011},{"subwords":[5716,5830,5831,5845,5988,5992,7489,7492,7530,7533,8009,8010,8012,9384,9389,9409,9422,11487,11539,11649,11654,11743,11745,11764,11765,12081,15141,15202,15224,15461,15472,15480,15481,15484,15489,15526,16375,16889,16890,17722],"fullWord":8012},{"subwords":[7622,7625,7688,8009,8013,8014,8186,10584,10618,11649,11659,11755,15461,15480,15490],"fullWord":8013},{"subwords":[4947,4956,4985,4993,4999,5007,5037,7460,7604,7611,7617,7621,7626,7997,8000,8015,8016,8017,8019,9127,9307,9409,15428,15443,15461,15472,15491,15493,15494,15497,16815,16858,16866,16889,17722],"fullWord":8017},{"subwords":[7578,7604,7797,7818,7866,8015,8018,8043,8045,9360,9400,12509,12513,12548,12995,15461,15494],"fullWord":8018},{"subwords":[7627,7628,7632,7635,7637,7874,8020,8021,8033,8035,8036,8056,8057,9409,9447,12995,13007,13008,13011,15461,15472,15504,15507,15691,15700,16889,16907,17429,17435,17722,17881,18945,18946,18947,18993,19001,19093,19113,19114,19280,19292,19294,19313],"fullWord":8021},{"subwords":[4714,4810,4935,4947,5014,5023,5028,5351,5377,5988,7612,7617,7997,8022,8023,8024,9384,9385,13478,13516,13577,13705,13710,13712,13721,14262,14303,14306,14311,15060,15076,15141,15248,15428,15433,15437,15461,15508,15509],"fullWord":8024},{"subwords":[5988,6008,7612,8022,8023,8025,9384,13516,13577,13705,13712,13721,14262,14307,14311,15141,15248,15461,15508,15509,15513],"fullWord":8025},{"subwords":[5716,5988,5992,6033,7612,7615,8022,8023,8026,8030,9384,9389,9409,13516,13519,13577,13588,13705,13712,13715,13716,13721,13730,14262,14281,14309,14311,14312,14336,14403,14421,15141,15248,15272,15305,15461,15472,15508,15509,15514,15524,15526,16883,16889,16890,17565,17591,17661,17722],"fullWord":8026},{"subwords":[5988,7612,7992,8022,8023,8027,8031,8188,8195,9384,13516,13577,13705,13712,13721,14262,14290,14311,14410,14576,15141,15248,15461,15508,15509,15866,21127,21146,21147],"fullWord":8027},{"subwords":[5988,7612,7614,8022,8023,8028,9384,13516,13569,13577,13705,13712,13721,13813,13815,13817,14262,14278,14311,15141,15248,15461,15508,15509],"fullWord":8028},{"subwords":[7612,8022,8029,8031,8188,13721,13813,13829,14311,14410,15461,15508,21146],"fullWord":8029},{"subwords":[7622,7624,7625,8032,9409,15461,15472,16889,17149,17722,21212],"fullWord":8032},{"subwords":[7628,7632,7635,7636,7637,8033,8034,8035,8036,9409,9447,15461,15472,16889,16899,16903,16907,16915,17722,17881,17882,18947,19280],"fullWord":8034},{"subwords":[7628,7637,8035,8037,15461,18950,19280,19377,19389],"fullWord":8037},{"subwords":[299,304,837,838,905,909,7375,7391,7396,7743,7939,8038,8039,12230,12233,12509,12512,12548,12560,12680,12683,12951,12953,12983,12985,13007,14758,14773,14821,14832,15568,15569,15673,15910,15921,15986,16001,16031,17211,17303,17383,17384,17389],"fullWord":8039},{"subwords":[299,840,841,905,911,918,7375,7391,7396,7416,7422,7423,7768,7770,7874,7939,8040,8041,8056,8057,12680,12683,12686,12692,13007,13008,13011,14758,14773,14898,14912,15574,15673,15691,15700,15910,15921,16041,17303,17429,17435,17732,17773,17885,18342,18345,18432,18435,18449,18463,18464,18472,18993,18994,18997,19001,19093,19094,19097,19113,19381],"fullWord":8041},{"subwords":[3665,3898,3900,5718,5988,5989,6008,7788,7855,7977,8042,12798,12965,12979,15021,15141,15592,15610,15612],"fullWord":8042},{"subwords":[7604,7611,7626,7627,8015,8019,8045,8046,9307,9360,9366,9400,9405,9409,12509,12512,12513,12548,12560,12995,13007,15461,15472,15494,15497,15684,15685,16815,16821,16858,16866,16889,17383,17389,17722],"fullWord":8046},{"subwords":[7826,7847,8047,8048,11921,11936,11939,11941,12081,12872,13007,15627,15638,15652,15655,17188],"fullWord":8048},{"subwords":[5718,5988,5989,7788,7826,7855,7889,8049,8067,12798,12979,13095,15141,15337,15610,15728],"fullWord":8049},{"subwords":[7826,7870,7889,7895,8050,8199,12991],"fullWord":8050},{"subwords":[4810,5114,5115,5123,5125,5200,5202,5215,5351,5402,5718,5988,5989,7782,7788,7855,7856,8051,8052,12752,12798,12916,12979,13478,13486,13516,13577,14020,14147,14148,14262,14350,14357,15060,15078,15141,15248,15600,15603,15610,15663,15664],"fullWord":8052},{"subwords":[5718,5988,5989,6008,7788,7855,8051,8053,12798,12916,12979,13516,13577,14147,14262,14350,15141,15248,15271,15610,15612,15663,15665],"fullWord":8053},{"subwords":[5718,5721,5988,5989,5992,6004,6033,7788,7789,7790,7855,7857,7867,8051,8054,12798,12799,12916,12925,12936,12979,12982,13007,13516,13519,13577,13607,14147,14149,14166,14168,14262,14281,14350,14364,14383,14384,14403,15141,15248,15272,15305,15610,15611,15663,15668,15676,17406,17419,17638],"fullWord":8054},{"subwords":[7826,7874,8056,8058,13008,13043,15659,15691,15697,18993,19000,19060,19066,19093,19106,19117,19131,19143,19331],"fullWord":8058},{"subwords":[3370,3384,3665,3977,4312,8059,8714,8731,8857,8906,8951,12965,12968,13044,13051,15386,15592,15712,15790,19583],"fullWord":8059},{"subwords":[5123,5172,5179,5260,5420,5485,5507,5513,5523,5539,7759,7782,7883,8060,8151,12493,12509,12548,13051,15600,15714,15790,15821,15824,19664,19866],"fullWord":8060},{"subwords":[8061,8062,12936,12945,13007,13051,13052,14220,14223,14350,14364,14383,14403,14449,14451,14551,15790,15794,17406,17447,17451,17687,18135,19825],"fullWord":8062},{"subwords":[5718,5721,5988,5989,5992,6004,7788,7789,7790,7855,7857,7867,8063,12798,12799,12979,12982,13007,13051,13052,15141,15610,15611,15614,15616,15676,15706,15708,15709,15711,15716,15777,15782,15790,15794,15840,17419,17451,18066,18071,18150,18160,19855,19860,19876,19880],"fullWord":8063},{"subwords":[7874,7886,7887,8056,8057,8064,8065,8171,8173,8175,8176,13007,13008,13011,13051,13052,13055,13059,13082,15691,15700,15720,15722,15727,15790,15794,15852,15858,15861,17429,17435,17451,18993,19001,19093,19113,19121,19155,19158,19418,19421],"fullWord":8065},{"subwords":[7870,7874,7886,7888,7895,8056,8064,8066,8175,8180,8199,12991,13008,13051,13059,15691,15722,15790,15858,18993,19093,19122,19155,19186,19347,19377,19418,19573,21172,21193,21196,21226],"fullWord":8066},{"subwords":[4810,5114,5115,5123,5125,5267,5268,5351,5408,5718,5988,5989,7782,7788,7855,7856,7889,8067,8068,12752,12798,12979,13095,15060,15078,15141,15337,15600,15603,15610,15728,15729],"fullWord":8068},{"subwords":[5718,5988,5989,7477,7525,7714,7716,7788,7855,7889,8067,8069,10398,10443,10471,10488,10793,10796,10882,10935,10938,12792,12794,12798,12845,12979,13095,15141,15337,15610,15621,15728,20250,20251],"fullWord":8069},{"subwords":[5718,5721,5988,5989,5992,6004,7788,7789,7790,7855,7857,7867,7889,8067,8070,12798,12799,12979,12982,13007,13095,13099,15141,15337,15354,15610,15611,15676,15728,15732,16453,17419,20070,20077],"fullWord":8070},{"subwords":[5718,5988,5989,6008,7788,7855,7991,8071,8072,12798,12979,13110,15141,15161,15610,15612,15734,15741,20875,20933],"fullWord":8072},{"subwords":[7718,7721,8071,8073,8074,8077,10793,10811,10942,10952,13007,13114,13118,15734,15744,17099,17121,17354,17464],"fullWord":8074},{"subwords":[7711,7718,7870,7895,8071,8073,8075,8199,10793,10813,10887,10942,12991,13114,15734,21010,21202,21207],"fullWord":8075},{"subwords":[7874,7875,8056,8071,8078,8731,8857,8892,8920,13008,13009,15386,15691,15734,18743,18749,18777,18786,18993,19093,19166,19343,19548,20689,20953,20954,21009],"fullWord":8078},{"subwords":[2505,2537,2610,2615,2667,2710,8079,8080,8180,15749,15765,15790,15791,19840],"fullWord":8080},{"subwords":[4810,5351,5420,5471,5485,5709,5988,8082,15060,15141,15773,15777,15778,15790,15792,19855,19856],"fullWord":8082},{"subwords":[5988,5992,7477,7486,7722,7724,7725,7726,8083,8084,10398,10412,10470,10981,10982,10983,10986,11029,11033,15141,15777,15782,15790,15794,15800,15804,15840,17128,17131,17141,18066,18071,18150,18160,19855,19860,19876,19880],"fullWord":8084},{"subwords":[7130,7132,7159,7194,7206,8085,8086,8109,8110,15783,15788,15790,15794,18155],"fullWord":8086},{"subwords":[7130,7140,7194,7207,8085,8087,8109,8180,15783,15790],"fullWord":8087},{"subwords":[8088,8089,8145,8150,12078,12081,12104,12107,14403,14449,14451,14551,15747,15790,15794,15806,15815,15818,15820,17201,17687,18103,18114,18135,19624,19628,19825],"fullWord":8089},{"subwords":[8088,8090,8145,8180,8186,8188,12078,12104,14410,14449,15747,15790,15806,15815,19624,21224],"fullWord":8090},{"subwords":[7759,8091,8151,8153,8180,15790,15821,15824,19866],"fullWord":8091},{"subwords":[7759,7760,8092,8093,8151,8160,8171,8175,8176,12659,12663,15790,15794,15821,15824,15825,15832,15833,15834,15852,15858,15861,17292,17991,18005,18006,18117,18125,19418,19421,19434,19452,19476,19480,19866,19867],"fullWord":8093},{"subwords":[287,657,7283,7604,7759,8096,8151,9297,12230,12252,12651],"fullWord":8096},{"subwords":[299,304,636,712,7396,7759,7760,8097,8098,8151,8160,12230,12233,12509,12512,12560,12597,12888,15910,15921,15986,16001,17211,17292,17383,17389,18117,18125,19871],"fullWord":8098},{"subwords":[200,847,905,1053,5310,5313,5420,5421,5485,5488,7253,7258,7375,7391,7396,7427,7428,7460,7907,7912,7939,8099,8100,8101,8102,14736,14751,14758,14773,15790,15794,15893,15910,18080,19846,19868,19871],"fullWord":8101},{"subwords":[1115,7396,8103,8104,15910,15911,19871,19918,20290],"fullWord":8104},{"subwords":[5984,5988,6008,7467,8105,15141,15777,15780,15790,19855,19858],"fullWord":8105},{"subwords":[6039,7539,7540,7541,8106,8107,8108,8170,8171,8174,8175,8176,16457,16464,18066,18073,18074,18075,19418,19421,19876,19882],"fullWord":8108},{"subwords":[257,287,596,7283,7604,7759,8111,8151,9141,12230],"fullWord":8111},{"subwords":[4714,4928,4935,4936,4947,5466,5467,5471,5485,8112,8113,9449],"fullWord":8113},{"subwords":[4714,4810,4935,4947,5023,5028,5351,5420,5471,5485,5988,7617,7997,8112,8114,9384,9385,9449,15060,15141,15428,15433,15437,15461,15773,15777,15778,15790,19855,19856],"fullWord":8114},{"subwords":[4714,4826,4849,4935,4939,4947,4956,5037,5471,5478,5485,5488,5716,7460,8112,8115,8127,8128,9111,9127,9449,9450,16780,18066,18067,18083,19876,19877],"fullWord":8115},{"subwords":[4947,4985,4993,4998,5123,5142,5172,5179,5485,5507,5513,5523,7604,7759,7782,8116,8151,9360,9369,9449,12493,12509,12758,13048,19664],"fullWord":8116},{"subwords":[4947,4956,5037,5485,5488,7460,7586,7589,8117,8118,9127,9449,9450,10530,10535,10981,10986,17068,17131,18083,19585,19589],"fullWord":8118},{"subwords":[4714,4728,4739,4935,4947,5471,5472,5485,5756,7477,7478,7484,7586,7684,7722,7723,8112,8117,8119,8120,9117,9449,10378,10398,10414,10470,10530,10536,10537,10552,10981,10982,19585],"fullWord":8120},{"subwords":[5716,7477,7486,7722,7726,8119,8121,8127,9416,10398,10412,10414,10415,10470,10536,10551,10552,10981,10982,10983,10986,17128,17131,18066,18083,19585,19589,19876],"fullWord":8121},{"subwords":[7596,7597,7635,7637,7733,7736,8122,8123,8171,8175,8176,9447,10686,10691,10707,10981,10986,11044,16840,16907,16917,17093,17131,17147,18083,18085,18863,18947,19418,19421,19585,19589,19605],"fullWord":8123},{"subwords":[7596,7637,7733,8122,8124,8175,8180,10691,10981,18863,19418,19585,19590,19605],"fullWord":8124},{"subwords":[269,287,315,5627,7283,7493,7604,7759,8125,8151,12229,12230],"fullWord":8125},{"subwords":[4714,4826,4849,4935,4939,4947,4956,5037,5471,5478,5485,5488,5716,7460,8112,8115,8127,8128,9111,9127,9449,9450,16780,18066,18067,18083,19876,19877],"fullWord":8128},{"subwords":[5716,6039,8106,8127,8129,9431,16903,18066,18073,18083,19876,19882],"fullWord":8129},{"subwords":[349,911,7289,7375,7416,7628,7637,8035,8099,8130,8175,9376,14758,14898,15461,15790,15858,18342,18347,18449,18508,19280,19418],"fullWord":8130},{"subwords":[4728,4774,5471,5472,5485,5507,5511,5513,5756,5865,7477,7478,7493,7680,7722,7723,7759,8131,8151,10378,10398,10427,10470,10981,10982,11008,11012,11013,11014,12624,12629,19717],"fullWord":8131},{"subwords":[4728,5471,5472,5485,5756,5765,6406,6501,6740,6821,6824,6825,7149,7153,7477,7478,7722,7723,8132,8133,10378,10398,10470,10981,10982],"fullWord":8133},{"subwords":[4728,4744,5471,5472,5485,5492,5756,5780,7477,7478,7722,7723,8135,8136,10378,10398,10470,10981,10982],"fullWord":8136},{"subwords":[5780,7477,7487,7540,7722,7733,8135,8137,8175,10398,10460,10470,10981,10982,11050,18591,19418,19425,19605],"fullWord":8137},{"subwords":[5780,7477,7722,7727,8135,8138,8140,8180,10398,10470,10495,10981,10982,11065,19590,21110,21222],"fullWord":8138},{"subwords":[4728,5471,5472,5485,5525,5526,5533,5756,7477,7478,7722,7723,8141,8142,10378,10398,10470,10981,10982,13478,13516,13950,13987,14438,14449,14454,14455],"fullWord":8142},{"subwords":[5988,7477,7722,7724,8083,8141,8143,10398,10470,10981,10982,11029,13516,13577,13602,13987,14262,14449,14454,14456,14518,14525,14536,15141,15248,15777,15790,15800,19855],"fullWord":8143},{"subwords":[2079,2091,2092,2537,2545,2567,2576,2668,7771,7780,8145,8146,8147,8150,11817,11823,12081,12104,12107,12872,17188,17201,17308,18035,18103,18112],"fullWord":8147},{"subwords":[4711,5471,5485,5846,7489,7545,8145,8148,11487,12091,12104,12127],"fullWord":8148},{"subwords":[5846,5988,7489,7530,7545,8145,8149,11487,11539,12104,12127,15141,15202,15777,15790,15806,19855],"fullWord":8149},{"subwords":[5123,5172,5179,5485,5486,5507,5513,5523,7759,7782,7818,8151,8152,8153,12493,12509,19664],"fullWord":8152},{"subwords":[586,657,673,7317,7759,8095,8145,8151,8155,11127,11213,12104,12230,12244,12252,12651,19727],"fullWord":8155},{"subwords":[5846,7489,7493,7545,7759,8145,8151,8156,11487,11512,11534,12104,12651],"fullWord":8156},{"subwords":[4774,5471,5485,5507,5511,5513,5865,7493,7759,8151,8157,12624,12629,12651],"fullWord":8157},{"subwords":[7477,7493,7680,7722,7759,8151,8158,10398,10470,10981,10982,11008,11012,11013,12651],"fullWord":8158},{"subwords":[5894,5988,7493,7759,8151,8159,12651,15141,15777,15790,15821,15822,15824,19855,19866],"fullWord":8159},{"subwords":[5918,7477,7486,7493,7511,7518,7680,7681,7722,7726,7759,7760,8151,8160,8161,10398,10412,10433,10470,10981,10982,10983,10986,11008,11009,11012,11013,11017,11018,12348,17128,17131,17139,17292,18066,18117,18125,19876],"fullWord":8161},{"subwords":[5709,5988,7477,7722,7724,8083,8162,10398,10470,10981,10982,10985,11029,15141,15777,15790,15800,19855],"fullWord":8162},{"subwords":[5894,5988,7493,7759,7992,8151,8163,8180,8195,15141,15777,15790,15821,15822,15824,15866,19855,19866,21120],"fullWord":8163},{"subwords":[4826,4849,5471,5478,5485,5488,7460,8166,8167,8945,8946,8947,8951,8952,8958,16574,16581,18066,18067,19583,19584,19592,19876,19877],"fullWord":8167},{"subwords":[5988,5992,8166,8168,8552,8584,8934,8945,8947,8951,8952,8954,8958,15141,15777,15782,15790,15794,15840,15842,16574,16739,18066,18071,18150,18160,19583,19584,19592,19855,19860,19876,19880,19883],"fullWord":8168},{"subwords":[6039,8106,8166,8169,8945,8947,8951,8952,8958,16574,16609,18066,18073,19583,19584,19592,19876,19882],"fullWord":8169},{"subwords":[6039,7539,7540,7541,8106,8107,8108,8170,8171,8174,8175,8176,16457,16464,18066,18073,18074,18075,19418,19421,19876,19882],"fullWord":8170},{"subwords":[4826,4849,5471,5478,5479,5480,5485,5488,5548,7460,7540,7541,8107,8171,8172,8175,8176,16457,17999,18066,18067,18074,18575,19418,19421,19876,19877],"fullWord":8172},{"subwords":[5471,5479,5485,7540,8175,8178,19418,19493],"fullWord":8178},{"subwords":[5988,7540,8175,8179,15141,15312,15748,15777,15790,15858,19356,19418,19493,19855,19900],"fullWord":8179},{"subwords":[596,716,7447,7759,8151,8180,8181,12230,12311,21058,21215],"fullWord":8181},{"subwords":[7578,7604,7759,8151,8153,8180,8182,21144],"fullWord":8182},{"subwords":[7477,7722,8184,10398,10470,10981,10982],"fullWord":8184},{"subwords":[4263,4268,4269,4639,4865,5455,5471,5485,8185,20524],"fullWord":8185},{"subwords":[5567,5675,8188,8189,13478,13516,13569,14237,21127],"fullWord":8189},{"subwords":[5988,7992,8188,8190,8195,13516,13569,13577,14262,14278,14290,14410,14576,15141,15248,15866,21127],"fullWord":8190},{"subwords":[8145,8150,8180,8183,8186,8187,8188,8191,8192,12078,12081,12104,12107,14449,14451,14551,17201,17682,17697,18103,18114,18135,19624,19628,19825,21224],"fullWord":8192},{"subwords":[227,269,817,911,919,1009,1196,5588,5620,5976,5982,5988,6055,7375,7395,7416,7417,7447,7448,7461,7540,7946,7961,7972,7990,7992,8194,8195,14758,14762,14898,14901,14939,15141,15312,15748,15864,15866,18342,18449,18453,18541,18554,18558,19231,19257,19377,19570,21071,21097,21099,21135],"fullWord":8194},{"subwords":[7578,7604,8015,8198,15461,15494,21144],"fullWord":8198},{"subwords":[5718,5721,5988,5989,5992,6004,7788,7789,7790,7855,7857,7867,7869,7870,7895,7897,7992,7996,8195,8197,8199,8200,8201,12798,12799,12979,12982,12991,13007,13145,13146,13147,15141,15610,15611,15676,15690,15866,15867,17419,17472,21130,21189,21190,21212],"fullWord":8201},{"subwords":[7578,7604,8204,9453,20152,20168,20296,21144],"fullWord":8204},{"subwords":[0,2,5,9,67,317,325,931,932,1210,1215,1269,1422,1425,1431,8205,8362,16270,16574],"fullWord":8205},{"subwords":[43,337,385,399,1269,1272,1301,1307,1636,1817,1903,5769,8206,8241,8258,8445,8500,8625,10061,10324,10414,10504,10536],"fullWord":8206},{"subwords":[67,72,325,932,1269,1270,1271,1282,1285,1422,1431,1456,1462,1468,1474,1482,1763,1881,1889,8207,8208,8362,8371,8378,8391,8678,8685,8688,8691,8935,9447,15926,15938,16041,16559,16653,16765,16907,17723,18302,18318,18347,18540,18684,18742,18947],"fullWord":8208},{"subwords":[93,94,98,99,2766,2807,2808,3172,4431,4639,4651,5582,8209,8210,8217,8256,8440,8474],"fullWord":8210},{"subwords":[93,98,2807,3243,5582,5740,8209,8211,8256,8474,8483],"fullWord":8211},{"subwords":[93,98,121,796,801,817,867,2807,2941,2954,3206,3209,4107,5582,5588,5976,8209,8212,8256,8333,8340,8453,8474,8552,14717,14729,14775,14798,14958,15021,15376],"fullWord":8212},{"subwords":[93,98,2807,3272,3273,3402,5582,8209,8213,8256,8474,8612,8614,8625,8636,9079],"fullWord":8213},{"subwords":[93,98,399,2807,2813,2822,3186,3255,5582,5778,8209,8214,8256,8258,8445,8474,9760,10072,10073,10082,10128,10324,10325,10338,10373,10416],"fullWord":8214},{"subwords":[105,2812,2813,2822,3100,3186,3188,3487,8209,8215,8420,10072,10082,10089,10135,10304,21041,21047],"fullWord":8215},{"subwords":[148,326,327,328,4438,4590,4714,4928,4935,4936,5659,8217,8218,8440,8617,8619,8620,8625,8626,9103],"fullWord":8218},{"subwords":[287,326,605,4492,4502,4890,4947,4985,4993,7253,7283,7347,7604,8217,8220,8233,8298,8304,8617,8649,12230,12429],"fullWord":8220},{"subwords":[171,4726,8217,8221,8222,8440,8483,8484,9471,9536],"fullWord":8222},{"subwords":[171,200,325,932,934,4543,4614,4726,4826,8217,8219,8221,8223,8362,8440,8443,9471,9472,9536,15893,16270,16503,16504,16574,16581],"fullWord":8223},{"subwords":[171,200,325,326,336,932,4461,4543,4901,5037,5046,8217,8221,8224,8225,8250,8251,8362,8366,8617,8678,9127,9474,9480,9584,9585,15893,15928,16503],"fullWord":8225},{"subwords":[183,195,605,4492,4532,5172,5173,8217,8226,8298,8327,8696,8697,8721,8789,8791,8857,8858,8867,12274,12480,12493,12548,12680,14736,14749,14775,14821,14826,15386,15561,15568,15600],"fullWord":8226},{"subwords":[254,1009,4447,4551,4595,4615,4683,4701,5620,5705,6055,6230,6231,6344,6347,6348,6399,6406,6485,8217,8229,8230,8378,8381,8382,8440,8461,8492,18339,18541,18697],"fullWord":8230},{"subwords":[254,255,817,828,911,1009,5588,5600,5620,5705,5976,5982,6055,6308,6317,6332,6344,6347,6350,6392,6399,6485,7042,7073,8229,8231,8333,8360,8378,8381,8383,8453,8458,8461,8492,8552,14754,14775,14898,14901,15114,15135,15312,15376,15748,18449,18453,18541,18554,18697,19243],"fullWord":8231},{"subwords":[269,270,5707,5709,7253,7267,7269,7270,8217,8233,8234,8440],"fullWord":8234},{"subwords":[325,932,7267,7280,7396,7399,7578,7579,7582,8233,8235,8237,8362,8678,15910,16513,16805],"fullWord":8235},{"subwords":[269,399,5709,7267,7269,7293,7298,7477,8233,8236,8258,8445,10109,10324,10398],"fullWord":8236},{"subwords":[326,327,337,338,399,4466,4601,4714,4728,4738,4739,4891,4935,5756,5769,8217,8241,8242,8258,8259,8265,8440,8445,8500,8509,8617,8619,8625,8626,9103,9104,9117,10090,10093,10119,10324,10327,10378,10414,10530,10536,10537],"fullWord":8242},{"subwords":[337,349,399,817,857,5588,5592,5769,5976,8241,8243,8245,8258,8260,8333,8445,8453,8500,8503,8552,8625,8672,9376,9384,10121,10324,10355,10414,10502,10536,10549,10675,10677,14775,14780,14968,15376,15399,15444,15473],"fullWord":8243},{"subwords":[183,326,349,854,8217,8245,8246,8327,8617,8696,8697,8721,8739,8857,8858,9102,9376,12680,14736,14743,14775,14776,15386,15428,15561,15600],"fullWord":8246},{"subwords":[326,327,329,349,351,817,854,4516,4599,4607,4714,4810,4935,5023,5588,5976,8217,8245,8247,8327,8333,8334,8440,8453,8454,8503,8552,8558,8617,8619,8621,8625,8626,8672,8673,9103,9376,9384,9385,14736,14775,14776,14961,15060,15376,15428,15433],"fullWord":8247},{"subwords":[325,932,8252,8253,8362,16270,16574],"fullWord":8253},{"subwords":[325,932,8250,8251,8252,8254,8255,8362,8678,9480],"fullWord":8255},{"subwords":[325,399,407,817,825,905,906,932,5588,5592,5593,5599,5976,5977,8258,8260,8261,8262,8333,8338,8362,8445,8448,8453,8456,8552,8584,8934,10207,10228,10231,10233,10324,10355,10360,10365,14775,14805,14881,14886,14968,14973,15376,15377,15942,15948,16270,16274,16286,16419,16420,16524,16549,16574,16577],"fullWord":8261},{"subwords":[325,399,407,488,932,1009,5616,5620,5626,6055,8228,8258,8262,8263,8280,8283,8362,8371,8373,8378,8381,8385,8391,8445,8448,8461,8467,8586,8935,10231,10241,10247,10257,10258,10261,10262,10324,10360,10365,10366,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16524,16529,16559,16574,17022,17023,17750,17811,18341,18370,18374,18541,18547,18548,18559,18660,18697],"fullWord":8263},{"subwords":[326,327,337,338,399,4466,4601,4714,4728,4738,4739,4891,4935,5756,5769,8217,8241,8242,8258,8259,8265,8440,8445,8500,8509,8617,8619,8625,8626,9103,9104,9117,10090,10093,10119,10324,10327,10378,10414,10530,10536,10537],"fullWord":8265},{"subwords":[287,337,416,426,7283,7293,7585,7604,8233,8241,8266,8304,10109,10120,10637,12230,12238,12429,12438],"fullWord":8266},{"subwords":[337,399,434,488,1009,5620,5769,6055,8241,8258,8267,8280,8378,8381,8445,8461,8500,8625,8645,8688,9437,10126,10247,10257,10258,10324,10414,10460,10536,10691,10694,10698,10699,18347,18349,18370,18541,18547,18684,18697,18844,18863,18866],"fullWord":8267},{"subwords":[0,317,442,443,8239,8268,8269],"fullWord":8269},{"subwords":[0,317,442,443,475,8268,8270,8271,8276,12856],"fullWord":8271},{"subwords":[442,8268,8270,8272,8276,8766,10833,12809,12856,12895],"fullWord":8272},{"subwords":[325,442,461,487,932,8268,8270,8273,8275,8276,8279,8362,10181,10231,12810,12856,12857,15942,16527,16667,17354],"fullWord":8273},{"subwords":[442,457,1155,1164,8268,8270,8274,8276,8409,8920,8925,10292,10942,12856,13114,20378,20599,20689,20690],"fullWord":8274},{"subwords":[183,322,399,472,4466,4601,4728,4881,5114,5146,5756,8217,8258,8259,8276,8277,8319,8440,8445,8509,8721,8725,8726,8749,8754,8755,10090,10093,10324,10327,10378,10443,10730,10780,12752,12802,12837,12845],"fullWord":8277},{"subwords":[325,399,407,472,473,487,932,8258,8262,8276,8278,8279,8319,8320,8362,8445,8448,8725,8730,8754,8757,8881,10181,10231,10324,10360,10365,10443,10447,10888,12810,12845,12848,15942,15948,16270,16274,16524,16574,16602,16667,16676,17097,17354,17359],"fullWord":8278},{"subwords":[399,488,1009,4466,4468,4551,4601,4604,4615,4728,4747,5620,5756,6055,8217,8258,8259,8280,8281,8378,8381,8382,8440,8445,8461,8509,10090,10093,10247,10248,10257,10258,10259,10324,10327,10378,10460,18339,18370,18541,18547,18697],"fullWord":8281},{"subwords":[399,405,488,491,817,911,1009,5588,5592,5600,5620,5976,5982,6055,8258,8260,8280,8282,8333,8360,8378,8381,8383,8445,8453,8458,8461,8552,10247,10254,10257,10258,10260,10324,10355,10460,14775,14898,14901,14968,15312,15376,15748,18370,18372,18449,18453,18541,18547,18554,18697],"fullWord":8282},{"subwords":[0,317,8239,8284,8285,10281,19923],"fullWord":8285},{"subwords":[0,2,317,325,382,932,8284,8286,8362,10231,10281,10284,15942,17029,19923],"fullWord":8286},{"subwords":[204,399,1106,4466,4569,4601,4728,4851,5756,8217,8258,8259,8287,8288,8400,8440,8445,8509,10090,10093,10285,10286,10324,10327,10378,10471,10472,19910,19923,19924,19986,19990,20014,20017],"fullWord":8288},{"subwords":[325,399,407,932,1106,1114,8258,8262,8287,8289,8362,8400,8405,8445,8448,10231,10285,10289,10324,10360,10365,10471,10472,15942,15948,15966,16076,16270,16274,16524,16560,16574,17029,17030,19923,19924,19925,19935,19967,19986,19987,20014],"fullWord":8289},{"subwords":[319,399,488,1009,5620,5782,6055,8258,8280,8290,8291,8378,8381,8445,8461,8519,8532,10136,10145,10247,10257,10258,10324,10460,11173,11180,11192,11361,11362,11369,11437,11442,11456,11502,11574,11575,11576,18370,18389,18393,18541,18547,18549,18595,18697,18705,18967],"fullWord":8291},{"subwords":[319,4472,4475,5658,8217,8290,8292,8440,8532,11107,11115,11437,11438],"fullWord":8292},{"subwords":[319,817,869,5588,5976,8290,8293,8333,8336,8346,8453,8532,8552,11276,11286,11437,11539,14775,14808,14975,15202,15376],"fullWord":8293},{"subwords":[319,574,732,735,817,869,5588,5956,5976,8290,8295,8321,8333,8336,8346,8351,8450,8453,8532,8537,8549,8552,11270,11276,11286,11437,11539,12079,13286,13294,13439,13455,13577,13593,13642,14240,14262,14775,14808,14816,14851,14852,14975,14979,15202,15209,15248,15376,15747],"fullWord":8295},{"subwords":[148,605,4438,4492,4500,4590,4605,4774,5659,5865,8217,8298,8299,8440,8540,12229],"fullWord":8299},{"subwords":[399,605,4466,4492,4500,4601,4605,4728,4774,5745,5746,5756,5865,8217,8258,8259,8298,8300,8301,8440,8445,8509,8540,10090,10093,10095,10169,10174,10324,10327,10344,10378,10427,12229],"fullWord":8300},{"subwords":[399,605,4466,4492,4500,4601,4605,4728,4774,5745,5746,5756,5865,8217,8258,8259,8298,8300,8301,8440,8445,8509,8540,10090,10093,10095,10169,10174,10324,10327,10344,10378,10427,12229],"fullWord":8301},{"subwords":[0,263,283,317,596,7375,7549,7927,8233,8304,8305,12230,14758,14759,14775,14821,14832],"fullWord":8305},{"subwords":[269,270,605,4492,4500,4502,4605,4774,5707,5865,7253,7493,8217,8233,8298,8304,8306,8440,8540,12229,12230],"fullWord":8306},{"subwords":[269,622,817,5588,5595,5894,5976,5988,7375,7461,7493,8233,8304,8307,8333,8453,8540,8552,12229,12230,12319,14758,14762,14775,14821,14832,14833,15141,15162,15376],"fullWord":8307},{"subwords":[7365,7759,8151,8233,8304,8309,8321,8951,8989,8990,9002,12230,12257,13239,13251,14449,14484,19583],"fullWord":8309},{"subwords":[605,651,4492,4500,4509,4605,4774,5865,8217,8256,8298,8310,8311,8440,8540,9836,9876,9968,12229,12243],"fullWord":8311},{"subwords":[651,817,867,5588,5595,5976,8256,8310,8312,8333,8340,8342,8453,8540,8552,9785,9836,9855,9876,12229,12277,12319,14775,14798,14821,14840,15376],"fullWord":8312},{"subwords":[369,651,8256,8310,8313,8540,8625,8636,9276,9836,9876,9913,9919,12229],"fullWord":8313},{"subwords":[325,399,407,932,935,5745,5748,5918,8258,8262,8316,8362,8445,8448,8540,8547,10174,10175,10231,10324,10344,10348,10360,10365,10433,12229,15942,15948,15986,15995,16270,16274,16524,16574],"fullWord":8316},{"subwords":[325,932,8290,8296,8317,8362,8789,11213,11245,11247,11265,11330,11335,11345,11810,11812,11813,11891,11915,12244,12480,12522,12527,12560,12565,12806,12808,12810,12872,15973,15986,16531,16664,17378,17383],"fullWord":8317},{"subwords":[325,399,407,472,473,487,932,8258,8262,8276,8278,8279,8319,8320,8362,8445,8448,8725,8730,8754,8757,8881,10181,10231,10324,10360,10365,10443,10447,10888,12810,12845,12848,15942,15948,16270,16274,16524,16574,16602,16667,16676,17097,17354,17359],"fullWord":8320},{"subwords":[732,762,5956,8321,8323,8450,8540,8549,12229,12257,12259,12317,13239,13245,13268,13439,13453,13539,13569],"fullWord":8323},{"subwords":[0,2,317,325,905,932,973,8325,8362,8934,14775,14886,16021,16033],"fullWord":8325},{"subwords":[33,51,793,1269,1366,2029,2030,2308,2446,8326,8696,8705,8857,8858,12680,12959,14775,15386,15570,15576],"fullWord":8326},{"subwords":[605,608,817,4492,4500,4516,4532,4605,4607,4774,4810,5588,5595,5865,5976,8217,8298,8327,8328,8333,8334,8440,8453,8454,8540,8552,8558,12229,12274,12319,12358,14736,14775,14821,14826,14961,15060,15227,15376],"fullWord":8328},{"subwords":[817,4516,4518,4607,4810,5346,5588,5976,6008,8217,8327,8329,8333,8334,8440,8453,8454,8552,8558,8583,14736,14775,14872,14961,14983,15060,15376],"fullWord":8329},{"subwords":[4578,5337,5430,8217,8327,8330,8332,8420,9036,10090,10108,10202,10206,10304,14736,14775,14939,15864,21068],"fullWord":8330},{"subwords":[319,526,817,869,5588,5976,5984,8290,8333,8335,8336,8346,8453,8483,8532,8534,8552,8562,11276,11286,11437,11539,11543,14775,14808,14975,15167,15202,15376],"fullWord":8335},{"subwords":[319,320,325,817,825,869,883,905,906,932,5588,5599,5845,5976,5977,8290,8296,8333,8336,8337,8338,8346,8349,8362,8453,8456,8532,8539,8552,8584,8934,11276,11286,11287,11314,11315,11317,11330,11333,11335,11337,11437,11453,11539,11560,11563,14775,14808,14820,14881,14886,14975,14978,15202,15224,15376,15377,15973,15978,16270,16278,16286,16419,16531,16533,16549,16574,16577,17161],"fullWord":8337},{"subwords":[287,349,7283,7375,7604,7918,8015,8233,8245,8304,8339,9376,9378,12230,12429,14758,14775,14784,14821,14832,14838,15461,15494],"fullWord":8339},{"subwords":[817,867,4516,4522,4607,4810,5316,5355,5588,5976,8217,8256,8327,8333,8334,8340,8341,8440,8453,8454,8552,8558,14736,14775,14798,14799,14961,15060,15376],"fullWord":8341},{"subwords":[651,817,867,5588,5595,5976,8256,8310,8312,8333,8340,8342,8453,8540,8552,9785,9836,9855,9876,12229,12277,12319,14775,14798,14821,14840,15376],"fullWord":8342},{"subwords":[319,399,817,869,5588,5592,5782,5976,8258,8260,8290,8333,8336,8344,8346,8445,8453,8519,8532,8552,10136,10145,10150,10324,10355,11173,11180,11276,11286,11303,11437,11442,11539,14775,14808,14968,14971,14975,15202,15376],"fullWord":8344},{"subwords":[488,494,495,911,8276,8280,8345,8360,8378,8696,8770,8857,8858,8861,8892,10257,10745,10897,10898,12680,12686,12690,12948,13008,13009,14775,14898,15386,15691,18432,18449,18463,18743,18749,18777,19093,19094,19095],"fullWord":8345},{"subwords":[319,817,869,871,4472,4475,4516,4607,4810,4818,4819,5318,5342,5588,5658,5976,8217,8290,8327,8333,8334,8336,8346,8347,8440,8453,8454,8532,8552,8558,11107,11115,11120,11276,11286,11437,11438,11539,14736,14775,14808,14961,14975,15060,15202,15376],"fullWord":8347},{"subwords":[319,817,869,872,5588,5976,6008,8290,8333,8336,8346,8348,8453,8532,8552,8583,11276,11286,11437,11539,14775,14808,14872,14975,14983,14986,15202,15376],"fullWord":8348},{"subwords":[183,322,8217,8276,8327,8350,8696,8697,8721,8749,8857,8858,8861,10090,10202,10730,10878,12680,12837,12948,14736,14775,15386,15561,15600],"fullWord":8350},{"subwords":[732,733,735,817,4516,4607,4810,5323,5588,5956,5976,8217,8321,8327,8333,8334,8351,8352,8440,8450,8453,8454,8549,8552,8558,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,14262,14736,14775,14851,14852,14853,14961,14979,15060,15248,15376],"fullWord":8352},{"subwords":[732,735,817,5588,5956,5976,6008,8321,8333,8351,8353,8450,8453,8549,8552,8583,13286,13294,13297,13439,13455,13577,14262,14775,14851,14852,14854,14872,14979,14983,15248,15376],"fullWord":8353},{"subwords":[325,349,359,905,932,8245,8248,8356,8362,8678,8934,9376,9409,14775,14886,16028,16646,16889,16897,17722],"fullWord":8356},{"subwords":[902,8357,8409,8696,8857,8858,8920,12680,14775,14933,15386,15570,15734,20410,20599,20689,20690],"fullWord":8357},{"subwords":[200,325,932,934,4543,4614,4826,8217,8219,8239,8240,8362,8363,8364,8440,8443,15893,16270,16503,16504,16516,16574,16581],"fullWord":8364},{"subwords":[325,932,936,973,6039,8239,8240,8362,8363,8365,16033,16270,16291,16516,16517,16574,16609],"fullWord":8365},{"subwords":[200,325,732,733,739,779,932,934,961,4543,4614,4826,5956,6033,8217,8219,8321,8324,8362,8367,8368,8440,8443,8450,8452,8549,13171,13177,13336,13439,13461,13478,13488,13643,13644,15893,16014,16270,16503,16504,16543,16544,16574,16581,17476,17481,17530],"fullWord":8368},{"subwords":[325,399,407,932,936,973,6039,8258,8262,8362,8370,8445,8448,10230,10231,10234,10236,10324,10360,10365,10453,15942,15948,15950,16033,16270,16274,16277,16291,16524,16526,16574,16609,17021],"fullWord":8370},{"subwords":[200,325,932,934,1009,4543,4551,4555,4614,4615,4616,4826,5616,5620,5626,6055,8217,8219,8227,8228,8362,8371,8373,8374,8378,8381,8382,8385,8391,8440,8443,8461,8467,8586,8935,15893,16041,16043,16044,16270,16293,16457,16503,16504,16559,16574,16581,17806,18339,18340,18541,18559,18575,18697],"fullWord":8374},{"subwords":[325,693,694,697,711,932,935,1009,1011,5616,5620,5626,5918,6055,6074,6075,8228,8318,8362,8371,8373,8375,8378,8381,8385,8391,8461,8467,8540,8547,8548,8586,8935,12229,12289,12325,12328,12330,12368,12374,12376,12612,15986,15995,16041,16043,16270,16293,16399,16457,16559,16574,18408,18428,18541,18559,18607,18624,18686,18687,18688,18697,18708,18710],"fullWord":8375},{"subwords":[325,932,936,973,982,990,1009,5616,5618,5620,5626,6039,6055,8228,8362,8371,8373,8376,8378,8381,8385,8391,8461,8467,8586,8935,16033,16041,16043,16046,16270,16291,16293,16296,16457,16464,16559,16574,16609,17786,18487,18541,18559,18697],"fullWord":8376},{"subwords":[51,72,1269,1270,1462,1468,2029,2037,2237,2242,2292,8378,8379,8701,8705,8892,12686,12690,18302,18432,18528,18743],"fullWord":8379},{"subwords":[325,817,825,905,906,911,918,932,993,1009,5588,5599,5600,5601,5616,5620,5626,5976,5977,5982,6018,6055,8228,8333,8338,8360,8361,8362,8371,8373,8378,8381,8383,8384,8385,8391,8453,8456,8458,8460,8461,8467,8552,8584,8586,8934,8935,14775,14881,14886,14898,14901,14905,14912,15306,15312,15376,15377,15748,16041,16043,16270,16286,16293,16419,16457,16549,16559,16574,16577,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,18697,19224,19381],"fullWord":8384},{"subwords":[254,488,1060,6344,6363,6373,6717,6821,8229,8264,8280,8378,8386,8394,8960,9026,10257,18508,19412,19605,19892],"fullWord":8386},{"subwords":[287,693,700,7283,7289,7416,7551,7561,7604,7637,7745,8233,8304,8378,8388,8660,8688,9325,12230,12429,12433,12463,12612,18342,18347,18408,18410,18684,18686,18731,18733,18894,18901],"fullWord":8388},{"subwords":[693,700,781,8321,8378,8389,8660,8664,8688,9203,9325,12257,12453,12463,12612,13193,13197,13239,13261,13364,13375,13651,13765,13799,13800,13850,13851,13855,18347,18408,18436,18684,18686,18731,18894,18926],"fullWord":8389},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4612,4615,4810,4812,5327,5588,5600,5620,5976,5982,6055,8217,8327,8333,8334,8360,8378,8381,8382,8383,8390,8440,8453,8454,8458,8461,8552,8558,14736,14775,14898,14901,14902,14961,15060,15312,15318,15376,15748,18339,18449,18450,18453,18454,18541,18554,18697,18765,19205,19233],"fullWord":8390},{"subwords":[1009,4551,4615,5620,6055,8217,8378,8381,8382,8392,8440,8461,18339,18495,18498,18541,18565,18691,18697,18719],"fullWord":8392},{"subwords":[817,911,1009,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8393,8453,8458,8461,8552,14775,14898,14901,15312,15376,15748,18449,18453,18476,18495,18498,18499,18541,18554,18565,18672,18691,18697,18719,18766,19235],"fullWord":8393},{"subwords":[399,1053,1072,4466,4601,4728,5442,5471,5472,5627,5756,8217,8258,8259,8394,8395,8440,8445,8509,8945,8946,8960,10090,10093,10270,10271,10324,10327,10378,10470],"fullWord":8395},{"subwords":[399,817,5588,5592,5627,5976,8258,8260,8333,8394,8396,8445,8453,8552,8945,8960,9004,10324,10355,10470,11029,14775,14968,15376,15777,15800,19837,19847,19848],"fullWord":8396},{"subwords":[325,693,711,712,932,1074,1076,8318,8362,8371,8378,8391,8398,8399,8935,8989,8997,8998,9001,9026,9027,12300,12612,12659,12663,15986,16041,16559,16748,16750,16753,18005,18117,18408,18428,18508,18686,18802,19434,19435,19436,19452,19486,19592,19687,19688,19871,19892],"fullWord":8399},{"subwords":[325,932,935,1106,1114,5918,6091,8362,8400,8401,8402,8405,8540,8547,12229,12305,12308,15986,15995,16076,16270,16560,16562,16574,19948,19950,19952,19957,19967],"fullWord":8402},{"subwords":[325,817,825,905,906,932,1106,1109,1110,1114,5588,5599,5976,5977,8333,8338,8362,8400,8403,8404,8405,8453,8456,8552,8584,8934,14775,14881,14886,14921,14929,15337,15354,15376,15377,16076,16078,16270,16286,16419,16549,16560,16563,16574,16577,19967,20070,20071],"fullWord":8404},{"subwords":[287,1115,7283,7604,8233,8304,8406,12230,12429,19920,19948,20107,20152],"fullWord":8406},{"subwords":[325,932,3025,3201,3944,8362,8407,8408,8714,12810,13087,15880,17316],"fullWord":8408},{"subwords":[287,1154,1158,7283,7604,7747,8233,8304,8409,8411,12230,12429,20326,20349,20393,20399,20599,20610,20646,20742,20774,20790],"fullWord":8411},{"subwords":[1145,1147,4574,4865,8217,8256,8409,8410,8412,8413,8440,8588,20303,20309,20361,20362,20497,20524,20599],"fullWord":8413},{"subwords":[817,867,1145,5588,5976,8256,8333,8340,8409,8412,8414,8453,8552,8588,10055,14775,14798,14933,15376,20361,20365,20410,20417,20423,20497,20510,20599,20979],"fullWord":8414},{"subwords":[325,817,825,905,906,932,1145,1150,5588,5599,5976,5977,8333,8338,8362,8409,8416,8417,8418,8453,8456,8552,8584,8588,8594,8934,14775,14881,14886,14933,14938,15281,15360,15376,15377,16089,16091,16270,16286,16419,16475,16549,16574,16577,16610,16724,18220,20410,20417,20419,20442,20449,20450,20452,20510,20512,20599],"fullWord":8418},{"subwords":[325,932,936,973,1145,1150,6039,8362,8409,8416,8417,8419,8588,8594,16033,16089,16096,16270,16291,16475,16482,16571,16574,16609,16610,16614,18210,20449,20450,20453,20599],"fullWord":8419},{"subwords":[227,325,817,825,905,906,932,944,1196,1197,5588,5599,5619,5976,5977,8333,8338,8362,8420,8423,8424,8425,8428,8453,8456,8552,8584,8607,8934,14775,14881,14886,14939,14944,15282,15376,15377,15864,15865,15866,15867,16103,16105,16270,16286,16419,16549,16572,16574,16577,16758,16759,21071,21097,21098,21099,21104,21105,21130,21212],"fullWord":8424},{"subwords":[287,716,7283,7447,7604,8233,8304,8420,8426,9044,12230,12311,12429,21058,21144],"fullWord":8426},{"subwords":[324,8290,8409,8420,8427,8788,8920,9032,11265,11399,11408,11420,12066,12806,20493,20599,20607,20689,20690,20694,20712,21051,21079,21202],"fullWord":8427},{"subwords":[0,213,317,8217,8327,8429,14736,14775],"fullWord":8429},{"subwords":[325,399,407,932,8258,8262,8362,8430,8431,8432,8435,8445,8448,10231,10314,10316,10324,10360,10365,15942,15948,16270,16274,16524,16574,21241,21243],"fullWord":8432},{"subwords":[325,817,825,905,906,932,5588,5599,5976,5977,8333,8338,8362,8430,8433,8434,8435,8453,8456,8552,8584,8934,14775,14881,14886,14945,14950,15376,15377,16270,16286,16419,16549,16574,16577],"fullWord":8434},{"subwords":[349,817,5588,5976,8245,8333,8430,8433,8436,8453,8503,8552,8625,8672,9376,9384,9455,14775,14945,15376,21233],"fullWord":8436},{"subwords":[337,8241,8420,8437,8439,10304,10322],"fullWord":8437},{"subwords":[287,7283,7604,8233,8304,8438,12230,12313,12429,21230,21269,21276],"fullWord":8438},{"subwords":[148,4438,4590,4667,5659,8217,8440,8441,8483,8484],"fullWord":8441},{"subwords":[164,817,4516,4607,4678,4810,5588,5589,5976,5984,8217,8327,8333,8334,8440,8442,8453,8454,8483,8484,8552,8558,8562,14736,14775,14961,15060,15093,15376],"fullWord":8442},{"subwords":[399,401,4466,4601,4728,4731,5691,5756,8217,8258,8259,8440,8445,8446,8483,8484,8488,8509,10090,10093,10324,10327,10378,10383],"fullWord":8446},{"subwords":[399,401,817,5588,5592,5691,5976,5984,8258,8260,8333,8445,8447,8453,8483,8488,8552,8562,10324,10355,10383,10388,14775,14968,15107,15376],"fullWord":8447},{"subwords":[399,488,1009,5620,6055,8239,8258,8280,8378,8381,8387,8445,8449,8461,8464,10247,10257,10258,10324,10460,18370,18541,18547,18697],"fullWord":8449},{"subwords":[732,733,4673,5956,8217,8321,8440,8450,8451,8483,8484,8549,13171,13439,13478,13489,13490],"fullWord":8451},{"subwords":[817,5588,5976,5984,6008,8333,8453,8455,8483,8552,8562,8583,14775,14872,14983,15164,15376],"fullWord":8455},{"subwords":[325,817,825,905,906,932,5588,5599,5605,5609,5976,5977,5978,5984,8333,8338,8362,8453,8456,8457,8483,8552,8562,8568,8584,8934,14775,14881,14886,15376,15377,16024,16270,16286,16319,16340,16419,16425,16549,16574,16577,16587],"fullWord":8457},{"subwords":[817,911,1009,5588,5600,5620,5976,5982,6055,8239,8333,8360,8378,8381,8383,8387,8453,8458,8459,8461,8464,8552,14775,14898,14901,15312,15376,15748,18449,18453,18541,18554,18697],"fullWord":8459},{"subwords":[325,817,825,905,906,911,918,932,993,1009,5588,5599,5600,5601,5616,5620,5626,5976,5977,5982,6018,6055,8228,8333,8338,8360,8361,8362,8371,8373,8378,8381,8383,8384,8385,8391,8453,8456,8458,8460,8461,8467,8552,8584,8586,8934,8935,14775,14881,14886,14898,14901,14905,14912,15306,15312,15376,15377,15748,16041,16043,16270,16286,16293,16419,16457,16549,16559,16574,16577,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,18697,19224,19381],"fullWord":8460},{"subwords":[1009,4551,4615,5620,6055,8217,8378,8381,8382,8440,8461,8462,8483,8484,18339,18541,18576,18577,18697,18698],"fullWord":8462},{"subwords":[229,817,826,911,1009,5588,5600,5620,5622,5976,5982,5984,6055,6066,8333,8360,8378,8381,8383,8453,8458,8461,8463,8483,8552,8562,8563,14775,14898,14901,15165,15312,15376,15748,18449,18453,18541,18554,18576,18697,18698,18712,18767,19240],"fullWord":8463},{"subwords":[325,932,1009,5616,5620,5626,6055,8228,8239,8240,8362,8363,8371,8373,8378,8381,8385,8387,8391,8461,8464,8465,8467,8586,8935,16041,16043,16270,16293,16457,16516,16559,16574,16579,18541,18559,18697],"fullWord":8465},{"subwords":[1009,1196,5620,6055,8239,8378,8381,8387,8420,8461,8464,8466,8607,18541,18697,18724,18806,21097,21098,21135],"fullWord":8466},{"subwords":[204,1106,4569,4851,5629,5630,6087,6092,8217,8400,8440,8468,8469,8483,8484,19910,19990,19992],"fullWord":8469},{"subwords":[1106,5629,6092,6093,8400,8401,8468,8470,8483,8540,12229,12305,12339,19948,19950,19992],"fullWord":8470},{"subwords":[817,1106,1109,5588,5629,5976,5984,6092,6100,8333,8400,8403,8453,8468,8471,8483,8552,8562,14775,14921,14990,15337,15376,19992,19996],"fullWord":8471},{"subwords":[325,932,1106,1114,5605,5629,5631,6092,6104,8362,8400,8405,8468,8472,8483,16076,16270,16319,16560,16574,16580,19967,19992,20000],"fullWord":8472},{"subwords":[1576,1587,2396,5984,6118,6119,8473,8483,8552,8554,8562,8588,8590,14995,20519,20521,20532,20587,20623,20639],"fullWord":8473},{"subwords":[3243,5691,5740,5778,8474,8475,8483,8488,9812,10373,10383,10384,10386,10416],"fullWord":8475},{"subwords":[3272,3275,3328,3429,3430,6057,6058,6068,8477,8612,8625,8688,9079,9440,18570,18697,18823,18844],"fullWord":8477},{"subwords":[3161,3260,3361,3898,3965,3968,5641,6057,6058,8478,8552,8575,8714,8725,8728,8857,8892,12724,12727,12965,12968,12979,13008,13009,13036,15021,15052,15312,15317,15386,15592,15610,15691,15694,15748,18570,18697,18743,18749,18777,18781,18981,19093,19098,19099,19101,19309],"fullWord":8478},{"subwords":[4667,5667,5668,7467,7468,7553,8479,8480,8483,8484],"fullWord":8480},{"subwords":[4678,4810,5351,5667,5669,5984,5988,7467,7468,7553,7979,8479,8481,8483,8484,8552,8558,8562,15060,15093,15141],"fullWord":8481},{"subwords":[4680,4826,5667,5671,7460,7467,7468,7473,7553,7554,8479,8482,8483,8484,8486,16313,16319,16320,16574,16581],"fullWord":8482},{"subwords":[4678,4810,5984,8483,8484,8485,8552,8558,8562,15060,15093],"fullWord":8485},{"subwords":[1145,6118,8239,8409,8483,8487,8588,20532,20599,20623],"fullWord":8487},{"subwords":[4728,4731,5691,5756,8483,8484,8488,8489,8509,10378,10383],"fullWord":8489},{"subwords":[5691,5984,8483,8488,8490,8552,8562,10383,10388,15107,15166],"fullWord":8490},{"subwords":[4701,5705,6406,6409,6412,6420,6489,6490,8483,8484,8492,8493,18576,18577,18697,18698],"fullWord":8493},{"subwords":[5705,5984,6066,6409,6420,6489,7057,7073,8483,8492,8494,8552,8562,15098,15114,15135,15312,15748,18576,18697,18698,18712,18767,19240,19243],"fullWord":8494},{"subwords":[269,349,817,5588,5976,5988,7375,7461,8233,8245,8333,8453,8496,8503,8552,8625,8672,9376,9384,14758,14762,14775,15141,15150,15376,15461],"fullWord":8496},{"subwords":[5735,5984,5995,6409,6543,6621,6622,7057,8483,8497,8503,8552,8562,8625,8672,9384,15098,15114,15446],"fullWord":8497},{"subwords":[5730,5731,7540,7637,8498,8499,8625,8630,8633,8688,18697,18729,18844],"fullWord":8499},{"subwords":[4714,4728,4731,4738,4739,4935,5691,5756,5769,5771,8483,8484,8488,8500,8501,8509,8617,8619,8625,8626,9108,9117,10378,10383,10414,10530,10536,10537],"fullWord":8501},{"subwords":[4678,4714,4810,4935,5023,5725,5735,5984,5995,8483,8484,8503,8504,8552,8558,8562,8617,8619,8621,8625,8626,8672,8673,9108,9384,9385,15060,15093,15428,15433],"fullWord":8504},{"subwords":[6039,8506,8507,8586,8625,8628,8678,8681,8685,8687,8688,8691,8935,9447,16457,16464,16574,16609,16619,16620,16651,16653,16654,16903,16907,16911,16913,16915,17857,18697,18718,18742,18844,18850,18947],"fullWord":8507},{"subwords":[349,817,5588,5976,8245,8250,8333,8453,8503,8508,8552,8625,8672,9376,9384,9480,9508,14775,15376],"fullWord":8508},{"subwords":[5769,8500,8502,8510,8511,8625,8628,8678,8725,8730,8739,8740,8754,8757,8760,8881,9416,10414,10415,10443,10447,10536,10551,10888,12810,12812,12822,12845,12848,16574,16602,16676,16837,17097,17350,17354,17359,17364],"fullWord":8511},{"subwords":[5769,5782,5846,8500,8512,8519,8532,8625,8648,8945,8970,9145,10414,10470,10536,10552,10584,10595,11659,11668,12110],"fullWord":8512},{"subwords":[4728,4731,4744,5691,5756,5780,8483,8484,8488,8509,8513,8514,10378,10383],"fullWord":8514},{"subwords":[5691,5780,5984,8483,8488,8513,8515,8552,8562,10383,10388,15107],"fullWord":8515},{"subwords":[5780,5781,8513,8516,8517,8518,8725,8730,8754,8757,8881,10443,10447,10888,12810,12845,12848,16368,16574,16597,16602,16676,17097,17354,17359],"fullWord":8517},{"subwords":[4671,4728,4731,5691,5756,5782,8483,8484,8488,8509,8519,8520,8532,8534,10378,10383,11478,11492],"fullWord":8520},{"subwords":[5691,5782,6064,8483,8488,8519,8521,8532,8534,10383,10460,10463,11483,11502,11574,11578,18576,18579,18595,18697,18698,18705,18706,18967],"fullWord":8521},{"subwords":[6071,8523,8524,8586,8725,8730,8754,8757,8770,8771,8881,8887,8889,8892,8896,8897,8901,8935,10443,10447,10459,10460,10465,10888,10896,10897,10898,10901,12810,12845,12848,16457,16574,16602,16676,16704,16705,17097,17113,17114,17354,17359,17435,17903,18697,18743,18744,18745,18758,18981,18985,19017,19123],"fullWord":8524},{"subwords":[4673,4728,4731,5691,5756,8483,8484,8488,8509,8525,8526,8549,10378,10383,13478,13489,13490,13495,13950],"fullWord":8526},{"subwords":[5691,5984,8483,8488,8525,8527,8549,8552,8562,10383,10388,10448,13489,13495,13506,13577,13583,14262,15107,15248,15259],"fullWord":8527},{"subwords":[4728,4731,4753,5691,5756,6092,8483,8484,8488,8509,8529,8530,10378,10383,10471,19992,20017],"fullWord":8530},{"subwords":[5691,5693,5790,5798,6092,6104,8483,8488,8491,8529,8531,10383,10392,10451,10471,16319,16574,16600,19992,20000],"fullWord":8531},{"subwords":[4671,8483,8484,8532,8534,8535,11478],"fullWord":8535},{"subwords":[5984,8483,8532,8534,8536,8552,8562,11539,11543,15167,15202],"fullWord":8536},{"subwords":[8483,8532,8534,8537,8538,8540,8549,11512,12079,12339,13489,13499,13539],"fullWord":8538},{"subwords":[1671,1685,1721,1837,1881,1884,8540,8541,8625,8660,8688,9325,12331,12374,12406,12463,12612,18607,18697,18708,18731,18732,18844,18894,18898],"fullWord":8541},{"subwords":[325,657,663,932,935,5918,8362,8540,8543,8544,8547,12229,12252,15986,15995,16270,16389,16574],"fullWord":8544},{"subwords":[5918,6000,8540,8545,8546,8547,8552,8584,8607,8934,15866,15867,16574,16758,16759,18287,18293,21120,21122,21130,21212],"fullWord":8546},{"subwords":[93,98,126,732,781,1009,2921,2922,3052,3202,3205,3229,3236,3238,5582,5620,5956,6055,6057,6058,8321,8378,8381,8450,8461,8549,8550,13154,13155,13168,13364,13365,13367,13375,13438,13439,13443,13464,13613,18323,18436,18437,18541,18543,18570,18697],"fullWord":8550},{"subwords":[161,732,733,781,1009,4551,4615,4805,4806,5620,5956,6055,8217,8321,8378,8381,8382,8440,8450,8461,8549,8551,13171,13364,13367,13368,13375,13439,13464,13478,13613,18339,18436,18437,18438,18541,18697],"fullWord":8551},{"subwords":[396,399,817,4466,4516,4601,4607,4728,4810,5588,5592,5756,5976,8217,8258,8259,8260,8327,8333,8334,8440,8445,8453,8454,8509,8552,8553,8558,10090,10093,10097,10202,10324,10327,10355,10378,14736,14775,14961,14968,15060,15376],"fullWord":8553},{"subwords":[43,44,385,399,817,1269,1301,1304,1366,1377,1535,1636,1903,1915,1933,2308,2317,5588,5592,5976,8258,8260,8333,8445,8453,8552,8554,8555,10061,10324,10355,14775,14968,14995,15376],"fullWord":8555},{"subwords":[4667,4678,4810,5984,8483,8484,8552,8558,8559,8562,15060,15069,15093],"fullWord":8559},{"subwords":[4678,4810,5984,6008,6012,8483,8484,8552,8558,8560,8562,8583,15060,15093],"fullWord":8560},{"subwords":[229,817,826,911,1009,5588,5600,5620,5622,5976,5982,5984,6055,6066,8333,8360,8378,8381,8383,8453,8458,8461,8463,8483,8552,8562,8563,14775,14898,14901,15165,15312,15376,15748,18449,18453,18541,18554,18576,18697,18698,18712,18767,19240],"fullWord":8563},{"subwords":[1576,1587,1589,1749,2721,2730,5698,5984,6189,6196,8483,8552,8554,8557,8562,8564,8607,14995,15866],"fullWord":8564},{"subwords":[5735,5984,5995,5996,5998,8483,8503,8540,8552,8562,8565,8625,8672,9272,9384,9387,12339,15175,15383],"fullWord":8565},{"subwords":[5950,5984,6409,6874,6940,6955,7057,7103,8483,8552,8562,8566,8575,8725,8728,8857,12979,15098,15114,15386,15610],"fullWord":8566},{"subwords":[5953,5984,5998,8483,8540,8552,8562,8567,8575,8579,8725,8728,8789,8793,8795,8857,8867,12339,12548,12876,12979,15238,15386,15610],"fullWord":8567},{"subwords":[5698,5984,6189,6196,6197,6198,8483,8552,8562,8568,8569,8584,8607,8934,15866,15867,16319,16340,16425,16574,16587,16758,16759,21130,21212],"fullWord":8569},{"subwords":[5984,6066,8483,8552,8562,8570,8575,8587,8725,8728,8857,8892,12979,13008,13009,13036,15312,15386,15610,15691,15694,15748,18576,18697,18698,18712,18743,18749,18767,18777,18781,18981,19093,19101,19240],"fullWord":8570},{"subwords":[319,528,817,869,5588,5595,5976,8290,8333,8336,8346,8453,8532,8533,8540,8552,8571,11213,11218,11276,11286,11437,11446,11512,11539,12229,12244,12245,12248,12319,14775,14808,14821,14975,15202,15207,15376],"fullWord":8571},{"subwords":[5845,5984,8483,8532,8534,8539,8552,8562,8568,8572,8584,8934,11539,11543,11546,11563,15167,15168,15202,15224,16319,16330,16340,16425,16574,16587],"fullWord":8572},{"subwords":[5830,5832,8503,8532,8552,8573,8625,8648,8672,8688,9384,9444,11539,11553,11574,11743,11752,11786,11787,11792,15202,15217,15312,15480,15481,15542,15748,18595,18644,18697,18701,18705,18714,18844,18847,18882,18886,18889,18941,18967,19285],"fullWord":8573},{"subwords":[349,817,5588,5595,5976,5996,8245,8333,8453,8503,8540,8552,8574,8625,8672,9376,9378,9384,12229,12319,14775,14784,14821,14838,15175,15376,15383],"fullWord":8574},{"subwords":[5984,6004,6005,8483,8552,8562,8568,8575,8576,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8934,12810,12979,12982,13007,15386,15610,15611,15676,16319,16340,16425,16574,16587,16676,16678,16697,17419],"fullWord":8576},{"subwords":[3272,3340,3361,3672,3693,3898,5641,8503,8552,8575,8577,8612,8625,8672,8714,8725,8728,8739,8857,9079,9086,9384,12724,12727,12965,12968,12979,15021,15171,15386,15411,15416,15417,15592,15610],"fullWord":8577},{"subwords":[5953,5996,8503,8540,8552,8575,8578,8579,8625,8672,8725,8728,8739,8789,8793,8795,8857,8867,9360,9384,9400,12513,12514,12548,12876,12979,15175,15238,15383,15384,15386,15610],"fullWord":8578},{"subwords":[5918,5953,5955,6000,6004,8540,8547,8552,8575,8579,8580,8581,8584,8725,8728,8729,8730,8789,8793,8795,8796,8797,8857,8867,8871,8874,8875,8881,8934,12506,12548,12556,12560,12561,12565,12567,12810,12876,12879,12979,12982,13007,15238,15386,15610,15611,15676,16386,16391,16574,16676,16678,16685,16697,16700,17272,17383,17419],"fullWord":8580},{"subwords":[5984,6033,8483,8549,8552,8562,8568,8582,8584,8934,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,15248,15272,15305,16319,16336,16340,16425,16574,16586,16587,17548,17658],"fullWord":8582},{"subwords":[5984,6066,8483,8552,8562,8570,8575,8587,8725,8728,8857,8892,12979,13008,13009,13036,15312,15386,15610,15691,15694,15748,18576,18697,18698,18712,18743,18749,18767,18777,18781,18981,19093,19101,19240],"fullWord":8587},{"subwords":[5984,6118,6119,6120,6121,8483,8552,8562,8568,8584,8588,8590,8591,8594,8934,15292,16319,16340,16425,16475,16478,16574,16587,16610,16612,16724,20532,20587,20623,20639,20640],"fullWord":8591},{"subwords":[6122,7493,7604,8540,8588,8592,8593,8625,8655,12350,12390,12429,20556,20579,20635,20646,20656,20742,20774,20785,20790],"fullWord":8592},{"subwords":[200,325,932,934,1167,1168,1173,4543,4614,4826,8217,8219,8362,8440,8443,8595,8596,8597,15893,16098,16270,16483,16503,16504,16574,16581],"fullWord":8597},{"subwords":[1167,8483,8540,8595,8598,12229,12339],"fullWord":8598},{"subwords":[5984,6144,8483,8552,8562,8568,8584,8595,8599,8600,8601,8934,15373,15374,16319,16340,16425,16483,16574,16587],"fullWord":8600},{"subwords":[7493,7604,8540,8595,8602,8625,8655,12350,12429,12474],"fullWord":8602},{"subwords":[5953,8483,8540,8595,8603,8725,8789,8793,12339,12876,13130],"fullWord":8603},{"subwords":[6144,8483,8595,8601,8604,8725,8730,8881,12810,13131,16319,16483,16574,16676,17471],"fullWord":8604},{"subwords":[8595,8605,8606,8607,10494,10495,10496,11065,11066,16483,16499,16574,16758,17149,21130],"fullWord":8606},{"subwords":[1196,4578,5567,8217,8420,8422,8440,8444,8607,8608,9035,21094,21097,21098],"fullWord":8608},{"subwords":[5567,6189,6191,8483,8484,8607,8609,9035],"fullWord":8609},{"subwords":[0,317,337,372,434,488,8241,8280,8378,8610,8645,8688,9437,10126,10257,10691,10698,18347,18349,18684,18863],"fullWord":8610},{"subwords":[325,932,8362,8371,8378,8391,8611,8678,8685,8688,8691,8935,9026,9027,9447,15938,16041,16559,16653,16753,16907,16917,18083,18085,18347,18508,18684,18742,18802,18947,19486,19592,19871,19892],"fullWord":8611},{"subwords":[3272,3275,3319,4046,4049,4302,8612,8613,8664,9002,13651],"fullWord":8613},{"subwords":[3272,8474,8607,8612,8614,8615,8625,8636,9079,9096,9101,9865],"fullWord":8615},{"subwords":[4714,4774,4928,4935,4936,4985,4988,4989,5865,8540,8617,8618,8619,8620,8625,8626,8649],"fullWord":8618},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5046,5367,8503,8505,8552,8558,8561,8584,8617,8619,8621,8622,8623,8625,8626,8628,8672,8673,8676,8678,8934,9111,9127,9384,9385,9389,9409,15060,15087,15428,15433,15436,15443,15526,16574,16581,16604,16615,16617,16642,16722,16780,16889,16890,16891,17722],"fullWord":8622},{"subwords":[4947,4985,4993,7604,8617,8624,8649,8651,12429],"fullWord":8624},{"subwords":[7493,7505,7604,8540,8625,8627,8655,12350,12429],"fullWord":8627},{"subwords":[5709,5769,7477,7578,8500,8625,8629,10398,10414,10536],"fullWord":8629},{"subwords":[5988,8498,8503,8552,8625,8630,8631,8672,9384,15141,15461],"fullWord":8631},{"subwords":[7635,7637,8630,8632,8633,8634,8678,8685,8688,8691,8935,9447,16653,16805,16809,16907,18729,18730,18742,18947],"fullWord":8634},{"subwords":[3272,3273,3402,8209,8250,8612,8614,8635,9465,9480],"fullWord":8635},{"subwords":[8503,8505,8552,8584,8625,8628,8636,8637,8638,8639,8672,8676,8678,8934,9384,9389,9396,9399,9409,10041,15526,15534,16574,16591,16617,16642,16644,16727,16729,16823,16889,16890,16954,16960,17722],"fullWord":8638},{"subwords":[4714,4728,4738,4739,4744,4935,4967,5756,5769,5780,8500,8509,8513,8617,8619,8625,8626,8640,8641,9117,9152,10378,10414,10530,10536,10537],"fullWord":8641},{"subwords":[5769,5780,8500,8503,8513,8552,8625,8640,8642,8672,9152,9153,9384,10414,10536,10549,10677,15444,15473,15477],"fullWord":8642},{"subwords":[4714,4728,4738,4739,4935,4942,5680,5682,5756,5769,8500,8509,8617,8619,8625,8626,8645,8646,8688,9117,10378,10414,10460,10530,10536,10537,10691,10694,10698,10699,18697,18835,18844,18845,18863,18864,18866,18867],"fullWord":8646},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5865,5996,8503,8540,8552,8558,8617,8619,8621,8625,8626,8649,8650,8672,8673,9384,9385,12358,15060,15175,15227,15383,15428,15433,15491],"fullWord":8650},{"subwords":[4985,5007,5037,5046,5507,5522,8617,8649,8652,8653,8654,8678,8679,8989,8997,9127,9307,9449,9450,16629,16748,16858,16874,18083,18117,19592],"fullWord":8654},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5865,7493,7604,8540,8617,8619,8625,8626,8649,8655,8656,12350,12429,12430],"fullWord":8656},{"subwords":[5894,5988,5996,7493,7604,8015,8503,8540,8552,8625,8655,8657,8672,9384,12350,12429,12431,15141,15173,15175,15234,15383,15461,15494],"fullWord":8657},{"subwords":[5716,5918,7493,7511,7604,7611,8540,8547,8625,8628,8655,8658,8678,8679,9307,12350,12351,12429,12432,16574,16629,16631,16805,16815,16858,16860,16866,16867,16874],"fullWord":8658},{"subwords":[4714,4774,4788,4935,4942,4985,4988,5008,5680,5682,5865,8540,8617,8619,8625,8626,8649,8660,8661,8688,9325,12374,12463,12612,18607,18610,18697,18708,18731,18732,18835,18844,18845,18894,18898,18899],"fullWord":8661},{"subwords":[5996,8503,8540,8552,8625,8660,8662,8672,8688,9245,9325,9331,9338,9384,12374,12463,12464,12466,12612,15175,15241,15312,15383,15542,15748,18607,18649,18697,18701,18708,18731,18732,18844,18847,18894,18898,18941,19289],"fullWord":8662},{"subwords":[4714,4935,5014,8549,8617,8619,8625,8626,8664,8665,13478,13569,13651,13705,13710,13813,13815,13816,14237],"fullWord":8665},{"subwords":[8503,8549,8552,8625,8664,8666,8672,9384,13569,13577,13651,13705,13712,13813,13815,13817,14262,14278,15248,15508,15509],"fullWord":8666},{"subwords":[8549,8625,8664,8667,13569,13651,13705,13813,13815],"fullWord":8667},{"subwords":[8664,8668,8669,8671,8678,8739,8845,8851,8853,8856,8886,9374,12810,12933,12936,13651,13813,13828,13841,14032,14130,14136,14144,14172,14421,16639,16693,16883,17406,17407],"fullWord":8669},{"subwords":[6008,6016,8503,8505,8552,8583,8584,8625,8628,8672,8674,8675,8676,8678,8934,9384,9389,9409,15526,15528,16574,16617,16642,16646,16889,16890,17722],"fullWord":8675},{"subwords":[7604,8015,8677,9391,12429,15461,15494],"fullWord":8677},{"subwords":[5014,5021,5037,5046,8617,8664,8671,8678,8680,9127,13651,13841,14421,16639,16883],"fullWord":8680},{"subwords":[4714,4826,4935,4939,5037,5046,5048,6039,8617,8619,8623,8625,8626,8628,8678,8681,8682,9111,9127,16574,16581,16582,16609,16615,16619,16780,16782,16903],"fullWord":8682},{"subwords":[6039,8503,8505,8552,8584,8625,8628,8672,8676,8678,8681,8683,8934,9384,9389,9409,15526,15530,16574,16609,16617,16618,16619,16642,16643,16889,16890,16895,16899,16903,17722],"fullWord":8683},{"subwords":[6039,8625,8628,8678,8681,8684,16574,16609,16619,16903],"fullWord":8684},{"subwords":[4714,4724,4826,4935,4939,4942,4945,5037,5046,5063,5680,5682,5684,8506,8586,8617,8619,8623,8625,8626,8628,8678,8685,8686,8688,8691,8935,9111,9127,9447,16457,16574,16581,16615,16653,16780,16907,16911,16912,17856,18575,18697,18742,18835,18837,18844,18845,18850,18947],"fullWord":8686},{"subwords":[8503,8552,8625,8672,8688,8689,9384,15312,15542,15748,18697,18701,18844,18847,18941],"fullWord":8689},{"subwords":[5769,8500,8503,8552,8625,8645,8672,8688,8690,9384,10414,10460,10536,10549,10677,10691,10694,10695,10698,10699,10700,10705,15197,15312,15444,15473,15542,15748,18697,18701,18844,18847,18863,18866,18868,18941],"fullWord":8690},{"subwords":[8503,8552,8625,8672,8688,8692,9384,15312,15542,15748,18697,18701,18844,18847,18941,18950,18953,18955,18957,18963,19303],"fullWord":8692},{"subwords":[269,299,5718,8233,8625,8695,8725,8731,8739],"fullWord":8695},{"subwords":[183,197,200,325,905,932,4543,5216,5217,5221,8217,8327,8331,8362,8696,8697,8698,8721,8724,8857,8858,8863,8874,8934,12680,12683,12810,13007,14736,14751,14775,14886,15386,15561,15563,15600,15609,15673,15893,16030,16503,16547,16674,17303,17323,17324],"fullWord":8698},{"subwords":[323,325,817,825,891,905,906,932,942,5588,5599,5976,5977,6004,8333,8338,8362,8453,8456,8552,8575,8581,8584,8696,8699,8725,8728,8729,8730,8857,8858,8863,8874,8875,8881,8934,12680,12683,12810,12979,12982,13007,14775,14881,14886,15376,15377,15386,15610,15611,15673,15676,16270,16286,16419,16549,16574,16577,16676,16678,16697,17303,17419],"fullWord":8699},{"subwords":[183,1167,1168,5114,8217,8440,8595,8596,8701,8702,8721,8725,8726,12752,12802],"fullWord":8702},{"subwords":[817,1167,5588,5976,8333,8453,8552,8575,8595,8696,8701,8703,8725,8728,8857,8858,12680,12979,14775,15373,15376,15386,15610],"fullWord":8703},{"subwords":[325,932,1167,1173,8362,8595,8701,8704,8725,8730,8881,12810,13131,16098,16270,16483,16574,16676,17471],"fullWord":8704},{"subwords":[1767,1851,1881,2042,2237,2242,8688,8705,8706,8739,8892,12700,12702,18743],"fullWord":8706},{"subwords":[1510,1636,1969,2042,2106,5632,8705,8707,8725,8754,10443,10748,10753,12845],"fullWord":8707},{"subwords":[2042,2127,2151,2160,2161,2178,8705,8708,8709,8789,12481,12809,12895],"fullWord":8708},{"subwords":[1560,2058,2059,2160,2164,4618,5114,8705,8709,8710,8721,8725,8726,8813,12709,12752,12802,12809,12895,12896],"fullWord":8710},{"subwords":[2160,2182,2223,8705,8709,8711,8712,8713,8725,8730,8881,12709,12710,12809,12810,12895,12898,16574,16676,16686,17308],"fullWord":8711},{"subwords":[3342,3343,3638,3644,3657,3697,3698,4639,4651,4656,5096,5099,5114,5641,8474,8714,8715,8716,8721,8725,8726,8743,12752,12802],"fullWord":8716},{"subwords":[3342,3344,3361,3697,3898,3906,5641,8474,8552,8575,8714,8715,8717,8725,8728,8743,8857,12724,12727,12965,12968,12979,15021,15386,15592,15593,15610],"fullWord":8717},{"subwords":[3342,3346,3347,3697,4029,5641,8474,8607,8714,8715,8718,8725,8743,8744,9865,21174],"fullWord":8718},{"subwords":[148,158,183,197,200,325,932,4438,4441,4444,4445,4543,5221,8217,8362,8721,8722,8723,8724,12745,12751,12810,15893,16503,16674,17323,17324],"fullWord":8723},{"subwords":[5718,5953,7493,7604,7815,8540,8625,8655,8725,8727,8731,8739,8789,8793,9360,12350,12429,12509,12803,12876],"fullWord":8727},{"subwords":[299,304,325,932,7396,7399,7744,7871,8233,8237,8304,8308,8362,8731,8732,8733,8737,8789,12230,12233,12480,12509,12512,12560,12565,12810,15910,15921,15986,16001,16004,16513,17211,17383,17389],"fullWord":8733},{"subwords":[5114,5123,5125,5709,5718,7522,7782,8721,8725,8726,8731,8734,12752,12802],"fullWord":8734},{"subwords":[5709,5718,5988,5989,7522,7788,7855,7858,8043,8552,8575,8725,8728,8731,8735,8857,12798,12979,15141,15386,15610],"fullWord":8735},{"subwords":[7759,7874,7875,7886,8151,8175,8731,8736,8789,8892,8951,8989,8990,8998,9026,12509,12574,12593,12612,12659,13046,13059,18743,18747,18759,18796,18993,19036,19043,19151,19418,19434,19583,19685,19780],"fullWord":8736},{"subwords":[5718,5730,7540,7637,7874,7875,8625,8688,8725,8731,8738,8739,8892,18697,18743,18844,18981,18993],"fullWord":8738},{"subwords":[8678,8681,8685,8687,8688,8691,8739,8741,8742,8887,8891,8892,8901,8935,9447,12810,16651,16653,16654,16704,16707,16903,16907,16915,17434,17435,17436,18742,18743,18947,19123,19125],"fullWord":8742},{"subwords":[8503,8552,8575,8625,8636,8637,8672,8725,8728,8739,8743,8745,8857,9384,9396,12834,12979,15386,15610],"fullWord":8745},{"subwords":[7604,8731,8739,8746,8789,8803,9142,9276,9360,9913,9922,10015,12429,12509,12803,12825],"fullWord":8746},{"subwords":[8747,8748,8970,8988,9019,12158,12166,12806,12808,12810,12872,16664,18103,18112,19592],"fullWord":8748},{"subwords":[4728,4774,4881,5114,5146,5172,5176,5756,5865,5953,8509,8540,8721,8725,8726,8749,8750,8754,8755,8789,8793,8794,10378,10427,10443,10444,10780,10781,10822,12493,12499,12504,12752,12802,12837,12838,12845,12876],"fullWord":8750},{"subwords":[4728,4810,4881,5114,5115,5146,5756,8509,8552,8558,8575,8721,8725,8726,8728,8749,8751,8754,8755,8756,8857,8864,10378,10443,10780,10878,10882,12752,12802,12837,12839,12845,12979,15060,15078,15386,15600,15603,15610,15621],"fullWord":8751},{"subwords":[5523,5525,8721,8749,8753,8845,9002,10864,10906,10917,12837,13967,14020,14056,14438,19806],"fullWord":8753},{"subwords":[5769,8500,8503,8510,8552,8575,8625,8672,8725,8728,8739,8754,8756,8759,8857,9384,10414,10443,10536,10549,10677,10882,12812,12816,12845,12979,12992,15246,15386,15444,15473,15610,15617,15621],"fullWord":8759},{"subwords":[5769,8500,8502,8510,8511,8625,8628,8678,8725,8730,8739,8740,8754,8757,8760,8881,9416,10414,10415,10443,10447,10536,10551,10888,12810,12812,12822,12845,12848,16574,16602,16676,16837,17097,17350,17354,17359,17364],"fullWord":8760},{"subwords":[8640,8644,8739,8761,8768,8772,9152,9157,10583,12812,12824],"fullWord":8761},{"subwords":[7604,8731,8739,8762,8789,9360,10637,10641,10652,10663,10793,10814,10826,12429,12438,12509,12803,12812],"fullWord":8762},{"subwords":[8648,8678,8739,8763,9422,10584,10609,10610,11659,11684,11685,11772,11854,11856,11859,12806,12808,12810,12812,12822,12872,16627,16664,16837,17076,17350,17354,17364],"fullWord":8763},{"subwords":[8645,8647,8678,8685,8688,8691,8739,8741,8764,8770,8771,8887,8892,8901,8935,9447,10686,10691,10698,10702,10703,10707,10896,10897,10898,10901,12810,12812,12822,16653,16704,16837,16840,16907,17093,17113,17114,17350,17354,17364,17435,18742,18743,18863,18947,19002,19006,19123],"fullWord":8764},{"subwords":[5780,8513,8516,8552,8575,8725,8728,8754,8756,8765,8857,10443,10882,12845,12979,15386,15610,15621,15623],"fullWord":8765},{"subwords":[8766,8767,8920,8925,10833,10942,12809,12895,13114,20689,20903,20917],"fullWord":8767},{"subwords":[5782,5784,5845,8519,8522,8532,8539,8725,8730,8754,8757,8769,8775,8780,8881,10443,10447,10888,11563,11870,11871,12806,12808,12810,12845,12848,12872,16574,16602,16664,16676,17097,17354,17359,17382],"fullWord":8769},{"subwords":[269,299,319,5718,7317,7323,7489,7526,8233,8290,8532,8725,8731,8773,8775,11127,11128,11265,11437,11487,12791,12806,12807,12863],"fullWord":8773},{"subwords":[1700,2072,2205,2446,8532,8552,8554,8575,8705,8725,8728,8774,8775,8778,8857,11539,11817,11970,12806,12861,12959,12979,14995,15202,15386,15388,15576,15579,15610,15627,15632],"fullWord":8774},{"subwords":[5782,5785,8519,8532,8607,8725,8754,8758,8772,8775,8777,8781,8788,8932,10443,10495,11065,11870,11884,12806,12845],"fullWord":8777},{"subwords":[5845,6004,8532,8539,8552,8575,8581,8584,8725,8728,8729,8730,8775,8778,8779,8780,8857,8874,8875,8881,8934,11539,11563,11970,11973,11987,12806,12808,12810,12872,12979,12982,13007,15202,15224,15386,15610,15611,15627,15632,15638,15676,16574,16664,16676,16678,16697,17382,17419],"fullWord":8779},{"subwords":[5830,8503,8532,8552,8575,8625,8648,8672,8725,8728,8739,8775,8778,8782,8857,9384,11539,11743,11854,11860,11970,12806,12979,15202,15386,15480,15481,15610,15627,15632],"fullWord":8782},{"subwords":[8648,8739,8772,8783,8788,10584,10609,10618,11659,11854,11856,11884,12806,12812,12824],"fullWord":8783},{"subwords":[7604,8648,8731,8739,8784,8789,9360,11649,11697,11711,11854,11891,12429,12443,12509,12522,12803,12806],"fullWord":8784},{"subwords":[8648,8739,8785,8788,8789,9047,9360,11697,11854,11891,11920,12443,12522,12806,21144,21183,21186],"fullWord":8785},{"subwords":[3675,3777,3826,3852,8714,8789,8790,8812,12809,12895],"fullWord":8790},{"subwords":[183,197,200,325,605,610,932,4492,4543,5172,5173,5188,5221,8217,8298,8302,8362,8721,8724,8789,8791,8792,12480,12493,12501,12560,12565,12810,15893,15986,15988,16503,16674,17323,17324,17383],"fullWord":8792},{"subwords":[5918,5953,5955,6000,6004,8540,8547,8552,8575,8579,8580,8581,8584,8725,8728,8729,8730,8789,8793,8795,8796,8797,8857,8867,8871,8874,8875,8881,8934,12506,12548,12556,12560,12561,12565,12567,12810,12876,12879,12979,12982,13007,15238,15386,15610,15611,15676,16386,16391,16574,16676,16678,16685,16697,16700,17272,17383,17419],"fullWord":8796},{"subwords":[5918,5953,5955,6071,8540,8547,8548,8586,8725,8730,8789,8793,8797,8798,8881,8887,8892,8901,8935,12368,12374,12376,12506,12560,12561,12565,12574,12581,12585,12591,12612,12810,12876,12879,12884,16399,16457,16461,16574,16676,16685,16704,16705,17278,17383,17435,17834,17909,18607,18624,18697,18708,18710,18743,18758,18981,18985,19036,19038,19042,19057,19123],"fullWord":8798},{"subwords":[5918,5953,5955,8540,8547,8607,8725,8730,8789,8793,8797,8799,8800,8881,9061,12506,12560,12561,12564,12565,12573,12810,12876,12879,13147,16574,16676,16685,16758,17383,17472,18287,21120,21122,21130,21183],"fullWord":8800},{"subwords":[4714,4774,4935,4985,4988,5114,5172,5176,5865,5953,8540,8617,8619,8625,8626,8649,8721,8725,8726,8739,8789,8793,8794,8801,9110,9360,12493,12499,12752,12758,12802,12876],"fullWord":8801},{"subwords":[7604,8731,8739,8789,8802,9297,9360,12429,12509,12528,12803],"fullWord":8802},{"subwords":[4774,5114,5172,5176,5865,5953,8540,8721,8725,8726,8743,8789,8793,8794,8803,8804,9836,9837,9841,12493,12499,12752,12802,12876],"fullWord":8804},{"subwords":[5953,8540,8552,8575,8579,8725,8728,8743,8789,8793,8795,8803,8805,8857,8867,9836,9841,9855,10044,12548,12876,12979,15238,15386,15610],"fullWord":8805},{"subwords":[5953,8540,8607,8725,8743,8744,8789,8793,8799,8803,8806,8808,9836,9841,9865,12876,21120,21174,21183],"fullWord":8806},{"subwords":[5734,5953,8540,8625,8636,8725,8739,8743,8789,8793,8803,8807,9142,9276,9360,9836,9841,9913,9919,12825,12834,12876],"fullWord":8807},{"subwords":[8789,8809,8810,8857,8867,8871,8874,8934,12548,12560,12565,12809,12810,12895,12898,13007,15386,16686,16700,17383,17397],"fullWord":8810},{"subwords":[8789,8809,8811,8857,8867,8906,8989,9009,12548,12809,12895,13051,15386,15821,19866],"fullWord":8811},{"subwords":[5111,5114,8721,8725,8726,8813,8814,12745,12752,12802,12809,12895,12896],"fullWord":8814},{"subwords":[8607,8725,8730,8816,8817,8881,12809,12810,12895,12898,13147,16574,16676,16686,16758,17396,17472,21130],"fullWord":8817},{"subwords":[5114,5950,6406,6874,6928,8721,8725,8726,8813,8818,8819,12752,12802,12809,12895,12896],"fullWord":8819},{"subwords":[5950,6874,6940,6955,7103,8552,8575,8725,8728,8818,8820,8857,12809,12895,12979,15114,15386,15610,15644],"fullWord":8820},{"subwords":[8239,8821,8822,8823,12675,12809,12895],"fullWord":8823},{"subwords":[325,932,950,8362,8821,8822,8824,8828,12675,12677,12809,12810,12895,12898,16522,16686,16688,17294],"fullWord":8824},{"subwords":[5114,8721,8725,8726,8743,8813,8821,8825,12752,12802,12809,12895,12896],"fullWord":8825},{"subwords":[8552,8575,8725,8728,8743,8821,8826,8857,12809,12895,12979,15386,15610,15648],"fullWord":8826},{"subwords":[8607,8725,8743,8744,8816,8821,8827,8830,9865,12809,12895,21174],"fullWord":8827},{"subwords":[8821,8829,8831,8845,9002,12809,12895,14118],"fullWord":8829},{"subwords":[5114,5200,8549,8721,8725,8726,8813,8831,8832,8845,8846,8847,12752,12802,12809,12895,12896,12916,13478,14020,14118,14119],"fullWord":8832},{"subwords":[8549,8552,8575,8725,8728,8831,8833,8845,8846,8848,8857,12809,12895,12916,12979,13577,14118,14127,14147,14262,14350,15248,15386,15610,15663],"fullWord":8833},{"subwords":[481,8276,8321,8831,8834,8845,10182,10833,10849,10864,12809,12895,12913,13204,14056,14086,14118,14121],"fullWord":8834},{"subwords":[8239,8696,8836,8857,8858,8860,12680,12809,12895,14775,15386],"fullWord":8836},{"subwords":[324,8420,8696,8700,8837,8857,8858,12680,12809,12895,14775,14939,15386,15864,21044],"fullWord":8837},{"subwords":[3675,3826,3861,3965,8714,8812,8838,8839,8892,12809,12895,18743,19060],"fullWord":8839},{"subwords":[5114,5119,5234,5237,5242,8721,8725,8726,8813,8838,8840,8892,12752,12802,12809,12895,12896,18697,18743,18981,18983,19060],"fullWord":8840},{"subwords":[8552,8575,8725,8728,8838,8841,8857,8892,12809,12895,12979,13008,13009,13010,13036,15312,15386,15610,15659,15691,15694,15697,15748,18697,18743,18749,18754,18777,18781,18981,19060,19093,19101,19106],"fullWord":8841},{"subwords":[8552,8575,8725,8728,8843,8857,8915,8918,12809,12895,12979,13095,15337,15386,15610,15728],"fullWord":8843},{"subwords":[8725,8730,8844,8881,8915,12809,12810,12895,12898,16574,16676,16686,16711],"fullWord":8844},{"subwords":[6004,6033,8549,8552,8575,8581,8584,8725,8728,8729,8730,8845,8846,8848,8849,8850,8856,8857,8874,8875,8881,8886,8934,12810,12916,12925,12936,12979,12982,13007,13577,13607,14147,14149,14166,14168,14172,14173,14262,14281,14350,14383,14384,14403,15248,15272,15305,15386,15610,15611,15663,15668,15676,16574,16676,16678,16693,16694,16697,17406,17407,17419,17638],"fullWord":8849},{"subwords":[7604,7612,8664,8731,8739,8789,8845,8851,8852,9360,12429,12453,12509,12803,13651,13721,13765,13773,13809,14032,14107],"fullWord":8852},{"subwords":[5114,5200,8549,8721,8725,8726,8845,8846,8847,8854,12752,12802,12916,12933,13478,13569,14020,14130,14131,14237],"fullWord":8854},{"subwords":[8549,8552,8575,8725,8728,8845,8846,8848,8855,8857,12916,12933,12979,13569,13577,14130,14131,14147,14262,14278,14350,14379,15248,15386,15610,15663],"fullWord":8855},{"subwords":[93,98,121,796,801,809,817,2941,2954,3206,3209,3361,3362,3898,5582,5588,5641,5976,8333,8453,8552,8575,8696,8714,8725,8728,8857,8858,8859,12680,12724,12727,12965,12966,12968,12979,14717,14775,14958,15021,15376,15386,15560,15592,15610],"fullWord":8859},{"subwords":[324,8358,8420,8696,8700,8857,8858,8862,12680,14775,14939,15386,15570,15864],"fullWord":8862},{"subwords":[4810,5114,5115,8552,8558,8575,8721,8725,8726,8728,8857,8864,8865,12745,12746,12752,12802,12979,15060,15078,15386,15600,15603,15610],"fullWord":8865},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,8552,8558,8561,8575,8581,8584,8721,8724,8725,8726,8728,8729,8730,8857,8864,8866,8874,8875,8876,8881,8882,8934,12752,12755,12802,12810,12979,12982,13007,15060,15078,15081,15087,15386,15387,15600,15603,15609,15610,15611,15676,15677,16574,16581,16604,16674,16676,16677,16678,16697,16698,16722,17323,17419],"fullWord":8866},{"subwords":[4713,4774,4810,5114,5115,5172,5176,5392,5865,5953,8540,8552,8558,8575,8579,8721,8725,8726,8728,8789,8793,8794,8795,8857,8864,8867,8868,12358,12493,12499,12548,12752,12802,12876,12979,15060,15078,15227,15238,15386,15600,15603,15610],"fullWord":8868},{"subwords":[5953,6008,8540,8552,8575,8579,8583,8725,8728,8789,8793,8795,8857,8867,8869,12548,12876,12979,15238,15386,15610],"fullWord":8869},{"subwords":[5953,8540,8552,8575,8579,8725,8728,8789,8793,8795,8857,8867,8870,8892,12374,12548,12557,12574,12581,12583,12590,12612,12876,12979,13008,13009,13036,15238,15241,15312,15386,15610,15691,15694,15748,18607,18621,18649,18697,18708,18743,18749,18751,18777,18781,18783,18981,19036,19038,19040,19093,19101,19105],"fullWord":8870},{"subwords":[8617,8721,8739,8857,8873,15386,15428,15600],"fullWord":8873},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,8552,8558,8561,8575,8581,8584,8721,8724,8725,8726,8728,8729,8730,8857,8864,8866,8874,8875,8876,8881,8882,8934,12752,12755,12802,12810,12979,12982,13007,15060,15078,15081,15087,15386,15387,15600,15603,15609,15610,15611,15676,15677,16574,16581,16604,16674,16676,16677,16678,16697,16698,16722,17323,17419],"fullWord":8876},{"subwords":[6004,6039,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8877,8881,8883,8934,12810,12979,12982,13007,15386,15610,15611,15676,15679,16574,16609,16676,16678,16679,16680,16697,16699,17419,17424,17434],"fullWord":8877},{"subwords":[6004,8552,8575,8581,8584,8607,8725,8728,8729,8730,8857,8874,8875,8878,8880,8881,8934,12810,12979,12982,13007,13145,13146,13147,15386,15610,15611,15676,15690,15866,15867,16574,16676,16678,16697,16758,16759,17419,17472,21130,21189,21190,21212],"fullWord":8878},{"subwords":[6004,8503,8505,8552,8575,8581,8584,8625,8628,8672,8676,8678,8725,8728,8729,8730,8739,8740,8857,8874,8875,8881,8884,8934,9384,9389,9409,12810,12979,12982,13007,13022,15386,15526,15610,15611,15676,15681,16574,16617,16642,16676,16678,16697,16889,16890,17419,17722],"fullWord":8884},{"subwords":[7604,7611,7871,8678,8679,8731,8737,8739,8789,8885,9307,9360,9366,12429,12432,12509,12512,12560,12565,12803,12810,16629,16805,16815,16858,16866,16874,17383,17389],"fullWord":8885},{"subwords":[4826,5114,5117,5118,5119,5221,5223,5233,5234,5237,5241,5242,5245,6071,8586,8721,8724,8725,8726,8730,8881,8882,8887,8888,8892,8901,8935,12752,12755,12802,12810,16457,16574,16581,16674,16676,16677,16704,16705,17323,17435,18575,18697,18743,18758,18981,18983,18985,19123],"fullWord":8888},{"subwords":[6071,8523,8524,8586,8725,8730,8754,8757,8770,8771,8881,8887,8889,8892,8896,8897,8901,8935,10443,10447,10459,10460,10465,10888,10896,10897,10898,10901,12810,12845,12848,16457,16574,16602,16676,16704,16705,17097,17113,17114,17354,17359,17435,17903,18697,18743,18744,18745,18758,18981,18985,19017,19123],"fullWord":8889},{"subwords":[8770,8771,8772,8887,8890,8892,8899,8901,8935,10896,10897,10898,10901,12810,16704,16758,17113,17114,17149,17354,17435,17472,18018,18743,18806,19123,19186,19195],"fullWord":8890},{"subwords":[1560,1721,2058,2059,2237,2242,4618,4630,5114,5119,5234,5237,5242,8705,8721,8725,8726,8892,8893,12752,12802,18697,18743,18981,18983],"fullWord":8893},{"subwords":[2160,2185,2188,2237,2242,2292,8705,8709,8838,8892,8894,12809,12895,18743,19060],"fullWord":8894},{"subwords":[5123,5234,5242,7782,7826,7828,7874,7875,8721,8731,8813,8838,8892,8895,12809,12895,18743,18993,19000,19060],"fullWord":8895},{"subwords":[6071,8523,8524,8586,8725,8730,8754,8757,8770,8771,8881,8887,8889,8892,8896,8897,8901,8935,10443,10447,10459,10460,10465,10888,10896,10897,10898,10901,12810,12845,12848,16457,16574,16602,16676,16704,16705,17097,17113,17114,17354,17359,17435,17903,18697,18743,18744,18745,18758,18981,18985,19017,19123],"fullWord":8897},{"subwords":[8607,8725,8743,8744,8892,8898,9865,18697,18724,18743,18806,18981,19010,19186,19553,21135,21174],"fullWord":8898},{"subwords":[5196,5234,5242,8721,8813,8838,8857,8892,8900,12762,12809,12895,12976,13008,13009,13010,15386,15600,15642,15659,15691,15697,18743,18749,18754,18777,19060,19093,19106,19310],"fullWord":8900},{"subwords":[5114,5119,5234,5237,5242,8721,8725,8726,8892,8902,12752,12802,18697,18743,18981,18983,19131,19134,19135],"fullWord":8902},{"subwords":[8552,8575,8725,8728,8857,8892,8903,12979,13008,13009,13036,13041,15312,15386,15610,15691,15694,15748,18697,18743,18749,18777,18781,18981,19093,19101,19117,19118,19131,19134,19138,19141,19331,19332],"fullWord":8903},{"subwords":[5172,5188,5221,5507,5522,5523,5524,8721,8724,8789,8904,8905,8944,8989,8997,12493,12501,12503,12560,12565,12597,12810,12888,16674,16748,17323,17383,17445,18117,19592,19664,19768],"fullWord":8905},{"subwords":[8678,8739,8857,8874,8906,8907,8908,8910,8934,9369,9409,12810,13007,13048,13051,13052,15386,15681,15842,16889,17451,17722,18083,19592],"fullWord":8908},{"subwords":[8772,8857,8906,8909,9004,9008,10887,10922,10924,13051,15386,21193,21196],"fullWord":8909},{"subwords":[4826,4849,5114,5117,5221,5223,5263,5471,5478,5523,5524,8721,8724,8725,8726,8730,8881,8882,8911,8912,8945,8946,8947,12752,12755,12802,12810,16574,16581,16674,16676,16677,17323,18066,18067,19592,19876,19877],"fullWord":8912},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8906,8910,8911,8913,8934,8945,8947,12810,12979,12982,13007,13051,13052,15386,15610,15611,15676,15706,15708,15716,15777,15782,15840,15842,16574,16676,16678,16697,17419,17451,18066,18071,18150,19592,19876,19880,19883],"fullWord":8913},{"subwords":[6039,8725,8730,8881,8883,8911,8914,8945,8947,12810,16574,16609,16676,16680,17434,17457,18066,18073,19592,19876,19882],"fullWord":8914},{"subwords":[8725,8730,8754,8757,8881,8915,8916,8917,10443,10447,10471,10488,10888,10935,10940,12810,12845,12848,16574,16602,16676,16711,16713,17097,17354,17359,17374,20250,20251,20252],"fullWord":8917},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8915,8918,8919,8934,12810,12979,12982,13007,13095,13099,15337,15354,15386,15610,15611,15676,15728,15732,16453,16574,16676,16678,16697,16711,16714,16736,17419,20070,20077],"fullWord":8919},{"subwords":[183,4574,4885,8217,8239,8409,8721,8920,8921,20303,20599,20689,20690,20868],"fullWord":8921},{"subwords":[4714,4865,4885,4935,5114,8588,8617,8619,8625,8626,8721,8725,8726,8739,8920,8922,8923,9110,12752,12802,13110,13111,20524,20689,20720,20875],"fullWord":8922},{"subwords":[4728,4865,4881,4885,5114,5146,5271,5756,8509,8588,8721,8725,8726,8749,8754,8755,8920,8923,8925,8926,10378,10443,10490,10780,10942,10944,12752,12802,12837,12845,13110,13111,13114,20524,20566,20689,20691,20875,20883],"fullWord":8926},{"subwords":[8552,8575,8588,8725,8728,8754,8756,8857,8920,8923,8925,8927,10443,10882,10942,10945,12845,12979,13110,13114,15386,15610,15621,15734,15739,20689,20691,20702,20705,20875,20933],"fullWord":8927},{"subwords":[8523,8588,8725,8754,8770,8892,8896,8920,8923,8925,8928,10443,10460,10897,10898,10942,12845,13110,13114,13115,18697,18721,18743,18744,18981,19017,19166,19170,19548,20575,20594,20642,20689,20691,20875],"fullWord":8928},{"subwords":[4774,4795,5114,5172,5176,5290,5567,5579,5865,5953,8540,8607,8721,8725,8726,8789,8793,8794,8799,8931,9035,12493,12499,12752,12802,12876,21120,21154,21183,21184],"fullWord":8931},{"subwords":[8607,8725,8730,8754,8757,8758,8772,8881,8932,8933,10443,10447,10495,10496,10888,11065,11066,12810,12845,12848,13147,16574,16602,16676,16758,17097,17149,17354,17359,17472,21130],"fullWord":8933},{"subwords":[27,1235,1269,2738,2921,3202,3378,4049,4242,4243,4302,8321,8936,8938,9002,13154,14428],"fullWord":8938},{"subwords":[2496,2610,2656,2668,2673,8678,8934,8936,8939,8940,9409,15402,15410,15749,15764,15842,16737,16765,16889,17722,18035,18083,19592,19840,19844],"fullWord":8939},{"subwords":[4728,5466,5467,5471,5472,5756,8509,8943,8945,8946,10378,10470],"fullWord":8943},{"subwords":[5172,5188,5221,5507,5522,5523,5524,8721,8724,8789,8904,8905,8944,8989,8997,12493,12501,12503,12560,12565,12597,12810,12888,16674,16748,17323,17383,17445,18117,19592,19664,19768],"fullWord":8944},{"subwords":[5471,5481,6406,6501,8945,8946,8948,8949],"fullWord":8949},{"subwords":[7477,7722,7727,8180,8607,8945,8951,8952,8953,10398,10470,10495,10981,10982,11065,19583,19590,21222],"fullWord":8953},{"subwords":[7540,7541,8107,8166,8171,8175,8176,8586,8935,8945,8947,8951,8952,8955,8958,9026,9027,16457,16574,16753,16754,18066,18074,18697,18796,18797,18802,19418,19421,19486,19583,19584,19592,19876],"fullWord":8955},{"subwords":[5471,5485,5709,8945,8946,8951,8952,8956,19583],"fullWord":8956},{"subwords":[5709,5988,8552,8945,8951,8952,8954,8957,15141,15777,15790,19583,19855],"fullWord":8957},{"subwords":[4728,5471,5472,5489,5756,5778,8509,8945,8946,8962,8963,10378,10416,10470,10987,19595],"fullWord":8963},{"subwords":[4728,4744,5471,5472,5492,5756,5780,8509,8513,8945,8946,8964,8965,10378,10470],"fullWord":8965},{"subwords":[5780,8513,8552,8945,8964,8966,9004,10470,11029,15777,15800],"fullWord":8966},{"subwords":[8964,8967,8968,8969,11039,12810,16746,17354,17442,19592],"fullWord":8968},{"subwords":[319,528,586,5627,5846,8290,8532,8533,8540,8945,8970,8971,8972,8989,11213,11218,11437,11446,11512,11534,12229,12244,12245],"fullWord":8972},{"subwords":[325,586,712,932,8290,8296,8362,8970,8971,8973,8988,8989,8997,11213,11247,11262,11330,11335,12158,12244,15973,15986,16531,16748,18103,18117,19592,19871],"fullWord":8973},{"subwords":[1636,2004,2567,5782,5846,8519,8532,8936,8945,8970,8974,10470,10961,12110,19612],"fullWord":8974},{"subwords":[2537,2567,8145,8936,8951,8970,8975,12104,19583],"fullWord":8975},{"subwords":[5830,5846,8503,8532,8552,8625,8648,8672,8945,8970,8976,9384,11539,11743,15202,15380,15480,15481,15777,15806],"fullWord":8976},{"subwords":[5471,5846,8532,8945,8946,8970,8977,12091,12127],"fullWord":8977},{"subwords":[5846,8532,8552,8945,8970,8978,11539,12127,15202,15380,15777,15806],"fullWord":8978},{"subwords":[8857,8874,8906,8910,8934,8970,8979,8980,8988,12158,12806,12808,12810,12872,13007,13051,13052,15386,15627,15638,15806,15820,15842,16664,17451,18103,18112,19592],"fullWord":8980},{"subwords":[8857,8906,8970,8979,8981,12806,13051,15386,15627,15806],"fullWord":8981},{"subwords":[5471,5503,5525,5526,5846,8532,8537,8549,8945,8946,8970,8982,8983,9002,12079,12091,13478,14438,19624,19625],"fullWord":8983},{"subwords":[8959,8970,8982,8984,8985,8986,8988,9002,9016,12079,12158,14551,14552,18103,18114,18135,19592,19624,19628,19825],"fullWord":8985},{"subwords":[5894,5988,7493,7759,8151,8540,8552,8945,8951,8952,8954,8989,8990,8991,12349,15141,15170,15777,15790,15821,15822,15824,19583,19855,19866],"fullWord":8991},{"subwords":[7759,8151,8180,8951,8989,8990,8992,15790,15821,15824,19583,19866],"fullWord":8992},{"subwords":[8540,8552,8945,8989,8993,8994,9836,9855,12349,12640,15777,15821,15822,19595,19866],"fullWord":8994},{"subwords":[4774,4788,5471,5479,5507,5511,5865,8540,8945,8946,8989,8998,8999,9026,12374,12612,12624,12659,18607,18610,18697,18708,18794,19434,19438,19439],"fullWord":8999},{"subwords":[8540,8552,8945,8989,8998,9000,9012,9026,12349,12374,12612,12659,15241,15312,15748,15777,15821,15822,15833,15858,15859,18607,18649,18697,18708,18789,19356,19434,19438,19440,19476,19866],"fullWord":9000},{"subwords":[4728,4810,5471,5472,5756,8509,8552,8558,8945,8946,9003,9004,9005,10378,10470,11029,11030,15060,15773,15777,15778,15800,15801],"fullWord":9003},{"subwords":[4728,4810,5471,5472,5756,8509,8552,8558,8945,8946,9003,9004,9005,10378,10470,11029,11030,15060,15773,15777,15778,15800,15801],"fullWord":9005},{"subwords":[6008,8552,8583,8945,9004,9006,10470,11029,11031,15777,15780,15800,15802],"fullWord":9006},{"subwords":[8358,8420,9010,9011,14775,14939,15864],"fullWord":9010},{"subwords":[6008,8552,8583,8945,9012,9013,9026,15312,15748,15777,15780,15858,15859,18652,18697,18789,19356,19358],"fullWord":9013},{"subwords":[8552,8945,9004,9012,9014,9026,10460,10470,11029,11050,11055,15312,15748,15777,15800,15858,15859,18697,18789,19356,19605],"fullWord":9014},{"subwords":[4826,4849,5471,5478,8945,8946,8947,8959,9016,9017,16574,16581,18066,18067,19592,19876,19877],"fullWord":9017},{"subwords":[6039,8945,8947,8959,9016,9018,16574,16609,16752,18066,18073,19592,19876,19882],"fullWord":9018},{"subwords":[4826,4835,4849,5471,5478,5489,5490,5546,8945,8946,8947,9019,9020,16574,16581,18066,18067,19592,19595,19596,19876,19877],"fullWord":9020},{"subwords":[8552,8584,8934,8945,8947,9019,9021,15777,15782,15840,15842,15848,16574,18066,18071,18150,19592,19595,19596,19876,19880,19883],"fullWord":9021},{"subwords":[325,905,932,973,8362,8934,9023,14775,14886,15842,16033,19592,19868,19871,19886],"fullWord":9023},{"subwords":[8586,8935,8945,8947,9025,9026,9027,10459,10460,10465,10470,11039,11044,11050,11053,16457,16574,16746,16753,16754,17058,17128,17147,18066,18074,18697,18802,19422,19486,19592,19605,19876],"fullWord":9025},{"subwords":[5471,5479,8945,8946,9026,9028,18697,18794,19493],"fullWord":9028},{"subwords":[781,8321,8378,9002,9026,9029,13364,13375,14561,18436,18508,19453,19892,21238],"fullWord":9029},{"subwords":[325,932,8362,9030,9031,19592,19871],"fullWord":9031},{"subwords":[0,317,596,716,1194,1196,8420,8540,8607,9033,9042,12229,12311,21097,21098,21120],"fullWord":9033},{"subwords":[1777,1867,5362,5430,8617,9034,15402,15428,21140],"fullWord":9034},{"subwords":[227,817,1196,4516,4578,4607,4613,4810,4814,5337,5430,5567,5570,5588,5976,8217,8327,8332,8333,8334,8420,8422,8423,8440,8444,8453,8454,8552,8558,8607,9035,9036,9037,14736,14775,14939,14940,14961,14966,15060,15376,15864,15866,21068,21071,21097,21098,21099],"fullWord":9037},{"subwords":[200,325,905,932,944,4543,4547,4578,4582,5337,5339,5430,5439,8217,8327,8331,8332,8362,8420,8428,8934,9036,9038,14736,14751,14775,14886,14939,14944,15864,15865,15893,16103,16503,16510,16547,16572,16758,21068,21070,21096,21212],"fullWord":9038},{"subwords":[3272,3282,4232,5430,8612,8617,9039,9101,15416,15428,21140],"fullWord":9039},{"subwords":[5216,5220,5221,5430,5439,8721,8724,8857,8874,8880,8934,9040,9041,12810,13007,15386,15600,15609,15690,16674,16758,17323,17472,21096,21154,21157,21212],"fullWord":9041},{"subwords":[325,716,932,935,944,1196,1197,5619,5918,8362,8420,8425,8428,8540,8547,8607,9042,9043,12229,12311,12312,15986,15995,16103,16270,16572,16574,16758,18287,21097,21098,21105,21120,21122,21130],"fullWord":9043},{"subwords":[5845,5918,8532,8539,8540,8547,8607,9045,9046,9047,9050,11512,11524,11563,11566,16574,16758,18287,21120,21122,21130],"fullWord":9046},{"subwords":[594,716,8290,8420,9047,9048,10136,10304,11173,11213,11238,11264,11408,12201,12202,12244,12311,21051],"fullWord":9048},{"subwords":[4774,4795,5567,5579,5865,8532,8540,8607,9035,9045,9047,9049,11512,11516,21120],"fullWord":9049},{"subwords":[8540,8549,8607,9051,9055,13539,21120,21127],"fullWord":9055},{"subwords":[7604,7612,8188,8664,9044,9056,12429,12453,13651,13721,13765,13773,13807,21144,21146],"fullWord":9056},{"subwords":[3272,3305,3319,4046,8612,8664,9057,9101,9207,9213,12453,13651,13765,13768,13807,21144,21146],"fullWord":9057},{"subwords":[5114,5200,5205,5208,5567,8549,8607,8721,8725,8726,8845,8846,8847,9035,9051,9052,9058,9059,12752,12802,12916,13478,14020,21127,21154],"fullWord":9059},{"subwords":[8789,9061,9062,12560,12565,12573,12810,16758,17383,17395,17434,17472,17475,21183],"fullWord":9062},{"subwords":[8845,8856,8886,9058,9060,9063,12810,12936,13681,14172,14187,16693,16696,16758,17406,17407,17408,17409,17414,17434,17472,17475,17697],"fullWord":9063},{"subwords":[27,341,538,2738,2848,3402,9064,9065,9066,9077,9078,11086,11617],"fullWord":9066},{"subwords":[67,341,347,555,586,1422,1763,2567,2576,2668,9064,9067,9068,9077,9422,11330,11616,15973,16764,16765,18035,18083,18103,19871],"fullWord":9068},{"subwords":[349,817,1366,1377,1535,1790,2308,2317,2417,5588,5976,9069,9376,9384,14995,15402],"fullWord":9069},{"subwords":[1576,1590,6144,9070,9071,16319,16483,16765,16922],"fullWord":9071},{"subwords":[6023,9072,9075,9079,9085,16178,16298,16765,16769],"fullWord":9072},{"subwords":[1560,1568,1777,1780,4618,4714,4935,4938,4971,4972,9073,9074,9077,9109,9167,11626,11637],"fullWord":9074},{"subwords":[1715,6039,9075,9076,9413,9430,16765,16766,16903],"fullWord":9076},{"subwords":[1851,2292,3617,9070,9079,9080,12700],"fullWord":9080},{"subwords":[93,732,2921,2922,3107,3402,4046,5956,5959,9079,9081,9373,13154,13155,13439,13688,13705],"fullWord":9081},{"subwords":[93,112,114,341,528,537,614,2848,2853,2869,2883,3402,3413,3414,5856,9079,9083,9207,9208,11086,11089,11156,11157,11213,11218,11234,11437,11446,11489,11512,11617,11619,11645,11697,11698,11706,12229,12244,12245,12410,12443],"fullWord":9083},{"subwords":[3413,5856,9079,9084,9207,11489,11512,11619,11645,11697,11698,11706,12339,12410,12424,12443],"fullWord":9084},{"subwords":[3272,3340,3341,3693,3694,3944,8612,8678,8714,8739,8857,8874,8934,9086,9087,9409,12810,12965,12968,12970,12971,13007,15386,15416,15592,15599,15681,16178,16769,16889,17316,17722],"fullWord":9087},{"subwords":[3109,3120,5640,9079,9088,10414,10518,10536],"fullWord":9088},{"subwords":[3429,3430,3434,3436,4238,4241,6023,6057,9079,9085,9090,9447,16178,16298,16304,16457,16769,16907,16911,18823,18830,18844,18850,18947],"fullWord":9090},{"subwords":[3171,7604,7611,9092,9093,9138,9207,9307,12462,16178,16769,16815,16858,16866],"fullWord":9093},{"subwords":[9079,9089,9094,9095,9384,9396,15021,15411,15422],"fullWord":9095},{"subwords":[3689,3777,3800,9097,9098,9207,9360,9361],"fullWord":9098},{"subwords":[200,326,327,331,336,337,338,340,362,363,399,407,948,4461,4466,4467,4601,4603,4714,4728,4739,4742,4826,4891,4895,4901,4935,4939,5037,5756,5760,9103,9104,9105,9106,9111,9117,9121,9127,9416,9417,10090,10093,10099,10100,10107,10119,10227,10324,10327,10331,10360,10378,10414,10415,10530,10535,10536,10537,10551,15893,15928,15931,15932,15942,15948,16270,16274,16780,16784,17044,17068,17069],"fullWord":9105},{"subwords":[169,326,327,1009,4551,4714,4935,4942,5620,5680,6055,9103,9107,9108,18339,18347,18541,18576,18577,18835,18844,18845],"fullWord":9107},{"subwords":[3638,4029,5096,9101,9112,12757,21140,21154],"fullWord":9112},{"subwords":[4971,4983,5037,5163,5171,5221,9113,9114,9127,9422,11626,11637,11638,11641,11763,11772,11831,11841,11845,11854,12872,17323],"fullWord":9114},{"subwords":[5037,5221,5233,5234,5245,9115,9116,9127,9447,16907,17323,17435,18947],"fullWord":9116},{"subwords":[4714,4728,4739,4742,4810,4826,4935,4939,5023,5037,5367,5756,5760,9111,9117,9119,9120,9121,9127,9384,9385,9389,9409,9416,9417,10378,10414,10415,10530,10535,10536,10537,10549,10550,10551,10677,15060,15087,15428,15433,15436,15443,15444,15445,15473,15474,15475,15526,16780,16784,16786,16889,16890,16891,17044,17068,17069,17070,17072,17722],"fullWord":9120},{"subwords":[4714,4724,4728,4739,4742,4743,4826,4935,4939,4942,4945,5037,5063,5680,5684,5756,5760,9111,9117,9121,9122,9127,9416,9417,9419,9436,9447,10378,10414,10415,10459,10460,10465,10530,10535,10536,10537,10551,10686,10687,10691,10694,10697,10707,16457,16780,16784,16840,16841,16907,16911,16912,17044,17068,17069,17093,17856,17862,18575,18835,18837,18844,18845,18850,18863,18864,18865,18866,18867,18870,18947],"fullWord":9122},{"subwords":[4947,4985,4993,7586,7604,9123,10530,10637,12438],"fullWord":9123},{"subwords":[4967,4968,4969,5037,9124,9127,9128,9129,9130,9131,9152,9155,9157,10530,10535,10583,16834,16836,17068,17075,17149,21096,21140,21141],"fullWord":9130},{"subwords":[6543,6544,6553,6555,6621,6622,9133,9384,15114,15446,15450],"fullWord":9133},{"subwords":[7826,7847,9136,9137,9426,10793,10809,10810,10811,10833,10854,12812,12822,12850,12851,13024,16837,17099,17350,17354,17364,17370],"fullWord":9137},{"subwords":[7493,7505,7512,7540,7604,7637,9139,9325,12374,12463,18607,18844,18846,18894,18898,18901,18902],"fullWord":9139},{"subwords":[5718,5894,5953,5988,5989,5996,7493,7604,7788,7815,7816,7855,8015,8045,9140,9360,9384,9400,12347,12509,12513,12514,12548,12798,12876,12979,12995,15141,15155,15173,15175,15234,15238,15461,15494,15610],"fullWord":9140},{"subwords":[257,287,596,7283,7604,7759,8111,8151,9141,12230],"fullWord":9141},{"subwords":[200,326,336,337,340,428,4461,4891,4895,4901,5037,9127,9146,9147,9148,10090,10107,10119,10530,10535,15893,15928,15931,15942,17068],"fullWord":9148},{"subwords":[5780,5781,9152,9154,9155,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10551,10580,10582,10679,10686,10691,10694,10697,10707,16368,16457,16834,16840,16907,16911,17093,17862,17864,18591,18593,18844,18850,18863,18866,18870,18872,18875,18947],"fullWord":9154},{"subwords":[5780,5782,5846,9145,9152,9156,10414,10470,10536,10552,10584,10595,11659,11668,11676,11677,12110,12118],"fullWord":9156},{"subwords":[269,270,326,327,341,342,540,541,4472,4475,4714,4890,4896,4935,4938,4947,4971,4972,5658,5707,7253,7317,7323,7324,7489,9103,9109,9158,9159,11107,11115,11127,11128,11132,11145,11437,11438,11467,11487,11626,11633,11649],"fullWord":9159},{"subwords":[214,269,273,280,341,347,546,555,5716,5845,7317,7323,7327,7342,7396,7489,7492,9158,9160,9422,11127,11128,11129,11132,11140,11330,11437,11453,11487,11560,11649,11654,11764,12081,15910,15912,15973,15978,16270,16278,16375,16764,16813],"fullWord":9160},{"subwords":[341,347,555,586,9162,9163,9164,9422,11152,11155,11330,11612,12127,12134,15973,16764,18083,18103,18107,19871],"fullWord":9164},{"subwords":[337,341,385,1272,1307,1324,9064,9077,9162,9165,10061,10136,10139,10504,10584,10585,10587,11148,11152,11173,11182,11659],"fullWord":9165},{"subwords":[341,349,867,869,1366,1395,2308,2428,9064,9077,9166,9376,9396,11276,11296,11749,14808,15402,15480],"fullWord":9166},{"subwords":[1560,1568,1569,1574,1777,1780,1784,1788,4588,4618,4629,4714,4722,4826,4908,4935,4938,4939,4971,4972,4975,4983,5037,5845,9077,9109,9111,9127,9167,9168,9422,11616,11626,11641,11764,16375,16765,16780],"fullWord":9168},{"subwords":[1777,1851,2058,2070,2300,4971,5163,9077,9169,11626,11817,11831,11841,11854,12700,21140,21154],"fullWord":9169},{"subwords":[1700,1790,2417,2428,2567,2610,5830,5846,5983,9077,9170,9171,9384,11539,11743,14995,15202,15402,15480,15481,15749,15755,15777,15806,19614,19840],"fullWord":9170},{"subwords":[1560,1568,1777,1780,2517,2567,4618,4714,4935,4938,4971,4972,5445,5471,5499,5846,9077,9109,9167,9171,9172,9449,11626,12091],"fullWord":9172},{"subwords":[2567,2576,2668,5845,5846,5847,9077,9171,9173,9422,11616,11764,12152,16375,16765,18035,18066,18083,18103,19876],"fullWord":9173},{"subwords":[5845,8532,8539,8625,8628,8648,8678,9174,9422,11563,11688,11694,11764,16375,16574,16627],"fullWord":9174},{"subwords":[5845,9175,9422,11688,11694,11764,16375],"fullWord":9175},{"subwords":[5846,9176,11489,11512,11534,11645,11688,11697,11706,12127,12443],"fullWord":9176},{"subwords":[5830,5846,9177,9384,11539,11688,11692,11743,12127,15202,15480,15481,15777,15806],"fullWord":9177},{"subwords":[126,341,574,781,2848,2859,2862,2921,3052,3402,3429,4046,9178,9179,11086,11270,11361,11617,13154,13168,13364,13438,13688,13758,13850,13851,18347,18389,18402,18436,18823,18882,18926],"fullWord":9179},{"subwords":[341,349,574,869,9178,9180,9376,11270,11276,13200,13286,13758,14240,14313,14314,14808,14816,14851,15480,15508,15747],"fullWord":9180},{"subwords":[337,341,372,466,481,504,574,9178,9181,10136,10137,10153,10158,10182,10584,10585,10611,10665,10957,11148,11173,11174,11182,11270,11659,13191,13204,13224,13758],"fullWord":9181},{"subwords":[337,341,399,481,574,576,732,5782,5956,9178,9182,9186,10136,10145,10158,10182,10324,10350,10414,10536,10584,10585,10595,10611,10665,10957,11148,11173,11180,11182,11270,11271,11437,11442,11659,11668,13191,13204,13207,13224,13439,13450,13705,13743,13758,13940],"fullWord":9182},{"subwords":[341,349,574,781,869,882,911,1032,9178,9183,9376,11270,11276,11320,11361,13200,13286,13328,13331,13364,13758,13850,13851,14240,14247,14313,14314,14808,14816,14851,14867,14898,15480,15508,15747,18347,18389,18402,18436,18443,18449,18467,18882,18926,19216,19217,19221,19285,19295],"fullWord":9183},{"subwords":[4671,4673,4714,4935,4938,4971,4972,5014,9108,9109,9178,9184,9185,11478,11626,13478,13489,13490,13705,13710],"fullWord":9185},{"subwords":[5782,5784,5845,6033,9178,9186,9187,9196,9416,9422,10414,10415,10536,10551,10584,10595,10598,10611,10617,10665,10672,10681,10957,11659,11668,11671,11685,11764,13705,13716,13743,13745,13961,14421,16375,16853,16855,16883,17076,17077,17088,17171,17563],"fullWord":9187},{"subwords":[4714,4774,4780,4935,4938,4971,4972,4985,4988,5014,5865,9109,9178,9184,9188,11489,11512,11516,11626,11645,11697,11702,11706,11707,12443,12453,13478,13539,13544,13705,13710,13765,13769,13771],"fullWord":9188},{"subwords":[7602,7604,7612,9178,9190,11649,11697,11711,11714,12078,12443,12453,13721,13765,13773],"fullWord":9190},{"subwords":[8648,8664,8671,8678,9178,9191,9196,9422,12079,13651,13841,14421,16627,16639,16853,16883],"fullWord":9191},{"subwords":[9178,9193,11854,11947,11989,12010,12869,12937,13008,13850,14032,14160,14188,14313,14322,14350,14369,15480,15504,15508,15627,15634,15691,15747,18882,18926,18945,19026,19075,19093,19285,19292,19295,19318,19323],"fullWord":9193},{"subwords":[5845,5969,6033,9178,9194,9196,9374,9422,11764,11772,11854,11947,11948,11953,11961,12872,12916,12925,12936,13607,13705,13716,14024,14025,14032,14039,14093,14094,14166,14421,16375,16853,16883,17382,17406],"fullWord":9194},{"subwords":[9178,9195,9196,9374,9422,9447,11772,11780,11854,11862,11947,11961,12007,12010,12030,12869,12870,12872,12936,12937,12944,13850,13866,14032,14177,14182,14188,14201,14421,14427,16853,16883,16907,17179,17406,17435,17598,17644,17907,17921,18882,18926,18936,18947,19026,19034,19075,19090,19386],"fullWord":9195},{"subwords":[7602,7604,7612,7759,8145,8151,9178,9197,11649,11697,11711,12078,12104,12443,12453,13721,13765,13773,14449,14484,19624,19626],"fullWord":9197},{"subwords":[5830,5846,9178,9189,9198,9384,11539,11743,13577,13593,13602,13705,13712,14262,14313,14317,14518,14530,15202,15248,15480,15481,15508,15509,15747,15777,15806,15815,19624,19627],"fullWord":9198},{"subwords":[5832,5846,9178,9199,9444,11574,11786,12184,13613,13705,13850,14561,18595,18596,18599,18844,18882,18886,18926,19453,19624,19831],"fullWord":9199},{"subwords":[349,657,663,665,817,5588,5595,5976,5996,9200,9201,9297,9300,9376,9378,9384,12229,12252,12319,12448,14784,14821,14838,15175],"fullWord":9201},{"subwords":[647,648,657,663,665,691,5918,9200,9202,9297,9302,9307,9308,12229,12252,12448,12449,15986,15995,16270,16389,16793,16858,16860],"fullWord":9202},{"subwords":[1837,1851,2127,2211,2429,2439,2446,9205,9297,9360,9400,12406,12481,12513,12528,12548,12700,12959,15402,15576,15583],"fullWord":9205},{"subwords":[1560,1671,1673,1777,1780,1782,1790,1837,1840,1841,1867,2384,2413,2417,2429,2430,2431,4618,4714,4774,4810,4935,4985,4988,4990,5023,5362,5865,5996,9206,9384,9385,12331,12358,12406,14995,15005,15008,15060,15175,15227,15402,15428,15433,15491],"fullWord":9206},{"subwords":[93,96,114,116,647,648,691,2800,2869,2883,2887,2906,3021,3023,3402,3413,3415,5856,5918,6023,9079,9085,9207,9208,9209,9210,9307,12229,12410,15880,15986,15995,16134,16178,16270,16298,16769,16858,16859,16860],"fullWord":9210},{"subwords":[3145,3413,3429,3430,4046,5856,5959,6057,9079,9207,9211,9244,9325,12374,12410,12453,12463,13438,13477,13539,13560,13613,13705,13765,13769,13799,13850,18607,18823,18844,18894,18898,18926],"fullWord":9211},{"subwords":[3145,3150,3413,3415,3429,3430,3434,4238,4241,5856,5918,6023,6057,9079,9085,9207,9212,9307,9310,9312,9318,9325,9447,12368,12374,12376,12410,12413,12463,12471,16163,16178,16298,16304,16399,16400,16457,16769,16858,16859,16860,16907,16911,17255,17826,18607,18624,18823,18830,18844,18850,18894,18898,18900,18919,18947],"fullWord":9212},{"subwords":[3272,3282,3283,3305,3309,3413,4639,4714,4774,4909,4935,4985,4988,5856,5865,8540,8612,8617,8619,8625,8626,8649,9079,9082,9207,9213,9214,12410,12415,12416],"fullWord":9214},{"subwords":[3272,3305,3309,3310,3316,3413,3415,5856,5918,6023,8540,8547,8612,8625,8628,8678,8679,9079,9085,9207,9213,9215,9307,12410,12415,12417,16178,16298,16574,16629,16631,16769,16858,16859,16860,16874],"fullWord":9215},{"subwords":[3413,3415,5856,5918,6023,9079,9085,9207,9216,9307,12410,12460,12462,16178,16298,16769,16858,16859,16860],"fullWord":9216},{"subwords":[3145,3413,3429,3430,5856,6057,9079,9207,9217,9325,12374,12410,12463,18607,18823,18844,18894,18898],"fullWord":9217},{"subwords":[3413,3689,3732,3744,3777,3786,5653,5856,5953,9079,9097,9207,9219,9360,11489,11512,11619,11645,11697,11698,11706,11854,11891,12410,12443,12522,12525,12866,12874,12876],"fullWord":9219},{"subwords":[1837,2577,4242,9207,9220,12406,12614],"fullWord":9220},{"subwords":[4312,4350,9207,9221,9222,9223,9307,9409,15795,15799,15821,15826,15832,16178,16769,16858,16889,17722,18083,18117,19862,19866,19867],"fullWord":9222},{"subwords":[4667,4714,4774,4777,4928,4935,4936,4985,4988,4989,5665,5865,5867,9108,9224,12339,12340],"fullWord":9224},{"subwords":[4714,4774,4788,4791,4935,4942,4985,4988,5008,5680,5865,9225,9297,9299,9325,9329,12374,12448,12463,18607,18610,18835,18844,18845,18894,18898,18899,18916],"fullWord":9225},{"subwords":[326,605,657,4492,4985,9227,9228,9297,12252],"fullWord":9228},{"subwords":[3429,4925,4985,5008,9207,9229,9325,12463,18823,18894],"fullWord":9229},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,9111,9127,9230,9307,9314,12460,12462,16381,16780,16858,16860,17243],"fullWord":9230},{"subwords":[4947,4985,4993,5002,7604,9231,9297],"fullWord":9231},{"subwords":[4947,4985,4993,4998,5123,5142,5172,5179,7604,7782,9232,9357,9360,12493,12509,12758],"fullWord":9232},{"subwords":[4714,4774,4788,4935,4942,4985,4988,5008,5680,5865,9233,9325,12374,12463,18607,18610,18835,18844,18845,18894,18898,18899],"fullWord":9233},{"subwords":[4971,4985,5507,9234,9449,11626,11637,11697,11702,11714,12091,12443],"fullWord":9234},{"subwords":[4985,5172,5186,5196,9236,9360,9400,12493,12513,12548,12758,12762,12976,12998,15428,15491,15600,15640,15642],"fullWord":9236},{"subwords":[4985,5007,5037,5057,5172,5188,5221,5277,5280,5282,9127,9237,9238,9307,9360,9366,12493,12501,12560,12606,12610,12758,13119,13124,16858,17284,17323,17383,17464,17469,20774,20779,20783,20804,20806,20807,20897],"fullWord":9238},{"subwords":[3413,4263,4268,4269,4639,4714,4774,4909,4935,4985,4988,5455,5471,5507,5508,5511,5856,5865,9079,9082,9207,9239,9241,9449,12410,12624,12633],"fullWord":9239},{"subwords":[3429,4263,4300,4375,4386,4925,4985,5008,5462,5507,9207,9240,9325,9449,12463,12659,18823,18894,19434,19444,19701],"fullWord":9240},{"subwords":[4714,4774,4928,4935,4936,4985,4988,4989,5466,5467,5471,5507,5511,5865,9241,9242,9449,12624,12633,19661],"fullWord":9242},{"subwords":[4714,4774,4785,4826,4849,4935,4939,4985,4988,4992,5007,5037,5471,5478,5507,5511,5512,5522,5865,5875,5918,9111,9127,9241,9243,9307,9449,9450,12624,12627,12633,12634,16381,16780,16858,16860,17243,18066,18067,18083,18117,19662,19876,19877],"fullWord":9243},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":9246},{"subwords":[341,716,6250,6293,6386,6593,9247,11156,11213,11264,11408,11697,12201,12236,12244,12311,12443,21051,21144],"fullWord":9247},{"subwords":[254,657,693,700,6250,6252,6261,6293,6344,6518,6593,6616,6651,9248,9297,9325,12236,12252,12463,18347,18408,18894],"fullWord":9248},{"subwords":[3145,3413,3429,3430,5705,5856,6057,6423,6453,6543,6593,6601,6651,9079,9207,9249,9325,12374,12410,12463,18607,18823,18844,18894,18898],"fullWord":9249},{"subwords":[5918,5996,6000,6453,6463,6467,6468,6543,6593,6601,6604,6606,6619,6621,6622,6626,6636,7085,9135,9250,9251,9307,9384,9389,9409,15114,15134,15175,15177,15296,15446,15500,15526,15527,16431,16437,16439,16858,16860,16889,16890,16893,17722],"fullWord":9251},{"subwords":[5705,5706,5918,6423,6424,6425,6453,6463,6543,6593,6601,6606,6607,6619,6647,6651,6654,9135,9252,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16801,16858,16860,16907,16911,17255,17826,18607,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":9252},{"subwords":[6593,6621,6629,9253,11697,11714,12443,15480],"fullWord":9253},{"subwords":[6593,6817,6820,6896,7014,9255,9257,9360,10652,10663,10814,10942,12438,12606,12812,13114,13119,20774,20804,20885,20897],"fullWord":9255},{"subwords":[6593,6661,6821,6851,7179,9256,11058,12438,12474,19680,19709],"fullWord":9256},{"subwords":[4985,5172,6541,6593,6598,6896,6902,6917,9125,9235,9257,9258,9360,10530,10533,10652,10663,10814,12438,12493,12758,12812,12837],"fullWord":9258},{"subwords":[6593,6621,6629,6940,6973,7103,7111,9257,9259,9360,9400,11697,11725,11854,11891,11977,12443,12513,12522,12548,12550,15480,15627],"fullWord":9259},{"subwords":[5918,6453,6463,6543,6593,6601,6606,6619,7179,7210,9135,9262,9307,16858,16860,18066,18083,18117,19876],"fullWord":9262},{"subwords":[269,277,287,693,694,700,1009,5620,5625,6055,6074,7283,7289,7416,7417,7493,7512,7540,7561,7604,7637,7745,9263,9325,12229,12230,12325,12374,12463,18342,18347,18408,18410,18541,18607,18844,18894,18898,18901,18902],"fullWord":9263},{"subwords":[5716,5918,7493,7511,7512,7517,7540,7541,7604,7611,7635,7637,9264,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16815,16820,16858,16860,16866,16867,16907,16911,17255,17826,17870,18607,18624,18844,18850,18894,18898,18900,18901,18902,18904,18907,18919,18947],"fullWord":9264},{"subwords":[5716,5918,7477,7486,7493,7511,7604,7611,7680,7681,9265,9266,9307,9416,10398,10412,10414,10415,10433,10536,10544,10548,10551,10625,10634,10637,10642,10654,12438,12439,12442,16815,16858,16860,16866,16867,16871,17083],"fullWord":9266},{"subwords":[7604,7611,7635,7637,7874,9267,9268,9307,9318,9325,9335,9360,9366,9447,12463,12471,12509,12512,12560,12574,12591,16815,16858,16866,16907,17255,17278,17383,17389,17435,17870,17871,18894,18901,18907,18919,18947,18993,19001,19036,19043,19047,19057],"fullWord":9268},{"subwords":[6560,6593,6772,6821,6838,7179,7184,7604,7759,8132,8151,9269,10637,10981,11012,12438,19585],"fullWord":9269},{"subwords":[337,399,423,430,637,5745,5769,8241,8258,8445,8500,8540,8625,9270,10120,10174,10324,10344,10414,10536,10544,10625,12229,12238,12438,12439],"fullWord":9270},{"subwords":[337,8241,8394,8960,8989,9271,10120,11001,12238,12438,19600],"fullWord":9271},{"subwords":[5735,5984,5995,5996,5998,8483,8503,8540,8552,8562,8565,8625,8672,9272,9384,9387,12339,15175,15383],"fullWord":9272},{"subwords":[5846,8532,8540,8625,8648,8945,8970,8989,9273,11489,11512,11534,11645,11697,11706,12443],"fullWord":9273},{"subwords":[3145,3413,3429,3430,5856,6057,9079,9207,9274,9325,9531,9557,12374,12410,12463,18607,18823,18844,18894,18898],"fullWord":9274},{"subwords":[5996,9275,9344,9384,9561,9713,9729,15175,15777,15795,15821,15822,19864,19866],"fullWord":9275},{"subwords":[5918,5996,6000,9276,9278,9279,9284,9307,9384,9389,9396,9399,9409,9836,9843,9855,9858,9913,9919,9921,9929,10041,15175,15177,15296,15498,15499,15500,15526,15527,15534,16439,16858,16860,16876,16877,16889,16890,16893,16948,16954,16960,16974,17722],"fullWord":9279},{"subwords":[5996,9276,9278,9280,9384,9396,9836,9855,9913,9919,15175,15498],"fullWord":9280},{"subwords":[5778,5779,5918,9150,9151,9276,9281,9282,9284,9307,9416,9836,9843,9902,9904,9913,9919,9921,9929,10414,10415,10416,10417,10433,10536,10544,10548,10551,10566,10569,10570,10573,10625,10634,10645,10648,10654,12438,12439,12442,16829,16831,16858,16860,16876,16948,16954,16974,17085],"fullWord":9282},{"subwords":[9142,9276,9283,9325,9335,9360,9913,9932,9946,9985,9993,12453,12463,12574,12825,12937,13765,13780,13785,13799,13802,13809,13850,13864,14032,14035,14188,18894,18926,18968,19036,19075,19196],"fullWord":9283},{"subwords":[326,337,428,605,4492,4891,4985,9146,9147,9227,9286,10090,10119,10120,10169,10530,10622,12238,12438],"fullWord":9286},{"subwords":[326,337,605,657,4492,4891,4985,9287,9297,10090,10119,10120,10169,10530,10622,12238,12252,12438],"fullWord":9287},{"subwords":[337,340,639,647,691,716,9288,9289,9293,9307,10120,10304,10313,10654,10662,11082,12238,12241,12311,12312,12438,12442,15931,15942,15986,16103,16858,17006,17039,17149,17214,21144,21145],"fullWord":9289},{"subwords":[5902,5918,9290,9291,9307,9312,9318,9325,9328,9334,9416,9419,9436,9447,10414,10415,10433,10437,10459,10460,10465,10536,10544,10548,10551,10625,10634,10654,10656,10659,10686,10688,10691,10694,10697,10707,12368,12374,12376,12438,12439,12442,12463,12471,16399,16400,16457,16826,16840,16858,16860,16907,16911,17093,17255,17826,17862,18607,18624,18844,18850,18863,18866,18870,18894,18898,18900,18919,18920,18947],"fullWord":9291},{"subwords":[5996,9292,9384,10414,10536,10544,10549,10625,10632,10644,10677,12438,12439,15175,15444,15473],"fullWord":9292},{"subwords":[341,528,532,693,694,700,1009,5620,5832,6055,6074,9294,9325,9444,11156,11157,11213,11218,11361,11362,11371,11437,11446,11451,11456,11489,11512,11574,11575,11645,11697,11706,11729,11786,12229,12244,12245,12325,12374,12443,12463,18347,18389,18393,18408,18541,18549,18595,18607,18844,18882,18886,18894,18898],"fullWord":9294},{"subwords":[5845,5918,8532,8539,8540,8547,8625,8628,8648,8678,8679,9295,9307,9422,11489,11512,11524,11563,11645,11646,11697,11706,11710,11728,11764,12443,12447,16375,16574,16627,16629,16631,16858,16860,16874],"fullWord":9295},{"subwords":[9296,9307,9318,9325,9335,9360,9366,9422,9447,11697,11728,11729,11732,11772,11780,11854,11862,11891,11908,11915,12007,12010,12030,12443,12447,12463,12471,12522,12527,12560,12574,12591,12869,12870,12872,16851,16858,16907,17179,17255,17278,17383,17435,18882,18894,18919,18947,19026,19034,19036,19057],"fullWord":9296},{"subwords":[615,657,663,665,693,694,700,1009,5620,6055,6074,9200,9297,9298,9325,12229,12252,12325,12374,12448,12463,18347,18408,18541,18607,18844,18894,18898],"fullWord":9298},{"subwords":[5918,5996,6000,9297,9300,9301,9302,9307,9384,9389,9409,12448,12449,15175,15177,15296,15500,15526,15527,16439,16858,16860,16880,16889,16890,16893,17722],"fullWord":9301},{"subwords":[9303,9304,9307,9318,9325,9447,12453,12459,12463,12471,12659,12663,13765,13798,13799,13804,13850,13866,13871,14421,14427,14484,14500,14501,14504,14551,14561,14567,16858,16883,16907,16917,16918,17248,17255,17580,17598,17683,18005,18083,18085,18117,18135,18148,18894,18919,18926,18936,18947,19386,19434,19447,19452,19453,19456,19701,19706,19825],"fullWord":9304},{"subwords":[183,195,326,349,605,854,4492,4532,4985,4986,5172,5173,5314,9305,9360,9376,9378,9400,12227,12274,12493,12513,12548,12680,12758,12972,14736,14743,14749,14776,14784,14821,14826,14838,15428,15491,15561,15568,15600],"fullWord":9305},{"subwords":[8678,8679,8934,8989,8997,9306,9307,9409,15795,15799,15821,15832,15842,16629,16748,16858,16874,16889,17722,18083,18117,19592,19866,19867],"fullWord":9306},{"subwords":[647,648,657,663,665,691,5918,9200,9202,9297,9302,9307,9308,12229,12252,12448,12449,15986,15995,16270,16389,16793,16858,16860],"fullWord":9308},{"subwords":[341,347,528,531,546,550,555,647,648,691,5845,5918,9307,9309,9422,11156,11157,11159,11213,11218,11221,11247,11248,11330,11437,11446,11450,11453,11489,11512,11524,11560,11645,11646,11697,11706,11710,11728,11764,12229,12244,12245,12250,12443,12447,15973,15978,15986,15995,16270,16278,16375,16764,16858,16860],"fullWord":9309},{"subwords":[3145,3150,3413,3415,3429,3430,3434,4238,4241,5856,5918,6023,6057,9079,9085,9207,9212,9307,9310,9312,9318,9325,9447,12368,12374,12376,12410,12413,12463,12471,16163,16178,16298,16304,16399,16400,16457,16769,16858,16859,16860,16907,16911,17255,17826,18607,18624,18823,18830,18844,18850,18894,18898,18900,18919,18947],"fullWord":9310},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":9311},{"subwords":[5918,6039,9307,9312,9313,9318,9325,9447,12367,12368,12373,12374,12376,12463,12471,16399,16400,16457,16464,16858,16860,16861,16881,16903,16907,16911,16913,16915,17255,17257,17826,17827,17857,18607,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":9313},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,9111,9127,9230,9307,9314,12460,12462,16381,16780,16858,16860,17243],"fullWord":9314},{"subwords":[9307,9315,9318,9325,9413,9447,12462,12463,12471,16858,16881,16903,16907,16915,17255,17257,18894,18919,18947],"fullWord":9315},{"subwords":[5918,5953,5955,9307,9316,9360,9366,9416,10414,10415,10433,10443,10444,10447,10452,10536,10544,10548,10551,10625,10634,10652,10653,10654,10663,10664,10814,10815,10822,10888,12438,12439,12442,12504,12505,12506,12516,12560,12561,12812,12822,12845,12848,12876,12879,16837,16858,16860,17097,17350,17354,17359,17364,17383],"fullWord":9316},{"subwords":[9307,9317,9360,9366,9369,10652,10653,10654,10663,10664,10814,10815,10913,12438,12442,12560,12597,12812,12822,12888,13048,16837,16858,17350,17354,17364,17383,17442,18083,18117],"fullWord":9317},{"subwords":[337,340,434,488,639,647,691,693,700,704,711,9307,9318,9319,9325,9334,9437,9447,10120,10126,10241,10263,10265,10654,10656,10659,10686,10691,10707,12238,12241,12292,12438,12442,12463,12471,15931,15936,15942,15960,15986,16041,16047,16840,16858,16907,17006,17017,17022,17093,17214,17255,17742,17754,18347,18349,18353,18408,18428,18863,18894,18919,18947],"fullWord":9319},{"subwords":[5918,6033,9244,9307,9312,9318,9320,9325,9447,12368,12374,12376,12453,12459,12463,12471,13520,13539,13549,13558,13560,13609,13613,13626,13705,13716,13765,13769,13772,13798,13799,13804,13850,13866,14421,14427,16399,16400,16409,16457,16858,16860,16883,16907,16911,17248,17249,17255,17541,17580,17582,17586,17598,17600,17826,17836,18607,18624,18844,18850,18894,18898,18900,18919,18926,18936,18947,19386],"fullWord":9320},{"subwords":[9307,9318,9321,9325,9334,9447,10654,10656,10659,10686,10691,10707,12438,12442,12462,12463,12471,16840,16858,16907,17093,17255,18863,18894,18919,18947],"fullWord":9321},{"subwords":[9307,9318,9323,9325,9334,9447,10654,10656,10659,10686,10691,10707,11044,12438,12442,12463,12471,12659,12663,16840,16858,16907,16917,17093,17147,17255,18005,18083,18085,18117,18128,18863,18894,18919,18947,19434,19447,19452,19605,19701,19706,19722,19779],"fullWord":9323},{"subwords":[5918,5996,6000,9307,9324,9344,9346,9384,9389,9409,12655,15175,15177,15296,15500,15526,15527,15777,15782,15795,15799,15821,15822,15823,15832,15840,16439,16796,16858,16860,16889,16890,16893,17722,18066,18071,18083,18117,18150,19864,19865,19866,19867,19870,19876,19880],"fullWord":9324},{"subwords":[126,128,693,700,701,1040,1044,2869,2908,3052,3402,3429,9207,9208,9325,9326,12463,18325,18336,18347,18354,18408,18495,18823,18894,18895,18921,18950,18951,18969],"fullWord":9326},{"subwords":[369,693,694,700,1009,5620,6055,6074,9276,9325,9327,9836,9844,9913,9919,9946,9947,9985,12229,12325,12374,12463,18347,18358,18359,18408,18418,18541,18545,18607,18844,18861,18894,18898],"fullWord":9327},{"subwords":[4714,4774,4788,4791,4935,4942,4985,4988,5008,5680,5865,9225,9297,9299,9325,9329,12374,12448,12463,18607,18610,18835,18844,18845,18894,18898,18899,18916],"fullWord":9329},{"subwords":[9297,9325,9330,12374,12448,12463,18607,18630,18844,18894,18898,18921,18950,18969],"fullWord":9330},{"subwords":[5996,9245,9297,9300,9325,9331,9332,9338,9384,12374,12448,12463,12464,12466,15175,15241,15312,15542,15748,18607,18649,18844,18847,18894,18898,18917,18941,19289],"fullWord":9332},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":9333},{"subwords":[1837,1851,1856,1881,2127,2237,9077,9325,9335,9336,9360,11697,11729,11817,11854,11891,12010,12406,12443,12463,12481,12522,12574,12700,12702,12869,18882,18894,19026,19028,19036],"fullWord":9336},{"subwords":[5953,9297,9325,9335,9337,9360,12353,12374,12448,12463,12528,12533,12574,12581,12876,18607,18619,18844,18894,18898,18981,19036,19038,19054],"fullWord":9337},{"subwords":[9307,9318,9322,9325,9335,9338,9340,9341,9360,9366,9400,9405,9409,9447,12463,12469,12470,12471,12513,12548,12560,12574,12591,13007,13008,13011,15504,15507,15684,15691,15700,16858,16889,16907,17255,17276,17278,17383,17429,17435,17722,17881,18894,18919,18945,18946,18947,19036,19057,19093,19105,19113,19114,19292,19294,19313],"fullWord":9341},{"subwords":[9325,9342,12463,12659,18894,18921,18950,18969,19434,19493,19701],"fullWord":9342},{"subwords":[9297,9325,9338,9343,9347,12463,12651,12659,15795,15821,15833,15858,18894,19434,19476,19701,19866],"fullWord":9343},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5471,5507,5511,5539,5865,5996,9241,9344,9345,9384,9385,9449,12358,12624,12626,12633,15060,15175,15227,15428,15433,15491,15773,15777,15778,15795,15796,15821,15822,19660,19864,19866],"fullWord":9345},{"subwords":[5918,5996,6000,9307,9324,9344,9346,9384,9389,9409,12655,15175,15177,15296,15500,15526,15527,15777,15782,15795,15799,15821,15822,15823,15832,15840,16439,16796,16858,16860,16889,16890,16893,17722,18066,18071,18083,18117,18150,19864,19865,19866,19867,19870,19876,19880],"fullWord":9346},{"subwords":[9297,9302,9307,9347,9348,9409,12651,12654,15795,15799,15821,15832,16858,16889,17722,18083,18117,19866,19867],"fullWord":9348},{"subwords":[204,326,327,605,1106,1120,4492,4500,4569,4605,4714,4774,4851,4898,4935,4985,4988,5067,5068,5071,5865,9103,9349,12229,12242,12305,12387,19910,19920,19948,19950,19951,19990,20008,20027,20107,20113,20126,20129,20130,20152,20157,20159],"fullWord":9349},{"subwords":[9297,9325,9350,12374,12387,12448,12463,18607,18844,18894,18898,20008,20038,20046,20095,20129,20152,20157],"fullWord":9350},{"subwords":[5996,9245,9325,9331,9338,9351,9384,12374,12387,12463,12464,12466,15175,15241,15312,15337,15542,15549,15551,15555,15748,18607,18649,18844,18847,18894,18898,18941,19289,20008,20046,20080,20095,20129,20132,20152,20157],"fullWord":9351},{"subwords":[5918,9307,9312,9318,9325,9352,9447,12368,12374,12376,12387,12463,12471,16399,16400,16457,16858,16860,16907,16911,17255,17826,18607,18624,18844,18850,18894,18898,18900,18919,18947,20008,20012,20046,20049,20088,20095,20101,20129,20134,20152,20157,20161,20167,20197],"fullWord":9352},{"subwords":[9325,9353,12374,12387,12463,18607,18844,18894,18898,20008,20046,20095,20129,20152,20157],"fullWord":9353},{"subwords":[5734,5942,5953,9142,9276,9354,9360,9836,9841,9896,9913,9919,12387,12825,12834,12876,13093,13102,20008,20129,20152,20157,20164,20262],"fullWord":9354},{"subwords":[326,349,605,854,1158,4492,4532,4542,4574,4576,4985,4986,5314,5330,5335,9355,9376,9378,12227,12274,14736,14776,14784,14821,14826,14838,14933,15428,15491,20303,20314,20349,20393,20394,20410,20412,20432,20774,20779],"fullWord":9355},{"subwords":[4714,4928,4931,4935,4936,5011,5114,9110,9356,12745,12752],"fullWord":9356},{"subwords":[4714,4774,4935,4985,4988,5114,5172,5176,5865,5953,9110,9357,9358,9360,12493,12499,12752,12758,12876],"fullWord":9358},{"subwords":[4714,4935,5114,5292,5293,9110,9359,12752,21249],"fullWord":9359},{"subwords":[3417,3689,3692,3777,3814,9097,9099,9207,9307,9360,9361,9362,9366,12462,12560,16178,16180,16769,16858,17316,17383,17391],"fullWord":9362},{"subwords":[5918,5953,5955,9307,9360,9363,9366,12460,12462,12506,12516,12560,12561,12876,12879,16858,16860,17383],"fullWord":9363},{"subwords":[9360,9364,9369,11697,11714,11854,11891,12138,12443,12522,13048],"fullWord":9364},{"subwords":[5953,9360,9365,12876,21255,21281,21297],"fullWord":9365},{"subwords":[647,691,1158,1161,9307,9360,9366,9370,9371,9372,12560,12606,12610,13119,13124,15986,16089,16095,16858,17284,17383,17464,17469,18186,18195,20349,20350,20393,20449,20774,20804,20806,20807,20897],"fullWord":9372},{"subwords":[93,732,2921,2922,3107,3402,4046,5956,5959,9079,9081,9373,13154,13155,13439,13688,13705],"fullWord":9373},{"subwords":[200,326,327,329,330,331,336,349,351,359,817,825,854,858,863,905,906,948,4461,4516,4520,4599,4600,4607,4611,4714,4810,4826,4901,4935,4939,5023,5037,5367,5588,5599,5976,5977,9103,9106,9111,9127,9376,9377,9384,9385,9389,9409,14736,14751,14776,14779,14788,14789,14881,14882,14961,14965,15060,15087,15428,15433,15436,15443,15526,15893,15928,16028,16270,16286,16419,16780,16889,16890,16891,17722],"fullWord":9377},{"subwords":[349,359,905,9375,9376,9379,9380,9381,9392,9409,16028,16889,17722],"fullWord":9381},{"subwords":[349,352,817,911,915,1009,5588,5620,5976,5982,6008,6055,9376,9382,9383,9384,14872,14898,14901,14903,14983,15312,15542,15748,18347,18449,18453,18541,18554,18652,18653,18844,18847,18941,19275],"fullWord":9383},{"subwords":[5765,6543,6568,6570,6621,6622,6765,6821,6824,7153,7194,7196,9384,9386,10414,10470,10536,10539,10549,10552,10554,10555,10677,11029,15114,15444,15446,15454,15473,15777,15800],"fullWord":9386},{"subwords":[3413,5856,5996,9079,9089,9207,9384,9388,12410,12412,15021,15175,15411],"fullWord":9388},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5367,9111,9127,9384,9385,9389,9390,9392,9393,9409,15060,15087,15428,15433,15436,15443,15526,16780,16889,16890,16891,17722],"fullWord":9390},{"subwords":[4714,4810,4826,4935,4939,5023,5037,5367,9111,9127,9384,9385,9389,9390,9392,9393,9409,15060,15087,15428,15433,15436,15443,15526,16780,16889,16890,16891,17722],"fullWord":9393},{"subwords":[6039,9384,9389,9392,9394,9409,9413,9430,15526,15530,16889,16890,16895,16899,16903,17722],"fullWord":9394},{"subwords":[7604,8015,9276,9391,9396,9398,9913,9922,15461,15494,15498],"fullWord":9398},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5114,5115,5172,5176,5392,5865,5953,5996,9110,9360,9384,9385,9400,9401,12358,12493,12499,12513,12514,12548,12752,12758,12876,12979,15060,15078,15175,15227,15238,15428,15433,15491,15600,15603,15610],"fullWord":9401},{"subwords":[5953,5996,6008,9360,9384,9400,9402,12513,12514,12548,12876,12979,15175,15238,15239,15610],"fullWord":9402},{"subwords":[5918,5953,5955,5996,6000,6004,9307,9360,9366,9384,9389,9400,9403,9405,9409,12506,12513,12514,12515,12516,12548,12556,12560,12561,12569,12876,12879,12979,12982,13007,13022,15175,15177,15238,15296,15500,15526,15527,15610,15611,15676,15684,16388,16391,16439,16858,16860,16889,16890,16893,17272,17383,17419,17722],"fullWord":9403},{"subwords":[3689,3693,3777,3913,9097,9207,9360,9361,9400,9404,12513,12548,12965,15592],"fullWord":9404},{"subwords":[337,349,352,399,817,857,5588,5592,5976,6008,9376,9384,9407,10121,10324,10355,10414,10502,10536,10549,10675,10677,14780,14782,14872,14968,14983,15399,15444,15473],"fullWord":9407},{"subwords":[9408,13850,14541,14561,15508,15858,18926,19295,19453],"fullWord":9408},{"subwords":[0,2,317,325,932,945,8362,8678,9411],"fullWord":9411},{"subwords":[3165,3948,3950,6023,6039,9079,9085,9412,16178,16298,16303,16769,16779,16903,17316,17434],"fullWord":9412},{"subwords":[200,326,336,337,340,605,610,639,647,691,4461,4492,4891,4895,4901,4985,5007,5037,9127,9307,9415,10090,10107,10119,10120,10169,10173,10530,10535,10622,10654,12238,12241,12438,12442,15893,15928,15931,15942,15986,15988,16858,17006,17068,17214],"fullWord":9415},{"subwords":[6039,9416,9418,9419,9420,9436,9447,10414,10415,10453,10459,10460,10465,10536,10551,10686,10690,10691,10694,10697,10707,16457,16464,16840,16842,16903,16907,16911,16913,16915,17073,17093,17094,17857,17862,17863,18844,18850,18863,18866,18870,18947],"fullWord":9420},{"subwords":[7604,7611,9138,9307,9421,10637,10642,10654,12438,12442,12462,16811,16815,16858,16866,17083],"fullWord":9421},{"subwords":[51,67,349,359,905,1366,1419,1422,1763,1851,1858,2029,2030,2033,2034,2308,2343,2439,2441,2446,2476,9376,9409,9424,12680,12683,12700,12701,12959,12964,13007,15402,15410,15576,15590,15673,16028,16765,16889,17303,17308,17722],"fullWord":9424},{"subwords":[7604,7611,7826,7841,7844,7847,9307,9360,9366,9425,12509,12512,12560,16815,16858,16866,17383,17389,17397],"fullWord":9425},{"subwords":[7826,7847,9136,9137,9426,10793,10809,10810,10811,10833,10854,12812,12822,12850,12851,13024,16837,17099,17350,17354,17364,17370],"fullWord":9426},{"subwords":[5830,5831,5845,6004,9384,9389,9409,9422,9427,11539,11743,11745,11764,11765,11772,11854,11860,11861,11970,11973,11987,12872,12979,12982,13007,13022,15202,15224,15480,15481,15484,15489,15526,15610,15611,15627,15632,15638,15676,16375,16889,16890,17382,17419,17722],"fullWord":9427},{"subwords":[5014,5021,5037,5221,9127,9374,9428,12905,12936,14020,14023,14032,14421,16883,17323,17406],"fullWord":9428},{"subwords":[337,340,349,359,362,399,407,817,825,857,858,860,863,905,906,5588,5592,5593,5599,5976,5977,9376,9384,9389,9409,9416,9429,10121,10125,10207,10228,10324,10355,10360,10414,10415,10502,10503,10536,10549,10550,10551,10675,10676,10677,14780,14783,14788,14805,14881,14968,14973,15399,15400,15444,15445,15473,15475,15526,15931,15933,15942,15948,16028,16270,16274,16286,16419,16420,16435,16889,16890,17072,17722],"fullWord":9429},{"subwords":[4714,4826,4849,4935,4939,5037,5061,5471,5478,6039,9111,9127,9431,9432,9449,9450,16780,16782,16903,18062,18066,18067,18073,18083,19876,19877,19882],"fullWord":9432},{"subwords":[6039,9384,9389,9409,9431,9433,15526,15530,15540,15777,15782,15840,15841,15849,16796,16797,16889,16890,16895,16899,16903,17722,18066,18071,18072,18073,18083,18150,19876,19880,19881,19882,19886],"fullWord":9433},{"subwords":[6039,9431,9434,16903,18066,18073,18083,19876,19882],"fullWord":9434},{"subwords":[8648,8678,8685,8688,8691,8935,9422,9435,9447,11780,16627,16653,16907,17179,17183,18742,18882,18947,18967],"fullWord":9435},{"subwords":[126,337,428,434,488,2813,3052,3402,3410,3429,9146,9437,9438,10072,10126,10524,10691,18347,18349,18365,18823,18863],"fullWord":9438},{"subwords":[3272,3282,3283,3328,3429,3430,3431,4639,4714,4909,4925,4935,4942,5062,5677,5680,5682,6057,6058,6068,8612,8617,8619,8625,8626,8688,9079,9082,9440,9441,18570,18697,18823,18835,18844,18845],"fullWord":9441},{"subwords":[3264,3272,3328,3331,3429,3430,3434,4238,4241,6023,6057,6058,6068,6069,8506,8586,8612,8625,8628,8678,8685,8688,8691,8935,9079,9085,9440,9442,9447,16178,16298,16304,16457,16574,16653,16769,16907,16911,18570,18697,18742,18823,18830,18844,18850,18947],"fullWord":9442},{"subwords":[4671,4714,4761,4935,4938,4942,4971,4972,5680,5832,9108,9109,9444,9445,11478,11483,11574,11578,11579,11626,11786,18576,18577,18579,18595,18835,18844,18845,18882,18886,18887],"fullWord":9445},{"subwords":[5705,5706,5765,6425,6443,6445,6543,6568,6572,6573,6574,6647,6651,6654,6767,6768,6782,6784,6785,6786,9135,9416,9419,9436,9447,9448,10394,10396,10414,10415,10459,10460,10465,10536,10539,10551,10554,10557,10560,10686,10691,10694,10697,10707,16365,16457,16801,16840,16907,16911,17093,17860,17862,18844,18850,18863,18866,18870,18947],"fullWord":9448},{"subwords":[6152,6154,6156,6171,9416,9419,9436,9447,9454,10414,10415,10459,10460,10465,10494,10536,10551,10686,10691,10694,10697,10707,16457,16483,16827,16840,16907,16911,16922,16925,17093,17862,18677,18844,18850,18863,18866,18870,18947],"fullWord":9454},{"subwords":[213,326,349,854,9376,9455,9456,14736,14776,14954,15428],"fullWord":9456},{"subwords":[17,30,171,1219,1243,1246,1515,1560,4427,4618,4726,5632,9457,9458,9471],"fullWord":9458},{"subwords":[17,25,817,1219,1366,1367,1377,1535,2308,2317,5588,5632,5976,9457,9459,9508,14995],"fullWord":9459},{"subwords":[51,67,72,1422,1456,1462,1482,2029,2034,2035,2037,2041,2237,9457,9460,9461,9462,9515,9516,9603,9606,9657,9658,9659,12686,12692,15874,16041,17308,17435,17723,17885,18302,18318,18432,18435,18540],"fullWord":9461},{"subwords":[382,2813,3017,9463,9464,10072,15880,15942],"fullWord":9464},{"subwords":[371,2813,2822,9463,9465,9466,10072,10082],"fullWord":9466},{"subwords":[93,94,171,2766,2807,2808,4431,4639,4651,4726,9465,9467,9471,9485],"fullWord":9467},{"subwords":[93,121,796,817,867,2807,2941,2954,4107,5588,5976,9465,9468,9485,9508,9543,14717,14729,14798,15021],"fullWord":9468},{"subwords":[93,126,1009,2807,3052,5620,6055,6057,9465,9469,9485,9531,9557,18326,18358,18541,18545],"fullWord":9469},{"subwords":[93,2807,3402,9079,9465,9470,9480,9485],"fullWord":9470},{"subwords":[171,287,326,605,4492,4502,4890,4947,4985,4993,5083,7253,7283,7604,9473,9475,9480,9578,12230],"fullWord":9473},{"subwords":[171,200,325,326,336,932,4461,4543,4901,5037,5046,8217,8221,8224,8225,8250,8251,8362,8366,8617,8678,9127,9474,9480,9584,9585,15893,15928,16503],"fullWord":9474},{"subwords":[171,269,270,4726,5707,5709,7253,7267,7269,7270,9471,9475,9476],"fullWord":9476},{"subwords":[269,817,5588,5709,5976,5988,7267,7269,7271,7375,7461,9475,9477,9508,14758,14762,15141],"fullWord":9477},{"subwords":[263,366,1078,7375,8099,9475,9479,9508,9690,14758,14759,14794,15790],"fullWord":9479},{"subwords":[171,326,327,337,338,399,4466,4601,4714,4726,4728,4739,4891,4935,5756,9103,9104,9117,9471,9480,9481,9482,10090,10093,10119,10324,10327,10378,10414,10530,10536,10537],"fullWord":9482},{"subwords":[337,349,399,817,857,5588,5592,5976,9376,9384,9480,9481,9483,9508,10121,10324,10355,10414,10502,10536,10549,10675,10677,14780,14968,15399,15444,15473],"fullWord":9483},{"subwords":[337,349,9376,9480,9481,9484,9508,10121,10502,10675,12680,12812,12948,14780,15399,15617],"fullWord":9484},{"subwords":[481,9486,9499,9524,9672,10182,10304,10864,12913,13204,13424,13932,13981,14009,14056,14088,21064],"fullWord":9486},{"subwords":[30,171,1243,1246,1515,1526,1560,1665,4427,4472,4475,4618,4726,5658,9457,9471,9487,9488,9489,11107,11115,11437,11438],"fullWord":9489},{"subwords":[171,4472,4475,4726,5658,9471,9487,9491,11107,11115,11437,11438],"fullWord":9491},{"subwords":[817,869,5588,5976,9487,9492,9508,11276,11286,11437,11539,14808,14975,15202],"fullWord":9492},{"subwords":[269,399,620,625,5745,7293,7298,7477,7493,7494,7674,7680,9475,9494,9496,9532,10109,10174,10324,10344,10398,12229,12230],"fullWord":9496},{"subwords":[716,7293,7447,9475,9497,9524,10109,10304,12230,12311,21058],"fullWord":9497},{"subwords":[596,925,961,9499,9500,9501,12257,12269,12283,13239,13259,13336,15986,16014,17220,17476,17490],"fullWord":9501},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6033,9499,9502,9503,9504,9506,9508,9512,9514,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17523],"fullWord":9504},{"subwords":[227,732,735,738,817,1196,5588,5956,5976,9499,9502,9503,9505,9508,9524,13286,13294,13424,13428,13439,13455,13577,14258,14262,14290,14410,14576,14851,14852,14939,14979,15248,15255,15864,15866,21064,21071,21097,21099,21127],"fullWord":9505},{"subwords":[287,750,7283,7365,7604,7612,9475,9480,9499,9507,9578,12230,12257,12453,13193,13239,13251,13721,13765,13773],"fullWord":9507},{"subwords":[828,1060,6308,6821,7045,7194,7196,9508,9509,19837],"fullWord":9509},{"subwords":[299,837,7375,8038,9475,9508,9510,9618,12230,12509,12548,12680,12951,12983,14758,14821,14832,15568],"fullWord":9510},{"subwords":[171,817,4516,4518,4607,4726,4810,5346,5588,5976,6008,9471,9508,9511,14736,14872,14961,14983,15060],"fullWord":9511},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6033,9499,9502,9503,9504,9506,9508,9512,9514,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17523],"fullWord":9514},{"subwords":[693,711,712,1074,1076,9498,9517,9518,9677,9678,9724,9725,9734,9735,9741,9744,12300,12659,12663,15986,16041,18005,18117,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":9518},{"subwords":[693,716,1074,1077,9517,9519,9524,9677,9724,9741,12300,12311,12659,18408,18508,19434,19435,21215],"fullWord":9519},{"subwords":[287,1154,1158,7283,7604,7747,9475,9480,9521,9522,9578,12230,20326,20349,20393,20399,20742,20774,20790],"fullWord":9522},{"subwords":[93,1196,3100,6189,9524,9525,21097],"fullWord":9525},{"subwords":[269,1196,6189,7447,7467,9475,9524,9526,21097],"fullWord":9526},{"subwords":[1106,1196,5629,6092,6189,9524,9527,19992,21097],"fullWord":9527},{"subwords":[171,213,4584,4726,9471,9528,9529,21249],"fullWord":9529},{"subwords":[817,5588,5976,9508,9528,9530,14945,14954],"fullWord":9530},{"subwords":[4678,4810,5984,9533,9534,15060,15093],"fullWord":9534},{"subwords":[5778,5780,9537,9538,9540,9865,10416,10495,11065,21110],"fullWord":9537},{"subwords":[4728,4731,4744,5691,5756,5780,9538,9539,10378,10383],"fullWord":9539},{"subwords":[9541,9557,12339,12374,18576,18583,18607],"fullWord":9541},{"subwords":[51,817,1366,1377,1535,2029,2030,2072,2205,2308,2317,2446,5588,5976,9457,9508,9542,9603,9614,12680,12959,12979,14995,15576,15579,15610],"fullWord":9542},{"subwords":[4678,4810,5355,5740,5741,5984,9533,9543,9544,15060,15093,15103],"fullWord":9544},{"subwords":[5740,5984,6008,9533,9543,9545,15103],"fullWord":9545},{"subwords":[5996,9276,9278,9384,9396,9543,9546,9836,9855,9913,9919,15175,15498],"fullWord":9546},{"subwords":[5698,5984,6189,6196,6197,6198,9533,9535,9548,15866,15867,16319,16340,16425,21130,21212],"fullWord":9548},{"subwords":[4680,4826,6031,6039,6042,9549,9550,9551,16319,16320,16323,16342],"fullWord":9551},{"subwords":[6031,6039,6042,6043,9549,9550,9552,16319,16342],"fullWord":9552},{"subwords":[4680,4826,9553,9554,9557,9558,16319,16320,16457,17816,18575,18576,18577,18588],"fullWord":9554},{"subwords":[5984,6018,6046,9533,9535,9553,9555,9557,9558,15290,15306,15312,15748,16319,16340,16425,16457,17823,17840,18576,18588,18658,19240,19242],"fullWord":9555},{"subwords":[9447,9553,9556,9557,9558,9561,9734,9735,9741,9742,9743,9744,16457,16907,16911,16917,18066,18074,18083,18085,18086,18844,18850,18947,19876],"fullWord":9556},{"subwords":[1009,5616,5620,5626,5845,6055,9487,9490,9493,9553,9557,9558,9559,11330,11356,11361,11362,11366,11376,11437,11453,11456,11457,11560,11574,11575,15973,15978,16041,16043,16270,16278,16293,16457,17813,17830,18389,18393,18398,18407,18541,18549,18552,18559,18595],"fullWord":9559},{"subwords":[5845,9553,9557,9558,9560,9614,9615,9647,9657,9659,11574,12007,12010,12011,12014,12030,12872,16457,17198,17382,17435,17830,18595,18981,18985,19026,19032,19033,19034],"fullWord":9560},{"subwords":[5691,5693,5790,6118,6121,9562,9563,9564,9567,10383,10392,10451,16319,16475,17059,20532],"fullWord":9564},{"subwords":[6122,7493,7604,9562,9565,9578,12390,20579,20742,20774,20785,20790],"fullWord":9565},{"subwords":[8588,8594,8625,8628,8678,9562,9566,9567,16475,16574,16610,20826,20832],"fullWord":9566},{"subwords":[1560,1767,1777,1780,4618,4714,4935,5632,9568,9569,9571,9572],"fullWord":9569},{"subwords":[1767,1790,2404,2417,5632,9384,9568,9570,9571,9573,14995,15402],"fullWord":9570},{"subwords":[1790,1791,2417,2423,9384,9389,9409,9568,9571,9573,9574,9575,9577,14995,15014,15402,15410,15526,16423,16765,16889,16890,17722],"fullWord":9574},{"subwords":[1797,1837,7604,9568,9576,9578,12406],"fullWord":9576},{"subwords":[4714,4935,4947,5709,7578,9578,9579],"fullWord":9579},{"subwords":[5709,5988,7578,9384,9578,9580,15141,15461],"fullWord":9580},{"subwords":[5709,7477,7578,9578,9581,10398,10414,10536],"fullWord":9581},{"subwords":[7396,9475,9478,9480,9521,9523,9578,9582,9583,15910,16089,18181,18239,20326,20341,20449,20742,20749],"fullWord":9583},{"subwords":[171,200,325,326,336,932,4461,4543,4901,5037,5046,8217,8221,8224,8225,8250,8251,8362,8366,8617,8678,9127,9474,9480,9584,9585,15893,15928,16503],"fullWord":9585},{"subwords":[4714,4728,4739,4935,4942,5680,5756,9117,9557,9586,9587,10378,10414,10460,10530,10536,10537,10691,10694,18835,18844,18845,18863,18864,18866,18867],"fullWord":9587},{"subwords":[9384,9557,9586,9588,10414,10460,10536,10549,10677,10691,10694,10695,10705,15197,15312,15444,15473,15542,15748,18844,18847,18863,18866,18868,18941],"fullWord":9588},{"subwords":[7477,7493,7604,7680,9265,9578,9589,10398,10414,10536,10544,10625,10637,12438,12439],"fullWord":9589},{"subwords":[7604,9293,9578,9590,10637,10662,11067,12438,21144],"fullWord":9590},{"subwords":[4714,4774,4935,4985,4988,5083,5865,9226,9596,9597,12474,12475],"fullWord":9597},{"subwords":[5918,9307,9595,9596,9598,12474,12476,16483,16858,16860,16922],"fullWord":9598},{"subwords":[9325,9557,9599,12374,12463,18607,18844,18894,18898,18925,21120,21135,21136,21144],"fullWord":9599},{"subwords":[9384,9557,9600,15312,15542,15748,18844,18847,18941,18950,18953,18963,19282,19303],"fullWord":9600},{"subwords":[596,657,658,661,9601,9602,12252,12283,15986],"fullWord":9602},{"subwords":[1560,2042,2058,2059,4618,5114,5632,9603,9604,9614,12752],"fullWord":9604},{"subwords":[2042,2072,2205,2446,5632,9603,9605,9614,12959,12979,14995,15576,15579,15610],"fullWord":9605},{"subwords":[3697,4029,9607,9608,9614,9616,9633,9672,9673,9865,21174],"fullWord":9608},{"subwords":[3826,3835,3839,3860,9607,9609,9610,9611,17316,17319],"fullWord":9610},{"subwords":[3826,3860,6023,9612,9614,9615,9647,16298,17316],"fullWord":9612},{"subwords":[3638,3777,3803,4263,5096,5172,5507,5523,9613,9689,9711,9723,12493,19655,19664],"fullWord":9613},{"subwords":[5114,5123,5125,5709,5718,7522,7782,9614,9618,9619,12752],"fullWord":9619},{"subwords":[5709,5718,5988,5989,7522,7788,7855,7858,8043,9614,9618,9620,12798,12979,15141,15610],"fullWord":9620},{"subwords":[5709,5718,7477,7522,7525,9614,9618,9621,10398,10443,10793,10796,12792,12845],"fullWord":9621},{"subwords":[4714,4774,4935,4985,4988,5083,5114,5172,5176,5865,5953,9110,9360,9614,9624,9625,9626,12493,12499,12752,12758,12876],"fullWord":9626},{"subwords":[5953,5996,9360,9384,9400,9614,9624,9625,9627,12513,12514,12548,12876,12979,15175,15179,15238,15610],"fullWord":9627},{"subwords":[9307,9318,9325,9335,9360,9366,9447,9595,9625,9628,9629,9630,9631,9657,9659,12463,12471,12560,12574,12591,16858,16907,17255,17278,17383,17435,18894,18919,18947,19036,19057],"fullWord":9630},{"subwords":[9447,9631,9632,9654,9657,9659,16903,16907,16915,17434,17435,17436,18947,19125],"fullWord":9632},{"subwords":[6004,9543,9547,9614,9615,9633,9634,9635,9636,9647,12979,12982,13007,15610,15611,15676,17419],"fullWord":9635},{"subwords":[7604,9142,9276,9360,9578,9591,9618,9625,9637,9913,9922,10015,12509,12825],"fullWord":9637},{"subwords":[4728,5114,5146,5161,5234,5237,5756,9557,9614,9638,9639,9657,10378,10443,10460,10780,10897,12752,12837,12845,18981,18983,19016,19017],"fullWord":9639},{"subwords":[9557,9614,9638,9640,9657,10443,10460,10882,10897,12845,12979,13008,15312,15610,15621,15691,15694,15748,18981,19017,19093,19101],"fullWord":9640},{"subwords":[325,932,8362,8789,9513,9622,9623,9642,9643,9649,12480,12560,12565,12810,15986,17383],"fullWord":9643},{"subwords":[171,183,195,605,4492,4532,5172,5173,9508,9646,12274,12493,12548,12680,14736,14749,14821,14826,15561,15568,15600],"fullWord":9646},{"subwords":[6033,8549,8725,8730,8845,8846,8850,8856,8881,8886,9614,9615,9647,9648,9649,12810,12916,12925,12936,13607,14166,14172,16574,16676,16693,16694,17406,17407],"fullWord":9648},{"subwords":[4826,5114,5117,5221,5223,8721,8724,8725,8726,8730,8881,8882,9614,9615,9647,9649,9650,12752,12755,12802,12810,16574,16581,16674,16676,16677,17323],"fullWord":9650},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8934,9614,9615,9647,9649,9651,12810,12979,12982,13007,15386,15610,15611,15676,16574,16676,16678,16697,17419],"fullWord":9651},{"subwords":[6039,8725,8730,8881,8883,9549,9614,9615,9647,9649,9652,9654,12810,16574,16609,16676,16680,17434],"fullWord":9652},{"subwords":[325,932,8362,9649,9653,9734,12810,19592,19871],"fullWord":9653},{"subwords":[6039,9549,9614,9615,9647,9654,9655,17434],"fullWord":9655},{"subwords":[9553,9557,9558,9614,9615,9638,9641,9647,9656,9657,9659,10443,10447,10459,10460,10465,10888,10896,10897,10901,12845,12848,16457,17097,17113,17354,17359,17435,17903,18981,18985,19017],"fullWord":9656},{"subwords":[5114,5234,5237,9557,9614,9657,9660,12752,18981,18983,19131,19134,19135],"fullWord":9660},{"subwords":[9557,9614,9657,9661,12979,13008,13041,15312,15610,15691,15694,15748,18981,19093,19101,19117,19118,19131,19134,19138,19331],"fullWord":9661},{"subwords":[9561,9614,9615,9647,9662,9663,9734,10443,10447,10470,10888,10925,12845,12848,13053,16402,17097,17128,17354,17359,17442,18066,19876],"fullWord":9663},{"subwords":[3777,3786,3803,4268,5653,5856,5953,9561,9614,9664,9711,9713,9723,12874,12876,13049,19655],"fullWord":9664},{"subwords":[3777,3803,3825,4029,9665,9672,9711,9723,19655,21183,21193],"fullWord":9665},{"subwords":[9654,9657,9659,9667,9668,9734,9735,9740,9741,9744,13055,13058,13059,13082,17434,17435,17436,19125],"fullWord":9668},{"subwords":[337,9480,9481,9669,12812,13087,13088,19919,19923,20107,20110,20171,20172,20247,20250],"fullWord":9669},{"subwords":[4728,4865,5114,5146,5271,5756,9562,9614,9670,9671,10378,10443,10490,10780,10942,10944,12752,12837,12845,13110,13111,13114,20524,20566,20875,20883],"fullWord":9671},{"subwords":[6821,6854,6999,9672,9674,9704,19580,21193],"fullWord":9674},{"subwords":[7604,7895,9360,9578,9591,9618,9625,9672,9675,12509,21144,21167,21168,21183,21186],"fullWord":9675},{"subwords":[1636,1817,2004,9561,9568,9571,9679,10414,10470,10504,10536,10552,10961],"fullWord":9679},{"subwords":[106,171,326,1053,2766,3402,4263,9449,9480,9680],"fullWord":9680},{"subwords":[4810,5466,5467,5471,9561,9682,9729,15060,15773,15777,15778,19578],"fullWord":9682},{"subwords":[5466,5467,5471,5485,9561,9683,9684,9690],"fullWord":9684},{"subwords":[4810,5351,5420,5471,5485,5988,9561,9683,9685,9690,9729,15060,15141,15773,15777,15778,15790,19855,19856],"fullWord":9685},{"subwords":[4826,4849,5471,5478,5485,5488,7460,9561,9683,9686,9690,9693,9734,18066,18067,19876,19877],"fullWord":9686},{"subwords":[4263,4268,4269,4639,4714,4909,4935,5455,5471,9079,9082,9449,9561,9687,9695,9696],"fullWord":9687},{"subwords":[8617,8688,9026,9449,9688,9741,18794],"fullWord":9688},{"subwords":[5471,5485,5709,9561,9683,9690,9691],"fullWord":9691},{"subwords":[5709,7477,7722,9561,9690,9692,10398,10470,10981,10982],"fullWord":9692},{"subwords":[7293,9475,9690,9694,10109,10958,10981],"fullWord":9694},{"subwords":[4263,4268,4269,4639,4714,4909,4935,5455,5471,9079,9082,9449,9561,9687,9695,9696],"fullWord":9696},{"subwords":[4268,4312,4326,4336,5654,9079,9384,9561,9695,9697,9729,15021,15411,15777,19850,19862],"fullWord":9697},{"subwords":[4268,4271,5656,6023,9079,9085,9561,9695,9698,9734,16178,16298,16769,18066,18083,19876],"fullWord":9698},{"subwords":[7604,7759,8151,8154,9276,9578,9690,9701,9718,9913,9922,10051],"fullWord":9701},{"subwords":[6033,9561,9702,9703,9728,9734,10470,14003,14454,14458,14472,14551,17128,18066,18135,18136,19825,19876],"fullWord":9703},{"subwords":[1636,2004,2567,5782,5846,9561,9705,10470,10961,12110,19612],"fullWord":9705},{"subwords":[2567,2576,2668,9603,9606,9706,9707,9734,11817,11823,12872,17308,18035,18103,18112],"fullWord":9707},{"subwords":[5471,5503,5525,5526,5846,9561,9708,9709,9728,12091,13478,14438,19624,19625],"fullWord":9709},{"subwords":[5846,9561,9708,9710,9728,9729,11539,13577,13593,13602,14262,14518,15202,15248,15747,15777,15806,15815,19624],"fullWord":9710},{"subwords":[3777,3803,3814,3821,9711,9712,9723,9734,12560,12597,12888,17316,17383,18117,19655,19659],"fullWord":9712},{"subwords":[5627,9494,9532,9561,9677,9713,9714,12229],"fullWord":9714},{"subwords":[7477,7493,7680,7722,7759,8151,9561,9690,9713,9715,10398,10470,10981,10982,11008,11012,11013],"fullWord":9715},{"subwords":[7759,8151,8180,9690,9704,9716,10981,11012,11024,19590],"fullWord":9716},{"subwords":[9360,9369,9400,9625,9666,9717,9723,12513,12548,13048,13051,15795,15821,19866],"fullWord":9717},{"subwords":[4774,5471,5489,5507,5511,5516,5865,9561,9699,9700,9713,9718,9719,9836,12624,12640,19595],"fullWord":9719},{"subwords":[9543,9561,9699,9713,9718,9720,9729,9836,9855,12640,15777,15821,15822,19595,19866],"fullWord":9720},{"subwords":[9557,9561,9699,9713,9718,9721,9741,9742,9836,9844,12374,12640,12659,18607,19434,19438,19595],"fullWord":9721},{"subwords":[9276,9561,9699,9713,9718,9722,9836,9913,9919,12640,19595],"fullWord":9722},{"subwords":[693,711,712,1074,1076,9498,9517,9518,9677,9678,9724,9725,9734,9735,9741,9744,12300,12659,12663,15986,16041,18005,18117,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":9725},{"subwords":[9657,9659,9667,9723,9726,9727,9734,9735,9741,9744,12560,12574,12591,12597,12659,12663,12888,13055,13059,13082,17278,17281,17383,17435,18005,18117,19036,19057,19434,19452,19780],"fullWord":9727},{"subwords":[9384,9389,9409,9561,9729,9730,9734,15526,15777,15782,15840,16796,16889,16890,17722,18066,18071,18083,18150,19876,19880],"fullWord":9730},{"subwords":[9409,9447,9731,9734,9735,9741,9744,15852,15858,15861,16889,16907,16917,17722,17881,18083,18085,18947],"fullWord":9731},{"subwords":[9666,9732,9733,9734,13007,13051,13052,17451],"fullWord":9733},{"subwords":[4826,4849,5471,5478,5479,5480,5548,9553,9557,9558,9561,9734,9735,9736,9741,9742,9743,9744,16457,17999,18066,18067,18074,18575,19876,19877],"fullWord":9736},{"subwords":[6018,9553,9557,9558,9561,9729,9734,9735,9737,9741,9742,9743,9744,15306,15312,15748,15777,15782,15840,15852,15858,15861,16457,18066,18071,18074,18150,19356,19359,19876,19880],"fullWord":9737},{"subwords":[9553,9557,9558,9561,9734,9735,9738,9741,9742,9743,9744,10459,10460,10465,10470,11044,11050,11053,16457,17128,17147,18066,18074,19422,19605,19876],"fullWord":9738},{"subwords":[9704,9734,9735,9739,9741,9744,11044,11049,17147,17149,18018,19605],"fullWord":9739},{"subwords":[5471,5479,9557,9561,9741,9742,9745,19493],"fullWord":9745},{"subwords":[385,386,1210,1213,1309,9746,10061],"fullWord":9746},{"subwords":[51,67,950,1422,1444,1894,2029,2034,2042,2048,9747,9748,12675,12677,17294,17308],"fullWord":9748},{"subwords":[200,325,326,336,932,950,4461,4543,4901,5037,5046,5050,8217,8362,8366,8617,8678,9127,9749,9750,9885,9894,15893,15928,16503,16823,16954,16955],"fullWord":9750},{"subwords":[349,828,867,6254,6273,6308,6621,9376,9396,9751,9752,15450],"fullWord":9751},{"subwords":[349,359,828,867,868,905,950,6254,6259,6273,6274,6308,6621,6636,7096,9135,9376,9396,9399,9409,9752,9753,10041,15534,16028,16889,16954,17722],"fullWord":9753},{"subwords":[254,596,693,6293,6344,9754,18408,18418,18419],"fullWord":9754},{"subwords":[0,317,596,651,1070,8310,8989,8993,9755,9876],"fullWord":9755},{"subwords":[349,359,817,825,858,863,867,868,905,906,950,953,5588,5599,5976,5977,9376,9384,9389,9396,9399,9409,9756,10041,14788,14798,14802,14881,15526,15534,15939,16028,16270,16286,16419,16889,16890,16954,16960,17722],"fullWord":9756},{"subwords":[337,340,950,6246,6249,6690,6715,9135,9150,9151,9762,9763,15931,15942,16829,16954],"fullWord":9763},{"subwords":[337,481,8241,8321,8664,9150,9764,9932,10182,10665,13191,13204,13651,13652],"fullWord":9764},{"subwords":[337,341,497,586,1070,9150,9765,10136,10584,10585,11148,11173,11182,11387,11615,11659,11673,19621],"fullWord":9765},{"subwords":[382,481,486,925,950,961,9766,9767,10182,10194,13204,13232,13336,15942,16014,17019,17476],"fullWord":9767},{"subwords":[369,647,691,950,9276,9284,9307,9480,9595,9771,9772,9913,9929,15986,16007,16858,16876,16954,16974],"fullWord":9772},{"subwords":[596,657,658,661,950,9770,9773,12252,12283,15986,16007,16008],"fullWord":9773},{"subwords":[596,950,957,973,987,9770,9774,12283,15986,16007,16008,16009],"fullWord":9774},{"subwords":[337,369,9142,9150,9276,9360,9775,9902,9905,9913,10009,10013,10120,10177,10645,10652,10663,10741,10814,12238,12438,12675,12812,12825],"fullWord":9775},{"subwords":[950,961,9776,9777,12675,12677,12936,13336,13343,16014,17294,17298,17406,17476],"fullWord":9777},{"subwords":[762,925,950,961,9778,9779,13268,13269,13273,13281,13336,16014,17476],"fullWord":9779},{"subwords":[781,1070,9780,9781,13364,14561,14569,18436,18495,18508,18515,19196,19453,19493],"fullWord":9781},{"subwords":[817,818,867,911,1009,5588,5620,5976,5982,6055,9782,9783,9791,14798,14898,14899,14901,15312,15748,18358,18360,18449,18453,18541,18545,18554,19244],"fullWord":9783},{"subwords":[792,867,868,905,911,918,950,9782,9784,9789,9791,9792,14898,14899,14912,16041,17773,17779,18449,18472,18484,19381],"fullWord":9784},{"subwords":[504,792,867,868,869,883,905,950,9786,9787,11276,11296,11301,11314,11330,11341,14808,14820,15973],"fullWord":9787},{"subwords":[341,349,796,867,869,2848,2941,3402,4065,9376,9396,9788,11086,11099,11276,11281,11296,11617,11620,11749,14729,14808,15422,15480],"fullWord":9788},{"subwords":[867,868,905,911,918,950,957,973,990,9789,9790,9791,9792,14898,14912,16041,17773,17779,17781,18449,18472,18484,18486,18487,19381,19382],"fullWord":9790},{"subwords":[0,2,317,325,932,950,957,973,8362,9793,9794,16033],"fullWord":9794},{"subwords":[950,9757,9758,9795,9796,9801,16103,16992,21047,21049],"fullWord":9796},{"subwords":[183,1196,4578,5114,5567,5575,9797,9798,9865,12675,12752,12831,12832,21047,21097,21154,21174,21175],"fullWord":9798},{"subwords":[950,1196,1197,5619,9797,9799,9800,9801,9865,9870,12675,12677,12831,12833,13147,15939,16103,16270,16992,17294,17472,17473,21047,21049,21097,21105,21130,21174,21178],"fullWord":9799},{"subwords":[950,9802,9803,12675,12677,17294,21304,21307,21311],"fullWord":9803},{"subwords":[17,18,67,950,1219,1222,1288,1293,1422,1425,1444,1521,1524,1894,5632,5635,9805,9806,15939,16270],"fullWord":9806},{"subwords":[1894,2042,2048,5632,5635,9807,9808,17308],"fullWord":9808},{"subwords":[4667,5667,5668,5740,5741,7467,7468,7471,9809,9810,9826],"fullWord":9810},{"subwords":[4680,4826,4835,5667,5671,5740,5741,5742,7460,7467,7468,7471,7472,7473,9809,9811,9826,9828,16313,16319,16320,16326],"fullWord":9811},{"subwords":[4728,4731,5691,5740,5741,5756,5778,9812,9813,10378,10383,10386,10416],"fullWord":9813},{"subwords":[5691,5740,5778,5984,9812,9814,10383,10386,10388,10416,15103,15107],"fullWord":9814},{"subwords":[4774,5665,5740,5741,5865,9816,9817,9836,9970,9971,12339,12340],"fullWord":9817},{"subwords":[5740,5984,5998,9816,9818,9836,9855,9970,12339,15103],"fullWord":9818},{"subwords":[5691,5694,5740,5778,6189,9812,9816,9819,9836,9865,9970,9972,10383,10386,10416,10495,11065,12339,21120],"fullWord":9819},{"subwords":[5740,5957,5984,9821,9822,13489,13492,13506,13522,13577,13583,13590,14262,15103,15248],"fullWord":9822},{"subwords":[6543,6621,6622,6626,6636,7085,7096,9135,9384,9389,9396,9399,9409,9824,9825,9852,9854,9895,10041,15114,15134,15446,15526,15534,16431,16437,16889,16890,16954,16960,17722],"fullWord":9825},{"subwords":[5691,5740,5778,5984,5988,7467,7471,7477,7678,7982,9812,9826,9827,10383,10386,10388,10398,10405,10416,15103,15107,15141],"fullWord":9827},{"subwords":[4714,4728,4739,4935,4957,5114,5146,5756,5778,9110,9117,9125,9150,9829,9885,9905,10378,10414,10416,10443,10530,10533,10536,10537,10566,10567,10780,12752,12812,12815,12834,12837,12841,12845],"fullWord":9829},{"subwords":[4673,4728,4731,5691,5740,5741,5756,5778,9812,9821,9830,9831,10378,10383,10386,10416,13478,13489,13490,13492,13495,13522,13950],"fullWord":9831},{"subwords":[5691,5740,5778,9150,9812,9821,9830,9832,9846,9932,10383,10386,10414,10416,10536,10566,10665,13489,13492,13495,13522,13705,13732,13743],"fullWord":9832},{"subwords":[3120,3135,3429,3430,5778,6057,9079,9150,9833,9906,9946,9947,10376,10414,10416,10460,10518,10525,10536,10566,10691,10694,18823,18824,18828,18844,18861,18863,18866],"fullWord":9833},{"subwords":[5778,6107,9150,9276,9281,9835,9836,9896,9902,9913,9919,10414,10416,10471,10481,10485,10536,10544,10566,10569,10625,10645,10711,10714,12387,12438,12439,20004,20008,20129,20144,20152,20157],"fullWord":9835},{"subwords":[4774,4785,4826,4835,5114,5117,5172,5176,5188,5221,5223,5865,5875,5918,5953,5955,9836,9837,9838,9841,9842,9843,12493,12499,12500,12501,12506,12560,12561,12562,12752,12755,12876,12879,16381,17323,17383,17387],"fullWord":9838},{"subwords":[4774,5665,5740,5741,5865,9816,9836,9839,9970,9971,12339,12340],"fullWord":9839},{"subwords":[5691,5740,5778,9812,9816,9836,9840,9970,9972,10383,10386,10416,12339],"fullWord":9840},{"subwords":[1560,1576,1587,2384,2385,2387,4618,4678,4810,5355,5740,5741,5984,9849,9850,14995,15060,15093,15103],"fullWord":9850},{"subwords":[4678,4688,4810,5355,5740,5741,5984,6406,6409,6412,7056,7057,7058,9852,9853,15060,15093,15098,15103,15114,15115],"fullWord":9853},{"subwords":[4678,4774,4810,5355,5665,5740,5741,5865,5868,5984,5998,9816,9836,9855,9856,9970,9971,12339,12340,12358,15060,15093,15103,15227],"fullWord":9856},{"subwords":[5691,5740,5778,5984,5998,9812,9816,9836,9855,9857,9970,9972,10383,10386,10388,10416,12339,15103,15107],"fullWord":9857},{"subwords":[5740,5953,9816,9836,9841,9844,9861,9970,9993,12339,12374,12574,12581,12876,18576,18583,18607,18981,19010,19012,19036,19038],"fullWord":9861},{"subwords":[5691,5740,5778,9812,9862,10383,10386,10416,10460,18576],"fullWord":9862},{"subwords":[5691,5693,5740,5742,5778,5779,5790,5798,6092,6104,9812,9815,9863,10383,10386,10387,10392,10416,10417,10451,10471,16319,16326,17047,19992,20000],"fullWord":9863},{"subwords":[5778,5779,5799,6107,6110,9150,9151,9416,9864,9896,10414,10415,10416,10417,10471,10481,10486,10536,10551,10566,10573,10711,10719,16829,16954,20004,20007,20129,20134,20144,20197],"fullWord":9864},{"subwords":[269,1196,5740,6189,7447,7467,7471,9826,9865,9866,21047,21097],"fullWord":9866},{"subwords":[5743,6199,7493,7604,9276,9285,9826,9836,9865,9867,9913,9919,9922,21120,21144],"fullWord":9867},{"subwords":[528,716,1196,9768,9836,9845,9865,9868,11167,11213,11218,11264,11408,11437,11446,11452,11512,12201,12229,12244,12245,12311,21047,21051,21052,21059,21097,21120],"fullWord":9868},{"subwords":[732,733,1196,4578,5567,5575,5956,9865,9869,13171,13424,13425,13439,13446,13449,13478,21047,21064,21097,21127],"fullWord":9869},{"subwords":[5740,5742,6189,6198,9865,9870,9871,16319,16326,16457,16946,16992,18018,18019,18576,18588,19553,19554,21130,21135],"fullWord":9871},{"subwords":[1145,1196,9865,9872,20361,20493,20497,21016,21047,21079,21094,21097,21138],"fullWord":9872},{"subwords":[325,932,950,8362,8678,9759,9873,9874,9939,16823,16954],"fullWord":9874},{"subwords":[337,6246,6690,8241,8264,9150,9762,9875],"fullWord":9875},{"subwords":[1510,1636,1767,1770,1809,1817,1823,5632,5778,9150,9879,10414,10416,10504,10536,10566],"fullWord":9879},{"subwords":[1851,1858,1894,2223,8678,8705,8713,8739,9880,12700,12701,12810,16765,16823,16954,17308],"fullWord":9880},{"subwords":[4639,4651,4714,4909,4917,4935,4957,9079,9082,9881,9882,9885,9897],"fullWord":9882},{"subwords":[9079,9094,9384,9396,9881,9883,9897,9935,15021,15411,15422],"fullWord":9883},{"subwords":[4046,4049,4302,9881,9884,9932,13691,14435],"fullWord":9884},{"subwords":[4714,4928,4935,4936,4957,4958,9885,9886],"fullWord":9886},{"subwords":[4714,4810,4928,4935,4936,4957,4958,4959,5023,5030,5031,5355,5364,9384,9385,9396,9397,9885,9887,15060,15074,15428,15433],"fullWord":9887},{"subwords":[4714,4928,4935,4936,4957,4958,9885,9888],"fullWord":9888},{"subwords":[4928,4931,4933,5037,5050,5221,9127,9885,9889,9890,9894,12745,12751,16954,16955,17323],"fullWord":9890},{"subwords":[326,369,605,4492,4509,4985,5014,9276,9885,9892,9913,9914,9932,12257,12453,13171,13190,13193,13239,13765,13780],"fullWord":9892},{"subwords":[4714,4774,4795,4935,4957,4985,4988,5004,5567,5575,5579,5865,9276,9277,9285,9836,9865,9885,9893,9913,9914,9919,21120,21140,21144],"fullWord":9893},{"subwords":[4714,4728,4739,4744,4935,4957,4967,5756,5778,5780,9117,9150,9152,9885,9898,9899,10378,10414,10416,10530,10536,10537,10566,10567],"fullWord":9899},{"subwords":[5778,5780,9150,9152,9153,9384,9396,9898,9900,10039,10414,10416,10536,10549,10566,10571,10677,15444,15473,15477],"fullWord":9900},{"subwords":[4714,4728,4739,4774,4935,4957,4985,4988,5756,5778,5865,9117,9150,9276,9277,9281,9836,9885,9902,9903,9913,9914,9916,9919,10378,10414,10416,10427,10530,10536,10537,10544,10566,10567,10569,10625,10628,10645,10646,12438,12439],"fullWord":9903},{"subwords":[4714,4728,4739,4935,4942,4957,5680,5756,5778,9117,9150,9885,9906,9907,9946,9947,9948,10378,10414,10416,10460,10530,10536,10537,10566,10567,10691,10694,18835,18844,18845,18861,18863,18864,18866,18867],"fullWord":9907},{"subwords":[5778,9150,9384,9396,9906,9908,9938,9946,9947,9949,10414,10416,10460,10536,10549,10566,10571,10677,10691,10694,10695,10705,15197,15312,15444,15473,15542,15748,18844,18847,18861,18863,18866,18868,18941,19244],"fullWord":9908},{"subwords":[5778,9150,9906,9909,9946,9947,10414,10416,10460,10536,10566,10691,10694,18844,18861,18863,18866],"fullWord":9909},{"subwords":[9142,9276,9360,9912,9913,11697,11721,11854,11891,11909,11911,11921,11931,12443,12522,12540,12825],"fullWord":9912},{"subwords":[4714,4774,4810,4935,4957,4959,4985,4988,4990,5023,5030,5355,5375,5865,5996,9276,9277,9278,9384,9385,9396,9397,9836,9855,9885,9913,9914,9915,9919,9936,12358,15060,15175,15227,15428,15433,15491,15498],"fullWord":9915},{"subwords":[4714,4728,4739,4774,4935,4957,4985,4988,5756,5778,5865,9117,9150,9276,9277,9281,9836,9885,9902,9903,9913,9914,9916,9919,10378,10414,10416,10427,10530,10536,10537,10544,10566,10567,10569,10625,10628,10645,10646,12438,12439],"fullWord":9916},{"subwords":[4985,5004,9124,9128,9150,9276,9285,9293,9885,9902,9913,9914,9917,10530,10624,10645,10650,10662,12438,21140,21144],"fullWord":9917},{"subwords":[341,369,528,9276,9768,9836,9913,9919,9920,11156,11157,11167,11213,11218,11437,11446,11489,11512,11645,11656,11697,11706,11721,12229,12244,12245,12443],"fullWord":9920},{"subwords":[4714,4720,4774,4935,4947,4957,4985,4988,4993,5743,5865,7493,7604,9276,9277,9826,9836,9885,9913,9914,9919,9922,9923],"fullWord":9923},{"subwords":[7604,9150,9276,9285,9293,9902,9913,9922,9924,10637,10645,10650,10662,11067,12438,21144],"fullWord":9924},{"subwords":[4714,4774,4935,4957,4985,4988,5865,9276,9277,9836,9885,9897,9913,9914,9919,9926,9927],"fullWord":9927},{"subwords":[9930,9931,9941,16903,16954,16985,17434],"fullWord":9931},{"subwords":[9384,9396,9846,9932,9933,13569,13577,13590,13705,13712,13732,13734,13813,13815,13817,14262,14278,15248,15508,15509],"fullWord":9933},{"subwords":[4714,4774,4810,4935,4957,4959,4985,4988,4990,5023,5030,5355,5375,5865,5996,9276,9277,9278,9384,9385,9396,9397,9836,9855,9885,9913,9914,9915,9919,9936,12358,15060,15175,15227,15428,15433,15491,15498],"fullWord":9936},{"subwords":[3272,3322,3323,8612,8614,8616,8678,8934,9396,9399,9409,9937,10041,15416,15422,15425,15534,16178,16644,16769,16772,16823,16889,16954,17722],"fullWord":9937},{"subwords":[5778,9150,9384,9396,9906,9908,9938,9946,9947,9949,10414,10416,10460,10536,10549,10566,10571,10677,10691,10694,10695,10705,15197,15312,15444,15473,15542,15748,18844,18847,18861,18863,18866,18868,18941,19244],"fullWord":9938},{"subwords":[325,932,950,8362,8678,9759,9873,9874,9939,16823,16954],"fullWord":9939},{"subwords":[5832,5833,5845,9422,9444,9446,9447,9940,9945,9946,9947,9951,9955,11574,11656,11657,11764,11780,11786,11789,11808,16375,16457,16907,16911,16954,16969,16986,17179,17180,17830,18595,18844,18850,18861,18862,18882,18886,18891,18947],"fullWord":9940},{"subwords":[4714,4826,4835,4836,4935,4939,4957,4961,5037,5050,5052,6039,9111,9127,9885,9894,9941,9942,16780,16782,16903,16954,16955,16958,16959,16962,16985],"fullWord":9942},{"subwords":[6039,9384,9389,9396,9399,9409,9941,9943,10041,10042,15526,15530,15534,15537,16889,16890,16895,16899,16903,16954,16960,16961,16962,16985,17722],"fullWord":9943},{"subwords":[6039,9941,9944,16903,16954,16962,16985],"fullWord":9944},{"subwords":[6018,9384,9389,9396,9399,9409,9447,9945,9946,9947,9949,9950,9951,9955,10041,15306,15312,15526,15534,15542,15543,15748,16457,16889,16890,16907,16911,16954,16960,16983,16986,17722,17881,17972,18844,18847,18849,18850,18861,18862,18941,18943,18947,19244,19245,19277],"fullWord":9950},{"subwords":[7604,7637,9276,9325,9913,9922,9946,9954,9985,12463,18894,18901],"fullWord":9954},{"subwords":[3272,3328,3331,3429,4238,4241,8612,8614,8616,8678,8685,8688,8691,8935,9440,9447,9945,9946,9952,9953,9955,9956,16178,16653,16743,16769,16772,16823,16907,16954,16986,17853,18725,18726,18742,18823,18824,18829,18830,18947],"fullWord":9956},{"subwords":[4714,4935,4942,4957,5680,9885,9946,9947,9948,9957,18835,18844,18845,18861,18950],"fullWord":9957},{"subwords":[9276,9325,9836,9844,9913,9919,9946,9947,9958,9985,12374,12463,18607,18630,18844,18861,18894,18898,18921,18950,18969],"fullWord":9958},{"subwords":[126,488,2813,2822,3052,3186,3229,8209,8280,8378,9960,10072,10082,10246,10257,18323,18326,18365,18375],"fullWord":9960},{"subwords":[1187,9961,10003,10009,10013,10177,10301,10741,10953,12675],"fullWord":9961},{"subwords":[4728,5471,5472,5485,5489,5756,5778,7477,7478,7722,7723,9826,9962,10378,10398,10416,10470,10981,10982,10987,19595],"fullWord":9962},{"subwords":[950,2869,2906,3033,9963,9964,15880,15884,15986,16007,16134,17207],"fullWord":9964},{"subwords":[950,1106,1114,5918,6091,9836,9843,9966,9967,12229,12305,12308,15939,15986,15995,16007,16076,16270,16944,17216,17234,19948,19950,19952,19957,19967],"fullWord":9967},{"subwords":[200,605,607,610,950,952,4492,4500,4501,4509,4605,4606,4774,4785,4826,4835,5865,5875,5918,9836,9843,9968,9969,12229,12243,15893,15939,15986,15988,15995,15996,16007,16270,16308,16381,16944,17216,17217,17234],"fullWord":9969},{"subwords":[5691,5693,5740,5742,5778,5779,5790,5918,9812,9815,9816,9820,9836,9843,9970,9972,9973,9974,10383,10386,10387,10392,10416,10417,10433,10434,10451,12339,16319,16326,16335,17047],"fullWord":9973},{"subwords":[5778,5779,5780,5781,5918,9836,9843,9975,9976,10416,10417,10433,16368],"fullWord":9976},{"subwords":[4714,4774,4935,4957,4985,4988,5865,6406,6453,6458,6537,6543,6548,6593,6598,6601,6602,6613,6614,9276,9277,9836,9885,9913,9914,9919,9979,9980],"fullWord":9980},{"subwords":[5996,6453,6467,6543,6593,6601,6604,6613,6621,6622,9250,9276,9278,9384,9396,9824,9836,9852,9855,9913,9919,9979,9981,15114,15175,15446,15498],"fullWord":9981},{"subwords":[5918,6453,6463,6543,6593,6601,6606,6613,6615,6619,9135,9276,9284,9307,9836,9843,9895,9913,9919,9921,9929,9979,9982,16858,16860,16876,16948,16954,16974],"fullWord":9982},{"subwords":[7604,7637,8660,8688,9276,9325,9913,9922,9946,9952,9983,9985,12429,12433,12463,12612,18731,18733,18735,18894,18901],"fullWord":9983},{"subwords":[5918,9276,9284,9307,9836,9843,9896,9913,9919,9921,9929,9987,12387,16858,16860,16876,16948,16954,16974,20008,20012,20129,20134,20152,20157,20161,20167,20197],"fullWord":9987},{"subwords":[2042,2127,2156,2300,9988,9989,12481,12483,21183],"fullWord":9989},{"subwords":[3777,3804,3807,3814,9991,9992,12490,12492,12560,17316,17319,17383],"fullWord":9992},{"subwords":[9993,9995,12574,18969,19036,19059,19131,19186,19389,21183],"fullWord":9995},{"subwords":[9993,9994,9996,9997,12560,12574,12591,12597,12659,12663,12888,13055,13059,13082,17278,17281,17383,17435,18005,18007,18117,18126,19036,19057,19434,19452,19489,19780],"fullWord":9997},{"subwords":[5909,5953,9836,9841,9855,9978,9998,9999,10044,12390,12548,12606,12876,12979,13110,13119,13121,15238,15368,15610,15734,20579,20875,20879,20880,20881,20897,20933,20934,20944,20984],"fullWord":9999},{"subwords":[9998,10000,10001,10002,12528,12560,12606,12610,13119,13124,17284,17383,17464,17469,20879,20882,20897],"fullWord":10001},{"subwords":[10004,10005,11021,11023,11035,11038,15821,15832,15848,17140,17141,18094,18117,18126,19866,19867],"fullWord":10005},{"subwords":[10004,10006,11021,11024,11035,15821,19866,21218],"fullWord":10006},{"subwords":[382,487,950,10007,10008,10013,10014,10181,12675,12677,13017,15942,16988,17294,17354],"fullWord":10008},{"subwords":[1981,2058,2102,2113,2160,2168,4587,10010,10748,10756,10833,10838,12712,12837],"fullWord":10010},{"subwords":[3697,3864,3867,10016,10017,12916,12917,13472,14016,14044],"fullWord":10016},{"subwords":[6033,10017,10018,12916,12925,12936,13607,14044,14048,14166,17406,17620],"fullWord":10018},{"subwords":[6033,9614,9615,9633,9636,9647,10019,10020,12916,12925,12936,13607,14044,14048,14166,17406,17620],"fullWord":10020},{"subwords":[215,370,817,867,5588,5595,5953,5976,9785,9836,9841,9855,10009,10021,10022,10023,10043,10044,12229,12277,12319,12548,12675,12676,12680,12835,12876,12979,14798,14821,14840,15238,15568,15610],"fullWord":10023},{"subwords":[370,867,1070,10009,10021,10024,10043,12277,12548,12675,12680,12835,13051,14821,14840,15568,15821,19866],"fullWord":10024},{"subwords":[10025,12548,13051,15821,19866,21183,21191,21193,21196,21197,21218,21220],"fullWord":10025},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8743,8857,8874,8875,8881,8934,10026,12810,12979,12982,13007,15386,15610,15611,15676,16574,16676,16678,16697,17419],"fullWord":10026},{"subwords":[10027,10028,19060,19061,19166,19548,20879,20903,20964],"fullWord":10028},{"subwords":[377,382,792,867,868,905,950,10029,10030,10214,10217,15942],"fullWord":10030},{"subwords":[254,828,867,868,905,911,918,950,6308,6332,6334,6339,6344,6354,7042,7044,9789,9791,9792,10031,10032,14754,14757,14898,14912,16041,17773,17779,18449,18472,18484,19381],"fullWord":10032},{"subwords":[349,359,867,868,905,911,918,950,997,9376,9396,9399,9409,9447,9789,9791,9792,9945,9946,9955,10033,10034,10041,14898,14912,15534,16028,16041,16889,16907,16908,16954,16983,16986,17722,17744,17773,17779,17881,17967,18347,18449,18472,18474,18484,18947,19381],"fullWord":10034},{"subwords":[817,867,5588,5595,5976,9785,9836,9855,10035,12229,12277,12319,14798,14821,14840],"fullWord":10035},{"subwords":[867,868,905,911,918,950,1070,1071,9789,9791,9792,10036,10037,14898,14912,15848,15852,15858,15861,16041,17773,17779,18172,18449,18472,18484,18508,19381,19473,19475,19489,19868,19871],"fullWord":10037},{"subwords":[9150,9151,9152,9155,9396,9399,9409,9898,9901,10039,10040,10041,15477,15479,15534,16829,16834,16889,16954,16967,16981,17722],"fullWord":10040},{"subwords":[6039,9384,9389,9396,9399,9409,9941,9943,10041,10042,15526,15530,15534,15537,16889,16890,16895,16899,16903,16954,16960,16961,16962,16985,17722],"fullWord":10042},{"subwords":[5953,9836,9841,9855,10044,10045,12353,12528,12533,12548,12876,12979,15238,15610],"fullWord":10045},{"subwords":[5953,6008,9836,9841,9855,10044,10046,12548,12876,12979,15238,15610],"fullWord":10046},{"subwords":[3391,4268,4278,5856,8474,8540,8941,8945,8989,8993,9836,10047,12335,12640,19595],"fullWord":10047},{"subwords":[950,1070,1071,10048,10049,15942,16991,18094,19871],"fullWord":10049},{"subwords":[9422,9423,9941,10050,11774,12082,12166,12170,12173,16903,16954,16969,16973,16985,18083,18103,18116],"fullWord":10050},{"subwords":[1070,9946,10052,18347,18508,18521,20353,20842],"fullWord":10052},{"subwords":[6057,6058,8474,9860,10053,18570,18697,20095,20096],"fullWord":10053},{"subwords":[0,317,3096,3232,8209,8409,8412,10054,20299,20599,20600],"fullWord":10054},{"subwords":[9384,9389,9396,9399,9409,9865,9870,10041,10058,10059,15526,15534,15538,15866,15867,16889,16890,16954,16960,16963,16992,17722,21130,21212],"fullWord":10059},{"subwords":[263,269,292,377,399,411,412,817,818,819,829,833,5588,5592,5976,5988,7293,7294,7298,7375,7461,7477,7661,7898,10060,10109,10110,10208,10324,10355,10398,14758,14759,14762,14968,15141,15143],"fullWord":10060},{"subwords":[43,45,67,385,392,399,407,442,461,1301,1306,1315,1322,1422,1425,1636,1648,1655,1918,5780,5781,10061,10062,10063,10071,10323,10324,10343,10360,15872,15942,15948,16270,16274,16368,16999],"fullWord":10063},{"subwords":[337,372,385,386,442,1210,1213,1272,1307,1315,1827,9152,10061,10064,10065,10504],"fullWord":10065},{"subwords":[43,337,385,399,442,1272,1301,1307,1315,1636,1648,1652,1817,1827,5780,9144,9152,10061,10062,10066,10324,10343,10414,10497,10504,10507,10536],"fullWord":10066},{"subwords":[337,341,385,393,497,586,1272,1307,1324,2567,9064,9077,10061,10067,10136,10139,10504,10584,10585,10587,11148,11173,11182,11387,11615,11659],"fullWord":10067},{"subwords":[51,67,385,392,487,905,1366,1419,1422,2029,2030,2033,2034,2100,2101,2308,2343,2446,2476,10061,10068,10069,10071,10181,10323,10748,10749,10758,12680,12683,12948,12950,12959,12964,13007,15576,15590,15673,15942,16999,17096,17303,17308,17354,17356],"fullWord":10069},{"subwords":[51,385,1366,2021,2029,2030,2100,2308,2446,2610,2630,10061,10068,10070,10748,10749,10922,12680,12948,12959,13051,15576,15749,19837,19840],"fullWord":10070},{"subwords":[93,96,121,123,399,400,407,796,810,817,825,905,906,2813,2941,2954,2960,2971,3001,3021,3493,3494,5588,5592,5593,5599,5976,5977,6023,10072,10073,10075,10076,10077,10207,10228,10324,10355,10360,14717,14722,14805,14881,14968,14973,15021,15048,15880,15942,15948,16121,16123,16142,16145,16182,16270,16274,16286,16298,16419,16420],"fullWord":10076},{"subwords":[93,121,337,349,399,422,796,817,857,2813,2941,2954,2971,3120,3156,3402,3452,3493,5588,5592,5647,5976,5993,9079,9376,9384,10072,10073,10075,10079,10121,10324,10355,10414,10502,10518,10536,10549,10675,10677,14717,14780,14968,15021,15188,15399,15411,15444,15473],"fullWord":10079},{"subwords":[337,442,464,2813,2826,2831,3100,3402,3487,9101,9152,9157,10072,10080,10089,10304,10576,10583],"fullWord":10080},{"subwords":[110,287,337,416,426,2813,2869,3402,3459,3460,3524,7283,7293,7585,7604,9207,9208,10072,10081,10109,10120,10619,10637,12230,12238,12438],"fullWord":10081},{"subwords":[93,94,399,2766,2807,2808,2813,2822,2823,3447,4431,4466,4601,4639,4641,4651,4728,5756,5778,9760,10072,10073,10074,10082,10083,10090,10093,10128,10129,10324,10327,10338,10378,10416],"fullWord":10083},{"subwords":[93,121,399,796,817,867,2807,2813,2822,2824,2941,2954,2971,3470,3471,3493,3505,4107,5588,5592,5778,5976,9760,10072,10073,10075,10082,10084,10128,10130,10214,10324,10338,10355,10416,14717,14729,14798,14968,15021],"fullWord":10084},{"subwords":[93,399,1196,2807,2812,2813,2822,3100,3487,5778,9760,9865,10072,10073,10078,10082,10085,10089,10128,10135,10304,10324,10338,10342,10416,10495,11065,21041,21047,21050,21097],"fullWord":10085},{"subwords":[90,126,337,434,488,2764,2813,2814,3052,3402,3429,9437,10072,10087,10126,10691,18347,18349,18365,18823,18863],"fullWord":10087},{"subwords":[111,375,596,598,2813,2869,2872,3071,3459,10072,10088,11001,19600],"fullWord":10088},{"subwords":[148,151,155,396,399,817,4438,4466,4516,4517,4590,4601,4607,4728,4810,5340,5588,5592,5659,5756,5976,10090,10091,10093,10094,10097,10202,10203,10324,10327,10355,10378,14736,14739,14961,14962,14968,15060],"fullWord":10091},{"subwords":[148,155,326,327,328,337,338,399,4438,4466,4590,4601,4714,4728,4739,4891,4892,4928,4935,4936,5659,5756,9103,9104,9117,9118,10090,10092,10093,10094,10119,10324,10327,10378,10414,10530,10536,10537],"fullWord":10092},{"subwords":[200,399,407,605,607,610,4466,4467,4492,4500,4501,4601,4603,4605,4606,4728,4774,4785,4826,5745,5746,5747,5748,5756,5760,5865,5875,5918,10090,10093,10095,10096,10099,10107,10169,10173,10174,10175,10227,10324,10327,10331,10344,10348,10360,10378,10427,10429,10433,12229,15893,15942,15948,15986,15988,15995,15996,16270,16274,16308,16381,17044],"fullWord":10096},{"subwords":[200,396,397,399,407,817,825,905,906,4466,4467,4516,4520,4601,4603,4607,4611,4728,4810,4826,5588,5592,5593,5599,5756,5760,5976,5977,10090,10093,10097,10098,10099,10107,10202,10205,10207,10227,10228,10324,10327,10331,10355,10360,10378,14736,14751,14805,14881,14882,14961,14965,14968,14973,15060,15087,15893,15942,15948,16270,16274,16286,16419,16420,17044],"fullWord":10098},{"subwords":[200,326,327,331,336,337,338,340,362,363,399,407,948,4461,4466,4467,4601,4603,4714,4728,4739,4742,4826,4891,4895,4901,4935,4939,5037,5756,5760,9103,9104,9105,9106,9111,9117,9121,9127,9416,9417,10090,10093,10099,10100,10107,10119,10227,10324,10327,10331,10360,10378,10414,10415,10530,10535,10536,10537,10551,15893,15928,15931,15932,15942,15948,16270,16274,16780,16784,17044,17068,17069],"fullWord":10100},{"subwords":[287,326,337,415,416,426,605,4492,4502,4890,4891,4947,4985,4993,7253,7283,7293,7585,7586,7604,7649,7658,10090,10101,10109,10119,10120,10169,10530,10622,10637,12230,12238,12438],"fullWord":10101},{"subwords":[148,155,399,442,4438,4466,4590,4601,4728,4744,5659,5756,5780,10090,10093,10094,10102,10103,10324,10327,10343,10378],"fullWord":10103},{"subwords":[396,399,442,449,817,4466,4516,4601,4607,4728,4744,4810,5588,5592,5756,5780,5976,10090,10093,10097,10102,10104,10202,10324,10327,10343,10355,10378,14736,14961,14968,15060],"fullWord":10104},{"subwords":[200,399,407,442,461,4466,4467,4470,4601,4603,4728,4744,4745,4826,5756,5760,5780,5781,10090,10093,10099,10102,10105,10107,10227,10324,10327,10331,10343,10360,10378,15893,15942,15948,16270,16274,16368,17044],"fullWord":10105},{"subwords":[183,195,605,886,4492,4532,5172,5173,10090,10106,10169,10202,10730,10741,10876,10878,10886,12274,12493,12494,12548,12680,12837,12948,14736,14749,14821,14826,15561,15568,15600,15639],"fullWord":10106},{"subwords":[269,279,280,399,407,817,825,833,835,905,906,5588,5592,5593,5599,5976,5977,5988,5992,7260,7293,7298,7300,7316,7375,7391,7396,7461,7463,7477,7486,7661,7663,7939,10109,10110,10111,10115,10207,10208,10210,10228,10324,10355,10360,10398,10412,14758,14762,14764,14773,14805,14881,14968,14973,15141,15143,15910,15912,15914,15942,15948,16026,16270,16274,16286,16419,16420,17003],"fullWord":10111},{"subwords":[269,270,399,4466,4601,4728,5707,5709,5756,7253,7267,7269,7270,7293,7298,7477,7478,7649,7650,10090,10093,10109,10112,10324,10327,10378,10398],"fullWord":10112},{"subwords":[269,399,817,833,5588,5592,5709,5976,5988,7267,7269,7271,7293,7298,7375,7385,7461,7477,7661,10109,10110,10113,10208,10324,10355,10398,14758,14762,14766,14968,15141,15143],"fullWord":10113},{"subwords":[299,478,629,7293,7361,7764,7826,7841,10109,10114,10741,10793,10794,10809,10826,10833,10845,12230,12509,12521],"fullWord":10114},{"subwords":[375,411,596,598,7293,7294,7759,8151,10109,10116,10981,11001,11012,12230,19600],"fullWord":10116},{"subwords":[399,472,817,5588,5592,5976,8258,8260,8276,8319,8333,8445,8453,8552,8575,8696,8725,8728,8754,8756,8857,8858,8861,10117,10324,10355,10443,10882,12680,12845,12948,12979,14775,14968,15376,15386,15610,15621],"fullWord":10117},{"subwords":[337,372,442,2813,2826,2827,2831,3402,9152,10072,10118,10576],"fullWord":10118},{"subwords":[200,326,336,337,340,349,359,854,860,905,4461,4891,4895,4901,5037,9127,9376,9409,10090,10107,10119,10121,10122,10123,10125,10202,10205,10502,10503,10530,10531,10535,10675,10676,14736,14751,14776,14779,14780,14783,15399,15400,15428,15443,15893,15928,15931,15942,16028,16889,17068,17722],"fullWord":10123},{"subwords":[326,327,329,337,338,349,351,396,399,817,854,857,4466,4516,4599,4601,4607,4714,4728,4739,4810,4811,4891,4893,4935,5023,5588,5592,5756,5976,9103,9104,9117,9119,9376,9384,9385,10090,10093,10097,10119,10121,10122,10124,10202,10324,10327,10355,10378,10414,10502,10530,10531,10536,10537,10549,10675,10677,14736,14776,14780,14781,14961,14968,15060,15399,15428,15433,15444,15473,15474],"fullWord":10124},{"subwords":[399,407,817,825,867,868,905,906,950,953,5588,5592,5593,5599,5778,5779,5976,5977,9760,9761,10128,10130,10131,10132,10207,10214,10217,10228,10324,10338,10341,10355,10360,10416,10417,14798,14802,14805,14881,14968,14973,15939,15942,15948,16270,16274,16286,16419,16420,17007,17009],"fullWord":10131},{"subwords":[337,349,399,429,817,857,867,5588,5592,5778,5976,9150,9376,9384,9396,9760,10121,10128,10130,10133,10214,10324,10338,10355,10414,10416,10502,10536,10549,10566,10571,10675,10677,14780,14798,14968,15399,15444,15473],"fullWord":10133},{"subwords":[287,337,369,416,426,7283,7293,7585,7604,9150,9276,9902,9913,9922,10109,10120,10134,10177,10637,10645,12230,12238,12438],"fullWord":10134},{"subwords":[144,385,386,466,504,1210,1213,1243,1296,1324,4427,4472,4587,10061,10090,10136,10137,10139,10140,11107,11173,11174],"fullWord":10140},{"subwords":[30,43,385,399,516,517,1243,1246,1296,1301,1302,1324,1515,1526,1560,1570,1636,1640,1665,1900,1907,1908,1938,4427,4466,4472,4475,4587,4601,4618,4728,5658,5756,5782,10061,10090,10093,10136,10139,10141,10145,10146,10324,10327,10378,11107,11115,11173,11180,11437,11438,11442,11464,11491,11492],"fullWord":10141},{"subwords":[43,44,385,399,513,516,518,817,869,1301,1304,1324,1366,1377,1526,1535,1636,1665,1700,1907,1909,1915,1933,2308,2317,2380,5588,5592,5782,5803,5976,10061,10136,10139,10142,10145,10150,10324,10355,11173,11180,11276,11279,11286,11303,11437,11442,11491,11539,14808,14809,14968,14971,14975,14995,15202],"fullWord":10142},{"subwords":[43,337,341,385,399,516,1272,1301,1307,1324,1526,1636,1665,1817,1907,5782,9064,9077,10061,10136,10139,10143,10145,10324,10414,10504,10536,10584,10585,10587,10595,11148,11173,11180,11182,11437,11442,11491,11659,11668],"fullWord":10143},{"subwords":[200,399,407,470,4466,4467,4472,4475,4476,4489,4490,4601,4603,4728,4826,5658,5756,5760,5782,5784,5845,10090,10093,10099,10107,10136,10145,10146,10147,10151,10161,10227,10324,10327,10331,10360,10378,11107,11115,11123,11173,11180,11181,11330,11437,11438,11440,11442,11444,11453,11464,11465,11492,11495,11560,15893,15942,15948,15949,15973,15978,16270,16274,16278,17012,17044],"fullWord":10147},{"subwords":[399,442,450,464,594,1196,5780,5782,5785,10136,10145,10148,10304,10324,10343,10495,11065,11173,11180,11186,11408,11437,11442,11445,21050,21051,21097,21110],"fullWord":10148},{"subwords":[399,488,528,532,693,694,1009,5620,5745,5782,6055,6074,10136,10145,10149,10174,10247,10251,10324,10344,10349,10418,10437,10460,11173,11180,11192,11213,11218,11252,11257,11361,11362,11437,11442,11446,11451,11456,11502,11512,11530,11574,11575,11576,12229,12244,12245,12292,12325,12374,18370,18389,18393,18408,18541,18547,18549,18595,18607],"fullWord":10149},{"subwords":[399,407,470,488,1009,5616,5620,5626,5782,5784,5845,6055,10136,10145,10151,10152,10161,10241,10247,10324,10360,10366,10459,10460,10465,11173,11180,11181,11192,11195,11330,11356,11361,11362,11366,11376,11437,11442,11444,11453,11456,11457,11502,11506,11560,11574,11575,11576,11577,15942,15948,15949,15960,15973,15978,15980,16041,16043,16270,16274,16278,16293,16457,16459,17012,17022,17023,17168,17750,17811,17813,17830,18341,18370,18374,18389,18393,18398,18407,18541,18547,18548,18549,18552,18559,18595,18660],"fullWord":10152},{"subwords":[337,340,341,347,372,382,419,466,470,504,536,555,945,9414,9422,10136,10137,10138,10153,10154,10161,10584,10585,10586,11148,11151,11173,11174,11182,11330,11659,11685,15931,15942,15946,15973,16764,17012,17076],"fullWord":10154},{"subwords":[337,341,372,375,466,504,507,596,598,640,641,10120,10136,10137,10153,10155,10162,10499,10584,10585,10605,11148,11156,11173,11174,11182,11213,11231,11236,11659,11662,11697,12238,12244,12438,12443],"fullWord":10155},{"subwords":[287,337,341,416,426,7283,7293,7317,7334,7585,7604,7688,10109,10120,10136,10156,10584,10585,10605,10637,10638,11127,11132,11148,11156,11173,11182,11184,11213,11649,11659,11662,11697,11711,12230,12238,12244,12438,12443],"fullWord":10156},{"subwords":[399,4466,4472,4475,4601,4728,5658,5756,5782,10090,10093,10136,10145,10146,10157,10324,10327,10378,10420,11107,11115,11173,11180,11437,11438,11442,11464,11492],"fullWord":10157},{"subwords":[399,481,574,576,732,733,4466,4472,4475,4484,4601,4728,5658,5756,5782,5956,10090,10093,10136,10145,10146,10158,10159,10182,10324,10327,10350,10378,10957,11107,11115,11173,11180,11270,11271,11437,11438,11442,11464,11492,13171,13204,13207,13208,13224,13225,13439,13450,13478,13479,13940,13941,13950],"fullWord":10159},{"subwords":[337,340,372,375,376,382,419,596,598,639,647,691,945,946,9307,10120,10162,10163,10499,10500,10654,12238,12241,12283,12284,12438,12442,15931,15942,15986,16858,17006,17214],"fullWord":10163},{"subwords":[93,94,114,115,399,605,2766,2813,2869,2881,2883,2884,3447,3459,3491,4431,4466,4492,4494,4500,4601,4605,4639,4641,4728,4774,5745,5746,5756,5856,5861,5865,10072,10073,10074,10090,10093,10095,10164,10165,10169,10174,10324,10327,10344,10378,10427,12229],"fullWord":10165},{"subwords":[93,114,121,399,796,817,2813,2869,2883,2885,2941,2954,2971,2977,3459,3491,3493,4069,5588,5592,5595,5745,5856,5861,5976,10072,10073,10075,10164,10166,10174,10324,10344,10355,10356,12224,12229,12270,12319,14717,14821,14968,15021,15225],"fullWord":10166},{"subwords":[93,96,114,116,399,400,407,2813,2869,2883,2887,2906,3021,3459,3464,3491,3492,5745,5748,5856,5861,5918,6023,10072,10073,10077,10164,10167,10174,10175,10324,10344,10348,10360,10433,12229,15880,15942,15948,15986,15995,16121,16134,16270,16274,16298],"fullWord":10167},{"subwords":[93,114,126,399,488,693,694,1009,2813,2869,2883,2908,2912,3052,3135,3145,3459,3491,3495,5620,5648,5745,5849,5856,5861,6055,6057,6074,10072,10073,10164,10168,10174,10247,10251,10324,10344,10349,10376,10437,10460,12229,12292,12325,12374,18365,18370,18408,18541,18547,18607],"fullWord":10168},{"subwords":[375,596,598,605,1053,1072,4492,4493,5442,5507,10090,10169,10170,10270,11001,19600],"fullWord":10170},{"subwords":[148,155,399,605,4438,4466,4492,4499,4500,4590,4601,4605,4728,4774,5659,5745,5746,5756,5865,10090,10093,10094,10095,10169,10171,10174,10324,10327,10344,10378,10427,12229],"fullWord":10171},{"subwords":[396,399,605,608,817,4466,4492,4500,4516,4532,4534,4601,4605,4607,4728,4774,4810,5588,5592,5595,5745,5746,5756,5865,5976,10090,10093,10095,10097,10169,10172,10174,10202,10324,10327,10344,10355,10356,10378,10427,12229,12274,12319,12358,14736,14821,14826,14961,14968,15060,15225,15227],"fullWord":10172},{"subwords":[7293,7375,7740,7759,8099,8151,10109,10176,10981,11001,11003,11012,12230,14758,14821,14832,15790,15821,15824,19600,19602,19837,19866],"fullWord":10176},{"subwords":[399,653,817,867,5588,5592,5595,5745,5778,5976,9760,9785,9836,9855,10128,10130,10174,10177,10178,10214,10324,10338,10344,10355,10356,10416,12229,12277,12319,14798,14821,14840,14843,14968,15225],"fullWord":10178},{"subwords":[440,442,464,716,10135,10177,10179,10180,10304,12311,21047,21059],"fullWord":10179},{"subwords":[183,299,481,4451,5123,7253,7293,7312,7361,7365,7649,7708,7761,7764,7782,7801,10090,10109,10182,10183,10730,10793,10864,12837,12913,13171,13204,13967,14020,14056],"fullWord":10183},{"subwords":[399,407,442,461,481,486,732,739,779,961,5780,5781,5956,6033,10182,10184,10185,10194,10195,10324,10343,10350,10353,10360,13204,13207,13211,13217,13222,13232,13336,13439,13450,13452,13461,13940,13943,15942,15948,16014,16270,16274,16368,16403,17019,17476,17488,17535],"fullWord":10185},{"subwords":[442,481,1060,6276,6707,6821,7164,10182,10186,13204,13217,13391,14460],"fullWord":10186},{"subwords":[399,481,732,733,762,770,4466,4515,4601,4728,5756,5956,10090,10093,10182,10189,10190,10324,10327,10350,10378,13171,13204,13207,13208,13268,13439,13450,13478,13479,13569,13940,13941,13950,14237],"fullWord":10190},{"subwords":[399,481,732,735,762,770,817,5588,5592,5956,5976,10182,10189,10191,10324,10350,10355,13204,13207,13210,13268,13276,13286,13294,13439,13450,13455,13456,13569,13577,13940,14262,14278,14851,14852,14864,14968,14979,15248],"fullWord":10191},{"subwords":[399,481,488,732,762,770,781,1009,5620,5956,6055,10182,10189,10192,10247,10324,10350,10354,10460,13204,13207,13268,13364,13367,13439,13450,13464,13532,13569,13613,13614,13922,13923,13940,13945,18370,18436,18437,18541,18547],"fullWord":10192},{"subwords":[200,399,407,481,486,732,733,739,779,961,4466,4467,4601,4603,4728,4826,5756,5760,5956,6033,10090,10093,10099,10107,10182,10194,10195,10196,10227,10324,10327,10331,10350,10353,10360,10378,13171,13177,13204,13207,13208,13211,13232,13336,13439,13450,13452,13461,13478,13479,13480,13488,13940,13941,13942,13943,13950,15893,15942,15948,16014,16270,16274,16403,17019,17044,17476,17481,17488,17530],"fullWord":10196},{"subwords":[399,407,481,486,732,735,737,739,775,779,817,825,905,906,961,966,5588,5592,5593,5599,5956,5976,5977,6033,10182,10194,10195,10197,10207,10228,10324,10350,10353,10355,10360,13204,13207,13210,13211,13232,13286,13294,13299,13321,13322,13336,13439,13450,13452,13455,13456,13457,13459,13461,13577,13940,13943,14262,14281,14403,14805,14851,14852,14856,14866,14881,14891,14968,14973,14979,14982,15248,15272,15305,15942,15948,16014,16270,16274,16286,16403,16419,16420,17019,17476,17488,17494,17495,17523],"fullWord":10197},{"subwords":[399,407,481,486,732,739,779,780,961,972,973,5956,6033,6039,10182,10194,10195,10198,10230,10236,10324,10350,10353,10360,10453,13204,13207,13211,13232,13336,13344,13345,13348,13439,13450,13452,13461,13940,13943,15942,15948,15950,16014,16020,16270,16274,16277,16291,16403,16404,17019,17020,17476,17488,17507],"fullWord":10198},{"subwords":[481,486,961,972,973,10182,10194,10199,10236,13204,13232,13336,13344,13391,14003,14551,14558,15942,16014,16020,16065,17019,17020,17476,17507,18135,18147,19825,19871],"fullWord":10199},{"subwords":[481,488,495,762,781,1028,10182,10189,10200,10864,10897,12686,12913,12933,12937,13204,13268,13364,13922,13928,13971,13973,14056,14130,14188,18432,18436,19075],"fullWord":10200},{"subwords":[148,151,155,396,399,817,4438,4466,4516,4517,4590,4601,4607,4728,4810,5340,5588,5592,5659,5756,5976,10090,10091,10093,10094,10097,10202,10203,10324,10327,10355,10378,14736,14739,14961,14962,14968,15060],"fullWord":10203},{"subwords":[396,399,817,4466,4516,4518,4601,4607,4728,4810,5346,5588,5592,5756,5976,6008,10090,10093,10097,10202,10204,10324,10327,10355,10378,14736,14872,14961,14968,14983,15060],"fullWord":10204},{"subwords":[269,399,817,833,5588,5592,5976,5988,6008,7293,7298,7375,7461,7477,7661,10109,10110,10208,10209,10324,10355,10398,14758,14762,14872,14968,14983,15141,15143],"fullWord":10209},{"subwords":[269,279,280,399,407,817,825,833,835,905,906,5588,5592,5593,5599,5976,5977,5988,5992,7260,7293,7298,7300,7316,7375,7391,7396,7461,7463,7477,7486,7661,7663,7939,10109,10110,10111,10115,10207,10208,10210,10228,10324,10355,10360,10398,10412,14758,14762,14764,14773,14805,14881,14968,14973,15141,15143,15910,15912,15914,15942,15948,16026,16270,16274,16286,16419,16420,17003],"fullWord":10210},{"subwords":[299,487,836,905,7293,7316,7361,7364,7375,7391,7396,7764,7767,7854,7939,10109,10115,10181,10211,10212,10793,10811,12680,12683,12948,12950,13007,14758,14773,15673,15910,15921,15942,17003,17099,17303,17354,17356],"fullWord":10212},{"subwords":[337,349,372,377,434,488,489,852,911,1030,1031,9376,9437,10121,10126,10213,10502,10675,10691,14780,14898,14899,15399,18347,18349,18449,18815,18863,19210,19262],"fullWord":10213},{"subwords":[396,399,817,867,4466,4516,4522,4528,4601,4607,4728,4810,5316,5355,5588,5592,5756,5778,5976,9760,10090,10093,10097,10128,10129,10130,10202,10214,10215,10324,10327,10338,10355,10378,10416,14736,14798,14799,14961,14968,15060],"fullWord":10215},{"subwords":[399,817,867,5588,5592,5778,5976,6008,9760,10128,10130,10214,10216,10324,10338,10355,10416,14798,14800,14872,14968,14983],"fullWord":10216},{"subwords":[481,10182,10219,13204,13286,13391,14536,14541,14851,15839,19837],"fullWord":10219},{"subwords":[470,497,501,586,869,883,905,920,921,10136,10161,10221,11173,11276,11303,11314,11330,11387,11390,12141,12142,14808,14820,15806,15820,15942,15973,17012,17135,17141,18103,19837,19868,19871],"fullWord":10221},{"subwords":[377,399,817,818,819,1106,1109,5588,5592,5976,10222,10223,10281,10285,10287,10324,10355,10471,10472,14921,14923,14968,15337,19923,19924,19986,20014,20015],"fullWord":10223},{"subwords":[377,382,905,10222,10224,10281,10284,15942,17029,19923],"fullWord":10224},{"subwords":[716,10225,10301,10304,11071,12282,12311,14821,14939,15864,21031,21075],"fullWord":10225},{"subwords":[377,382,796,810,905,2813,2941,2971,3001,3017,4050,4051,10072,10226,14880,15880,15888,15889,15942,16118,16142],"fullWord":10226},{"subwords":[399,407,817,825,905,906,907,973,5588,5592,5593,5599,5976,5977,6039,10207,10228,10229,10230,10236,10324,10355,10360,10453,14805,14881,14885,14896,14968,14973,15942,15948,15950,16270,16274,16277,16286,16290,16291,16419,16420],"fullWord":10229},{"subwords":[200,325,399,407,932,934,4466,4467,4543,4601,4603,4614,4728,4826,5756,5760,8217,8219,8258,8259,8262,8362,8440,8443,8445,8448,8509,10090,10093,10099,10107,10227,10231,10232,10324,10327,10331,10360,10365,10378,15893,15942,15948,16270,16274,16503,16504,16524,16525,16574,16581,17044],"fullWord":10232},{"subwords":[325,399,407,817,825,905,906,932,5588,5592,5593,5599,5976,5977,8258,8260,8261,8262,8333,8338,8362,8445,8448,8453,8456,8552,8584,8934,10207,10228,10231,10233,10324,10355,10360,10365,14775,14805,14881,14886,14968,14973,15376,15377,15942,15948,16270,16274,16286,16419,16420,16524,16549,16574,16577],"fullWord":10233},{"subwords":[325,399,407,932,936,973,6039,8258,8262,8362,8370,8445,8448,10230,10231,10234,10236,10324,10360,10365,10453,15942,15948,15950,16033,16270,16274,16277,16291,16524,16526,16574,16609,17021],"fullWord":10234},{"subwords":[287,337,340,416,417,426,427,639,647,691,7283,7287,7293,7316,7396,7585,7604,7611,7660,9307,10109,10115,10120,10235,10637,10639,10642,10654,12230,12233,12238,12241,12438,12442,15910,15931,15942,15986,16001,16815,16816,16858,16866,17003,17006,17014,17083,17211,17214],"fullWord":10235},{"subwords":[399,407,973,980,6039,10230,10236,10237,10324,10360,10453,15942,15948,15950,16037,16270,16274,16277,16291],"fullWord":10237},{"subwords":[337,340,362,364,399,407,973,6039,9416,9418,10230,10236,10238,10324,10360,10414,10415,10453,10536,10551,15931,15935,15942,15948,15950,16270,16274,16277,16291,16903,16904],"fullWord":10238},{"subwords":[487,973,10181,10236,10239,10240,10893,15942,16037,17354,17434],"fullWord":10240},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":10242},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":10243},{"subwords":[442,461,464,488,10241,10244,10304,10313,15942,15954,15960,15964,16041,16103,17022,17028,17039,17149,17758,17802,18018,18381,18384],"fullWord":10244},{"subwords":[399,401,488,612,693,694,1009,5620,5621,5691,5745,5750,5853,6055,6074,10174,10247,10249,10251,10324,10344,10349,10383,10437,10460,12229,12292,12325,12339,12374,18370,18408,18541,18547,18576,18583,18607],"fullWord":10249},{"subwords":[399,442,450,464,488,1009,1196,5620,5780,6055,10247,10250,10304,10324,10343,10460,10495,11065,18370,18381,18384,18541,18547,18591,18594,21050,21097,21110,21135],"fullWord":10250},{"subwords":[399,407,488,693,694,697,711,1009,5616,5620,5626,5745,5748,5918,6055,6074,6075,10174,10175,10241,10247,10251,10252,10324,10344,10348,10349,10360,10366,10433,10437,10459,10460,10465,12229,12289,12292,12325,12330,12368,12374,12376,15942,15948,15960,15986,15995,16041,16043,16270,16274,16293,16399,16457,16459,17017,17022,17023,17750,17811,18341,18370,18374,18408,18428,18541,18547,18548,18559,18607,18624,18660],"fullWord":10252},{"subwords":[399,488,693,694,1009,1044,5620,5745,6055,6074,10174,10247,10251,10253,10267,10324,10344,10349,10437,10460,12229,12292,12325,12374,18370,18371,18408,18495,18498,18541,18547,18565,18607,18630,18969],"fullWord":10253},{"subwords":[399,407,488,1009,5616,5620,5626,6055,10241,10247,10255,10324,10360,10366,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,17022,17023,17750,17788,17790,17811,17846,18341,18370,18374,18490,18495,18498,18503,18541,18547,18548,18559,18565,18567,18660,18662],"fullWord":10255},{"subwords":[399,488,1009,4466,4468,4551,4601,4604,4615,4728,4747,5620,5756,6055,8217,8258,8259,8280,8281,8378,8381,8382,8440,8445,8461,8509,10090,10093,10247,10248,10257,10258,10259,10324,10327,10378,10460,18339,18370,18541,18547,18697],"fullWord":10259},{"subwords":[399,405,488,491,817,911,1009,5588,5592,5600,5620,5976,5982,6055,8258,8260,8280,8282,8333,8360,8378,8381,8383,8445,8453,8458,8461,8552,10247,10254,10257,10258,10260,10324,10355,10460,14775,14898,14901,14968,15312,15376,15748,18370,18372,18449,18453,18541,18547,18554,18697],"fullWord":10260},{"subwords":[325,399,407,488,932,1009,5616,5620,5626,6055,8228,8258,8262,8263,8280,8283,8362,8371,8373,8378,8381,8385,8391,8445,8448,8461,8467,8586,8935,10231,10241,10247,10257,10258,10261,10262,10324,10360,10365,10366,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16524,16529,16559,16574,17022,17023,17750,17811,18341,18370,18374,18541,18547,18548,18559,18660,18697],"fullWord":10261},{"subwords":[337,434,488,495,693,700,9325,9334,9335,9360,9367,9437,10120,10126,10263,10264,10652,10656,10663,10691,10741,10814,10897,12238,12292,12293,12438,12463,12574,12575,12576,12686,12812,18347,18349,18386,18408,18432,18863,18894,19002,19036,19037],"fullWord":10264},{"subwords":[337,340,434,488,639,647,691,693,700,704,711,9307,9318,9319,9325,9334,9437,9447,10120,10126,10241,10263,10265,10654,10656,10659,10686,10691,10707,12238,12241,12292,12438,12442,12463,12471,15931,15936,15942,15960,15986,16041,16047,16840,16858,16907,17006,17017,17022,17093,17214,17255,17742,17754,18347,18349,18353,18408,18428,18863,18894,18919,18947],"fullWord":10265},{"subwords":[325,337,340,434,488,932,8241,8244,8280,8283,8362,8371,8378,8391,8645,8647,8678,8685,8688,8691,8935,9437,9447,10126,10231,10241,10257,10262,10266,10686,10691,10698,10707,15931,15938,15942,15960,16041,16529,16559,16653,16840,16907,17022,17093,18347,18349,18353,18684,18742,18863,18947],"fullWord":10266},{"subwords":[399,488,693,694,1009,1044,5620,5745,6055,6074,10174,10247,10251,10253,10267,10324,10344,10349,10437,10460,12229,12292,12325,12374,18370,18371,18408,18495,18498,18541,18547,18565,18607,18630,18969],"fullWord":10267},{"subwords":[399,405,488,491,817,911,1009,5588,5592,5620,5976,5982,6055,10247,10254,10268,10324,10355,10460,14898,14901,14916,14968,15312,15748,18370,18372,18449,18453,18476,18495,18498,18499,18541,18547,18554,18565,18672,19235],"fullWord":10268},{"subwords":[337,372,434,488,1101,9437,10126,10269,10281,10691,18347,18349,18863,19919,19923,19975,20107,20110,20210,20212],"fullWord":10269},{"subwords":[148,155,399,1053,1072,4438,4466,4590,4601,4728,5440,5442,5466,5467,5471,5472,5627,5659,5756,10090,10093,10094,10270,10271,10272,10324,10327,10378,10470],"fullWord":10272},{"subwords":[396,399,817,1053,1072,1073,4466,4516,4601,4607,4728,4810,5442,5471,5472,5536,5588,5592,5627,5756,5976,10090,10093,10097,10202,10270,10271,10273,10324,10327,10355,10378,10470,11029,11030,14736,14961,14968,15060,15773,15777,15778,15800,15801,19837,19847,19848],"fullWord":10273},{"subwords":[325,932,7293,7316,7396,7399,7433,8166,8233,8237,8362,8394,8397,8951,8958,8960,8961,10109,10115,10231,10275,10276,10981,10986,11039,15910,15942,16513,16746,17003,17131,19583,19584,19592,19871],"fullWord":10276},{"subwords":[111,2813,2869,3071,3459,8394,8960,8989,10072,10277,11001,11007,19600],"fullWord":10277},{"subwords":[377,382,905,1078,1080,1081,10278,10279,15942,17141,19837,19868,19871],"fullWord":10279},{"subwords":[399,442,449,463,817,5588,5592,5627,5780,5976,10280,10324,10343,10355,10470,11029,14968,15777,15800,19837,19847,19848],"fullWord":10280},{"subwords":[51,385,386,1210,1213,2029,2100,10061,10281,10282,10748,13087,13088,19923,20250],"fullWord":10282},{"subwords":[267,269,399,411,412,1106,1115,7293,7294,7298,7439,7440,7477,10109,10281,10283,10285,10324,10398,10471,10472,19912,19923,19924,19986,20014],"fullWord":10283},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":10288},{"subwords":[287,337,416,426,714,1115,7283,7293,7585,7604,10109,10120,10290,10637,12230,12238,12438,19919,19920,19923,19948,20107,20110,20152,20153],"fullWord":10290},{"subwords":[325,337,340,932,1124,8241,8244,8362,8678,10231,10291,15931,15942,16655,16656,16844,17029,19919,19923,20107,20110,20112,20115,20191],"fullWord":10291},{"subwords":[442,1060,1151,1155,6276,6723,6821,7164,10292,10294,20378,20471],"fullWord":10294},{"subwords":[287,337,416,426,1154,1155,1158,7283,7293,7585,7604,7747,10109,10120,10292,10295,10298,10637,12230,12238,12438,20326,20345,20349,20373,20393,20399,20742,20774,20790],"fullWord":10295},{"subwords":[375,466,504,596,598,1155,1158,10136,10137,10292,10296,10298,11173,11174,11213,11399,12244,20393],"fullWord":10296},{"subwords":[399,528,617,1145,1155,1158,5745,5782,10136,10145,10174,10292,10297,10298,10324,10344,10418,11173,11180,11213,11218,11399,11437,11442,11446,11512,11595,11598,12229,12244,12245,12390,20369,20393,20396,20501,20505,20579],"fullWord":10297},{"subwords":[227,399,817,1145,1155,1166,1196,5588,5592,5594,5976,10292,10300,10304,10306,10324,10355,10359,10495,11065,11074,14933,14937,14939,14968,15183,15201,15864,15866,20369,20371,20410,20417,20448,20493,20501,20510,20513,21010,21016,21050,21071,21079,21082,21097,21099,21138],"fullWord":10300},{"subwords":[399,407,488,1009,1167,1169,1170,1173,1182,1183,5616,5620,5626,6055,6126,6127,6171,10241,10247,10256,10301,10302,10324,10360,10366,10459,10460,10465,10494,15942,15948,15960,16041,16043,16098,16270,16274,16293,16457,16459,16483,17022,17023,17750,17811,18341,18370,18374,18528,18532,18541,18547,18548,18559,18660,18677,18681],"fullWord":10302},{"subwords":[337,434,488,1175,9437,9439,10126,10127,10301,10303,10304,10691,18347,18349,18528,18533,18863],"fullWord":10303},{"subwords":[227,399,407,817,825,905,906,924,1196,1197,5588,5592,5593,5594,5599,5619,5976,5977,10207,10228,10304,10306,10307,10313,10324,10355,10359,10360,10495,10496,11065,11066,11074,11075,14805,14881,14939,14944,14968,14973,15183,15184,15201,15282,15864,15865,15866,15867,15942,15948,16103,16105,16270,16274,16286,16419,16420,17039,17040,17149,17150,21050,21071,21097,21099,21104,21105,21130,21212],"fullWord":10307},{"subwords":[287,337,416,426,716,7282,7283,7286,7293,7447,7585,7604,9288,9293,10109,10120,10304,10308,10637,10662,11067,12230,12238,12311,12438,21058,21144],"fullWord":10308},{"subwords":[375,466,504,594,596,598,716,10136,10137,10304,10309,11173,11174,11177,11213,11238,11264,11408,11409,11410,12201,12244,12311,21051],"fullWord":10309},{"subwords":[399,528,594,716,1196,5745,5782,5785,10136,10145,10174,10304,10310,10324,10344,10418,10495,11065,11173,11180,11213,11218,11238,11264,11408,11437,11442,11445,11446,11449,11452,11512,12201,12229,12244,12245,12247,12311,21050,21051,21052,21097,21120],"fullWord":10310},{"subwords":[6386,6730,6854,6861,10304,10311,10734,12672,12769,12771,12772],"fullWord":10311},{"subwords":[488,495,1093,10304,10312,10897,10929,12686,13059,13075,18432,18508,19186,19605,21193],"fullWord":10312},{"subwords":[213,326,327,337,338,399,1198,4466,4584,4601,4714,4728,4739,4891,4935,5756,9103,9104,9117,10090,10093,10119,10314,10315,10317,10324,10327,10378,10414,10530,10536,10537,21241,21249],"fullWord":10317},{"subwords":[337,349,399,817,857,5588,5592,5976,9376,9384,9455,10121,10314,10318,10324,10355,10414,10502,10536,10549,10675,10677,14780,14945,14968,15399,15444,15473,21233,21241],"fullWord":10318},{"subwords":[337,340,362,399,407,9416,10314,10316,10319,10324,10360,10414,10415,10536,10551,15931,15942,15948,16270,16274,16929,21241,21243],"fullWord":10319},{"subwords":[337,442,464,9152,9157,10304,10320,10322,10583],"fullWord":10320},{"subwords":[287,337,416,426,7283,7293,7585,7604,10109,10120,10321,10637,12230,12238,12313,12438,21230,21269,21276],"fullWord":10321},{"subwords":[93,98,105,399,1196,2813,3100,3255,3487,5582,8258,8420,8445,8607,10072,10073,10078,10089,10304,10324,10325,10326,10373,10495,11065,21050,21097,21098],"fullWord":10326},{"subwords":[148,155,399,401,4438,4466,4590,4601,4667,4728,4731,4732,4733,5659,5691,5756,10090,10093,10094,10324,10327,10328,10378,10383],"fullWord":10328},{"subwords":[399,401,605,612,4466,4492,4500,4601,4605,4728,4731,4774,5665,5691,5745,5746,5756,5865,10090,10093,10095,10169,10174,10324,10327,10329,10344,10345,10378,10383,10427,12229,12339,12340],"fullWord":10329},{"subwords":[396,399,401,817,4466,4516,4601,4602,4607,4678,4728,4731,4810,5588,5589,5592,5691,5756,5757,5976,5984,10090,10093,10097,10202,10324,10327,10330,10355,10378,10383,10388,14736,14961,14968,15060,15093,15107],"fullWord":10330},{"subwords":[399,401,4466,4595,4601,4695,4728,4731,5691,5756,5765,6230,6231,6406,6409,6412,6416,6734,6740,6743,10090,10093,10324,10327,10333,10334,10378,10383],"fullWord":10334},{"subwords":[269,294,315,399,401,5585,5627,5691,7293,7298,7467,7477,7678,7722,10109,10324,10337,10383,10398,10470,10981,10982],"fullWord":10337},{"subwords":[399,401,4466,4601,4728,4731,5691,5740,5741,5756,5778,9760,9812,10090,10093,10128,10129,10324,10327,10338,10339,10378,10383,10386,10416],"fullWord":10339},{"subwords":[399,401,817,867,5588,5592,5691,5740,5778,5976,5984,9760,9812,10128,10130,10214,10324,10338,10340,10355,10383,10386,10388,10416,14798,14968,15103,15107],"fullWord":10340},{"subwords":[399,401,605,612,4466,4492,4500,4601,4605,4728,4731,4774,5665,5691,5745,5746,5756,5865,10090,10093,10095,10169,10174,10324,10327,10329,10344,10345,10378,10383,10427,12229,12339,12340],"fullWord":10345},{"subwords":[399,401,612,817,5588,5592,5595,5691,5745,5976,5984,5998,10174,10324,10344,10346,10355,10356,10383,10388,12229,12319,12339,14821,14830,14968,15107,15225],"fullWord":10346},{"subwords":[399,442,448,450,464,716,1196,5745,5780,10174,10304,10324,10343,10344,10347,10495,11065,12229,12311,21050,21097,21110,21120],"fullWord":10347},{"subwords":[399,401,481,732,733,4466,4601,4673,4728,4731,5691,5756,5956,10090,10093,10182,10324,10327,10350,10351,10378,10383,13171,13204,13207,13208,13439,13450,13451,13478,13479,13489,13490,13495,13940,13941,13950],"fullWord":10351},{"subwords":[399,401,481,732,735,817,5588,5592,5691,5956,5976,5984,10182,10324,10350,10352,10355,10383,10388,10448,13204,13207,13210,13286,13294,13439,13450,13455,13456,13489,13495,13506,13577,13583,13940,14262,14851,14852,14968,14979,15107,15248,15257,15259],"fullWord":10352},{"subwords":[399,407,817,825,905,906,5588,5592,5593,5595,5598,5599,5745,5748,5918,5976,5977,6000,10174,10175,10207,10228,10324,10344,10348,10355,10356,10357,10360,10433,12229,12275,12319,12324,14805,14821,14881,14968,14973,15225,15942,15948,15986,15995,15998,16270,16274,16286,16419,16420,17223,17229],"fullWord":10357},{"subwords":[399,405,488,491,693,694,705,709,817,911,1009,5588,5592,5595,5620,5745,5976,5982,6055,6074,10174,10247,10251,10254,10324,10344,10349,10355,10356,10358,10437,10460,12229,12292,12319,12325,12374,14821,14847,14898,14901,14968,15225,15241,15242,15312,15748,18370,18372,18408,18449,18453,18460,18541,18547,18554,18607,18649],"fullWord":10358},{"subwords":[200,399,401,407,4466,4467,4601,4603,4680,4728,4731,4734,4826,5605,5606,5607,5691,5693,5756,5760,5790,10090,10093,10099,10107,10227,10324,10327,10331,10360,10361,10362,10378,10383,10385,10392,10451,15893,15942,15948,16270,16274,16275,16319,16320,17044],"fullWord":10362},{"subwords":[399,401,407,817,825,905,906,5588,5592,5593,5599,5605,5607,5609,5691,5693,5790,5976,5977,5978,5984,10207,10228,10324,10355,10360,10361,10363,10383,10388,10390,10392,10451,14805,14881,14968,14973,15107,15110,15280,15284,15942,15948,16024,16270,16274,16276,16286,16319,16340,16419,16420,16425],"fullWord":10363},{"subwords":[399,401,407,973,5605,5607,5608,5611,5691,5693,5790,5791,6031,6039,6042,10230,10236,10324,10360,10361,10364,10383,10392,10451,10453,15942,15948,15950,16270,16274,16277,16291,16319,16329,16342],"fullWord":10364},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":10367},{"subwords":[204,399,401,1106,4466,4569,4601,4728,4731,4753,4851,5629,5630,5691,5756,6087,6092,10090,10093,10285,10286,10324,10327,10368,10369,10378,10383,10471,10472,19910,19923,19924,19986,19990,19992,20014,20017],"fullWord":10369},{"subwords":[399,401,612,1106,5629,5691,5745,6092,6093,10174,10285,10324,10344,10368,10370,10383,10471,10472,12229,12305,12306,12339,19923,19924,19948,19950,19986,19992,20014,20026],"fullWord":10370},{"subwords":[399,401,817,1106,1109,5588,5592,5629,5691,5796,5976,5984,6092,6100,10285,10287,10324,10355,10368,10371,10383,10388,10471,10472,10479,14921,14923,14968,14990,15107,15337,15339,15340,19923,19924,19986,19992,19996,20014,20015],"fullWord":10371},{"subwords":[399,401,407,1106,1114,5605,5607,5629,5631,5691,5693,5790,5798,6092,6104,10285,10289,10324,10360,10361,10368,10372,10383,10392,10451,10471,10472,15942,15948,15966,16076,16270,16274,16319,17029,17030,17042,19923,19924,19925,19935,19967,19986,19987,19992,20000,20014],"fullWord":10372},{"subwords":[3248,4120,4125,5691,5984,8483,8488,8552,8562,10373,10374,10383,10384,10388,15021,15107],"fullWord":10374},{"subwords":[3119,5691,5693,5790,6023,8483,8488,8491,10373,10375,10383,10384,10392,10451,16298,16319,16574],"fullWord":10375},{"subwords":[3135,3161,3560,3701,3708,3728,3898,3965,3968,4240,5650,6057,10376,10377,10443,10460,10760,10882,10897,12845,12965,12979,13008,15021,15052,15312,15592,15610,15621,15691,15694,15748,18981,19017,19093,19098,19101],"fullWord":10377},{"subwords":[4678,4728,4731,4810,5351,5667,5669,5691,5756,5757,5984,5988,7467,7468,7477,7478,7480,7678,7979,10378,10379,10380,10383,10388,10398,10405,15060,15093,15107,15141],"fullWord":10380},{"subwords":[4680,4728,4731,4734,4826,5667,5671,5691,5693,5756,5760,5790,7460,7467,7468,7473,7477,7478,7481,7486,7678,7679,10378,10379,10381,10383,10385,10392,10398,10412,10451,16313,16319,16320,17044,17045],"fullWord":10381},{"subwords":[4678,4728,4731,4810,5691,5756,5757,5984,10378,10383,10388,10389,15060,15093,15107,15108],"fullWord":10389},{"subwords":[399,401,1145,1155,1196,5691,5694,6118,6189,10292,10304,10324,10383,10393,10495,11065,20369,20493,20501,20532,21016,21050,21079,21082,21097,21138],"fullWord":10393},{"subwords":[5691,5705,5765,5984,6409,6416,6420,6443,6489,6743,6746,6749,7057,7073,10383,10388,10394,10395,10460,15098,15107,15114,15135,15186,15312,15748,18576,19240,19243],"fullWord":10395},{"subwords":[93,269,297,399,1196,2788,2793,2797,2813,3100,3487,7293,7298,7447,7477,7647,10072,10073,10078,10089,10109,10304,10324,10398,10399,10495,11065,21050,21097],"fullWord":10399},{"subwords":[269,280,399,407,442,461,5780,5781,7260,7293,7298,7300,7301,7307,7316,7396,7477,7486,10109,10115,10324,10343,10360,10398,10400,10401,10412,15910,15912,15942,15948,16270,16274,16368,17003],"fullWord":10401},{"subwords":[269,294,295,399,401,488,1009,5585,5587,5620,5691,5750,6055,7293,7298,7416,7417,7467,7477,7487,7540,7678,10109,10247,10324,10383,10398,10402,10460,18342,18370,18541,18547,18576],"fullWord":10402},{"subwords":[269,295,299,399,472,488,495,1009,5620,5718,6055,7293,7298,7361,7416,7417,7477,7487,7525,7540,7694,7764,7768,7874,10109,10247,10324,10398,10403,10443,10460,10793,10796,10897,12686,12792,12845,18342,18370,18432,18541,18547,18981,18993,18994,18995,19017],"fullWord":10403},{"subwords":[4728,4731,4774,5665,5667,5691,5756,5865,7467,7468,7477,7478,7493,7496,7678,7680,10378,10379,10383,10398,10404,10427,12339,12340],"fullWord":10404},{"subwords":[4728,4731,5667,5691,5709,5711,5756,7467,7468,7477,7478,7678,10378,10379,10383,10398,10406],"fullWord":10406},{"subwords":[5718,5953,7477,7493,7525,7604,7680,7815,9265,9360,10398,10407,10414,10443,10444,10536,10544,10625,10637,10641,10652,10663,10793,10796,10814,10822,10826,12438,12439,12504,12509,12792,12812,12845,12876],"fullWord":10407},{"subwords":[5716,7477,7486,7487,7488,7540,7541,7596,7597,7635,7637,9416,9419,9436,9447,10398,10408,10409,10412,10414,10415,10459,10460,10465,10536,10551,10686,10691,10694,10697,10707,16457,16840,16907,16911,17093,17862,18844,18850,18863,18866,18870,18947],"fullWord":10409},{"subwords":[269,399,528,620,625,5745,5782,7293,7298,7317,7323,7477,7489,7493,7494,7671,7674,7680,10109,10136,10145,10174,10324,10344,10398,10410,10418,11127,11128,11173,11180,11213,11218,11223,11227,11437,11442,11446,11487,11512,12229,12230,12244,12245],"fullWord":10410},{"subwords":[5691,5782,7467,7477,7489,7493,7496,7678,7680,10383,10398,10411,11487,11512,12339],"fullWord":10411},{"subwords":[5691,5782,5846,7467,7477,7489,7545,7678,7722,7731,8145,10383,10398,10413,10470,10981,10982,11487,12104,12110],"fullWord":10413},{"subwords":[399,407,470,528,531,5745,5748,5782,5784,5845,5918,10136,10145,10151,10161,10174,10175,10324,10344,10348,10360,10418,10419,10433,11173,11180,11181,11213,11218,11221,11247,11248,11330,11437,11442,11444,11446,11450,11453,11512,11524,11525,11560,12229,12244,12245,12250,15942,15948,15949,15973,15978,15986,15995,16270,16274,16278,17012],"fullWord":10419},{"subwords":[399,407,470,5782,5784,5845,10136,10145,10151,10161,10324,10360,10420,10421,11173,11180,11181,11330,11437,11442,11444,11453,11560,15942,15948,15949,15973,15978,16270,16274,16278,17012],"fullWord":10421},{"subwords":[5782,5784,5845,5918,5953,5955,10422,10423,10433,10443,10444,10447,10822,10888,11500,11501,11512,11524,11567,11870,11871,11891,11915,12504,12505,12506,12522,12525,12527,12560,12561,12845,12848,12866,12868,12872,12876,12879,17097,17354,17359,17362,17382,17383],"fullWord":10423},{"subwords":[5782,5785,5953,10422,10424,10443,10444,10495,10822,11065,11500,11512,11870,11884,11891,11899,11920,12504,12522,12525,12845,12866,12876,12882,21120,21183],"fullWord":10424},{"subwords":[5782,5784,5845,5846,5847,10425,10426,10470,11029,11033,11539,12110,12112,12152,12154,15202,15224,15777,15782,15800,15804,15806,15820,15840,16446,17128,17135,17141,18066,18071,18103,18150,19876,19880],"fullWord":10426},{"subwords":[4678,4728,4731,4774,4810,5665,5691,5756,5757,5865,5868,5984,5998,10378,10383,10388,10427,10428,12339,12340,12358,15060,15093,15107,15227],"fullWord":10428},{"subwords":[7477,7487,7493,7512,7540,7680,8540,10398,10430,10437,10460,12374,12612,18607,18697,18708],"fullWord":10430},{"subwords":[9290,9293,9325,9328,9334,10414,10432,10437,10460,10495,10536,10544,10625,10636,10656,10660,10662,10691,10694,11065,12374,12438,12439,12463,18607,18844,18863,18866,18894,18898,18925,21120,21135,21136,21144],"fullWord":10432},{"subwords":[4680,4728,4731,4734,4774,4785,4786,4826,5665,5691,5693,5756,5760,5790,5865,5875,5918,10378,10383,10385,10392,10427,10429,10433,10434,10435,10451,12339,12340,12344,16319,16320,16335,16381,17044],"fullWord":10435},{"subwords":[5691,5693,5790,5791,5918,6031,6039,6042,10383,10392,10433,10434,10436,10451,10453,10455,12339,12367,16319,16329,16335,16342,16394],"fullWord":10436},{"subwords":[5691,10383,10437,10438,10460,12339,12374,18576,18583,18607],"fullWord":10438},{"subwords":[3120,3135,3145,3413,3429,3430,3514,3523,5856,5861,6057,9079,9207,9290,9325,9328,9334,10376,10414,10437,10439,10460,10518,10536,10544,10625,10656,10691,10694,12374,12410,12438,12439,12463,18607,18823,18844,18863,18866,18894,18898],"fullWord":10439},{"subwords":[5780,9152,9290,9325,9328,9334,10414,10437,10440,10460,10536,10544,10580,10625,10656,10657,10691,10694,12374,12438,12439,12440,12463,18591,18607,18844,18863,18866,18872,18894,18898],"fullWord":10440},{"subwords":[5918,5953,5955,10433,10437,10441,10442,10443,10444,10447,10459,10460,10465,10822,10888,10896,10897,10901,12368,12374,12376,12504,12505,12506,12560,12561,12574,12581,12585,12591,12845,12848,12876,12879,12884,16399,16457,16461,17097,17113,17278,17354,17359,17383,17435,17834,17903,17904,17909,18607,18624,18981,18985,19017,19036,19038,19042,19057],"fullWord":10442},{"subwords":[5691,5693,5790,5918,5953,5955,10383,10392,10433,10434,10443,10444,10445,10446,10447,10451,10822,10888,12339,12504,12505,12506,12560,12561,12845,12848,12876,12879,16319,16335,17097,17354,17359,17383],"fullWord":10446},{"subwords":[5691,5693,5790,5984,6033,10383,10388,10390,10392,10448,10449,10451,13489,13495,13498,13506,13508,13510,13577,13583,13584,14262,14281,14403,15107,15110,15248,15259,15260,15272,15305,16319,16336,16340,16425,17049,17658],"fullWord":10449},{"subwords":[5953,10437,10441,10443,10444,10450,10460,10822,10864,10865,10897,12374,12504,12547,12574,12581,12845,12876,12916,12918,12937,13532,13539,13560,13564,13613,13973,14027,14056,14061,14105,14188,18607,18981,19017,19036,19038,19075,19076],"fullWord":10450},{"subwords":[5918,5953,5955,9307,9316,9360,9366,9416,10414,10415,10433,10443,10444,10447,10452,10536,10544,10548,10551,10625,10634,10652,10653,10654,10663,10664,10814,10815,10822,10888,12438,12439,12442,12504,12505,12506,12516,12560,12561,12812,12822,12845,12848,12876,12879,16837,16858,16860,17097,17350,17354,17359,17364,17383],"fullWord":10452},{"subwords":[5691,5693,5790,5791,6031,6039,6042,10383,10392,10451,10453,10454,16319,16329,16342],"fullWord":10454},{"subwords":[5691,5693,5790,5791,5918,6031,6039,6042,10383,10392,10433,10434,10436,10451,10453,10455,12339,12367,16319,16329,16335,16342,16394],"fullWord":10455},{"subwords":[5691,5693,5790,5791,5984,6031,6039,6042,10383,10388,10390,10392,10451,10453,10456,15107,15110,16319,16329,16340,16341,16342,16425,16429],"fullWord":10456},{"subwords":[5918,5953,5955,6039,10433,10443,10444,10447,10453,10457,10787,10822,10888,10891,10893,12367,12504,12505,12506,12560,12561,12563,12845,12848,12876,12879,17097,17098,17354,17359,17363,17383,17388,17395,17434],"fullWord":10457},{"subwords":[6004,6039,10443,10447,10453,10458,10787,10882,10883,10888,10889,10890,10891,10893,12845,12848,12979,12982,13007,15610,15611,15621,15622,15676,15679,17097,17098,17354,17359,17363,17419,17420,17421,17424,17434],"fullWord":10458},{"subwords":[399,442,488,1009,5620,5780,6055,8258,8268,8280,8378,8381,8445,8461,8513,10247,10257,10258,10324,10343,10460,10462,18370,18381,18541,18547,18591,18697],"fullWord":10462},{"subwords":[5691,5693,5790,6064,8483,8488,8491,8586,8935,10383,10392,10451,10459,10460,10463,10464,10465,16319,16457,16574,16589,17052,17818,17828,18576,18588,18697,18698,18716],"fullWord":10464},{"subwords":[4728,4731,5691,5756,10378,10383,10460,10466,18576,18577],"fullWord":10466},{"subwords":[5691,5984,10383,10388,10460,10467,15107,15186,15312,15748,18576,19240],"fullWord":10467},{"subwords":[6033,10459,10460,10465,10468,10469,10470,11044,11050,11053,13532,13535,13609,13613,13626,14003,14427,14454,14458,14472,14551,14561,14567,16409,16457,16468,17057,17128,17147,17537,17836,18013,18066,18074,18135,18136,18148,19386,19422,19453,19456,19605,19825,19826,19876],"fullWord":10469},{"subwords":[399,488,693,694,1009,1106,5620,5745,6055,6074,10174,10247,10251,10285,10324,10344,10349,10437,10460,10471,10472,10473,12229,12292,12305,12306,12325,12374,18370,18408,18541,18547,18607,19923,19924,19926,19948,19950,19975,19986,20014,20026,20046,20095],"fullWord":10473},{"subwords":[4728,4731,4753,5691,5756,6092,10378,10383,10471,10474,10475,19992,20017],"fullWord":10475},{"subwords":[5691,5693,5790,5798,6092,6104,10383,10392,10451,10471,10474,10476,16319,17055,19992,20000],"fullWord":10476},{"subwords":[5691,5693,5780,5781,5790,5798,6092,6104,10383,10392,10451,10471,10477,10478,16319,16368,19992,20000],"fullWord":10478},{"subwords":[5691,5693,5790,5796,5797,5798,5984,6092,6100,6104,10383,10388,10390,10392,10451,10471,10479,10480,15107,15110,15337,15340,15341,15354,16319,16340,16425,16449,16472,19992,19996,19998,20000,20070,20073],"fullWord":10480},{"subwords":[4714,4728,4731,4739,4753,4856,4935,5071,5691,5756,5771,6092,6107,9108,9117,10378,10383,10414,10471,10481,10482,10530,10536,10537,10711,10712,19992,20004,20005,20017,20126,20129,20130,20144],"fullWord":10482},{"subwords":[5691,5735,5796,5984,5995,6092,6100,6107,6108,9384,10383,10388,10414,10471,10479,10481,10483,10536,10549,10677,10711,10716,10722,15107,15198,15337,15340,15348,15444,15473,15549,19992,19996,20004,20006,20129,20132,20144,20146],"fullWord":10483},{"subwords":[5691,5693,5790,5798,5799,6092,6104,6107,6110,9416,10383,10392,10414,10415,10451,10471,10481,10484,10486,10536,10551,10711,10719,16319,16798,19992,20000,20004,20007,20129,20134,20144,20197],"fullWord":10484},{"subwords":[6107,9453,10414,10460,10471,10481,10487,10489,10495,10536,10691,10694,10711,11065,18844,18863,18866,20004,20095,20129,20144,21135,21136],"fullWord":10487},{"subwords":[4678,4728,4731,4810,4865,5361,5691,5756,5757,5984,6118,6119,10378,10383,10388,10490,10491,15060,15093,15107,15362,15364,20524,20532,20533,20566,20568,20587],"fullWord":10491},{"subwords":[4728,4744,4746,4865,4874,5559,5567,5756,5780,10378,10490,10492,10495,11065,20524,20566,20571,21016,21110,21138],"fullWord":10492},{"subwords":[43,337,385,399,442,1272,1301,1307,1315,1636,1648,1652,1817,1827,5780,9144,9152,10061,10062,10066,10324,10343,10414,10497,10504,10507,10536],"fullWord":10497},{"subwords":[337,340,362,399,407,428,9146,9416,10324,10360,10414,10415,10498,10536,10551,15931,15942,15948,16270,16274],"fullWord":10498},{"subwords":[337,340,372,375,376,382,419,596,598,639,647,691,945,946,9307,10120,10162,10163,10499,10500,10654,12238,12241,12283,12284,12438,12442,15931,15942,15986,16858,17006,17214],"fullWord":10500},{"subwords":[337,340,362,399,407,423,424,430,433,637,639,647,648,691,5745,5748,5918,9307,9416,10120,10174,10175,10324,10344,10348,10360,10414,10415,10433,10501,10536,10544,10548,10551,10625,10634,10654,12229,12238,12241,12438,12439,12442,15931,15942,15948,15951,15986,15995,16270,16274,16858,16860,17006,17214],"fullWord":10501},{"subwords":[1510,1560,1636,1767,1770,1777,1780,1817,1938,4587,4618,4714,4728,4739,4906,4935,5632,5756,9117,10378,10414,10504,10505,10530,10536,10537],"fullWord":10505},{"subwords":[1510,1636,1767,1770,1790,1817,2404,2417,5632,9384,10414,10504,10506,10509,10514,10536,10549,10677,14995,15402,15444,15473],"fullWord":10506},{"subwords":[1636,1648,1652,1655,1817,1818,1827,1833,5780,5781,9152,9155,9416,10323,10414,10415,10504,10507,10508,10516,10536,10551,10679,16368,16765,16834],"fullWord":10508},{"subwords":[1636,1790,1791,1817,1818,2417,2423,9384,9389,9409,9416,10323,10414,10415,10504,10509,10510,10514,10516,10536,10549,10550,10551,10677,14995,15014,15402,15410,15444,15445,15473,15475,15526,16423,16765,16889,16890,17072,17722],"fullWord":10510},{"subwords":[1777,1851,1852,2058,2095,2102,4587,9073,9125,10504,10511,10530,10533,10748,12700,12812,12837],"fullWord":10511},{"subwords":[67,337,340,349,359,385,392,860,905,1272,1279,1307,1366,1419,1422,1438,1763,2308,2326,2327,2343,2346,9376,9409,10061,10071,10121,10125,10323,10502,10503,10504,10512,10513,10516,10675,10676,14780,14783,15399,15400,15402,15410,15931,15942,16028,16765,16889,16999,17722],"fullWord":10513},{"subwords":[9075,9392,9409,10323,10504,10515,10516,15402,15410,16765,16889,17722],"fullWord":10515},{"subwords":[3120,3272,3289,3292,5691,5769,8483,8488,8500,8612,8625,9079,10373,10383,10384,10414,10518,10519,10536],"fullWord":10519},{"subwords":[3120,3272,3289,3292,3305,3309,3413,3523,5769,5856,5861,8500,8540,8612,8625,9079,9207,9213,10373,10414,10518,10520,10536,10544,10625,12410,12415,12438,12439],"fullWord":10520},{"subwords":[3272,3294,8612,8678,10521,10522,16178,16179,16769],"fullWord":10522},{"subwords":[3120,4639,4651,4714,4728,4739,4909,4917,4935,4957,5756,5778,9079,9082,9117,9150,9885,10378,10414,10416,10518,10525,10526,10530,10536,10537,10566,10567],"fullWord":10526},{"subwords":[3120,3505,5778,9079,9094,9150,9384,9396,10414,10416,10518,10525,10527,10536,10549,10566,10571,10677,15021,15188,15411,15422,15444,15473],"fullWord":10527},{"subwords":[3429,3560,3685,3693,3701,3728,3965,4240,10529,10691,10760,10767,10897,12812,12965,13008,13038,15504,15592,15617,15691,18823,18863,18945,19002,19093,19098,19292],"fullWord":10529},{"subwords":[4714,4728,4739,4928,4929,4935,4936,5756,9117,9118,10378,10414,10530,10532,10536,10537],"fullWord":10532},{"subwords":[4678,4714,4728,4731,4739,4810,4935,5023,5691,5725,5735,5756,5757,5771,5984,5995,9108,9117,9119,9384,9385,10378,10383,10388,10414,10530,10536,10537,10538,10549,10677,15060,15093,15107,15191,15428,15433,15444,15473,15474],"fullWord":10538},{"subwords":[5691,5735,5765,5984,5995,6409,6416,6543,6568,6570,6621,6622,6743,6746,6765,7057,9384,10383,10388,10414,10536,10539,10540,10549,10554,10555,10677,15098,15107,15114,15119,15192,15444,15446,15454,15473],"fullWord":10540},{"subwords":[5765,5780,6430,6439,6509,6543,6568,6577,6578,6584,6854,9152,9157,10414,10495,10536,10539,10541,10554,10583,11065,21110],"fullWord":10541},{"subwords":[5691,5693,5716,5790,7467,7473,7477,7486,7678,7679,9416,10383,10392,10398,10412,10414,10415,10451,10536,10542,10543,10551,16319,16351,16790],"fullWord":10543},{"subwords":[337,399,423,430,442,448,637,5745,5780,9144,9152,10120,10174,10324,10343,10344,10414,10536,10544,10545,10625,10626,12229,12238,12438,12439,12440],"fullWord":10545},{"subwords":[5691,9132,10383,10414,10536,10544,10546,10625,12339,12438,12439],"fullWord":10546},{"subwords":[5914,5953,5996,9360,9384,9400,10414,10443,10444,10536,10544,10547,10549,10625,10632,10652,10663,10677,10814,10822,10824,10882,10886,12438,12439,12504,12513,12514,12548,12812,12816,12845,12876,12979,12992,15175,15238,15246,15444,15473,15610,15617,15621],"fullWord":10547},{"subwords":[5765,6543,6568,6570,6571,6572,6621,6622,6626,6636,6765,6766,6767,7085,9135,9384,9389,9409,9416,10414,10415,10536,10539,10549,10550,10551,10554,10555,10556,10677,15114,15134,15444,15445,15446,15454,15457,15473,15475,15526,16365,16431,16437,16889,16890,17072,17722],"fullWord":10556},{"subwords":[4701,4714,4728,4736,4739,4935,4942,5680,5705,5756,5765,6406,6443,6492,6537,6538,6543,6546,6568,6569,6573,6651,6740,6764,6782,6784,9117,10378,10394,10414,10460,10530,10536,10537,10539,10554,10557,10558,10691,10694,18835,18844,18845,18863,18864,18866,18867],"fullWord":10558},{"subwords":[5705,5765,6443,6543,6568,6570,6573,6589,6621,6622,6651,6765,6779,6782,6784,7073,9384,10394,10414,10460,10536,10539,10549,10554,10555,10557,10559,10677,10691,10694,10695,10705,15114,15124,15135,15197,15312,15444,15446,15454,15458,15473,15542,15748,18844,18847,18863,18866,18868,18941,19243,19279],"fullWord":10559},{"subwords":[269,286,295,337,399,434,488,1009,5620,6055,7289,7293,7298,7416,7417,7477,7487,7540,7585,7596,7637,9437,10109,10126,10247,10324,10398,10408,10414,10460,10536,10561,10691,10694,18342,18347,18349,18370,18541,18547,18844,18863,18866],"fullWord":10561},{"subwords":[7596,7597,7635,7637,8645,8647,8678,8685,8688,8691,8935,9447,10563,10564,10686,10691,10698,10707,16653,16805,16809,16840,16907,17074,17093,18742,18863,18947],"fullWord":10564},{"subwords":[7604,7688,7731,7759,8145,8151,10565,10584,10605,10637,10661,10981,11012,11649,11659,11697,11711,12104,12116,12438,12443,19585],"fullWord":10565},{"subwords":[5778,5780,9150,9152,9157,9865,9898,10414,10416,10495,10536,10566,10568,10583,11065,21110],"fullWord":10568},{"subwords":[5778,5779,5918,9150,9151,9276,9281,9282,9284,9307,9416,9836,9843,9902,9904,9913,9919,9921,9929,10414,10415,10416,10417,10433,10536,10544,10548,10551,10566,10569,10570,10573,10625,10634,10645,10648,10654,12438,12439,12442,16829,16831,16858,16860,16876,16948,16954,16974,17085],"fullWord":10570},{"subwords":[5778,5779,9150,9151,9384,9389,9396,9399,9409,9416,10041,10414,10415,10416,10417,10536,10549,10550,10551,10566,10571,10572,10573,10677,15444,15445,15473,15475,15526,15534,16829,16889,16890,16954,16960,16981,17072,17722],"fullWord":10572},{"subwords":[5778,5779,9150,9151,9416,9419,9436,9447,9834,9906,9910,9945,9946,9947,9951,9955,10414,10415,10416,10417,10459,10460,10465,10536,10551,10566,10573,10574,10686,10691,10694,10697,10707,16457,16829,16840,16907,16911,16954,16986,17093,17862,18844,18850,18861,18862,18863,18866,18870,18947],"fullWord":10574},{"subwords":[7604,9150,9276,9902,9913,9922,10575,10637,10645,12438],"fullWord":10575},{"subwords":[337,340,442,461,2813,2826,2831,2833,3402,9152,9155,10072,10576,10577,15880,15931,15942,16178,16179,16769,16834],"fullWord":10577},{"subwords":[4714,4728,4739,4744,4935,4967,5756,5780,9117,9152,10378,10414,10530,10536,10537,10578],"fullWord":10578},{"subwords":[5780,5781,9152,9155,9416,10414,10415,10536,10551,10579,10679,16368,16834],"fullWord":10579},{"subwords":[4714,4728,4739,4744,4935,4942,4967,5680,5756,5780,9117,9152,10378,10414,10460,10530,10536,10537,10580,10581,10691,10694,18591,18835,18844,18845,18863,18864,18866,18867,18872,18873],"fullWord":10581},{"subwords":[1560,1568,1636,1777,1780,1817,1938,4587,4618,4714,4728,4739,4935,4938,4971,4972,5756,5782,9077,9109,9117,9167,10378,10414,10504,10530,10536,10537,10584,10587,10588,10595,10596,11492,11626,11659,11663,11668],"fullWord":10588},{"subwords":[1636,1700,1790,1817,2417,2428,5782,5830,9077,9384,10414,10504,10509,10514,10536,10549,10584,10587,10589,10595,10677,11539,11659,11668,11669,11743,14995,15202,15402,15444,15473,15480,15481],"fullWord":10589},{"subwords":[3518,9077,9078,10504,10584,10587,10590,11659],"fullWord":10590},{"subwords":[1851,1852,1858,2095,2098,9077,9422,10323,10504,10516,10584,10587,10591,10592,10593,10609,10610,10748,10758,11616,11659,11684,11685,11772,11817,11821,11823,11854,11856,11859,12700,12701,12812,12822,12872,16765,16837,17076,17096,17308,17350,17354,17364],"fullWord":10592},{"subwords":[5782,5784,5845,5918,9307,9416,9422,10414,10415,10433,10536,10544,10548,10551,10584,10595,10597,10598,10605,10608,10625,10634,10654,11489,11512,11524,11645,11646,11659,11668,11671,11685,11697,11706,11710,11728,11764,12438,12439,12442,12443,12447,16375,16858,16860,17076,17077,17171],"fullWord":10597},{"subwords":[5782,5784,5785,5829,5845,9416,9422,10414,10415,10495,10496,10536,10551,10584,10595,10598,10599,10600,10618,11065,11066,11659,11668,11671,11685,11764,16375,17076,17077,17082,17149,17171,21130],"fullWord":10600},{"subwords":[5782,5830,9384,10414,10536,10549,10584,10595,10601,10677,11539,11659,11668,11669,11743,15202,15444,15473,15480,15481],"fullWord":10601},{"subwords":[7604,7688,10584,10602,10605,10637,11649,11659,11697,11711,11714,12438,12443],"fullWord":10602},{"subwords":[9422,9447,10584,10603,10604,10686,10691,10707,11659,11685,11686,11780,16840,16907,17076,17093,17179,18863,18882,18947],"fullWord":10604},{"subwords":[4714,4728,4739,4774,4780,4935,4938,4971,4972,4985,4988,5756,5782,5865,9109,9117,10378,10414,10427,10530,10536,10537,10544,10584,10595,10596,10605,10606,10625,10628,11489,11492,11512,11516,11626,11645,11659,11663,11664,11668,11697,11702,11706,11707,12438,12439,12443],"fullWord":10606},{"subwords":[5782,5830,5996,9384,10414,10536,10544,10549,10584,10595,10605,10607,10625,10632,10677,11489,11512,11539,11555,11645,11659,11668,11669,11697,11706,11708,11743,12438,12439,12443,15175,15202,15444,15473,15480,15481],"fullWord":10607},{"subwords":[4714,4728,4739,4935,4938,4971,4972,4981,5014,5756,5782,9109,9117,9178,9184,9186,10378,10414,10530,10536,10537,10584,10595,10596,10611,10612,10665,10957,11492,11626,11659,11663,11668,13478,13705,13710,13743,13744,13950,13958],"fullWord":10612},{"subwords":[5782,5830,9178,9186,9189,9384,10414,10536,10549,10584,10595,10611,10613,10665,10677,10957,11539,11659,11668,11669,11743,13577,13585,13593,13705,13712,13743,13959,14262,14274,14313,14317,15202,15248,15444,15473,15480,15481,15508,15509,15747],"fullWord":10613},{"subwords":[5782,5832,9178,9186,9444,10414,10460,10536,10584,10595,10611,10614,10665,10691,10694,10957,11502,11574,11659,11668,11686,11786,13532,13613,13705,13743,13850,18595,18596,18599,18844,18863,18866,18882,18886,18926],"fullWord":10614},{"subwords":[4971,5014,9178,10530,10584,10611,10615,10665,10667,10957,11626,11637,11659,11663],"fullWord":10615},{"subwords":[9152,9157,9178,9192,10583,10584,10611,10616,10618,10665,10957,11659,11676,13749,14009,21146],"fullWord":10616},{"subwords":[337,340,639,647,691,2800,2813,2869,2906,3402,3459,3464,9207,9208,9209,9307,10072,10120,10619,10620,10654,12238,12241,12438,12442,15880,15931,15942,15986,16134,16178,16179,16769,16858,17006,17214],"fullWord":10620},{"subwords":[269,286,287,337,399,416,423,426,430,620,625,637,5745,7283,7293,7298,7477,7493,7494,7501,7585,7604,7674,7680,9265,10109,10120,10174,10324,10344,10398,10414,10536,10544,10621,10625,10637,12229,12230,12238,12438,12439],"fullWord":10621},{"subwords":[4714,4728,4739,4774,4935,4985,4988,5756,5865,9117,9297,9299,10378,10414,10427,10431,10530,10536,10537,10544,10623,10625,10628,10629,12438,12439,12448],"fullWord":10623},{"subwords":[337,399,423,430,442,448,637,5745,5780,9144,9152,10120,10174,10324,10343,10344,10414,10536,10544,10545,10625,10626,12229,12238,12438,12439,12440],"fullWord":10626},{"subwords":[337,349,399,423,430,432,637,817,857,5588,5592,5595,5745,5976,5996,9376,9378,9384,10120,10121,10174,10324,10344,10355,10356,10414,10502,10536,10544,10549,10625,10627,10632,10675,10677,12229,12238,12240,12319,12438,12439,14780,14784,14821,14838,14968,15175,15225,15399,15444,15473],"fullWord":10627},{"subwords":[5918,9297,9302,9307,9416,10414,10415,10431,10433,10536,10544,10548,10551,10625,10629,10630,10634,10654,12438,12439,12442,12448,12449,16858,16860],"fullWord":10630},{"subwords":[9293,9297,10414,10431,10495,10536,10544,10625,10629,10631,10636,10662,11065,12438,12439,12448,21120,21144],"fullWord":10631},{"subwords":[5918,5996,6000,9307,9384,9389,9409,9416,10414,10415,10433,10536,10544,10548,10549,10550,10551,10625,10632,10633,10634,10654,10677,12438,12439,12442,15175,15177,15296,15444,15445,15473,15475,15500,15526,15527,16439,16858,16860,16889,16890,16893,17072,17722],"fullWord":10633},{"subwords":[10414,10470,10536,10544,10552,10625,10635,10665,11008,11025,11026,12438,12439,12453,13539,13705,13743,13765,13769,14454,14484,19740],"fullWord":10635},{"subwords":[287,337,341,416,426,7283,7293,7317,7334,7585,7604,7688,10109,10120,10136,10156,10584,10585,10605,10637,10638,11127,11132,11148,11156,11173,11182,11184,11213,11649,11659,11662,11697,11711,12230,12238,12244,12438,12443],"fullWord":10638},{"subwords":[287,337,340,416,417,426,427,639,647,691,7283,7287,7293,7316,7396,7585,7604,7611,7660,9307,10109,10115,10120,10235,10637,10639,10642,10654,12230,12233,12238,12241,12438,12442,15910,15931,15942,15986,16001,16815,16816,16858,16866,17003,17006,17014,17083,17211,17214],"fullWord":10639},{"subwords":[5894,5988,5996,7477,7493,7604,7622,7680,8015,9265,9384,10398,10414,10536,10544,10549,10562,10625,10632,10637,10640,10677,12438,12439,15141,15173,15175,15234,15444,15461,15473,15494],"fullWord":10640},{"subwords":[287,337,416,426,7283,7293,7585,7604,7759,8151,10109,10120,10637,10643,10981,11001,11012,12230,12238,12438,19585,19600],"fullWord":10643},{"subwords":[5996,9292,9384,10414,10536,10544,10549,10625,10632,10644,10677,12438,12439,15175,15444,15473],"fullWord":10644},{"subwords":[4714,4728,4739,4774,4935,4957,4985,4988,5756,5778,5865,9117,9150,9276,9277,9281,9836,9885,9902,9903,9913,9914,9916,9919,10378,10414,10416,10427,10530,10536,10537,10544,10566,10567,10569,10625,10628,10645,10646,12438,12439],"fullWord":10646},{"subwords":[5778,5996,9150,9276,9278,9281,9384,9396,9836,9855,9902,9913,9919,10414,10416,10536,10544,10549,10566,10569,10571,10625,10632,10645,10647,10677,12438,12439,15175,15444,15473,15498],"fullWord":10647},{"subwords":[9150,9276,9902,9913,9932,10645,10649,10665,11021,11025,12438,12453,13765,13780,13963,14000,14484,14491,19810],"fullWord":10649},{"subwords":[9290,9297,9325,9328,9334,10414,10431,10437,10460,10536,10544,10625,10629,10651,10656,10691,10694,12374,12438,12439,12448,12463,18607,18844,18863,18866,18894,18898],"fullWord":10651},{"subwords":[5918,9293,9307,9416,10414,10415,10433,10495,10496,10536,10544,10548,10551,10625,10634,10636,10654,10655,10662,11065,11066,11082,11083,12438,12439,12442,16858,16860,17149,18287,21120,21122,21130,21144,21145],"fullWord":10655},{"subwords":[5780,9152,9290,9325,9328,9334,10414,10437,10440,10460,10536,10544,10580,10625,10656,10657,10691,10694,12374,12438,12439,12440,12463,18591,18607,18844,18863,18866,18872,18894,18898],"fullWord":10657},{"subwords":[5996,9245,9290,9325,9328,9331,9334,9338,9384,10414,10437,10460,10536,10544,10549,10625,10632,10656,10658,10677,10691,10694,10695,10705,12374,12438,12439,12463,12464,12466,15175,15197,15241,15312,15444,15473,15542,15748,18607,18649,18844,18847,18863,18866,18868,18894,18898,18941,19289],"fullWord":10658},{"subwords":[337,340,362,399,407,481,486,732,739,779,961,5956,6033,6034,9416,10182,10188,10194,10195,10324,10350,10353,10360,10414,10415,10536,10551,10665,10666,10672,10681,13191,13192,13204,13207,13211,13232,13336,13439,13450,13452,13461,13705,13716,13743,13745,13839,13940,13943,13961,14421,15931,15942,15948,16014,16270,16274,16403,16405,16883,17019,17088,17476,17488,17563],"fullWord":10666},{"subwords":[5014,5021,5037,9127,10530,10535,10665,10667,10668,10672,10681,14421,16883,17068,17088],"fullWord":10668},{"subwords":[4714,4728,4739,4935,5014,5756,9117,10378,10414,10530,10536,10537,10665,10669,13478,13569,13705,13710,13743,13744,13813,13815,13816,13950,13958,14237],"fullWord":10669},{"subwords":[9384,10414,10536,10549,10665,10670,10677,13569,13577,13585,13705,13712,13743,13813,13815,13817,13959,14262,14278,15248,15444,15473,15508,15509,15521],"fullWord":10670},{"subwords":[9369,10673,10674,10922,12812,13048,13051,14659,14694,15617],"fullWord":10674},{"subwords":[1837,1850,1851,1852,1858,1877,2095,2098,2127,2153,9307,9360,9366,10323,10504,10516,10652,10653,10654,10663,10664,10678,10748,10758,10814,10815,12406,12409,12438,12442,12481,12489,12560,12700,12701,12812,12822,16765,16837,16858,17096,17259,17308,17350,17354,17364,17383],"fullWord":10678},{"subwords":[5780,5781,6039,9152,9155,9416,9418,10414,10415,10453,10536,10551,10679,10680,16368,16370,16834,16835,16903],"fullWord":10680},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5014,5021,5037,5058,5756,5760,6033,9111,9117,9121,9127,9416,9417,10378,10414,10415,10530,10535,10536,10537,10551,10665,10672,10681,10682,13478,13488,13705,13710,13716,13743,13744,13745,13950,13958,13961,14421,16780,16784,16883,17044,17068,17069,17088,17530,17562,17563],"fullWord":10682},{"subwords":[6033,9384,9389,9409,9416,10414,10415,10536,10549,10550,10551,10665,10672,10677,10681,10683,13577,13585,13586,13588,13705,13712,13715,13716,13743,13745,13959,13960,13961,14262,14281,14309,14336,14403,14421,15248,15272,15305,15444,15445,15473,15475,15508,15509,15514,15524,15526,16883,16889,16890,17072,17088,17563,17565,17591,17722],"fullWord":10683},{"subwords":[9422,9423,10584,10609,10610,10685,10893,11659,11684,11685,11772,11773,11774,11854,11856,11859,12002,12082,12812,12822,12872,16837,16839,16903,17076,17081,17350,17352,17354,17364,17434],"fullWord":10685},{"subwords":[4714,4724,4728,4739,4742,4743,4826,4935,4939,4942,4945,5037,5063,5680,5684,5756,5760,9111,9117,9121,9122,9127,9416,9417,9419,9436,9447,10378,10414,10415,10459,10460,10465,10530,10535,10536,10537,10551,10686,10687,10691,10694,10697,10707,16457,16780,16784,16840,16841,16907,16911,16912,17044,17068,17069,17093,17856,17862,18575,18835,18837,18844,18845,18850,18863,18864,18865,18866,18867,18870,18947],"fullWord":10687},{"subwords":[5902,5918,9290,9291,9307,9312,9318,9325,9328,9334,9416,9419,9436,9447,10414,10415,10433,10437,10459,10460,10465,10536,10544,10548,10551,10625,10634,10654,10656,10659,10686,10688,10691,10694,10697,10707,12368,12374,12376,12438,12439,12442,12463,12471,16399,16400,16457,16826,16840,16858,16860,16907,16911,17093,17255,17826,17862,18607,18624,18844,18850,18863,18866,18870,18894,18898,18900,18919,18920,18947],"fullWord":10688},{"subwords":[6018,9384,9389,9409,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10549,10550,10551,10677,10686,10689,10691,10694,10695,10696,10697,10705,10706,10707,15196,15197,15306,15312,15444,15445,15473,15475,15526,15542,15543,15748,16457,16840,16889,16890,16907,16911,17072,17093,17722,17862,17881,18844,18847,18849,18850,18863,18866,18868,18869,18870,18941,18943,18947,19277],"fullWord":10689},{"subwords":[337,434,488,693,700,716,9288,9293,9325,9334,9437,9439,10120,10126,10127,10263,10304,10656,10660,10662,10691,10692,12238,12292,12311,12438,12463,18347,18349,18408,18863,18894,18925,21144],"fullWord":10692},{"subwords":[3272,3294,3328,3429,8612,8645,8688,9440,10521,10523,10524,10691,10693,10698,10701,18823,18863],"fullWord":10693},{"subwords":[6018,9384,9389,9409,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10549,10550,10551,10677,10686,10689,10691,10694,10695,10696,10697,10705,10706,10707,15196,15197,15306,15312,15444,15445,15473,15475,15526,15542,15543,15748,16457,16840,16889,16890,16907,16911,17072,17093,17722,17862,17881,18844,18847,18849,18850,18863,18866,18868,18869,18870,18941,18943,18947,19277],"fullWord":10696},{"subwords":[5769,8500,8503,8552,8625,8645,8672,8688,8690,9384,10414,10460,10536,10549,10677,10691,10694,10695,10698,10699,10700,10705,15197,15312,15444,15473,15542,15748,18697,18701,18844,18847,18863,18866,18868,18941],"fullWord":10700},{"subwords":[3272,3294,3328,3429,8612,8645,8688,9440,10521,10523,10524,10691,10693,10698,10701,18823,18863],"fullWord":10701},{"subwords":[8645,8647,8678,8685,8688,8691,8739,8741,8764,8770,8771,8887,8892,8901,8935,9447,10686,10691,10698,10702,10703,10707,10896,10897,10898,10901,12810,12812,12822,16653,16704,16837,16840,16907,17093,17113,17114,17350,17354,17364,17435,18742,18743,18863,18947,19002,19006,19123],"fullWord":10703},{"subwords":[9422,9447,10584,10686,10691,10704,10707,11044,11659,11685,11686,11780,12125,12177,16840,16907,16917,17076,17093,17135,17147,17179,17203,18083,18085,18103,18863,18882,18947,19605],"fullWord":10704},{"subwords":[6018,9384,9389,9409,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10549,10550,10551,10677,10686,10689,10691,10694,10695,10696,10697,10705,10706,10707,15196,15197,15306,15312,15444,15445,15473,15475,15526,15542,15543,15748,16457,16840,16889,16890,16907,16911,17072,17093,17722,17862,17881,18844,18847,18849,18850,18863,18866,18868,18869,18870,18941,18943,18947,19277],"fullWord":10706},{"subwords":[9290,9325,9328,9334,10414,10437,10460,10536,10544,10625,10656,10691,10694,10708,12374,12438,12439,12463,18607,18630,18844,18863,18866,18876,18894,18898,18921,18950,18960,18969],"fullWord":10708},{"subwords":[9384,10414,10460,10536,10549,10677,10691,10694,10695,10705,10709,15197,15312,15444,15473,15542,15748,18844,18847,18863,18866,18868,18876,18878,18941,18950,18953,18960,18963,19303],"fullWord":10709},{"subwords":[5780,9152,10414,10460,10536,10580,10691,10694,10710,18591,18844,18863,18866,18872,18876,18950,18960],"fullWord":10710},{"subwords":[5780,6107,6109,9152,9157,9453,10414,10471,10481,10489,10495,10536,10583,10711,10713,11065,20004,20129,20144,20145,21110],"fullWord":10713},{"subwords":[5799,5918,6107,6110,9307,9416,10414,10415,10433,10471,10481,10485,10486,10536,10544,10548,10551,10625,10634,10654,10711,10714,10715,10719,12387,12438,12439,12442,16858,16860,17258,20004,20007,20008,20012,20129,20134,20144,20152,20157,20161,20167,20197],"fullWord":10715},{"subwords":[5799,6107,6110,9384,9389,9409,9416,10414,10415,10471,10481,10486,10536,10549,10550,10551,10677,10711,10716,10717,10719,10722,10723,15337,15354,15444,15445,15473,15475,15526,15549,15554,16847,16889,16890,17072,17095,17722,20004,20007,20070,20129,20132,20133,20134,20144,20146,20197],"fullWord":10717},{"subwords":[6107,9384,9453,10414,10471,10481,10489,10495,10536,10549,10677,10711,10716,10718,10722,11065,11074,15201,15337,15444,15473,15549,15866,20004,20065,20085,20129,20132,20144,20146],"fullWord":10718},{"subwords":[5799,6107,6110,9416,9419,9436,9447,10414,10415,10459,10460,10465,10471,10481,10486,10536,10551,10686,10691,10694,10697,10707,10711,10719,10720,16457,16840,16907,16911,17093,17862,18844,18850,18863,18866,18870,18947,20004,20007,20088,20095,20101,20129,20134,20144,20147,20197],"fullWord":10720},{"subwords":[7604,7644,10637,10721,12438,20139,20152],"fullWord":10721},{"subwords":[5799,6107,6110,9384,9389,9409,9416,10414,10415,10471,10481,10486,10536,10549,10550,10551,10677,10711,10716,10717,10719,10722,10723,15337,15354,15444,15445,15473,15475,15526,15549,15554,16847,16889,16890,17072,17095,17722,20004,20007,20070,20129,20132,20133,20134,20144,20146,20197],"fullWord":10723},{"subwords":[213,326,337,349,854,4891,9376,9455,10090,10119,10121,10122,10202,10502,10530,10531,10675,10724,14736,14776,14780,15399,15428],"fullWord":10724},{"subwords":[382,442,461,466,470,504,10136,10137,10138,10161,10725,10726,11173,11174,11186,11191,11330,15942,15973,17012,17154],"fullWord":10726},{"subwords":[442,461,487,10181,10727,10728,10741,10744,12560,12856,12857,15942,15956,15986,17354,17383],"fullWord":10728},{"subwords":[148,155,183,399,472,4438,4441,4466,4590,4601,4728,5114,5146,5147,5659,5756,10090,10093,10094,10324,10327,10378,10443,10730,10731,10780,12745,12752,12837,12845],"fullWord":10731},{"subwords":[183,191,396,399,472,817,4466,4516,4601,4607,4728,4810,5114,5115,5146,5588,5592,5756,5976,10090,10093,10097,10202,10324,10327,10355,10378,10443,10730,10732,10780,10878,10882,12680,12681,12752,12837,12839,12845,12948,12973,12979,12980,14736,14961,14968,15060,15078,15199,15561,15600,15603,15610,15621],"fullWord":10732},{"subwords":[183,186,399,472,4466,4595,4601,4728,5114,5146,5756,5765,5950,6230,6231,6406,6734,6740,6793,6861,6862,6874,6902,10090,10093,10324,10327,10333,10378,10443,10730,10734,10735,10780,12672,12752,12837,12845],"fullWord":10735},{"subwords":[245,252,399,472,817,828,5588,5592,5765,5950,5976,6308,6317,6328,6392,6464,6710,6734,6793,6803,6804,6861,6874,6940,6941,6955,7103,10324,10333,10355,10443,10734,10736,10882,12672,12680,12845,12948,12979,14968,15114,15610,15621],"fullWord":10736},{"subwords":[183,399,472,566,4466,4472,4475,4601,4728,4763,5114,5146,5163,5165,5658,5756,5782,10090,10093,10136,10145,10146,10324,10327,10378,10443,10730,10738,10739,10780,11107,11115,11173,11180,11265,11437,11438,11442,11464,11492,11831,11832,11833,11834,11865,11870,12752,12837,12845],"fullWord":10739},{"subwords":[183,215,399,472,477,605,675,680,4466,4492,4500,4601,4605,4728,4774,5114,5146,5172,5173,5176,5745,5746,5756,5865,5953,10090,10093,10095,10169,10174,10324,10327,10344,10378,10427,10443,10444,10730,10741,10742,10780,10781,10822,12229,12493,12494,12499,12504,12752,12837,12838,12845,12876],"fullWord":10742},{"subwords":[215,399,472,477,680,817,5588,5592,5595,5745,5914,5953,5976,10174,10324,10344,10355,10356,10443,10444,10741,10743,10822,10824,10876,10882,10886,12229,12319,12504,12548,12680,12845,12876,12948,12979,14821,14968,15200,15225,15238,15568,15610,15621],"fullWord":10743},{"subwords":[399,472,488,494,495,1009,5620,6055,8258,8276,8280,8319,8378,8381,8445,8461,8523,8725,8754,8770,8892,8896,10247,10257,10258,10324,10443,10460,10745,10746,10897,10898,12686,12690,12845,18370,18432,18541,18547,18697,18743,18744,18981,19017],"fullWord":10746},{"subwords":[399,407,472,473,487,1106,1114,10181,10285,10289,10324,10360,10443,10447,10471,10472,10488,10747,10888,10935,10940,12845,12848,13087,13088,13090,15942,15948,15966,15971,16076,16270,16274,17029,17030,17097,17307,17354,17359,17374,19923,19924,19925,19935,19967,19986,19987,20014,20250,20251,20252],"fullWord":10747},{"subwords":[1510,1560,1636,1938,1969,2042,2058,2059,2102,2106,4587,4618,4728,5114,5146,5632,5756,10378,10443,10748,10750,10753,10754,10780,12752,12837,12845],"fullWord":10750},{"subwords":[1510,1636,1969,2042,2072,2106,2205,2446,5632,10443,10748,10751,10753,10882,12845,12959,12979,14995,15576,15579,15586,15610,15621],"fullWord":10751},{"subwords":[1636,1648,1653,2004,2106,2110,2251,2563,5780,10443,10470,10748,10753,10759,10961,12845],"fullWord":10759},{"subwords":[93,399,442,472,2813,2826,3128,3132,3597,3701,3702,3708,3714,5650,5780,10072,10073,10324,10343,10443,10760,10761,10762,12845,12856],"fullWord":10762},{"subwords":[442,461,487,2813,2826,2833,3597,3600,3701,3702,3703,3714,10072,10181,10760,10761,10763,12856,12857,15880,15942,17316,17354],"fullWord":10763},{"subwords":[93,126,399,472,488,495,1009,2813,3052,3135,3495,3560,3597,3605,3701,3702,3708,3728,3965,3968,5620,5648,5650,6055,6057,10072,10073,10247,10324,10376,10443,10460,10760,10764,10897,12686,12732,12845,18333,18365,18370,18432,18541,18547,18981,19017],"fullWord":10764},{"subwords":[3538,3638,3644,3657,3697,3698,3701,3704,3708,4639,4651,4656,4728,5096,5099,5114,5144,5146,5650,5756,5778,10378,10416,10443,10760,10768,10769,10780,12752,12837,12845],"fullWord":10769},{"subwords":[3505,3697,3701,3708,3898,3906,5650,5778,10416,10443,10760,10768,10770,10882,12845,12965,12979,15021,15592,15593,15610,15621],"fullWord":10770},{"subwords":[3135,3560,3697,3701,3708,3728,3965,3968,5650,5778,6057,10376,10416,10443,10460,10760,10768,10771,10897,12845,18981,19010,19017],"fullWord":10771},{"subwords":[3553,3701,3864,3984,4047,4049,4302,10760,10768,10773,10864,10917,10969,13984,14016,14056,14077,14435],"fullWord":10773},{"subwords":[3538,3638,3644,3657,3701,3704,3708,3826,3827,3841,3842,4639,4656,4728,5096,5114,5144,5146,5650,5756,10378,10443,10760,10774,10775,10780,10833,12752,12837,12845,12846],"fullWord":10775},{"subwords":[3555,3701,3708,3709,3826,3841,3847,3860,5650,6023,10443,10447,10760,10774,10776,10777,10833,10854,10855,10888,12845,12846,12847,12848,13024,16298,17097,17316,17354,17359,17370],"fullWord":10776},{"subwords":[3560,3564,3569,3570,3701,3728,3729,3958,3965,3971,4238,4241,4289,4291,4375,4394,10760,10778,10779,10896,10897,10901,10905,10929,10931,11044,13055,13059,13082,16205,16212,16265,17113,17147,17316,17354,17435,17442,19605],"fullWord":10779},{"subwords":[4728,5107,5114,5123,5125,5146,5147,5718,5756,7477,7478,7525,7782,7801,10378,10398,10443,10780,10783,10784,10793,10796,12745,12752,12792,12793,12837,12845],"fullWord":10784},{"subwords":[4728,4810,5114,5115,5123,5125,5146,5351,5718,5756,5988,5989,7477,7478,7525,7782,7788,7801,7803,7855,7856,10378,10398,10443,10780,10783,10785,10793,10796,10878,10882,12752,12792,12793,12794,12798,12837,12839,12845,12979,15060,15078,15141,15600,15603,15610,15621],"fullWord":10785},{"subwords":[4728,4826,5114,5117,5123,5125,5127,5139,5146,5148,5221,5223,5718,5721,5756,5760,7460,7477,7478,7481,7486,7525,7782,7785,7790,7801,7804,10378,10398,10412,10443,10447,10780,10782,10783,10786,10793,10796,10797,10811,10888,12752,12755,12792,12793,12796,12837,12844,12845,12848,17044,17097,17099,17323,17354,17357,17359,17360],"fullWord":10786},{"subwords":[4701,4728,4736,5114,5146,5161,5234,5237,5705,5756,5765,5950,6406,6443,6740,6793,6874,6902,10378,10394,10443,10460,10780,10788,10789,10897,12752,12785,12837,12845,18981,18983,19016,19017],"fullWord":10789},{"subwords":[5705,5765,5950,6443,6495,6793,6807,6874,6940,6955,6982,6983,7073,7103,10394,10443,10460,10788,10790,10882,10897,12785,12787,12845,12979,13008,15114,15135,15312,15610,15621,15691,15694,15748,18981,19017,19093,19101,19243],"fullWord":10790},{"subwords":[299,304,478,487,629,630,7293,7316,7361,7364,7396,7660,7764,7767,10109,10115,10181,10741,10744,10793,10794,10795,10811,10826,10831,12230,12233,12509,12512,12560,15910,15921,15942,15956,15986,16001,17003,17014,17099,17100,17211,17354,17383,17389],"fullWord":10795},{"subwords":[4728,5114,5123,5125,5135,5146,5709,5718,5756,7477,7478,7522,7525,7782,7801,10378,10398,10443,10780,10783,10793,10796,10798,12752,12792,12793,12837,12845],"fullWord":10798},{"subwords":[5709,5718,5988,5989,7477,7522,7525,7788,7855,7858,8043,10398,10443,10793,10796,10799,10882,12792,12794,12798,12845,12979,15141,15610,15621],"fullWord":10799},{"subwords":[299,300,337,7267,7293,7361,7578,7585,7764,10109,10793,10800,10803,12812],"fullWord":10800},{"subwords":[5709,5718,7477,7522,7525,7578,10398,10414,10443,10536,10793,10796,10801,12792,12812,12845],"fullWord":10801},{"subwords":[3171,3541,3543,3665,3670,3685,3688,3701,10760,10767,10793,10804,10805,10811,12812,12822,16178,16179,16769,16837,17099,17316,17350,17354,17364],"fullWord":10805},{"subwords":[5718,5988,5989,7477,7525,7622,7788,7855,9384,10398,10414,10443,10536,10549,10562,10677,10793,10796,10806,10882,12792,12794,12798,12812,12816,12845,12979,12992,12995,15141,15246,15444,15461,15473,15610,15617,15621],"fullWord":10806},{"subwords":[7590,7595,7810,7895,9152,9157,10583,10793,10807,10813,12812,12824,21167],"fullWord":10807},{"subwords":[299,7293,7317,7361,7693,7703,7764,9475,9487,9618,10109,10136,10738,10793,10808,11127,11173,11265],"fullWord":10808},{"subwords":[298,299,1155,1164,7293,7361,7447,7718,7764,7895,10109,10292,10304,10793,10812,10813,10942,13114,20326,20493,21079,21082,21162,21202,21207],"fullWord":10812},{"subwords":[9384,10414,10443,10460,10536,10549,10677,10691,10694,10695,10705,10816,10882,10897,12812,12816,12845,12979,12992,13008,15197,15246,15312,15444,15473,15504,15542,15610,15617,15621,15691,15694,15748,18844,18847,18863,18866,18868,18941,18945,18981,19002,19004,19017,19093,19101,19292],"fullWord":10816},{"subwords":[4728,4744,5114,5146,5150,5756,5780,10378,10443,10780,10817,10818,12752,12837,12845],"fullWord":10818},{"subwords":[5780,10443,10817,10819,10882,12845,12979,15610,15621,15623],"fullWord":10819},{"subwords":[10817,10820,10833,10849,10864,14056,14080,14086,14121],"fullWord":10820},{"subwords":[5172,10821,10833,10845,12493,12521,12528,12541,12837],"fullWord":10821},{"subwords":[5780,5953,10443,10444,10495,10822,10823,11065,12504,12520,12845,12876,12882,21110,21120,21183],"fullWord":10823},{"subwords":[5914,5916,5918,5953,5955,6000,6004,10433,10443,10444,10447,10822,10824,10825,10882,10883,10886,10888,10889,12504,12505,12506,12548,12556,12560,12561,12845,12848,12876,12879,12979,12982,13007,15238,15610,15611,15621,15622,15676,16391,17097,17272,17354,17359,17383,17419,17420],"fullWord":10825},{"subwords":[4728,4774,5114,5123,5125,5146,5172,5176,5179,5718,5756,5865,5953,7477,7478,7493,7525,7680,7782,7801,7802,7815,10378,10398,10427,10443,10444,10780,10781,10783,10793,10796,10822,10826,10827,12493,12499,12504,12509,12752,12792,12793,12837,12838,12845,12876],"fullWord":10827},{"subwords":[5718,5894,5914,5953,5988,5989,7477,7493,7525,7680,7788,7815,7816,7855,10398,10443,10444,10793,10796,10822,10824,10826,10828,10882,10886,12347,12504,12509,12548,12792,12794,12798,12845,12876,12979,15141,15238,15610,15621],"fullWord":10828},{"subwords":[5718,5721,5918,5953,5955,7477,7486,7493,7511,7525,7680,7681,7790,7815,10398,10412,10433,10443,10444,10447,10793,10796,10797,10811,10822,10826,10829,10831,10888,12504,12505,12506,12509,12512,12560,12561,12792,12796,12845,12848,12876,12879,16345,17097,17099,17354,17359,17383,17389],"fullWord":10829},{"subwords":[7810,7895,10793,10813,10826,10830,12509,12882,21183],"fullWord":10830},{"subwords":[5718,5953,7477,7493,7525,7680,7722,7759,7815,8151,10398,10443,10444,10470,10793,10796,10822,10826,10832,10915,10981,10982,11008,11012,11013,12504,12509,12792,12845,12876],"fullWord":10832},{"subwords":[479,6861,6930,8264,8276,8818,10734,10833,10834,10835,12672,12809,12895],"fullWord":10835},{"subwords":[479,487,6861,6863,6930,6932,10181,10734,10737,10833,10834,10836,10837,10854,12672,12674,13024,15942,17334,17354,17370],"fullWord":10836},{"subwords":[4728,5114,5146,5756,5778,10378,10416,10443,10780,10833,10838,10839,12752,12837,12845,12846],"fullWord":10839},{"subwords":[5778,10416,10443,10833,10838,10840,10882,12845,12846,12979,15610,15621,15648],"fullWord":10840},{"subwords":[10833,10838,10841,10849,10864,10917,14056,14077,14086,14121],"fullWord":10841},{"subwords":[4728,4763,5114,5146,5163,5165,5193,5756,5782,10378,10443,10780,10833,10842,10843,11492,11831,11833,11834,11844,11865,11870,11921,11923,11926,12752,12837,12845,12846],"fullWord":10843},{"subwords":[5953,10443,10444,10495,10822,10833,10845,10846,10848,11065,12504,12521,12845,12846,12876,12882,21120,21183],"fullWord":10846},{"subwords":[4728,5114,5146,5200,5756,10378,10443,10780,10833,10849,10850,10864,10865,10866,12752,12837,12845,12846,12916,13478,13950,13967,14020,14056,14061,14063,14086,14117,14121,14122],"fullWord":10850},{"subwords":[10443,10833,10849,10851,10864,10865,10867,10882,12845,12846,12916,12979,13577,14056,14061,14064,14086,14121,14127,14147,14262,14350,14365,15248,15610,15621,15663],"fullWord":10851},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5756,5760,10378,10443,10447,10780,10782,10833,10854,10855,10856,10888,12752,12755,12837,12844,12845,12846,12847,12848,12894,13024,17044,17097,17323,17354,17357,17359,17360,17370,17371],"fullWord":10856},{"subwords":[5918,5953,5955,10433,10443,10444,10447,10822,10833,10845,10847,10854,10855,10857,10888,12504,12505,12506,12521,12543,12560,12561,12845,12846,12847,12848,12876,12879,13024,17097,17354,17359,17370,17383,17397],"fullWord":10857},{"subwords":[6004,10443,10447,10833,10854,10855,10858,10882,10883,10888,10889,12845,12846,12847,12848,12979,12982,13007,13024,15610,15611,15621,15622,15676,17097,17354,17359,17370,17419,17420],"fullWord":10858},{"subwords":[6039,10443,10447,10453,10787,10833,10854,10855,10859,10888,10891,10893,12845,12846,12847,12848,13024,17097,17098,17354,17359,17363,17370,17372,17434],"fullWord":10859},{"subwords":[4728,5114,5146,5161,5234,5237,5756,10378,10443,10460,10780,10833,10860,10861,10897,12752,12837,12845,12846,18981,18983,19016,19017,19018,19060,19062,19063],"fullWord":10861},{"subwords":[10443,10460,10833,10860,10862,10882,10897,12845,12846,12979,13008,15312,15328,15610,15621,15659,15691,15694,15697,15748,18981,19017,19060,19062,19064,19093,19101,19106],"fullWord":10862},{"subwords":[6004,6033,10443,10447,10864,10865,10867,10868,10869,10874,10882,10883,10888,10889,12845,12848,12916,12925,12936,12979,12982,13007,13577,13607,14056,14061,14064,14065,14066,14087,14147,14149,14166,14168,14262,14281,14350,14365,14366,14383,14384,14403,15248,15272,15305,15610,15611,15621,15622,15663,15668,15676,17097,17104,17105,17107,17354,17359,17406,17419,17420,17638],"fullWord":10868},{"subwords":[7604,7612,7708,9360,10637,10641,10652,10663,10665,10793,10814,10826,10864,10870,12438,12453,12509,12812,13721,13765,13773,13809,14032,14056,14069,14107],"fullWord":10870},{"subwords":[4728,5114,5146,5200,5756,10378,10443,10780,10864,10865,10866,10871,12752,12837,12845,12916,12933,13478,13569,13950,13967,13971,14020,14056,14061,14063,14130,14131,14237],"fullWord":10871},{"subwords":[10443,10864,10865,10867,10872,10882,12845,12916,12933,12979,13569,13577,13971,14056,14061,14064,14130,14131,14147,14262,14278,14350,14365,14379,14380,15248,15610,15621,15663],"fullWord":10872},{"subwords":[488,495,1093,10875,10897,10929,12686,13059,14589,14609,14630,14694,14701,18432,18508,19605],"fullWord":10875},{"subwords":[487,905,909,10181,10741,10744,10876,10877,10886,12548,12560,12680,12683,12948,12950,13007,14821,15568,15569,15673,15942,15956,15986,17229,17303,17354,17356,17383,17384],"fullWord":10877},{"subwords":[4728,4810,5114,5115,5146,5147,5756,10378,10443,10780,10878,10879,10882,12745,12746,12752,12837,12839,12845,12979,15060,15078,15600,15603,15610,15621],"fullWord":10879},{"subwords":[5150,5155,5220,5389,5391,5430,10878,10880,10887,12767,12837,15600,15623,21154],"fullWord":10880},{"subwords":[6004,9384,9389,9409,9416,10414,10415,10443,10447,10536,10549,10550,10551,10677,10882,10883,10884,10885,10888,10889,12812,12816,12817,12822,12845,12848,12979,12982,12992,12993,13007,13022,15246,15444,15445,15473,15475,15526,15610,15611,15617,15619,15621,15622,15676,16837,16889,16890,17072,17097,17350,17354,17359,17364,17419,17420,17722],"fullWord":10884},{"subwords":[6004,6039,10443,10447,10453,10458,10787,10882,10883,10888,10889,10890,10891,10893,12845,12848,12979,12982,13007,15610,15611,15621,15622,15676,15679,17097,17098,17354,17359,17363,17419,17420,17421,17424,17434],"fullWord":10890},{"subwords":[7604,7611,9307,9360,9366,10637,10641,10642,10652,10653,10654,10663,10664,10793,10811,10814,10815,10826,10831,10892,12438,12442,12509,12512,12560,12812,12822,16815,16837,16858,16866,17083,17099,17350,17354,17364,17369,17383,17389],"fullWord":10892},{"subwords":[6039,10443,10447,10453,10787,10888,10891,10893,10894,12845,12848,17097,17098,17354,17359,17363,17434],"fullWord":10894},{"subwords":[9325,9334,9335,9360,10652,10656,10663,10691,10814,10833,10845,10860,10897,10899,12438,12463,12521,12574,12812,12850,12887,18863,18894,19002,19036,19060,19062],"fullWord":10899},{"subwords":[4728,5114,5146,5161,5234,5237,5248,5756,10378,10443,10460,10780,10897,10902,12752,12837,12845,18981,18983,19016,19017,19131,19134,19135],"fullWord":10902},{"subwords":[10833,10854,10860,10863,10896,10897,10900,10901,10903,10904,13024,13043,17113,17354,17370,17399,17435,17917,19060,19062,19065,19066,19073,19130,19131,19143,19144],"fullWord":10904},{"subwords":[4728,4774,5114,5146,5172,5176,5471,5472,5507,5511,5523,5756,5865,5953,10378,10427,10443,10444,10470,10780,10781,10822,10906,10907,11008,12493,12499,12502,12504,12624,12752,12837,12838,12845,12876,19664,19717],"fullWord":10907},{"subwords":[4728,4810,5114,5115,5146,5260,5471,5472,5523,5756,10378,10443,10470,10780,10878,10882,10906,10908,10922,11029,11030,12752,12837,12839,12845,12979,13051,15060,15078,15600,15603,15610,15621,15706,15773,15777,15778,15800,15801],"fullWord":10908},{"subwords":[5150,5155,5492,5495,5498,5523,10906,10909,12767,12837,21154,21193],"fullWord":10909},{"subwords":[9369,9416,10414,10415,10443,10447,10470,10536,10551,10552,10888,10911,10912,10913,10914,10925,12812,12822,12845,12848,13048,13053,16402,16837,17097,17128,17350,17354,17359,17364,17442,18066,18083,19876],"fullWord":10912},{"subwords":[9369,9416,10414,10415,10443,10447,10470,10536,10551,10552,10888,10911,10912,10913,10914,10925,12812,12822,12845,12848,13048,13053,16402,16837,17097,17128,17350,17354,17359,17364,17442,18066,18083,19876],"fullWord":10914},{"subwords":[5718,5953,7477,7493,7525,7680,7722,7759,7815,8151,10398,10443,10444,10470,10793,10796,10822,10826,10832,10915,10981,10982,11008,11012,11013,12504,12509,12792,12845,12876],"fullWord":10915},{"subwords":[7759,7895,8151,8180,10793,10813,10826,10916,10981,11012,11024,12509,12882,19590,21183,21193,21194],"fullWord":10916},{"subwords":[4728,5114,5146,5200,5471,5472,5523,5525,5526,5533,5756,10378,10443,10470,10780,10864,10865,10866,10906,10917,10918,10919,12752,12837,12845,12916,13478,13950,13967,14020,14056,14061,14063,14438,14454,14455],"fullWord":10919},{"subwords":[6033,10443,10447,10470,10864,10865,10869,10874,10888,10917,10918,10920,10921,10925,12845,12848,12916,12925,12936,12945,13053,13607,14003,14056,14061,14066,14087,14166,14454,14458,14472,14551,16402,17097,17104,17105,17128,17354,17359,17406,17442,17447,18066,18135,18136,19825,19876],"fullWord":10920},{"subwords":[4728,4826,4849,5114,5117,5146,5148,5221,5223,5263,5471,5472,5476,5478,5496,5523,5524,5756,5760,10378,10443,10447,10470,10780,10782,10888,10906,10925,10926,12752,12755,12837,12844,12845,12848,13053,16402,17044,17097,17128,17129,17323,17354,17357,17359,17360,17442,17443,18066,18067,19876,19877],"fullWord":10926},{"subwords":[6039,10443,10447,10453,10470,10787,10888,10891,10893,10925,10927,12845,12848,13053,13054,16402,17097,17098,17128,17130,17354,17359,17363,17434,17442,17444,17457,18066,18073,19876,19882],"fullWord":10927},{"subwords":[4728,5114,5146,5161,5234,5237,5471,5472,5479,5523,5756,10378,10443,10460,10470,10780,10897,10906,10929,10930,11050,11052,12752,12837,12845,13059,13065,18981,18983,19016,19017,19605],"fullWord":10930},{"subwords":[10443,10470,10471,10488,10882,10922,10932,10933,10935,10938,11029,12845,12979,13051,13095,13107,15337,15610,15621,15706,15728,15777,15800,20022,20250,20251],"fullWord":10932},{"subwords":[10443,10470,10471,10488,10882,10922,10932,10933,10935,10938,11029,12845,12979,13051,13095,13107,15337,15610,15621,15706,15728,15777,15800,20022,20250,20251],"fullWord":10933},{"subwords":[269,299,399,472,1106,1115,5718,7293,7298,7361,7439,7440,7477,7525,7714,7764,7889,10109,10285,10324,10398,10443,10471,10472,10488,10793,10796,10934,10935,12792,12845,13087,13088,19923,19924,19986,20014,20250,20251,20253],"fullWord":10934},{"subwords":[5780,10443,10471,10488,10489,10495,10935,10937,11065,12845,20250,20251,20254,21110],"fullWord":10937},{"subwords":[6004,10443,10447,10471,10488,10882,10883,10888,10889,10935,10938,10939,10940,12845,12848,12979,12982,13007,13095,13099,15337,15354,15610,15611,15621,15622,15676,15728,15732,16453,17097,17354,17359,17374,17376,17419,17420,20070,20077,20250,20251,20252],"fullWord":10939},{"subwords":[7604,7889,9360,10637,10641,10652,10663,10793,10814,10826,10941,12438,12509,12812,20152,20164,20171,20250,20262],"fullWord":10941},{"subwords":[1996,2002,2113,2160,2271,2280,2300,2302,10748,10756,10833,10942,10943,12712,13114,20903,20917,20923,21202,21207],"fullWord":10943},{"subwords":[6004,10443,10447,10882,10883,10888,10889,10942,10945,10946,10952,12845,12848,12979,12982,13007,13110,13112,13114,13118,15302,15610,15611,15621,15622,15676,15734,15739,15740,15744,16445,16475,17059,17097,17121,17123,17354,17359,17419,17420,17464,17466,18272,20875,20877,20933,20947],"fullWord":10946},{"subwords":[10443,10495,10882,10887,10942,10945,10947,11065,11074,12845,12979,13110,13114,13145,15201,15610,15621,15734,15739,15866,20875,20933,21010,21016,21138,21189,21202,21207,21209],"fullWord":10947},{"subwords":[10443,10447,10459,10460,10465,10888,10896,10897,10901,10942,10948,10952,12845,12848,13110,13112,13114,13115,13116,13118,16457,16475,17059,17097,17113,17121,17354,17359,17435,17464,17850,17903,17941,18981,18985,19017,19166,19170,19171,19181,19548,19550,20575,20578,20591,20594,20596,20875,20877,20958],"fullWord":10948},{"subwords":[7604,7718,7892,9360,10637,10641,10652,10663,10793,10814,10826,10942,10949,12438,12509,12606,12812,13113,13114,13119,20742,20774,20790,20804,20897],"fullWord":10949},{"subwords":[8678,8739,8920,8925,8929,8930,10942,10950,10952,12810,12812,12822,13114,13117,13118,16716,16837,17121,17350,17354,17364,17464,20689,20832],"fullWord":10950},{"subwords":[7604,9360,10637,10641,10652,10663,10793,10814,10826,10953,10955,12438,12474,12509,12812],"fullWord":10955},{"subwords":[1510,1636,2004,2007,2021,2022,2505,2550,2610,2611,2630,5632,10470,10960,10961,11029,14995,15749,15753,15755,15761,15777,15800,19840],"fullWord":10960},{"subwords":[3135,3145,3584,4268,4289,4300,4375,4376,5856,5861,6057,10376,10437,10460,10470,10963,11008,11010,11050,12374,12659,18607,19434,19438,19605,19652,19719],"fullWord":10963},{"subwords":[3584,4213,4268,4312,4326,4341,5654,5856,5861,10470,10964,10974,11008,11029,15021,15777,15800,15821,15822,19597,19652,19866],"fullWord":10964},{"subwords":[3120,3135,3429,3430,3584,4268,4289,4375,4376,4384,6057,9079,10376,10414,10460,10470,10518,10536,10552,10553,10691,10694,10968,11050,18823,18844,18863,18866,19605,19897],"fullWord":10968},{"subwords":[3584,3585,4263,4268,4269,4278,4639,4651,4728,5455,5457,5471,5472,5489,5756,5778,10378,10416,10470,10969,10970,10987,19595],"fullWord":10970},{"subwords":[3120,3584,4268,4278,5778,9079,9150,10414,10416,10470,10518,10525,10536,10552,10566,10969,10971,10987,19595],"fullWord":10971},{"subwords":[3584,3586,4213,4224,4268,4271,4312,4326,4330,4341,4345,4350,4351,5654,5655,5656,6023,10470,10965,10974,10975,11029,11033,15021,15048,15777,15782,15800,15804,15840,16298,17128,17141,18056,18066,18071,18150,19597,19598,19876,19880],"fullWord":10975},{"subwords":[4947,5485,7586,8117,9449,10530,10977,10981,19585,20742,20751],"fullWord":10977},{"subwords":[4728,5471,5472,5481,5482,5484,5756,5765,6406,6501,6740,6821,6824,6825,7153,10378,10470,10978,10979],"fullWord":10979},{"subwords":[4728,5471,5472,5485,5709,5756,7477,7478,7722,7723,10378,10398,10470,10981,10982,10984],"fullWord":10984},{"subwords":[5709,5988,7477,7722,7724,8083,8162,10398,10470,10981,10982,10985,11029,15141,15777,15790,15800,19855],"fullWord":10985},{"subwords":[4728,4744,5471,5472,5492,5756,5780,10378,10470,10988,10989],"fullWord":10989},{"subwords":[385,393,497,586,869,920,1324,1366,2021,2308,2567,2610,2630,2637,10061,10136,10139,10990,11173,11276,11303,11387,12141,14808,15749,15806,15807,19617,19619,19837,19840],"fullWord":10990},{"subwords":[1636,1700,2004,2007,2021,2567,2610,2630,5782,5846,10425,10470,10961,10991,11029,11539,12110,14995,15202,15749,15755,15761,15777,15800,15806,15809,19612,19614,19840],"fullWord":10991},{"subwords":[5782,5784,5845,5846,5847,5918,10433,10470,10992,10993,11008,11009,11512,11524,11534,11535,12110,12112,12152,17128,17135,18066,18103,18117,19876],"fullWord":10993},{"subwords":[337,341,497,498,500,586,10120,10136,10584,10585,10605,10661,10994,11001,11148,11156,11173,11182,11213,11387,11615,11659,11662,11697,12238,12244,12438,12443,19600],"fullWord":10994},{"subwords":[4728,5471,5472,5503,5525,5526,5533,5756,5782,5846,10378,10470,10957,10995,10996,11492,12091,12110,12111,13478,13950,13988,13991,13992,14438,14454,14455,19624,19625],"fullWord":10996},{"subwords":[5782,5846,10470,10957,10992,10995,10997,11008,11512,11534,12110,13539,13954,13988,13991,14454,14484,19624],"fullWord":10997},{"subwords":[5782,5846,10425,10470,10957,10995,10998,11029,11539,12110,13577,13593,13602,13988,13991,14262,14454,14456,14518,14536,15202,15248,15747,15777,15800,15806,15815,15816,19624],"fullWord":10998},{"subwords":[111,716,2813,2869,3071,3100,3459,3487,4400,10072,10089,10304,10976,11001,11002,11024,12311,19600,19716,21215],"fullWord":11002},{"subwords":[712,905,11001,11003,11004,11005,14821,15821,15832,15942,15986,17141,17229,18117,19600,19602,19603,19837,19866,19867,19868,19871],"fullWord":11004},{"subwords":[399,488,693,694,1009,1074,5620,5627,5745,6055,6074,10174,10247,10251,10324,10344,10349,10437,10460,10470,11001,11006,11008,11010,11050,12229,12292,12300,12325,12374,12659,18370,18408,18508,18541,18547,18607,19434,19435,19438,19600,19601,19605,19719],"fullWord":11006},{"subwords":[5918,10433,10437,10459,10460,10465,10470,11008,11009,11010,11011,11044,11050,11053,12368,12374,12376,12659,12663,16399,16457,17128,17147,18005,18066,18074,18117,18607,18624,19422,19434,19438,19442,19452,19605,19719,19763,19876],"fullWord":11011},{"subwords":[4728,4774,5471,5472,5485,5507,5511,5513,5756,5865,7477,7478,7493,7680,7722,7723,7759,8131,8151,10378,10398,10427,10470,10981,10982,11008,11012,11013,11014,12624,12629,19717],"fullWord":11014},{"subwords":[5691,7467,7477,7493,7496,7678,7680,7722,7759,8151,10383,10398,10470,10981,10982,11008,11012,11013,11015,12339],"fullWord":11015},{"subwords":[5894,5988,7477,7493,7680,7722,7724,7759,8083,8151,10398,10470,10981,10982,11008,11012,11013,11016,11029,15141,15777,15790,15800,15821,15822,15824,19855,19866],"fullWord":11016},{"subwords":[5918,7477,7486,7493,7511,7518,7680,7681,7722,7726,7759,7760,8151,8160,8161,10398,10412,10433,10470,10981,10982,10983,10986,11008,11009,11012,11013,11017,11018,12348,17128,17131,17139,17292,18066,18117,18125,19876],"fullWord":11017},{"subwords":[5996,9344,9384,10414,10470,10536,10544,10549,10552,10625,10632,10677,11008,11019,11029,12438,12439,15175,15444,15473,15777,15795,15800,15821,15822,19864,19866],"fullWord":11019},{"subwords":[5918,9307,9416,10414,10415,10433,10470,10536,10544,10548,10551,10552,10625,10634,10654,11008,11009,11020,12438,12439,12442,16858,16860,17128,18066,18083,18117,19876],"fullWord":11020},{"subwords":[5778,9836,9855,10004,10416,10470,10987,11008,11021,11022,11029,11035,12640,15777,15800,15821,15822,19595,19866],"fullWord":11022},{"subwords":[10414,10470,10536,10544,10552,10625,10635,10665,11008,11025,11026,12438,12439,12453,13539,13705,13743,13765,13769,14454,14484,19740],"fullWord":11026},{"subwords":[9307,10654,10665,10672,10681,11025,11027,12438,12442,12453,12459,13765,13798,13871,14003,14421,14484,14500,14551,16858,16883,17088,17248,17580,17683,18083,18117,18135,19825],"fullWord":11027},{"subwords":[6008,6016,10470,11029,11031,11032,11033,15777,15780,15781,15782,15800,15802,15803,15804,15840,17128,17141,18066,18071,18150,18152,19876,19880],"fullWord":11032},{"subwords":[7604,7622,7759,8015,8151,10637,10981,11012,11034,12438,15461,15494,15790,15795,15798,15805,15821,15824,19585,19748,19866],"fullWord":11034},{"subwords":[4728,4810,5355,5471,5472,5489,5756,5778,10378,10416,10470,10987,11029,11030,11035,11036,15060,15773,15777,15778,15800,15801,19595],"fullWord":11036},{"subwords":[5778,6008,10416,10470,10987,11029,11031,11035,11037,15777,15780,15800,15802,19595],"fullWord":11037},{"subwords":[4728,4826,4849,5471,5472,5476,5478,5496,5756,5760,8509,8945,8946,8947,10378,10470,11039,11040,16574,16581,16746,17044,17128,17129,18066,18067,19592,19876,19877],"fullWord":11040},{"subwords":[8552,8584,8934,8945,8947,9004,9007,10470,11029,11033,11039,11041,15777,15782,15800,15804,15840,15842,16574,16746,17128,17141,18066,18071,18150,19592,19876,19880,19883],"fullWord":11041},{"subwords":[6039,8945,8947,10453,10470,11039,11042,16574,16609,16746,16747,17128,17130,17145,18066,18073,19592,19876,19882],"fullWord":11042},{"subwords":[8964,8969,11039,11043,16746,16758,17149,18099,19592],"fullWord":11043},{"subwords":[4728,4826,4849,5471,5472,5476,5478,5479,5480,5496,5548,5756,5760,10378,10459,10460,10465,10470,11044,11045,11050,11052,11053,16457,17044,17128,17129,17147,17999,18066,18067,18074,18575,19422,19605,19876,19877],"fullWord":11045},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":11046},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":11047},{"subwords":[399,442,488,1009,5620,5627,5780,6055,10247,10324,10343,10460,10470,11050,11051,18370,18381,18508,18541,18547,18591,19425,19605],"fullWord":11051},{"subwords":[5782,5846,10460,10470,11050,11054,11502,11574,12110,12184,12198,18595,19605],"fullWord":11054},{"subwords":[8552,8945,9004,9012,9014,9026,10460,10470,11029,11050,11055,15312,15748,15777,15800,15858,15859,18697,18789,19356,19605],"fullWord":11055},{"subwords":[7596,7604,7637,7690,7733,7759,8122,8151,8175,9325,9334,10637,10656,10691,10981,11012,11056,12438,12463,12659,18863,18894,18901,19418,19434,19585,19605,19701,19722,19779],"fullWord":11056},{"subwords":[9447,10686,10691,10707,11044,11057,16840,16907,16917,17093,17147,17867,18083,18085,18863,18876,18881,18947,18950,18964,19493,19498,19605],"fullWord":11057},{"subwords":[3119,5691,5693,5694,5790,6023,6189,6198,10383,10392,10451,10495,10496,11061,11062,11065,11066,16298,16319,17149,21130],"fullWord":11062},{"subwords":[3584,4268,4293,4415,5782,5785,5846,10470,10495,10976,11063,11065,12110,12113,21222],"fullWord":11063},{"subwords":[5691,5694,6189,8483,8488,8607,10373,10383,10384,10495,11061,11064,11065],"fullWord":11064},{"subwords":[7604,7611,9293,9307,10637,10642,10654,10662,11067,11068,11082,11084,12438,12442,16815,16858,16866,16872,17083,17149,21144,21145],"fullWord":11068},{"subwords":[10957,11069,11070,12079,13681,14009,16758,17149,17697,18276],"fullWord":11070},{"subwords":[5918,10433,10494,10495,10496,11065,11066,11071,11072,16483,16499,17149,18287,21120,21122,21130],"fullWord":11072},{"subwords":[227,399,405,488,491,817,911,919,1009,1196,5588,5592,5594,5620,5976,5982,6055,10247,10254,10304,10306,10324,10355,10359,10460,10495,11065,11073,11074,14898,14901,14939,14968,14974,15183,15201,15312,15748,15864,15866,18370,18372,18449,18453,18541,18547,18554,18558,19231,19257,19377,19555,19570,21050,21071,21097,21099,21135],"fullWord":11073},{"subwords":[4232,9101,9409,11076,11077,16178,16179,16769,16889,17149,17722,21212],"fullWord":11077},{"subwords":[9409,9422,10584,10618,11078,11659,11685,11755,15480,15489,15490,16889,17076,17082,17149,17722,21212],"fullWord":11078},{"subwords":[9409,9447,10686,10691,10707,11079,16840,16843,16889,16907,17093,17149,17722,17881,18018,18027,18863,18947,19377,21212],"fullWord":11079},{"subwords":[5918,9293,9307,9416,10414,10415,10433,10495,10496,10536,10544,10548,10551,10625,10634,10636,10654,10655,10662,11065,11066,11082,11083,12438,12439,12442,16858,16860,17149,18287,21120,21122,21130,21144,21145],"fullWord":11083},{"subwords":[7604,7611,9293,9307,10637,10642,10654,10662,11067,11068,11082,11084,12438,12442,16815,16858,16866,16872,17083,17149,21144,21145],"fullWord":11084},{"subwords":[9293,9307,10654,10662,11082,11085,12438,12442,16858,16881,16903,17149,21144,21145],"fullWord":11085},{"subwords":[504,1134,2848,2868,3017,3096,3099,11086,11087,11088,11105,11330,11399,11400,15880,15973,16089,16129,18189,20302,20449],"fullWord":11088},{"subwords":[93,96,112,113,121,123,796,810,817,825,869,883,905,906,2848,2853,2868,2941,2954,2960,3001,3021,4065,4068,4110,4111,5588,5599,5845,5976,5977,6023,11086,11089,11091,11092,11093,11105,11276,11281,11284,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,12080,14717,14722,14808,14820,14881,14975,14978,15021,15048,15202,15224,15880,15973,15978,16129,16142,16145,16221,16227,16270,16278,16286,16298,16419,17161],"fullWord":11092},{"subwords":[325,932,2848,2868,3025,3189,3193,3201,3225,3336,3732,3733,3734,3944,8290,8296,8362,8714,11086,11094,11095,11096,11097,11105,11265,11330,11335,11813,11824,11825,12806,12808,12810,12872,15880,15973,16129,16172,16531,16664,17316,17378],"fullWord":11096},{"subwords":[110,287,341,2848,2869,3402,7283,7317,7331,7334,7604,9207,9208,11086,11098,11127,11132,11133,11156,11213,11234,11617,11649,11697,11711,12230,12244,12443],"fullWord":11098},{"subwords":[118,796,809,869,2848,2869,2941,2985,3732,3733,3777,3911,3913,4065,11086,11102,11103,11213,11243,11265,11276,11281,11810,11891,11977,12244,12270,12271,12522,12548,12550,12551,12680,12965,12966,14808,14821,15564,15568,15592,15627,15628],"fullWord":11103},{"subwords":[796,809,810,869,883,905,2848,2868,2941,2985,2986,3001,3732,3733,3734,3911,3912,4065,4068,11086,11102,11104,11105,11265,11276,11281,11284,11314,11330,11813,12680,12683,12872,12965,12966,12967,12971,13007,13018,14808,14820,15564,15567,15592,15599,15627,15638,15673,15880,15973,16129,16142,16221,17303,17316,17378],"fullWord":11104},{"subwords":[111,466,497,504,586,2813,2835,2848,3071,3453,4293,10072,10136,10137,11086,11106,11173,11174,11387],"fullWord":11106},{"subwords":[144,504,4472,4475,5658,11107,11108,11109,11115,11197,11437,11438],"fullWord":11109},{"subwords":[144,145,200,504,4472,4489,11107,11108,11110,11123,11197,11198,11330,15893,15973],"fullWord":11110},{"subwords":[144,504,574,2766,2848,2859,2921,4472,4484,11086,11107,11111,11270,13154,13171],"fullWord":11111},{"subwords":[148,149,4438,4472,4475,4590,5658,5659,11107,11112,11115,11437,11438],"fullWord":11112},{"subwords":[148,176,528,529,605,4438,4472,4475,4479,4480,4492,4500,4590,4605,4757,4774,5658,5659,5865,11107,11113,11115,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":11113},{"subwords":[148,151,817,869,871,4438,4472,4475,4516,4517,4590,4607,4810,4818,4819,5318,5340,5342,5588,5658,5659,5976,11107,11114,11115,11120,11276,11286,11437,11438,11539,14736,14808,14961,14962,14975,15060,15202],"fullWord":11114},{"subwords":[144,175,504,596,605,4472,4479,4492,4493,11107,11108,11117,11197,11213,12244],"fullWord":11117},{"subwords":[176,528,529,605,4472,4475,4479,4492,4500,4605,4774,5658,5865,11107,11115,11118,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":11118},{"subwords":[144,145,200,504,869,883,905,4472,4489,5318,5319,5320,5321,11107,11119,11123,11276,11314,11330,14736,14751,14808,14820,15893,15973],"fullWord":11119},{"subwords":[200,817,825,869,871,883,905,906,4472,4475,4476,4489,4516,4520,4607,4611,4810,4818,4819,4821,4824,4826,5318,5321,5342,5343,5588,5599,5658,5845,5976,5977,11107,11115,11120,11121,11123,11276,11286,11287,11314,11315,11330,11333,11437,11438,11440,11453,11539,11560,14736,14751,14808,14820,14881,14882,14961,14965,14975,14978,15060,15087,15202,15224,15893,15973,15978,16270,16278,16286,16419,17161],"fullWord":11121},{"subwords":[148,326,341,349,540,854,869,4438,4472,4896,4928,4971,5318,9376,11107,11122,11145,11276,11285,11626,14736,14776,14808,15428,15480],"fullWord":11122},{"subwords":[144,175,176,504,528,529,596,597,605,4472,4475,4479,4492,4493,4500,4605,4774,5658,5865,11107,11115,11124,11213,11218,11219,11437,11438,11446,11512,11516,12229,12244,12245,12246],"fullWord":11124},{"subwords":[341,347,504,536,555,945,9135,9422,11125,11126,11330,15973,16764],"fullWord":11126},{"subwords":[269,281,341,5709,7267,7269,7317,7323,7489,7578,9158,11127,11128,11130,11132,11437,11487,11649],"fullWord":11130},{"subwords":[299,300,1020,7267,7317,7416,7768,7874,11127,11131,11265,11361,11814,12010,12686,18342,18389,18432,18993,18994,19026],"fullWord":11131},{"subwords":[341,347,555,2848,2868,3171,3402,7317,7331,7342,7396,9422,11086,11105,11127,11132,11133,11134,11140,11330,11617,11618,11649,11654,11759,12081,15880,15910,15973,16116,16129,16178,16764,16769,16813],"fullWord":11134},{"subwords":[504,7317,7338,7339,7342,7396,11127,11135,11136,11140,11197,11198,11330,12081,15910,15911,15973],"fullWord":11136},{"subwords":[269,277,528,532,693,694,1009,5620,6055,6074,7317,7323,7416,7417,7489,7493,7512,7540,7745,11127,11128,11137,11213,11218,11223,11361,11362,11437,11446,11451,11456,11487,11512,11574,11575,12229,12230,12244,12245,12325,12374,18342,18389,18393,18408,18410,18541,18549,18595,18607],"fullWord":11137},{"subwords":[586,7317,7759,8095,8145,8151,11127,11138,11213,12104,12127,12230,12244],"fullWord":11138},{"subwords":[269,341,574,732,5956,7317,7323,7365,7366,7489,7602,7612,9158,9178,11127,11128,11132,11139,11270,11437,11487,11649,12078,13184,13439,13516,13705,13721,13758],"fullWord":11139},{"subwords":[269,315,586,1196,5627,5846,7317,7323,7330,7345,7447,7489,7545,8095,8145,8180,8186,11127,11128,11141,11408,11437,11487,12104,21051,21097],"fullWord":11141},{"subwords":[263,504,869,884,7317,7345,7375,7395,7447,7921,7961,8186,11127,11143,11276,11329,11408,11409,14758,14759,14808,14939,15864,21051],"fullWord":11143},{"subwords":[586,1020,1093,8290,8378,8892,8970,9026,11144,11265,11361,11369,11392,11814,12010,12018,12055,12686,12690,12806,13059,18389,18432,18508,18743,18759,18967,19026,19892],"fullWord":11144},{"subwords":[176,177,326,327,335,341,342,528,529,540,541,605,4472,4475,4479,4492,4500,4605,4714,4774,4780,4896,4898,4935,4938,4971,4972,4985,4988,5658,5865,9103,9109,11107,11115,11145,11146,11156,11157,11213,11218,11219,11437,11438,11446,11467,11469,11489,11512,11516,11626,11645,11697,11702,11706,11707,12229,12244,12245,12246,12443],"fullWord":11146},{"subwords":[326,327,337,338,341,342,399,540,541,4466,4472,4475,4601,4714,4728,4739,4891,4896,4935,4938,4971,4972,5658,5756,5782,9103,9104,9109,9117,10090,10093,10119,10136,10145,10146,10324,10327,10378,10414,10530,10536,10537,10584,10585,10595,10596,11107,11115,11145,11148,11149,11173,11180,11182,11437,11438,11442,11464,11467,11468,11492,11626,11659,11663,11668],"fullWord":11149},{"subwords":[337,341,343,349,399,553,817,857,869,5588,5592,5782,5830,5976,9376,9384,10121,10136,10145,10150,10324,10355,10414,10502,10536,10549,10584,10585,10595,10675,10677,11148,11150,11173,11180,11182,11276,11286,11292,11303,11437,11442,11539,11659,11668,11669,11743,14780,14808,14810,14968,14971,14975,15202,15204,15399,15444,15473,15480,15481],"fullWord":11150},{"subwords":[326,327,341,342,540,541,4472,4475,4714,4896,4935,4938,4971,4972,5658,9103,9109,9162,11107,11115,11145,11152,11153,11204,11437,11438,11467,11626,11688,11689],"fullWord":11153},{"subwords":[341,343,349,553,817,869,5588,5830,5976,9162,9376,9384,11152,11154,11204,11276,11286,11292,11437,11539,11688,11692,11743,14808,14810,14975,15202,15480,15481],"fullWord":11154},{"subwords":[337,341,594,716,9288,9293,10120,10136,10304,10584,10585,10605,10618,10662,11148,11156,11158,11173,11182,11213,11238,11264,11408,11659,11662,11697,12201,12238,12244,12311,12438,12443,21051,21144],"fullWord":11158},{"subwords":[341,343,349,553,817,869,911,1009,5588,5620,5830,5832,5976,5982,6055,9376,9382,9384,9444,11161,11276,11286,11292,11320,11361,11362,11364,11437,11456,11539,11553,11574,11575,11743,11786,11787,11792,14808,14810,14898,14901,14975,15202,15217,15312,15480,15481,15542,15748,18347,18389,18393,18396,18449,18453,18541,18549,18554,18595,18644,18844,18847,18882,18886,18889,18941,19216,19285],"fullWord":11161},{"subwords":[341,347,546,555,5845,9422,11162,11163,11330,11427,11432,11437,11453,11560,11764,15973,15978,16270,16278,16375,16764,16929],"fullWord":11163},{"subwords":[366,504,869,889,9487,9508,9645,11164,11165,11265,11276,12680,14794,14808,15564,15627],"fullWord":11165},{"subwords":[869,883,905,9487,9493,9508,9512,9645,11164,11166,11265,11276,11314,11330,11813,12680,12683,12872,13007,14808,14820,15564,15567,15627,15638,15673,15973,17303,17378],"fullWord":11166},{"subwords":[817,825,867,868,869,883,905,906,950,953,5588,5599,5845,5976,5977,9768,9769,11167,11168,11169,11170,11276,11286,11287,11296,11301,11314,11315,11330,11333,11341,11343,11437,11453,11539,11560,14798,14802,14808,14820,14881,14975,14978,15202,15224,15939,15973,15978,16270,16278,16286,16419,17161],"fullWord":11169},{"subwords":[574,586,732,1070,5627,5846,5956,9768,11167,11171,11270,11437,13439,13446,14452,14476,19595,19624],"fullWord":11171},{"subwords":[287,341,369,7283,7317,7334,7604,9276,9913,9922,11127,11132,11156,11172,11213,11649,11697,11711,11721,12230,12244,12443],"fullWord":11172},{"subwords":[144,466,504,594,4472,4578,10090,10108,10136,10137,10304,11107,11116,11173,11174,11175,11177,11408,11409,21051],"fullWord":11175},{"subwords":[337,341,372,466,504,1155,10136,10137,10153,10292,10584,10585,11148,11173,11174,11176,11182,11399,11659,20345],"fullWord":11176},{"subwords":[466,504,594,10136,10137,10304,11173,11174,11177,11178,11408,11409,21051],"fullWord":11178},{"subwords":[382,466,470,504,594,595,1004,10136,10137,10138,10161,10304,10313,11173,11174,11177,11179,11330,11408,11409,11412,11424,15942,15973,16103,17012,17039,17149,21051,21055],"fullWord":11179},{"subwords":[93,112,337,341,399,422,537,2813,2835,2848,2853,2854,3120,3402,3450,3453,3520,5782,9079,10072,10073,10136,10145,10324,10414,10518,10536,10584,10585,10595,11086,11089,11101,11148,11173,11180,11182,11183,11437,11442,11617,11619,11659,11668],"fullWord":11183},{"subwords":[287,337,341,416,426,7283,7293,7317,7334,7585,7604,7688,10109,10120,10136,10156,10584,10585,10605,10637,10638,11127,11132,11148,11156,11173,11182,11184,11213,11649,11659,11662,11697,11711,12230,12238,12244,12438,12443],"fullWord":11184},{"subwords":[337,341,399,423,430,528,637,5745,5782,10120,10136,10145,10174,10324,10344,10414,10418,10536,10544,10584,10585,10595,10605,10625,11148,11156,11157,11173,11180,11182,11185,11213,11218,11437,11442,11446,11489,11512,11522,11645,11659,11662,11668,11697,11706,12229,12238,12244,12245,12438,12439,12443],"fullWord":11185},{"subwords":[399,442,4466,4472,4475,4601,4728,4744,5658,5756,5780,5782,10090,10093,10102,10136,10145,10146,10324,10327,10343,10378,11107,11115,11173,11180,11186,11187,11437,11438,11442,11464,11492],"fullWord":11187},{"subwords":[337,341,399,442,5780,5782,9144,9152,10136,10145,10324,10343,10414,10536,10584,10585,10595,11148,11173,11180,11182,11186,11188,11437,11442,11659,11668,11676,11677],"fullWord":11188},{"subwords":[399,442,488,1009,5620,5780,5782,6055,10136,10145,10247,10324,10343,10460,11173,11180,11186,11189,11192,11361,11362,11437,11442,11456,11502,11574,11575,11576,18370,18381,18389,18393,18541,18547,18549,18591,18595],"fullWord":11189},{"subwords":[442,457,1155,1164,10136,10292,10738,10942,11173,11186,11190,11265,11399,11875,12066,12856,13114,20378],"fullWord":11190},{"subwords":[399,488,1009,4466,4472,4475,4551,4601,4604,4728,4747,5620,5658,5756,5782,6055,10090,10093,10136,10145,10146,10247,10248,10324,10327,10378,10460,11107,11115,11173,11180,11192,11194,11361,11362,11363,11437,11438,11442,11456,11464,11492,11502,11574,11575,11576,18339,18370,18389,18393,18394,18541,18547,18549,18595],"fullWord":11194},{"subwords":[67,504,1210,1215,1422,11197,11198,11199,11200,11330,15973,15974],"fullWord":11200},{"subwords":[51,67,560,561,1422,2029,2034,11201,11202,11265,11330,11813,11817,11823,11885,11890,12872,15973,15976,17308,17378],"fullWord":11202},{"subwords":[1196,1197,5619,5837,5845,11203,11330,11408,11424,11437,11453,11560,15973,15978,16103,16270,16278,16284,21051,21055,21097,21105,21130],"fullWord":11203},{"subwords":[341,347,546,555,5845,9162,9163,9422,11152,11155,11204,11205,11330,11437,11453,11560,11612,11688,11694,11764,15973,15978,16270,16278,16375,16764],"fullWord":11205},{"subwords":[466,504,10136,10137,11173,11174,11197,11206,11207],"fullWord":11207},{"subwords":[504,11197,11198,11206,11208,11330,15973],"fullWord":11208},{"subwords":[1196,5837,11209,11212,11408,11437,21051,21097],"fullWord":11209},{"subwords":[341,9162,11152,11204,11210,11437,11688],"fullWord":11210},{"subwords":[560,11211,11213,11265,11810,11885,11888,11891,12244,12522],"fullWord":11211},{"subwords":[269,504,528,596,7317,7323,7489,7493,11127,11128,11213,11214,11218,11223,11437,11446,11487,11512,12229,12230,12244,12245],"fullWord":11214},{"subwords":[504,596,657,658,11213,11215,11239,12244,12252],"fullWord":11215},{"subwords":[586,2848,2869,3189,3336,3386,4293,8290,8970,8971,8989,11086,11094,11213,11217,12083,12135,12244],"fullWord":11217},{"subwords":[269,528,5881,7317,7323,7467,7489,7493,7496,11127,11128,11213,11218,11220,11223,11437,11446,11487,11512,11515,12229,12230,12244,12245,12339],"fullWord":11220},{"subwords":[497,586,1060,6293,6366,6702,6821,7179,10136,11001,11173,11213,11222,11387,12244,19600],"fullWord":11222},{"subwords":[269,528,622,817,869,5588,5595,5894,5895,5976,5988,7317,7323,7326,7375,7461,7489,7493,7530,7531,7921,11127,11128,11213,11218,11223,11224,11276,11286,11288,11437,11446,11487,11512,11539,12229,12230,12244,12245,12248,12319,14758,14762,14771,14808,14821,14832,14833,14975,15141,15202,15207],"fullWord":11224},{"subwords":[269,280,528,531,5845,5918,7317,7323,7327,7342,7396,7407,7489,7492,7493,7511,11127,11128,11129,11140,11213,11218,11221,11223,11225,11247,11248,11330,11437,11446,11450,11453,11487,11512,11524,11560,12081,12229,12230,12233,12244,12245,12250,15910,15912,15973,15978,15986,15995,16001,16270,16278,17211],"fullWord":11225},{"subwords":[269,528,716,1196,7317,7323,7330,7345,7447,7489,7493,8186,11127,11128,11213,11218,11223,11226,11230,11264,11408,11437,11446,11452,11487,11512,12201,12229,12230,12244,12245,12311,21051,21052,21058,21097,21120],"fullWord":11226},{"subwords":[269,399,528,620,625,5745,5782,7293,7298,7317,7323,7477,7489,7493,7494,7671,7674,7680,10109,10136,10145,10174,10324,10344,10398,10410,10418,11127,11128,11173,11180,11213,11218,11223,11227,11437,11442,11446,11487,11512,12229,12230,12244,12245],"fullWord":11227},{"subwords":[299,304,568,7317,7342,7396,11127,11140,11213,11228,11229,11245,11247,11265,11330,11345,11810,11812,11813,11891,11915,12081,12230,12233,12244,12509,12512,12522,12527,12560,12872,15910,15921,15973,15986,16001,17188,17211,17378,17383,17389],"fullWord":11229},{"subwords":[341,504,507,596,640,2799,2848,2869,3402,9207,9208,11086,11156,11213,11231,11232,11234,11617,11697,12244,12443],"fullWord":11232},{"subwords":[341,347,504,507,536,555,596,640,642,647,691,945,946,9307,9422,11156,11159,11213,11216,11231,11233,11247,11330,11697,11728,12244,12283,12443,12447,15973,15986,16764,16858],"fullWord":11233},{"subwords":[341,347,555,647,691,2800,2848,2868,2869,2906,3402,9207,9208,9209,9307,9422,11086,11105,11156,11159,11213,11234,11235,11247,11330,11617,11618,11697,11728,11759,12244,12443,12447,15880,15973,15986,16129,16134,16178,16764,16769,16858],"fullWord":11235},{"subwords":[337,341,372,375,466,504,507,596,598,640,641,10120,10136,10137,10153,10155,10162,10499,10584,10585,10605,11148,11156,11173,11174,11182,11213,11231,11236,11659,11662,11697,12238,12244,12438,12443],"fullWord":11236},{"subwords":[117,341,552,643,683,2848,2869,3402,3403,3689,3732,3733,3777,9097,9207,9208,9360,11086,11156,11213,11234,11237,11265,11617,11697,11810,11854,11891,12244,12443,12522],"fullWord":11237},{"subwords":[504,596,657,658,661,11213,11216,11239,11240,11247,11330,12244,12252,12283,15973,15986],"fullWord":11240},{"subwords":[176,528,529,605,657,663,4472,4475,4479,4492,4500,4605,4774,5658,5865,11107,11115,11213,11218,11219,11241,11437,11438,11446,11512,11516,12229,12244,12245,12246,12252],"fullWord":11241},{"subwords":[528,657,663,817,869,5588,5595,5976,11213,11218,11242,11276,11286,11437,11446,11512,11539,12229,12244,12245,12248,12252,12319,14808,14821,14975,15202,15207],"fullWord":11242},{"subwords":[869,883,905,909,11213,11243,11244,11245,11247,11265,11276,11314,11330,11345,11810,11812,11813,11891,11915,11977,11978,12244,12522,12527,12548,12550,12551,12555,12560,12680,12683,12872,13007,14808,14820,14821,14846,15564,15567,15568,15569,15627,15628,15630,15638,15673,15973,15986,17303,17378,17383,17384],"fullWord":11244},{"subwords":[528,586,5627,5846,11213,11218,11246,11437,11446,11512,11534,12229,12244,12245,14589,14595,14614,14635,14636,14646],"fullWord":11246},{"subwords":[528,531,973,987,5845,5918,6039,11213,11218,11221,11247,11248,11249,11330,11348,11351,11437,11446,11450,11453,11512,11524,11526,11560,11561,11569,12082,12229,12244,12245,12250,12367,15973,15978,15986,15995,15999,16009,16270,16278,16283,16291],"fullWord":11249},{"subwords":[504,596,693,711,1014,1015,1016,1017,11213,11216,11247,11250,11251,11330,11356,11361,11376,12244,12283,15973,15986,16011,16041,16042,18389,18407,18408,18428],"fullWord":11251},{"subwords":[399,488,528,532,693,694,1009,5620,5745,5782,6055,6074,10136,10145,10149,10174,10247,10251,10324,10344,10349,10418,10437,10460,11173,11180,11192,11213,11218,11252,11257,11361,11362,11437,11442,11446,11451,11456,11502,11512,11530,11574,11575,11576,12229,12244,12245,12292,12325,12374,18370,18389,18393,18408,18541,18547,18549,18595,18607],"fullWord":11252},{"subwords":[528,531,532,533,693,694,697,711,1009,5616,5620,5626,5845,5918,6055,6074,6075,11213,11218,11221,11247,11248,11253,11330,11356,11361,11362,11366,11376,11437,11446,11450,11451,11453,11456,11457,11512,11524,11560,11574,11575,12229,12244,12245,12250,12289,12325,12330,12368,12374,12376,15973,15978,15986,15995,16041,16043,16270,16278,16293,16399,16457,17760,17813,17830,18389,18393,18398,18407,18408,18428,18541,18549,18552,18559,18595,18607,18624],"fullWord":11253},{"subwords":[126,128,341,693,700,701,2848,2869,2908,3052,3402,3429,9207,9208,9325,11086,11156,11213,11234,11254,11361,11371,11617,11697,11729,12244,12443,12463,18347,18389,18408,18823,18882,18894],"fullWord":11254},{"subwords":[169,177,179,326,341,540,605,693,700,4472,4479,4482,4492,4896,4971,4985,5008,9325,11107,11145,11156,11213,11255,11361,11371,11626,11697,11702,11729,12244,12443,12463,18339,18347,18389,18408,18882,18894],"fullWord":11255},{"subwords":[341,347,555,647,691,693,700,704,711,9307,9318,9325,9422,9447,11156,11159,11160,11213,11247,11256,11330,11356,11361,11371,11373,11376,11697,11728,11729,11732,11780,12244,12443,12447,12463,12471,15936,15973,15986,16041,16047,16764,16858,16907,17179,17255,17742,18347,18389,18407,18408,18428,18882,18894,18919,18947],"fullWord":11256},{"subwords":[399,488,528,532,693,694,1009,5620,5745,5782,6055,6074,10136,10145,10149,10174,10247,10251,10324,10344,10349,10418,10437,10460,11173,11180,11192,11213,11218,11252,11257,11361,11362,11437,11442,11446,11451,11456,11502,11512,11530,11574,11575,11576,12229,12244,12245,12292,12325,12374,18370,18389,18393,18408,18541,18547,18549,18595,18607],"fullWord":11257},{"subwords":[504,596,693,707,869,911,1014,1015,11213,11250,11258,11276,11320,11361,12244,14808,14821,14847,14898,14899,18389,18408,18449,18460,19216],"fullWord":11258},{"subwords":[504,586,596,693,1014,1015,1074,11213,11250,11259,11361,11392,12244,12300,12659,18389,18408,18508,19434,19435],"fullWord":11259},{"subwords":[375,466,497,499,504,586,596,598,10136,10137,11001,11173,11174,11213,11260,11387,12244,19600],"fullWord":11260},{"subwords":[528,586,817,869,920,5588,5595,5627,5846,5976,11213,11218,11261,11276,11286,11437,11446,11512,11534,11539,12229,12244,12245,12248,12319,14808,14821,14975,15202,15207,15777,15806,15821,15822,19632,19847,19866],"fullWord":11261},{"subwords":[341,347,555,560,561,9162,9163,9422,11152,11155,11265,11266,11330,11612,11696,11772,11813,11854,11885,11890,12872,15973,16764,17378],"fullWord":11266},{"subwords":[341,347,555,1020,1022,9367,9368,9422,9447,11160,11265,11267,11330,11356,11361,11376,11772,11780,11813,11814,11816,11854,11862,12007,12010,12030,12686,12692,12869,12870,12872,13031,15973,16041,16764,16907,17179,17378,17435,17885,18347,18389,18407,18432,18433,18435,18882,18947,19026,19034],"fullWord":11267},{"subwords":[341,347,349,359,554,555,869,883,905,9376,9409,9422,11265,11268,11269,11276,11314,11330,11772,11813,11854,12680,12683,12872,13007,14808,14820,15480,15489,15564,15567,15627,15638,15673,15973,16028,16764,16889,17303,17378,17722],"fullWord":11269},{"subwords":[399,407,470,481,486,574,576,579,732,739,779,961,5782,5784,5845,5956,6033,10136,10145,10151,10158,10160,10161,10182,10194,10195,10324,10350,10353,10360,10957,11173,11180,11181,11270,11271,11272,11275,11330,11437,11442,11444,11453,11560,13204,13207,13211,13224,13227,13232,13336,13439,13450,13452,13461,13919,13940,13943,14414,15942,15948,15949,15973,15978,15984,16014,16270,16274,16278,16403,17012,17019,17476,17488],"fullWord":11272},{"subwords":[574,732,733,762,4472,4475,4484,5658,5956,11107,11115,11270,11273,11437,11438,13171,13268,13439,13478,13569,14237],"fullWord":11273},{"subwords":[574,732,735,762,817,869,5588,5956,5976,11270,11274,11276,11286,11437,11539,13238,13268,13276,13286,13294,13439,13455,13569,13577,13593,14240,14262,14264,14278,14808,14816,14851,14852,14975,14979,15202,15209,15248,15747],"fullWord":11274},{"subwords":[504,796,869,2848,2941,4065,11086,11276,11277,11281,14808],"fullWord":11277},{"subwords":[144,504,586,869,920,1053,1078,4472,5318,5319,5424,11107,11276,11278,12091,12095,14736,14808,15806],"fullWord":11278},{"subwords":[43,44,385,399,513,516,518,817,869,1301,1304,1324,1366,1377,1526,1535,1636,1665,1700,1907,1909,1915,1933,2308,2317,2380,5588,5592,5782,5803,5976,10061,10136,10139,10142,10145,10150,10324,10355,11173,11180,11276,11279,11286,11303,11437,11442,11491,11539,14808,14809,14968,14971,14975,14995,15202],"fullWord":11279},{"subwords":[49,385,594,869,884,1324,1326,1366,1405,1502,2308,2364,10061,10136,10139,10304,11173,11276,11280,11303,11329,11408,12200,14808,14939,15864,21051],"fullWord":11280},{"subwords":[93,112,121,399,796,817,869,2813,2835,2837,2848,2853,2854,2941,2954,2971,3453,3493,4065,4110,5588,5592,5782,5976,10072,10073,10075,10136,10145,10150,10324,10355,11086,11089,11091,11101,11173,11180,11276,11281,11282,11286,11303,11437,11442,11539,14717,14808,14968,14971,14975,15021,15202],"fullWord":11282},{"subwords":[269,279,280,817,825,869,883,905,906,5588,5599,5845,5976,5977,5988,5992,7317,7323,7326,7327,7342,7375,7391,7396,7461,7463,7489,7492,7530,7533,7921,7926,7939,11127,11128,11129,11140,11276,11286,11287,11288,11289,11314,11315,11330,11333,11437,11453,11487,11539,11560,12081,14758,14762,14764,14773,14808,14820,14881,14975,14978,15141,15202,15224,15910,15912,15914,15973,15978,16026,16270,16278,16286,16419,17161],"fullWord":11289},{"subwords":[287,341,349,869,876,7283,7317,7334,7375,7604,7918,7921,8009,8015,9204,9376,9378,11127,11132,11156,11213,11276,11290,11649,11697,11711,12230,12244,12443,14758,14784,14808,14821,14832,14838,15461,15480,15494],"fullWord":11290},{"subwords":[341,349,357,504,507,596,640,852,869,9204,9376,9378,11156,11213,11231,11276,11291,11293,11697,12244,12443,14784,14808,14821,14838,15480],"fullWord":11293},{"subwords":[341,343,349,358,528,553,817,869,5588,5595,5830,5976,5996,9204,9376,9378,9384,11156,11157,11213,11218,11276,11286,11292,11294,11437,11446,11489,11512,11539,11645,11697,11706,11708,11743,12229,12244,12245,12248,12319,12443,14784,14808,14810,14821,14838,14975,15175,15202,15205,15207,15480,15481],"fullWord":11294},{"subwords":[325,341,347,349,359,554,555,556,869,883,905,932,8245,8248,8290,8296,8346,8349,8362,8648,8678,8934,9376,9409,9422,11276,11295,11314,11317,11330,11335,14775,14808,14820,14886,15480,15489,15973,16028,16531,16627,16764,16889,17722],"fullWord":11295},{"subwords":[817,867,869,871,4472,4475,4516,4522,4607,4810,4818,4819,5316,5318,5342,5355,5588,5658,5976,9768,11107,11115,11120,11167,11168,11276,11286,11296,11297,11437,11438,11539,14736,14798,14799,14808,14961,14975,15060,15202],"fullWord":11297},{"subwords":[817,867,869,872,5588,5976,6008,9768,11167,11168,11276,11286,11296,11298,11437,11539,14798,14800,14808,14872,14975,14983,14986,15202,15210],"fullWord":11298},{"subwords":[817,867,869,911,1009,5588,5620,5976,5982,6055,9768,9791,11167,11168,11276,11286,11296,11299,11320,11361,11362,11364,11437,11456,11539,11574,11575,11808,14798,14808,14898,14901,14975,15202,15312,15748,18358,18360,18389,18393,18396,18449,18453,18541,18545,18549,18554,18595,18644,19216,19244],"fullWord":11299},{"subwords":[504,867,869,9757,9786,11276,11296,11300,14808],"fullWord":11300},{"subwords":[574,586,867,869,920,1070,11270,11276,11296,11302,12146,13286,13306,14240,14476,14808,14816,14851,15747,15806,15815,19624],"fullWord":11302},{"subwords":[396,399,817,869,871,4466,4472,4475,4516,4601,4607,4728,4810,4818,4819,4820,5318,5342,5588,5592,5658,5756,5782,5976,10090,10093,10097,10136,10145,10146,10150,10202,10324,10327,10355,10378,11107,11115,11120,11173,11180,11276,11286,11303,11304,11437,11438,11442,11464,11492,11539,14736,14808,14961,14968,14971,14975,15060,15202],"fullWord":11304},{"subwords":[337,341,349,869,9204,9376,9378,10120,10121,10136,10502,10584,10585,10605,10675,11148,11156,11173,11182,11213,11276,11303,11305,11659,11662,11697,12238,12244,12438,12443,14780,14784,14808,14821,14838,15399,15480],"fullWord":11305},{"subwords":[560,570,869,911,1020,11265,11276,11306,11320,11361,11814,11885,11989,12010,12680,12686,13008,14808,14898,15564,15627,15691,18389,18432,18449,18463,19026,19093,19094,19216],"fullWord":11306},{"subwords":[869,11213,11243,11265,11276,11307,11810,11891,11911,11921,11931,11936,11977,11979,12244,12522,12548,12550,12551,12680,14808,14821,15564,15568,15627,15628,15629,15652],"fullWord":11307},{"subwords":[586,817,869,920,5588,5627,5846,5976,11276,11286,11308,11437,11539,14589,14595,14614,14635,14646,14808,14975,15202,15274,15777,15806,19847],"fullWord":11308},{"subwords":[817,869,871,872,4472,4475,4516,4518,4607,4810,4818,4819,5318,5342,5346,5588,5658,5976,6008,11107,11115,11120,11276,11286,11309,11437,11438,11539,14736,14808,14872,14961,14975,14983,14986,15060,15202],"fullWord":11309},{"subwords":[817,869,872,5588,5976,6008,11276,11286,11310,11437,11539,14808,14872,14875,14975,14983,14986,15202],"fullWord":11310},{"subwords":[869,878,11213,11243,11265,11276,11311,11810,11891,11977,12244,12522,12548,12550,12551,12680,14808,14821,15564,15568,15570,15627,15628],"fullWord":11311},{"subwords":[869,878,902,11265,11276,11312,11399,12066,12680,14808,14933,15564,15570,15627,15734,20410,20425,20940],"fullWord":11312},{"subwords":[817,825,869,883,905,906,907,973,5588,5599,5845,5976,5977,6039,11276,11286,11287,11314,11315,11316,11330,11333,11334,11348,11351,11437,11453,11539,11560,11561,11569,12082,14808,14820,14881,14885,14975,14978,15202,15224,15973,15978,16270,16278,16283,16286,16290,16291,16419,17161,17162],"fullWord":11316},{"subwords":[325,869,883,905,932,973,8290,8296,8346,8349,8362,8934,11276,11314,11317,11318,11330,11335,11348,12082,14775,14808,14820,14886,15973,16033,16531,16537,17160],"fullWord":11318},{"subwords":[325,869,883,884,905,932,944,8290,8296,8346,8349,8362,8420,8428,8934,11276,11314,11317,11319,11329,11330,11335,11340,11408,11424,14775,14808,14820,14886,14939,14944,15864,15865,15973,16103,16531,16572,16758,21051,21055,21212],"fullWord":11319},{"subwords":[817,869,871,911,1009,4472,4475,4516,4537,4551,4553,4607,4810,4812,4818,4819,5318,5327,5342,5344,5588,5620,5658,5976,5982,6055,11107,11115,11120,11276,11286,11320,11321,11361,11362,11363,11364,11437,11438,11456,11539,11574,11575,14736,14808,14898,14901,14902,14961,14975,15060,15202,15312,15318,15748,18339,18389,18393,18394,18396,18449,18450,18453,18454,18541,18549,18554,18595,18644,19205,19216,19233],"fullWord":11321},{"subwords":[528,532,693,694,709,817,869,911,1009,5588,5595,5620,5976,5982,6055,6074,11213,11218,11276,11286,11320,11322,11361,11362,11364,11437,11446,11451,11456,11512,11539,11574,11575,12229,12244,12245,12248,12319,12325,12374,14808,14821,14847,14898,14901,14975,15202,15207,15241,15312,15748,18389,18393,18396,18408,18449,18453,18460,18541,18549,18554,18595,18607,18644,18649,19216],"fullWord":11322},{"subwords":[0,317,504,505,850,869,911,1014,8290,8346,8360,8378,11276,11320,11323,11361,11369,14775,14808,14898,14899,18389,18449,18967,19216],"fullWord":11323},{"subwords":[341,349,693,700,869,911,9204,9325,9338,9339,9376,9378,11156,11213,11276,11320,11324,11361,11371,11697,11729,12244,12443,12463,14784,14808,14821,14838,14847,14898,15480,18347,18389,18408,18449,18460,18882,18894,19212,19216,19285],"fullWord":11324},{"subwords":[869,884,911,919,11276,11313,11320,11326,11329,11361,11408,14808,14898,14939,15864,18389,18449,18471,19216,19231,19377,21051],"fullWord":11326},{"subwords":[399,817,869,1106,1109,5588,5592,5782,5976,10136,10145,10150,10285,10287,10324,10355,10471,10472,11173,11180,11276,11286,11303,11327,11437,11442,11539,14808,14921,14923,14968,14971,14975,15202,15337,19923,19924,19986,20014,20015],"fullWord":11327},{"subwords":[2848,2868,2869,2906,3732,3733,3734,3777,3814,11086,11105,11213,11245,11247,11265,11330,11331,11345,11810,11812,11813,11891,11915,12244,12522,12527,12560,12872,15880,15973,15986,16129,16134,17316,17378,17383],"fullWord":11331},{"subwords":[126,134,929,1020,1022,2848,2868,3041,3052,3064,3603,3605,3611,3732,3733,3734,3774,3958,3965,3971,4238,4241,11086,11105,11265,11330,11332,11356,11361,11376,11813,11814,11816,12007,12010,12030,12686,12692,12872,15880,15973,16041,16129,16157,16205,17316,17378,17435,17885,18333,18335,18389,18407,18432,18435,19026,19034],"fullWord":11332},{"subwords":[817,825,869,883,905,906,907,973,5588,5599,5845,5976,5977,6039,11276,11286,11287,11314,11315,11316,11330,11333,11334,11348,11351,11437,11453,11539,11560,11561,11569,12082,14808,14820,14881,14885,14975,14978,15202,15224,15973,15978,16270,16278,16283,16286,16290,16291,16419,17161,17162],"fullWord":11334},{"subwords":[200,319,320,325,932,934,4472,4475,4476,4489,4543,4614,4826,5658,5845,8217,8219,8290,8296,8362,8440,8443,8532,8539,11107,11115,11123,11330,11335,11336,11437,11438,11440,11453,11560,11563,15893,15973,15978,16270,16278,16503,16504,16531,16533,16534,16574,16581],"fullWord":11336},{"subwords":[319,320,325,817,825,869,883,905,906,932,5588,5599,5845,5976,5977,8290,8296,8333,8336,8337,8338,8346,8349,8362,8453,8456,8532,8539,8552,8584,8934,11276,11286,11287,11314,11315,11317,11330,11333,11335,11337,11437,11453,11539,11560,11563,14775,14808,14820,14881,14886,14975,14978,15202,15224,15376,15377,15973,15978,16270,16278,16286,16419,16531,16533,16549,16574,16577,17161],"fullWord":11337},{"subwords":[319,320,325,932,936,973,5845,6039,8290,8296,8362,8532,8539,11330,11335,11338,11348,11351,11437,11453,11560,11561,11563,11569,12082,15973,15978,16033,16270,16278,16283,16291,16531,16533,16535,16537,16574,16609,17160],"fullWord":11338},{"subwords":[319,320,325,341,347,546,555,556,932,5845,8290,8296,8362,8532,8539,8625,8628,8648,8678,9422,11330,11335,11339,11437,11453,11560,11563,11764,15973,15978,16270,16278,16375,16531,16533,16574,16627,16764],"fullWord":11339},{"subwords":[200,950,952,4472,4475,4476,4489,4826,4835,5658,5845,9768,9769,11107,11115,11123,11167,11170,11330,11341,11342,11437,11438,11440,11453,11560,15893,15939,15973,15978,16270,16278],"fullWord":11342},{"subwords":[817,825,867,868,869,883,905,906,950,953,5588,5599,5845,5976,5977,9768,9769,11167,11168,11169,11170,11276,11286,11287,11296,11301,11314,11315,11330,11333,11341,11343,11437,11453,11539,11560,14798,14802,14808,14820,14881,14975,14978,15202,15224,15939,15973,15978,16270,16278,16286,16419,17161],"fullWord":11343},{"subwords":[973,987,11213,11245,11247,11265,11330,11345,11346,11348,11810,11812,11813,11891,11915,12002,12082,12244,12522,12527,12560,12872,15973,15986,16009,17378,17379,17383,17395,17434],"fullWord":11346},{"subwords":[586,590,5627,5845,5846,5847,11330,11347,11437,11453,11560,12152,14589,14595,14614,14635,14646,14650,15973,15978,16270,16278,16416,18066,18103,19871,19876],"fullWord":11347},{"subwords":[504,508,973,975,11330,11348,11349,11350,12082,15973,16037],"fullWord":11350},{"subwords":[200,973,4472,4475,4476,4489,4826,5658,5845,6039,11107,11115,11123,11330,11348,11351,11352,11437,11438,11440,11453,11560,11561,11569,12082,15893,15973,15978,16270,16278,16283,16291],"fullWord":11352},{"subwords":[973,980,5845,6039,11330,11348,11351,11353,11437,11453,11560,11561,11569,12082,15973,15978,16037,16270,16278,16283,16291],"fullWord":11353},{"subwords":[341,347,555,557,973,9135,9422,9423,11330,11348,11354,11774,12082,15973,16764,16903],"fullWord":11354},{"subwords":[200,1009,4472,4475,4476,4489,4551,4555,4826,5616,5620,5626,5658,5845,6055,11107,11115,11123,11330,11356,11357,11361,11362,11363,11366,11376,11437,11438,11440,11453,11456,11457,11560,11574,11575,15893,15973,15978,16041,16043,16044,16270,16278,16293,16457,17806,17813,17830,18339,18340,18389,18393,18394,18398,18407,18541,18549,18552,18559,18575,18595],"fullWord":11357},{"subwords":[817,825,869,883,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5845,5976,5977,5982,6018,6055,11276,11286,11287,11314,11315,11320,11325,11330,11333,11356,11358,11361,11362,11364,11365,11366,11376,11437,11453,11456,11457,11539,11560,11574,11575,14808,14820,14881,14898,14901,14905,14912,14975,14978,15202,15224,15306,15312,15748,15973,15978,16041,16043,16270,16278,16286,16293,16419,16457,17157,17161,17773,17775,17813,17830,17959,18389,18393,18396,18397,18398,18407,18449,18453,18455,18472,18541,18549,18552,18554,18557,18559,18595,18644,18648,19216,19219,19381],"fullWord":11358},{"subwords":[126,134,341,347,555,2848,2868,3041,3052,3064,3402,3429,4238,4241,9422,9447,11086,11105,11160,11330,11356,11359,11361,11376,11617,11618,11756,11759,11780,15880,15973,16041,16129,16157,16178,16764,16769,16907,17179,18347,18389,18407,18823,18830,18882,18947],"fullWord":11359},{"subwords":[817,825,869,883,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5845,5976,5977,5982,6018,6055,11276,11286,11287,11314,11315,11320,11325,11330,11333,11356,11358,11361,11362,11364,11365,11366,11376,11437,11453,11456,11457,11539,11560,11574,11575,14808,14820,14881,14898,14901,14905,14912,14975,14978,15202,15224,15306,15312,15748,15973,15978,16041,16043,16270,16278,16286,16293,16419,16457,17157,17161,17773,17775,17813,17830,17959,18389,18393,18396,18397,18398,18407,18449,18453,18455,18472,18541,18549,18552,18554,18557,18559,18595,18644,18648,19216,19219,19381],"fullWord":11365},{"subwords":[1009,1196,1197,5616,5619,5620,5626,5845,6055,6079,11330,11356,11361,11362,11366,11367,11368,11376,11408,11415,11424,11425,11437,11453,11456,11457,11458,11560,11574,11575,15973,15978,16041,16043,16103,16270,16278,16284,16293,16457,17802,17813,17815,17830,18018,18019,18389,18393,18398,18407,18541,18549,18552,18559,18595,21051,21055,21097,21105,21106,21130,21135],"fullWord":11368},{"subwords":[287,341,693,700,7283,7289,7317,7334,7416,7561,7604,7637,7745,9325,11127,11132,11156,11213,11361,11371,11372,11649,11697,11711,11729,12230,12244,12443,12463,18342,18347,18389,18400,18408,18410,18882,18894,18901],"fullWord":11372},{"subwords":[341,347,555,647,691,693,700,704,711,9307,9318,9325,9422,9447,11156,11159,11160,11213,11247,11256,11330,11356,11361,11371,11373,11376,11697,11728,11729,11732,11780,12244,12443,12447,12463,12471,15936,15973,15986,16041,16047,16764,16858,16907,17179,17255,17742,18347,18389,18407,18408,18428,18882,18894,18919,18947],"fullWord":11373},{"subwords":[341,349,869,911,9376,11276,11320,11328,11361,11374,11401,11402,11797,11802,14808,14898,15480,18347,18389,18449,18528,18533,18882,19216,19285],"fullWord":11374},{"subwords":[570,693,869,911,1020,11213,11243,11265,11276,11320,11361,11375,11810,11814,11891,11977,11989,12010,12244,12293,12522,12548,12550,12551,12574,12575,12680,12686,13008,14808,14821,14847,14898,15564,15568,15627,15628,15691,18389,18408,18432,18449,18460,18463,19026,19036,19093,19094,19105,19216],"fullWord":11375},{"subwords":[1009,4472,4475,4551,5620,5658,6055,11107,11115,11361,11362,11363,11377,11378,11379,11437,11438,11456,11574,11575,18339,18389,18393,18394,18495,18498,18541,18549,18565,18595],"fullWord":11379},{"subwords":[817,869,911,1009,5588,5620,5976,5982,6055,11276,11286,11320,11361,11362,11364,11377,11378,11380,11437,11456,11539,11574,11575,14808,14898,14901,14975,15202,15312,15748,18389,18393,18396,18449,18453,18476,18495,18498,18499,18541,18549,18554,18565,18595,18644,18672,19216,19235],"fullWord":11380},{"subwords":[1009,5616,5620,5626,5845,6055,11330,11356,11361,11362,11366,11376,11377,11378,11381,11382,11437,11453,11456,11457,11560,11574,11575,15973,15978,16041,16043,16270,16278,16293,16457,17788,17790,17813,17830,17846,18389,18393,18398,18399,18407,18490,18495,18498,18503,18541,18549,18552,18559,18565,18567,18595,18662],"fullWord":11381},{"subwords":[586,817,869,911,920,1009,1096,5588,5620,5627,5846,5976,5982,6055,11276,11286,11320,11361,11362,11364,11383,11392,11437,11456,11539,11574,11575,12184,12187,14808,14898,14901,14975,15202,15312,15748,15777,15806,15858,18389,18393,18396,18449,18453,18508,18541,18549,18554,18595,18644,19216,19356,19847],"fullWord":11383},{"subwords":[1020,1205,8290,8378,8892,11265,11361,11369,11384,11385,11814,12010,12018,12686,12690,12806,18389,18432,18743,18967,19026],"fullWord":11385},{"subwords":[1020,1022,11265,11330,11356,11361,11376,11384,11386,11813,11814,11816,12007,12010,12030,12686,12692,12872,15973,16041,17378,17435,17885,18389,18407,18432,18435,19026,19034],"fullWord":11386},{"subwords":[399,497,586,1053,1072,4466,4472,4475,4601,4728,5442,5471,5472,5627,5658,5756,5782,5846,10090,10093,10136,10145,10146,10270,10271,10324,10327,10378,10470,11107,11115,11173,11180,11387,11388,11437,11438,11442,11464,11492,12091,12110,12111],"fullWord":11388},{"subwords":[399,497,586,817,869,920,5588,5592,5627,5782,5846,5976,10136,10145,10150,10324,10355,10425,10470,11029,11173,11180,11276,11286,11303,11387,11389,11437,11442,11539,12110,12141,14808,14968,14971,14975,15202,15777,15800,15806,19837,19847,19848],"fullWord":11389},{"subwords":[586,605,716,1053,4472,4479,4492,4578,5507,11107,11213,11264,11391,11408,12091,12201,12244,12311,19669,21051,21056,21215],"fullWord":11391},{"subwords":[586,590,1106,1114,5627,5845,5846,5847,11330,11393,11394,11437,11453,11560,12152,15973,15978,16076,16270,16278,18033,18066,18103,19871,19876,19903,19967],"fullWord":11394},{"subwords":[528,531,1106,1114,5845,5918,6091,11213,11218,11221,11247,11248,11330,11395,11396,11437,11446,11450,11453,11512,11524,11560,12229,12244,12245,12250,12305,12308,15973,15978,15986,15995,16076,16270,16278,19948,19950,19952,19957,19967],"fullWord":11396},{"subwords":[341,347,555,647,691,1124,9307,9422,11156,11159,11213,11247,11330,11397,11398,11697,11728,12244,12443,12447,15973,15986,16764,16858,19920,19948,19957,20107,20115,20150,20151,20152,20154,20167,20191],"fullWord":11398},{"subwords":[341,504,9162,11152,11197,11401,11402,11403,11404,11797],"fullWord":11404},{"subwords":[341,347,555,1180,9162,9163,9422,11152,11155,11330,11401,11402,11403,11405,11406,11612,11797,15973,16098,16764,16922,21027],"fullWord":11405},{"subwords":[341,535,1167,6128,11401,11402,11407,11437,11797,21026,21030],"fullWord":11407},{"subwords":[504,596,716,11213,11216,11247,11264,11330,11408,11409,11410,11411,11412,11424,12201,12204,12244,12283,12311,12312,15973,15986,16103,21051,21055],"fullWord":11411},{"subwords":[144,504,4472,4578,11107,11408,11409,11414,21051,21094],"fullWord":11414},{"subwords":[1009,1196,1197,5616,5619,5620,5626,5845,6055,6079,11330,11356,11361,11362,11366,11367,11368,11376,11408,11415,11424,11425,11437,11453,11456,11457,11458,11560,11574,11575,15973,15978,16041,16043,16103,16270,16278,16284,16293,16457,17802,17813,17815,17830,18018,18019,18389,18393,18398,18407,18541,18549,18552,18559,18595,21051,21055,21097,21105,21106,21130,21135],"fullWord":11415},{"subwords":[594,6386,6701,6730,6854,10136,10304,11173,11408,11416,21051,21094],"fullWord":11416},{"subwords":[0,317,504,505,574,1194,8290,8321,8420,11270,11408,11409,11417,12079,13424,21051,21064],"fullWord":11417},{"subwords":[319,1196,5837,8290,8294,8420,8532,8607,11408,11418,11437,21051,21097,21098],"fullWord":11418},{"subwords":[287,341,716,7283,7317,7334,7345,7447,7604,8186,11127,11132,11156,11213,11230,11264,11408,11419,11649,11697,11711,11713,12201,12230,12244,12311,12443,21051,21058,21144],"fullWord":11419},{"subwords":[869,883,884,905,11265,11276,11314,11329,11330,11408,11420,11421,11422,11424,11813,11967,11968,12680,12683,12872,13007,14808,14820,14939,14944,15564,15567,15627,15638,15673,15690,15864,15865,15973,16103,17303,17378,17472,17473,21051,21055,21212],"fullWord":11422},{"subwords":[574,762,11265,11270,11408,11420,11423,11947,11962,12933,13268,13424,14096,14130,21051,21064],"fullWord":11423},{"subwords":[341,716,9453,11156,11213,11264,11397,11408,11426,11697,12201,12244,12310,12311,12443,19920,19948,20107,20150,20152,20168,21051,21144],"fullWord":11426},{"subwords":[817,825,869,883,905,906,5588,5599,5845,5976,5977,11276,11286,11287,11314,11315,11330,11333,11427,11430,11431,11432,11437,11453,11539,11560,14808,14820,14881,14945,14950,14975,14978,15202,15224,15973,15978,16270,16278,16286,16419,17161],"fullWord":11431},{"subwords":[341,343,349,553,817,869,5588,5830,5976,9376,9384,9455,11162,11276,11286,11292,11427,11430,11433,11437,11539,11743,14808,14810,14945,14975,15202,15480,15481,21233],"fullWord":11433},{"subwords":[337,341,594,10136,10304,10322,10584,10585,10618,11148,11173,11182,11408,11434,11436,11659,21051],"fullWord":11434},{"subwords":[287,341,7283,7317,7334,7604,11127,11132,11156,11213,11435,11649,11697,11711,12230,12244,12313,12443,21230,21269,21276],"fullWord":11435},{"subwords":[183,1145,1147,4472,4475,4574,4763,4865,5114,5163,5165,5658,11107,11115,11265,11399,11437,11438,11439,11536,11595,11831,11833,12066,12067,12752,13110,13111,20303,20309,20524,20868,20875],"fullWord":11439},{"subwords":[269,311,526,817,869,5583,5588,5976,5984,5988,7317,7323,7326,7375,7461,7467,7489,7530,7921,11127,11128,11276,11286,11288,11437,11441,11487,11539,11543,11548,14758,14762,14808,14975,15141,15202],"fullWord":11441},{"subwords":[337,341,399,401,5691,5782,10136,10145,10324,10383,10414,10536,10584,10585,10595,11148,11173,11180,11182,11437,11442,11443,11659,11668],"fullWord":11443},{"subwords":[526,528,817,869,5588,5595,5881,5976,5984,5998,11213,11218,11276,11286,11437,11446,11447,11512,11539,11543,12229,12244,12245,12248,12319,12339,14808,14821,14830,14975,15202,15207,15226],"fullWord":11447},{"subwords":[341,528,5881,11156,11157,11213,11218,11437,11446,11448,11489,11512,11645,11697,11706,12229,12244,12245,12339,12443],"fullWord":11448},{"subwords":[399,528,594,716,1196,5745,5782,5785,10136,10145,10174,10304,10310,10324,10344,10418,10495,11065,11173,11180,11213,11218,11238,11264,11408,11437,11442,11445,11446,11449,11452,11512,12201,12229,12244,12245,12247,12311,21050,21051,21052,21097,21120],"fullWord":11449},{"subwords":[399,401,407,470,5605,5607,5691,5693,5782,5784,5790,5845,10136,10145,10151,10161,10324,10360,10361,10383,10392,10451,11173,11180,11181,11330,11437,11442,11444,11453,11454,11560,15942,15948,15949,15973,15978,16270,16274,16278,16319,16330,17012],"fullWord":11454},{"subwords":[399,407,470,594,595,1196,1197,5619,5782,5784,5785,5845,10136,10145,10151,10161,10304,10313,10324,10360,10495,10496,11065,11066,11173,11180,11181,11330,11408,11424,11437,11442,11444,11445,11453,11455,11560,15942,15948,15949,15973,15978,16103,16270,16274,16278,16284,17012,17039,17149,21050,21051,21055,21097,21105,21130],"fullWord":11455},{"subwords":[93,96,112,113,2848,2853,2868,3021,3107,5845,6023,11086,11089,11093,11105,11330,11437,11453,11459,11460,11560,12080,15880,15973,15978,16129,16270,16278,16298],"fullWord":11460},{"subwords":[4268,4271,4293,5656,5845,5846,5847,6023,11462,11463,12080,12127,12134,12152,16260,16298,18066,18103,19876],"fullWord":11463},{"subwords":[200,399,407,470,4466,4467,4472,4475,4476,4489,4490,4601,4603,4728,4826,5658,5756,5760,5782,5784,5845,10090,10093,10099,10107,10136,10145,10146,10147,10151,10161,10227,10324,10327,10331,10360,10378,11107,11115,11123,11173,11180,11181,11330,11437,11438,11440,11442,11444,11453,11464,11465,11492,11495,11560,15893,15942,15948,15949,15973,15978,16270,16274,16278,17012,17044],"fullWord":11465},{"subwords":[4667,4671,4728,4731,4733,5691,5756,5782,10378,10383,11466,11478,11492,11493],"fullWord":11466},{"subwords":[326,327,337,338,341,342,399,540,541,4466,4472,4475,4601,4714,4728,4739,4891,4896,4935,4938,4971,4972,5658,5756,5782,9103,9104,9109,9117,10090,10093,10119,10136,10145,10146,10324,10327,10378,10414,10530,10536,10537,10584,10585,10595,10596,11107,11115,11145,11148,11149,11173,11180,11182,11437,11438,11442,11464,11467,11468,11492,11626,11659,11663,11668],"fullWord":11468},{"subwords":[176,177,326,327,335,341,342,528,529,540,541,605,4472,4475,4479,4492,4500,4605,4714,4774,4780,4896,4898,4935,4938,4971,4972,4985,4988,5658,5865,9103,9109,11107,11115,11145,11146,11156,11157,11213,11218,11219,11437,11438,11446,11467,11469,11489,11512,11516,11626,11645,11697,11702,11706,11707,12229,12244,12245,12246,12443],"fullWord":11469},{"subwords":[200,326,327,331,336,341,342,347,540,541,542,544,546,555,948,4461,4472,4475,4476,4489,4714,4722,4826,4896,4901,4935,4938,4939,4971,4972,4975,4983,5037,5658,5845,9103,9106,9109,9111,9127,9422,11107,11115,11123,11145,11147,11330,11437,11438,11440,11453,11467,11470,11560,11626,11628,11641,11764,15893,15928,15973,15978,16270,16278,16375,16764,16780],"fullWord":11470},{"subwords":[3638,3644,3657,3732,3744,4639,4656,4714,4763,4909,4935,4938,4971,4972,5096,5114,5163,5165,9079,9082,9109,9110,11471,11472,11619,11626,11831,11833,11841,11854,12752,12757],"fullWord":11472},{"subwords":[4639,4714,4722,4826,4909,4913,4935,4938,4939,4971,4972,4975,4983,5037,5040,5845,6023,9079,9082,9085,9109,9111,9127,9422,11471,11473,11619,11626,11641,11759,11764,12080,16178,16298,16375,16769,16780],"fullWord":11473},{"subwords":[4714,4935,4938,4971,4972,5471,5846,9109,9449,11474,11626,11688,11689,12091,12127],"fullWord":11474},{"subwords":[4714,4722,4826,4849,4935,4938,4939,4971,4972,4975,4983,5037,5471,5478,5845,5846,5847,9109,9111,9127,9422,9449,9450,11475,11626,11641,11764,12091,12097,12152,12153,16317,16375,16780,18066,18067,18083,18103,19876,19877],"fullWord":11475},{"subwords":[4671,4728,4731,5567,5691,5694,5756,5782,5785,6189,6191,10378,10383,10495,11065,11476,11478,11492],"fullWord":11476},{"subwords":[200,586,590,591,1053,4472,4475,4476,4489,4826,4849,5471,5478,5627,5658,5845,5846,5847,11107,11115,11123,11330,11437,11438,11440,11453,11477,11560,12091,12097,12152,12153,15893,15973,15978,16270,16278,16317,18066,18067,18103,19871,19876,19877],"fullWord":11477},{"subwords":[5740,5820,5984,11480,11481,11539,11543,15103,15202],"fullWord":11481},{"subwords":[5691,5694,5740,5778,5782,5785,6189,9812,9865,10383,10386,10416,10495,11065,11480,11482],"fullWord":11482},{"subwords":[5820,5984,11483,11484,11539,11543,11574,11578,11581,11588,15202,15214,15312,15748,18576,18579,18581,18595,18644,19240],"fullWord":11484},{"subwords":[5691,5694,5782,5785,6079,6189,10383,10460,10495,11065,11483,11485,11502,11574,11578,18576,18579,18595,21135],"fullWord":11485},{"subwords":[5718,7489,7526,8532,8725,8731,8775,11487,11488,11508,11885,12806],"fullWord":11488},{"subwords":[5718,5953,7489,7493,7526,7753,7815,9826,9836,9841,10015,11487,11490,11512,11891,11909,12509,12522,12525,12866,12876],"fullWord":11490},{"subwords":[4667,4671,4728,4731,4733,5691,5756,5782,10378,10383,11466,11478,11492,11493],"fullWord":11493},{"subwords":[4671,4678,4728,4731,4810,4818,5691,5756,5757,5782,5984,10378,10383,10388,11478,11492,11494,11539,11543,15060,15093,15107,15202],"fullWord":11494},{"subwords":[5691,5693,5782,5784,5790,5845,10383,10392,10451,11496,11497,16319,16330],"fullWord":11497},{"subwords":[5780,5782,10443,10942,11498,11536,11595,11598,11870,11875,12066,12845,13110,13114,20571,20875],"fullWord":11498},{"subwords":[4728,4763,5114,5146,5163,5165,5567,5756,5782,5785,10378,10443,10495,10780,11065,11492,11499,11831,11833,11834,11865,11869,11870,11884,12752,12767,12837,12845,21154,21155,21158],"fullWord":11499},{"subwords":[5782,5784,5845,5918,5953,5955,10422,10423,10433,10443,10444,10447,10822,10888,11500,11501,11512,11524,11567,11870,11871,11891,11915,12504,12505,12506,12522,12525,12527,12560,12561,12845,12848,12866,12868,12872,12876,12879,17097,17354,17359,17362,17382,17383],"fullWord":11501},{"subwords":[4671,4728,4731,5691,5756,5782,10378,10383,10460,11478,11483,11492,11502,11503,11574,11578,11579,18576,18577,18579,18595],"fullWord":11503},{"subwords":[5691,5782,5984,10383,10388,10460,11483,11502,11504,11539,11543,11574,11578,11581,11588,15107,15186,15202,15212,15214,15312,15748,18576,18579,18595,18644,19240],"fullWord":11504},{"subwords":[5782,5953,10422,10437,10441,10443,10444,10460,10822,10897,11500,11502,11505,11512,11574,11870,11879,11881,11891,11916,12010,12011,12012,12374,12504,12522,12525,12574,12581,12845,12866,12876,18595,18607,18981,19017,19026,19032,19036,19038],"fullWord":11505},{"subwords":[1576,1587,1700,5810,5984,11507,11539,11543,14995,15202],"fullWord":11507},{"subwords":[5830,9384,11508,11509,11539,11688,11690,11692,11743,11854,11860,11885,11970,12979,15202,15480,15481,15610,15627,15632],"fullWord":11509},{"subwords":[5837,11508,11510,11539,11885,11970,12979,13145,15202,15610,15627,15632,15866,21189],"fullWord":11510},{"subwords":[93,112,114,528,2848,2853,2869,2883,5856,5881,11086,11089,11213,11218,11437,11446,11512,11513,12229,12244,12245,12339],"fullWord":11513},{"subwords":[176,200,528,529,530,531,605,607,610,4472,4475,4476,4479,4483,4489,4492,4500,4501,4605,4606,4774,4785,4826,5658,5845,5865,5875,5918,11107,11115,11123,11213,11218,11219,11221,11247,11248,11330,11437,11438,11440,11446,11450,11453,11512,11514,11516,11520,11524,11560,12229,12244,12245,12246,12250,15893,15973,15978,15986,15988,15995,15996,16270,16278,16308,16381],"fullWord":11514},{"subwords":[269,528,5881,7317,7323,7467,7489,7493,7496,11127,11128,11213,11218,11220,11223,11437,11446,11487,11512,11515,12229,12230,12244,12245,12339],"fullWord":11515},{"subwords":[4667,4671,4774,5665,5822,5865,5867,11478,11512,11516,11517,12339,12340],"fullWord":11517},{"subwords":[4671,4728,4731,4774,5665,5691,5756,5782,5822,5865,10378,10383,10427,11478,11492,11512,11516,11518,12339,12340],"fullWord":11518},{"subwords":[4671,4678,4774,4810,4818,5665,5822,5865,5868,5984,5998,11478,11512,11516,11519,11539,11543,12339,12340,12358,15060,15093,15202,15213,15227],"fullWord":11519},{"subwords":[5830,5996,8503,8532,8540,8552,8625,8648,8672,9384,11489,11512,11521,11539,11645,11697,11706,11708,11743,12443,15175,15202,15383,15480,15481],"fullWord":11521},{"subwords":[337,341,399,423,430,528,637,5745,5782,10120,10136,10145,10174,10324,10344,10414,10418,10536,10544,10584,10585,10595,10605,10625,11148,11156,11157,11173,11180,11182,11185,11213,11218,11437,11442,11446,11489,11512,11522,11645,11659,11662,11668,11697,11706,12229,12238,12244,12245,12438,12439,12443],"fullWord":11522},{"subwords":[9297,11489,11512,11523,11645,11697,11706,11737,11797,12443,12448,12474],"fullWord":11523},{"subwords":[399,407,470,528,531,5745,5748,5782,5784,5845,5918,10136,10145,10151,10161,10174,10175,10324,10344,10348,10360,10418,10419,10433,11173,11180,11181,11213,11218,11221,11247,11248,11330,11437,11442,11444,11446,11450,11453,11512,11524,11525,11560,12229,12244,12245,12250,15942,15948,15949,15973,15978,15986,15995,16270,16274,16278,17012],"fullWord":11525},{"subwords":[528,531,973,987,5845,5918,6039,11213,11218,11221,11247,11248,11249,11330,11348,11351,11437,11446,11450,11453,11512,11524,11526,11560,11561,11569,12082,12229,12244,12245,12250,12367,15973,15978,15986,15995,15999,16009,16270,16278,16283,16291],"fullWord":11526},{"subwords":[3257,3336,5845,5856,5918,6023,8532,8539,8540,8547,11461,11512,11524,11527,11563,12080,16298,16574],"fullWord":11527},{"subwords":[4671,4672,4680,4774,4785,4786,4826,5665,5822,5823,5845,5865,5875,5918,11478,11479,11512,11516,11520,11524,11528,12339,12340,12344,16319,16320,16330,16335,16373,16381],"fullWord":11528},{"subwords":[5845,5918,6031,6039,6042,11512,11524,11529,11569,12082,12339,12367,16319,16330,16334,16335,16342,16373,16374,16394],"fullWord":11529},{"subwords":[399,488,528,532,693,694,1009,5620,5745,5782,6055,6074,10136,10145,10149,10174,10247,10251,10324,10344,10349,10418,10437,10460,11173,11180,11192,11213,11218,11252,11257,11361,11362,11437,11442,11446,11451,11456,11502,11512,11530,11574,11575,11576,12229,12244,12245,12292,12325,12374,18370,18389,18393,18408,18541,18547,18549,18595,18607],"fullWord":11530},{"subwords":[8483,8532,8534,8540,11483,11512,11531,11574,11578,12339,12374,12612,18576,18579,18583,18595,18607,18697,18698,18705,18706,18708,18967],"fullWord":11531},{"subwords":[5832,5833,5845,5918,9307,9312,9318,9325,9422,9444,9446,9447,11489,11512,11524,11532,11574,11645,11646,11697,11706,11710,11728,11729,11732,11764,11780,11786,11789,12368,12374,12376,12443,12447,12463,12471,16375,16399,16400,16457,16858,16860,16907,16911,17179,17180,17255,17826,17830,18595,18607,18624,18844,18850,18882,18886,18891,18894,18898,18900,18919,18947],"fullWord":11532},{"subwords":[5953,11512,11533,11539,11574,11592,11891,11916,11970,11977,11989,12010,12011,12374,12522,12525,12548,12550,12574,12581,12583,12590,12866,12876,12979,13008,15202,15238,15241,15312,15610,15627,15632,15691,15694,15748,18595,18607,18621,18644,18649,18981,19026,19032,19036,19038,19040,19093,19101,19105],"fullWord":11533},{"subwords":[4671,4763,4865,5114,5163,5165,6118,11478,11536,11537,11595,11596,11831,11833,12066,12067,12752,13110,13111,20524,20532,20533,20875],"fullWord":11537},{"subwords":[4120,4131,5984,6008,11539,11540,11543,11545,15021,15202],"fullWord":11540},{"subwords":[5691,5694,5698,5782,5785,5825,5984,6189,6196,10383,10388,10391,10495,11065,11074,11539,11543,11544,15107,15201,15202,15866],"fullWord":11544},{"subwords":[5845,5984,6018,6046,11483,11486,11539,11543,11546,11547,11574,11578,11581,11582,11583,11588,11590,15202,15214,15224,15290,15306,15312,15748,16319,16330,16340,16425,16457,17823,17830,17840,18576,18579,18582,18588,18595,18644,18648,18658,19240,19242],"fullWord":11547},{"subwords":[4671,4678,4709,4810,4818,5351,5667,5669,5984,5988,7467,7468,7489,7530,7979,11478,11487,11539,11543,11548,11549,15060,15093,15141,15202],"fullWord":11549},{"subwords":[5984,5988,6008,7467,7489,7530,11487,11539,11543,11545,11548,11550,15141,15202],"fullWord":11550},{"subwords":[5845,5984,5988,5992,7467,7473,7489,7492,7530,7533,11487,11539,11543,11546,11548,11551,12081,15141,15148,15202,15224,16319,16330,16340,16425,16433],"fullWord":11551},{"subwords":[5830,5953,5996,9360,9384,9400,11489,11512,11539,11552,11645,11697,11706,11708,11725,11743,11854,11860,11891,11970,11977,12443,12513,12514,12522,12525,12548,12550,12866,12876,12979,15175,15202,15238,15480,15481,15610,15627,15632],"fullWord":11552},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":11554},{"subwords":[5782,5830,5996,9384,10414,10536,10544,10549,10584,10595,10605,10607,10625,10632,10677,11489,11512,11539,11555,11645,11659,11668,11669,11697,11706,11708,11743,12438,12439,12443,15175,15202,15444,15473,15480,15481],"fullWord":11555},{"subwords":[5782,5914,5953,10422,10443,10444,10822,10824,10882,10886,11500,11512,11539,11556,11870,11891,11970,11971,11977,12504,12522,12525,12548,12550,12845,12866,12876,12979,15202,15238,15610,15621,15627,15632],"fullWord":11556},{"subwords":[528,817,869,5588,5595,5976,11213,11218,11276,11286,11437,11446,11512,11539,11557,12229,12244,12245,12248,12319,14808,14821,14975,15202,15207],"fullWord":11557},{"subwords":[5984,5998,11512,11539,11543,11558,12339,15202],"fullWord":11558},{"subwords":[93,96,112,113,399,400,407,470,2813,2835,2839,2848,2853,2854,2855,2868,3021,3453,3458,5782,5784,5845,6023,10072,10073,10077,10136,10145,10151,10161,10324,10360,11086,11089,11093,11101,11105,11173,11180,11181,11330,11437,11442,11444,11453,11560,11562,12080,15880,15942,15948,15949,15973,15978,16121,16129,16270,16274,16278,16298,17012],"fullWord":11562},{"subwords":[4671,4672,4680,4826,5845,8483,8484,8486,8532,8534,8539,11478,11479,11563,11564,16319,16320,16330,16574,16581],"fullWord":11564},{"subwords":[5845,6031,6039,6042,8483,8532,8534,8539,11563,11565,11569,12082,16319,16330,16334,16342,16574,16609],"fullWord":11565},{"subwords":[5845,5918,5953,5955,6039,11512,11524,11567,11568,11569,11891,11915,11996,12002,12082,12367,12506,12522,12525,12527,12560,12561,12563,12866,12868,12872,12876,12879,17382,17383,17388,17395,17434],"fullWord":11568},{"subwords":[4671,4672,4680,4826,5845,6031,6039,6042,11478,11479,11569,11570,12082,16319,16320,16323,16330,16334,16342],"fullWord":11570},{"subwords":[5845,6031,6039,6042,6043,11569,11571,12082,16319,16330,16334,16342],"fullWord":11571},{"subwords":[5845,6039,11539,11569,11572,12082,15202,15224],"fullWord":11572},{"subwords":[399,407,470,488,1009,5616,5620,5626,5782,5784,5845,6055,10136,10145,10151,10152,10161,10241,10247,10324,10360,10366,10459,10460,10465,11173,11180,11181,11192,11195,11330,11356,11361,11362,11366,11376,11437,11442,11444,11453,11456,11457,11502,11506,11560,11574,11575,11576,11577,15942,15948,15949,15960,15973,15978,15980,16041,16043,16270,16274,16278,16293,16457,16459,17012,17022,17023,17168,17750,17811,17813,17830,18341,18370,18374,18389,18393,18398,18407,18541,18547,18548,18549,18552,18559,18595,18660],"fullWord":11577},{"subwords":[5838,5840,5984,11483,11539,11543,11574,11578,11580,11581,11588,11592,11970,11989,12010,12011,12979,13008,15202,15214,15222,15312,15610,15627,15632,15691,15694,15748,18576,18579,18595,18644,18981,19026,19032,19093,19101,19240],"fullWord":11580},{"subwords":[5845,5984,6018,6046,11483,11486,11539,11543,11546,11547,11574,11578,11581,11582,11583,11588,11590,15202,15214,15224,15290,15306,15312,15748,16319,16330,16340,16425,16457,17823,17830,17840,18576,18579,18582,18588,18595,18644,18648,18658,19240,19242],"fullWord":11582},{"subwords":[4763,5114,5119,5163,5165,5234,5237,5242,8532,8721,8725,8726,8775,8776,8892,11574,11584,11831,11833,12010,12011,12018,12752,12802,12806,18595,18697,18705,18743,18967,18981,18983,19026,19032],"fullWord":11584},{"subwords":[5782,5785,6072,6079,8519,8532,8607,10460,10495,11065,11502,11574,11585,12215,18595,18697,18705,18724,18806,18807,18967,21135],"fullWord":11585},{"subwords":[5735,5830,5832,5984,5995,9384,9444,11483,11539,11543,11553,11574,11578,11581,11586,11588,11743,11786,11787,11792,15202,15214,15217,15312,15321,15480,15481,15542,15748,18576,18579,18595,18644,18844,18847,18882,18886,18889,18941,19240,19285],"fullWord":11586},{"subwords":[5832,7489,7493,7512,7540,7604,7637,9325,9444,11487,11489,11512,11574,11587,11645,11649,11697,11706,11711,11729,11786,12374,12443,12463,18595,18607,18844,18882,18886,18894,18898,18901,18902],"fullWord":11587},{"subwords":[4671,4678,4810,4818,4842,5984,11478,11483,11539,11543,11574,11578,11579,11581,11588,11589,15060,15093,15202,15214,15312,15318,15748,18576,18577,18579,18595,18644,18645,19240,19241],"fullWord":11589},{"subwords":[5845,5984,6018,6046,11483,11486,11539,11543,11546,11547,11574,11578,11581,11582,11583,11588,11590,15202,15214,15224,15290,15306,15312,15748,16319,16330,16340,16425,16457,17823,17830,17840,18576,18579,18582,18588,18595,18644,18648,18658,19240,19242],"fullWord":11590},{"subwords":[3161,3429,3430,3432,4159,5830,5832,6057,9079,9384,9444,11539,11541,11553,11574,11591,11619,11743,11786,11787,11792,15021,15051,15202,15217,15312,15411,15480,15481,15542,15748,18595,18644,18823,18844,18847,18882,18886,18889,18941,19267,19285],"fullWord":11591},{"subwords":[5845,6004,6018,11539,11574,11592,11593,11970,11973,11987,11989,12007,12010,12011,12014,12030,12872,12979,12982,13007,13008,13011,15202,15224,15306,15312,15610,15611,15627,15632,15638,15676,15691,15694,15695,15700,15748,16457,17198,17382,17419,17429,17435,17830,17924,17930,18595,18644,18648,18981,18985,19026,19032,19033,19034,19093,19101,19103,19113],"fullWord":11593},{"subwords":[5691,5782,10383,10460,11483,11502,11574,11578,11594,18576,18579,18595],"fullWord":11594},{"subwords":[6122,7489,7493,7604,11487,11489,11512,11595,11597,11645,11649,11697,11706,11711,12390,12443,20579,20742,20774,20785,20790],"fullWord":11597},{"subwords":[4671,4728,4731,4865,5691,5756,5782,6118,10378,10383,10490,11478,11492,11595,11596,11598,11599,20524,20532,20533,20566],"fullWord":11599},{"subwords":[5691,5782,5984,6118,6119,10383,10388,11539,11543,11595,11598,11600,15107,15202,20532,20587],"fullWord":11600},{"subwords":[3732,3744,9079,11603,11619,11797,11854,12075],"fullWord":11603},{"subwords":[93,112,399,2813,2835,2848,2853,2854,3453,5782,10072,10073,10136,10145,10314,10324,11086,11089,11101,11173,11180,11427,11429,11437,11442,11604,21241],"fullWord":11604},{"subwords":[341,347,555,586,9369,9422,11265,11330,11608,11609,11772,11813,11854,12872,13048,15973,16764,17378,18083,18103,18112,19871],"fullWord":11609},{"subwords":[341,347,555,9370,9422,11265,11330,11399,11400,11610,11611,11772,11813,11854,12066,12072,12872,15973,16089,16764,17378,17464,18189,18190,18243,20449],"fullWord":11611},{"subwords":[341,347,504,536,555,945,9162,9163,9422,11152,11155,11197,11198,11330,11612,11613,15973,16764],"fullWord":11613},{"subwords":[341,347,555,557,973,9162,9163,9422,9423,11152,11155,11330,11348,11612,11614,11774,12082,15973,16764,16903],"fullWord":11614},{"subwords":[4415,9079,9096,9101,9865,11619,11620,11621,11656],"fullWord":11621},{"subwords":[3120,3520,5778,5782,9079,9150,10414,10416,10518,10525,10536,10566,10584,10595,11619,11620,11622,11656,11659,11668,11673],"fullWord":11622},{"subwords":[3689,3693,3732,3777,3911,3913,9097,9207,9360,9400,11623,11624,11697,11725,11854,11891,11977,12443,12513,12522,12548,12550,12965,15480,15592,15627],"fullWord":11624},{"subwords":[3693,3694,3732,3911,3912,9409,9422,11623,11625,11759,11772,11854,12872,12965,12971,13007,13025,15480,15489,15592,15599,15627,15638,16178,16236,16769,16889,17316,17722],"fullWord":11625},{"subwords":[326,341,349,540,854,869,4472,4896,4971,5318,9376,11107,11145,11276,11285,11626,11627,11637,14736,14742,14776,14808,15428,15480],"fullWord":11627},{"subwords":[148,326,341,540,4438,4472,4578,4896,4928,4934,4971,5564,11107,11145,11408,11626,11629,11632,21051,21140],"fullWord":11629},{"subwords":[4714,4774,4780,4928,4935,4936,4938,4971,4972,4985,4988,4989,5865,9109,11489,11512,11516,11626,11630,11645,11697,11702,11703,11706,11707,12443],"fullWord":11630},{"subwords":[4714,4728,4739,4928,4935,4936,4938,4971,4972,5756,5782,9109,9117,9118,10378,10414,10530,10536,10537,10584,10595,10596,11492,11626,11631,11659,11663,11668],"fullWord":11631},{"subwords":[4714,4722,4826,4935,4938,4939,4947,4956,4971,4972,4975,4983,5037,5716,5845,7460,7489,7492,9109,9111,9127,9422,11487,11626,11633,11634,11641,11649,11654,11764,12081,16375,16780],"fullWord":11634},{"subwords":[4714,4761,4935,4938,4942,4947,4971,4972,5680,5832,7489,7540,7637,9109,9444,11487,11574,11626,11633,11635,11649,11786,18595,18835,18844,18845,18882,18886,18887],"fullWord":11635},{"subwords":[4947,4971,5485,7637,8145,8175,9449,11626,11636,11649,12091,12104,18882,19418,19429],"fullWord":11636},{"subwords":[4714,4728,4739,4935,4938,4947,4971,4972,5756,5782,7477,7478,7484,7489,7586,7599,7684,7688,9109,9117,10378,10398,10414,10530,10536,10537,10584,10595,10596,11487,11492,11626,11633,11639,11649,11659,11663,11668],"fullWord":11639},{"subwords":[1511,1777,1867,2428,4971,5362,9073,9077,11626,11637,11640,15402,15428,15480],"fullWord":11640},{"subwords":[4971,4983,5037,9127,9422,9423,9447,11626,11641,11642,11643,11774,11780,11783,12082,16903,16907,16915,17179,18882,18947],"fullWord":11643},{"subwords":[326,341,540,4472,4574,4578,4896,4971,11107,11145,11399,11408,11626,11644,20303,20314,20493,21051,21079,21140],"fullWord":11644},{"subwords":[4714,4935,4938,4971,4972,5827,6406,6446,6537,6543,6544,6553,6554,9109,11605,11626,11647,11648],"fullWord":11648},{"subwords":[7635,7637,8648,8678,8685,8688,8691,8935,9422,9447,11649,11650,11651,11654,11780,12081,16627,16653,16805,16809,16907,17179,17183,18742,18882,18947,18967],"fullWord":11651},{"subwords":[7637,8186,8648,8688,11649,11650,11652,12215,18806,18810,18882,18967],"fullWord":11652},{"subwords":[7604,9297,9360,11649,11653,11697,11711,11854,11891,12443,12509,12522,12528],"fullWord":11653},{"subwords":[183,326,341,540,564,4472,4896,4971,5163,9885,11107,11145,11265,11626,11655,11831,11841,11854,12675],"fullWord":11655},{"subwords":[8532,8625,8636,8648,8693,9896,11656,11658,20129,20150],"fullWord":11658},{"subwords":[326,337,341,540,594,4456,4472,4578,4891,4896,4971,4977,9124,9128,10090,10108,10119,10136,10304,10530,10584,10585,10618,11107,11116,11145,11148,11173,11182,11408,11626,11659,11660,11663,21051,21140],"fullWord":11660},{"subwords":[269,286,337,341,399,5782,7293,7298,7317,7323,7477,7489,7585,7599,7671,7688,9158,10109,10136,10145,10324,10398,10414,10536,10584,10585,10595,11127,11128,11132,11148,11173,11180,11182,11437,11442,11487,11649,11659,11661,11668],"fullWord":11661},{"subwords":[4714,4728,4739,4774,4780,4935,4938,4971,4972,4985,4988,5756,5782,5865,9109,9117,10378,10414,10427,10530,10536,10537,10544,10584,10595,10596,10605,10606,10625,10628,11489,11492,11512,11516,11626,11645,11659,11663,11664,11668,11697,11702,11706,11707,12438,12439,12443],"fullWord":11664},{"subwords":[4714,4728,4739,4810,4818,4935,4938,4971,4972,4973,5023,5756,5782,5830,9109,9117,9119,9384,9385,10378,10414,10530,10536,10537,10549,10584,10595,10596,10677,11492,11539,11626,11659,11663,11665,11668,11669,11743,11744,15060,15202,15428,15433,15444,15473,15474,15480,15481,15482],"fullWord":11665},{"subwords":[4714,4728,4739,4865,4935,4938,4971,4972,5756,5782,9109,9117,10378,10414,10490,10530,10536,10537,10584,10595,10596,11492,11595,11598,11626,11659,11663,11666,11668,20524,20566,20720,20733,20751,20755,20756],"fullWord":11666},{"subwords":[4967,4969,4971,4977,9124,9128,9129,9152,9157,10530,10583,10584,10618,11626,11659,11663,11667,11676,21140],"fullWord":11667},{"subwords":[5782,5784,5830,5831,5845,9384,9389,9409,9416,9422,10414,10415,10536,10549,10550,10551,10584,10595,10598,10677,11539,11659,11668,11669,11670,11671,11685,11743,11745,11764,11765,15202,15224,15444,15445,15473,15475,15480,15481,15484,15489,15526,16375,16889,16890,17072,17076,17077,17171,17173,17722],"fullWord":11670},{"subwords":[5782,5846,9145,9149,10414,10470,10536,10552,10584,10595,11659,11668,11672,12110],"fullWord":11672},{"subwords":[4714,4728,4739,4935,4938,4957,4971,4972,5756,5778,5782,9109,9117,9150,9885,10378,10414,10416,10530,10536,10537,10566,10567,10584,10595,10596,11492,11626,11656,11659,11663,11668,11673,11674],"fullWord":11674},{"subwords":[5778,5782,5830,9150,9384,9396,10414,10416,10536,10549,10566,10571,10584,10595,10677,11539,11656,11659,11668,11669,11673,11675,11743,11749,15202,15444,15473,15480,15481],"fullWord":11675},{"subwords":[4714,4728,4739,4744,4935,4938,4967,4971,4972,5756,5780,5782,9109,9117,9152,10378,10414,10530,10536,10537,10584,10595,10596,11492,11626,11659,11663,11668,11676,11677,11678],"fullWord":11678},{"subwords":[5780,5782,5830,9152,9153,9384,10414,10536,10549,10584,10595,10677,11539,11659,11668,11669,11676,11677,11679,11743,15202,15444,15473,15477,15480,15481],"fullWord":11679},{"subwords":[5780,5781,5782,5784,5845,9152,9155,9416,9422,10414,10415,10536,10551,10584,10595,10598,10679,11659,11668,11671,11676,11677,11680,11682,11685,11764,16368,16375,16834,17076,17077,17165,17171],"fullWord":11680},{"subwords":[5780,5782,5832,9152,9444,10414,10460,10536,10580,10584,10595,10691,10694,11502,11574,11659,11668,11676,11677,11681,11686,11786,18591,18595,18844,18863,18866,18872,18882,18886],"fullWord":11681},{"subwords":[4971,5163,5213,9125,10530,10533,10584,10609,10878,11626,11659,11663,11683,11831,11841,11854,11856,11865,12812,12837,15428,15480,15600,15617,15627],"fullWord":11683},{"subwords":[9325,9334,9335,9360,10584,10605,10609,10652,10656,10663,10691,10814,10897,11659,11686,11687,11697,11729,11854,11856,11879,11891,12010,12438,12443,12463,12522,12574,12812,12869,18863,18882,18894,19002,19026,19036],"fullWord":11687},{"subwords":[5845,9422,11508,11511,11688,11690,11691,11694,11764,11772,11854,11885,11890,12872,16375,17382],"fullWord":11691},{"subwords":[5830,5831,5845,9384,9389,9409,9422,11539,11688,11692,11693,11694,11743,11745,11764,11765,15202,15224,15480,15481,15484,15489,15526,16375,16850,16889,16890,17722],"fullWord":11693},{"subwords":[7604,11649,11695,11697,11711,11714,11715,12443],"fullWord":11695},{"subwords":[341,347,555,560,561,9162,9163,9422,11152,11155,11265,11266,11330,11612,11696,11772,11813,11854,11885,11890,12872,15973,16764,17378],"fullWord":11696},{"subwords":[3413,4639,4714,4774,4780,4909,4935,4938,4971,4972,4985,4988,5856,5865,9079,9082,9109,9207,11471,11489,11512,11516,11619,11626,11645,11697,11698,11699,11702,11706,11707,12410,12443],"fullWord":11699},{"subwords":[3413,4159,5830,5856,5996,9079,9207,9384,11489,11512,11539,11541,11619,11645,11697,11698,11700,11706,11708,11743,12410,12412,12443,15021,15175,15202,15411,15480,15481],"fullWord":11700},{"subwords":[3413,3415,5845,5856,5918,6023,9079,9085,9207,9307,9422,11489,11512,11524,11619,11645,11646,11697,11698,11701,11706,11710,11728,11759,11764,12080,12410,12443,12447,16178,16298,16375,16769,16858,16859,16860],"fullWord":11701},{"subwords":[4714,4774,4780,4928,4935,4936,4938,4971,4972,4985,4988,4989,5865,9109,11489,11512,11516,11626,11630,11645,11697,11702,11703,11706,11707,12443],"fullWord":11703},{"subwords":[4714,4774,4780,4810,4818,4935,4938,4971,4972,4973,4985,4988,4990,5023,5830,5865,5996,9109,9384,9385,11489,11512,11516,11539,11626,11645,11697,11702,11704,11706,11707,11708,11743,11744,12358,12443,15060,15175,15202,15215,15227,15428,15433,15480,15481,15482,15491],"fullWord":11704},{"subwords":[5830,5831,5845,5918,5996,6000,9307,9384,9389,9409,9422,11489,11512,11524,11539,11645,11646,11697,11706,11708,11709,11710,11728,11743,11745,11764,11765,12443,12447,15175,15177,15202,15224,15296,15480,15481,15484,15489,15500,15526,15527,16375,16439,16858,16860,16889,16890,16893,17722],"fullWord":11709},{"subwords":[5782,7477,7489,7493,7599,7604,7680,7688,9265,10398,10414,10536,10544,10584,10595,10605,10625,10637,11487,11489,11512,11645,11649,11659,11668,11697,11706,11711,11712,12438,12439,12443],"fullWord":11712},{"subwords":[341,9162,11152,11156,11213,11607,11697,11714,11715,11716,12244,12443],"fullWord":11716},{"subwords":[9307,9422,11697,11714,11715,11717,11720,11728,12443,12447,12462,16858],"fullWord":11717},{"subwords":[7604,9297,11649,11697,11711,11714,11718,12443],"fullWord":11718},{"subwords":[9297,9360,11697,11714,11719,11854,11891,12443,12522,12528],"fullWord":11719},{"subwords":[9297,11489,11512,11645,11697,11706,11714,11722,12443,12448],"fullWord":11722},{"subwords":[9297,9360,11697,11723,11854,11891,12066,12071,12443,12522,12528,12606,13119,20774,20804,20897],"fullWord":11723},{"subwords":[341,349,552,643,869,9204,9360,9376,9378,9400,11156,11213,11243,11265,11268,11276,11697,11725,11726,11810,11854,11891,11977,12244,12443,12513,12522,12548,12550,12551,12680,14784,14808,14821,14838,15480,15564,15568,15627,15628],"fullWord":11726},{"subwords":[9307,9360,9366,9400,9405,9409,9422,11697,11725,11727,11728,11772,11854,11891,11915,11977,11978,12443,12447,12513,12522,12527,12548,12550,12555,12560,12872,13007,15480,15489,15627,15638,15684,16851,16858,16889,17383,17722],"fullWord":11727},{"subwords":[4714,4761,4774,4780,4788,4935,4938,4942,4971,4972,4985,4988,5008,5680,5832,5865,9109,9325,9444,11489,11512,11516,11574,11626,11645,11697,11702,11706,11707,11729,11730,11786,12374,12443,12463,18595,18607,18610,18835,18844,18845,18882,18886,18887,18894,18898,18899],"fullWord":11730},{"subwords":[5830,5832,5996,9245,9325,9331,9338,9384,9444,11489,11512,11539,11553,11574,11645,11697,11706,11708,11729,11731,11743,11786,11787,11792,12374,12443,12463,12464,12466,15175,15202,15217,15241,15312,15480,15481,15542,15748,18595,18607,18644,18649,18844,18847,18882,18886,18889,18894,18898,18941,19285,19289],"fullWord":11731},{"subwords":[5832,5846,9325,9444,11489,11512,11534,11574,11645,11697,11706,11729,11734,11736,11786,12184,12374,12443,12463,12659,18595,18607,18844,18882,18886,18894,18898,19434,19438,19701,19702,19730,19776],"fullWord":11734},{"subwords":[5832,5846,9325,9444,11489,11512,11534,11574,11645,11697,11706,11729,11734,11736,11786,12184,12374,12443,12463,12659,18595,18607,18844,18882,18886,18894,18898,19434,19438,19701,19702,19730,19776],"fullWord":11736},{"subwords":[5845,5918,9307,9422,11489,11512,11524,11645,11646,11697,11706,11710,11728,11737,11738,11764,11797,11800,12443,12447,12474,12476,16375,16483,16858,16860,16922],"fullWord":11738},{"subwords":[341,657,716,9297,11156,11213,11264,11408,11697,11724,11739,12201,12244,12252,12311,12443,21051,21144],"fullWord":11739},{"subwords":[9413,9422,9423,11740,11772,11773,11774,11854,12002,12082,12872,16903,17434],"fullWord":11740},{"subwords":[3429,3732,3965,11741,11854,12010,12869,13038,18823,18882,19026],"fullWord":11741},{"subwords":[269,341,343,349,553,817,869,5588,5830,5976,5988,7317,7323,7326,7332,7375,7461,7489,7530,7921,8009,8010,9158,9376,9384,11127,11128,11132,11276,11286,11288,11292,11437,11487,11539,11649,11742,11743,14758,14762,14808,14810,14975,15141,15150,15202,15461,15480,15481],"fullWord":11742},{"subwords":[341,349,869,9162,9376,11152,11276,11607,11746,14808,15480],"fullWord":11746},{"subwords":[5830,6008,9384,11539,11743,11747,15202,15480,15481,15485],"fullWord":11747},{"subwords":[7604,8009,8015,9391,11649,11697,11711,11714,11748,12443,15461,15480,15486,15494],"fullWord":11748},{"subwords":[8648,8678,8685,8688,8691,8934,8935,9409,9422,9447,11752,11753,11780,15480,15489,16627,16648,16653,16889,16907,17179,17183,17722,17881,18742,18882,18947,18967,19285,19287],"fullWord":11753},{"subwords":[126,134,341,347,555,2848,2868,3041,3052,3064,3402,3429,4238,4241,9422,9447,11086,11105,11160,11330,11356,11359,11361,11376,11617,11618,11756,11759,11780,15880,15973,16041,16129,16157,16178,16764,16769,16907,17179,18347,18389,18407,18823,18830,18882,18947],"fullWord":11756},{"subwords":[148,158,200,326,336,341,347,540,544,555,4438,4445,4461,4472,4489,4896,4901,4928,4971,4983,5037,9127,9422,11107,11123,11145,11147,11330,11626,11628,11641,11757,15893,15928,15973,16764],"fullWord":11757},{"subwords":[341,347,555,9162,9163,9422,11152,11155,11330,11607,11612,11758,15973,16764],"fullWord":11758},{"subwords":[3164,4268,4271,4293,5656,5845,5846,5847,6023,9079,9085,9422,11619,11759,11760,11764,12080,12152,12163,16178,16260,16298,16375,16769,18066,18083,18103,19876],"fullWord":11760},{"subwords":[3429,4238,4241,4293,4375,4388,4394,9100,9422,9447,11759,11761,11780,12163,12177,16178,16260,16265,16769,16907,16917,17179,17203,18083,18085,18103,18823,18830,18882,18947],"fullWord":11761},{"subwords":[4928,4971,4983,5037,9127,9422,11626,11637,11638,11641,11762],"fullWord":11762},{"subwords":[5830,5831,5845,6039,9384,9389,9409,9422,9423,11539,11569,11743,11745,11764,11765,11766,11774,12082,15202,15216,15224,15480,15481,15484,15489,15526,15530,16356,16375,16376,16889,16890,16895,16899,16903,17722],"fullWord":11766},{"subwords":[5830,5831,5845,9384,9389,9409,9422,11539,11743,11745,11755,11764,11765,11767,15202,15224,15480,15481,15484,15489,15490,15526,15866,15867,16375,16889,16890,17722,21130,21212],"fullWord":11767},{"subwords":[6647,6651,6654,9135,9422,9447,11768,11780,16801,16907,17179,18882,18947],"fullWord":11768},{"subwords":[325,341,347,555,556,574,579,744,751,932,961,8290,8296,8321,8324,8362,8367,8648,8664,8671,8678,9178,9196,9422,11270,11275,11330,11335,11769,12079,13336,13651,13758,13759,13839,13841,14421,15973,16014,16531,16627,16639,16764,16853,16883,17476],"fullWord":11769},{"subwords":[337,340,341,347,470,555,594,595,9414,9422,10136,10161,10304,10313,10584,10585,10586,10618,11148,11151,11173,11182,11330,11408,11424,11659,11685,11770,15931,15942,15973,16103,16764,17012,17039,17076,17082,17149,21051,21055],"fullWord":11770},{"subwords":[4714,4722,4728,4739,4742,4826,4935,4938,4939,4971,4972,4975,4983,5037,5756,5760,5782,5784,5845,9109,9111,9117,9121,9127,9416,9417,9422,10378,10414,10415,10530,10535,10536,10537,10551,10584,10595,10596,10598,11492,11495,11626,11641,11659,11663,11668,11671,11685,11764,11771,16375,16780,16784,17044,17068,17069,17076,17077,17078,17171,17172],"fullWord":11771},{"subwords":[337,340,341,347,470,555,557,973,9414,9422,9423,10136,10161,10236,10584,10585,10586,11148,11151,11173,11182,11330,11348,11659,11685,11774,11775,12082,15931,15935,15942,15973,16764,16903,16904,17012,17013,17076,17081],"fullWord":11775},{"subwords":[4714,4722,4723,4826,4935,4938,4939,4971,4972,4975,4983,5037,5055,5845,6039,9109,9111,9127,9422,9423,11569,11626,11641,11764,11774,11776,12082,16356,16375,16376,16780,16782,16903],"fullWord":11776},{"subwords":[5845,6039,9422,9423,11569,11764,11774,11777,12082,16356,16357,16375,16376,16903],"fullWord":11777},{"subwords":[9413,9422,9423,11774,11778,12082,16903],"fullWord":11778},{"subwords":[9422,9423,11774,11779,12082,12173,16903,18083,18103,18116],"fullWord":11779},{"subwords":[4714,4722,4724,4761,4762,4826,4935,4938,4939,4942,4945,4971,4972,4975,4983,5037,5063,5680,5684,5832,5833,5845,9109,9111,9127,9422,9444,9446,9447,11574,11626,11641,11642,11764,11780,11781,11786,11789,16375,16457,16780,16907,16911,16912,17179,17180,17830,17856,18575,18595,18835,18837,18844,18845,18850,18882,18886,18887,18891,18947],"fullWord":11781},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":11782},{"subwords":[5845,5846,5847,6039,9422,9423,9431,11569,11764,11774,11785,12082,12152,12156,12173,16356,16375,16376,16903,18066,18073,18083,18103,18116,19876,19882],"fullWord":11785},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":11788},{"subwords":[5830,5832,9384,9444,11539,11553,11574,11743,11786,11787,11790,11792,15202,15217,15312,15480,15481,15542,15748,18595,18644,18844,18847,18882,18886,18889,18941,19285],"fullWord":11790},{"subwords":[337,341,349,434,488,869,911,9376,9437,10121,10126,10136,10502,10584,10585,10675,10691,11148,11173,11182,11192,11276,11303,11320,11361,11659,11686,11791,14780,14808,14898,15399,15480,18347,18349,18389,18449,18863,18882,19210,19216,19262,19285],"fullWord":11791},{"subwords":[4714,4761,4810,4818,4935,4938,4942,4971,4972,4973,5023,5034,5680,5830,5832,9109,9384,9385,9444,11539,11553,11574,11626,11743,11744,11786,11787,11792,11793,15060,15202,15217,15312,15318,15428,15433,15480,15481,15482,15542,15748,18595,18644,18835,18844,18845,18847,18882,18886,18887,18889,18941,18942,19274,19285],"fullWord":11793},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":11794},{"subwords":[5832,9325,9444,11489,11512,11574,11645,11697,11706,11729,11786,11795,11796,12374,12443,12463,18595,18607,18630,18844,18882,18886,18894,18898,18921,18950,18969],"fullWord":11796},{"subwords":[5830,5831,5845,9384,9389,9409,9422,11539,11743,11745,11764,11765,11797,11798,11799,11800,15202,15219,15224,15373,15480,15481,15484,15489,15526,16375,16483,16889,16890,16922,17722],"fullWord":11799},{"subwords":[7604,11649,11697,11711,11714,11737,11797,11801,12443,12474,21024],"fullWord":11801},{"subwords":[9178,9196,9422,11797,11803,11804,12199,13871,13874,14421,14551,16853,16883,16922,18083,18103,18114,18135,19624,19628,19825],"fullWord":11804},{"subwords":[5845,5918,9307,9422,11489,11512,11524,11645,11646,11697,11706,11710,11728,11764,11805,12443,12447,16375,16858,16860,16929,21253,21255],"fullWord":11805},{"subwords":[11489,11512,11645,11697,11706,11806,12443,21255],"fullWord":11806},{"subwords":[5782,10414,10536,10584,10595,11659,11668,11807],"fullWord":11807},{"subwords":[3413,5856,9079,9207,11489,11512,11619,11645,11688,11697,11698,11706,11809,12410,12443],"fullWord":11809},{"subwords":[176,183,215,528,529,605,675,4446,4472,4475,4479,4492,4500,4605,4763,4767,4774,5114,5163,5165,5172,5173,5176,5658,5865,5953,11107,11115,11213,11218,11219,11265,11437,11438,11446,11512,11516,11810,11811,11831,11833,11891,11893,11896,12229,12244,12245,12246,12493,12499,12522,12523,12525,12752,12866,12876],"fullWord":11811},{"subwords":[183,1009,1020,4472,4475,4551,4763,5114,5163,5165,5234,5237,5620,5658,6055,11107,11115,11265,11361,11362,11363,11437,11438,11456,11574,11575,11814,11815,11831,11833,12010,12011,12686,12752,18339,18389,18393,18394,18432,18541,18549,18595,18970,18981,18983,19026,19032],"fullWord":11815},{"subwords":[1560,2042,2058,2059,2120,2122,2123,4618,4763,4764,5114,5163,5165,5632,11817,11818,11831,11833,12752],"fullWord":11818},{"subwords":[1700,2042,2072,2120,2122,2124,2205,2446,5632,11539,11817,11819,11970,12861,12959,12979,14995,15202,15576,15579,15610,15627,15632],"fullWord":11819},{"subwords":[27,51,574,2029,2049,2197,2738,2848,2859,2863,2921,3617,3732,3733,3735,3765,3864,11086,11265,11270,11817,11820,11947,13154],"fullWord":11820},{"subwords":[1636,1817,1851,1852,1853,2095,2106,5782,5813,9077,10414,10443,10504,10536,10584,10587,10591,10595,10609,10748,10753,11659,11668,11817,11821,11822,11854,11856,11870,12695,12700,12812,12845],"fullWord":11822},{"subwords":[325,932,2848,2868,3025,3189,3193,3201,3225,3336,3732,3733,3734,3944,8290,8296,8362,8714,11086,11094,11095,11096,11097,11105,11265,11330,11335,11813,11824,11825,12806,12808,12810,12872,15880,15973,16129,16172,16531,16664,17316,17378],"fullWord":11825},{"subwords":[3638,3644,3657,3697,3698,3732,3744,4639,4651,4656,4763,5096,5099,5114,5163,5165,11826,11827,11831,11833,12752],"fullWord":11827},{"subwords":[3697,3732,3744,3748,3898,3906,3911,11539,11826,11828,11970,12965,12979,15021,15202,15592,15593,15610,15627,15632],"fullWord":11828},{"subwords":[3732,3765,3864,3984,4049,4293,4302,11826,11830,11947,12085,14016,14435,19624],"fullWord":11830},{"subwords":[4728,4763,4769,4826,5114,5117,5146,5148,5163,5165,5167,5171,5221,5223,5756,5760,5782,5784,5845,10378,10443,10447,10780,10782,10888,11492,11495,11831,11833,11834,11835,11839,11845,11865,11868,11870,11871,12752,12755,12837,12844,12845,12848,12872,16363,17044,17097,17323,17354,17357,17359,17360,17382],"fullWord":11835},{"subwords":[4763,4769,4826,5114,5117,5163,5165,5167,5171,5221,5223,5845,11508,11511,11831,11833,11836,11837,11839,11845,11885,11890,12752,12755,12872,17323,17382],"fullWord":11837},{"subwords":[4763,4767,4774,4810,4818,5114,5115,5163,5165,5172,5176,5213,5392,5865,5953,11512,11516,11539,11831,11833,11838,11891,11896,11970,11977,12358,12493,12499,12522,12525,12548,12550,12554,12752,12866,12876,12979,15060,15078,15202,15227,15238,15600,15603,15608,15610,15627,15632],"fullWord":11838},{"subwords":[4763,4769,4826,5114,5117,5118,5163,5165,5167,5171,5221,5223,5233,5234,5237,5241,5245,5845,11574,11831,11833,11839,11840,11845,12007,12010,12011,12014,12030,12752,12755,12872,16457,17198,17323,17382,17435,17830,18575,18595,18981,18983,18985,19026,19032,19033,19034],"fullWord":11840},{"subwords":[4971,5163,6541,11605,11626,11831,11841,11842,11854,21140,21154],"fullWord":11842},{"subwords":[4971,4983,5037,5046,5163,5171,5221,8617,8648,8678,8721,8724,8739,9127,9422,11626,11641,11763,11772,11831,11841,11843,11845,11854,12806,12808,12810,12872,16627,16664,16674,17323],"fullWord":11843},{"subwords":[183,480,497,586,1053,1072,4472,5163,5442,5523,10090,10136,10270,10730,10738,10906,11107,11173,11265,11387,11831,11832,11846,11865,12036,12091,12837],"fullWord":11846},{"subwords":[4728,4763,5114,5146,5163,5165,5471,5472,5523,5756,5782,5846,10378,10443,10470,10780,10906,11492,11831,11833,11834,11847,11865,11870,12034,12036,12091,12110,12111,12752,12837,12845],"fullWord":11847},{"subwords":[5163,5193,5523,10833,10842,10906,11831,11844,11848,11865,11921,11923,12036,12091,12837],"fullWord":11848},{"subwords":[7703,7704,7731,8145,8150,10793,10811,10981,10986,11850,11851,12081,12104,12107,12872,17099,17131,17135,17188,17201,17354,17442,18103,18112],"fullWord":11851},{"subwords":[341,349,869,8245,8290,8346,8648,8696,8739,8857,8858,9376,11265,11268,11276,11852,11854,12680,12806,14775,14808,15386,15480,15564,15627],"fullWord":11852},{"subwords":[564,8290,8409,8412,8920,11265,11399,11853,12066,12675,12806,20599,20607,20689,20690,20694,20879],"fullWord":11853},{"subwords":[5832,6079,9444,11574,11786,11854,11855,12010,12011,12017,12869,18595,18844,18882,18886,18981,19026,19032,19186,21135,21136],"fullWord":11855},{"subwords":[4714,4728,4739,4763,4935,4938,4971,4972,5114,5146,5163,5165,5756,5782,9109,9110,9117,9125,10378,10414,10443,10530,10533,10536,10537,10584,10595,10596,10609,10780,11492,11626,11659,11663,11668,11831,11833,11834,11841,11854,11856,11857,11865,11870,12752,12812,12815,12837,12841,12845],"fullWord":11857},{"subwords":[5782,5830,9384,10414,10443,10536,10549,10584,10595,10609,10677,10882,11539,11659,11668,11669,11743,11854,11856,11858,11860,11870,11970,11971,12812,12816,12845,12979,12992,15202,15246,15444,15473,15480,15481,15610,15617,15621,15627,15632],"fullWord":11858},{"subwords":[5830,5831,5845,6004,9384,9389,9409,9422,9427,11539,11743,11745,11764,11765,11772,11854,11860,11861,11970,11973,11987,12872,12979,12982,13007,13022,15202,15224,15480,15481,15484,15489,15526,15610,15611,15627,15632,15638,15676,16375,16889,16890,17382,17419,17722],"fullWord":11861},{"subwords":[470,487,869,883,905,10136,10161,10181,10738,10740,11173,11265,11276,11303,11314,11330,11813,11863,11864,11963,11965,12680,12683,12872,12948,12950,13007,14808,14820,15564,15567,15627,15638,15673,15942,15973,17012,17303,17354,17356,17378],"fullWord":11864},{"subwords":[4728,4763,5114,5146,5147,5163,5165,5166,5756,5782,10378,10443,10780,11492,11831,11833,11834,11865,11866,11870,12745,12752,12837,12845],"fullWord":11866},{"subwords":[4728,4763,4810,4818,5114,5115,5146,5163,5165,5213,5756,5782,10378,10443,10780,10878,10882,11492,11539,11831,11833,11834,11865,11867,11870,11970,11971,12752,12837,12839,12845,12979,15060,15078,15202,15220,15600,15603,15610,15621,15627,15632],"fullWord":11867},{"subwords":[5782,5784,5845,10443,10447,10459,10460,10465,10888,10896,10897,10901,11502,11506,11574,11870,11871,11872,11879,11883,12007,12010,12011,12012,12013,12014,12030,12845,12848,12872,16457,17097,17113,17168,17198,17354,17359,17382,17435,17830,17903,18595,18981,18985,19017,19026,19032,19033,19034],"fullWord":11872},{"subwords":[5782,5784,5845,9416,9422,10414,10415,10443,10447,10536,10551,10584,10595,10598,10609,10610,10888,11659,11668,11671,11684,11685,11764,11772,11854,11856,11859,11870,11871,11873,12812,12822,12845,12848,12872,16375,16837,17076,17077,17097,17171,17350,17354,17359,17364,17382],"fullWord":11873},{"subwords":[5782,5953,9360,10414,10422,10443,10444,10536,10544,10584,10595,10605,10609,10625,10652,10663,10814,10822,11489,11500,11512,11645,11659,11668,11697,11706,11854,11856,11870,11874,11891,12438,12439,12443,12504,12522,12525,12812,12821,12845,12866,12876],"fullWord":11874},{"subwords":[5780,5782,9152,10414,10443,10536,10584,10595,10609,11659,11668,11676,11677,11854,11856,11870,11875,11876,12812,12845],"fullWord":11876},{"subwords":[3336,3675,3701,3732,3826,3841,8714,8786,10760,10765,10774,10833,10842,11878,11921,11922,12806,12809,12895],"fullWord":11878},{"subwords":[4728,4763,5114,5146,5161,5163,5165,5234,5237,5756,5782,10378,10443,10460,10780,10897,11492,11502,11574,11831,11833,11834,11865,11870,11879,11880,12010,12011,12012,12752,12837,12845,18595,18981,18983,19016,19017,19026,19032],"fullWord":11880},{"subwords":[5782,5953,10422,10437,10441,10443,10444,10460,10822,10897,11500,11502,11505,11512,11574,11870,11879,11881,11891,11916,12010,12011,12012,12374,12504,12522,12525,12574,12581,12845,12866,12876,18595,18607,18981,19017,19026,19032,19036,19038],"fullWord":11881},{"subwords":[5782,10443,10460,10882,10897,11502,11539,11574,11592,11870,11879,11882,11970,11971,11989,12010,12011,12012,12845,12979,13008,15202,15312,15610,15621,15627,15632,15691,15694,15748,18595,18644,18981,19017,19026,19032,19093,19101],"fullWord":11882},{"subwords":[5953,11508,11512,11574,11885,11886,11891,11916,12010,12011,12374,12522,12525,12574,12581,12866,12876,18595,18607,18981,19026,19032,19036,19038],"fullWord":11886},{"subwords":[9422,11772,11854,11885,11887,11890,12872],"fullWord":11887},{"subwords":[560,561,11265,11330,11813,11885,11888,11889,11890,12872,15973,17378],"fullWord":11889},{"subwords":[2848,2869,3732,3733,3777,3826,3852,11086,11213,11265,11810,11891,11892,11911,11921,11931,12244,12522],"fullWord":11892},{"subwords":[183,197,200,605,610,4472,4479,4483,4489,4491,4492,5163,5171,5172,5173,5188,5221,11107,11123,11213,11245,11247,11265,11330,11345,11810,11812,11813,11831,11845,11891,11893,11894,11915,12244,12493,12501,12522,12523,12524,12527,12560,12872,15893,15973,15986,15988,17323,17324,17378,17383],"fullWord":11894},{"subwords":[183,605,685,716,4472,4479,4492,4578,5163,5172,5173,5577,11107,11213,11264,11265,11408,11420,11810,11831,11891,11893,11895,11920,12201,12244,12311,12493,12522,12523,21051,21154,21183,21184],"fullWord":11895},{"subwords":[5163,5171,5172,5188,5193,5195,5221,11831,11844,11845,11891,11897,11898,11911,11913,11915,11921,11923,11924,11931,11934,11941,12493,12501,12522,12527,12560,12872,17262,17323,17330,17383,17397],"fullWord":11898},{"subwords":[5845,5918,5953,5955,11512,11524,11567,11891,11899,11900,11915,11920,11997,12506,12522,12525,12527,12560,12561,12564,12573,12866,12868,12872,12876,12879,13147,17382,17383,17472,18287,21120,21122,21130,21183],"fullWord":11900},{"subwords":[5718,5894,5953,5988,5989,7489,7493,7526,7530,7753,7788,7815,7816,7855,11487,11512,11539,11891,11901,11970,11977,12347,12509,12522,12525,12548,12550,12798,12866,12876,12979,15141,15202,15238,15610,15627,15632],"fullWord":11901},{"subwords":[7703,7705,7826,7841,10793,10809,10826,10833,10842,10845,11891,11902,11911,11921,11931,12509,12521,12522],"fullWord":11902},{"subwords":[7874,11891,11903,11915,12007,12010,12030,12081,12509,12512,12522,12527,12560,12574,12591,12872,17188,17278,17383,17389,17435,18993,19001,19026,19034,19036,19043,19047,19057],"fullWord":11903},{"subwords":[4714,4763,4767,4774,4780,4935,4938,4971,4972,4985,4988,5114,5163,5165,5172,5176,5865,5953,9109,9110,9360,11489,11512,11516,11626,11645,11697,11702,11706,11707,11831,11833,11841,11854,11891,11896,11904,12443,12493,12499,12522,12525,12752,12758,12866,12876],"fullWord":11904},{"subwords":[5845,5918,5953,5955,9307,9360,9366,9422,11489,11512,11524,11567,11645,11646,11697,11706,11710,11728,11764,11772,11854,11891,11905,11915,12443,12447,12506,12516,12522,12525,12527,12560,12561,12866,12868,12872,12876,12879,16375,16851,16858,16860,17382,17383],"fullWord":11905},{"subwords":[8648,8678,8679,8739,8789,9307,9360,9366,9422,11697,11728,11772,11854,11891,11906,11915,12443,12447,12522,12527,12560,12565,12806,12808,12810,12872,16627,16629,16664,16851,16858,16874,17383],"fullWord":11906},{"subwords":[9307,9360,9366,9422,11697,11728,11772,11854,11885,11890,11891,11907,11915,12443,12447,12522,12526,12527,12560,12872,16851,16858,17383],"fullWord":11907},{"subwords":[9296,9307,9318,9325,9335,9360,9366,9422,9447,11697,11728,11729,11732,11772,11780,11854,11862,11891,11908,11915,12007,12010,12030,12443,12447,12463,12471,12522,12527,12560,12574,12591,12869,12870,12872,16851,16858,16907,17179,17255,17278,17383,17435,18882,18894,18919,18947,19026,19034,19036,19057],"fullWord":11908},{"subwords":[5953,9836,9841,9865,11512,11891,11899,11909,11910,11920,12522,12525,12866,12876,21120,21174,21183],"fullWord":11910},{"subwords":[5163,5172,5193,11831,11844,11891,11897,11911,11912,11920,11921,11923,11925,11931,11935,12493,12522,21154,21183,21184],"fullWord":11912},{"subwords":[5953,11512,11539,11891,11911,11914,11921,11931,11936,11937,11970,11977,11979,12522,12525,12548,12550,12866,12876,12979,15202,15238,15610,15627,15632,15633,15652],"fullWord":11914},{"subwords":[5845,5918,5953,5955,11512,11524,11567,11574,11891,11915,11916,11917,12007,12010,12011,12014,12030,12368,12374,12376,12506,12522,12525,12527,12560,12561,12574,12581,12585,12591,12866,12868,12872,12876,12879,12884,16399,16457,16461,17198,17278,17382,17383,17435,17830,17834,17909,18595,18607,18624,18981,18985,19026,19032,19033,19034,19036,19038,19042,19057],"fullWord":11917},{"subwords":[8789,8887,8892,8901,8935,11891,11915,11918,11919,12007,12010,12018,12020,12030,12522,12527,12560,12565,12574,12591,12612,12806,12808,12810,12872,16664,16704,17278,17383,17435,18743,18967,19026,19034,19036,19057,19123],"fullWord":11919},{"subwords":[7604,7826,7841,9360,11649,11697,11711,11854,11891,11911,11921,11927,11931,12443,12509,12522],"fullWord":11927},{"subwords":[8276,8290,8786,10136,10738,10833,10842,11173,11265,11921,11928,11929,12806,12809,12895],"fullWord":11929},{"subwords":[470,487,10136,10161,10181,10738,10740,10833,10842,10844,10854,11173,11265,11330,11813,11921,11928,11930,11941,12872,13024,15942,15973,17012,17354,17370,17378],"fullWord":11930},{"subwords":[4763,4767,4774,5114,5163,5165,5172,5176,5193,5865,5953,11512,11516,11831,11833,11844,11891,11896,11897,11911,11921,11923,11926,11931,11932,12493,12499,12522,12525,12752,12753,12866,12876],"fullWord":11932},{"subwords":[5953,9360,11489,11512,11645,11697,11706,11854,11891,11911,11921,11931,11933,12443,12522,12525,12866,12876],"fullWord":11933},{"subwords":[4763,4810,4818,5114,5115,5163,5165,5193,5196,5213,11539,11831,11833,11844,11921,11923,11926,11936,11937,11938,11970,12752,12762,12976,12979,15060,15078,15202,15600,15603,15605,15610,15627,15632,15633,15642,15652,15653],"fullWord":11938},{"subwords":[4763,5114,5163,5165,5193,5234,5237,11574,11831,11833,11844,11921,11923,11926,11943,11944,12010,12011,12752,18595,18981,18983,19026,19032,19060],"fullWord":11944},{"subwords":[11539,11574,11592,11921,11936,11937,11943,11945,11970,11989,12010,12011,12028,12979,13008,15202,15312,15610,15627,15632,15633,15652,15659,15691,15694,15697,15748,18595,18644,18981,19026,19032,19060,19093,19101,19106],"fullWord":11945},{"subwords":[4763,4769,4826,5114,5117,5163,5165,5167,5171,5200,5204,5221,5223,5845,5969,6033,11831,11833,11839,11845,11947,11948,11949,11950,11953,11961,12752,12755,12872,12916,12925,12936,13478,13488,13607,14020,14023,14024,14025,14093,14094,14166,14167,17323,17382,17406,17530],"fullWord":11950},{"subwords":[5845,5969,6004,6033,11539,11947,11948,11951,11952,11953,11961,11970,11973,11987,12872,12916,12925,12936,12979,12982,13007,13577,13593,13595,13607,14024,14025,14093,14094,14147,14149,14166,14168,14262,14281,14350,14359,14360,14369,14371,14383,14384,14403,15202,15224,15248,15272,15305,15610,15611,15627,15632,15634,15637,15638,15663,15668,15676,15747,17382,17406,17419,17542,17638],"fullWord":11952},{"subwords":[5830,9178,9189,9384,11539,11743,11854,11860,11947,11948,11951,11955,11970,12916,12979,13577,13593,13705,13712,14024,14032,14093,14147,14262,14313,14317,14322,14350,14359,14369,15202,15248,15480,15481,15508,15509,15610,15627,15632,15634,15663,15747],"fullWord":11955},{"subwords":[7602,7604,7612,9178,9360,11649,11697,11711,11854,11891,11947,11956,12078,12443,12453,12509,12522,13721,13765,13773,13809,14032,14107],"fullWord":11956},{"subwords":[8648,8664,8671,8678,8739,8845,8851,8853,8856,8886,9178,9196,9374,9422,11772,11854,11947,11957,11961,12079,12806,12808,12810,12872,12936,13651,13841,14032,14172,14421,16627,16639,16664,16693,16853,16883,17406,17407],"fullWord":11957},{"subwords":[4763,5114,5163,5165,5200,11831,11833,11947,11948,11949,11958,12752,12916,12933,13478,13569,14020,14024,14093,14096,14130,14131,14237],"fullWord":11958},{"subwords":[11539,11947,11948,11951,11959,11970,12916,12933,12979,13569,13577,13593,14024,14093,14096,14130,14131,14147,14262,14278,14350,14359,14369,14379,15202,15248,15610,15627,15632,15634,15663,15747],"fullWord":11959},{"subwords":[11574,11947,11948,11960,12010,12011,12916,12933,12937,13569,13613,14024,14027,14093,14096,14130,14131,14188,18595,18596,18601,18981,19026,19032,19075,19076],"fullWord":11960},{"subwords":[399,472,566,817,869,5588,5592,5782,5976,10136,10145,10150,10324,10355,10443,10738,10882,11173,11180,11265,11276,11286,11303,11437,11442,11539,11863,11870,11963,11964,11970,11971,12680,12845,12948,12979,14808,14968,14971,14975,15202,15564,15610,15621,15627,15632],"fullWord":11964},{"subwords":[470,487,869,883,905,10136,10161,10181,10738,10740,11173,11265,11276,11303,11314,11330,11813,11863,11864,11963,11965,12680,12683,12872,12948,12950,13007,14808,14820,15564,15567,15627,15638,15673,15942,15973,17012,17303,17354,17356,17378],"fullWord":11965},{"subwords":[869,883,905,973,11265,11276,11314,11330,11348,11813,11966,12002,12082,12680,12683,12872,13007,14808,14820,15564,15567,15627,15638,15673,15973,17303,17306,17378,17379,17434],"fullWord":11966},{"subwords":[869,883,884,905,11265,11276,11314,11329,11330,11408,11420,11421,11422,11424,11813,11967,11968,12680,12683,12872,13007,14808,14820,14939,14944,15564,15567,15627,15638,15673,15690,15864,15865,15973,16103,17303,17378,17472,17473,21051,21055,21212],"fullWord":11968},{"subwords":[1511,1777,1851,1867,2058,2428,2439,2446,4971,5163,5213,5362,9077,11626,11817,11831,11841,11854,11969,12700,12959,15402,15428,15480,15576,15600,15627],"fullWord":11969},{"subwords":[5782,5784,5845,6004,10443,10447,10882,10883,10888,10889,11539,11870,11871,11970,11971,11972,11973,11987,11988,12845,12848,12872,12979,12982,13007,15202,15224,15610,15611,15621,15622,15627,15632,15638,15676,17097,17354,17359,17382,17419,17420],"fullWord":11972},{"subwords":[299,568,837,869,7317,7375,7921,8038,11127,11213,11228,11243,11265,11276,11810,11891,11974,11977,12230,12244,12509,12522,12548,12550,12551,12680,12951,12983,14758,14808,14821,14832,15564,15568,15627,15628],"fullWord":11974},{"subwords":[5718,5846,5988,5989,7489,7526,7530,7545,7788,7855,8145,11487,11539,11970,11975,12034,12104,12798,12979,13051,15141,15202,15610,15614,15627,15632,15706,15709,15777,15790,15806,19855],"fullWord":11975},{"subwords":[11885,11891,11911,11921,11931,11936,11976,11977,11979,12522,12548,12550,15627,15652],"fullWord":11976},{"subwords":[11891,11911,11913,11915,11921,11931,11934,11936,11939,11941,11977,11978,11979,11980,12522,12527,12548,12550,12555,12560,12872,13007,15627,15638,15652,15655,17383,17397],"fullWord":11980},{"subwords":[5845,6004,11539,11921,11936,11937,11939,11941,11942,11970,11973,11981,11987,12872,12979,12982,13007,15202,15224,15610,15611,15627,15632,15633,15638,15652,15655,15676,17382,17419],"fullWord":11981},{"subwords":[8786,8831,8845,8857,11921,11936,11947,11982,11983,12079,12806,12809,12895,12903,14118,14127,14350,14369,15386,15627,15634,15652,15747],"fullWord":11983},{"subwords":[8845,8856,8857,8874,8886,8934,11947,11961,11982,11984,12079,12806,12808,12810,12872,12936,13007,14172,14350,14369,14371,14383,14403,15386,15627,15634,15637,15638,15747,16664,16693,17406,17407],"fullWord":11984},{"subwords":[9409,9422,11772,11854,11985,12872,13006,13007,15480,15489,15627,15638,16889,17722],"fullWord":11985},{"subwords":[11921,11936,11986,12066,15627,15652,15734,20903,20940],"fullWord":11986},{"subwords":[5782,5784,5845,6004,10443,10447,10882,10883,10888,10889,11539,11870,11871,11970,11971,11972,11973,11987,11988,12845,12848,12872,12979,12982,13007,15202,15224,15610,15611,15621,15622,15627,15632,15638,15676,17097,17354,17359,17382,17419,17420],"fullWord":11988},{"subwords":[488,495,570,869,911,1020,10136,10738,10897,11173,11192,11265,11276,11303,11320,11361,11814,11863,11879,11963,11989,11990,12010,12680,12686,12948,13008,14808,14898,15564,15627,15691,18389,18432,18449,18463,19026,19093,19094,19216],"fullWord":11990},{"subwords":[570,869,878,911,1020,11265,11276,11320,11361,11814,11989,11991,12010,12680,12686,13008,14808,14898,15564,15570,15627,15691,18389,18432,18449,18463,19026,19093,19094,19216],"fullWord":11991},{"subwords":[11508,11539,11574,11592,11885,11970,11989,11992,12010,12011,12979,13008,15202,15312,15610,15627,15632,15691,15694,15748,18595,18644,18981,19026,19032,19093,19101],"fullWord":11992},{"subwords":[9409,9422,9447,11772,11780,11854,11862,11989,11993,12007,12010,12030,12869,12870,12872,13007,13008,13011,15480,15489,15504,15507,15627,15638,15691,15700,16889,16907,17179,17429,17435,17722,17881,17930,18882,18945,18946,18947,19026,19034,19093,19113,19114,19285,19287,19292,19294,19313],"fullWord":11993},{"subwords":[341,347,555,2848,2868,3402,3403,3732,3733,3734,9422,11086,11105,11265,11330,11617,11618,11759,11772,11813,11854,11994,12872,13025,15880,15973,16129,16178,16764,16769,17316,17378],"fullWord":11994},{"subwords":[3732,3826,3860,3955,4010,4028,11921,11941,11995,12066,12072,12872,16214,17316,17464,20903,20925],"fullWord":11995},{"subwords":[5845,6039,11569,11573,11996,11997,11998,12002,12006,12082,12872,13147,17382,17434,17472,17475,21130],"fullWord":11998},{"subwords":[5782,5784,5845,10443,10447,10888,11508,11511,11870,11871,11885,11890,12000,12845,12848,12872,17097,17354,17359,17382],"fullWord":12000},{"subwords":[5845,5846,5847,12001,12034,12035,12048,12152,12872,14635,14646,14650,14694,14700,16416,17382,18066,18103,18112,19876],"fullWord":12001},{"subwords":[4763,4769,4826,5114,5117,5163,5165,5167,5171,5221,5223,5227,5229,5845,6039,11569,11831,11833,11839,11845,11996,12002,12003,12082,12752,12755,12872,17323,17332,17382,17434],"fullWord":12003},{"subwords":[5845,6004,6039,11539,11569,11970,11973,11987,11996,12002,12004,12082,12872,12979,12982,13007,15202,15224,15610,15611,15627,15632,15638,15676,15679,17382,17419,17424,17434],"fullWord":12004},{"subwords":[5845,6039,11569,11996,12002,12005,12082,12872,17382,17434],"fullWord":12005},{"subwords":[10896,10897,10901,11879,11883,11884,12007,12008,12010,12030,12872,17113,17149,17354,17435,17472,18018,19026,19034,19186,19195],"fullWord":12008},{"subwords":[5782,5784,5845,10443,10447,10459,10460,10465,10888,10896,10897,10901,11502,11506,11574,11870,11871,11872,11879,11883,12007,12010,12011,12012,12013,12014,12030,12845,12848,12872,16457,17097,17113,17168,17198,17354,17359,17382,17435,17830,17903,18595,18981,18985,19017,19026,19032,19033,19034],"fullWord":12013},{"subwords":[5845,11574,12007,12010,12011,12014,12015,12016,12030,12872,16457,17198,17382,17435,17830,17846,18595,18662,18981,18985,19026,19032,19033,19034,19130,19131,19134,19136,19137,19140,19144],"fullWord":12016},{"subwords":[8532,8552,8575,8725,8728,8775,8778,8857,8892,11539,11574,11592,11970,11989,12010,12011,12018,12019,12806,12979,13008,13009,13036,15202,15312,15386,15610,15627,15632,15691,15694,15748,18595,18644,18697,18705,18714,18743,18749,18777,18781,18967,18981,19026,19032,19093,19101],"fullWord":12019},{"subwords":[6647,6651,6654,6900,9135,9422,9447,11772,11780,11854,11862,12007,12010,12022,12023,12030,12785,12869,12870,12872,16801,16907,17179,17340,17435,18882,18947,19026,19034],"fullWord":12023},{"subwords":[5782,5832,9444,10414,10443,10460,10536,10584,10595,10609,10691,10694,10897,11502,11574,11659,11668,11686,11786,11854,11856,11870,11879,12010,12011,12012,12024,12812,12845,12869,18595,18844,18863,18866,18882,18886,18981,19002,19017,19026,19032],"fullWord":12024},{"subwords":[9325,9335,9360,11697,11729,11854,11891,11911,11921,11931,11943,12010,12025,12443,12463,12522,12574,12869,12887,18882,18894,19026,19036,19060],"fullWord":12025},{"subwords":[5832,9444,11574,11786,11854,12010,12011,12026,12059,12063,12869,18595,18844,18882,18886,18981,19026,19032,19165,20095,20097,20129,20150,20260,20265],"fullWord":12026},{"subwords":[5782,5785,6079,10443,10460,10495,10897,11065,11502,11574,11870,11879,11884,12010,12011,12012,12017,12027,12845,18595,18981,19017,19026,19032,19186,21135],"fullWord":12027},{"subwords":[11921,11936,11939,11941,11943,11946,11989,12007,12010,12028,12029,12030,12872,13007,13008,13011,15627,15638,15652,15655,15657,15659,15662,15691,15697,15700,17399,17429,17435,17930,19026,19034,19060,19093,19106,19108,19113,19115],"fullWord":12029},{"subwords":[5782,10443,10460,10897,11502,11574,11870,11879,12010,12011,12012,12015,12031,12845,18595,18981,19017,19026,19032,19131,19134,19136],"fullWord":12031},{"subwords":[11921,11941,11943,11946,12007,12010,12030,12032,12033,12872,13043,17399,17435,19026,19034,19060,19066,19073,19130,19131,19143,19144],"fullWord":12033},{"subwords":[5163,5171,5221,5523,5524,10906,11831,11845,11849,11865,11868,12036,12037,12091,12097,12837,12844,12872,17135,17323,17354,17357,17442,18103,18112],"fullWord":12037},{"subwords":[5163,5498,5523,10906,11831,11865,11869,11884,12036,12038,12091,12767,12837,21154,21193],"fullWord":12038},{"subwords":[9360,9369,10584,10605,10609,10652,10661,10663,10814,11659,11697,11854,11856,11891,12039,12138,12438,12443,12522,12812,13048],"fullWord":12039},{"subwords":[10896,10897,10901,10905,10929,10931,11044,11879,11883,12007,12010,12030,12040,12041,12126,12177,12872,13055,13059,13082,17113,17135,17147,17203,17354,17435,17442,18103,18112,19026,19034,19605],"fullWord":12041},{"subwords":[5163,5171,5172,5188,5221,5507,5522,5523,5524,11831,11845,11849,11891,11915,12042,12043,12091,12097,12138,12140,12493,12501,12503,12522,12527,12560,12597,12872,12888,17323,17383,17445,18103,18112,18117,19664],"fullWord":12043},{"subwords":[11891,11915,12007,12010,12030,12044,12045,12138,12140,12177,12522,12527,12560,12574,12591,12597,12659,12663,12872,12888,13055,13059,13082,17203,17278,17281,17383,17435,18005,18103,18112,18117,19026,19034,19036,19057,19434,19452,19780],"fullWord":12045},{"subwords":[11891,11915,11977,11978,12046,12047,12138,12140,12522,12527,12548,12550,12555,12560,12597,12872,12888,13007,13051,13052,15627,15638,15806,15820,15821,15832,17383,17451,18103,18112,18117,19866,19867],"fullWord":12047},{"subwords":[4763,4769,4826,4849,5114,5117,5163,5165,5167,5171,5221,5223,5263,5471,5478,5523,5524,5845,5846,5847,11831,11833,11839,11845,11849,12034,12035,12048,12049,12091,12097,12152,12153,12752,12755,12872,16317,17323,17382,18066,18067,18103,18112,19876,19877],"fullWord":12049},{"subwords":[5845,5846,5847,6004,11539,11970,11973,11987,12034,12035,12048,12050,12152,12154,12872,12979,12982,13007,13051,13052,15202,15224,15610,15611,15627,15632,15638,15676,15706,15708,15716,15777,15782,15806,15820,15840,16446,17382,17419,17451,18066,18071,18103,18112,18150,19876,19880],"fullWord":12050},{"subwords":[5845,5846,5847,6039,11569,11996,12002,12034,12035,12048,12051,12053,12082,12152,12156,12173,12872,17382,17434,17457,18066,18073,18103,18112,18113,18116,19876,19882],"fullWord":12051},{"subwords":[5845,5846,5847,11997,12034,12035,12048,12052,12054,12152,12872,13147,17382,17472,18066,18077,18103,18112,19876,21130,21193,21199],"fullWord":12052},{"subwords":[5845,5846,5847,6039,11569,11996,12002,12034,12035,12048,12051,12053,12082,12152,12156,12173,12872,17382,17434,17457,18066,18073,18103,18112,18113,18116,19876,19882],"fullWord":12053},{"subwords":[8887,8892,8901,8935,8970,8988,9026,9027,12007,12010,12018,12020,12030,12055,12056,12158,12177,12806,12808,12810,12872,13055,13059,13082,16664,16704,16709,16753,17203,17435,17460,18103,18112,18743,18759,18762,18802,18967,19026,19034,19123,19486,19592],"fullWord":12056},{"subwords":[8788,8892,8970,9026,12010,12018,12021,12055,12057,12215,12806,13059,18743,18759,18806,18967,19026,19186,21193,21200],"fullWord":12057},{"subwords":[11891,11911,11921,11931,11943,12010,12044,12058,12138,12522,12574,12659,12887,13059,19026,19036,19060,19434,19780],"fullWord":12058},{"subwords":[5845,6004,11539,11970,11973,11987,12059,12060,12061,12062,12872,12979,12982,13007,13095,13099,15202,15224,15337,15354,15610,15611,15627,15632,15638,15676,15728,15732,16453,17382,17419,20070,20077],"fullWord":12061},{"subwords":[5845,9422,11764,11772,11854,12059,12062,12063,12064,12872,16375,17382,20129,20134,20150,20151,20197],"fullWord":12064},{"subwords":[7604,7889,9360,11649,11697,11711,11854,11891,12065,12443,12509,12522,20150,20152,20164,20262],"fullWord":12065},{"subwords":[5845,6004,11536,11538,11539,11595,11602,11970,11973,11987,12066,12068,12069,12072,12872,12979,12982,13007,13110,13112,15202,15224,15302,15610,15611,15627,15632,15638,15676,15734,15744,16445,16475,17382,17419,17464,17466,18272,20875,20877,20933,20940,20943,20947],"fullWord":12069},{"subwords":[7604,7892,9360,11649,11697,11711,11854,11891,12066,12070,12071,12443,12509,12522,12606,13113,13119,20742,20774,20790,20804,20897],"fullWord":12070},{"subwords":[5845,9422,11764,11772,11797,11800,11854,12075,12076,12872,13131,16375,16483,16922,17382,17471],"fullWord":12076},{"subwords":[570,869,911,1020,11265,11276,11320,11361,11384,11814,11989,12010,12077,12680,12686,13008,14808,14898,15564,15627,15691,18389,18432,18449,18463,19026,19093,19094,19216,19575],"fullWord":12077},{"subwords":[3257,3336,3386,3390,4268,4271,4293,5656,5845,5846,5847,6023,8532,8539,8945,8947,8970,8988,11461,11563,12080,12083,12084,12152,12158,16260,16298,16574,18050,18066,18103,19592,19876],"fullWord":12084},{"subwords":[4263,4268,4269,4278,4293,4639,4651,5455,5457,5471,5489,5846,12085,12086,12091,19595],"fullWord":12086},{"subwords":[4268,4278,4293,4312,4326,5654,5846,11539,12085,12087,12146,15021,15202,15766,15777,15806,19595],"fullWord":12087},{"subwords":[3732,4293,12089,12090,12872,16260,17316,18103,18112],"fullWord":12089},{"subwords":[574,586,1053,2766,2848,2859,2921,4049,4263,4293,4302,4472,4484,5503,5525,11086,11107,11270,12091,12092,13154,13171,14438,14476,19624],"fullWord":12092},{"subwords":[4771,4810,4818,5424,5466,5467,5471,5846,11539,12091,12093,15060,15202,15773,15777,15778,15806,19578],"fullWord":12093},{"subwords":[4728,5466,5467,5471,5472,5756,5782,5846,10378,10470,11492,12091,12094,12110,12111],"fullWord":12094},{"subwords":[200,586,869,883,905,920,921,1053,4472,4489,5318,5321,5424,5425,11107,11123,11276,11314,11330,12091,12095,12096,12097,14736,14751,14808,14820,15806,15820,15893,15973,18103,19846,19868,19871],"fullWord":12096},{"subwords":[5471,5481,5827,5846,6406,6446,6501,7169,7170,11605,12091,12098,12099],"fullWord":12099},{"subwords":[6593,7179,11647,11697,12098,12100,12443],"fullWord":12100},{"subwords":[5765,5782,5827,5846,6446,6821,6824,6835,7153,7169,10470,10978,12098,12101,12110],"fullWord":12101},{"subwords":[6647,6651,6654,9135,9422,9447,11780,12102,12103,12177,16801,16907,16917,17179,17203,18083,18085,18103,18882,18947],"fullWord":12103},{"subwords":[4711,5471,5485,5709,5846,7489,7545,8145,11487,12091,12104,12105],"fullWord":12105},{"subwords":[5709,5846,5988,7489,7530,7545,8145,11487,11539,12104,12106,15141,15202,15777,15790,15806,19855],"fullWord":12106},{"subwords":[4238,4241,4285,4289,4291,4293,4375,4394,11044,12108,12109,12177,16260,16265,17135,17147,17203,18103,19605],"fullWord":12109},{"subwords":[5782,5784,5785,5845,5846,5847,10470,10495,10496,11065,11066,12110,12112,12113,12114,12152,17128,17135,17149,18066,18077,18103,19876,21130,21222,21223],"fullWord":12114},{"subwords":[5782,5830,5846,9145,9384,10414,10425,10470,10536,10549,10552,10584,10595,10677,11029,11539,11659,11668,11669,11743,12110,12115,15202,15444,15473,15480,15481,15777,15800,15806],"fullWord":12115},{"subwords":[7604,7688,7731,7759,8145,8151,10565,10584,10605,10637,10661,10981,11012,11649,11659,11697,11711,12104,12116,12438,12443,19585],"fullWord":12116},{"subwords":[8648,8678,8970,8988,9422,10584,11039,11659,11685,12117,12158,16627,16746,17076,17135,18083,18103,19592],"fullWord":12117},{"subwords":[442,497,586,8268,8290,8394,8960,8964,8970,10136,11173,11186,11387,12118,12119,12120],"fullWord":12120},{"subwords":[4728,4744,5471,5472,5492,5756,5780,5782,5846,10378,10470,11492,12091,12110,12111,12118,12121],"fullWord":12121},{"subwords":[5780,5782,5846,10470,10992,11008,11512,11534,12110,12118,12122,12642],"fullWord":12122},{"subwords":[5780,5782,5846,10425,10470,11029,11539,12110,12118,12123,15202,15777,15800,15806],"fullWord":12123},{"subwords":[5780,5782,5846,10460,10470,11050,11502,11574,12110,12118,12124,12184,18591,18595,19425,19605],"fullWord":12124},{"subwords":[1636,2004,2567,5782,5846,10470,10961,12110,12127,12128,19612],"fullWord":12128},{"subwords":[5846,11539,12127,12129,12130,15202,15777,15806],"fullWord":12130},{"subwords":[5471,5503,5525,5526,5846,12091,12127,12131,12132,13478,14438,19624,19625],"fullWord":12132},{"subwords":[5846,11539,12127,12131,12133,13577,13593,13602,14262,14518,15202,15248,15747,15777,15806,15815,19624],"fullWord":12133},{"subwords":[3336,3386,4293,8970,8989,9047,12083,12135,12136],"fullWord":12136},{"subwords":[3272,3305,3336,3386,4293,4295,8612,8648,8970,8989,9207,9213,11697,12083,12135,12137,12443],"fullWord":12137},{"subwords":[3689,3732,3777,4293,4295,9097,9207,9360,9369,11697,11854,11891,12138,12139,12443,12522,13048,19655],"fullWord":12139},{"subwords":[470,497,501,586,869,883,905,920,921,10136,10161,10221,11173,11276,11303,11314,11330,11387,11390,12141,12142,14808,14820,15806,15820,15942,15973,17012,17135,17141,18103,19837,19868,19871],"fullWord":12142},{"subwords":[4771,4810,4818,5424,5471,5846,6008,11539,12091,12143,15060,15202,15773,15775,15777,15778,15780,15806],"fullWord":12143},{"subwords":[5830,5846,5996,9344,9384,11489,11512,11534,11539,11645,11697,11706,11708,11743,12144,12443,15175,15202,15480,15481,15777,15795,15806,15821,15822,19864,19866],"fullWord":12144},{"subwords":[7604,7759,8009,8015,8145,8151,11649,11697,11711,12104,12145,12443,15461,15480,15494,15790,15795,15798,15806,15821,15824,19748,19866],"fullWord":12145},{"subwords":[5846,6008,11539,12146,12147,15202,15777,15780,15806,19595],"fullWord":12147},{"subwords":[8970,8982,8987,9002,12079,12148,14410,15747,15806,15815,19624,21224],"fullWord":12148},{"subwords":[126,134,586,2848,2868,3041,3052,3064,4238,4241,4293,4375,4394,11086,11105,11330,11356,11361,11376,11392,12149,12177,15880,15973,16041,16129,16157,16260,16265,16266,17203,18103,18104,18389,18407,18508,19871],"fullWord":12149},{"subwords":[3584,3586,4268,4271,4285,4293,5656,5782,5784,5845,5846,5847,6023,10470,10965,12080,12110,12112,12150,12152,16260,16298,17128,17135,18066,18103,19876],"fullWord":12150},{"subwords":[3591,4285,4293,10976,12151,16260,17135,17149,18103],"fullWord":12151},{"subwords":[5845,5846,5847,6039,11539,11569,12082,12152,12154,12155,12156,12173,15202,15224,15777,15782,15806,15820,15840,15841,15849,16446,16447,18066,18071,18072,18073,18103,18116,18150,19876,19880,19881,19882,19886],"fullWord":12155},{"subwords":[5845,5846,5847,12127,12134,12152,12157,18066,18103,19876],"fullWord":12157},{"subwords":[4826,4849,5471,5478,5845,5846,5847,8532,8539,8945,8946,8947,8970,8988,11563,12091,12097,12152,12153,12158,12159,16317,16574,16581,18066,18067,18103,19592,19876,19877],"fullWord":12159},{"subwords":[5845,5846,5847,8532,8539,8552,8584,8934,8945,8947,8970,8988,11539,11563,12152,12154,12158,12160,15202,15224,15380,15381,15777,15782,15806,15820,15840,15842,16446,16574,18066,18071,18103,18150,19592,19876,19880,19883],"fullWord":12160},{"subwords":[5845,5846,5847,6039,8532,8539,8945,8947,8970,8988,11563,11569,12082,12152,12156,12158,12161,12173,16574,16609,18066,18073,18103,18116,19592,19876,19882],"fullWord":12161},{"subwords":[4293,4370,9422,9423,11759,11774,12082,12163,12164,12173,16178,16260,16261,16769,16779,16903,18083,18103,18116],"fullWord":12164},{"subwords":[7604,7611,7759,7760,8145,8150,8151,8160,9307,9422,11649,11654,11697,11711,11728,11735,12081,12104,12107,12165,12443,12447,16815,16858,16866,17201,17292,18083,18084,18103,18117,18125,19885],"fullWord":12165},{"subwords":[5845,5846,5847,7489,7492,7545,7546,8145,8150,9826,9828,11487,12081,12104,12107,12152,12166,12167,17201,18066,18103,19595,19596,19876],"fullWord":12167},{"subwords":[5845,5846,5847,11574,11808,12152,12166,12168,12177,12184,12188,16457,17203,17830,18066,18074,18103,18595,19489,19595,19596,19876],"fullWord":12168},{"subwords":[5845,5846,5847,9422,11656,11657,11764,12152,12166,12169,16375,16954,16969,18066,18083,18103,19595,19596,19876],"fullWord":12169},{"subwords":[9422,10584,11659,11685,12127,12134,12171,17076,17135,18083,18103],"fullWord":12171},{"subwords":[9307,9422,10584,10605,10608,10654,10661,11659,11685,11697,11728,11735,12172,12438,12442,12443,12447,16858,17076,17135,18083,18103,18117],"fullWord":12172},{"subwords":[4826,4849,5471,5478,5845,5846,5847,6039,11569,12082,12091,12097,12152,12153,12156,12173,12174,16317,16318,18062,18066,18067,18073,18103,18116,19876,19877,19882],"fullWord":12174},{"subwords":[5782,5784,5845,5846,5847,6039,10453,10470,11569,12082,12110,12112,12152,12156,12173,12175,17128,17130,17135,17138,18066,18073,18103,18116,19876,19882],"fullWord":12175},{"subwords":[5845,5846,5847,6039,11569,12082,12152,12156,12173,12176,18066,18073,18103,18116,19876,19882],"fullWord":12176},{"subwords":[4826,4849,5471,5478,5479,5480,5548,5845,5846,5847,11574,12091,12097,12152,12153,12177,12178,12184,12185,12188,16317,16457,17203,17830,17999,18066,18067,18074,18103,18575,18595,19876,19877],"fullWord":12178},{"subwords":[5845,5846,5847,6018,6053,11539,11574,12152,12154,12177,12179,12184,12187,12188,15202,15224,15306,15312,15748,15777,15782,15806,15820,15840,15852,15858,15861,16446,16457,17203,17830,17989,18066,18071,18074,18103,18150,18595,18644,18648,19356,19359,19876,19880],"fullWord":12179},{"subwords":[586,693,1044,1074,11213,11361,11377,11392,12182,12193,12244,12300,12659,18389,18408,18495,18508,18510,18515,18969,19434,19435,19493],"fullWord":12182},{"subwords":[586,1009,5620,5627,5846,6055,11361,11362,11377,11378,11392,11437,11456,11574,11575,12183,12184,12193,18389,18393,18495,18498,18508,18515,18541,18549,18565,18595,19493],"fullWord":12183},{"subwords":[5782,5785,5846,6079,10460,10470,10495,11050,11065,11502,11574,12110,12113,12184,12186,18595,19605,21135,21222],"fullWord":12186},{"subwords":[5845,5846,5847,11574,12152,12177,12184,12188,12189,12193,12196,16457,17203,17830,17846,18066,18074,18103,18595,18662,19493,19498,19876],"fullWord":12189},{"subwords":[7604,7637,7759,8145,8151,8175,9325,11649,11697,11711,11729,12104,12190,12443,12463,12659,18882,18894,18901,19418,19434,19701],"fullWord":12190},{"subwords":[9325,11697,11729,11733,12191,12443,12463,12659,18882,18894,18925,19434,19701,19707,21144],"fullWord":12191},{"subwords":[9422,9447,11780,12127,12134,12177,12192,16907,16917,17179,17203,18083,18085,18103,18110,18882,18947],"fullWord":12192},{"subwords":[5846,11539,11574,12184,12187,12193,12194,15202,15312,15748,15777,15806,15858,18595,18644,19356,19493,19900],"fullWord":12194},{"subwords":[11891,12010,12044,12138,12193,12195,12522,12574,12659,13059,18969,19026,19036,19131,19160,19434,19493,19780],"fullWord":12195},{"subwords":[488,497,586,10136,10958,11173,11192,11361,11387,11392,12197,18389,18508,19605,19623],"fullWord":12197},{"subwords":[5782,5846,10460,10470,11050,11054,11502,11574,12110,12184,12198,18595,19605],"fullWord":12198},{"subwords":[325,716,932,944,8290,8296,8362,8420,8428,9047,9050,11213,11247,11264,11330,11335,11340,11408,11424,12201,12202,12203,12204,12244,12311,12312,15973,15986,16103,16531,16572,16758,21051,21055],"fullWord":12203},{"subwords":[5845,5969,6033,6038,11947,11948,11953,11954,11961,11962,11997,12205,12206,12872,12916,12925,12936,13147,13607,14024,14025,14026,14093,14094,14166,14187,16407,17382,17406,17472,17697,21127,21130],"fullWord":12206},{"subwords":[341,574,9178,11265,11270,11408,11420,11854,11947,11962,12207,13424,13758,14032,21051,21064,21146],"fullWord":12207},{"subwords":[3732,3765,3864,3888,4029,4046,9101,9178,11854,11947,11962,12208,14032,21146],"fullWord":12208},{"subwords":[9307,9360,9366,9422,11697,11728,11772,11854,11891,11915,11920,12209,12443,12447,12519,12522,12527,12560,12573,12872,16851,16852,16858,17383,17472,21144,21145,21183,21186,21187],"fullWord":12209},{"subwords":[326,341,349,361,540,854,869,884,4460,4472,4578,4896,4900,4971,5318,5337,5430,9376,11107,11145,11276,11285,11329,11408,11626,11755,12210,14736,14776,14808,14939,15428,15480,15490,15864,21051,21068,21140],"fullWord":12210},{"subwords":[5782,5785,6079,10460,10495,11065,11074,11502,11539,11574,12212,15201,15202,15312,15748,15866,18595,18644,18647,19257,19377,19555,19570,21135],"fullWord":12212},{"subwords":[5765,5782,5784,5785,5827,5845,6446,6509,6854,10495,10496,11065,11066,12213,16365,17149,21130],"fullWord":12213},{"subwords":[3429,3440,4238,4241,4423,9101,9422,9447,11759,11780,11784,12214,16178,16769,16907,17179,17869,18018,18823,18830,18882,18947],"fullWord":12214},{"subwords":[3272,3328,3336,3429,3440,8612,8648,8688,9101,9440,9443,12215,12216,18806,18810,18823,18882,18967],"fullWord":12216},{"subwords":[8788,8887,8892,8901,8935,12007,12010,12018,12020,12021,12030,12215,12217,12218,12806,12808,12810,12872,16664,16704,16758,17435,17472,18018,18743,18806,18967,19026,19034,19123,19186,19195],"fullWord":12217},{"subwords":[17,30,605,1219,1243,1246,1332,1336,1342,1343,1515,1530,1560,1671,1673,4427,4492,4500,4605,4618,4774,5632,5865,12219,12220,12229,12331],"fullWord":12220},{"subwords":[51,67,1332,1359,1422,2029,2034,2042,2048,2127,2128,2153,12219,12221,12222,12223,12481,12489,12560,15986,17259,17308,17383],"fullWord":12222},{"subwords":[93,94,114,115,121,122,605,608,796,800,817,2766,2780,2869,2883,2884,2885,2941,2949,2954,2955,2977,3111,4069,4070,4431,4492,4494,4496,4500,4516,4532,4605,4607,4639,4774,4810,5588,5595,5856,5865,5976,12224,12225,12229,12270,12274,12319,12358,14717,14718,14736,14821,14826,14961,15021,15028,15060,15227],"fullWord":12225},{"subwords":[93,96,114,116,121,123,796,810,817,825,905,906,2869,2883,2885,2886,2887,2906,2941,2954,2960,2977,3001,3021,4069,4071,5588,5595,5598,5599,5856,5918,5976,5977,6000,6023,12224,12226,12229,12270,12273,12275,12319,12324,14717,14722,14821,14881,15021,15048,15880,15986,15995,15998,16134,16142,16145,16270,16286,16298,16419,17223],"fullWord":12226},{"subwords":[200,326,336,349,359,605,610,647,691,854,905,4461,4492,4532,4536,4901,4985,4986,4987,5007,5037,5314,5315,9127,9307,9376,9378,9409,12227,12228,12274,12276,14736,14751,14776,14779,14784,14786,14821,14826,14828,14838,14839,15428,15443,15491,15493,15893,15928,15986,15988,16028,16858,16889,17722],"fullWord":12228},{"subwords":[269,270,605,4492,4500,4502,4605,4774,5707,5709,5865,7253,7267,7269,7270,7352,7353,7493,12229,12230,12231],"fullWord":12231},{"subwords":[269,622,817,5588,5595,5709,5894,5976,5988,7267,7269,7271,7352,7354,7375,7461,7493,7931,12229,12230,12232,12319,14758,14762,14821,14832,14833,15141],"fullWord":12232},{"subwords":[200,326,336,596,605,610,647,691,945,946,4461,4492,4493,4897,4901,4985,5007,5037,9127,9307,12234,12235,12283,15893,15928,15986,15988,16858],"fullWord":12235},{"subwords":[326,327,337,338,399,423,430,431,605,637,4466,4492,4500,4507,4601,4605,4714,4728,4739,4774,4776,4891,4898,4935,4985,4988,5745,5746,5756,5865,9103,9104,9117,10090,10093,10095,10119,10120,10169,10174,10324,10327,10344,10378,10414,10427,10530,10536,10537,10544,10622,10625,10628,12229,12238,12239,12438,12439],"fullWord":12239},{"subwords":[337,349,399,423,430,432,637,817,857,5588,5592,5595,5745,5976,5996,9376,9378,9384,10120,10121,10174,10324,10344,10355,10356,10414,10502,10536,10544,10549,10625,10627,10632,10675,10677,12229,12238,12240,12319,12438,12439,14780,14784,14821,14838,14968,15175,15225,15399,15444,15473],"fullWord":12240},{"subwords":[399,528,594,716,1196,5745,5782,5785,10136,10145,10174,10304,10310,10324,10344,10418,10495,11065,11173,11180,11213,11218,11238,11264,11408,11437,11442,11445,11446,11449,11452,11512,12201,12229,12244,12245,12247,12311,21050,21051,21052,21097,21120],"fullWord":12247},{"subwords":[528,531,817,825,869,883,905,906,5588,5595,5598,5599,5845,5918,5976,5977,6000,11213,11218,11221,11247,11248,11276,11286,11287,11314,11315,11330,11333,11437,11446,11450,11453,11512,11524,11539,11560,12229,12244,12245,12248,12249,12250,12275,12319,12324,14808,14820,14821,14881,14975,14978,15202,15207,15224,15973,15978,15986,15995,15998,16270,16278,16286,16419,17161,17223],"fullWord":12249},{"subwords":[287,341,657,7283,7317,7334,7604,9297,11127,11132,11156,11213,11649,11697,11711,12230,12244,12251,12252,12443],"fullWord":12251},{"subwords":[93,96,114,116,657,663,2869,2883,2887,2906,3021,5856,5918,6023,12229,12252,12253,12254,15880,15986,15995,16134,16270,16298,16389],"fullWord":12254},{"subwords":[657,663,665,9200,9297,12229,12252,12256,12448],"fullWord":12256},{"subwords":[375,466,481,504,574,596,598,10136,10137,10158,10182,10957,11173,11174,11213,11270,12244,12257,12258,13204,13224,13239,13904],"fullWord":12258},{"subwords":[227,716,732,735,738,817,1196,5588,5595,5956,5976,12229,12257,12259,12260,12282,12311,12317,12319,13239,13245,13286,13294,13424,13428,13439,13453,13455,13539,13577,14258,14262,14290,14410,14576,14821,14851,14852,14939,14979,15248,15255,15864,15866,21064,21071,21075,21097,21099,21102,21120,21127],"fullWord":12260},{"subwords":[369,657,9276,9297,9913,9932,12252,12257,12262,12453,13193,13239,13765,13780,13789],"fullWord":12262},{"subwords":[399,407,481,486,732,739,779,961,964,5745,5748,5918,5956,6033,10174,10175,10182,10194,10195,10324,10344,10348,10350,10353,10360,10433,12229,12257,12259,12261,12263,12269,12317,12318,12356,13204,13207,13211,13232,13239,13245,13247,13248,13249,13259,13336,13439,13450,13452,13453,13461,13539,13540,13558,13904,13906,13909,13913,13940,13943,13952,15942,15948,15986,15995,16014,16270,16274,16403,17019,17220,17476,17488,17490],"fullWord":12263},{"subwords":[605,732,733,762,769,4492,4500,4605,4774,5865,5956,12229,12257,12259,12264,12317,13171,13239,13245,13246,13268,13439,13453,13478,13539,13544,13569,14237],"fullWord":12264},{"subwords":[732,735,762,817,5588,5595,5956,5976,12229,12257,12259,12265,12317,12319,13239,13245,13268,13276,13286,13294,13439,13453,13455,13539,13569,13577,14262,14278,14821,14851,14852,14979,15248],"fullWord":12265},{"subwords":[732,739,762,779,961,964,5918,5956,6033,12229,12257,12259,12261,12266,12269,12317,12318,13239,13245,13249,13259,13268,13281,13336,13439,13453,13461,13539,13558,13569,13573,15986,15995,16014,16270,17220,17476,17490],"fullWord":12266},{"subwords":[732,762,5956,12229,12257,12259,12267,12317,12453,13193,13194,13239,13245,13268,13439,13453,13539,13569,13705,13765,13769,13813,13815],"fullWord":12267},{"subwords":[118,119,796,809,810,905,909,2869,2906,2941,3001,3002,3777,3814,3913,3919,12270,12271,12272,12273,12548,12560,12680,12683,12965,12966,12967,12971,13007,13018,14821,15568,15569,15592,15599,15673,15880,15986,16134,16142,16203,17303,17316,17383,17384],"fullWord":12272},{"subwords":[605,608,817,867,4492,4500,4509,4510,4516,4522,4524,4532,4605,4607,4774,4810,5316,5322,5355,5588,5595,5865,5976,9785,9836,9855,9968,12229,12243,12274,12277,12278,12319,12358,14736,14798,14799,14821,14826,14840,14841,14961,15060,15227],"fullWord":12278},{"subwords":[902,1158,12280,12548,12606,12680,13119,14821,14933,15568,15570,15734,15735,20393,20410,20432,20897,20944],"fullWord":12280},{"subwords":[375,377,596,598,1155,1158,10292,10298,12281,14821,14933,20393,20410,20432],"fullWord":12281},{"subwords":[375,376,382,596,598,973,987,10236,12283,12284,12285,15942,15959,15986,16009],"fullWord":12285},{"subwords":[596,657,658,662,693,1044,12252,12288,18408,18495,18969],"fullWord":12288},{"subwords":[645,657,666,679,686,693,700,9297,9325,9335,9360,9367,12252,12290,12293,12463,12528,12574,12575,12686,18347,18408,18432,18894,19036],"fullWord":12290},{"subwords":[693,694,700,1009,1106,5620,6055,6074,9325,12229,12242,12291,12305,12325,12374,12387,12463,18347,18408,18541,18607,18844,18894,18898,19920,19948,19950,19975,20008,20046,20095,20107,20129,20152,20157,20210,20211],"fullWord":12291},{"subwords":[657,666,686,693,911,12252,12293,12294,12528,12548,12574,12575,12680,12686,13008,14821,14847,14898,15568,15691,18408,18432,18449,18460,18463,19036,19093,19094,19105],"fullWord":12294},{"subwords":[693,694,709,817,911,1009,1044,5588,5595,5620,5976,5982,6055,6074,12229,12295,12319,12325,12374,14821,14847,14898,14901,15241,15312,15748,18408,18449,18453,18460,18476,18495,18498,18499,18541,18554,18565,18607,18630,18649,18672,18969,19235],"fullWord":12295},{"subwords":[693,694,709,817,911,1009,1074,1096,5588,5595,5620,5627,5976,5982,6055,6074,12229,12297,12300,12319,12325,12374,12659,14821,14847,14898,14901,15241,15312,15748,15777,15821,15822,15833,15858,18408,18449,18453,18460,18508,18541,18554,18607,18649,19356,19434,19435,19438,19440,19476,19847,19866],"fullWord":12297},{"subwords":[693,1064,1074,7416,7434,7551,7745,7759,8151,8175,8233,8304,8378,8398,8951,8989,8990,8998,9026,12230,12298,12300,12612,12659,18342,18408,18410,18508,18686,18796,19418,19434,19435,19583,19687,19892],"fullWord":12298},{"subwords":[596,712,931,5627,5918,12229,12283,12299,15986,15995,16068,16270,18066,18117,19871,19876],"fullWord":12299},{"subwords":[126,693,1074,2869,2908,3052,3198,3229,4300,4375,8378,8398,8989,8998,9026,12300,12301,12612,12659,18323,18408,18508,18686,19434,19435,19687,19892],"fullWord":12301},{"subwords":[0,317,596,8789,12302,12480,12598,13087,19948,20262],"fullWord":12302},{"subwords":[596,9520,12303,12598,13087,19948,20262],"fullWord":12303},{"subwords":[399,407,1106,1114,5745,5748,5918,6091,10174,10175,10285,10289,10324,10344,10348,10360,10433,10471,10472,12229,12305,12306,12307,12308,15942,15948,15966,15986,15995,16076,16270,16274,17029,17030,19923,19924,19925,19935,19948,19950,19952,19957,19967,19986,19987,20014,20026],"fullWord":12307},{"subwords":[647,648,691,1106,1114,1124,5918,6091,9307,12229,12242,12305,12308,12309,12387,15986,15995,16076,16270,16858,16860,19920,19948,19950,19952,19957,19967,20008,20012,20107,20115,20129,20134,20152,20154,20157,20161,20167,20191,20197],"fullWord":12309},{"subwords":[716,6250,6293,6386,6593,12236,12311,12313,12314,21144,21237],"fullWord":12314},{"subwords":[341,347,555,647,691,9307,9422,11156,11159,11213,11247,11330,11697,11728,12244,12313,12315,12316,12443,12447,15973,15986,16764,16858],"fullWord":12316},{"subwords":[50,227,716,817,1196,1332,1342,1366,1377,1406,1408,1502,1530,1535,1671,1749,2308,2317,2337,2364,2503,2721,2730,5588,5595,5976,12219,12229,12282,12311,12319,12320,12331,14821,14939,14995,15864,15866,21071,21075,21097,21099,21102,21120,21128],"fullWord":12320},{"subwords":[605,608,817,4492,4500,4516,4532,4605,4607,4678,4774,4810,5588,5589,5595,5596,5665,5865,5866,5868,5976,5984,5998,12229,12274,12319,12321,12339,12340,12358,14736,14821,14826,14830,14961,15060,15093,15227],"fullWord":12321},{"subwords":[817,5588,5595,5597,5976,5984,5998,6008,12229,12319,12322,12339,14821,14830,14872,14983,15275],"fullWord":12322},{"subwords":[227,399,716,817,1196,5588,5592,5594,5595,5745,5976,10174,10304,10306,10324,10344,10355,10356,10359,10495,11065,11074,12229,12282,12311,12319,12323,14821,14939,14968,15183,15201,15225,15864,15866,21050,21071,21075,21097,21099,21102,21120],"fullWord":12323},{"subwords":[615,657,663,693,694,1009,5620,5621,5853,6055,6074,12229,12252,12325,12326,12339,12374,18408,18541,18576,18583,18607],"fullWord":12326},{"subwords":[693,694,709,817,826,911,1009,5588,5595,5620,5621,5622,5853,5928,5935,5976,5982,5984,5998,6055,6074,12229,12319,12325,12327,12339,12374,14821,14830,14847,14898,14901,15241,15312,15748,18408,18449,18453,18460,18541,18554,18576,18583,18607,18649,18650,19240],"fullWord":12327},{"subwords":[399,488,693,694,716,1009,1196,5620,5745,6055,6074,10174,10247,10251,10304,10324,10344,10349,10437,10460,10495,11065,12229,12292,12311,12325,12329,12374,18370,18408,18541,18547,18607,21050,21097,21120,21123,21135],"fullWord":12329},{"subwords":[43,385,399,1301,1332,1342,1530,1546,1636,1671,2004,2577,5627,5745,10061,10174,10324,10344,10470,10961,11001,11008,12219,12229,12331,12333,12614,19600,19601,19629],"fullWord":12333},{"subwords":[1576,1582,1636,1671,1679,2004,2577,5691,10383,10470,10961,11008,12331,12334,12339,12614],"fullWord":12334},{"subwords":[3113,4639,4651,4774,5665,5740,5741,5856,5865,9816,9836,9970,9971,12335,12336,12339,12340],"fullWord":12336},{"subwords":[93,114,121,126,693,694,709,796,817,911,1009,2869,2883,2885,2908,2910,2941,2954,2962,2977,3003,3004,3052,3055,3145,3148,3161,4069,4085,5588,5595,5620,5849,5856,5976,5982,6055,6057,6074,12224,12229,12270,12319,12325,12338,12374,14717,14821,14847,14898,14901,14959,15021,15024,15049,15241,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,19197,19220],"fullWord":12338},{"subwords":[4667,4774,5665,5865,5867,12339,12340,12341],"fullWord":12341},{"subwords":[4678,4774,4810,5665,5865,5868,5984,5998,12339,12340,12342,12358,15060,15093,15227],"fullWord":12342},{"subwords":[4728,4731,4774,5665,5691,5756,5865,10378,10383,10427,12339,12340,12343],"fullWord":12343},{"subwords":[269,277,693,694,1009,5620,5621,5853,6055,6074,7416,7417,7467,7493,7496,7499,7512,7540,7745,12229,12230,12325,12339,12346,12374,18342,18408,18410,18541,18576,18583,18607],"fullWord":12346},{"subwords":[5716,5918,7493,7511,7604,7611,8540,8547,8625,8628,8655,8658,8678,8679,9307,12350,12351,12429,12432,16574,16629,16631,16805,16815,16858,16860,16866,16867,16874],"fullWord":12351},{"subwords":[5918,5953,5955,10433,10443,10444,10447,10822,10888,12352,12353,12355,12504,12505,12506,12528,12533,12535,12560,12561,12845,12848,12876,12879,17097,17354,17359,17383],"fullWord":12352},{"subwords":[4774,5114,5172,5176,5177,5184,5665,5865,5953,12339,12340,12353,12354,12493,12499,12528,12533,12752,12876],"fullWord":12354},{"subwords":[6118,8483,8540,8549,8588,8593,12339,12357,12390,13489,13499,13539,13630,13650,20532,20541,20547,20579,20623,20635],"fullWord":12357},{"subwords":[4678,4714,4774,4778,4810,4935,4985,4988,4990,5023,5665,5725,5735,5865,5868,5984,5995,5996,5998,9108,9384,9385,9387,12339,12340,12358,12360,15060,15093,15175,15176,15227,15428,15433,15491],"fullWord":12360},{"subwords":[5735,5918,5984,5995,5996,5998,6000,9307,9384,9387,9389,9409,12339,12361,15175,15177,15296,15500,15526,15527,16319,16335,16340,16352,16354,16425,16439,16440,16858,16860,16889,16890,16892,16893,17237,17722],"fullWord":12361},{"subwords":[4678,4774,4794,4810,5665,5865,5868,5984,5998,6092,6093,6100,12339,12340,12358,12363,12364,12386,15060,15093,15227,15337,19992,19996,20027,20030,20057],"fullWord":12364},{"subwords":[5918,5984,5998,6000,6092,6093,6097,6100,6104,12339,12363,12365,12386,15337,15354,16319,16335,16340,16425,16449,16470,16472,17237,19992,19996,19998,20000,20070,20073],"fullWord":12365},{"subwords":[4680,4774,4785,4786,4788,4792,4826,5665,5865,5875,5918,12339,12340,12344,12368,12369,12374,12376,16319,16320,16335,16381,16399,16457,17816,18575,18576,18577,18583,18585,18588,18607,18610,18614,18624,18625,18626],"fullWord":12369},{"subwords":[5918,5928,5929,5935,5984,5998,5999,6000,6018,6046,12339,12362,12368,12370,12374,12376,15241,15245,15289,15290,15306,15312,15748,16319,16335,16340,16399,16425,16457,17237,17823,17840,17843,18576,18583,18585,18588,18607,18624,18625,18627,18649,18650,18651,18658,19240,19242],"fullWord":12370},{"subwords":[5691,5693,5790,5918,10383,10392,10433,10434,10437,10451,10459,10460,10465,12339,12368,12371,12374,12376,16319,16335,16399,16457,17052,17818,17828,18576,18583,18585,18588,18607,18624,18625],"fullWord":12371},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":12372},{"subwords":[5928,5935,5984,5998,6066,8483,8540,8552,8562,12339,12374,12375,12612,15241,15312,15748,18576,18583,18607,18649,18650,18697,18698,18708,18712,18767,19240],"fullWord":12375},{"subwords":[4774,4788,4841,5665,5865,12339,12340,12374,12377,18576,18577,18583,18607,18610,18615,18630,18631,18969],"fullWord":12377},{"subwords":[5928,5935,5984,5998,12339,12374,12378,15241,15312,15748,18576,18583,18607,18615,18630,18632,18649,18650,18969,19240],"fullWord":12378},{"subwords":[5691,10383,10437,10460,12339,12374,12379,18576,18583,18607,18615,18630,18969],"fullWord":12379},{"subwords":[10437,10460,10495,11065,12374,12380,12381,18607,18630,18636,18969,19389,21120,21135],"fullWord":12380},{"subwords":[399,817,5588,5592,5595,5627,5745,5976,10174,10324,10344,10355,10356,10470,11001,11003,11008,11029,12229,12319,12382,14821,14968,15225,15777,15800,15821,15822,19600,19601,19602,19745,19837,19847,19848,19866],"fullWord":12382},{"subwords":[5953,12353,12383,12528,12533,12548,12594,12651,12876,12979,13051,15238,15610,15706,15777,15821,15822,19866],"fullWord":12383},{"subwords":[5928,5935,5938,5984,5998,12339,12374,12384,12659,15241,15312,15748,15777,15821,15822,15833,15858,18576,18583,18607,18637,18649,18650,19240,19356,19434,19438,19440,19467,19476,19866],"fullWord":12384},{"subwords":[204,596,605,1106,4492,4493,4500,4569,4605,4774,4851,5865,12229,12305,12385,19910,19948,19950,19951,19990,20027],"fullWord":12385},{"subwords":[4714,4774,4861,4935,4985,4988,5071,5114,5172,5176,5267,5865,5942,5953,9110,9360,12387,12388,12493,12499,12752,12758,12876,13093,13101,13102,20008,20027,20126,20127,20129,20130,20152,20157,20159,20164,20243,20262],"fullWord":12388},{"subwords":[617,817,867,1145,1158,5588,5595,5976,9785,9836,9855,9978,12229,12277,12319,12390,12391,14798,14821,14840,14933,20361,20363,20365,20393,20396,20410,20417,20423,20432,20497,20505,20510,20579,20979,20984],"fullWord":12391},{"subwords":[5691,5693,5790,5918,6118,6121,10383,10392,10433,10434,10451,12339,12390,12392,12393,12397,16319,16335,16475,16481,17059,20532,20541,20544,20579,20584],"fullWord":12393},{"subwords":[5918,6118,6121,12339,12368,12374,12376,12390,12395,12397,12399,12401,16319,16335,16399,16457,16475,16481,17850,18231,18576,18583,18585,18588,18607,18624,18625,19516,20532,20541,20544,20551,20579,20584,20585,20591,20594,20596],"fullWord":12395},{"subwords":[5918,8540,8547,8588,8593,8594,8625,8628,8678,8679,9307,12390,12396,12397,16475,16481,16574,16610,16613,16629,16631,16858,16860,16862,16874,18245,20579,20584,20635,20638,20656,20659,20774,20785,20788,20807,20826,20832],"fullWord":12396},{"subwords":[5909,5953,12353,12374,12390,12399,12400,12528,12533,12574,12581,12606,12876,13110,13119,18607,18619,18981,19036,19038,19054,19166,19178,19548,20579,20585,20594,20875,20897,20899],"fullWord":12400},{"subwords":[6171,10437,10460,10494,10495,11065,11071,12374,12402,12403,18607,18677,21120,21135],"fullWord":12403},{"subwords":[657,2869,3402,9207,9208,9297,12252,12405],"fullWord":12405},{"subwords":[1560,1671,1673,1767,1777,1780,1837,1840,4618,4714,4774,4935,4985,4988,5632,5865,12331,12406,12407],"fullWord":12407},{"subwords":[1510,1636,1671,1767,1770,1817,1837,5632,10414,10504,10536,10544,10625,12331,12406,12408,12438,12439],"fullWord":12408},{"subwords":[3120,3413,3523,5856,5861,9079,9101,9207,9293,10414,10495,10518,10536,10544,10625,10636,10662,11065,12410,12411,12438,12439,21120,21144],"fullWord":12411},{"subwords":[3145,3150,3413,3415,3429,3430,3434,4238,4241,5856,5918,6023,6057,9079,9085,9207,9212,9307,9310,9312,9318,9325,9447,12368,12374,12376,12410,12413,12463,12471,16163,16178,16298,16304,16399,16400,16457,16769,16858,16859,16860,16907,16911,17255,17826,18607,18624,18823,18830,18844,18850,18894,18898,18900,18919,18947],"fullWord":12413},{"subwords":[3145,3413,3429,3430,3440,5856,6057,9079,9101,9207,9325,12374,12410,12414,12463,18607,18823,18844,18894,18898,18925,21120,21135,21136,21144],"fullWord":12414},{"subwords":[3272,3282,3283,3305,3309,3413,4639,4714,4774,4909,4935,4985,4988,5856,5865,8540,8612,8617,8619,8625,8626,8649,9079,9082,9207,9213,9214,12410,12415,12416],"fullWord":12416},{"subwords":[3272,3305,3309,3310,3316,3413,3415,5856,5918,6023,8540,8547,8612,8625,8628,8678,8679,9079,9085,9207,9213,9215,9307,12410,12415,12417,16178,16298,16574,16629,16631,16769,16858,16859,16860,16874],"fullWord":12417},{"subwords":[3413,4639,4651,4714,4774,4909,4917,4935,4957,4985,4988,5856,5865,9079,9082,9207,9276,9277,9836,9885,9913,9914,9919,12335,12410,12418,12419],"fullWord":12419},{"subwords":[3120,3413,3523,3527,5778,5856,5861,9079,9150,9207,9276,9281,9836,9902,9913,9919,10414,10416,10518,10525,10536,10544,10566,10569,10625,10645,12335,12410,12418,12420,12422,12438,12439],"fullWord":12420},{"subwords":[3413,5856,5996,9079,9094,9207,9276,9278,9384,9396,9836,9855,9913,9919,12335,12410,12412,12418,12421,15021,15175,15411,15422,15498],"fullWord":12421},{"subwords":[3120,3413,3523,3527,5778,5856,5861,9079,9150,9207,9276,9281,9836,9902,9913,9919,10414,10416,10518,10525,10536,10544,10566,10569,10625,10645,12335,12410,12418,12420,12422,12438,12439],"fullWord":12422},{"subwords":[3119,3139,3413,3415,5856,5918,6023,9079,9085,9207,9307,12339,12410,12424,12425,16160,16178,16298,16319,16335,16352,16769,16858,16859,16860],"fullWord":12425},{"subwords":[5709,5894,5988,5996,7493,7578,7604,7605,8015,9384,12427,15141,15173,15175,15234,15461,15494],"fullWord":12427},{"subwords":[5709,7477,7493,7578,7604,7680,9265,10398,10414,10536,10544,10625,10637,12428,12438,12439],"fullWord":12428},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5865,7493,7604,8540,8617,8619,8625,8626,8649,8655,8656,12350,12429,12430],"fullWord":12430},{"subwords":[5894,5988,5996,7493,7604,8015,8503,8540,8552,8625,8655,8657,8672,9384,12350,12429,12431,15141,15173,15175,15234,15383,15461,15494],"fullWord":12431},{"subwords":[7604,7611,7635,7637,8660,8663,8678,8679,8685,8688,8691,8935,9307,9318,9325,9447,12429,12432,12433,12434,12463,12471,12612,16629,16653,16805,16809,16815,16858,16866,16874,16907,17255,17870,18731,18733,18734,18738,18742,18894,18901,18907,18919,18947],"fullWord":12434},{"subwords":[7604,7637,8660,8688,9044,9325,12429,12433,12435,12463,12612,18731,18733,18806,18894,18901,18925,19552,21144],"fullWord":12435},{"subwords":[8678,8679,9307,10654,12436,12437,12438,12442,12462,16629,16858,16874],"fullWord":12437},{"subwords":[4714,4728,4739,4744,4774,4935,4967,4985,4988,5756,5780,5865,9117,9152,10378,10414,10427,10530,10536,10537,10544,10625,10628,12438,12439,12440,12441],"fullWord":12441},{"subwords":[1636,1671,1817,1837,5782,9077,10414,10504,10536,10544,10584,10587,10595,10605,10625,11489,11512,11645,11659,11668,11697,11706,12331,12406,12438,12439,12443,12444],"fullWord":12444},{"subwords":[1837,1954,9077,9293,10504,10584,10587,10594,10605,10618,10662,11659,11697,12406,12438,12443,12445,21144],"fullWord":12445},{"subwords":[1837,1850,2567,2576,2577,2600,2668,9077,9307,9422,11616,11697,11728,11735,12406,12409,12443,12446,12447,12614,12622,12646,12650,16765,16858,17288,18035,18083,18103,18117],"fullWord":12446},{"subwords":[9297,9325,12374,12448,12450,12463,18607,18844,18894,18898,18918,18925,21120,21135,21136,21144],"fullWord":12450},{"subwords":[8660,8663,8678,8679,8685,8688,8691,8935,9297,9302,9307,9318,9325,9447,12451,12452,12463,12471,12612,16629,16653,16858,16874,16907,17255,18731,18738,18742,18894,18919,18947],"fullWord":12452},{"subwords":[4714,4774,4935,4985,4988,5014,5865,12453,12454,13478,13539,13544,13569,13705,13710,13765,13769,13771,13813,13815,13816,14237],"fullWord":12454},{"subwords":[5996,9384,12453,12455,13539,13569,13577,13705,13712,13765,13769,13813,13815,13817,14262,14278,15175,15248,15262,15508,15509,15511],"fullWord":12455},{"subwords":[10414,10536,10544,10625,10665,12438,12439,12453,12456,13539,13569,13705,13743,13765,13769,13813,13815],"fullWord":12456},{"subwords":[9297,9360,12453,12457,12528,12933,13765,13796,13809,13813,14032,14130],"fullWord":12457},{"subwords":[5918,6039,9307,9413,9430,12367,12460,12461,12462,16858,16860,16861,16881,16903],"fullWord":12461},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":12465},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":12467},{"subwords":[3429,9207,9325,9338,12463,12468,18823,18894],"fullWord":12468},{"subwords":[9307,9318,9322,9325,9335,9338,9340,9341,9360,9366,9400,9405,9409,9447,12463,12469,12470,12471,12513,12548,12560,12574,12591,13007,13008,13011,15504,15507,15684,15691,15700,16858,16889,16907,17255,17276,17278,17383,17429,17435,17722,17881,18894,18919,18945,18946,18947,19036,19057,19093,19105,19113,19114,19292,19294,19313],"fullWord":12470},{"subwords":[9325,12463,12473,18894,18921,18950,18969,19530,19545,20774,20842],"fullWord":12473},{"subwords":[5918,9307,12460,12462,12474,12476,12477,12478,16483,16858,16860,16922,21024],"fullWord":12478},{"subwords":[1510,1636,1671,1969,2042,2106,2127,2134,5632,5637,5953,10443,10444,10748,10753,10822,12331,12481,12482,12484,12485,12504,12845,12876],"fullWord":12482},{"subwords":[1636,1671,2072,2106,2127,2134,2136,2205,2211,2212,2446,5637,5914,5953,10443,10444,10748,10753,10822,10824,10882,10886,12331,12481,12484,12485,12486,12504,12548,12845,12876,12959,12979,14995,15238,15576,15579,15586,15610,15621],"fullWord":12486},{"subwords":[1636,1671,1684,2106,2108,2127,2134,2138,2153,5637,5638,5918,5953,5955,10323,10433,10443,10444,10447,10748,10753,10755,10758,10822,10888,12331,12332,12481,12484,12485,12487,12489,12504,12505,12506,12560,12561,12845,12848,12876,12879,17096,17097,17259,17308,17354,17359,17383],"fullWord":12487},{"subwords":[2058,2070,2127,2130,2151,2156,2160,2178,2300,2302,5172,12481,12488,12493,21154,21183,21184],"fullWord":12488},{"subwords":[3638,3644,3657,3697,3698,3777,3786,3787,3804,3805,4639,4651,4656,4774,5096,5099,5114,5172,5176,5653,5856,5865,5953,9836,9837,9841,12335,12490,12491,12493,12499,12752,12874,12876],"fullWord":12491},{"subwords":[4774,5114,5172,5176,5865,5953,12493,12495,12499,12745,12752,12876],"fullWord":12495},{"subwords":[4774,4810,5114,5115,5172,5176,5392,5393,5865,5953,12358,12493,12496,12499,12548,12745,12746,12752,12876,12979,15060,15078,15227,15238,15600,15603,15610],"fullWord":12496},{"subwords":[4728,4774,5114,5146,5147,5172,5176,5756,5865,5953,10378,10427,10443,10444,10780,10781,10822,12493,12497,12499,12504,12745,12752,12837,12838,12845,12876],"fullWord":12497},{"subwords":[4728,4774,5114,5146,5172,5176,5471,5472,5507,5511,5523,5756,5865,5953,10378,10427,10443,10444,10470,10780,10781,10822,10906,10907,11008,12493,12499,12502,12504,12624,12752,12837,12838,12845,12876,19664,19717],"fullWord":12502},{"subwords":[5918,5953,5955,6039,9307,9360,9366,12367,12506,12507,12516,12518,12560,12561,12563,12876,12879,16858,16860,16861,16881,16903,17383,17388,17395,17434],"fullWord":12507},{"subwords":[3145,3147,3413,3429,3430,3689,3777,3786,3816,3817,3965,3968,5653,5856,5953,6057,9079,9097,9207,9325,9335,9360,12374,12410,12463,12508,12574,12581,12586,12874,12876,13038,18607,18823,18844,18894,18898,18981,19036,19038,19049],"fullWord":12508},{"subwords":[7578,7604,7797,7818,9297,9360,12509,12510,12528],"fullWord":12510},{"subwords":[5918,5953,5955,5996,6000,6004,9307,9360,9366,9384,9389,9400,9403,9405,9409,12506,12513,12514,12515,12516,12548,12556,12560,12561,12569,12876,12879,12979,12982,13007,13022,15175,15177,15238,15296,15500,15526,15527,15610,15611,15676,15684,16388,16391,16439,16858,16860,16889,16890,16893,17272,17383,17419,17722],"fullWord":12515},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5114,5117,5172,5176,5188,5221,5223,5679,5728,5865,5875,5918,5953,5955,9110,9111,9127,9307,9360,9366,12493,12499,12500,12501,12506,12516,12517,12560,12561,12562,12752,12755,12758,12876,12879,12886,16381,16780,16858,16860,17243,17323,17383,17387],"fullWord":12517},{"subwords":[5918,5953,5955,6039,9307,9360,9366,12367,12506,12507,12516,12518,12560,12561,12563,12876,12879,16858,16860,16861,16881,16903,17383,17388,17395,17434],"fullWord":12518},{"subwords":[183,197,200,605,610,4472,4479,4483,4489,4491,4492,5163,5171,5172,5173,5188,5221,11107,11123,11213,11245,11247,11265,11330,11345,11810,11812,11813,11831,11845,11891,11893,11894,11915,12244,12493,12501,12522,12523,12524,12527,12560,12872,15893,15973,15986,15988,17323,17324,17378,17383],"fullWord":12524},{"subwords":[9307,9360,9366,9422,11697,11728,11772,11854,11885,11890,11891,11907,11915,12443,12447,12522,12526,12527,12560,12872,16851,16858,17383],"fullWord":12526},{"subwords":[215,269,299,302,657,663,666,686,5718,5953,7493,7507,7815,12229,12230,12252,12353,12509,12528,12529,12533,12876],"fullWord":12529},{"subwords":[3777,3786,3788,3808,3812,3814,5653,5856,5918,5953,5955,6023,12353,12355,12506,12528,12530,12531,12533,12535,12560,12561,12874,12875,12876,12879,16188,16298,17316,17383],"fullWord":12531},{"subwords":[3732,3777,3808,3826,3852,11891,11911,11921,11931,12522,12528,12532,12541],"fullWord":12532},{"subwords":[5718,5953,7493,7815,7826,7841,12353,12509,12528,12533,12534,12541,12876],"fullWord":12534},{"subwords":[254,657,666,686,693,6293,6344,6925,12252,12293,12528,12536,12574,12575,12672,12686,12785,18408,18432,19036],"fullWord":12536},{"subwords":[657,666,686,11213,11265,11810,11891,12244,12252,12522,12528,12537],"fullWord":12537},{"subwords":[5953,11512,11891,12353,12522,12525,12528,12533,12538,12866,12876],"fullWord":12538},{"subwords":[4728,4774,5114,5146,5172,5176,5756,5865,5953,10378,10427,10443,10444,10780,10781,10822,10833,10845,12493,12499,12504,12521,12539,12752,12753,12837,12838,12845,12846,12876],"fullWord":12539},{"subwords":[4774,4785,4826,5114,5117,5172,5176,5188,5221,5223,5865,5875,5918,5953,5955,12493,12499,12500,12501,12506,12543,12544,12560,12561,12562,12752,12753,12754,12755,12876,12879,16381,17262,17323,17383,17387,17397],"fullWord":12544},{"subwords":[5918,5953,5955,6000,6004,12506,12543,12545,12548,12556,12560,12561,12876,12879,12979,12982,13007,15238,15610,15611,15676,16391,17272,17383,17397,17398,17419],"fullWord":12545},{"subwords":[5918,5953,5955,6039,12367,12506,12543,12546,12560,12561,12563,12876,12879,17383,17388,17395,17397,17434],"fullWord":12546},{"subwords":[3638,3689,3693,3777,3893,3913,4985,5096,5172,5210,9097,9207,9360,9400,12493,12513,12548,12549,12757,12758,12965,15428,15491,15592,15600],"fullWord":12549},{"subwords":[869,10136,10738,10741,10876,10886,11173,11213,11243,11265,11276,11303,11810,11863,11891,11963,11977,12244,12522,12548,12550,12551,12552,12680,12948,14808,14821,15564,15568,15627,15628],"fullWord":12552},{"subwords":[657,666,686,869,11213,11243,11265,11276,11810,11891,11977,12244,12252,12522,12528,12548,12550,12551,12553,12680,14808,14821,15564,15568,15627,15628],"fullWord":12553},{"subwords":[4763,4767,4774,4810,4818,5114,5115,5163,5165,5172,5176,5213,5392,5865,5953,11512,11516,11539,11831,11833,11838,11891,11896,11970,11977,12358,12493,12499,12522,12525,12548,12550,12554,12752,12866,12876,12979,15060,15078,15202,15227,15238,15600,15603,15608,15610,15627,15632],"fullWord":12554},{"subwords":[8789,8857,8867,8871,8874,8879,8887,8892,8901,8934,8935,12548,12557,12558,12560,12565,12574,12591,12612,12810,13007,13008,13009,13011,15386,15691,15700,16700,16701,16704,17276,17278,17383,17429,17435,18743,18749,18751,18752,18777,19036,19057,19093,19105,19113,19123],"fullWord":12558},{"subwords":[716,1158,1166,12282,12311,12548,12559,12606,12607,12680,13119,14821,14933,14939,14942,15568,15734,15735,15864,20393,20410,20432,20448,20493,20897,20944,21010,21075,21079,21085,21183,21202],"fullWord":12559},{"subwords":[4774,4785,4826,5114,5117,5172,5176,5188,5221,5223,5865,5875,5918,5953,5955,8540,8547,8721,8724,8725,8726,8730,8789,8793,8794,8797,8881,8882,12493,12499,12500,12501,12506,12560,12561,12562,12565,12566,12752,12755,12802,12810,12876,12879,16381,16574,16581,16674,16676,16677,16685,17323,17383,17387],"fullWord":12566},{"subwords":[5918,5953,5955,6000,6004,8540,8547,8552,8575,8579,8580,8581,8584,8725,8728,8729,8730,8789,8793,8795,8796,8797,8857,8867,8871,8874,8875,8881,8934,12506,12548,12556,12560,12561,12565,12567,12810,12876,12879,12979,12982,13007,15238,15386,15610,15611,15676,16386,16391,16574,16676,16678,16685,16697,16700,17272,17383,17419],"fullWord":12567},{"subwords":[5918,5953,5955,6039,8540,8547,8725,8730,8789,8793,8797,8881,8883,12367,12506,12560,12561,12563,12565,12568,12810,12876,12879,16574,16609,16676,16680,16685,17383,17388,17395,17434],"fullWord":12568},{"subwords":[5918,5953,5955,5996,6000,6004,9307,9360,9366,9384,9389,9400,9403,9405,9409,12506,12513,12514,12515,12516,12548,12556,12560,12561,12569,12876,12879,12979,12982,13007,13022,15175,15177,15238,15296,15500,15526,15527,15610,15611,15676,15684,16388,16391,16439,16858,16860,16889,16890,16893,17272,17383,17419,17722],"fullWord":12569},{"subwords":[9293,9307,9360,9366,10652,10653,10654,10662,10663,10664,10814,10815,11082,12438,12442,12519,12560,12570,12573,12812,12822,12824,12882,16837,16858,17149,17350,17354,17364,17383,17472,21144,21145,21183,21186,21187],"fullWord":12570},{"subwords":[7604,7611,9297,9302,9307,9360,9366,12509,12512,12528,12560,12571,16815,16858,16866,17383,17389],"fullWord":12571},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":12572},{"subwords":[693,716,894,911,919,12282,12293,12311,12548,12574,12575,12577,12680,12686,13008,14821,14847,14898,14939,14942,15568,15691,15864,18408,18432,18449,18460,18463,19036,19059,19093,19094,19105,19122,19186,19231,19347,19377,19573,21075,21183],"fullWord":12577},{"subwords":[215,693,694,1009,1024,1044,5620,5953,6055,6074,12229,12293,12325,12374,12574,12575,12578,12581,12686,12687,12876,18408,18430,18432,18495,18498,18541,18565,18607,18630,18969,18981,19036,19038,19131,19134],"fullWord":12578},{"subwords":[3777,3816,3825,3965,4029,8714,8789,8892,12574,12579,12580,12612,18743,18806,19036,19059,19186,21183],"fullWord":12580},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":12584},{"subwords":[3145,3147,3413,3429,3430,3689,3777,3786,3816,3817,3965,3968,5653,5856,5953,6057,9079,9097,9207,9325,9335,9360,12374,12410,12463,12508,12574,12581,12586,12874,12876,13038,18607,18823,18844,18894,18898,18981,19036,19038,19049],"fullWord":12586},{"subwords":[6593,6651,6925,9257,9325,9335,9360,12426,12463,12574,12587,12785,18894,18925,19036,19059,19186,21144,21183,21186],"fullWord":12587},{"subwords":[7604,7637,7874,9267,9297,9325,9335,9360,12463,12509,12528,12574,12588,18894,18901,18993,19036,19043,19053],"fullWord":12588},{"subwords":[9297,9325,9335,9360,12463,12528,12541,12574,12589,12880,12887,18894,19036,19060],"fullWord":12589},{"subwords":[299,693,1074,1093,7416,7434,7745,7759,7768,7874,7886,8097,8151,8175,12230,12293,12300,12509,12574,12575,12592,12659,12686,13059,18342,18408,18410,18414,18432,18508,18993,18994,19036,19043,19418,19434,19435,19685,19780],"fullWord":12592},{"subwords":[7759,7874,7875,7886,8151,8175,8731,8736,8789,8892,8951,8989,8990,8998,9026,12509,12574,12593,12612,12659,13046,13059,18743,18747,18759,18796,18993,19036,19043,19151,19418,19434,19583,19685,19780],"fullWord":12593},{"subwords":[657,666,670,686,10741,11001,12252,12528,12594,12595,12651,19600],"fullWord":12595},{"subwords":[5918,5953,5955,10433,10443,10444,10447,10471,10488,10822,10888,10935,10940,12504,12505,12506,12560,12561,12601,12602,12845,12848,12876,12879,13093,13094,17097,17120,17354,17359,17374,17383,20250,20251,20252,20262],"fullWord":12602},{"subwords":[215,657,663,666,686,1106,5953,12229,12252,12305,12353,12528,12533,12598,12599,12603,12876,13087,13093,19948,19950,20262],"fullWord":12603},{"subwords":[3413,3689,3777,3786,3997,3999,5653,5856,5942,5953,9079,9097,9207,9360,12387,12410,12604,12874,12876,13093,13102,20008,20119,20129,20152,20157,20164,20233,20239,20262],"fullWord":12604},{"subwords":[716,1158,1161,12311,12312,12560,12573,12606,12607,12608,12610,13119,13124,15986,16089,16095,16103,17284,17287,17383,17464,17469,17472,17473,18195,18217,20393,20449,20493,20496,20897,21079,21085,21088,21093,21183,21202,21211],"fullWord":12608},{"subwords":[5909,5918,5953,5955,9307,9360,9366,12390,12397,12506,12516,12560,12561,12606,12609,12610,12876,12879,13110,13112,13119,13124,16475,16481,16858,16860,16862,17284,17383,17464,17469,18245,20579,20584,20774,20785,20788,20804,20805,20806,20807,20826,20875,20877,20897],"fullWord":12609},{"subwords":[5953,10443,10444,10822,12504,12611,12845,12876,21255,21297],"fullWord":12611},{"subwords":[93,114,657,663,2869,2883,4268,5627,5856,12229,12252,12253,12613,12651],"fullWord":12613},{"subwords":[1767,1837,2505,2577,2597,9297,12406,12614,12615,12651],"fullWord":12615},{"subwords":[1510,1636,1671,2004,2505,2550,2577,5632,10470,10961,11008,12331,12614,12616],"fullWord":12616},{"subwords":[1510,2505,2550,2577,2710,11024,12614,12617,12618],"fullWord":12617},{"subwords":[67,348,647,691,712,1332,1359,1422,1440,1763,1837,1850,2577,2600,2668,9307,12219,12223,12406,12409,12614,12619,12620,12622,15986,16765,16858,17288,18035,18083,18117,19871],"fullWord":12620},{"subwords":[1636,1671,1817,1837,2004,2577,10414,10470,10504,10536,10544,10552,10625,10961,11008,12331,12406,12438,12439,12614,12621],"fullWord":12621},{"subwords":[3120,3413,3523,3584,4268,5856,5861,9079,9207,10414,10470,10518,10536,10544,10552,10625,11008,12410,12438,12439,12623,19652],"fullWord":12623},{"subwords":[4728,4774,4795,5471,5472,5498,5507,5511,5567,5579,5756,5865,10378,10427,10470,10495,11008,11024,11065,12624,12625,19669,19717,21120,21222],"fullWord":12625},{"subwords":[4774,4785,4788,4792,4826,4849,5471,5478,5479,5480,5507,5511,5512,5522,5548,5865,5875,5918,12368,12374,12376,12624,12627,12628,12659,12663,16381,16399,16457,17999,18005,18066,18067,18074,18117,18575,18607,18610,18614,18624,19434,19438,19439,19442,19452,19763,19876,19877],"fullWord":12628},{"subwords":[4774,5466,5467,5471,5485,5507,5511,5513,5514,5865,7493,7759,8151,12624,12629,12630],"fullWord":12630},{"subwords":[4774,4810,5351,5420,5471,5485,5507,5511,5513,5539,5865,5894,5988,7493,7535,7759,8151,12358,12624,12626,12629,12631,15060,15141,15227,15773,15777,15778,15790,15821,15822,15824,19660,19855,19856,19866],"fullWord":12631},{"subwords":[4774,4785,4826,4849,5471,5478,5485,5488,5507,5511,5512,5513,5515,5522,5865,5875,5918,7460,7493,7511,7518,7759,7760,8151,8160,12348,12624,12627,12629,12632,16381,17292,18066,18067,18117,18125,19876,19877],"fullWord":12632},{"subwords":[4714,4774,4785,4826,4849,4935,4939,4985,4988,4992,5007,5037,5471,5478,5507,5511,5512,5522,5865,5875,5918,9111,9127,9241,9243,9307,9449,9450,12624,12627,12633,12634,16381,16780,16858,16860,17243,18066,18067,18083,18117,19662,19876,19877],"fullWord":12634},{"subwords":[4971,4983,4985,5007,5037,5507,5522,9127,9307,9422,9449,9450,11626,11641,11697,11702,11705,11728,11735,12091,12097,12443,12447,12635,16858,18083,18103,18117],"fullWord":12635},{"subwords":[4985,5007,5008,5010,5037,5507,5522,5548,9127,9307,9318,9325,9447,9449,9450,12463,12471,12636,12659,12663,16858,16907,16917,17255,17999,18005,18083,18085,18117,18894,18919,18947,19434,19447,19452,19701,19706],"fullWord":12636},{"subwords":[4985,5008,5507,5555,9325,9449,12463,12637,12659,18843,18894,18925,19434,19669,19701,19707,19775,21140,21144],"fullWord":12637},{"subwords":[4985,5507,5516,9276,9297,9449,9885,9913,9914,12638,12651,19712],"fullWord":12638},{"subwords":[5709,7493,7512,7540,7759,8151,8153,8175,12374,12639,12659,18607,19418,19434,19438],"fullWord":12639},{"subwords":[4728,4744,4774,5471,5472,5492,5507,5511,5756,5780,5865,10378,10427,10470,11008,12624,12642,12643,19717],"fullWord":12643},{"subwords":[1560,1671,1673,2517,2567,2577,2582,4618,4774,5445,5471,5499,5507,5511,5846,5865,11512,11516,11534,12091,12331,12614,12624,12646,12647],"fullWord":12647},{"subwords":[1671,1700,2567,2577,2610,2638,5846,11512,11534,11539,12331,12614,12646,12648,14995,15202,15749,15755,15777,15806,15821,15822,19614,19840,19866],"fullWord":12648},{"subwords":[2567,2577,2710,11024,12614,12646,12649],"fullWord":12649},{"subwords":[3689,3777,3808,4299,9097,9207,9297,9360,9369,12528,12594,12651,12652,13048,19655,19696],"fullWord":12652},{"subwords":[3584,4268,5856,5861,10470,11008,12651,12653,19652],"fullWord":12653},{"subwords":[4774,4785,4810,4826,4849,5471,5478,5507,5511,5512,5522,5539,5541,5865,5875,5918,6000,12358,12359,12624,12626,12627,12655,12656,15060,15087,15227,15230,15773,15777,15778,15782,15821,15822,15823,15832,15840,16381,18066,18067,18071,18117,18121,18150,19660,19846,19866,19867,19876,19877,19880],"fullWord":12656},{"subwords":[5918,6000,6008,6016,12655,12657,15278,15279,15777,15780,15781,15782,15821,15822,15823,15832,15840,18066,18071,18117,18150,18152,19866,19867,19876,19880],"fullWord":12657},{"subwords":[5918,6000,6039,12367,12655,12658,15777,15782,15821,15822,15823,15832,15840,15841,15849,16398,18066,18071,18072,18073,18117,18130,18150,19866,19867,19876,19880,19881,19882,19886],"fullWord":12658},{"subwords":[10437,10460,10470,11008,11010,11050,12374,12659,12660,18607,18630,18969,19434,19438,19493,19605,19719],"fullWord":12660},{"subwords":[5846,7489,7493,7512,7540,7545,7759,8145,8151,8175,11487,11512,11534,11574,12104,12184,12374,12659,12661,18595,18607,19418,19434,19438,19730],"fullWord":12661},{"subwords":[349,693,700,911,1074,9325,9338,9339,9376,9378,12300,12463,12659,12662,14784,14821,14838,14847,14898,15795,15821,15833,15858,18347,18408,18449,18460,18508,18894,19212,19434,19435,19476,19701,19866],"fullWord":12662},{"subwords":[4774,4788,5471,5479,5507,5511,5865,12374,12624,12659,12664,18607,18610,18630,18969,19434,19438,19439,19493],"fullWord":12664},{"subwords":[12374,12659,12665,15241,15312,15748,15777,15821,15822,15833,15858,18607,18630,18649,18969,19356,19434,19438,19440,19476,19493,19866,19900],"fullWord":12665},{"subwords":[1510,1636,1671,1749,2721,5632,10495,11065,12331,12666,21120],"fullWord":12666},{"subwords":[12528,12560,12573,12667,12668,12882,17149,17354,17383,17394,17472,21183],"fullWord":12668},{"subwords":[8788,8789,8845,9047,9058,11891,11920,11947,11962,12079,12522,12669,12670,12806,13670,14115,21183],"fullWord":12670},{"subwords":[9047,9050,12079,12669,12671,13681,16758,17697],"fullWord":12671},{"subwords":[325,932,6642,8362,8678,8739,9135,12672,12673,12674,12810,17334,17339],"fullWord":12673},{"subwords":[564,565,586,950,1070,1071,11265,11330,11341,11813,12166,12675,12677,12678,12679,12872,15973,17294,17378,18103,18112,19871],"fullWord":12679},{"subwords":[287,299,349,837,7283,7375,7604,7918,8015,8038,8045,9360,9376,9378,9400,12230,12509,12513,12548,12680,12682,12951,12983,12995,14758,14784,14821,14832,14838,15461,15494,15568],"fullWord":12682},{"subwords":[817,825,891,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6004,6018,6055,12680,12683,12686,12688,12689,12692,12955,12957,12979,12982,13007,13008,13011,14881,14898,14901,14905,14912,15306,15312,15574,15610,15611,15673,15676,15691,15694,15695,15700,15748,16041,16043,16270,16286,16293,16419,16457,17303,17419,17429,17435,17773,17775,17885,17924,18432,18435,18449,18453,18455,18463,18464,18472,18541,18554,18557,18559,18981,18985,19093,19094,19097,19101,19103,19113,19381],"fullWord":12689},{"subwords":[51,67,325,932,1269,1422,1425,1431,2029,2034,2223,8362,8705,8713,8725,8730,8881,12693,12694,12810,16270,16574,16676,17308],"fullWord":12694},{"subwords":[1560,1576,1749,2058,2059,2070,2300,2721,4618,5114,5567,6189,6191,12696,12697,12752,21154],"fullWord":12697},{"subwords":[1576,1587,1589,1749,2072,2205,2300,2446,2721,2730,5698,5984,6189,6196,12696,12698,12959,12979,13145,14995,15576,15579,15610,15866,21189],"fullWord":12698},{"subwords":[1721,1790,1851,1881,1884,1885,2072,2205,2219,2237,2417,2439,2444,2446,9384,12700,12702,12703,12959,12962,12979,13008,14995,15312,15402,15504,15542,15576,15579,15610,15691,15694,15748,18817,18844,18847,18941,18945,18981,19093,19101,19265,19292],"fullWord":12703},{"subwords":[1721,2237,3617,3965,3968,6057,9531,9557,9603,9614,9657,12705,18981],"fullWord":12705},{"subwords":[31,43,51,72,385,399,472,488,495,1009,1301,1462,1464,1542,1636,1661,1721,1722,1922,1936,1967,1989,2029,2037,2039,2100,2106,2115,2237,5620,6055,10061,10247,10324,10443,10460,10748,10753,10897,12686,12706,12845,18302,18309,18370,18432,18541,18547,18981,19017],"fullWord":12706},{"subwords":[1604,1636,1797,1817,1819,1851,1852,2079,2085,2087,2095,2106,5718,7477,7525,7567,7682,7696,7698,7771,10398,10414,10443,10504,10536,10748,10753,10793,10796,12695,12700,12707,12792,12812,12845],"fullWord":12707},{"subwords":[2079,2113,2127,2140,2142,2151,2160,2178,7696,7771,7826,7841,10748,10756,10793,10809,10826,10833,10845,12481,12509,12521,12708,12712],"fullWord":12708},{"subwords":[1851,1858,1881,1889,2160,2182,2183,2185,2191,2237,9447,12700,12701,12702,12704,12711,16765,16907,17308,17399,17435,18540,18947,19060],"fullWord":12711},{"subwords":[1715,2230,2233,6039,12714,17308,17315,17434],"fullWord":12714},{"subwords":[51,72,693,700,1282,1332,1462,1480,1837,1851,1856,1859,1881,2029,2037,2127,2128,2147,2237,9325,9335,9360,9367,12219,12293,12406,12463,12481,12574,12575,12686,12700,12702,12715,18302,18347,18408,18432,18894,19036],"fullWord":12715},{"subwords":[1713,1716,1721,1736,2237,2264,2268,2269,2668,2690,2697,2700,12716,13055,13059,13082,16457,17308,17435,17994,18035,18066,18074,18540,18981,18985,19390,19397,19401,19403,19876],"fullWord":12716},{"subwords":[3560,3569,3701,3728,3965,4289,4375,10760,10897,10929,12717,13059,19605],"fullWord":12717},{"subwords":[3864,3888,3984,4029,4034,4049,4302,12718,21193,21224],"fullWord":12718},{"subwords":[4106,4178,4312,4350,12719,12720,12965,12971,13007,13051,13052,15592,15599,16210,17316,17451,18049],"fullWord":12720},{"subwords":[93,96,114,116,215,217,2869,2883,2887,2900,2902,2906,3021,3777,3786,3788,3814,5653,5856,5918,5953,5955,6023,12229,12506,12560,12561,12721,12722,12874,12875,12876,12879,15880,15986,15995,16134,16188,16270,16298,17316,17383],"fullWord":12722},{"subwords":[3135,3560,3701,3708,3728,3826,3841,3861,3965,3968,5650,6057,10376,10443,10460,10760,10774,10833,10860,10897,12723,12845,12846,18981,19017,19060,19062],"fullWord":12723},{"subwords":[3361,3364,3367,3898,3902,3929,3944,3946,5641,6004,6023,8552,8575,8581,8584,8714,8725,8728,8729,8730,8857,8874,8875,8881,8934,12724,12725,12727,12729,12810,12965,12968,12971,12979,12982,13007,15021,15048,15386,15592,15599,15610,15611,15676,16198,16298,16574,16676,16678,16697,17316,17419],"fullWord":12725},{"subwords":[3361,3898,4029,4030,4232,5641,8552,8575,8607,8714,8725,8728,8857,12724,12726,12727,12965,12968,12979,13145,15021,15386,15592,15610,15866,21189],"fullWord":12726},{"subwords":[3359,3361,3363,3638,3644,3647,3657,3893,3898,3899,4118,4639,4656,4659,4810,5096,5114,5115,5641,8552,8558,8575,8714,8721,8725,8726,8728,8857,8864,12724,12727,12728,12752,12802,12965,12968,12979,15021,15028,15060,15078,15386,15592,15600,15603,15610],"fullWord":12728},{"subwords":[3361,3364,3367,3898,3902,3929,3944,3946,5641,6004,6023,8552,8575,8581,8584,8714,8725,8728,8729,8730,8857,8874,8875,8881,8934,12724,12725,12727,12729,12810,12965,12968,12971,12979,12982,13007,15021,15048,15386,15592,15599,15610,15611,15676,16198,16298,16574,16676,16678,16697,17316,17419],"fullWord":12729},{"subwords":[126,134,183,197,200,929,2766,2782,3041,3052,3064,3603,3605,3611,3638,3639,3641,3656,3958,3965,3971,4238,4241,5096,5104,5221,5233,5234,5245,12686,12692,12730,12731,15880,15893,16041,16114,16157,16205,17316,17323,17324,17435,17885,18333,18335,18339,18340,18432,18435,18970,18971],"fullWord":12731},{"subwords":[93,114,126,215,693,694,1009,1024,2869,2883,2900,2908,2913,3052,3145,3147,3605,3777,3786,3816,3817,3965,3966,3968,5620,5653,5849,5856,5953,6055,6057,6074,12229,12293,12325,12374,12574,12575,12581,12686,12687,12721,12733,12874,12876,18333,18408,18432,18541,18607,18981,19036,19038],"fullWord":12733},{"subwords":[126,693,1044,2869,2908,2913,3052,3605,3777,3816,3965,3966,3972,12293,12574,12575,12686,12734,18333,18336,18408,18430,18432,18495,18969,19036,19131],"fullWord":12734},{"subwords":[93,126,1009,1106,1126,3052,3080,3605,3965,3968,3997,4005,5620,6055,6057,12686,12735,13087,13092,18333,18432,18541,18981,19165,19975,20095,20097,20233,20265],"fullWord":12735},{"subwords":[126,3052,3605,3826,3861,3965,12686,12736,13087,18333,18432,19060,19165,19975],"fullWord":12736},{"subwords":[3940,3958,3965,3968,3970,3971,4238,4241,6023,6057,12737,12738,16205,16209,16298,16304,16457,17316,17435,17846,18662,18981,18985,19130,19131,19134,19140,19144],"fullWord":12738},{"subwords":[3429,3826,3854,3858,3861,3864,3965,4046,12739,12937,12939,13038,13438,13700,13850,14019,14032,14188,18823,18926,19060,19075,19083],"fullWord":12739},{"subwords":[3560,3564,3577,3579,3701,3728,3729,3958,3962,3964,3965,3971,4029,4238,4241,4423,10760,10896,10897,10901,12740,12741,16205,17113,17149,17316,17354,17435,17472,18018,19186,19195],"fullWord":12741},{"subwords":[111,796,809,2813,2840,2941,2971,2972,2983,3071,3597,3701,3702,3890,4312,4341,10072,10760,10922,12680,12742,12948,12965,12966,13051,15592,19837],"fullWord":12742},{"subwords":[3701,10760,10778,12744,17316,17354,17442],"fullWord":12744},{"subwords":[4826,5114,5117,5118,5221,5223,5224,5233,5234,5237,5238,5241,5245,12745,12747,12751,12752,12755,16457,17323,17435,18575,18981,18983,18985],"fullWord":12747},{"subwords":[4928,4931,4933,5037,5046,5221,8617,8678,8721,8724,8739,9127,12745,12748,12751,12810,16674,17323],"fullWord":12748},{"subwords":[4928,4931,4934,5234,5249,12745,12749,18843,18980,19186,21140,21154],"fullWord":12749},{"subwords":[4774,4785,4826,5114,5117,5172,5176,5188,5221,5223,5865,5875,5918,5953,5955,12493,12499,12500,12501,12506,12543,12544,12560,12561,12562,12752,12753,12754,12755,12876,12879,16381,17262,17323,17383,17387,17397],"fullWord":12754},{"subwords":[183,197,200,973,4826,5114,5117,5221,5223,5227,5229,6039,12684,12752,12755,12756,13029,15893,16270,16291,17323,17324,17325,17332,17434],"fullWord":12756},{"subwords":[5037,5221,5523,5524,9127,9369,9449,9450,12759,13048,17323,18083],"fullWord":12759},{"subwords":[4971,4983,5037,5163,5171,5221,5523,5524,9127,9369,9422,9449,9450,11626,11641,11763,11772,11831,11841,11845,11849,11854,12091,12097,12760,12761,12872,13048,17323,17329,18083,18103,18112],"fullWord":12761},{"subwords":[4810,5111,5114,5115,5196,12745,12746,12752,12762,12763,12976,12979,15060,15078,15600,15603,15605,15610,15642],"fullWord":12763},{"subwords":[5196,5197,5216,5221,5260,5523,5524,12762,12764,12765,12766,12976,12977,13007,13051,13052,15600,15609,15642,15643,17323,17451,18060,19846],"fullWord":12766},{"subwords":[5984,6092,6100,12768,12979,13051,13095,15337,15355,15610,15706,15728,15777,19992,19996],"fullWord":12768},{"subwords":[487,6861,6863,10181,10734,10737,12672,12674,12771,12772,12773,12783,15942,17334,17354],"fullWord":12773},{"subwords":[3965,4273,4375,4392,12771,12774,12785,13059,18986,18991,19414,19580],"fullWord":12774},{"subwords":[4774,5114,5120,5172,5176,5865,5950,5953,6406,6453,6458,6874,6917,12493,12499,12752,12771,12775,12776,12876],"fullWord":12776},{"subwords":[5703,5950,6004,6874,6879,6940,6955,6959,7103,7106,12771,12777,12778,12783,12979,12982,13007,15114,15134,15610,15611,15676,16431,17419],"fullWord":12778},{"subwords":[3679,5950,6543,6544,6553,6872,6874,9079,12771,12779],"fullWord":12779},{"subwords":[6560,6593,6885,7604,7821,9257,9360,12509,12771,12780],"fullWord":12780},{"subwords":[6642,8678,8739,9135,12771,12781,12783,12810],"fullWord":12781},{"subwords":[6386,6937,12672,12769,12771,12782,13424,13432,21064],"fullWord":12782},{"subwords":[5703,5705,5706,5950,6874,6879,12771,12783,12784,12785,16457,16460,17340,17435,18981,18985,18986,18988],"fullWord":12784},{"subwords":[5705,5706,5950,6874,6879,12785,12788,16457,17340,17435,17846,18662,18981,18985,18990,19130,19131,19134,19140,19144],"fullWord":12788},{"subwords":[5718,5721,5988,5989,5992,6004,7477,7486,7525,7788,7789,7790,7855,7857,7867,10398,10412,10443,10447,10793,10796,10797,10811,10882,10883,10888,10889,12792,12794,12795,12796,12798,12799,12845,12848,12979,12982,13007,15141,15610,15611,15621,15622,15676,17097,17099,17354,17359,17419,17420],"fullWord":12795},{"subwords":[7578,7604,7797,7818,9360,10637,10641,10652,10663,10793,10814,10826,12438,12509,12797,12812],"fullWord":12797},{"subwords":[5718,5721,5988,5989,5992,6004,6039,7536,7788,7789,7790,7855,7857,7867,7868,8055,12798,12799,12800,12979,12982,13007,15141,15610,15611,15676,15679,16347,17419,17424,17434],"fullWord":12800},{"subwords":[7627,7871,8678,8731,8737,8739,8857,8874,8934,9409,12801,12810,12995,13007,15386,15461,15472,15681,16805,16889,17722],"fullWord":12801},{"subwords":[8315,8739,8789,9360,12480,12804,12805,12809,12895],"fullWord":12805},{"subwords":[269,299,319,5718,7317,7323,7489,7526,8233,8290,8532,8725,8731,8773,8775,11127,11128,11265,11437,11487,12791,12806,12807,12863],"fullWord":12807},{"subwords":[4971,5163,5523,9113,9369,9449,11626,11637,11831,11841,11854,12091,12760,12811,13048],"fullWord":12811},{"subwords":[117,337,471,2813,2869,3402,3403,3459,3597,3685,3689,3701,3702,3713,3777,9097,9207,9208,9360,10072,10120,10619,10652,10663,10741,10760,10767,10814,12238,12438,12812,12813],"fullWord":12813},{"subwords":[3529,3553,3685,3701,3864,3984,4046,4047,4049,4302,9369,10665,10760,10767,10864,10917,12743,12812,12814,13048,14032,14033,14056],"fullWord":12814},{"subwords":[6004,9384,9389,9409,9416,10414,10415,10443,10447,10536,10549,10550,10551,10677,10882,10883,10884,10885,10888,10889,12812,12816,12817,12822,12845,12848,12979,12982,12992,12993,13007,13022,15246,15444,15445,15473,15475,15526,15610,15611,15617,15619,15621,15622,15676,16837,16889,16890,17072,17097,17350,17354,17359,17364,17419,17420,17722],"fullWord":12817},{"subwords":[9384,10414,10443,10536,10549,10677,10882,12812,12816,12818,12845,12979,12992,15246,15444,15473,15610,15617,15621],"fullWord":12818},{"subwords":[7604,9360,10637,10641,10652,10663,10793,10814,10826,12438,12509,12812,12819],"fullWord":12819},{"subwords":[337,341,552,643,9360,10120,10136,10584,10585,10605,10609,10652,10663,10738,10741,10814,11148,11156,11173,11182,11213,11265,11659,11662,11697,11810,11854,11856,11891,12238,12244,12438,12443,12522,12812,12820],"fullWord":12820},{"subwords":[5782,5953,9360,10414,10422,10443,10444,10536,10544,10584,10595,10605,10609,10625,10652,10663,10814,10822,11489,11500,11512,11645,11659,11668,11697,11706,11854,11856,11870,11874,11891,12438,12439,12443,12504,12522,12525,12812,12821,12845,12866,12876],"fullWord":12821},{"subwords":[337,1155,1164,9370,10292,10304,10942,12812,12823,12824,13114,20345,20493,20771,21079,21082,21202,21207],"fullWord":12823},{"subwords":[4714,4774,4935,4957,4985,4988,5114,5172,5176,5734,5865,5953,9110,9142,9276,9277,9360,9836,9837,9841,9885,9913,9914,9919,12493,12499,12752,12758,12825,12826,12834,12876],"fullWord":12826},{"subwords":[51,1851,2029,2271,9370,9457,9480,9521,9568,9603,12700,12828],"fullWord":12828},{"subwords":[950,961,9374,9932,9934,12675,12677,12829,12830,12936,13336,13343,13839,14032,14421,16014,16883,16954,16979,17294,17298,17406,17476],"fullWord":12830},{"subwords":[183,1196,4578,5114,5567,5575,9797,9798,9865,12675,12752,12831,12832,21047,21097,21154,21174,21175],"fullWord":12832},{"subwords":[4728,4826,5114,5117,5118,5146,5148,5161,5162,5221,5223,5233,5234,5237,5241,5245,5756,5760,10378,10443,10447,10459,10460,10465,10780,10782,10888,10896,10897,10901,12752,12755,12837,12840,12844,12845,12848,16457,17044,17097,17113,17323,17354,17357,17359,17360,17435,17903,18575,18981,18983,18985,19016,19017],"fullWord":12840},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5114,5117,5146,5148,5221,5223,5728,5756,5760,9110,9111,9117,9121,9125,9126,9127,9416,9417,10378,10414,10415,10443,10447,10530,10533,10534,10535,10536,10537,10551,10780,10782,10888,12752,12755,12812,12815,12822,12837,12841,12842,12844,12845,12848,16780,16784,16837,16838,17044,17068,17069,17097,17323,17350,17351,17354,17357,17359,17360,17364,17365],"fullWord":12842},{"subwords":[5037,5046,5221,8617,8678,8721,8724,8739,8749,8752,9125,9126,9127,10530,10533,10534,10535,12810,12812,12822,12837,12843,12844,16674,16837,17068,17323,17350,17354,17357,17364,17365],"fullWord":12843},{"subwords":[5782,5784,5845,5846,5847,10443,10447,10470,10888,10925,11870,11871,12034,12035,12048,12110,12112,12152,12845,12848,12849,12872,13053,16402,17097,17128,17135,17354,17359,17382,17442,18066,18103,18112,19876],"fullWord":12849},{"subwords":[6107,9384,10414,10443,10471,10481,10488,10536,10549,10677,10711,10716,10722,10882,10935,10938,12812,12816,12845,12852,12853,12979,12992,13095,15246,15337,15444,15473,15549,15610,15617,15621,15728,20004,20129,20132,20144,20146,20171,20183,20248,20250,20251],"fullWord":12853},{"subwords":[5799,6107,6110,9416,10414,10415,10443,10447,10471,10481,10486,10488,10536,10551,10711,10719,10888,10935,10940,12812,12822,12845,12848,12852,12854,16837,17097,17350,17354,17359,17364,17374,20004,20007,20129,20134,20144,20171,20176,20197,20248,20249,20250,20251,20252],"fullWord":12854},{"subwords":[337,428,9146,12812,12855,13087,13088,19919,19923,20107,20110,20171,20172,20247,20250],"fullWord":12855},{"subwords":[0,2,317,325,504,505,506,932,8290,8296,8362,11265,11330,11335,11813,12806,12808,12810,12859,12860,12872,15973,15981,16531,16664,17378],"fullWord":12860},{"subwords":[1700,1701,1711,2072,2073,2205,2208,2446,2476,5845,6004,11539,11817,11823,11970,11973,11987,12861,12862,12872,12959,12964,12979,12982,13007,14995,15014,15202,15224,15576,15579,15582,15590,15610,15611,15627,15632,15638,15676,16423,17308,17312,17380,17381,17382,17419],"fullWord":12862},{"subwords":[269,280,299,5718,5721,5845,7317,7323,7327,7342,7396,7489,7492,7526,7790,11127,11128,11129,11140,11265,11330,11437,11453,11487,11560,11813,12081,12863,12864,12872,13015,15910,15912,15921,15973,15978,16270,16278,17188,17378,17382],"fullWord":12864},{"subwords":[5691,5782,5838,10383,10443,10460,10897,11483,11502,11574,11578,11870,11879,12010,12011,12012,12845,12865,18576,18579,18595,18981,19017,19026,19032],"fullWord":12865},{"subwords":[4671,4763,4767,4774,5114,5163,5165,5172,5176,5177,5665,5822,5865,5953,11478,11512,11516,11831,11833,11891,11896,12339,12340,12493,12499,12522,12525,12752,12866,12867,12876],"fullWord":12867},{"subwords":[9360,9369,11697,11854,11885,11891,12127,12138,12443,12522,12871,13048],"fullWord":12871},{"subwords":[215,269,299,302,622,817,837,5588,5595,5718,5894,5953,5976,5988,5989,7375,7461,7493,7507,7788,7815,7816,7855,8038,12229,12230,12319,12347,12509,12548,12680,12798,12873,12876,12951,12952,12979,12983,14758,14762,14821,14832,14833,15141,15238,15568,15610],"fullWord":12873},{"subwords":[183,215,326,327,605,675,4492,4500,4605,4714,4774,4898,4935,4985,4988,5114,5172,5173,5176,5865,5953,9103,9110,9360,12229,12493,12499,12752,12758,12876,12877],"fullWord":12877},{"subwords":[9297,9302,9307,9360,9366,12528,12541,12542,12560,12880,12881,16858,17383,17397],"fullWord":12881},{"subwords":[8789,8857,8867,8871,8874,8906,8910,8934,8989,8997,9009,12548,12560,12565,12597,12810,12883,12888,13007,13051,13052,15386,15821,15832,15842,16700,16748,17383,17451,18117,19592,19866,19867],"fullWord":12883},{"subwords":[5918,5953,5955,6039,12367,12368,12373,12374,12376,12506,12560,12561,12563,12574,12581,12585,12591,12876,12879,12884,12885,16399,16457,16461,16462,16464,17278,17279,17383,17388,17395,17434,17435,17436,17834,17835,17909,17912,18607,18624,18981,18985,19036,19038,19042,19057,19125],"fullWord":12885},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5114,5117,5172,5176,5188,5221,5223,5679,5728,5865,5875,5918,5953,5955,9110,9111,9127,9307,9360,9366,12493,12499,12500,12501,12506,12516,12517,12560,12561,12562,12752,12755,12758,12876,12879,12886,16381,16780,16858,16860,17243,17323,17383,17387],"fullWord":12886},{"subwords":[5918,5953,5955,6039,12367,12506,12560,12561,12563,12597,12876,12879,12888,12889,16398,17383,17388,17395,17434,17457,18066,18073,18117,18130,19876,19882],"fullWord":12889},{"subwords":[183,195,605,1158,4492,4532,4574,4576,5172,5173,5277,5330,5335,5412,12274,12493,12548,12606,12680,12890,13119,14736,14749,14821,14826,14933,15561,15568,15600,15734,15735,20303,20393,20394,20410,20412,20432,20868,20897,20929,20944],"fullWord":12890},{"subwords":[5918,5953,5955,12506,12560,12561,12564,12573,12876,12879,12891,12892,13130,13131,13143,13147,16483,16499,17383,17471,17472,18287,21120,21122,21130,21183],"fullWord":12892},{"subwords":[3826,3832,3861,3965,3968,4029,4033,6057,12893,18981,19060,19186,21135],"fullWord":12893},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5756,5760,10378,10443,10447,10780,10782,10833,10854,10855,10856,10888,12752,12755,12837,12844,12845,12846,12847,12848,12894,13024,17044,17097,17323,17354,17357,17359,17360,17370,17371],"fullWord":12894},{"subwords":[7604,7826,7841,8731,8739,8789,9360,12429,12509,12803,12804,12809,12895,12897],"fullWord":12897},{"subwords":[10414,10443,10460,10536,10691,10694,10833,10860,10897,12812,12845,12846,12850,12899,18844,18863,18866,18981,19002,19017,19060,19062],"fullWord":12899},{"subwords":[8645,8688,8739,8770,8838,8892,10691,10698,10702,10833,10860,10897,10898,12804,12809,12812,12850,12895,12900,18743,18863,19002,19060,19062],"fullWord":12900},{"subwords":[7826,7895,10793,10809,10813,10833,12858,12901],"fullWord":12901},{"subwords":[7826,7841,10793,10809,10826,10833,10845,12509,12521,12902],"fullWord":12902},{"subwords":[8786,8787,8831,8835,8845,8856,8886,11921,11941,11947,11961,12079,12806,12808,12809,12810,12872,12895,12898,12903,12904,12905,12936,14118,14120,14172,16664,16686,16693,17406,17407],"fullWord":12904},{"subwords":[9384,12906,12909,12979,15610,21260,21304,21312],"fullWord":12909},{"subwords":[10833,12812,12824,12850,12910,12912,21304],"fullWord":12910},{"subwords":[7604,7826,7841,9360,12509,12911,21269,21276,21281,21304],"fullWord":12911},{"subwords":[732,5627,5956,12915,12916,13439,14589,14595,14635,14694],"fullWord":12915},{"subwords":[4673,4774,5114,5172,5176,5177,5200,5665,5865,5953,5967,12339,12340,12493,12499,12547,12752,12876,12916,12918,12919,13478,13489,13490,13499,13539,13544,13564,14020,14102,14105],"fullWord":12919},{"subwords":[5953,5984,5998,12339,12547,12548,12876,12916,12918,12920,12979,13489,13499,13506,13539,13564,13577,13583,14105,14147,14154,14262,14269,14350,14372,14373,15238,15247,15248,15610,15663],"fullWord":12920},{"subwords":[5953,10443,10444,10495,10822,10864,10865,11065,12504,12547,12845,12876,12882,12916,12918,12921,13539,13564,13567,13981,14009,14056,14061,14088,14105,14115,14573,21115,21120,21127,21183],"fullWord":12921},{"subwords":[228,732,735,737,739,775,779,817,825,891,905,906,961,966,5588,5599,5956,5976,5977,6004,6033,12680,12683,12916,12923,12924,12925,12936,12979,12982,13007,13286,13294,13299,13321,13322,13336,13338,13343,13439,13455,13459,13461,13577,13607,14147,14149,14166,14168,14246,14262,14281,14350,14351,14383,14384,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15610,15611,15663,15668,15673,15676,16014,16016,16270,16286,16419,17298,17300,17303,17406,17419,17476,17494,17495,17523,17638],"fullWord":12924},{"subwords":[732,781,1009,1028,5620,5956,6055,9367,12686,12916,12926,12937,13364,13367,13379,13439,13464,13613,13705,13717,13850,13851,14027,14032,14188,18347,18432,18436,18437,18541,18844,18926,18981,19075,19076],"fullWord":12926},{"subwords":[4714,4774,4935,4985,4988,5014,5114,5172,5176,5200,5865,5953,9110,9360,12453,12493,12499,12547,12752,12758,12876,12916,12918,12927,12928,13478,13539,13544,13564,13705,13710,13765,13769,13771,13809,14020,14032,14102,14105,14110],"fullWord":12928},{"subwords":[5953,5996,9360,9384,9400,12453,12513,12514,12547,12548,12876,12916,12918,12927,12929,12979,13539,13564,13577,13705,13712,13765,13769,13809,14032,14105,14147,14154,14262,14350,14372,14373,15175,15238,15248,15262,15508,15509,15511,15610,15663],"fullWord":12929},{"subwords":[5918,5953,5955,6033,9307,9360,9366,9374,12453,12459,12506,12516,12547,12560,12561,12876,12879,12916,12918,12922,12925,12927,12930,12936,13520,13539,13549,13558,13564,13566,13607,13705,13716,13765,13769,13772,13798,13809,13811,14032,14039,14105,14106,14111,14112,14166,14421,16858,16860,16883,17248,17249,17383,17406,17580,17582],"fullWord":12930},{"subwords":[9178,9196,9369,9374,9422,11772,11854,11947,11961,12872,12931,12932,12936,12945,13048,13812,13871,14032,14421,14551,16853,16883,17406,17447,18083,18103,18112,18114,18135,19624,19628,19825],"fullWord":12932},{"subwords":[6033,12905,12916,12925,12933,12934,12936,13569,13573,13607,14124,14126,14130,14131,14133,14144,14166,17406],"fullWord":12934},{"subwords":[7759,8151,12509,12933,12935,14107,14130,14135,14449,14484,14506,19813],"fullWord":12935},{"subwords":[3429,3864,3883,3958,3965,3971,4046,4048,4237,4238,4241,9374,9447,12936,12937,12939,12940,12944,13038,13438,13700,13701,13702,13850,13866,14032,14177,14182,14188,14201,14421,14427,16178,16194,16205,16769,16883,16907,17316,17406,17435,17550,17598,17644,17897,17921,18823,18830,18926,18936,18947,19075,19083,19084,19090,19386],"fullWord":12940},{"subwords":[341,574,781,1020,1028,9178,9367,11265,11270,11361,11814,11854,11947,12010,12686,12869,12937,12941,13364,13379,13758,13850,13851,14032,14188,18347,18389,18402,18432,18436,18882,18926,19026,19075],"fullWord":12941},{"subwords":[7604,7612,7637,7874,9267,9325,9335,9360,12453,12463,12509,12574,12937,12942,13721,13765,13773,13799,13802,13809,13850,13864,14032,14035,14107,14188,18894,18901,18926,18993,19036,19043,19075,19085],"fullWord":12942},{"subwords":[9325,9335,9360,12453,12463,12574,12887,12937,12943,13765,13799,13802,13809,13850,13864,14032,14035,14188,14197,18894,18926,19036,19060,19075],"fullWord":12943},{"subwords":[6033,6039,12916,12925,12936,12945,12946,13607,13608,14166,14170,14179,14551,14558,17406,17414,17434,17447,17449,17457,17647,17677,18066,18073,18135,18136,18140,18147,19825,19876,19882],"fullWord":12946},{"subwords":[93,121,399,472,796,809,817,2813,2840,2941,2954,2971,2972,2983,3493,3597,3599,3701,3702,3708,3890,3898,5588,5592,5650,5976,10072,10073,10075,10324,10355,10443,10760,10882,12680,12845,12947,12948,12965,12966,12979,14717,14968,15021,15592,15610,15621],"fullWord":12947},{"subwords":[442,459,464,10304,10887,10956,12680,12856,12948,12949,14806,14939,15623,15745,15864],"fullWord":12949},{"subwords":[215,269,299,302,622,817,837,5588,5595,5718,5894,5953,5976,5988,5989,7375,7461,7493,7507,7788,7815,7816,7855,8038,12229,12230,12319,12347,12509,12548,12680,12798,12873,12876,12951,12952,12979,12983,14758,14762,14821,14832,14833,15141,15238,15568,15610],"fullWord":12952},{"subwords":[299,304,837,838,905,909,7375,7391,7396,7743,7939,8038,8039,12230,12233,12509,12512,12548,12560,12680,12683,12951,12953,12983,12985,13007,14758,14773,14821,14832,15568,15569,15673,15910,15921,15986,16001,16031,17211,17303,17383,17384,17389],"fullWord":12953},{"subwords":[299,305,633,716,837,7375,7395,7447,7870,7895,7961,8038,8199,12230,12282,12311,12509,12548,12680,12951,12954,12983,12991,14758,14821,14832,14837,14939,14942,15568,15864,21058,21075,21162,21183],"fullWord":12954},{"subwords":[183,191,817,911,1009,4516,4537,4551,4553,4607,4810,4812,5114,5115,5234,5237,5239,5327,5588,5620,5976,5982,6055,12680,12681,12686,12688,12752,12955,12956,12979,12980,13008,14736,14898,14901,14902,14961,15060,15078,15312,15318,15561,15600,15603,15610,15691,15694,15748,18339,18432,18449,18450,18451,18453,18454,18463,18541,18554,18970,18981,18983,19093,19094,19101,19205,19233,19310,19311],"fullWord":12956},{"subwords":[817,825,891,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6004,6018,6055,12680,12683,12686,12688,12689,12692,12955,12957,12979,12982,13007,13008,13011,14881,14898,14901,14905,14912,15306,15312,15574,15610,15611,15673,15676,15691,15694,15695,15700,15748,16041,16043,16270,16286,16293,16419,16457,17303,17419,17429,17435,17773,17775,17885,17924,18432,18435,18449,18453,18455,18463,18464,18472,18541,18554,18557,18559,18981,18985,19093,19094,19097,19101,19103,19113,19381],"fullWord":12957},{"subwords":[911,12680,12686,12958,13008,14898,15570,15659,15691,15697,15698,18432,18449,18463,19060,19093,19094,19106],"fullWord":12958},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2210,2211,2424,2429,2434,2439,2446,7604,7771,8015,8045,9360,9400,12406,12481,12509,12513,12548,12700,12959,12961,12995,15402,15461,15494,15576,15583,15584],"fullWord":12961},{"subwords":[1851,1858,1880,1881,1889,2219,2220,2237,2439,2441,2444,2446,2476,9409,9447,12700,12701,12702,12704,12959,12962,12963,12964,13007,13008,13011,15402,15410,15504,15507,15576,15590,15691,15700,16765,16889,16907,17308,17429,17435,17722,17881,18540,18945,18946,18947,19093,19113,19114,19292,19294,19313],"fullWord":12963},{"subwords":[3272,3282,3340,3359,3638,3693,3893,5096,5210,8612,8617,8714,8721,8739,8857,9086,12757,12965,12968,12969,15386,15416,15428,15592,15600],"fullWord":12969},{"subwords":[3272,3340,3341,3693,3694,3944,8612,8678,8714,8739,8857,8874,8934,9086,9087,9409,12810,12965,12968,12970,12971,13007,15386,15416,15592,15599,15681,16178,16769,16889,17316,17722],"fullWord":12970},{"subwords":[183,195,326,349,605,854,4492,4532,4985,4986,5172,5173,5314,9305,9360,9376,9378,9400,12227,12274,12493,12513,12548,12680,12758,12972,14736,14743,14749,14776,14784,14821,14826,14838,15428,15491,15561,15568,15600],"fullWord":12972},{"subwords":[183,191,396,399,472,817,4466,4516,4601,4607,4728,4810,5114,5115,5146,5588,5592,5756,5976,10090,10093,10097,10202,10324,10327,10355,10378,10443,10730,10732,10780,10878,10882,12680,12681,12752,12837,12839,12845,12948,12973,12979,12980,14736,14961,14968,15060,15078,15199,15561,15600,15603,15610,15621],"fullWord":12973},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,6008,6016,12752,12755,12974,12975,12979,12982,13007,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,17323,17419,17423],"fullWord":12975},{"subwords":[4810,5114,5115,5260,5261,5471,5523,6008,12752,12974,12978,12979,13051,15060,15078,15600,15603,15610,15706,15773,15775,15777,15778,15780],"fullWord":12978},{"subwords":[5718,5894,5953,5988,5989,7493,7788,7815,7816,7826,7841,7855,12347,12509,12548,12798,12876,12979,12981,15141,15238,15610],"fullWord":12981},{"subwords":[263,299,306,596,632,837,7375,7927,8038,12230,12509,12548,12680,12951,12983,12984,14758,14759,14821,14832,15568],"fullWord":12984},{"subwords":[299,304,837,838,905,909,7375,7391,7396,7743,7939,8038,8039,12230,12233,12509,12512,12548,12560,12680,12683,12951,12953,12983,12985,13007,14758,14773,14821,14832,15568,15569,15673,15910,15921,15986,16001,16031,17211,17303,17383,17384,17389],"fullWord":12985},{"subwords":[299,869,883,905,7317,7342,7375,7391,7396,7921,7926,7939,11127,11140,11265,11276,11314,11330,11813,12081,12680,12683,12872,12986,13007,14758,14773,14808,14820,15564,15567,15627,15638,15673,15910,15921,15973,17188,17303,17378],"fullWord":12986},{"subwords":[269,299,817,840,911,1009,5588,5620,5718,5976,5982,5988,5989,5990,6055,7375,7416,7417,7422,7461,7540,7768,7788,7855,7874,7946,7972,7990,8040,8056,12680,12686,12688,12798,12955,12979,12987,13008,14758,14762,14898,14901,15141,15312,15610,15691,15694,15748,18342,18432,18449,18453,18463,18541,18554,18981,18993,18994,18995,19093,19094,19101],"fullWord":12987},{"subwords":[299,314,349,796,809,2803,2941,2965,3402,3403,3408,3665,3693,3903,4062,7375,9376,12680,12965,12966,12988,12989,12995,14758,15461,15592],"fullWord":12988},{"subwords":[5716,5718,5721,5988,5989,5992,6004,7627,7788,7789,7790,7855,7857,7867,9384,9389,9409,12798,12799,12979,12982,12990,12995,13007,13022,15141,15461,15472,15526,15610,15611,15676,16889,16890,17419,17722],"fullWord":12990},{"subwords":[6004,9384,9389,9409,9416,10414,10415,10443,10447,10536,10549,10550,10551,10677,10882,10883,10884,10885,10888,10889,12812,12816,12817,12822,12845,12848,12979,12982,12992,12993,13007,13022,15246,15444,15445,15473,15475,15526,15610,15611,15617,15619,15621,15622,15676,16837,16889,16890,17072,17097,17350,17354,17359,17364,17419,17420,17722],"fullWord":12993},{"subwords":[5953,5996,9245,9325,9331,9335,9338,9340,9360,9384,9400,12374,12463,12464,12466,12469,12513,12514,12548,12574,12581,12583,12590,12876,12979,12994,13008,15175,15238,15241,15312,15504,15542,15610,15691,15694,15748,18607,18621,18649,18844,18847,18894,18898,18941,18945,18981,19036,19038,19040,19051,19093,19101,19105,19289,19292],"fullWord":12994},{"subwords":[7604,8015,8045,9360,9391,9400,12509,12513,12548,12995,12996,15461,15494],"fullWord":12996},{"subwords":[9384,10414,10443,10536,10549,10677,10833,10882,12812,12816,12845,12846,12850,12979,12992,12997,15246,15444,15473,15610,15617,15621],"fullWord":12997},{"subwords":[9307,9360,9366,9400,9405,9409,12513,12548,12560,12998,12999,13007,15684,16858,16889,17383,17397,17722],"fullWord":12999},{"subwords":[10833,10842,10922,11921,11936,13000,13051,15627,15652,15806],"fullWord":13000},{"subwords":[215,693,694,709,817,911,1009,1024,1026,5588,5595,5620,5953,5976,5982,6055,6074,12229,12293,12319,12325,12374,12548,12574,12575,12581,12583,12590,12680,12686,12687,12688,12876,12955,12979,13001,13008,14821,14847,14898,14901,15238,15241,15312,15568,15610,15691,15694,15748,18408,18432,18449,18453,18460,18463,18541,18554,18607,18621,18649,18981,19036,19038,19040,19093,19094,19101,19105],"fullWord":13001},{"subwords":[5953,6008,12548,12876,12878,12979,13002,13145,15238,15610,15866,21120,21183,21189],"fullWord":13002},{"subwords":[777,8321,8351,8696,8789,8845,8857,8858,8867,12257,12480,12548,12680,13003,13239,13286,14154,14350,14372,14775,14821,14851,15386,15568],"fullWord":13003},{"subwords":[3272,3319,3324,3340,3354,3693,3864,3923,4046,4188,8612,8664,8714,8739,8845,8851,8857,9086,12965,12968,13004,13651,14032,14146,14350,14356,15386,15416,15508,15592],"fullWord":13004},{"subwords":[6008,6014,12979,13005,13145,15610,15866,21189],"fullWord":13005},{"subwords":[5780,10443,10882,10942,10945,12845,12979,13012,13110,13114,15610,15621,15623,15734,15739,20571,20875,20933],"fullWord":13012},{"subwords":[6004,12979,12982,13007,13013,13014,13131,13143,13145,13146,13147,15373,15610,15611,15676,15690,15866,15867,16483,16499,17419,17471,17472,21130,21189,21190,21212],"fullWord":13014},{"subwords":[269,280,299,973,5718,5721,6039,7396,7398,7536,7790,12684,13015,13016,13029,15910,15912,15915,15921,15922,15923,16270,16291,16347,17434],"fullWord":13016},{"subwords":[125,796,809,810,905,973,988,2941,3001,4084,4191,12680,12683,12965,12966,12967,12971,13007,13018,13019,15592,15599,15673,15880,15892,16142,16155,17303,17306,17316,17434],"fullWord":13019},{"subwords":[111,487,2813,3071,3074,3478,3597,3600,3701,3702,3703,10072,10181,10760,10778,13020,15880,15942,17316,17354,17442,19871],"fullWord":13020},{"subwords":[3555,3584,3586,3701,3708,3709,3710,4268,4271,5650,5656,6023,10443,10447,10470,10760,10778,10888,10925,10965,12845,12848,13021,13053,16298,16402,17097,17128,17316,17354,17359,17442,18066,19876],"fullWord":13021},{"subwords":[6004,6039,9384,9389,9409,12979,12982,13007,13022,13023,15526,15530,15610,15611,15676,15679,16889,16890,16895,16899,16903,17419,17424,17434,17722],"fullWord":13023},{"subwords":[9369,9422,11772,11854,11885,11890,12127,12134,12872,13026,13048,18083,18103,18112],"fullWord":13026},{"subwords":[5845,6039,11569,11921,11941,11942,11996,12002,12082,12872,13027,17382,17434],"fullWord":13027},{"subwords":[6004,6033,6038,12916,12925,12936,12979,12982,13007,13028,13145,13146,13147,13577,13607,14026,14147,14149,14166,14168,14187,14262,14281,14290,14293,14350,14383,14384,14389,14403,14410,14576,14577,15248,15272,15305,15610,15611,15663,15668,15672,15676,15690,15866,15867,16407,17406,17419,17472,17638,17672,17697,21127,21130,21189,21190,21212],"fullWord":13028},{"subwords":[399,407,472,473,487,488,495,496,1009,5616,5620,5626,6055,10181,10241,10247,10324,10360,10366,10443,10447,10459,10460,10465,10888,10896,10897,10901,12686,12692,12845,12848,13030,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,17022,17023,17097,17113,17354,17359,17435,17750,17811,17885,17903,18341,18370,18374,18432,18435,18541,18547,18548,18559,18660,18981,18985,19017],"fullWord":13030},{"subwords":[9369,9422,9447,11772,11780,11854,11862,12007,12010,12030,12177,12869,12870,12872,13032,13048,13055,13059,13082,16907,16917,17179,17203,17435,18083,18085,18103,18112,18882,18947,19026,19034],"fullWord":13032},{"subwords":[6004,6018,10443,10447,10459,10460,10465,10882,10883,10888,10889,10896,10897,10901,12845,12848,12979,12982,13007,13008,13011,13033,15306,15312,15610,15611,15621,15622,15676,15691,15694,15695,15700,15748,16457,17097,17113,17354,17359,17419,17420,17429,17435,17903,17924,18981,18985,19017,19093,19101,19103,19113],"fullWord":13033},{"subwords":[11921,11941,11943,11946,12007,12010,12030,12872,13034,17399,17405,17435,17472,18018,19026,19034,19060,19186,19193,19195],"fullWord":13034},{"subwords":[5718,5721,7790,7826,7847,7848,13035,13110,13112,16475,17464,20875,20877,20903,20925],"fullWord":13035},{"subwords":[6004,6018,6071,8552,8575,8581,8584,8586,8725,8728,8729,8730,8857,8874,8875,8879,8881,8887,8892,8901,8934,8935,12810,12979,12982,13007,13008,13009,13011,13036,13037,15306,15312,15386,15610,15611,15676,15691,15694,15695,15700,15748,16457,16574,16676,16678,16697,16701,16704,16705,17419,17429,17435,17924,18697,18743,18749,18758,18777,18781,18782,18981,18985,19093,19101,19103,19113,19123],"fullWord":13037},{"subwords":[9447,13039,16457,16907,16911,17399,17435,18844,18850,18947,18981,18985,19060],"fullWord":13039},{"subwords":[12686,13040,18432,18495,18521,19131,19166,19509,19548,20469],"fullWord":13040},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13041,13042,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17846,17924,18662,18981,18985,19093,19101,19103,19113,19117,19118,19119,19120,19130,19131,19134,19138,19139,19140,19144,19255,19331,19334],"fullWord":13042},{"subwords":[3367,3370,3944,4268,4271,5641,5656,6023,8714,8720,8725,8730,8881,8911,8945,8947,12810,13044,13045,16298,16574,16676,17316,18050,18066,19592,19876],"fullWord":13045},{"subwords":[7556,7871,7874,7875,7877,7886,7887,8166,8171,8173,8175,8176,8731,8737,8887,8892,8901,8935,8951,8958,9026,9027,12810,13046,13047,13055,13059,13082,16704,16709,16753,17435,17439,17441,17460,18743,18759,18762,18796,18797,18802,18993,19001,19123,19151,19152,19418,19421,19486,19583,19584,19592],"fullWord":13047},{"subwords":[3777,3786,3788,3814,3821,4268,4271,5653,5656,5856,5918,5953,5955,6023,12506,12560,12561,12597,12874,12875,12876,12879,12888,13049,13050,16188,16298,17316,17383,18066,18117,19655,19659,19673,19876],"fullWord":13050},{"subwords":[6039,10443,10447,10453,10470,10787,10888,10891,10893,10925,10927,12845,12848,13053,13054,16402,17097,17098,17128,17130,17354,17359,17363,17434,17442,17444,17457,18066,18073,19876,19882],"fullWord":13054},{"subwords":[4826,4849,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,5263,5471,5478,5479,5480,5523,5524,5548,12752,12755,13055,13056,13059,13065,13082,16457,17323,17435,17999,18066,18067,18074,18575,18981,18983,18985,19876,19877],"fullWord":13056},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13051,13052,13055,13057,13059,13066,13067,13080,13082,15306,15312,15610,15611,15676,15691,15694,15695,15700,15706,15708,15716,15720,15722,15723,15726,15727,15748,15777,15782,15840,15852,15858,15861,16457,17419,17429,17435,17451,17924,18066,18071,18074,18150,18981,18985,19093,19101,19103,19113,19121,19155,19158,19356,19359,19876,19880,19895],"fullWord":13057},{"subwords":[269,299,315,1009,1093,5620,5627,5718,6055,7416,7417,7540,7768,7874,7886,8175,12686,13059,13060,18342,18432,18508,18541,18981,18993,18994,18995,19418],"fullWord":13060},{"subwords":[1777,1851,1881,2058,2237,2268,2517,2697,5234,5252,5445,5449,5523,9369,9449,12700,12702,13048,13059,13061,19390],"fullWord":13061},{"subwords":[2160,2185,2237,2268,2292,2697,13059,13062,19060,19390,19500],"fullWord":13062},{"subwords":[3965,3992,4029,4232,4312,4357,4375,12965,13008,13051,13059,13063,15592,15691,15722,15858,19093,19098,19122,19155,19186,19347,19377,19573,21193,21196,21226],"fullWord":13063},{"subwords":[4928,4931,5234,5466,5523,9369,9449,12745,13048,13059,13064],"fullWord":13064},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13051,13052,13055,13057,13059,13066,13067,13080,13082,15306,15312,15610,15611,15676,15691,15694,15695,15700,15706,15708,15716,15720,15722,15723,15726,15727,15748,15777,15782,15840,15852,15858,15861,16457,17419,17429,17435,17451,17924,18066,18071,18074,18150,18981,18985,19093,19101,19103,19113,19121,19155,19158,19356,19359,19876,19880,19895],"fullWord":13067},{"subwords":[6651,9369,12785,13048,13059,13068,18950,18991,19131,19160,19415,19493,19580],"fullWord":13068},{"subwords":[6933,7017,12785,13059,13069,18991,19060,19500,19580],"fullWord":13069},{"subwords":[299,1093,1095,7396,7416,7423,7768,7770,7874,7886,7887,8171,8173,8175,8176,12686,12692,13055,13059,13070,13082,15910,15921,16041,17435,17732,17885,18342,18345,18432,18435,18508,18993,18994,18997,19001,19418,19421,19871],"fullWord":13070},{"subwords":[7759,7874,7886,8151,8175,12509,12574,12659,13059,13071,18993,19036,19043,19418,19434,19685,19780],"fullWord":13071},{"subwords":[8688,8739,8892,9026,9369,13048,13059,13072,18743,18759,18950,19131,19160,19493],"fullWord":13072},{"subwords":[7604,7637,7759,7874,7886,8151,8175,9267,9325,9335,9360,9369,12463,12509,12574,12659,13048,13059,13073,18894,18901,18993,19036,19043,19418,19434,19685,19701,19780],"fullWord":13073},{"subwords":[488,495,1093,1155,1164,10292,10897,10929,10942,12686,13059,13074,13114,18432,18508,18521,19166,19548,19605,20389,20471],"fullWord":13074},{"subwords":[488,495,1093,10304,10312,10897,10929,12686,13059,13075,18432,18508,19186,19605,21193],"fullWord":13075},{"subwords":[10443,10460,10470,10897,10929,11050,12845,13059,13076,18981,19017,19131,19134,19160,19493,19605],"fullWord":13076},{"subwords":[9369,10414,10443,10460,10470,10536,10552,10553,10691,10694,10897,10911,10929,11050,12812,12845,13048,13059,13077,18844,18863,18866,18981,19002,19017,19605,19897],"fullWord":13077},{"subwords":[12937,13059,13078,14188,14224,14561,14565,14569,19075,19131,19160,19453,19493,19499],"fullWord":13078},{"subwords":[693,911,1074,1093,12293,12300,12548,12574,12575,12659,12680,12686,13008,13051,13059,13079,14821,14847,14898,15568,15691,15722,15821,15833,15858,18408,18432,18449,18460,18463,18508,19036,19093,19094,19105,19155,19434,19435,19476,19780,19866],"fullWord":13079},{"subwords":[12548,12574,12659,13008,13051,13059,13081,15691,15722,15821,15831,15833,15858,19036,19093,19105,19155,19434,19476,19780,19866],"fullWord":13081},{"subwords":[13055,13059,13082,13083,16457,16463,17435,17846,17936,18066,18074,18662,18981,18985,19130,19131,19134,19140,19144,19160,19163,19493,19498,19876],"fullWord":13083},{"subwords":[9369,13048,13059,13084,18950,19131,19160,19166,19493,19545,19548,20842],"fullWord":13084},{"subwords":[10443,10447,10470,10888,10925,12845,12848,13053,13085,13086,16402,17097,17128,17354,17359,17442,18066,18078,19876,21268],"fullWord":13086},{"subwords":[442,459,464,10304,10956,12856,13087,13088,13089,19923,20250],"fullWord":13089},{"subwords":[4810,5114,5115,5196,5267,5268,5408,12752,12762,12976,12979,13095,13096,15060,15078,15337,15600,15603,15605,15610,15642,15728,15729],"fullWord":13096},{"subwords":[4678,4810,5114,5115,5267,5268,5408,5984,6001,6092,6100,12752,12979,13095,13097,15060,15078,15093,15337,15600,15603,15610,15728,15729,19992,19996,20057],"fullWord":13097},{"subwords":[10443,10471,10488,10489,10495,10882,10887,10935,10938,11065,11074,12845,12979,13095,13098,13145,15201,15337,15610,15621,15728,15866,20085,20250,20251,21189],"fullWord":13098},{"subwords":[5918,5942,5943,5953,5955,9307,9360,9366,12387,12506,12516,12560,12561,12876,12879,13093,13094,13102,13103,16858,16860,17383,20008,20012,20129,20134,20152,20157,20161,20164,20165,20167,20197,20262],"fullWord":13103},{"subwords":[5037,5221,9127,13101,13104,13105,17323,20243,20246],"fullWord":13105},{"subwords":[10922,12680,12948,13051,13087,13088,13106,19610,19837,19923,19932,19934,20250],"fullWord":13106},{"subwords":[10443,10447,10470,10471,10488,10888,10925,10935,10940,12845,12848,13053,13107,13108,16402,17097,17128,17354,17359,17374,17442,18066,19876,20250,20251,20252],"fullWord":13108},{"subwords":[10443,10447,10459,10460,10465,10888,10896,10897,10901,10942,10948,10952,12845,12848,13110,13112,13114,13115,13116,13118,16457,16475,17059,17097,17113,17121,17354,17359,17435,17464,17850,17903,17941,18981,18985,19017,19166,19170,19171,19181,19548,19550,20575,20578,20591,20594,20596,20875,20877,20958],"fullWord":13116},{"subwords":[8678,8739,8920,8925,8929,8930,10942,10950,10952,12810,12812,12822,13114,13117,13118,16716,16837,17121,17350,17354,17364,17464,20689,20832],"fullWord":13117},{"subwords":[5909,5918,5953,5955,6000,6004,12390,12397,12506,12548,12556,12560,12561,12606,12610,12876,12879,12979,12982,13007,13110,13112,13119,13121,13122,13124,15238,15302,15303,15368,15610,15611,15676,15734,15744,16391,16445,16475,16481,17272,17284,17383,17419,17464,17466,17469,18272,18273,20579,20584,20875,20877,20897,20933,20944,20947,20948,20984,20986],"fullWord":13122},{"subwords":[7604,7892,9297,9360,12509,12528,12606,13113,13119,13123,20742,20774,20790,20804,20897],"fullWord":13123},{"subwords":[337,1175,2813,2821,2846,3402,3403,3597,3612,3685,3701,3702,10072,10301,10760,10767,10953,12812,13125],"fullWord":13125},{"subwords":[337,340,487,1175,1176,1180,10181,10301,10953,12812,12822,13126,15931,15942,16098,16837,16922,17350,17354,17364,17471],"fullWord":13126},{"subwords":[2160,2182,2271,2287,2292,13127,13128,17308,17464,17471,18262,20903,20925],"fullWord":13128},{"subwords":[126,132,796,809,911,2941,3003,3052,3605,3612,3965,12680,12686,12965,12966,13008,13129,14898,15592,15691,18333,18432,18449,18463,18528,19093,19094,19098],"fullWord":13129},{"subwords":[6144,6189,6198,13131,13132,13133,13143,13147,16319,16483,16499,17471,17472,21130],"fullWord":13133},{"subwords":[5196,6928,6940,6951,7017,7103,12762,12976,13134,15600,15642,15644],"fullWord":13134},{"subwords":[299,442,7293,7301,7361,7764,10109,10301,10793,10953,12856,13135],"fullWord":13135},{"subwords":[4714,4826,4935,4939,5037,5114,5117,5221,5223,5287,5288,5728,9110,9111,9127,12752,12755,13131,13136,13137,16483,16780,16922,17323,17471],"fullWord":13137},{"subwords":[9374,10665,10672,10681,10864,10874,10953,12812,12822,12936,13138,13139,13874,14032,14056,14072,14087,14234,14421,16837,16883,16922,17088,17104,17350,17354,17364,17406,17471,17617],"fullWord":13139},{"subwords":[337,434,488,495,1175,9367,9437,10126,10301,10691,10897,10953,12686,12812,13140,18347,18349,18432,18528,18533,18863,19002],"fullWord":13140},{"subwords":[6004,6018,6171,12979,12982,13007,13008,13011,13131,13141,13142,15306,15312,15373,15610,15611,15676,15691,15694,15695,15700,15748,16457,16483,16494,17419,17429,17435,17471,17924,18677,18981,18985,19093,19101,19103,19113],"fullWord":13142},{"subwords":[5718,5953,7493,7815,7895,12509,12876,12891,13130,13143,13144,21120,21183],"fullWord":13144},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13145,13146,13147,13149,15306,15312,15610,15611,15676,15690,15691,15694,15695,15700,15748,15866,15867,16457,17419,17429,17435,17472,17924,17927,17933,18018,18019,18981,18985,19093,19101,19103,19113,19122,19186,19187,19188,19195,19257,19258,19347,19348,19377,19570,19572,19573,19574,21130,21135,21189,21190,21212],"fullWord":13149},{"subwords":[5918,5953,5955,12506,12543,12560,12561,12876,12879,12906,12908,13150,13151,17270,17383,17397,21255,21297,21301,21304,21310,21311],"fullWord":13151},{"subwords":[3689,3777,3826,3852,9097,9207,9360,13152,21272,21281,21304],"fullWord":13152},{"subwords":[385,393,481,497,574,580,586,1324,2567,2572,10061,10136,10139,10158,10182,10957,10995,11173,11270,11387,13153,13204,13224,13391,13988,13989,14428,14476,19624],"fullWord":13153},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":13158},{"subwords":[2921,3100,3402,4046,6386,6530,9101,13154,13160,13424,13688,21064,21146],"fullWord":13160},{"subwords":[110,287,750,2869,2921,3402,4046,7283,7365,7604,7612,9207,9208,12230,12257,12453,13154,13161,13193,13239,13251,13255,13688,13721,13765,13773],"fullWord":13161},{"subwords":[93,94,732,733,2766,2807,2808,2921,2922,2923,4431,4639,4651,5956,13154,13155,13156,13162,13163,13171,13439,13446,13472,13478],"fullWord":13163},{"subwords":[93,121,732,735,796,817,867,2807,2921,2922,2924,2941,2954,2987,2989,4077,4078,4107,5588,5956,5976,13154,13155,13157,13162,13164,13286,13294,13306,13439,13446,13455,13472,13577,13590,14262,14717,14729,14798,14851,14852,14979,15021,15025,15248,15249],"fullWord":13164},{"subwords":[93,126,732,781,1009,2807,2921,2922,3052,5620,5956,6055,6057,9848,13154,13155,13162,13165,13168,13364,13367,13438,13439,13446,13464,13472,13613,18326,18358,18436,18437,18541,18545,19196],"fullWord":13165},{"subwords":[148,149,732,733,4438,4590,5659,5956,13171,13172,13439,13478],"fullWord":13172},{"subwords":[148,155,399,481,732,733,4438,4466,4590,4601,4728,5659,5756,5956,10090,10093,10094,10182,10324,10327,10350,10378,13171,13173,13204,13207,13208,13439,13450,13478,13479,13940,13941,13950],"fullWord":13173},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":13175},{"subwords":[596,732,739,753,755,779,925,931,961,964,5918,5956,6033,12229,12257,12259,12261,12269,12283,12317,12318,13178,13179,13239,13245,13249,13259,13336,13439,13453,13461,13539,13558,15986,15995,16014,16270,17220,17476,17490],"fullWord":13179},{"subwords":[399,442,481,732,5780,5956,10182,10184,10324,10343,10350,13180,13204,13207,13217,13439,13450,13940],"fullWord":13180},{"subwords":[215,217,228,732,739,779,961,964,5918,5953,5955,5956,6033,12229,12257,12259,12261,12269,12317,12318,12506,12547,12560,12561,12876,12879,12916,12918,12922,12925,12936,13181,13239,13245,13249,13259,13336,13338,13343,13439,13453,13461,13539,13558,13564,13566,13607,14105,14106,14112,14166,15986,15995,16014,16270,17220,17298,17383,17406,17476,17490],"fullWord":13181},{"subwords":[596,619,925,961,7365,7373,7396,7408,12230,12233,12257,12269,12283,13182,13183,13239,13251,13252,13254,13259,13336,15910,15911,15986,16001,16002,16014,17211,17220,17476,17490],"fullWord":13183},{"subwords":[269,279,280,732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,5988,5992,6033,7365,7366,7368,7369,7370,7373,7375,7391,7396,7408,7410,7461,7463,7935,7936,7939,7940,13184,13186,13187,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13516,13519,13577,14262,14281,14403,14758,14762,14764,14773,14851,14852,14856,14866,14881,14891,14979,14982,15141,15248,15272,15305,15910,15912,15914,16014,16026,16270,16286,16419,17476,17494,17495,17499,17523],"fullWord":13186},{"subwords":[287,288,750,7267,7283,7352,7365,7371,7578,7604,7612,12230,12257,12453,13188,13193,13239,13251,13721,13765,13773],"fullWord":13188},{"subwords":[183,299,4451,5123,7253,7365,7761,7782,13171,13189,14020],"fullWord":13189},{"subwords":[326,327,605,732,733,4492,4500,4605,4714,4774,4898,4935,4985,4988,5014,5865,5956,9103,12229,12257,12259,12317,12453,13171,13190,13193,13194,13195,13239,13245,13246,13439,13453,13478,13539,13544,13705,13710,13765,13769,13771],"fullWord":13195},{"subwords":[647,691,693,700,704,711,781,961,9203,9307,9318,9325,9447,12257,12269,12453,12459,12463,12471,13193,13196,13197,13198,13239,13259,13261,13265,13336,13352,13364,13385,13765,13798,13799,13800,13801,13804,13839,13850,13851,13852,13866,14421,14427,15936,15986,16014,16041,16047,16858,16883,16907,17220,17248,17255,17476,17486,17490,17510,17580,17598,17742,18347,18408,18428,18436,18448,18894,18919,18926,18936,18947,19386],"fullWord":13198},{"subwords":[693,700,716,781,9203,9325,12257,12311,12453,12463,13193,13197,13199,13239,13261,13266,13364,13424,13765,13799,13800,13807,13850,13851,13870,18347,18408,18436,18894,18925,18926,21064,21144,21146],"fullWord":13199},{"subwords":[326,327,329,349,351,732,733,735,817,854,4516,4599,4607,4714,4810,4899,4935,5014,5023,5323,5377,5588,5956,5976,9103,9376,9384,9385,13171,13174,13176,13190,13200,13201,13286,13292,13294,13295,13439,13455,13478,13577,13705,13710,13712,14262,14303,14306,14736,14776,14851,14852,14853,14857,14961,14979,15060,15076,15248,15250,15428,15433,15508,15509],"fullWord":13201},{"subwords":[596,647,691,745,925,945,946,961,9307,12257,12269,12283,12453,12459,13193,13196,13203,13239,13259,13336,13765,13798,13839,14421,15986,16014,16858,16883,17220,17248,17476,17486,17490,17580],"fullWord":13203},{"subwords":[93,399,481,728,732,2813,2921,2922,3465,4047,5956,10072,10073,10182,10324,10350,13154,13155,13204,13205,13207,13439,13450,13885,13940],"fullWord":13205},{"subwords":[383,399,481,488,732,781,1009,5620,5956,6055,10182,10247,10324,10350,10354,10460,13204,13206,13207,13364,13367,13439,13450,13464,13532,13613,13614,13922,13923,13940,13945,18370,18436,18437,18541,18547],"fullWord":13206},{"subwords":[399,442,450,464,481,732,1196,5780,5956,10182,10184,10304,10324,10343,10350,10495,11065,13204,13207,13209,13217,13223,13424,13439,13450,13932,13940,14009,21050,21064,21097,21110,21115,21127],"fullWord":13209},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13212},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13213},{"subwords":[337,349,399,481,732,735,776,817,857,5588,5592,5956,5976,9376,9384,10121,10182,10324,10350,10355,10414,10502,10536,10549,10665,10675,10677,13191,13200,13204,13207,13210,13214,13286,13294,13439,13450,13455,13456,13577,13585,13705,13712,13741,13743,13940,13959,14262,14780,14851,14852,14968,14979,15248,15399,15444,15473,15508,15509],"fullWord":13214},{"subwords":[287,337,416,426,481,750,7283,7293,7365,7585,7604,7612,10109,10120,10182,10187,10637,10665,12230,12238,12257,12438,12453,13191,13193,13204,13215,13239,13251,13721,13765,13773,13899,13904],"fullWord":13215},{"subwords":[325,337,340,481,486,744,751,932,961,8241,8244,8321,8324,8362,8367,8664,8671,8678,10182,10188,10194,10231,10665,10672,10681,13191,13192,13204,13216,13232,13336,13651,13652,13653,13839,13841,13917,14421,15931,15942,16014,16639,16883,17019,17088,17476],"fullWord":13216},{"subwords":[399,442,481,732,733,4466,4601,4728,4744,5756,5780,5956,10090,10093,10102,10182,10184,10324,10327,10343,10350,10378,13171,13204,13207,13208,13217,13218,13439,13450,13478,13479,13940,13941,13950],"fullWord":13218},{"subwords":[399,442,481,488,732,781,1009,5620,5780,5956,6055,10182,10184,10247,10324,10343,10350,10354,10460,13204,13207,13217,13219,13364,13367,13439,13450,13464,13532,13613,13614,13922,13923,13940,13945,18370,18381,18436,18437,18541,18547,18591],"fullWord":13219},{"subwords":[326,337,442,481,4891,4967,5014,9152,10090,10119,10182,10530,10665,13171,13190,13191,13204,13217,13220,13749,13897],"fullWord":13220},{"subwords":[442,481,10182,10864,12680,12856,12913,12948,13204,13217,13221,13286,14056,14058,14080,14350,14851,15623],"fullWord":13221},{"subwords":[399,481,574,576,732,733,4466,4472,4475,4484,4601,4728,5658,5756,5782,5956,10090,10093,10136,10145,10146,10158,10159,10182,10324,10327,10350,10378,10957,11107,11115,11173,11180,11270,11271,11437,11438,11442,11464,11492,13171,13204,13207,13208,13224,13225,13439,13450,13478,13479,13940,13941,13950],"fullWord":13225},{"subwords":[399,481,574,576,577,732,735,817,869,5588,5592,5782,5956,5976,10136,10145,10150,10158,10182,10324,10350,10355,10957,11173,11180,11270,11271,11276,11286,11303,11437,11442,11539,13204,13207,13210,13224,13226,13286,13294,13439,13450,13455,13456,13577,13593,13940,14240,14262,14808,14816,14851,14852,14968,14971,14975,14979,15202,15209,15248,15747],"fullWord":13226},{"subwords":[442,481,762,763,764,10182,10189,13204,13217,13229,13268,13269,13272],"fullWord":13229},{"subwords":[481,486,762,961,10182,10189,10193,10194,13204,13230,13231,13232,13268,13281,13336,13391,14003,14465,14469,14506,14507,14509,14510,14515,14551,15942,16014,17019,17476,18135,19825,19871],"fullWord":13231},{"subwords":[399,405,481,488,491,732,735,781,782,817,911,1009,5588,5592,5620,5956,5976,5982,6055,10182,10247,10254,10324,10350,10354,10355,10460,13204,13207,13210,13234,13286,13294,13328,13329,13364,13367,13372,13439,13450,13455,13456,13460,13464,13532,13577,13599,13613,13614,13922,13923,13926,13940,13945,14247,14248,14262,14851,14852,14867,14898,14901,14968,14979,15248,15312,15748,18370,18372,18436,18437,18439,18449,18453,18467,18541,18547,18554,19221],"fullWord":13234},{"subwords":[481,488,781,784,911,919,10182,10304,13204,13235,13286,13328,13332,13334,13364,13381,13424,13922,13930,13932,14009,14247,14258,14410,14851,14867,14869,14898,14939,15864,18436,18449,18467,19221,19231,19377,19558,21064],"fullWord":13235},{"subwords":[504,574,579,762,925,961,11270,11275,11330,13236,13237,13268,13269,13273,13281,13336,15973,16014,17476],"fullWord":13237},{"subwords":[574,732,735,762,817,869,5588,5956,5976,11270,11274,11276,11286,11437,11539,13238,13268,13276,13286,13294,13439,13455,13569,13577,13593,14240,14262,14264,14278,14808,14816,14851,14852,14975,14979,15202,15209,15248,15747],"fullWord":13238},{"subwords":[504,574,596,11213,11270,12244,12257,13239,13240],"fullWord":13240},{"subwords":[200,596,605,610,925,961,4492,4493,12257,12269,12283,13171,13177,13239,13241,13242,13259,13336,15893,15986,15988,16014,17220,17476,17490],"fullWord":13242},{"subwords":[605,608,732,733,735,817,4492,4500,4516,4532,4605,4607,4774,4810,5323,5588,5595,5865,5956,5976,12229,12257,12259,12274,12317,12319,12358,13171,13174,13239,13243,13245,13246,13286,13292,13294,13295,13439,13453,13455,13478,13539,13544,13577,14262,14736,14821,14826,14851,14852,14853,14961,14979,15060,15227,15248],"fullWord":13243},{"subwords":[169,326,605,693,700,781,4492,4985,5008,5014,5022,9203,9325,12257,12453,12463,13171,13190,13193,13197,13239,13244,13261,13364,13765,13799,13800,13850,13851,18339,18347,18408,18436,18894,18926],"fullWord":13244},{"subwords":[399,407,481,486,732,739,779,961,964,5745,5748,5918,5956,6033,10174,10175,10182,10194,10195,10324,10344,10348,10350,10353,10360,10433,12229,12257,12259,12261,12263,12269,12317,12318,12356,13204,13207,13211,13232,13239,13245,13247,13248,13249,13259,13336,13439,13450,13452,13453,13461,13539,13540,13558,13904,13906,13909,13913,13940,13943,13952,15942,15948,15986,15995,16014,16270,16274,16403,17019,17220,17476,17488,17490],"fullWord":13248},{"subwords":[481,1060,6293,6366,6702,6707,6821,7179,10182,11001,12257,13204,13239,13250,13391,13904,14484,19600],"fullWord":13250},{"subwords":[269,270,605,732,733,4492,4500,4502,4605,4774,5707,5865,5956,7253,7365,7366,7367,7493,12229,12230,12257,12259,12317,13171,13184,13185,13239,13245,13246,13251,13253,13439,13453,13478,13516,13539,13544],"fullWord":13253},{"subwords":[647,691,961,968,2800,2869,2906,2921,2938,3402,4046,4048,4237,9207,9208,9209,9307,12257,12269,12453,12459,13154,13167,13193,13196,13239,13255,13256,13259,13336,13688,13690,13702,13765,13798,13839,14421,15880,15986,16014,16134,16178,16769,16858,16883,17220,17248,17476,17486,17490,17550,17551,17580],"fullWord":13256},{"subwords":[349,732,735,817,5588,5595,5956,5976,5996,9376,9378,9384,12229,12257,12259,12317,12319,12453,13193,13194,13200,13239,13245,13257,13286,13294,13439,13453,13455,13539,13577,13705,13712,13765,13769,14262,14784,14821,14838,14851,14852,14860,14979,15175,15248,15262,15508,15509,15511],"fullWord":13257},{"subwords":[605,657,663,732,733,4492,4500,4605,4774,5865,5956,12229,12252,12257,12259,12317,13171,13239,13245,13246,13258,13439,13453,13478,13539,13544,13551],"fullWord":13258},{"subwords":[161,605,693,694,695,732,733,781,1009,4492,4500,4512,4551,4605,4774,4788,4805,5620,5865,5956,6055,6074,12229,12257,12259,12317,12325,12374,13171,13239,13245,13246,13261,13262,13364,13367,13368,13369,13439,13453,13464,13478,13481,13539,13544,13560,13561,13613,18339,18408,18436,18437,18438,18541,18607,18610],"fullWord":13262},{"subwords":[693,694,700,732,781,1009,5620,5956,6055,6074,9203,9244,9325,12229,12257,12259,12317,12325,12374,12453,12463,13193,13194,13197,13239,13245,13261,13263,13364,13367,13369,13439,13453,13464,13539,13560,13613,13705,13717,13765,13769,13799,13800,13850,13851,18347,18408,18436,18437,18541,18607,18844,18894,18898,18926],"fullWord":13263},{"subwords":[693,716,781,911,919,12257,12282,12311,13239,13261,13264,13266,13286,13328,13334,13364,13424,14247,14258,14410,14821,14847,14851,14867,14898,14939,15864,18408,18436,18449,18460,18467,19221,19231,19377,21064,21075],"fullWord":13264},{"subwords":[732,735,817,5588,5595,5956,5976,12229,12257,12259,12317,12319,13239,13245,13267,13286,13294,13439,13453,13455,13539,13577,14262,14821,14851,14852,14945,14979,15248,21238,21255],"fullWord":13267},{"subwords":[762,2921,2936,3100,13154,13268,13269,13270,13424,21064],"fullWord":13270},{"subwords":[596,745,762,12257,12453,13193,13239,13268,13269,13271,13765,13813],"fullWord":13271},{"subwords":[762,925,961,13268,13269,13273,13274,13275,13281,13336,13408,13421,16014,16089,17476,18201,20449,20454],"fullWord":13275},{"subwords":[732,735,737,739,762,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6033,13268,13276,13277,13281,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13569,13573,13577,14262,14278,14280,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16018,16270,16286,16419,17476,17494,17495,17523],"fullWord":13277},{"subwords":[227,732,735,738,762,817,1196,5588,5956,5976,13268,13276,13278,13286,13294,13424,13428,13439,13455,13569,13577,14258,14262,14278,14279,14290,14410,14576,14851,14852,14939,14979,15248,15255,15864,15866,21064,21066,21071,21097,21099,21127],"fullWord":13278},{"subwords":[349,732,735,762,817,5588,5956,5976,9376,9384,13200,13268,13276,13279,13286,13294,13439,13455,13569,13577,13705,13712,13813,13815,13817,14262,14278,14851,14852,14979,15248,15508,15509],"fullWord":13279},{"subwords":[762,781,961,9447,13268,13280,13281,13336,13352,13364,13385,13813,13828,13839,13850,13851,13852,13866,14421,14427,16014,16041,16883,16907,17476,17510,17598,18347,18436,18448,18926,18936,18947,19386],"fullWord":13280},{"subwords":[596,762,12257,13239,13268,13269,13282,13283,14484,14506,14507],"fullWord":13283},{"subwords":[399,481,732,762,770,5627,5956,10182,10189,10324,10350,10470,13204,13207,13268,13284,13391,13439,13450,13569,13940,14454,14465,14506,14507,14508,14509],"fullWord":13284},{"subwords":[349,361,762,9376,13200,13268,13285,13286,13424,13813,13829,14258,14410,14851,14939,15508,15864,21064,21146],"fullWord":13285},{"subwords":[732,733,735,817,818,4516,4607,4810,5323,5588,5956,5976,13171,13174,13286,13287,13288,13292,13294,13295,13439,13455,13478,13577,14262,14736,14851,14852,14853,14961,14979,15060,15248],"fullWord":13288},{"subwords":[93,121,399,481,732,735,796,817,2813,2921,2922,2924,2941,2954,2971,2987,2989,2991,3465,3493,4047,4077,4078,5588,5592,5956,5976,10072,10073,10075,10182,10324,10350,10355,13154,13155,13157,13204,13207,13210,13286,13290,13294,13439,13450,13455,13456,13577,13885,13887,13940,14262,14717,14851,14852,14968,14979,15021,15025,15248],"fullWord":13290},{"subwords":[183,195,605,777,4492,4532,5172,5173,5215,5402,12257,12274,12493,12548,12680,13171,13239,13286,13292,13293,14020,14102,14154,14350,14357,14372,14736,14749,14821,14826,14851,15561,15568,15600],"fullWord":13293},{"subwords":[693,694,709,732,735,781,782,817,911,1009,5588,5595,5620,5911,5934,5956,5976,5982,6055,6074,12229,12257,12259,12317,12319,12325,12374,13239,13245,13261,13286,13294,13296,13328,13329,13364,13367,13369,13372,13439,13453,13455,13460,13464,13539,13560,13577,13599,13613,14247,14248,14262,14821,14847,14851,14852,14867,14898,14901,14979,15241,15248,15312,15748,18408,18436,18437,18439,18449,18453,18460,18467,18541,18554,18607,18649,19221,19251],"fullWord":13296},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6008,6016,6033,13286,13294,13297,13298,13299,13321,13322,13325,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14854,14855,14856,14866,14872,14881,14883,14891,14893,14979,14982,14983,14988,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17497,17523],"fullWord":13298},{"subwords":[732,735,817,1106,1109,5588,5629,5956,5976,5984,6092,6100,13286,13294,13300,13335,13401,13403,13439,13455,13489,13506,13577,13583,14262,14851,14852,14921,14979,14990,15248,15254,15337,19992,19993,19996],"fullWord":13300},{"subwords":[0,317,349,852,8245,8321,8351,8664,9376,13200,13286,13287,13301,13651,14775,14851,15508],"fullWord":13301},{"subwords":[287,349,750,7283,7365,7375,7604,7612,7918,8015,8022,9376,9378,12230,12257,12453,13193,13200,13239,13251,13286,13302,13721,13765,13773,14311,14758,14784,14821,14832,14838,14851,14861,15461,15494,15508],"fullWord":13302},{"subwords":[325,349,359,744,751,905,932,961,8245,8248,8321,8324,8351,8354,8362,8367,8664,8671,8678,8934,9376,9409,13200,13202,13286,13303,13304,13321,13336,13651,13839,13841,14403,14421,14775,14851,14866,14886,14891,15508,15524,16014,16028,16556,16639,16883,16889,17476,17494,17722],"fullWord":13304},{"subwords":[349,361,781,911,919,1032,9376,13200,13286,13305,13328,13331,13334,13364,13424,13850,13851,13870,14247,14258,14410,14851,14867,14898,14939,15508,15864,18347,18436,18443,18449,18467,18926,19221,19231,19295,19377,21064,21146],"fullWord":13305},{"subwords":[792,867,868,905,925,950,961,13286,13287,13289,13306,13307,13308,13311,13321,13336,14403,14851,14866,14891,16014,17476,17494,17500],"fullWord":13308},{"subwords":[732,733,735,817,867,4516,4522,4607,4810,5316,5323,5355,5588,5956,5976,13171,13174,13286,13292,13294,13295,13306,13309,13439,13446,13455,13478,13577,13590,14262,14736,14798,14799,14851,14852,14853,14961,14979,15060,15248],"fullWord":13309},{"subwords":[732,735,817,867,5588,5956,5976,6008,13286,13294,13297,13306,13310,13439,13446,13455,13577,13590,14262,14798,14800,14851,14852,14854,14872,14979,14983,15248],"fullWord":13310},{"subwords":[377,381,481,10182,10304,13204,13286,13287,13312,13424,13932,13933,14009,14258,14410,14851,14939,15864,21064],"fullWord":13312},{"subwords":[227,399,481,732,735,738,817,1196,5588,5592,5594,5956,5976,10182,10304,10306,10324,10350,10355,10359,10495,11065,11074,13204,13207,13210,13286,13294,13313,13424,13428,13439,13450,13455,13456,13458,13577,13932,13936,13940,14009,14010,14258,14262,14290,14410,14576,14851,14852,14939,14968,14979,15183,15201,15248,15255,15266,15267,15864,15866,21050,21064,21071,21097,21099,21115,21127],"fullWord":13313},{"subwords":[481,10182,10864,12680,12913,12948,13204,13286,13314,14056,14058,14350,14851,15570],"fullWord":13314},{"subwords":[183,4578,5208,5215,5220,5337,5402,5430,12680,13171,13286,13292,13315,13424,14020,14258,14350,14357,14410,14736,14851,14939,15561,15600,15672,15864,21064,21068,21154],"fullWord":13315},{"subwords":[399,472,481,732,735,817,5588,5592,5956,5976,10182,10324,10350,10355,10443,10864,10865,10867,10882,12680,12845,12913,12916,12923,12948,12979,13204,13207,13210,13286,13294,13316,13439,13450,13455,13456,13577,13940,14056,14058,14061,14064,14147,14262,14350,14365,14851,14852,14968,14979,15248,15610,15621,15663],"fullWord":13316},{"subwords":[481,486,487,905,961,10181,10182,10194,10864,10874,12680,12683,12913,12914,12936,12948,12950,13007,13204,13232,13286,13317,13321,13336,13343,14056,14058,14059,14087,14246,14350,14351,14383,14403,14851,14866,14891,15673,15942,16014,16016,17019,17104,17298,17303,17354,17356,17406,17476,17494],"fullWord":13317},{"subwords":[732,733,735,817,4516,4518,4607,4810,5323,5325,5346,5588,5956,5976,6008,13171,13174,13286,13292,13294,13295,13297,13318,13439,13455,13478,13577,14262,14736,14851,14852,14853,14854,14872,14961,14979,14983,15060,15248],"fullWord":13318},{"subwords":[761,781,911,1028,12680,12686,12937,13008,13286,13319,13328,13364,14160,14188,14247,14350,14851,14867,14870,14898,15570,15691,18432,18436,18449,18463,18467,19075,19093,19094,19221,19323],"fullWord":13319},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":13323},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":13324},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6008,6016,6033,13286,13294,13297,13298,13299,13321,13322,13325,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14854,14855,14856,14866,14872,14881,14883,14891,14893,14979,14982,14983,14988,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17497,17523],"fullWord":13325},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":13326},{"subwords":[777,778,905,909,961,12257,12269,12548,12560,12680,12683,12936,13007,13239,13259,13286,13321,13327,13336,13343,14112,14154,14157,14246,14350,14351,14372,14383,14403,14821,14851,14866,14891,15568,15569,15673,15986,16014,16016,17220,17298,17303,17383,17384,17406,17476,17490,17494],"fullWord":13327},{"subwords":[161,732,733,735,781,782,817,911,1009,4516,4537,4551,4553,4607,4797,4805,4810,4812,5323,5327,5588,5620,5956,5976,5982,6055,13171,13174,13286,13292,13294,13295,13328,13329,13330,13364,13367,13368,13372,13439,13455,13460,13464,13478,13577,13599,13613,13616,14247,14248,14249,14262,14736,14851,14852,14853,14867,14898,14901,14902,14961,14979,15060,15248,15312,15318,15748,18339,18436,18437,18438,18439,18449,18450,18453,18454,18467,18541,18554,19205,19221,19233],"fullWord":13330},{"subwords":[481,488,781,784,911,919,10182,10304,13204,13235,13286,13328,13332,13334,13364,13381,13424,13922,13930,13932,14009,14247,14258,14410,14851,14867,14869,14898,14939,15864,18436,18449,18467,19221,19231,19377,19558,21064],"fullWord":13332},{"subwords":[382,481,486,925,961,962,2813,2921,2938,3017,3465,3466,3473,4047,4048,4237,10072,10182,10194,13154,13167,13204,13232,13336,13337,15880,15942,16014,16126,17019,17476],"fullWord":13337},{"subwords":[228,732,739,779,780,961,972,973,5956,6033,6039,12684,12916,12925,12936,13029,13336,13338,13339,13343,13344,13345,13439,13461,13607,13608,14166,14170,14179,16014,16020,16270,16291,17298,17301,17406,17414,17434,17476,17507],"fullWord":13339},{"subwords":[0,2,317,325,925,932,961,972,973,8321,8324,8362,8367,8369,13336,13340,13341,13344,16014,16020,16033,17476,17507],"fullWord":13341},{"subwords":[325,732,739,779,780,932,936,961,972,973,5956,6033,6039,8321,8324,8362,8367,8369,8450,8452,8549,13336,13342,13344,13345,13439,13461,13643,13646,16014,16020,16033,16270,16291,16543,16546,16574,16609,17476,17507],"fullWord":13342},{"subwords":[200,732,733,739,779,780,961,972,973,4826,5956,6033,6039,13171,13177,13336,13344,13345,13346,13439,13461,13478,13488,15893,16014,16020,16270,16291,17476,17481,17484,17507,17530],"fullWord":13346},{"subwords":[732,739,779,780,961,972,973,5605,5611,5956,6031,6033,6039,6042,13336,13344,13345,13347,13439,13461,13462,13463,13489,13510,16014,16020,16270,16291,16319,16336,16338,16342,17476,17507],"fullWord":13347},{"subwords":[399,407,481,486,732,739,779,780,961,972,973,5956,6033,6039,10182,10194,10195,10198,10230,10236,10324,10350,10353,10360,10453,13204,13207,13211,13232,13336,13344,13345,13348,13439,13450,13452,13461,13940,13943,15942,15948,15950,16014,16020,16270,16274,16277,16291,16403,16404,17019,17020,17476,17488,17507],"fullWord":13348},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":13349},{"subwords":[732,739,779,780,961,972,973,980,5956,6033,6039,13336,13344,13345,13350,13439,13461,16014,16020,16037,16270,16291,17476,17507],"fullWord":13350},{"subwords":[341,347,555,557,574,579,961,972,973,9178,9196,9422,9423,11270,11275,11330,11348,11774,12082,13336,13344,13351,13758,13759,13839,13844,14421,15973,16014,16020,16764,16853,16857,16883,16888,16903,17476,17507,17508],"fullWord":13351},{"subwords":[781,925,961,972,973,990,13336,13344,13352,13353,13354,13362,13364,13385,14422,14427,16014,16020,16041,17476,17507,17510,17514,18436,18448,18487,19386],"fullWord":13354},{"subwords":[161,162,200,732,733,739,779,781,961,1009,4551,4555,4805,4826,5616,5620,5626,5956,6033,6055,13171,13177,13336,13352,13355,13356,13364,13367,13368,13374,13385,13439,13461,13464,13465,13478,13488,13609,13613,13626,14427,15893,16014,16041,16043,16044,16270,16293,16409,16410,16457,17476,17481,17510,17511,17530,17806,17836,18339,18340,18436,18437,18438,18441,18448,18541,18559,18575,19386],"fullWord":13356},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13357},{"subwords":[732,735,737,739,775,779,781,782,817,825,905,906,911,918,961,966,993,1009,5588,5599,5616,5620,5626,5956,5976,5977,5982,6018,6033,6055,13286,13294,13299,13321,13322,13328,13329,13333,13336,13352,13355,13358,13364,13367,13372,13373,13374,13385,13439,13455,13459,13460,13461,13464,13465,13577,13599,13609,13613,13626,14247,14248,14251,14252,14262,14281,14284,14403,14427,14851,14852,14856,14866,14867,14881,14891,14898,14901,14905,14912,14979,14982,15248,15253,15272,15305,15306,15312,15748,16014,16041,16043,16270,16286,16293,16409,16410,16419,16457,17476,17494,17495,17510,17511,17523,17652,17773,17775,17836,17948,17961,18436,18437,18439,18440,18441,18448,18449,18453,18455,18467,18469,18472,18541,18554,18557,18559,19221,19222,19381,19386],"fullWord":13358},{"subwords":[732,739,779,780,781,961,972,973,982,990,1009,5616,5618,5620,5626,5956,6033,6039,6055,13336,13344,13345,13352,13355,13359,13362,13364,13367,13374,13385,13439,13461,13464,13465,13609,13612,13613,13626,14422,14427,16014,16020,16041,16043,16046,16270,16291,16293,16296,16409,16410,16414,16457,16464,17476,17507,17510,17511,17512,17514,17769,17836,17838,18436,18437,18441,18448,18487,18541,18559,19386],"fullWord":13359},{"subwords":[761,781,905,911,918,961,1028,12680,12683,12686,12692,12936,12937,12944,13007,13008,13011,13286,13321,13328,13333,13336,13343,13352,13360,13364,13385,14160,14165,14182,14188,14201,14246,14247,14252,14350,14351,14383,14403,14427,14851,14866,14867,14891,14898,14912,15574,15673,15691,15700,16014,16016,16041,17298,17303,17406,17429,17435,17476,17494,17510,17641,17644,17652,17773,17885,17921,17948,17985,18432,18435,18436,18448,18449,18463,18464,18467,18469,18472,19075,19090,19093,19094,19097,19113,19221,19222,19323,19381,19386],"fullWord":13360},{"subwords":[781,905,911,918,919,961,13286,13321,13328,13333,13334,13336,13352,13361,13363,13364,13385,13386,13424,13436,14247,14252,14258,14261,14403,14410,14427,14851,14866,14867,14891,14895,14898,14912,14939,14944,15864,15865,16014,16041,16056,16103,17476,17494,17510,17518,17652,17655,17672,17697,17773,17802,17948,17956,18018,18436,18448,18449,18467,18469,18472,19221,19222,19231,19232,19377,19381,19386,21064,21067,21212],"fullWord":13361},{"subwords":[105,126,781,2921,3052,3059,3100,3202,3205,3229,8321,8378,8420,13154,13168,13364,13365,13366,13375,13424,13438,18323,18436,18806,21039,21064],"fullWord":13366},{"subwords":[693,694,697,711,732,739,779,781,961,964,1009,5616,5620,5626,5918,5956,6033,6055,6074,6075,12229,12257,12259,12261,12269,12289,12317,12318,12325,12330,12368,12374,12376,13239,13245,13249,13259,13261,13265,13336,13352,13355,13364,13367,13369,13370,13374,13385,13439,13453,13461,13464,13465,13539,13558,13560,13609,13613,13626,14427,15986,15995,16014,16041,16043,16270,16293,16399,16409,16410,16457,17220,17476,17490,17510,17511,17541,17836,18408,18428,18436,18437,18441,18448,18541,18559,18607,18624,19386],"fullWord":13370},{"subwords":[693,694,732,781,1009,1044,5620,5956,6055,6074,12229,12257,12259,12317,12325,12374,13239,13245,13261,13364,13367,13369,13371,13439,13453,13464,13539,13560,13613,18408,18436,18437,18495,18498,18541,18565,18607,18630,18969],"fullWord":13371},{"subwords":[732,735,737,739,775,779,781,782,817,825,905,906,911,918,961,966,993,1009,5588,5599,5616,5620,5626,5956,5976,5977,5982,6018,6033,6055,13286,13294,13299,13321,13322,13328,13329,13333,13336,13352,13355,13358,13364,13367,13372,13373,13374,13385,13439,13455,13459,13460,13461,13464,13465,13577,13599,13609,13613,13626,14247,14248,14251,14252,14262,14281,14284,14403,14427,14851,14852,14856,14866,14867,14881,14891,14898,14901,14905,14912,14979,14982,15248,15253,15272,15305,15306,15312,15748,16014,16041,16043,16270,16286,16293,16409,16410,16419,16457,17476,17494,17495,17510,17511,17523,17652,17773,17775,17836,17948,17961,18436,18437,18439,18440,18441,18448,18449,18453,18455,18467,18469,18472,18541,18554,18557,18559,19221,19222,19381,19386],"fullWord":13373},{"subwords":[325,781,932,961,1028,8321,8324,8362,8367,8371,8378,8391,8845,8856,8886,8887,8892,8901,8935,12686,12690,12691,12692,12810,12936,12937,12944,13336,13343,13352,13364,13375,13376,13377,13385,14172,14182,14188,14190,14201,14427,16014,16041,16559,16670,16693,16704,17298,17406,17407,17435,17476,17510,17644,17770,17885,17921,18432,18435,18436,18448,18743,19075,19090,19123,19386],"fullWord":13376},{"subwords":[596,693,700,745,781,9203,9325,12257,12453,12463,13193,13197,13239,13261,13364,13378,13765,13766,13799,13800,13850,13851,18347,18408,18436,18894,18926],"fullWord":13378},{"subwords":[781,961,1028,9367,9368,9374,9447,12686,12692,12936,12937,12944,13031,13336,13343,13352,13364,13379,13380,13382,13385,13839,13850,13851,13852,13866,14032,14177,14182,14188,14201,14421,14427,16014,16041,16883,16907,17298,17406,17435,17476,17510,17598,17644,17885,17921,18347,18432,18435,18436,18448,18926,18936,18947,19075,19090,19386],"fullWord":13380},{"subwords":[781,961,1028,9367,9368,9374,9447,12686,12692,12936,12937,12944,13031,13336,13343,13352,13364,13379,13380,13382,13385,13839,13850,13851,13852,13866,14032,14177,14182,14188,14201,14421,14427,16014,16041,16883,16907,17298,17406,17435,17476,17510,17598,17644,17885,17921,18347,18432,18435,18436,18448,18926,18936,18947,19075,19090,19386],"fullWord":13382},{"subwords":[481,488,495,761,781,911,1028,10182,10864,10897,12680,12686,12913,12937,12948,13008,13204,13286,13328,13364,13383,13922,13928,13973,14056,14058,14160,14161,14188,14247,14350,14851,14867,14898,15691,18432,18436,18449,18463,18467,19075,19093,19094,19221,19323],"fullWord":13383},{"subwords":[693,761,777,781,911,1028,12257,12293,12548,12574,12575,12680,12686,12937,13008,13239,13261,13286,13328,13364,13384,14154,14160,14188,14247,14350,14372,14821,14847,14851,14867,14898,15568,15691,18408,18432,18436,18449,18460,18463,18467,18468,19036,19075,19093,19094,19105,19221,19323],"fullWord":13384},{"subwords":[161,732,733,781,1009,4551,4805,5620,5956,6055,13171,13364,13367,13368,13387,13439,13464,13478,13613,18339,18436,18437,18438,18495,18498,18541,18565],"fullWord":13387},{"subwords":[732,781,1009,5620,5956,6055,6056,13364,13367,13388,13439,13464,13489,13613,18436,18437,18495,18498,18541,18565,18576],"fullWord":13388},{"subwords":[732,735,781,782,817,911,1009,5588,5620,5956,5976,5982,6055,13286,13294,13328,13329,13364,13367,13372,13389,13439,13455,13460,13464,13577,13599,13613,14247,14248,14262,14851,14852,14867,14898,14901,14979,15248,15312,15748,18436,18437,18439,18449,18453,18467,18476,18495,18498,18499,18541,18554,18565,18672,19221,19223,19235],"fullWord":13389},{"subwords":[732,781,1009,5620,5956,6055,13364,13367,13390,13439,13464,13613,13619,13705,13717,13850,13851,18347,18436,18437,18495,18498,18541,18565,18844,18926,18950],"fullWord":13390},{"subwords":[2869,2921,3202,4049,4302,8321,8989,9002,12257,13154,13239,13392,14484,14485,19647],"fullWord":13392},{"subwords":[732,735,762,817,5588,5627,5956,5976,13268,13276,13286,13294,13393,13439,13455,13569,13577,13602,14262,14278,14506,14507,14508,14518,14851,14852,14979,15248,15777,19815,19847],"fullWord":13393},{"subwords":[200,732,733,739,779,961,1053,4826,4849,5471,5478,5525,5526,5531,5627,5956,6033,13171,13177,13336,13394,13395,13439,13461,13478,13488,14416,14438,14441,14551,15893,16014,16270,17476,17481,17530,17675,17676,18066,18067,18135,18136,19825,19871,19876,19877],"fullWord":13395},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5627,5956,5976,5977,6033,13286,13294,13299,13321,13322,13336,13394,13396,13439,13455,13459,13461,13577,13602,14253,14262,14281,14403,14518,14544,14551,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15777,15782,15840,16014,16270,16286,16419,17476,17494,17495,17523,17687,18066,18071,18135,18136,18137,18146,18150,19825,19847,19849,19868,19869,19871,19876,19880],"fullWord":13396},{"subwords":[732,739,779,780,961,972,973,5627,5956,6033,6039,13336,13344,13345,13394,13397,13439,13461,14551,14558,16014,16020,16270,16291,17476,17507,17677,18066,18073,18135,18136,18140,18147,19825,19871,19876,19882],"fullWord":13397},{"subwords":[596,732,753,1106,5956,12229,12257,12259,12305,12317,13178,13239,13245,13398,13399,13401,13439,13453,13539,19948,19950],"fullWord":13399},{"subwords":[596,925,961,12257,12269,12283,13239,13259,13336,13398,13400,15986,16014,17220,17476,17490,19948,19957],"fullWord":13400},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,1106,1109,1110,1114,5588,5599,5956,5976,5977,6033,13286,13294,13299,13321,13322,13335,13336,13401,13403,13404,13405,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14856,14866,14881,14891,14921,14929,14979,14982,15248,15272,15305,15337,15354,16014,16076,16078,16270,16286,16419,17476,17494,17495,17523,19967,20070,20071],"fullWord":13404},{"subwords":[287,750,1115,7283,7365,7604,7612,12230,12257,12453,13193,13239,13251,13406,13721,13765,13773,19920,19948,20107,20152,20177],"fullWord":13406},{"subwords":[481,10182,10864,12913,13087,13088,13204,13407,14056,19923,20250],"fullWord":13407},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,1145,1150,5588,5599,5956,5976,5977,6033,13286,13294,13299,13321,13322,13336,13408,13410,13411,13421,13439,13455,13459,13461,13577,13630,13635,14262,14281,14403,14851,14852,14856,14866,14881,14891,14933,14938,14979,14982,15248,15272,15281,15305,16014,16089,16091,16270,16286,16419,16475,17476,17494,17495,17523,17544,18201,18220,20410,20417,20419,20436,20439,20442,20449,20454,20510,20512,20973,20974],"fullWord":13411},{"subwords":[287,750,1154,1158,7283,7365,7604,7612,7747,12230,12257,12453,13193,13239,13251,13408,13412,13415,13721,13765,13773,20326,20349,20393,20399,20742,20774,20790],"fullWord":13412},{"subwords":[605,617,732,733,1145,1147,1158,1159,4492,4500,4574,4576,4605,4774,4865,5865,5956,12229,12257,12259,12317,12390,13171,13239,13245,13246,13408,13409,13415,13416,13439,13453,13478,13539,13544,13630,20303,20309,20393,20394,20396,20397,20505,20524,20579,20581],"fullWord":13416},{"subwords":[617,732,1145,1158,5956,6118,12229,12257,12259,12317,12339,12390,13239,13245,13408,13415,13417,13439,13453,13489,13499,13539,13630,20393,20396,20505,20532,20541,20547,20579],"fullWord":13417},{"subwords":[617,732,735,817,1145,1158,5588,5595,5947,5956,5976,12229,12257,12259,12317,12319,12390,13239,13245,13286,13294,13408,13410,13415,13418,13439,13453,13455,13539,13577,13630,14254,14262,14821,14851,14852,14933,14979,15248,20393,20396,20410,20417,20432,20436,20505,20510,20579,20973,20984],"fullWord":13418},{"subwords":[777,1158,12257,12548,12606,12680,13119,13239,13286,13408,13415,13419,14154,14229,14254,14350,14372,14398,14821,14851,14933,15568,15734,15735,20393,20410,20432,20436,20897,20927,20944,20973],"fullWord":13419},{"subwords":[732,739,779,961,1196,1197,5605,5619,5956,6033,6038,6189,6198,13336,13424,13426,13427,13436,13439,13461,13462,13489,13510,16014,16103,16104,16270,16319,16336,16339,17476,17518,17697,21064,21067,21097,21105,21127,21130],"fullWord":13427},{"subwords":[227,732,735,737,738,739,775,779,817,825,905,906,961,966,1196,1197,5588,5599,5619,5956,5976,5977,6033,6038,13286,13294,13299,13321,13322,13336,13424,13428,13429,13436,13439,13455,13459,13461,13577,14258,14261,14262,14281,14290,14293,14403,14410,14576,14577,14851,14852,14856,14866,14881,14891,14895,14939,14944,14979,14982,15248,15255,15256,15272,15282,15305,15864,15865,15866,15867,16014,16103,16105,16270,16286,16419,17476,17494,17495,17518,17523,17655,17672,17697,21064,21067,21071,21097,21099,21104,21105,21127,21130,21212],"fullWord":13429},{"subwords":[287,716,750,7283,7365,7374,7447,7604,7612,8188,12230,12257,12311,12453,13193,13239,13251,13424,13430,13721,13765,13773,13807,21058,21064,21144,21146],"fullWord":13430},{"subwords":[341,574,716,9178,11156,11213,11264,11270,11408,11697,12201,12244,12257,12311,12443,12453,13193,13239,13424,13431,13758,13765,13807,21051,21064,21144,21146],"fullWord":13431},{"subwords":[6386,6937,12672,12769,12771,12782,13424,13432,21064],"fullWord":13432},{"subwords":[481,10182,10304,10864,12913,13204,13424,13433,13932,13933,13981,14009,14056,14088,21064],"fullWord":13433},{"subwords":[905,961,12680,12683,12936,13007,13286,13321,13336,13343,13424,13434,13436,14187,14246,14258,14261,14350,14351,14383,14389,14403,14410,14851,14866,14891,14895,14939,14944,15672,15673,15690,15864,15865,16014,16016,16103,17298,17302,17303,17406,17472,17473,17476,17494,17518,17655,17672,17697,21064,21067,21212],"fullWord":13434},{"subwords":[781,1028,1093,12686,12937,13059,13364,13424,13435,14188,14224,14228,14561,18432,18436,18508,19075,19186,19453,19567,21064,21193,21224],"fullWord":13435},{"subwords":[93,94,732,733,2766,2921,2922,2923,3113,4431,4639,4673,5956,13154,13155,13156,13171,13439,13440,13441,13478,13489,13490],"fullWord":13441},{"subwords":[93,96,732,739,779,961,2921,2922,2926,2938,3021,3104,3119,4048,4237,5605,5956,6023,6024,6033,13154,13155,13159,13167,13336,13439,13440,13442,13461,13462,13489,13510,15880,16014,16139,16270,16298,16319,16336,17476,17477,17525],"fullWord":13442},{"subwords":[93,98,105,732,1196,2921,2922,3100,3202,3236,5582,5956,8321,8420,8450,8549,8607,9051,13154,13155,13424,13439,13443,13444,21064,21097,21098,21127],"fullWord":13444},{"subwords":[732,5956,8321,8450,8483,8540,8549,12229,12257,12259,12317,12339,13239,13245,13439,13445,13453,13489,13499,13539],"fullWord":13445},{"subwords":[732,733,734,4673,5740,5741,5956,9821,13171,13439,13446,13447,13478,13489,13490,13492,13522],"fullWord":13447},{"subwords":[399,401,481,732,733,4466,4601,4673,4728,4731,5691,5756,5956,10090,10093,10182,10324,10327,10350,10351,10378,10383,13171,13204,13207,13208,13439,13450,13451,13478,13479,13489,13490,13495,13940,13941,13950],"fullWord":13451},{"subwords":[693,694,732,781,1009,1074,5620,5627,5956,6055,6074,12229,12257,12259,12300,12317,12325,12374,12659,13239,13245,13261,13364,13367,13369,13439,13453,13454,13464,13539,13560,13613,14484,14501,14561,18408,18436,18437,18508,18512,18541,18607,19434,19435,19438,19453,19631],"fullWord":13454},{"subwords":[399,407,481,486,732,735,737,739,775,779,817,825,905,906,961,966,5588,5592,5593,5599,5956,5976,5977,6033,10182,10194,10195,10197,10207,10228,10324,10350,10353,10355,10360,13204,13207,13210,13211,13232,13286,13294,13299,13321,13322,13336,13439,13450,13452,13455,13456,13457,13459,13461,13577,13940,13943,14262,14281,14403,14805,14851,14852,14856,14866,14881,14891,14968,14973,14979,14982,15248,15272,15305,15942,15948,16014,16270,16274,16286,16403,16419,16420,17019,17476,17488,17494,17495,17523],"fullWord":13457},{"subwords":[227,399,481,732,735,738,817,1196,5588,5592,5594,5956,5976,10182,10304,10306,10324,10350,10355,10359,10495,11065,11074,13204,13207,13210,13286,13294,13313,13424,13428,13439,13450,13455,13456,13458,13577,13932,13936,13940,14009,14010,14258,14262,14290,14410,14576,14851,14852,14939,14968,14979,15183,15201,15248,15255,15266,15267,15864,15866,21050,21064,21071,21097,21099,21115,21127],"fullWord":13458},{"subwords":[732,739,779,780,961,972,973,5605,5611,5956,6031,6033,6039,6042,13336,13344,13345,13347,13439,13461,13462,13463,13489,13510,16014,16020,16270,16291,16319,16336,16338,16342,17476,17507],"fullWord":13463},{"subwords":[732,1106,1196,5629,5956,6092,6189,13401,13424,13426,13439,13466,13467,13489,19992,19993,21064,21097,21127],"fullWord":13466},{"subwords":[1510,1576,1583,1636,1941,5632,5691,10383,13468,13489,13495,13947],"fullWord":13468},{"subwords":[1510,1636,1749,2721,5632,10495,11065,13469,14009,21115,21127],"fullWord":13469},{"subwords":[93,96,114,116,732,739,779,961,964,2869,2883,2887,2906,2921,2922,2926,2938,3021,4048,4237,5856,5918,5956,6023,6033,12229,12257,12259,12261,12269,12317,12318,13154,13155,13159,13167,13239,13245,13249,13259,13336,13439,13453,13461,13470,13471,13539,13558,15880,15986,15995,16014,16134,16139,16270,16298,17220,17476,17477,17490,17525],"fullWord":13471},{"subwords":[3113,4639,4651,4673,5740,5741,9821,13472,13473,13478,13489,13490,13492,13522],"fullWord":13473},{"subwords":[4120,4123,4127,4135,5740,5984,9821,13472,13474,13489,13492,13506,13522,13577,13583,13590,14262,15021,15103,15248],"fullWord":13474},{"subwords":[3429,3430,4046,5959,6057,9079,13438,13476,13613,13705,13850,18823,18844,18926],"fullWord":13476},{"subwords":[3145,3413,3429,3430,4046,5856,5959,6057,9079,9207,9211,9244,9325,12374,12410,12453,12463,13438,13477,13539,13560,13613,13705,13765,13769,13799,13850,18607,18823,18844,18894,18898,18926],"fullWord":13477},{"subwords":[200,399,407,481,486,732,733,739,779,961,4466,4467,4601,4603,4728,4826,5756,5760,5956,6033,10090,10093,10099,10107,10182,10194,10195,10196,10227,10324,10327,10331,10350,10353,10360,10378,13171,13177,13204,13207,13208,13211,13232,13336,13439,13450,13452,13461,13478,13479,13480,13488,13940,13941,13942,13943,13950,15893,15942,15948,16014,16270,16274,16403,17019,17044,17476,17481,17488,17530],"fullWord":13480},{"subwords":[161,605,693,694,695,732,733,781,1009,4492,4500,4512,4551,4605,4774,4788,4805,5620,5865,5956,6055,6074,12229,12257,12259,12317,12325,12374,13171,13239,13245,13246,13261,13262,13364,13367,13368,13369,13439,13453,13464,13478,13481,13539,13544,13560,13561,13613,18339,18408,18436,18437,18438,18541,18607,18610],"fullWord":13481},{"subwords":[4667,4673,4728,4731,4733,5691,5756,10378,10383,13478,13482,13489,13490,13495,13950],"fullWord":13482},{"subwords":[396,399,481,732,733,735,817,4466,4516,4601,4607,4728,4810,5323,5588,5592,5756,5956,5976,10090,10093,10097,10182,10202,10324,10327,10350,10355,10378,13171,13174,13204,13207,13208,13210,13286,13292,13294,13295,13439,13450,13455,13456,13478,13479,13484,13577,13940,13941,13950,14262,14736,14851,14852,14853,14961,14968,14979,15060,15248],"fullWord":13484},{"subwords":[4673,4678,4728,4731,4810,5691,5756,5757,5984,10378,10383,10388,10448,13478,13485,13489,13490,13495,13506,13577,13583,13950,14262,15060,15093,15107,15248,15259],"fullWord":13485},{"subwords":[4810,4826,5114,5115,5116,5117,5200,5202,5203,5204,5215,5216,5221,5223,5225,5402,5403,6004,6033,12752,12755,12916,12925,12936,12979,12982,13007,13478,13486,13487,13488,13577,13607,14020,14023,14147,14148,14149,14166,14167,14168,14262,14281,14350,14357,14358,14383,14384,14385,14403,15060,15078,15081,15087,15248,15272,15305,15600,15603,15609,15610,15611,15663,15664,15668,15676,15677,17323,17406,17419,17530,17638,17639],"fullWord":13487},{"subwords":[7467,7493,7496,7503,7604,7612,12339,12453,13489,13491,13499,13516,13539,13705,13721,13765,13769,13773],"fullWord":13491},{"subwords":[4673,5740,5741,5957,9821,13478,13489,13490,13492,13493,13522],"fullWord":13493},{"subwords":[4673,4728,4731,5691,5756,5957,10378,10383,13478,13489,13490,13495,13496,13950],"fullWord":13496},{"subwords":[5691,5957,5984,10383,10388,10448,13489,13495,13497,13506,13577,13583,14262,15107,15248,15259],"fullWord":13497},{"subwords":[4673,4674,4774,5665,5865,5957,12339,12340,13478,13489,13490,13499,13500,13539,13544],"fullWord":13500},{"subwords":[4673,5957,13478,13489,13490,13502,13503,13569,14237],"fullWord":13503},{"subwords":[5957,5984,13489,13502,13504,13506,13569,13577,13583,14262,14278,15248],"fullWord":13504},{"subwords":[4673,4675,4678,4810,5957,5984,13478,13489,13490,13506,13507,13577,13583,14262,15060,15093,15248],"fullWord":13507},{"subwords":[4673,5957,6092,13478,13489,13490,13511,13512,19992,19993],"fullWord":13512},{"subwords":[5957,5958,6033,6092,6104,13489,13510,13511,13513,16319,16336,19992,19993,19995,20000],"fullWord":13513},{"subwords":[5957,6118,13489,13514,13630,13631,20532,20547],"fullWord":13514},{"subwords":[6118,13489,13515,13613,13630,13633,13705,13850,18576,18844,18926,20532,20547,20586,20594,20811,20842],"fullWord":13515},{"subwords":[1604,2079,2197,2292,5718,6166,7771,12916,13437,13516,13517,14234],"fullWord":13517},{"subwords":[4673,5667,5709,5711,7467,7468,13478,13489,13490,13516,13518],"fullWord":13518},{"subwords":[732,739,779,950,961,964,5918,5956,6033,9836,9843,9965,12229,12257,12259,12261,12269,12317,12318,13239,13245,13249,13259,13336,13439,13446,13448,13453,13461,13521,13539,13558,15939,15986,15995,16007,16014,16270,16944,17216,17220,17234,17476,17487,17490,17491,17521],"fullWord":13521},{"subwords":[5743,7493,7604,7612,9276,9826,9836,9846,9913,9919,9922,9932,12453,13516,13524,13525,13539,13705,13721,13732,13765,13769,13773,13780,13884],"fullWord":13525},{"subwords":[5918,6033,9276,9284,9307,9836,9843,9846,9847,9913,9919,9921,9929,9932,9934,12453,12459,13520,13524,13526,13539,13549,13558,13705,13716,13732,13736,13765,13769,13772,13780,13787,13798,14421,16858,16860,16876,16883,16948,16954,16974,16979,17248,17249,17571,17580,17582],"fullWord":13526},{"subwords":[5740,5742,6033,9821,9823,12916,12925,12936,13489,13492,13494,13510,13522,13523,13527,13528,13607,14044,14048,14166,16319,16326,16336,17406,17620],"fullWord":13528},{"subwords":[269,294,399,401,481,732,5585,5691,5956,7293,7298,7365,7366,7467,7477,7678,10109,10182,10324,10350,10383,10398,13184,13204,13207,13439,13450,13489,13495,13516,13529,13940],"fullWord":13529},{"subwords":[5691,5780,10383,10460,13489,13495,13531,13532,13613,18576,18591],"fullWord":13531},{"subwords":[4673,4728,4731,4805,5691,5756,10378,10383,10460,13478,13489,13490,13495,13532,13533,13613,13950,18576,18577],"fullWord":13533},{"subwords":[5691,5984,10383,10388,10448,10460,13489,13495,13506,13532,13534,13577,13583,13599,13613,13617,13622,14262,15107,15186,15248,15259,15312,15748,18576,19240],"fullWord":13534},{"subwords":[5691,5693,5790,5798,6033,6092,6104,10383,10392,10451,10471,13489,13495,13498,13510,13536,16319,16336,17049,19992,19993,19995,20000],"fullWord":13536},{"subwords":[3120,3529,4046,4047,5959,6107,9079,10414,10471,10481,10518,10536,10665,10711,13537,13705,13743,20004,20119,20129,20144,20177],"fullWord":13537},{"subwords":[5799,6033,6107,6110,9416,10414,10415,10471,10481,10486,10536,10551,10665,10672,10681,10711,10719,13538,13705,13716,13743,13745,13961,14421,16883,17088,17563,20004,20007,20129,20134,20144,20177,20180,20197],"fullWord":13538},{"subwords":[269,657,663,732,5956,7365,7366,7493,12229,12230,12252,12257,12259,12317,13184,13239,13245,13251,13439,13453,13516,13539,13541,13551],"fullWord":13541},{"subwords":[3120,3413,3523,3529,4046,4047,5856,5861,5959,9079,9207,10414,10518,10536,10544,10625,10665,12410,12438,12439,12453,13539,13543,13705,13743,13765,13769],"fullWord":13543},{"subwords":[4667,4673,4774,4798,5665,5865,5867,12339,12340,13478,13489,13490,13499,13539,13544,13545],"fullWord":13545},{"subwords":[5691,10383,10414,10536,10544,10625,10665,12339,12438,12439,12453,13489,13495,13499,13539,13548,13705,13743,13765,13769],"fullWord":13548},{"subwords":[528,574,657,663,732,5956,11213,11218,11270,11437,11446,11512,12229,12244,12245,12252,12257,12259,12317,13239,13245,13439,13453,13539,13550,13551],"fullWord":13550},{"subwords":[657,663,732,5956,12229,12252,12257,12259,12317,12339,13239,13245,13439,13453,13489,13499,13539,13551,13552],"fullWord":13552},{"subwords":[4673,4774,5665,5865,12339,12340,13478,13489,13490,13499,13539,13544,13553],"fullWord":13553},{"subwords":[5984,5998,12339,13489,13499,13506,13539,13554,13577,13583,14262,14269,15248],"fullWord":13554},{"subwords":[6189,12339,13489,13499,13539,13555,13557,21120,21127],"fullWord":13555},{"subwords":[5953,12353,12528,12533,12547,12876,12916,12918,13539,13556,13564,14105],"fullWord":13556},{"subwords":[161,605,693,694,695,732,733,781,1009,4492,4500,4512,4551,4605,4774,4788,4805,5620,5865,5956,6055,6074,12229,12257,12259,12317,12325,12374,13171,13239,13245,13246,13261,13262,13364,13367,13368,13369,13439,13453,13464,13478,13481,13539,13544,13560,13561,13613,18339,18408,18436,18437,18438,18541,18607,18610],"fullWord":13561},{"subwords":[10437,10460,10468,10470,11008,11010,11050,12374,12659,13532,13539,13560,13562,13613,14454,14484,14501,14561,18607,19434,19438,19453,19605,19719],"fullWord":13562},{"subwords":[13539,13563,13577,13602,14262,14290,14406,14410,14484,14505,14518,14576,15248,15777,15821,15822,15866,19866,21120,21127,21224],"fullWord":13563},{"subwords":[5918,5953,5955,6033,12339,12506,12547,12560,12561,12876,12879,12916,12918,12922,12925,12936,13489,13499,13501,13510,13539,13547,13558,13559,13564,13565,13566,13607,14105,14106,14112,14166,16319,16335,16336,17383,17406],"fullWord":13565},{"subwords":[5691,5786,10383,10443,10864,10865,12845,12916,12933,13489,13495,13502,13568,13569,13971,14056,14061,14130,14131],"fullWord":13568},{"subwords":[5782,5846,10470,10957,10995,12110,13569,13570,13988,13991,13995,14454,14465,14480,14506,19624],"fullWord":13570},{"subwords":[4673,13478,13489,13490,13502,13569,13571,14237],"fullWord":13571},{"subwords":[5984,13489,13502,13506,13569,13572,13577,13583,14262,14278,15248],"fullWord":13572},{"subwords":[5918,6033,9307,12453,12459,13520,13539,13549,13558,13569,13573,13574,13575,13705,13716,13765,13769,13772,13798,13813,13815,13819,13828,14421,16858,16860,16883,17248,17249,17580,17582],"fullWord":13575},{"subwords":[3429,3430,4046,5959,6057,9079,13438,13569,13576,13613,13705,13813,13815,13820,13850,18823,18844,18926],"fullWord":13576},{"subwords":[4673,4678,4810,5428,5471,5525,5526,5528,5984,13478,13489,13490,13506,13577,13579,13580,13583,13602,14262,14404,14438,14518,14519,14520,15060,15093,15248,15773,15777,15778,15836],"fullWord":13580},{"subwords":[4810,4826,4849,5428,5429,5471,5478,5525,5526,5528,5529,5531,6033,13478,13488,13577,13579,13581,13602,14262,14281,14403,14404,14405,14416,14438,14441,14518,14544,14545,14551,15060,15087,15248,15272,15305,15773,15777,15778,15782,15840,17530,17675,17676,17687,18066,18067,18071,18135,18136,18137,18150,19825,19846,19876,19877,19880],"fullWord":13581},{"subwords":[6033,9384,9389,9409,9416,10414,10415,10536,10549,10550,10551,10665,10672,10677,10681,10683,13577,13585,13586,13588,13705,13712,13715,13716,13743,13745,13959,13960,13961,14262,14281,14309,14336,14403,14421,15248,15272,15305,15444,15445,15473,15475,15508,15509,15514,15524,15526,16883,16889,16890,17072,17088,17563,17565,17591,17722],"fullWord":13586},{"subwords":[4714,4810,4935,5014,5023,5114,5115,5200,5202,5206,5215,5377,5402,9110,9384,9385,12752,12916,12979,13478,13486,13577,13587,13705,13710,13712,14020,14032,14147,14148,14262,14303,14306,14350,14357,15060,15076,15078,15248,15428,15433,15508,15509,15600,15603,15610,15663,15664],"fullWord":13587},{"subwords":[6033,8503,8505,8549,8552,8584,8625,8628,8664,8671,8672,8676,8678,8934,9384,9389,9409,13577,13588,13589,13651,13705,13712,13715,13716,13841,14262,14281,14309,14336,14403,14421,15248,15272,15293,15305,15508,15509,15514,15524,15526,16574,16617,16639,16642,16883,16889,16890,17565,17591,17722],"fullWord":13589},{"subwords":[4673,4678,4810,5355,5740,5741,5984,9821,13478,13489,13490,13492,13506,13522,13577,13583,13590,13591,14262,15060,15093,15103,15248],"fullWord":13591},{"subwords":[5830,5832,9178,9189,9384,9444,11539,11553,11574,11743,11786,11787,11792,13577,13593,13594,13599,13613,13623,13705,13712,13850,14262,14313,14317,15202,15217,15248,15312,15480,15481,15508,15509,15542,15747,15748,18595,18596,18599,18644,18844,18847,18882,18886,18889,18926,18941,19285,19295,19296],"fullWord":13594},{"subwords":[349,359,732,735,737,739,775,779,817,825,858,863,905,906,961,966,970,5588,5599,5956,5976,5977,6033,9376,9384,9389,9409,13200,13202,13286,13294,13299,13303,13321,13322,13336,13439,13455,13459,13461,13577,13588,13597,13705,13712,13715,13716,13839,14239,14262,14281,14309,14336,14403,14421,14788,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15508,15509,15514,15524,15526,16014,16028,16270,16286,16405,16419,16883,16889,16890,17476,17494,17495,17523,17565,17591,17592,17722],"fullWord":13597},{"subwords":[5918,5953,5955,6000,6004,6033,12506,12547,12548,12556,12560,12561,12876,12879,12916,12918,12922,12925,12936,12979,12982,13007,13539,13558,13564,13566,13577,13598,13607,14105,14106,14112,14147,14149,14154,14157,14166,14168,14262,14281,14350,14372,14373,14383,14384,14403,15238,15248,15272,15305,15610,15611,15663,15668,15676,16391,17272,17383,17406,17419,17638],"fullWord":13598},{"subwords":[5984,6008,13489,13506,13577,13583,13599,13600,13613,13617,14262,15248,15312,15748,18576,18652,18655,19240],"fullWord":13600},{"subwords":[10460,10495,11065,11074,13532,13577,13599,13601,13613,14009,14010,14262,14290,14410,14576,15201,15248,15267,15312,15748,15866,19257,19377,19555,19559,19570,21115,21127,21135],"fullWord":13601},{"subwords":[5740,5984,9821,13489,13492,13506,13522,13577,13583,13590,13602,13603,14262,14452,14518,14519,15103,15248,15777,15836,19595],"fullWord":13603},{"subwords":[5984,6033,13489,13506,13508,13510,13577,13583,13584,13602,13604,14262,14281,14403,14518,14519,14521,14544,14551,15248,15272,15305,15334,15777,15782,15836,15837,15840,16319,16336,16340,16425,17658,17687,18066,18071,18135,18136,18137,18150,19825,19876,19878,19880],"fullWord":13604},{"subwords":[732,739,779,781,961,1009,5605,5616,5620,5626,5956,6033,6055,6056,13336,13352,13355,13364,13367,13374,13385,13439,13461,13462,13464,13465,13489,13510,13605,13609,13613,13626,14427,16014,16041,16043,16270,16293,16319,16336,16409,16410,16457,16458,17476,17510,17511,17821,17836,18436,18437,18441,18448,18541,18559,18560,18576,18588,19386],"fullWord":13605},{"subwords":[5984,6018,6033,6046,13489,13506,13508,13510,13577,13583,13584,13599,13609,13610,13613,13617,13618,13626,14262,14281,14282,14284,14403,14427,15248,15272,15290,15305,15306,15312,15748,16319,16336,16340,16409,16425,16457,17658,17821,17823,17836,17840,17961,18576,18588,18658,19240,19242,19386],"fullWord":13610},{"subwords":[5691,5693,5790,6033,10383,10392,10451,10459,10460,10465,13489,13495,13498,13510,13532,13535,13609,13611,13613,13626,14427,16319,16336,16409,16457,17049,17052,17057,17537,17818,17821,17828,17836,18576,18588,19386],"fullWord":13611},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13615},{"subwords":[161,732,733,735,781,782,817,911,1009,4516,4537,4551,4553,4607,4797,4805,4810,4812,5323,5327,5588,5620,5956,5976,5982,6055,13171,13174,13286,13292,13294,13295,13328,13329,13330,13364,13367,13368,13372,13439,13455,13460,13464,13478,13577,13599,13613,13616,14247,14248,14249,14262,14736,14851,14852,14853,14867,14898,14901,14902,14961,14979,15060,15248,15312,15318,15748,18339,18436,18437,18438,18439,18449,18450,18453,18454,18467,18541,18554,19205,19221,19233],"fullWord":13616},{"subwords":[5984,6018,6033,6046,13489,13506,13508,13510,13577,13583,13584,13599,13609,13610,13613,13617,13618,13626,14262,14281,14282,14284,14403,14427,15248,15272,15290,15305,15306,15312,15748,16319,16336,16340,16409,16425,16457,17658,17821,17823,17836,17840,17961,18576,18588,18658,19240,19242,19386],"fullWord":13618},{"subwords":[13489,13613,13619,13620,13705,13850,18576,18844,18926,18950],"fullWord":13620},{"subwords":[6033,9447,13609,13613,13619,13621,13626,13705,13716,13850,13866,14421,14427,16409,16457,16883,16907,16911,17598,17600,17836,17846,18662,18844,18850,18926,18936,18947,18950,18964,19386],"fullWord":13621},{"subwords":[5691,5984,10383,10388,10448,10460,13489,13495,13506,13532,13534,13577,13583,13599,13613,13617,13622,14262,15107,15186,15248,15259,15312,15748,18576,19240],"fullWord":13622},{"subwords":[10443,10460,10864,10865,10867,10882,10897,12845,12916,12937,12979,13008,13532,13577,13599,13613,13624,13625,13973,14027,14056,14061,14064,14147,14160,14188,14262,14350,14365,15248,15312,15610,15621,15663,15691,15694,15748,18981,19017,19075,19076,19079,19093,19101,19323,19324],"fullWord":13625},{"subwords":[4673,4805,13478,13489,13490,13613,13627,18576,18577],"fullWord":13627},{"subwords":[5984,13489,13506,13577,13583,13599,13613,13617,13628,14262,15248,15312,15748,18576,19240],"fullWord":13628},{"subwords":[5957,5958,6033,6118,6121,13489,13510,13630,13631,13632,13635,16319,16336,16475,17544,18228,20532,20547,20549],"fullWord":13632},{"subwords":[6033,9447,13609,13613,13626,13630,13633,13634,13635,13705,13716,13850,13866,14421,14427,16409,16457,16475,16883,16907,16911,17544,17598,17600,17836,17850,18235,18251,18844,18850,18926,18936,18947,19386,20586,20591,20594,20596,20811,20815,20826,20838,20842,20853],"fullWord":13634},{"subwords":[5984,6118,6119,13489,13506,13577,13583,13599,13613,13617,13630,13636,14262,15248,15312,15748,18576,19240,19521,20532,20547,20586,20587,20588,20594],"fullWord":13636},{"subwords":[6189,12916,12937,13489,13613,13637,14027,14188,18576,18981,19075,19076,19186,19559,19567,21127,21135],"fullWord":13637},{"subwords":[10443,10460,10495,10864,10865,10897,11065,12845,12916,12937,13532,13613,13638,13973,13981,14009,14027,14056,14061,14088,14188,18981,19017,19075,19076,19186,19559,19567,21115,21127,21135],"fullWord":13638},{"subwords":[269,280,325,732,739,779,932,961,5956,6033,7365,7366,7370,7373,7396,7399,7408,8233,8237,8321,8324,8362,8367,8450,8452,8549,13184,13187,13336,13439,13461,13516,13519,13639,13640,13643,15910,15912,16014,16270,16513,16543,16574,17476],"fullWord":13640},{"subwords":[337,442,481,8241,8268,8321,8640,8664,9152,10182,10665,13191,13204,13217,13641,13651,13652,13749],"fullWord":13641},{"subwords":[200,325,732,733,739,779,932,934,961,4543,4614,4826,5956,6033,8217,8219,8321,8324,8362,8367,8368,8440,8443,8450,8452,8549,13171,13177,13336,13439,13461,13478,13488,13643,13644,15893,16014,16270,16503,16504,16543,16544,16574,16581,17476,17481,17530],"fullWord":13644},{"subwords":[325,732,735,737,739,775,779,817,825,905,906,932,961,966,5588,5599,5956,5976,5977,6033,8321,8324,8333,8338,8351,8354,8362,8367,8450,8452,8453,8456,8549,8552,8584,8934,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,13643,13645,13677,14262,14281,14403,14775,14851,14852,14856,14866,14881,14886,14891,14979,14982,15248,15272,15305,15376,15377,16014,16270,16286,16419,16422,16543,16545,16549,16556,16574,16577,16607,17476,17494,17495,17523],"fullWord":13645},{"subwords":[325,732,739,779,780,932,936,961,972,973,5956,6033,6039,8321,8324,8362,8367,8369,8450,8452,8549,13336,13342,13344,13345,13439,13461,13643,13646,16014,16020,16033,16270,16291,16543,16546,16574,16609,17476,17507],"fullWord":13646},{"subwords":[325,744,751,932,961,968,2921,2938,3025,3202,3204,3272,3273,3274,3319,3321,3402,4046,4048,4237,8321,8324,8362,8367,8612,8664,8671,8678,13154,13167,13336,13647,13651,13688,13690,13702,13839,13841,14421,15880,16014,16178,16639,16769,16883,17476,17550,17551],"fullWord":13647},{"subwords":[8540,8549,8595,8625,8664,12453,12474,13539,13648,13651,13705,13765,13769,13874],"fullWord":13648},{"subwords":[5953,8525,8540,8549,8725,8754,8789,8793,8845,8846,10443,10444,10822,10864,10865,12504,12547,12845,12876,12916,12918,13539,13564,13649,13662,14056,14061,14105],"fullWord":13649},{"subwords":[325,337,340,481,486,744,751,932,961,8241,8244,8321,8324,8362,8367,8664,8671,8678,10182,10188,10194,10231,10665,10672,10681,13191,13192,13204,13216,13232,13336,13651,13652,13653,13839,13841,13917,14421,15931,15942,16014,16639,16883,17019,17088,17476],"fullWord":13653},{"subwords":[8640,8664,8739,8845,8851,9152,10665,10864,12812,13651,13654,13749,14032,14056,14080],"fullWord":13654},{"subwords":[8664,8671,8678,8739,8845,8851,8853,8856,8886,9374,10665,10672,10681,10864,10874,12810,12812,12822,12936,13651,13655,13841,14032,14056,14072,14073,14087,14172,14421,16639,16693,16837,16883,17088,17104,17350,17354,17364,17406,17407,17617],"fullWord":13655},{"subwords":[5782,7477,7489,8519,8525,8532,8537,8549,10398,10957,11487,12078,12079,13516,13656],"fullWord":13656},{"subwords":[5782,8519,8525,8532,8537,8549,8725,8754,8775,8845,8846,10443,10864,10865,10957,11870,11947,11948,12079,12806,12845,12916,13657,14024,14056,14061,14093],"fullWord":13657},{"subwords":[51,1269,1851,2029,2197,8321,8664,8705,8739,8845,8851,12700,13651,13658,14032],"fullWord":13658},{"subwords":[1851,2197,3272,3319,3354,3617,3864,4046,8612,8664,8705,8714,8739,8845,8851,12700,13651,13659,14032],"fullWord":13659},{"subwords":[1576,1583,2197,8483,8549,8705,8725,8845,8846,12916,13489,13660],"fullWord":13660},{"subwords":[481,8276,8321,8789,8845,10182,10741,10864,12257,12480,12913,13204,13239,13661,13904,14056],"fullWord":13661},{"subwords":[4774,5114,5172,5176,5200,5865,5953,8540,8549,8721,8725,8726,8789,8793,8794,8845,8846,8847,12493,12499,12547,12752,12802,12876,12916,12918,13478,13539,13544,13564,13662,13663,14020,14102,14105],"fullWord":13663},{"subwords":[5918,5953,5955,6033,8540,8547,8549,8725,8730,8789,8793,8797,8845,8846,8850,8856,8881,8886,12506,12547,12560,12561,12565,12810,12876,12879,12916,12918,12922,12925,12936,13539,13558,13564,13566,13607,13662,13664,13669,14105,14106,14112,14166,14172,16574,16676,16685,16693,16694,17383,17406,17407],"fullWord":13664},{"subwords":[5953,8540,8549,8607,8725,8789,8793,8799,8845,8846,9051,9058,12547,12876,12916,12918,13539,13564,13567,13662,13665,13670,14105,14115,21120,21127,21183],"fullWord":13665},{"subwords":[3272,3305,3314,3319,3354,3355,3689,3777,3864,4046,8612,8664,8714,8739,8789,8845,8851,9097,9207,9213,9360,12453,13651,13666,13765,13768,13809,14032],"fullWord":13666},{"subwords":[8789,8831,8835,8845,8856,8886,12560,12565,12809,12810,12895,12898,12905,12936,13667,13668,13669,14112,14118,14120,14172,16686,16693,17264,17383,17397,17406,17407,17633],"fullWord":13668},{"subwords":[8549,8607,8725,8816,8831,8845,8846,9051,9058,12809,12895,12916,13671,14118,21127],"fullWord":13671},{"subwords":[3272,3319,3328,3354,3429,3864,3965,4046,8612,8664,8688,8714,8739,8845,8851,8892,9440,12937,12939,13038,13438,13651,13672,13700,13850,13853,13855,14032,14188,18743,18823,18926,19075,19083],"fullWord":13672},{"subwords":[7826,7846,7874,7875,8731,8831,8838,8845,8892,12809,12895,12937,13673,13674,14118,14188,18743,18993,19000,19060,19075],"fullWord":13674},{"subwords":[8789,8831,8838,8845,8892,12574,12612,12809,12887,12895,12937,13667,13673,13675,14118,14188,18743,19036,19060,19075],"fullWord":13675},{"subwords":[8831,8835,8838,8842,8845,8856,8886,8887,8892,8901,8935,12809,12810,12895,12898,12905,12936,12937,12944,13673,13676,14118,14120,14172,14182,14188,14201,14427,16686,16691,16693,16704,17399,17401,17406,17407,17435,17644,17919,17921,18743,19060,19075,19086,19090,19123,19386],"fullWord":13676},{"subwords":[325,732,735,737,739,775,779,817,825,905,906,932,961,966,5588,5599,5956,5976,5977,6033,8321,8324,8333,8338,8351,8354,8362,8367,8450,8452,8453,8456,8549,8552,8584,8934,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,13643,13645,13677,14262,14281,14403,14775,14851,14852,14856,14866,14881,14886,14891,14979,14982,15248,15272,15305,15376,15377,16014,16270,16286,16419,16422,16543,16545,16549,16556,16574,16577,16607,17476,17494,17495,17523],"fullWord":13677},{"subwords":[399,403,481,732,1196,5956,8258,8321,8322,8420,8445,8450,8525,8549,8607,9051,10182,10304,10324,10350,10495,11065,13204,13207,13424,13439,13450,13678,13679,13932,13940,14009,21050,21064,21097,21098,21115,21127],"fullWord":13679},{"subwords":[8970,8982,8987,9002,10957,10995,11000,11069,12079,13680,13988,13998,14009,19624,21224],"fullWord":13680},{"subwords":[3272,3319,3321,4046,4048,4237,8612,8664,8671,8678,9101,13651,13681,13682,13702,13841,14421,14423,16178,16639,16758,16769,16883,17550,17560,17697,21146,21152],"fullWord":13682},{"subwords":[8664,8671,8678,8681,13651,13681,13683,13841,13844,14421,16639,16640,16758,16883,16888,16903,17697,21146,21152],"fullWord":13683},{"subwords":[2869,2921,3402,4046,9207,9208,12257,12453,13154,13193,13239,13255,13684,13688,13765],"fullWord":13684},{"subwords":[647,691,961,9307,9360,9366,9374,12257,12269,12453,12459,12560,12936,13193,13196,13239,13259,13336,13343,13685,13686,13765,13798,13809,13811,13839,14032,14112,14421,15986,16014,16858,16883,17220,17248,17298,17383,17406,17476,17486,17490,17580],"fullWord":13686},{"subwords":[732,5956,13439,13687,13705,13881,21238,21282],"fullWord":13687},{"subwords":[349,796,809,2803,2921,2941,2987,2994,3402,3403,3693,3864,3881,3923,4046,4077,4188,9376,12680,12965,12966,13154,13200,13286,13688,13689,14032,14350,14356,14851,15508,15592],"fullWord":13689},{"subwords":[2921,3402,4046,9932,13154,13162,13422,13688,13691,13692,13874],"fullWord":13692},{"subwords":[4046,4639,4651,4714,4909,4917,4935,4957,5014,5959,9079,9082,9846,9885,9932,13472,13478,13691,13693,13705,13710,13732,13733],"fullWord":13693},{"subwords":[4046,5959,9079,9094,9384,9396,9846,9932,13472,13577,13590,13691,13694,13705,13712,13732,13734,14262,14294,14299,15021,15248,15411,15422,15508,15509],"fullWord":13694},{"subwords":[3429,3430,4046,5959,6057,9079,9846,9848,9932,9946,9947,13438,13472,13613,13691,13695,13705,13732,13850,18823,18824,18844,18861,18926,19196],"fullWord":13695},{"subwords":[3120,3529,4046,4047,5778,5959,9079,9150,9830,9846,9932,10414,10416,10518,10525,10536,10566,10665,13472,13691,13696,13705,13732,13743],"fullWord":13696},{"subwords":[4046,4049,4302,9932,13691,13698,13813,14435,14506],"fullWord":13698},{"subwords":[3429,3864,3883,3958,3965,3971,4046,4048,4237,4238,4241,9374,9447,12936,12937,12939,12940,12944,13038,13438,13700,13701,13702,13850,13866,14032,14177,14182,14188,14201,14421,14427,16178,16194,16205,16769,16883,16907,17316,17406,17435,17550,17598,17644,17897,17921,18823,18830,18926,18936,18947,19075,19083,19084,19090,19386],"fullWord":13701},{"subwords":[4714,4728,4739,4928,4935,4936,5014,5756,9117,9118,10378,10414,10530,10536,10537,10665,13478,13703,13705,13710,13743,13744,13950,13958],"fullWord":13703},{"subwords":[4947,4985,4993,5014,7604,7612,12453,13704,13721,13765,13773],"fullWord":13704},{"subwords":[3113,4046,4639,4673,4714,4715,4909,4935,5014,5959,9079,9082,9108,13478,13489,13490,13705,13706,13707,13710],"fullWord":13707},{"subwords":[4046,4120,4127,4135,5735,5959,5984,5995,9079,9384,13489,13506,13577,13583,13705,13706,13708,13712,13713,14262,14294,15021,15033,15248,15411,15508,15509],"fullWord":13708},{"subwords":[3119,4046,4048,4237,5959,5961,6023,6033,9079,9085,13489,13510,13702,13705,13706,13709,13716,14421,16178,16298,16319,16336,16769,16883,17525,17526,17550,17553],"fullWord":13709},{"subwords":[7493,7505,7604,7612,12453,13516,13539,13705,13711,13721,13765,13769,13773],"fullWord":13711},{"subwords":[4046,4120,4127,4135,5735,5959,5984,5995,9079,9384,13489,13506,13577,13583,13705,13706,13708,13712,13713,14262,14294,15021,15033,15248,15411,15508,15509],"fullWord":13713},{"subwords":[5735,5984,5995,6008,9384,13489,13506,13577,13583,13705,13712,13714,14262,14307,15248,15508,15509,15513],"fullWord":13714},{"subwords":[732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,9447,13336,13352,13355,13364,13367,13374,13385,13439,13461,13464,13465,13609,13613,13626,13705,13716,13717,13718,13839,13850,13851,13852,13866,14421,14427,16014,16041,16043,16270,16293,16405,16409,16410,16457,16883,16907,16911,17476,17510,17511,17598,17600,17836,18347,18436,18437,18441,18448,18541,18559,18844,18850,18926,18936,18947,19386],"fullWord":13718},{"subwords":[5765,6543,6544,6553,6568,6777,10414,10536,10539,10554,10665,13530,13705,13720,13743],"fullWord":13720},{"subwords":[5718,5953,5962,7493,7604,7612,7815,9360,12453,12509,12547,12876,12916,12918,12927,13516,13539,13564,13705,13721,13722,13765,13769,13773,13809,14032,14105,14107],"fullWord":13722},{"subwords":[4714,4935,4947,5014,5709,7578,7612,13478,13516,13705,13710,13721,13723],"fullWord":13723},{"subwords":[5709,7578,7612,13516,13705,13721,13724],"fullWord":13724},{"subwords":[7578,7604,7612,12453,13721,13725,13765,13773],"fullWord":13725},{"subwords":[7477,7487,7540,7596,7612,7637,10398,10408,10414,10460,10536,10665,10691,10694,13516,13532,13613,13705,13721,13726,13743,13850,18844,18863,18866,18926],"fullWord":13726},{"subwords":[7493,7512,7540,7604,7612,7637,9244,9325,12374,12453,12463,13516,13539,13560,13613,13705,13721,13727,13765,13769,13773,13799,13850,18607,18844,18894,18898,18901,18902,18926],"fullWord":13727},{"subwords":[7604,7612,7637,7759,8151,8175,9303,9325,12453,12463,12659,13721,13728,13765,13773,13799,13850,14449,14484,14501,14561,18894,18901,18926,19418,19434,19453,19701],"fullWord":13728},{"subwords":[7493,7604,7612,12453,13516,13539,13569,13705,13721,13729,13765,13769,13773,13813,13815],"fullWord":13729},{"subwords":[7612,7615,7616,7635,7637,8188,8191,9447,13721,13730,13731,13850,13866,13870,14421,14427,16883,16907,17598,17697,18018,18926,18936,18937,18947,19386,21146,21152],"fullWord":13731},{"subwords":[6033,9384,9389,9396,9399,9409,9846,9847,9932,9934,10041,13577,13588,13590,13592,13705,13712,13715,13716,13732,13734,13735,13736,14262,14281,14309,14336,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15534,16883,16889,16890,16954,16960,16979,17565,17571,17573,17591,17722],"fullWord":13735},{"subwords":[7604,7612,9276,9913,9922,9932,12453,13721,13737,13765,13773,13780,13884],"fullWord":13737},{"subwords":[337,481,6246,6707,6777,10182,10665,13191,13204,13738,13739],"fullWord":13739},{"subwords":[337,340,481,486,961,6246,6249,6707,6709,6777,6778,7024,9135,10182,10188,10194,10665,10672,10681,13191,13192,13204,13232,13336,13738,13740,13839,14418,14421,15931,15942,16014,16883,17019,17088,17476],"fullWord":13740},{"subwords":[337,399,434,481,488,732,781,1009,5620,5956,6055,9437,10126,10182,10247,10324,10350,10354,10414,10460,10536,10665,10691,10694,13191,13204,13207,13364,13367,13439,13450,13464,13532,13613,13614,13705,13717,13742,13743,13850,13851,13902,13922,13923,13940,13945,18347,18349,18370,18436,18437,18541,18547,18844,18863,18866,18926],"fullWord":13742},{"subwords":[10414,10470,10536,10552,10665,13569,13705,13743,13746,13813,13815,14454,14465,14506,14512],"fullWord":13746},{"subwords":[5765,6543,6568,6570,6621,6622,6765,6777,9384,10414,10536,10539,10549,10554,10555,10665,10677,13530,13577,13585,13705,13712,13743,13747,13959,14262,15114,15248,15444,15446,15454,15473,15508,15509],"fullWord":13747},{"subwords":[7604,7612,10637,10665,12438,12453,13721,13748,13765,13773],"fullWord":13748},{"subwords":[337,349,442,481,776,9152,9376,10121,10182,10502,10665,10675,13191,13200,13204,13217,13286,13741,13749,13750,14780,14851,15399,15477,15508],"fullWord":13750},{"subwords":[4714,4728,4739,4744,4935,4967,5014,5756,5780,9117,9152,10378,10414,10530,10536,10537,10665,13478,13705,13710,13743,13744,13749,13751,13950,13958],"fullWord":13751},{"subwords":[9152,10665,10864,10942,12812,13114,13749,13752,13977,14032,14056,14080,14229,20761,20927],"fullWord":13752},{"subwords":[6033,9374,9416,10414,10415,10443,10447,10536,10551,10665,10672,10681,10864,10865,10869,10874,10888,12812,12822,12845,12848,12916,12925,12936,13607,13705,13716,13743,13745,13754,13961,14032,14039,14056,14061,14066,14072,14087,14166,14421,16837,16883,17088,17097,17104,17105,17350,17354,17359,17364,17406,17563,17617],"fullWord":13754},{"subwords":[9374,9447,10665,10672,10681,10686,10691,10707,10864,10874,10896,10897,10901,12812,12822,12936,12937,12944,13755,13756,13848,13850,13866,13973,13974,14032,14056,14072,14074,14087,14177,14182,14188,14201,14421,14427,16837,16840,16883,16907,17088,17091,17093,17104,17113,17350,17354,17364,17406,17435,17578,17598,17614,17617,17619,17644,17921,18863,18926,18936,18947,19002,19006,19075,19090,19386],"fullWord":13756},{"subwords":[9369,9374,10665,10672,10681,10864,10874,10913,10917,10921,12812,12822,12936,12945,13048,13757,13812,13871,14003,14032,14033,14034,14056,14072,14087,14421,14551,16837,16883,17088,17104,17350,17354,17364,17406,17442,17447,17617,18083,18135,19825],"fullWord":13757},{"subwords":[4714,4935,4938,4971,4972,5014,9109,9178,9184,11626,13478,13569,13705,13710,13760,13761,13813,13815,13816,14237],"fullWord":13761},{"subwords":[5782,9178,9186,10414,10536,10584,10595,10611,10665,10957,11659,11668,13569,13705,13743,13760,13762,13813,13815],"fullWord":13762},{"subwords":[9178,9192,10584,10611,10618,10665,10671,10957,11659,13760,13763,13813,13829,14009,21146],"fullWord":13763},{"subwords":[596,693,700,745,781,9203,9325,12257,12453,12463,13193,13197,13239,13261,13364,13378,13765,13766,13799,13800,13850,13851,18347,18408,18436,18894,18926],"fullWord":13766},{"subwords":[3413,4046,5856,5959,5996,9079,9207,9384,12410,12412,12453,13539,13577,13705,13712,13765,13767,13769,14262,14294,14328,15021,15175,15248,15262,15411,15508,15509,15511],"fullWord":13767},{"subwords":[337,399,423,430,481,485,637,732,5745,5956,10120,10174,10182,10187,10324,10344,10350,10414,10536,10544,10625,10665,12229,12238,12257,12259,12317,12356,12438,12439,12453,13191,13193,13194,13204,13207,13239,13245,13247,13439,13450,13453,13539,13540,13705,13743,13765,13769,13770,13899,13904,13906,13940,13952],"fullWord":13770},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5014,5865,7493,7604,7612,12453,13478,13516,13539,13544,13705,13710,13721,13765,13769,13771,13773,13774],"fullWord":13774},{"subwords":[5894,5988,5996,7493,7604,7612,8015,8022,8023,9384,12453,13516,13539,13577,13705,13712,13721,13765,13769,13773,13775,14262,14311,15141,15173,15175,15234,15248,15262,15461,15494,15508,15509,15511],"fullWord":13775},{"subwords":[5996,9384,12453,13539,13577,13705,13712,13765,13769,13777,14262,15175,15248,15262,15508,15509,15511],"fullWord":13777},{"subwords":[7604,7612,9297,12453,13721,13765,13773,13778],"fullWord":13778},{"subwords":[9297,9360,12453,12528,13765,13779,13796,13809,14032],"fullWord":13779},{"subwords":[4714,4774,4935,4957,4985,4988,5014,5865,9276,9277,9836,9846,9885,9913,9914,9919,9932,12453,13478,13524,13539,13544,13705,13710,13732,13733,13765,13769,13771,13780,13781],"fullWord":13781},{"subwords":[5996,9276,9278,9384,9396,9836,9846,9855,9913,9919,9932,12453,13524,13539,13577,13590,13705,13712,13732,13734,13765,13769,13780,13782,14262,14329,15175,15248,15262,15498,15508,15509,15511],"fullWord":13782},{"subwords":[9276,9836,9846,9913,9919,9932,12453,13524,13539,13705,13732,13765,13769,13780,13783],"fullWord":13783},{"subwords":[9150,9276,9285,9293,9902,9913,9932,10645,10650,10662,10665,12438,12453,13765,13780,13784,13788,13807,13963,14009,21144,21146],"fullWord":13784},{"subwords":[9142,9143,9276,9284,9307,9360,9366,9374,9913,9929,9932,9934,12453,12459,12560,12825,12827,12936,13765,13780,13785,13786,13787,13798,13809,13811,14032,14112,14421,16858,16876,16883,16954,16974,16979,17248,17383,17406,17580],"fullWord":13786},{"subwords":[657,663,665,732,5956,9200,9297,12229,12252,12257,12259,12317,12448,12453,13193,13194,13239,13245,13439,13453,13539,13551,13705,13765,13769,13789,13790],"fullWord":13790},{"subwords":[337,481,657,9297,10120,10182,10187,10665,12238,12252,12257,12438,12453,13191,13193,13204,13239,13765,13789,13791,13899,13904],"fullWord":13791},{"subwords":[647,657,691,961,9297,9302,9307,12252,12257,12269,12453,12459,13193,13196,13239,13259,13336,13765,13789,13792,13798,13839,14421,15986,16014,16858,16883,17220,17248,17476,17486,17490,17580],"fullWord":13792},{"subwords":[4714,4774,4935,4985,4988,5014,5865,9297,9299,12448,12453,13478,13539,13544,13705,13710,13765,13769,13771,13793],"fullWord":13793},{"subwords":[5996,9297,9300,9384,12448,12453,13539,13577,13705,13712,13765,13769,13794,14262,15175,15248,15262,15508,15509,15511],"fullWord":13794},{"subwords":[5953,9360,10414,10443,10444,10536,10544,10625,10652,10663,10665,10814,10822,10864,10865,12438,12439,12453,12504,12547,12812,12845,12876,12916,12918,12927,13539,13564,13705,13743,13765,13769,13795,13809,14032,14056,14061,14105],"fullWord":13795},{"subwords":[9297,9302,9307,9360,9366,9374,12453,12459,12528,12560,12936,13765,13796,13797,13798,13809,13811,14032,14112,14421,16858,16883,17248,17383,17406,17580],"fullWord":13797},{"subwords":[647,691,693,700,704,711,781,961,9203,9307,9318,9325,9447,12257,12269,12453,12459,12463,12471,13193,13196,13197,13198,13239,13259,13261,13265,13336,13352,13364,13385,13765,13798,13799,13800,13801,13804,13839,13850,13851,13852,13866,14421,14427,15936,15986,16014,16041,16047,16858,16883,16907,17220,17248,17255,17476,17486,17490,17510,17580,17598,17742,18347,18408,18428,18436,18448,18894,18919,18926,18936,18947,19386],"fullWord":13801},{"subwords":[9307,9318,9325,9335,9360,9366,9374,9447,12453,12459,12463,12471,12560,12574,12591,12936,12937,12944,13765,13798,13799,13802,13803,13804,13809,13811,13849,13850,13864,13865,13866,14032,14035,14037,14112,14177,14182,14188,14201,14421,14427,16858,16883,16907,17248,17255,17278,17383,17406,17435,17580,17598,17644,17921,18894,18919,18926,18936,18947,19036,19057,19075,19090,19386],"fullWord":13803},{"subwords":[9307,12453,12459,13765,13798,13805,13806,13813,13828,13871,14421,14484,14500,14506,14515,14551,16858,16883,17248,17580,17683,18083,18117,18135,19825],"fullWord":13806},{"subwords":[9297,9360,12453,12528,13765,13796,13807,13808,13809,14032,14115,21144,21146,21183,21186],"fullWord":13808},{"subwords":[3689,3777,3864,4046,9097,9207,9360,9361,12453,13765,13809,13810,14032],"fullWord":13810},{"subwords":[269,732,762,5956,7365,7366,7612,13184,13268,13439,13516,13569,13705,13721,13813,13814,13815],"fullWord":13814},{"subwords":[6033,9384,9389,9409,13569,13573,13574,13577,13588,13705,13712,13715,13716,13813,13815,13817,13818,13819,13828,14262,14278,14280,14281,14309,14336,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,16883,16886,16889,16890,17565,17591,17722],"fullWord":13818},{"subwords":[6033,9447,13569,13573,13574,13609,13613,13626,13705,13716,13813,13815,13819,13820,13821,13828,13850,13866,14421,14427,16409,16457,16883,16907,16911,17598,17600,17836,18844,18850,18926,18936,18947,19386],"fullWord":13821},{"subwords":[9384,13569,13577,13705,13712,13813,13815,13817,13822,14262,14278,15248,15508,15509],"fullWord":13822},{"subwords":[7604,7612,12453,13721,13765,13773,13813,13823],"fullWord":13823},{"subwords":[9447,13813,13824,13825,13828,13850,13866,14421,14427,16883,16907,17598,18926,18928,18929,18936,18947,19386],"fullWord":13825},{"subwords":[9276,9913,9932,12453,13765,13780,13813,13826],"fullWord":13826},{"subwords":[4714,4935,5014,13478,13569,13705,13710,13813,13815,13816,13827,14237],"fullWord":13827},{"subwords":[4714,4935,5014,5471,5525,5526,5973,9449,13478,13705,13710,13830,13831,14438,14586,14635,14659,14664,14678],"fullWord":13831},{"subwords":[5973,5974,6033,9375,13705,13716,13830,13832,13871,14421,14551,14635,14650,14659,14678,14679,16416,16883,18066,18083,18135,18136,19825,19876],"fullWord":13832},{"subwords":[5973,13613,13705,13830,13833,13850,14561,14635,14659,14666,14678,14689,14690,18844,18926,19453],"fullWord":13833},{"subwords":[349,361,796,2921,2941,2987,2994,3100,3402,4046,4077,4232,9101,9376,13154,13200,13286,13424,13688,13834,14258,14302,14410,14578,14735,14851,14939,15508,15864,21064,21146],"fullWord":13834},{"subwords":[349,596,745,852,9376,9378,12257,12453,13193,13200,13239,13286,13287,13765,13835,14242,14784,14821,14838,14851,15508],"fullWord":13835},{"subwords":[349,732,735,781,782,817,911,1009,1032,5588,5620,5956,5976,5982,6055,9376,9382,9384,13200,13286,13294,13328,13329,13331,13364,13367,13372,13439,13455,13460,13464,13577,13599,13613,13623,13705,13712,13717,13836,13850,13851,14247,14248,14262,14851,14852,14867,14898,14901,14979,15248,15312,15508,15509,15542,15748,18347,18436,18437,18439,18443,18449,18453,18467,18541,18554,18844,18847,18926,18941,19221,19295,19296],"fullWord":13836},{"subwords":[7612,8022,12995,13721,13837,13838,14032,14311,14350,15461,15508],"fullWord":13838},{"subwords":[3165,4046,4048,4237,5959,5961,6023,6033,6039,9079,9085,13702,13705,13716,13840,13844,14421,16178,16298,16303,16769,16779,16883,16888,16903,17525,17529,17550,17553,17556,17559,17567],"fullWord":13840},{"subwords":[4714,4826,4935,4939,5014,5021,5037,5046,6033,8549,8617,8619,8623,8625,8626,8628,8664,8671,8678,9111,9127,13478,13488,13651,13705,13710,13716,13841,13842,14421,16574,16581,16615,16639,16780,16883,17530,17562],"fullWord":13842},{"subwords":[6033,6039,8549,8625,8628,8664,8671,8678,8681,13651,13705,13716,13841,13843,13844,14421,16574,16609,16619,16639,16640,16883,16888,16903,17567],"fullWord":13843},{"subwords":[4714,4826,4935,4939,5014,5021,5037,6033,6039,9111,9127,13478,13488,13705,13710,13716,13844,13845,14421,16780,16782,16883,16888,16903,17530,17562,17567],"fullWord":13845},{"subwords":[6033,6039,13705,13716,13844,13846,14421,16408,16883,16888,16903,17567],"fullWord":13846},{"subwords":[9447,10665,10672,10681,10686,10691,10707,13847,13850,13866,14421,14427,16840,16883,16907,17088,17091,17093,17578,17598,17614,18863,18926,18928,18929,18936,18947,19386],"fullWord":13847},{"subwords":[9374,9447,10665,10672,10681,10686,10691,10707,10864,10874,10896,10897,10901,12812,12822,12936,12937,12944,13755,13756,13848,13850,13866,13973,13974,14032,14056,14072,14074,14087,14177,14182,14188,14201,14421,14427,16837,16840,16883,16907,17088,17091,17093,17104,17113,17350,17354,17364,17406,17435,17578,17598,17614,17617,17619,17644,17921,18863,18926,18936,18947,19002,19006,19075,19090,19386],"fullWord":13848},{"subwords":[9307,9318,9325,9335,9360,9366,9374,9447,12453,12459,12463,12471,12560,12574,12591,12936,12937,12944,13765,13798,13799,13802,13803,13804,13809,13811,13849,13850,13864,13865,13866,14032,14035,14037,14112,14177,14182,14188,14201,14421,14427,16858,16883,16907,17248,17255,17278,17383,17406,17435,17580,17598,17644,17921,18894,18919,18926,18936,18947,19036,19057,19075,19090,19386],"fullWord":13849},{"subwords":[3272,3319,3328,3429,3440,4046,8612,8664,8688,9101,9440,9443,13438,13651,13850,13853,13854,13855,13858,13870,18806,18823,18926,19563,21146],"fullWord":13854},{"subwords":[4714,4805,4806,4935,4942,5014,5022,5680,5682,8549,8617,8619,8625,8626,8664,8688,13478,13613,13651,13705,13710,13850,13855,13856,18641,18697,18835,18844,18845,18926],"fullWord":13856},{"subwords":[4714,4805,4935,4942,5014,5022,5680,13478,13613,13705,13710,13850,13859,18641,18835,18844,18845,18926,18928],"fullWord":13859},{"subwords":[9384,13577,13599,13613,13623,13705,13712,13850,13860,14262,15248,15312,15508,15509,15542,15748,18844,18847,18926,18928,18941,19295,19296],"fullWord":13860},{"subwords":[6033,9447,13609,13613,13626,13705,13716,13850,13861,13866,14421,14427,16409,16457,16883,16907,16911,17598,17600,17836,18844,18850,18926,18928,18929,18936,18947,19386],"fullWord":13861},{"subwords":[341,574,693,700,781,9178,9203,9325,11156,11213,11270,11361,11371,11697,11729,12244,12257,12443,12453,12463,13193,13197,13239,13261,13364,13758,13765,13799,13800,13850,13851,13862,18347,18389,18402,18408,18436,18882,18894,18926],"fullWord":13862},{"subwords":[5832,9178,9244,9325,9444,11489,11512,11574,11645,11697,11706,11729,11786,12374,12443,12453,12463,13539,13560,13613,13705,13765,13769,13799,13850,13863,18595,18596,18599,18607,18844,18882,18886,18894,18898,18926],"fullWord":13863},{"subwords":[9307,9318,9325,9335,9360,9366,9374,9447,12453,12459,12463,12471,12560,12574,12591,12936,12937,12944,13765,13798,13799,13802,13803,13804,13809,13811,13849,13850,13864,13865,13866,14032,14035,14037,14112,14177,14182,14188,14201,14421,14427,16858,16883,16907,17248,17255,17278,17383,17406,17435,17580,17598,17644,17921,18894,18919,18926,18936,18947,19036,19057,19075,19090,19386],"fullWord":13865},{"subwords":[781,961,9447,13336,13352,13364,13385,13408,13421,13839,13850,13851,13852,13866,13867,14421,14427,16014,16041,16089,16883,16907,17476,17510,17598,18201,18211,18347,18436,18448,18521,18527,18926,18936,18947,19386,19508,20351,20353,20356,20449,20454,20457,20467,20838,20842,20853],"fullWord":13867},{"subwords":[4714,4805,4935,4942,5014,5022,5680,13478,13613,13619,13705,13710,13850,13868,18641,18835,18844,18845,18926,18950],"fullWord":13868},{"subwords":[9384,13577,13599,13613,13619,13623,13705,13712,13850,13869,14262,15248,15312,15508,15509,15542,15748,18844,18847,18926,18941,18950,18953,18963,19295,19296,19303],"fullWord":13869},{"subwords":[9374,9447,12936,12937,12944,13850,13866,13872,13873,14032,14177,14182,14188,14201,14421,14427,16883,16907,17406,17435,17598,17644,17921,18926,18936,18947,19075,19090,19165,19386,20177,20180],"fullWord":13873},{"subwords":[6033,9416,10414,10415,10494,10536,10551,10665,10672,10681,13705,13716,13743,13745,13874,13875,13876,13877,13961,14421,16483,16827,16883,16922,17088,17563],"fullWord":13876},{"subwords":[6033,13705,13716,13874,13877,13878,13879,14421,16483,16883,16922,21024],"fullWord":13879},{"subwords":[961,13336,13839,13881,13882,14421,16014,16883,17476,21238,21240,21282,21285],"fullWord":13882},{"subwords":[10414,10536,10665,13705,13743,13883,21282],"fullWord":13883},{"subwords":[93,94,399,481,732,733,2766,2813,2921,2922,2923,3447,3465,4047,4431,4466,4601,4639,4641,4728,5756,5956,10072,10073,10074,10090,10093,10182,10324,10327,10350,10378,13154,13155,13156,13171,13204,13207,13208,13439,13450,13478,13479,13885,13886,13940,13941,13950],"fullWord":13886},{"subwords":[93,121,399,481,732,735,796,817,2813,2921,2922,2924,2941,2954,2971,2987,2989,2991,3465,3493,4047,4077,4078,5588,5592,5956,5976,10072,10073,10075,10182,10324,10350,10355,13154,13155,13157,13204,13207,13210,13286,13290,13294,13439,13450,13455,13456,13577,13885,13887,13940,14262,14717,14851,14852,14968,14979,15021,15025,15248],"fullWord":13887},{"subwords":[93,96,399,400,407,481,486,732,739,779,961,2813,2921,2922,2926,2938,3021,3465,3466,3473,4047,4048,4237,5956,6023,6033,10072,10073,10077,10182,10194,10195,10324,10350,10353,10360,13154,13155,13159,13167,13204,13207,13211,13232,13336,13439,13450,13452,13461,13885,13888,13940,13943,15880,15942,15948,16014,16121,16126,16139,16270,16274,16298,16403,17019,17476,17477,17488,17525],"fullWord":13888},{"subwords":[106,326,337,481,2766,2813,2921,3402,3447,3465,3529,4046,4047,4891,5014,10072,10090,10119,10182,10530,10665,13154,13171,13190,13191,13204,13688,13889,13897],"fullWord":13889},{"subwords":[481,486,950,961,2813,2822,2825,2921,2938,3033,3465,3466,3473,4047,4048,4237,10072,10082,10086,10182,10194,13154,13162,13166,13167,13204,13232,13336,13890,13891,15880,15884,15942,16014,16126,17001,17019,17476],"fullWord":13891},{"subwords":[411,413,442,481,7293,7294,7301,7365,10109,10182,13204,13217,13892],"fullWord":13892},{"subwords":[269,280,399,407,481,486,732,739,779,961,5956,6033,7260,7293,7298,7300,7316,7365,7366,7370,7373,7396,7408,7477,7486,10109,10115,10182,10194,10195,10324,10350,10353,10360,10398,10412,13184,13187,13204,13207,13211,13232,13336,13439,13450,13452,13461,13516,13519,13893,13940,13943,15910,15912,15942,15948,16014,16270,16274,16403,17003,17019,17476,17488],"fullWord":13893},{"subwords":[269,315,399,481,732,5627,5956,7293,7298,7365,7366,7477,7722,8141,10109,10182,10324,10350,10398,10470,10981,10982,13184,13204,13207,13391,13439,13450,13516,13894,13940,13987,14449,14454],"fullWord":13894},{"subwords":[481,7293,7365,7374,7447,8141,8144,8180,8188,10109,10182,10304,10981,13204,13391,13424,13895,13932,13987,14009,14449,19590,21064,21224],"fullWord":13895},{"subwords":[93,337,399,422,481,732,2813,2921,2922,3120,3402,3465,3529,4046,4047,5956,5959,5960,9079,10072,10073,10182,10324,10350,10414,10518,10536,10665,13154,13155,13191,13204,13207,13439,13450,13688,13705,13743,13885,13896,13940],"fullWord":13896},{"subwords":[200,326,336,337,340,481,486,961,4461,4891,4895,4901,5014,5021,5037,9127,10090,10107,10119,10182,10188,10194,10530,10535,10665,10672,10681,13171,13177,13190,13191,13192,13204,13232,13336,13839,13897,13898,14421,15893,15928,15931,15942,16014,16015,16883,17019,17068,17088,17476],"fullWord":13898},{"subwords":[337,340,481,486,639,647,691,961,9307,10120,10182,10187,10188,10194,10654,10665,10672,10681,12238,12241,12257,12269,12438,12442,12453,12459,13191,13192,13193,13196,13204,13232,13239,13259,13336,13765,13798,13839,13899,13900,13904,13913,14421,15931,15942,15986,16014,16858,16883,17006,17019,17088,17214,17220,17248,17476,17486,17490,17580,17581],"fullWord":13900},{"subwords":[337,434,481,488,693,700,781,9203,9325,9334,9437,10120,10126,10182,10187,10263,10656,10665,10691,12238,12257,12292,12438,12453,12463,13191,13193,13197,13204,13239,13261,13364,13765,13799,13800,13850,13851,13899,13901,13902,13904,13914,13922,13957,18347,18349,18408,18436,18863,18894,18926],"fullWord":13901},{"subwords":[337,340,434,481,486,488,781,961,9437,9447,10126,10182,10188,10194,10241,10665,10672,10681,10686,10691,10707,13191,13192,13204,13232,13336,13352,13364,13385,13839,13850,13851,13852,13866,13902,13903,13922,13929,14421,14427,15931,15942,15960,16014,16041,16840,16883,16907,17019,17022,17088,17091,17093,17476,17510,17578,17598,17599,17605,17614,18347,18349,18353,18436,18448,18863,18926,18936,18947,19386],"fullWord":13903},{"subwords":[375,377,481,596,598,10182,12257,13204,13239,13286,13287,13904,13905,14242,14821,14851],"fullWord":13905},{"subwords":[399,481,605,732,733,4466,4492,4500,4601,4605,4728,4774,5745,5746,5756,5865,5956,10090,10093,10095,10169,10174,10182,10324,10327,10344,10350,10378,10427,12229,12257,12259,12317,12356,13171,13204,13207,13208,13239,13245,13246,13247,13439,13450,13453,13478,13479,13539,13540,13544,13904,13906,13907,13940,13941,13950,13952],"fullWord":13907},{"subwords":[399,481,732,735,817,5588,5592,5595,5745,5956,5976,10174,10182,10324,10344,10350,10355,10356,12229,12257,12259,12317,12319,12356,13204,13207,13210,13239,13245,13247,13286,13294,13439,13450,13453,13455,13456,13539,13540,13577,13904,13906,13908,13940,13952,14262,14821,14851,14852,14968,14979,15225,15248,15265],"fullWord":13908},{"subwords":[399,407,481,486,732,739,779,961,964,5745,5748,5918,5956,6033,10174,10175,10182,10194,10195,10324,10344,10348,10350,10353,10360,10433,12229,12257,12259,12261,12263,12269,12317,12318,12356,13204,13207,13211,13232,13239,13245,13247,13248,13249,13259,13336,13439,13450,13452,13453,13461,13539,13540,13558,13904,13906,13909,13913,13940,13943,13952,15942,15948,15986,15995,16014,16270,16274,16403,17019,17220,17476,17488,17490],"fullWord":13909},{"subwords":[399,481,488,693,694,732,781,1009,5620,5745,5956,6055,6074,10174,10182,10247,10251,10324,10344,10349,10350,10354,10437,10460,12229,12257,12259,12292,12317,12325,12356,12374,13204,13207,13239,13245,13247,13261,13364,13367,13369,13439,13450,13453,13464,13532,13539,13540,13560,13613,13614,13904,13906,13910,13914,13922,13923,13925,13940,13945,13952,18370,18408,18436,18437,18541,18547,18607],"fullWord":13910},{"subwords":[481,486,950,961,9959,9965,10177,10182,10194,12257,12269,13204,13232,13239,13259,13336,13904,13911,13912,13913,15942,15986,16007,16014,17019,17220,17476,17490,17491],"fullWord":13912},{"subwords":[481,486,488,693,711,781,961,10182,10194,10241,12257,12269,12292,13204,13232,13239,13259,13261,13265,13336,13352,13364,13385,13904,13913,13914,13915,13922,13929,14427,15942,15960,15986,16014,16041,17017,17019,17022,17220,17476,17490,17510,17605,18408,18428,18436,18448,19386],"fullWord":13915},{"subwords":[399,481,732,5627,5956,5970,10182,10324,10350,10470,13204,13207,13391,13439,13450,13916,13940,14454,14589,14595,14609,14610,14635],"fullWord":13916},{"subwords":[325,481,486,932,944,961,8321,8322,8324,8362,8367,8420,8428,10182,10194,10231,10304,10313,13204,13232,13233,13336,13424,13436,13678,13681,13917,13918,13932,13937,14009,15942,16014,16103,16530,16572,16758,17019,17039,17149,17476,17518,17607,17697,18276,21064,21067],"fullWord":13918},{"subwords":[382,466,470,481,486,504,574,579,925,961,10136,10137,10138,10158,10160,10161,10182,10194,10957,11173,11174,11270,11275,11330,13204,13224,13227,13232,13336,13919,13920,14414,15942,15973,16014,17012,17019,17476],"fullWord":13920},{"subwords":[470,481,486,574,579,961,972,973,10136,10158,10160,10161,10182,10194,10236,10957,11173,11270,11275,11330,11348,12082,13204,13224,13227,13232,13336,13344,13919,13921,14414,14415,15942,15973,16014,16020,17012,17013,17019,17020,17476,17507,17508],"fullWord":13921},{"subwords":[161,399,481,488,732,733,781,1009,4466,4551,4601,4604,4728,4747,4805,5620,5756,5956,6055,10090,10093,10182,10247,10248,10324,10327,10350,10354,10378,10460,13171,13204,13207,13208,13364,13367,13368,13439,13450,13464,13478,13479,13532,13613,13614,13922,13923,13924,13940,13941,13945,13950,18339,18370,18436,18437,18438,18541,18547],"fullWord":13924},{"subwords":[399,481,488,693,694,732,781,1009,5620,5745,5956,6055,6074,10174,10182,10247,10251,10324,10344,10349,10350,10354,10437,10460,12229,12257,12259,12292,12317,12325,12356,12374,13204,13207,13239,13245,13247,13261,13364,13367,13369,13439,13450,13453,13464,13532,13539,13540,13560,13613,13614,13904,13906,13910,13914,13922,13923,13925,13940,13945,13952,18370,18408,18436,18437,18541,18547,18607],"fullWord":13925},{"subwords":[399,405,481,488,491,732,735,781,782,817,911,1009,5588,5592,5620,5956,5976,5982,6055,10182,10247,10254,10324,10350,10354,10355,10460,13204,13207,13210,13234,13286,13294,13328,13329,13364,13367,13372,13439,13450,13455,13456,13460,13464,13532,13577,13599,13613,13614,13922,13923,13926,13940,13945,14247,14248,14262,14851,14852,14867,14898,14901,14968,14979,15248,15312,15748,18370,18372,18436,18437,18439,18449,18453,18467,18541,18547,18554,19221],"fullWord":13926},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13927},{"subwords":[481,486,488,781,784,961,10182,10194,10241,10304,10313,13204,13232,13233,13336,13352,13363,13364,13381,13385,13386,13424,13436,13922,13929,13930,13931,13932,13937,14009,14427,15942,15960,15964,16014,16041,16103,17019,17022,17028,17039,17149,17476,17510,17518,17605,17607,17697,17802,18018,18436,18448,19386,19558,21064,21067],"fullWord":13931},{"subwords":[382,481,486,925,961,1004,10182,10194,10304,10313,13204,13232,13233,13336,13424,13436,13932,13933,13934,13937,14009,15942,16014,16103,17019,17039,17149,17476,17518,17607,17697,21064,21067],"fullWord":13934},{"subwords":[399,481,732,733,1196,4466,4578,4601,4728,4729,5567,5756,5956,10090,10093,10108,10182,10304,10305,10324,10327,10332,10350,10378,10495,11065,13171,13204,13207,13208,13424,13425,13439,13450,13478,13479,13932,13935,13940,13941,13950,14009,21050,21064,21097,21115,21127],"fullWord":13935},{"subwords":[227,399,481,732,735,738,817,1196,5588,5592,5594,5956,5976,10182,10304,10306,10324,10350,10355,10359,10495,11065,11074,13204,13207,13210,13286,13294,13313,13424,13428,13439,13450,13455,13456,13458,13577,13932,13936,13940,14009,14010,14258,14262,14290,14410,14576,14851,14852,14939,14968,14979,15183,15201,15248,15255,15266,15267,15864,15866,21050,21064,21071,21097,21099,21115,21127],"fullWord":13936},{"subwords":[382,481,486,925,961,10182,10194,13204,13232,13336,13938,13939,15942,16014,17019,17476,21238,21240],"fullWord":13939},{"subwords":[200,399,407,481,486,732,733,739,779,961,4466,4467,4601,4603,4728,4826,5756,5760,5956,6033,10090,10093,10099,10107,10182,10194,10195,10196,10227,10324,10327,10331,10350,10353,10360,10378,13171,13177,13204,13207,13208,13211,13232,13336,13439,13450,13452,13461,13478,13479,13480,13488,13940,13941,13942,13943,13950,15893,15942,15948,16014,16270,16274,16403,17019,17044,17476,17481,17488,17530],"fullWord":13942},{"subwords":[399,401,407,481,486,732,739,779,959,961,5605,5607,5691,5693,5749,5790,5956,6033,10182,10194,10195,10324,10350,10353,10360,10361,10383,10392,10451,13204,13207,13211,13232,13336,13439,13450,13452,13461,13462,13489,13495,13498,13510,13940,13943,13944,15942,15948,16014,16270,16274,16319,16336,16403,17019,17049,17476,17488],"fullWord":13944},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":13946},{"subwords":[1576,1583,1586,1590,1636,1941,1942,2307,5691,5693,5790,6033,10323,10383,10392,10451,13489,13495,13498,13510,13947,13948,13949,16319,16336,17049],"fullWord":13948},{"subwords":[4673,4728,4731,5667,5691,5756,7467,7468,7477,7478,7678,10378,10379,10383,10398,13478,13489,13490,13495,13516,13950,13951],"fullWord":13951},{"subwords":[10437,10460,10495,11065,12374,13532,13539,13560,13613,13953,14009,18607,19559,21115,21120,21127,21135],"fullWord":13953},{"subwords":[5782,5846,10470,10957,10992,10995,10997,11008,11512,11534,12110,13539,13954,13988,13991,14454,14484,19624],"fullWord":13954},{"subwords":[399,481,732,735,817,5588,5592,5627,5956,5976,10182,10324,10350,10355,10470,11029,13204,13207,13210,13286,13294,13391,13439,13450,13455,13456,13577,13602,13940,13955,14262,14454,14456,14518,14536,14851,14852,14968,14979,15248,15777,15800,19837,19847,19848],"fullWord":13955},{"subwords":[6033,10470,10494,11058,11059,11060,13956,14003,14454,14458,14472,14551,16483,17128,18066,18135,18136,19825,19876],"fullWord":13956},{"subwords":[337,434,481,488,693,700,781,9203,9325,9334,9437,10120,10126,10182,10187,10263,10656,10665,10691,12238,12257,12292,12438,12453,12463,13191,13193,13197,13204,13239,13261,13364,13765,13799,13800,13850,13851,13899,13901,13902,13904,13914,13922,13957,18347,18349,18408,18436,18863,18894,18926],"fullWord":13957},{"subwords":[6033,9384,9389,9409,9416,10414,10415,10536,10549,10550,10551,10665,10672,10677,10681,10683,13577,13585,13586,13588,13705,13712,13715,13716,13743,13745,13959,13960,13961,14262,14281,14309,14336,14403,14421,15248,15272,15305,15444,15445,15473,15475,15508,15509,15514,15524,15526,16883,16889,16890,17072,17088,17563,17565,17591,17722],"fullWord":13960},{"subwords":[7596,7612,7637,8645,8664,8688,10563,10665,10691,10698,13651,13721,13850,13855,13962,18863,18926],"fullWord":13962},{"subwords":[9150,9151,9276,9284,9307,9902,9904,9913,9929,9932,9934,10645,10648,10654,10665,10672,10681,12438,12442,12453,12459,13765,13780,13787,13798,13963,13964,14421,16829,16858,16876,16883,16954,16974,16979,17085,17088,17248,17580],"fullWord":13964},{"subwords":[8645,8660,8664,8688,9325,9334,10656,10665,10691,10698,12438,12453,12463,12612,13651,13765,13799,13850,13855,13965,18731,18863,18894,18926],"fullWord":13965},{"subwords":[6033,6039,9416,9418,10414,10415,10453,10536,10551,10665,10672,10681,10684,13705,13716,13743,13745,13844,13961,13966,14421,16883,16888,16903,17088,17090,17563,17564,17567],"fullWord":13966},{"subwords":[10864,10874,12560,12936,13969,13970,14056,14077,14087,14112,17104,17354,17383,17406],"fullWord":13970},{"subwords":[7559,7708,8141,8731,8845,8951,9002,10793,10864,10910,10917,10981,13975,13987,14056,14449,19583],"fullWord":13975},{"subwords":[10443,10471,10488,10864,10865,10867,10882,10935,10938,12845,12916,12979,13095,13577,13976,14056,14061,14064,14147,14262,14350,14365,14393,15248,15337,15610,15621,15663,15728,20250,20251],"fullWord":13976},{"subwords":[4728,4865,5114,5146,5200,5271,5756,10378,10443,10490,10780,10864,10865,10866,10942,10944,12752,12837,12845,12916,13110,13111,13114,13478,13630,13950,13967,13977,13978,14020,14056,14061,14063,14229,20524,20566,20875,20883,20927],"fullWord":13978},{"subwords":[10443,10864,10865,10867,10882,10942,10945,12845,12916,12979,13110,13114,13577,13630,13977,13979,14056,14061,14064,14147,14229,14231,14262,14350,14365,14398,14400,15248,15610,15621,15663,15734,15739,20875,20927,20933],"fullWord":13979},{"subwords":[4728,4800,5114,5146,5200,5205,5208,5567,5756,10378,10443,10495,10780,10864,10865,10866,11065,12752,12767,12837,12845,12916,13478,13950,13967,13981,13982,14009,14020,14056,14061,14063,14088,21115,21127,21154,21155,21158],"fullWord":13982},{"subwords":[4047,4048,4049,4237,4302,4311,4367,10969,10972,13984,13985,14003,14435,14437,14551,16255,16258,18051,18094,18135,19825],"fullWord":13985},{"subwords":[4047,4049,4302,10969,10973,10976,13984,13986,14009,14435,21218,21224],"fullWord":13986},{"subwords":[2307,2567,2572,2575,2576,2668,10323,10957,10995,10999,13988,13989,13990,13997,14003,14428,14432,14551,17135,17136,18035,18103,18114,18135,19624,19628,19825],"fullWord":13990},{"subwords":[4728,5471,5472,5503,5525,5526,5533,5756,5782,5846,10378,10470,10957,10995,10996,11492,12091,12110,12111,13478,13950,13988,13991,13992,14438,14454,14455,19624,19625],"fullWord":13992},{"subwords":[5782,5784,5845,5846,5847,6033,10470,10957,10995,10999,12110,12112,12152,13988,13991,13993,13997,14003,14454,14458,14472,14551,17128,17135,17136,17679,18066,18103,18114,18135,18136,19624,19628,19825,19876],"fullWord":13993},{"subwords":[10957,10995,11000,12127,12131,13988,13994,13998,14009,19624,21224],"fullWord":13994},{"subwords":[10957,10995,10999,13988,13995,13996,13997,14003,14465,14469,14480,14483,14506,14515,14551,17135,17136,18103,18114,18135,19624,19628,19825],"fullWord":13996},{"subwords":[7477,7493,7680,7722,7759,8141,8151,10398,10470,10981,10982,11008,11012,11013,13516,13539,13987,13999,14449,14454,14484,19736],"fullWord":13999},{"subwords":[11021,11023,14000,14001,14003,14484,14491,14496,14500,14551,17140,17683,17684,18094,18117,18126,18135,19825],"fullWord":14001},{"subwords":[442,481,10182,13204,13217,13286,13391,14002,14460,14536,14851,19837],"fullWord":14002},{"subwords":[6033,6039,10453,10470,14003,14004,14454,14458,14472,14475,14551,14558,17128,17130,17677,18066,18073,18135,18136,18140,18147,19825,19876,19882],"fullWord":14004},{"subwords":[9002,11039,13681,14003,14005,14006,14009,14551,14552,14557,16746,16758,17149,17697,18135,18276,19592,19825,21224],"fullWord":14006},{"subwords":[10864,10897,10917,10929,12574,12659,12937,13059,13973,14007,14008,14056,14188,14215,14224,14484,14501,14561,14563,19036,19075,19434,19453,19605,19780,19813],"fullWord":14008},{"subwords":[6033,6038,10495,10496,11065,11066,11074,11075,13577,14009,14010,14011,14262,14281,14290,14293,14403,14410,14576,14577,15201,15248,15267,15272,15305,15866,15867,17149,17150,17672,17697,21115,21118,21127,21130,21212],"fullWord":14011},{"subwords":[7604,7612,8188,9293,10637,10662,10665,11067,12438,12453,13721,13765,13773,13807,14009,14012,21144,21146],"fullWord":14012},{"subwords":[528,574,586,732,5627,5846,5956,11213,11218,11270,11437,11446,11512,11534,12229,12244,12245,12257,12259,12317,13239,13245,13439,13453,13539,14013,14476,14484,19624],"fullWord":14013},{"subwords":[105,324,2921,3100,3202,3354,3864,3888,4029,8321,8420,8714,8845,9058,13154,13424,14014,14015,21064],"fullWord":14015},{"subwords":[3638,3644,3657,3697,3698,3864,3867,3869,4639,4651,4656,5096,5099,5114,5200,12752,12916,12917,13472,13478,14016,14017,14020,14044,14045],"fullWord":14017},{"subwords":[3697,3864,3867,3965,3968,6057,9848,12916,12917,12937,13438,13472,13613,14016,14018,14027,14044,14188,18981,19010,19075,19076,19196],"fullWord":14018},{"subwords":[5114,5200,5201,12745,12752,12916,13478,14020,14021],"fullWord":14021},{"subwords":[4971,5014,5163,5503,5523,5525,9178,9369,9449,11626,11831,11841,11854,11947,12091,12760,12931,13048,14020,14022,14032,14438,19624],"fullWord":14022},{"subwords":[3429,3430,3864,3867,3965,3968,4046,5959,6057,9079,12916,12917,12937,12939,13038,13438,13613,13700,13705,13850,14027,14028,14032,14188,18823,18844,18926,18981,19075,19076,19083],"fullWord":14028},{"subwords":[12916,12937,12979,13008,13145,13577,13599,13613,13624,14027,14029,14147,14160,14188,14262,14290,14350,14410,14576,15248,15312,15610,15663,15672,15691,15694,15748,15866,18981,19075,19076,19079,19093,19101,19122,19186,19187,19257,19323,19324,19347,19377,19559,19567,19570,19573,21127,21135,21189],"fullWord":14029},{"subwords":[7826,7846,8047,11921,11936,11947,12078,14031,14127,14350,14369,15627,15634,15652,15747],"fullWord":14031},{"subwords":[9369,9374,10665,10672,10681,10864,10874,10913,10917,10921,12812,12822,12936,12945,13048,13757,13812,13871,14003,14032,14033,14034,14056,14072,14087,14421,14551,16837,16883,17088,17104,17350,17354,17364,17406,17442,17447,17617,18083,18135,19825],"fullWord":14034},{"subwords":[5953,9244,9325,9335,9360,12374,12453,12463,12547,12574,12581,12876,12916,12918,12927,12937,13539,13560,13564,13613,13705,13765,13769,13799,13802,13809,13850,13864,14027,14032,14035,14036,14105,14188,18607,18844,18894,18898,18926,18981,19036,19038,19075,19076],"fullWord":14036},{"subwords":[9307,9318,9325,9335,9360,9366,9374,9447,12453,12459,12463,12471,12560,12574,12591,12936,12937,12944,13765,13798,13799,13802,13803,13804,13809,13811,13849,13850,13864,13865,13866,14032,14035,14037,14112,14177,14182,14188,14201,14421,14427,16858,16883,16907,17248,17255,17278,17383,17406,17435,17580,17598,17644,17921,18894,18919,18926,18936,18947,19036,19057,19075,19090,19386],"fullWord":14037},{"subwords":[9325,9335,9360,12453,12463,12574,12937,13765,13799,13802,13807,13809,13850,13864,13870,14032,14035,14038,14115,14188,18894,18925,18926,19036,19059,19075,19186,19567,21144,21146,21183,21186],"fullWord":14038},{"subwords":[4714,4826,4935,4939,5014,5021,5037,5114,5117,5200,5204,5221,5223,5728,6033,9110,9111,9127,9374,12752,12755,12916,12925,12936,13478,13488,13607,13705,13710,13716,14020,14023,14032,14039,14040,14166,14167,14421,16780,16883,17323,17406,17530,17562],"fullWord":14040},{"subwords":[6004,6033,9374,9384,9389,9409,12916,12925,12936,12979,12982,13007,13022,13577,13588,13607,13705,13712,13715,13716,14032,14039,14041,14147,14149,14166,14168,14262,14281,14309,14336,14350,14383,14384,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15610,15611,15663,15668,15676,16883,16889,16890,17406,17419,17565,17591,17638,17722],"fullWord":14041},{"subwords":[6033,6039,9374,12916,12925,12936,13607,13608,13705,13716,13844,14032,14039,14042,14166,14170,14175,14179,14421,16883,16888,16903,17406,17414,17434,17567],"fullWord":14042},{"subwords":[9307,9360,9366,9374,12453,12459,12560,12905,12936,13765,13798,13809,13811,14032,14043,14112,14421,16858,16883,17248,17264,17383,17397,17406,17580,17633],"fullWord":14043},{"subwords":[6004,6033,12916,12925,12936,12979,12982,13007,13577,13590,13592,13607,14044,14046,14047,14048,14147,14149,14151,14153,14166,14168,14262,14281,14350,14383,14384,14403,15248,15272,15305,15610,15611,15663,15668,15676,17406,17419,17620,17638],"fullWord":14047},{"subwords":[6033,6038,9865,9870,12916,12925,12936,13147,13606,13607,14026,14044,14048,14049,14050,14055,14166,14187,16407,16992,17406,17472,17620,17697,21127,21130,21174,21178],"fullWord":14050},{"subwords":[9384,9396,9846,9932,12834,12916,12979,13577,13590,13705,13712,13732,13734,14032,14044,14046,14051,14147,14151,14262,14350,15248,15508,15509,15610,15663],"fullWord":14051},{"subwords":[6033,9374,9846,9847,9932,9934,12834,12916,12925,12936,13607,13705,13716,13732,13736,14032,14039,14044,14048,14052,14166,14421,16883,16954,16979,17406,17571,17620],"fullWord":14052},{"subwords":[9150,9905,9932,10665,10864,12812,12824,13981,14009,14032,14053,14055,14056,14077,14088,21146,21180],"fullWord":14053},{"subwords":[7604,7612,9142,9276,9360,9913,9922,9932,10015,12453,12509,12825,13721,13765,13773,13780,13785,13809,13884,14032,14054,14107],"fullWord":14054},{"subwords":[183,481,605,4492,5172,5173,10090,10169,10182,10730,10741,10864,12257,12493,12494,12837,12913,13171,13204,13239,13904,13967,14020,14056,14057,14102],"fullWord":14057},{"subwords":[481,486,487,905,961,10181,10182,10194,10864,10874,12680,12683,12913,12914,12936,12948,12950,13007,13204,13232,13286,13317,13321,13336,13343,14056,14058,14059,14087,14246,14350,14351,14383,14403,14851,14866,14891,15673,15942,16014,16016,17019,17104,17298,17303,17354,17356,17406,17476,17494],"fullWord":14059},{"subwords":[4728,4810,5114,5115,5146,5200,5202,5215,5402,5756,10378,10443,10780,10864,10865,10866,10867,10878,10882,12752,12837,12839,12845,12916,12979,13478,13486,13577,13950,13967,14020,14056,14060,14061,14063,14064,14147,14148,14262,14350,14357,14365,15060,15078,15248,15600,15603,15610,15621,15663,15664],"fullWord":14060},{"subwords":[399,472,481,732,740,1167,1169,1182,5956,6166,10182,10301,10324,10350,10443,10494,10864,10865,10953,12845,12913,12916,13204,13207,13422,13439,13450,13940,14056,14061,14062,14234],"fullWord":14062},{"subwords":[6004,6033,10443,10447,10864,10865,10867,10868,10869,10874,10882,10883,10888,10889,12845,12848,12916,12925,12936,12979,12982,13007,13577,13607,14056,14061,14064,14065,14066,14087,14147,14149,14166,14168,14262,14281,14350,14365,14366,14383,14384,14403,15248,15272,15305,15610,15611,15621,15622,15663,15668,15676,17097,17104,17105,17107,17354,17359,17406,17419,17420,17638],"fullWord":14065},{"subwords":[3120,3529,3553,3685,3701,3708,3864,3867,4046,4047,5650,5959,9079,10414,10443,10518,10536,10665,10760,10767,10864,10865,12812,12845,12916,12917,13705,13743,14032,14056,14061,14067],"fullWord":14067},{"subwords":[3529,3553,3577,3685,3701,3864,3888,4029,4046,4047,9101,10665,10760,10767,10864,12812,12824,13981,14009,14032,14056,14068,14088,21146],"fullWord":14068},{"subwords":[7604,7612,7708,9360,10637,10641,10652,10663,10665,10793,10814,10826,10864,10870,12438,12453,12509,12812,13721,13765,13773,13809,14032,14056,14069,14107],"fullWord":14069},{"subwords":[9374,10665,10672,10681,10833,10849,10852,10854,10864,10874,12812,12822,12850,12851,12905,12936,13024,14032,14056,14070,14071,14072,14086,14087,14121,14123,14421,16837,16883,17088,17102,17104,17350,17354,17364,17370,17406,17617,17631],"fullWord":14071},{"subwords":[8664,8671,8678,8739,8845,8851,8853,8856,8886,9374,10665,10672,10681,10864,10874,12810,12812,12822,12936,13651,13655,13841,14032,14056,14072,14073,14087,14172,14421,16639,16693,16837,16883,17088,17104,17350,17354,17364,17406,17407,17617],"fullWord":14073},{"subwords":[10414,10443,10460,10536,10665,10691,10694,10864,10865,10897,12812,12845,12916,12937,13532,13613,13705,13743,13755,13850,13973,14027,14032,14056,14061,14074,14075,14188,18844,18863,18866,18926,18981,19002,19017,19075,19076],"fullWord":14075},{"subwords":[10665,10691,10864,10897,12812,12824,12937,13755,13850,13870,13973,13981,14009,14032,14056,14074,14076,14088,14188,18863,18926,19002,19075,19186,19567,21146],"fullWord":14076},{"subwords":[481,486,487,950,961,10013,10014,10181,10182,10194,10864,10874,12675,12677,12913,12914,12936,13204,13232,13336,13343,14056,14077,14078,14079,14087,15942,16014,16988,17019,17104,17294,17298,17354,17406,17476],"fullWord":14079},{"subwords":[4728,4744,5114,5146,5150,5200,5756,5780,10378,10443,10780,10864,10865,10866,12752,12837,12845,12916,13478,13950,13967,14020,14056,14061,14063,14080,14081],"fullWord":14081},{"subwords":[5691,5780,5786,10383,10443,10864,10865,12845,12916,13489,13495,14056,14061,14080,14082],"fullWord":14082},{"subwords":[5780,5953,10443,10444,10822,10864,10865,12504,12520,12547,12845,12876,12916,12918,13539,13564,14056,14061,14080,14083,14105],"fullWord":14083},{"subwords":[5780,10443,10864,10865,10867,10882,12845,12916,12979,13577,14056,14061,14064,14080,14084,14147,14262,14350,14365,15248,15610,15621,15623,15663],"fullWord":14084},{"subwords":[9152,10665,10833,10849,10864,12812,12850,13749,14032,14056,14070,14080,14085,14086,14121],"fullWord":14085},{"subwords":[10864,10873,10874,12933,12936,13971,13972,13981,13983,14009,14056,14087,14088,14089,14090,14091,14130,14144,14187,17104,17109,17149,17354,17406,17413,17472,17697],"fullWord":14090},{"subwords":[183,574,732,733,4472,4475,4484,4763,5114,5163,5165,5200,5658,5956,11107,11115,11265,11270,11437,11438,11831,11833,11947,11948,11949,12752,12916,13171,13439,13478,14020,14024,14092,14093],"fullWord":14092},{"subwords":[5782,10443,10864,10865,10957,11508,11870,11885,11947,11948,12845,12916,14024,14056,14061,14093,14095],"fullWord":14095},{"subwords":[11885,11921,11947,12933,14096,14097,14124,14130],"fullWord":14097},{"subwords":[11891,11911,11921,11931,11947,12522,12933,14096,14098,14124,14130],"fullWord":14098},{"subwords":[3777,3786,3788,3814,3864,3867,3872,3883,3884,4048,4237,5653,5856,5918,5953,5955,6023,6033,12506,12547,12560,12561,12874,12875,12876,12879,12916,12917,12918,12922,12925,12936,13539,13558,13564,13566,13607,14099,14100,14105,14106,14112,14166,16188,16194,16195,16298,17316,17383,17406,17525],"fullWord":14100},{"subwords":[3354,3675,3777,3826,3852,3854,3864,8714,8789,8831,8845,12809,12895,13667,14019,14101,14116,14118],"fullWord":14101},{"subwords":[4774,4810,5114,5115,5172,5176,5200,5202,5215,5392,5402,5865,5953,12358,12493,12499,12547,12548,12752,12876,12916,12918,12979,13478,13486,13539,13544,13564,13577,14020,14102,14103,14105,14147,14148,14154,14262,14350,14357,14372,14373,15060,15078,15227,15238,15248,15600,15603,15610,15663,15664],"fullWord":14103},{"subwords":[5718,5953,7467,7493,7496,7815,12339,12509,12547,12789,12876,12916,12918,13489,13499,13516,13539,13564,14105,14107,14108],"fullWord":14108},{"subwords":[4947,4985,4993,4998,5014,5123,5142,5172,5179,5207,7604,7612,7782,9360,12453,12493,12509,12758,13721,13765,13773,13809,14020,14032,14102,14107,14109],"fullWord":14109},{"subwords":[4714,4774,4935,4985,4988,5014,5114,5172,5176,5200,5865,5953,9110,9360,12453,12493,12499,12547,12752,12758,12876,12916,12918,12927,12928,13478,13539,13544,13564,13705,13710,13765,13769,13771,13809,14020,14032,14102,14105,14110],"fullWord":14110},{"subwords":[5918,5953,5955,6033,9307,9360,9366,9374,12453,12459,12506,12516,12547,12560,12561,12876,12879,12916,12918,12922,12925,12927,12930,12936,13520,13539,13549,13558,13564,13566,13607,13705,13716,13765,13769,13772,13798,13809,13811,14032,14039,14105,14106,14111,14112,14166,14421,16858,16860,16883,17248,17249,17383,17406,17580,17582],"fullWord":14111},{"subwords":[5918,5953,5955,6033,6049,12368,12374,12376,12506,12547,12560,12561,12574,12581,12585,12591,12876,12879,12884,12916,12918,12922,12925,12936,12937,12944,13539,13558,13560,13564,13566,13607,13609,13613,13626,14027,14030,14105,14106,14112,14113,14166,14182,14188,14201,14427,16399,16409,16457,16461,17278,17383,17406,17435,17541,17644,17834,17836,17909,17921,18607,18624,18981,18985,19036,19038,19042,19057,19075,19076,19081,19090,19386],"fullWord":14113},{"subwords":[12528,12541,12574,12887,12937,14114,14188,19036,19060,19075],"fullWord":14114},{"subwords":[4728,5114,5146,5200,5756,10378,10443,10780,10833,10849,10850,10864,10865,10866,12752,12837,12845,12846,12916,13478,13950,13967,14020,14056,14061,14063,14086,14117,14121,14122],"fullWord":14117},{"subwords":[5114,5200,8549,8721,8725,8726,8813,8831,8832,8845,8846,8847,12752,12802,12809,12895,12896,12916,13478,14020,14118,14119],"fullWord":14119},{"subwords":[4728,5114,5146,5200,5756,10378,10443,10780,10833,10849,10850,10864,10865,10866,12752,12837,12845,12846,12916,13478,13950,13967,14020,14056,14061,14063,14086,14117,14121,14122],"fullWord":14122},{"subwords":[5114,5200,12752,12916,12933,13478,13569,14020,14124,14125,14130,14131,14237],"fullWord":14125},{"subwords":[6008,12916,12979,13577,14127,14128,14147,14262,14350,15248,15271,15610,15663,15665],"fullWord":14128},{"subwords":[10833,10849,10853,10864,10887,13981,14009,14056,14086,14088,14121,14127,14129,14350,14410,15672],"fullWord":14129},{"subwords":[12916,12933,12979,13145,13569,13577,14130,14131,14132,14147,14262,14278,14290,14350,14379,14410,14576,15248,15610,15663,15672,15866,21127,21189],"fullWord":14132},{"subwords":[6189,12916,12933,13489,13502,13569,14130,14131,14134,21127],"fullWord":14134},{"subwords":[7759,8151,12509,12933,12935,14107,14130,14135,14449,14484,14506,19813],"fullWord":14135},{"subwords":[8664,8668,8669,8671,8678,8739,8845,8851,8853,8856,8886,9374,12810,12933,12936,13651,13813,13828,13841,14032,14130,14136,14144,14172,14421,16639,16693,16883,17406,17407],"fullWord":14136},{"subwords":[481,762,10182,10189,10864,12680,12913,12933,12948,13204,13268,13286,13971,14056,14058,14130,14137,14350,14379,14851],"fullWord":14137},{"subwords":[9360,10652,10663,10665,10814,10864,12438,12453,12812,12933,13765,13809,13813,13971,14032,14056,14130,14138],"fullWord":14138},{"subwords":[762,961,12933,12936,13268,13281,13336,13343,14130,14139,14140,14144,16014,17298,17406,17476],"fullWord":14140},{"subwords":[5114,5200,12752,12916,12933,13478,13569,14020,14130,14131,14141,14237],"fullWord":14141},{"subwords":[12916,12933,12979,13569,13577,14130,14131,14142,14147,14262,14278,14350,14379,15248,15610,15663],"fullWord":14142},{"subwords":[12916,12933,12937,13569,13613,14027,14130,14131,14143,14188,18981,19075,19076],"fullWord":14143},{"subwords":[9369,10665,10864,10917,12812,12933,13048,13813,13971,14032,14033,14056,14130,14145,14465,14506,14512],"fullWord":14145},{"subwords":[7604,7612,8015,8022,8045,9360,9400,12453,12509,12513,12548,12995,13721,13765,13773,13809,13837,14032,14107,14150,14154,14311,14350,14372,14374,15461,15494,15508,15671],"fullWord":14150},{"subwords":[6008,12916,12979,13577,13590,14044,14046,14147,14151,14152,14262,14350,15248,15271,15610,15663,15665],"fullWord":14152},{"subwords":[12548,12560,12905,12936,13007,14112,14127,14154,14155,14156,14157,14350,14372,14383,14403,17264,17383,17397,17406,17410,17633,17636],"fullWord":14156},{"subwords":[6004,6033,12905,12916,12925,12936,12979,12982,13007,13577,13607,14127,14147,14149,14158,14166,14168,14262,14281,14350,14383,14384,14403,15248,15272,15305,15610,15611,15663,15668,15676,17406,17410,17419,17636,17638],"fullWord":14158},{"subwords":[12905,12936,12945,13007,13051,13052,14127,14159,14220,14223,14350,14383,14403,14551,17406,17410,17447,17451,17636,17687,18135,19825],"fullWord":14159},{"subwords":[481,488,495,761,781,911,1028,10182,10864,10897,12680,12686,12913,12937,12948,13008,13204,13286,13328,13364,13383,13922,13928,13973,14056,14058,14160,14161,14188,14247,14350,14851,14867,14898,15691,18432,18436,18449,18463,18467,19075,19093,19094,19221,19323],"fullWord":14161},{"subwords":[4801,4803,4805,4810,5114,5115,5200,5202,5215,5234,5237,5239,5402,5405,12752,12916,12937,12938,12979,13008,13478,13486,13577,13599,13613,13624,14020,14027,14147,14148,14160,14162,14188,14262,14350,14357,15060,15078,15248,15312,15318,15600,15603,15610,15663,15664,15691,15694,15748,18981,18983,19075,19076,19077,19079,19093,19101,19310,19311,19323,19324],"fullWord":14162},{"subwords":[6008,12916,12937,12979,13008,13577,13599,13613,13624,14027,14147,14160,14163,14188,14262,14286,14350,15248,15268,15271,15312,15330,15610,15663,15665,15691,15694,15748,18652,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":14163},{"subwords":[10864,10887,10897,12937,13008,13973,13981,14009,14056,14088,14160,14164,14188,14350,14410,15672,15691,19075,19093,19122,19186,19323,19347,19377,19567,19573],"fullWord":14164},{"subwords":[6004,6033,6039,12916,12925,12936,12979,12982,13007,13577,13607,13608,14147,14149,14166,14168,14169,14170,14179,14262,14281,14283,14350,14383,14384,14387,14403,15248,15272,15305,15610,15611,15663,15668,15676,15679,17406,17414,17419,17424,17434,17638,17640],"fullWord":14169},{"subwords":[6004,6033,12916,12925,12936,12945,12979,12982,13007,13051,13052,13577,13602,13607,14147,14149,14166,14168,14171,14220,14223,14262,14281,14350,14383,14384,14403,14518,14544,14551,15248,15272,15305,15610,15611,15663,15668,15676,15706,15708,15716,15777,15782,15840,17406,17419,17447,17451,17638,17687,18066,18071,18135,18136,18137,18150,19824,19825,19876,19880],"fullWord":14171},{"subwords":[6004,6033,8549,8552,8575,8581,8584,8725,8728,8729,8730,8845,8846,8848,8849,8850,8856,8857,8874,8875,8881,8886,8934,12810,12916,12925,12936,12979,12982,13007,13577,13607,14147,14149,14166,14168,14172,14173,14262,14281,14350,14383,14384,14403,15248,15272,15305,15386,15610,15611,15663,15668,15676,16574,16676,16678,16693,16694,16697,17406,17407,17419,17638],"fullWord":14173},{"subwords":[8772,8845,8856,8886,9058,9060,10864,10874,12810,12936,13681,13981,13983,14009,14056,14087,14088,14091,14172,14174,14187,16693,16758,17104,17149,17354,17406,17407,17409,17472,17697,18276],"fullWord":14174},{"subwords":[6033,6039,9374,12916,12925,12936,13607,13608,13705,13716,13844,14032,14039,14042,14166,14170,14175,14179,14421,16883,16888,16903,17406,17414,17434,17567],"fullWord":14175},{"subwords":[7604,7611,7612,7615,9307,9360,9366,9374,12453,12459,12509,12512,12560,12936,13721,13730,13765,13773,13776,13798,13809,13811,14032,14107,14112,14176,14421,16815,16858,16866,16883,17248,17383,17389,17406,17580],"fullWord":14176},{"subwords":[9374,9447,12936,12937,12944,13844,13850,13866,14032,14177,14178,14182,14186,14188,14201,14421,14422,14427,16883,16888,16903,16907,16915,17406,17414,17434,17435,17436,17598,17603,17644,17645,17921,17922,18926,18936,18947,19075,19090,19125,19386],"fullWord":14178},{"subwords":[6033,6039,12916,12925,12936,13607,13608,14166,14170,14179,14180,17406,17414,17434],"fullWord":14180},{"subwords":[11947,11961,12002,12082,12173,12872,12936,12945,14181,14551,14558,17406,17414,17434,17447,17449,18103,18112,18113,18114,18115,18116,18135,18147,19624,19628,19825],"fullWord":14181},{"subwords":[481,486,487,488,495,496,781,961,1028,10181,10182,10194,10241,10864,10874,10896,10897,10901,12686,12692,12913,12914,12936,12937,12944,13204,13232,13336,13343,13352,13364,13385,13922,13928,13929,13973,13974,14056,14087,14182,14183,14188,14201,14427,15942,15960,16014,16041,17019,17022,17104,17113,17298,17354,17406,17435,17476,17510,17605,17644,17885,17921,18432,18435,18436,18448,19075,19090,19386],"fullWord":14183},{"subwords":[4803,4804,4805,4826,4837,5114,5117,5118,5200,5204,5221,5223,5233,5234,5237,5241,5245,6033,6049,12752,12755,12916,12925,12936,12937,12938,12944,13478,13488,13607,13609,13613,13626,14020,14023,14027,14030,14166,14167,14182,14184,14188,14201,14427,16409,16457,17323,17406,17435,17530,17644,17836,17921,18575,18981,18983,18985,19075,19076,19077,19081,19090,19386],"fullWord":14184},{"subwords":[6004,6018,6033,6049,12916,12925,12936,12937,12944,12979,12982,13007,13008,13011,13577,13599,13607,13609,13613,13624,13626,14027,14030,14147,14149,14160,14165,14166,14168,14182,14185,14188,14201,14262,14281,14284,14285,14350,14383,14384,14403,14427,15248,15272,15305,15306,15312,15610,15611,15663,15668,15676,15691,15694,15695,15700,15748,16409,16457,17406,17419,17429,17435,17638,17641,17644,17836,17921,17924,17961,17985,18981,18985,19075,19076,19079,19080,19081,19090,19093,19101,19103,19113,19323,19324,19325,19386],"fullWord":14185},{"subwords":[269,299,732,781,1009,1028,5620,5718,5956,6055,7365,7366,7416,7417,7540,7768,7874,12686,12916,12937,13184,13364,13367,13439,13464,13516,13613,14027,14188,14189,18342,18432,18436,18437,18541,18981,18993,18994,18995,19075,19076],"fullWord":14189},{"subwords":[325,781,932,961,1028,8321,8324,8362,8367,8371,8378,8391,8845,8856,8886,8887,8892,8901,8935,12686,12690,12691,12692,12810,12936,12937,12944,13336,13343,13352,13364,13375,13376,13377,13385,14172,14182,14188,14190,14201,14427,16014,16041,16559,16670,16693,16704,17298,17406,17407,17435,17476,17510,17644,17770,17885,17921,18432,18435,18436,18448,18743,19075,19090,19123,19386],"fullWord":14190},{"subwords":[781,1028,12686,12937,13043,13364,14188,14191,18432,18436,18495,18501,19060,19066,19075,19131,19143],"fullWord":14191},{"subwords":[2160,2185,2192,2197,2237,2300,2302,12937,14188,14192,19060,19075,19186,19567],"fullWord":14192},{"subwords":[5953,12339,12374,12547,12574,12581,12876,12916,12918,12937,13489,13499,13539,13560,13564,13613,14027,14105,14188,14193,18576,18583,18607,18981,19036,19038,19075,19076],"fullWord":14193},{"subwords":[5953,12374,12547,12574,12581,12876,12916,12918,12937,13539,13560,13564,13613,14027,14105,14188,14194,18607,18630,18969,18981,19036,19038,19075,19076,19131,19134],"fullWord":14194},{"subwords":[6801,6815,6821,6937,6999,10788,10864,10897,10917,10929,12785,12937,13059,13973,14007,14056,14188,14195,14209,14215,14224,14561,18991,19075,19082,19453,19580,19605],"fullWord":14195},{"subwords":[8549,8552,8575,8725,8728,8845,8846,8848,8857,8892,12916,12937,12979,13008,13009,13036,13577,13599,13613,13624,14027,14147,14160,14188,14196,14262,14350,15248,15312,15386,15610,15663,15691,15694,15748,18697,18743,18749,18755,18756,18777,18781,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":14196},{"subwords":[9325,9335,9360,12453,12463,12574,12887,12937,12943,13765,13799,13802,13809,13850,13864,14032,14035,14188,14197,18894,18926,19036,19060,19075],"fullWord":14197},{"subwords":[574,693,781,1020,1028,11213,11265,11270,11361,11810,11814,11891,11947,12010,12244,12257,12293,12522,12574,12575,12686,12937,13239,13261,13364,14188,14198,18389,18402,18405,18408,18432,18436,19026,19036,19075],"fullWord":14198},{"subwords":[5953,11512,11574,11891,11916,11947,11948,12010,12011,12374,12522,12525,12547,12574,12581,12866,12876,12916,12918,12937,13539,13560,13564,13613,14024,14027,14093,14105,14188,14199,18595,18596,18601,18607,18981,19026,19032,19036,19038,19075,19076],"fullWord":14199},{"subwords":[12916,12933,12937,13569,13613,13705,13813,13815,13820,13850,14027,14032,14130,14131,14188,14200,18844,18926,18981,19075,19076],"fullWord":14200},{"subwords":[6033,6049,9374,9447,12916,12925,12936,12937,12944,13607,13609,13613,13626,13705,13716,13850,13866,14027,14030,14032,14039,14166,14177,14182,14188,14201,14202,14421,14427,16409,16457,16883,16907,16911,17406,17435,17598,17600,17644,17836,17921,18844,18850,18926,18936,18947,18981,18985,19075,19076,19081,19090,19386],"fullWord":14202},{"subwords":[4803,4805,5114,5200,5234,5237,12752,12916,12937,12938,13478,13613,14020,14027,14188,14204,18981,18983,19075,19076,19077,19131,19134,19135],"fullWord":14204},{"subwords":[12916,12937,12979,13008,13041,13577,13599,13613,13624,14027,14147,14160,14188,14205,14262,14350,15248,15312,15610,15663,15691,15694,15748,18981,19075,19076,19079,19093,19101,19117,19118,19131,19134,19138,19323,19324,19331],"fullWord":14205},{"subwords":[3354,3370,3864,3888,3984,4029,4034,4049,4302,8714,8845,9002,9058,13044,14207,14208,21193,21224],"fullWord":14208},{"subwords":[5114,5200,5471,5523,5525,5526,5950,6406,6501,6874,6937,12752,12916,13478,14020,14209,14210,14438,19580],"fullWord":14210},{"subwords":[5950,6874,6937,12771,12916,14209,14211,14212,14444,19580],"fullWord":14212},{"subwords":[6937,6939,7024,12771,12783,12936,12945,14209,14211,14213,14214,14418,14444,14448,14551,17406,17447,18135,19580,19581,19825],"fullWord":14213},{"subwords":[10864,10874,10896,10897,10901,10905,10917,10921,10929,10931,11044,12936,12937,12944,12945,13055,13059,13082,13973,13974,14003,14007,14056,14087,14182,14188,14201,14215,14216,14224,14227,14427,14551,14561,14567,17104,17113,17147,17354,17406,17435,17442,17447,17644,17648,17921,17934,18135,18148,19075,19090,19386,19453,19456,19605,19825],"fullWord":14216},{"subwords":[3777,3786,3864,3867,3984,3985,4049,4268,4302,5653,5856,5953,12547,12874,12876,12916,12917,12918,13049,13539,13564,14099,14105,14217,14433,14484,19655,19813],"fullWord":14217},{"subwords":[5172,5188,5221,5507,5522,5523,5524,5525,12493,12501,12503,12560,12597,12888,12936,12945,14020,14023,14102,14104,14112,14218,14219,14438,14441,14484,14500,14551,17323,17383,17406,17445,17447,17675,17683,18117,18135,19664,19813,19825],"fullWord":14219},{"subwords":[4810,5114,5115,5200,5202,5215,5260,5402,5428,5471,5523,5525,5526,5528,12752,12916,12979,13051,13478,13486,13577,13579,13602,14020,14147,14148,14220,14221,14262,14350,14357,14392,14404,14438,14518,15060,15078,15248,15600,15603,15610,15663,15664,15706,15773,15777,15778],"fullWord":14221},{"subwords":[6008,12916,12979,13051,13577,13602,14147,14220,14222,14262,14350,14518,14523,14541,15248,15271,15610,15663,15665,15706,15777,15780],"fullWord":14222},{"subwords":[4803,4805,5114,5200,5234,5237,5471,5479,5523,5525,5526,12752,12916,12937,12938,13059,13065,13478,13613,14020,14027,14188,14224,14225,14438,14561,18981,18983,19075,19076,19077,19453],"fullWord":14225},{"subwords":[6021,12916,12937,12979,13008,13051,13059,13066,13080,13577,13599,13602,13613,13624,14027,14147,14160,14188,14220,14224,14226,14262,14350,14443,14518,14561,15248,15312,15610,15663,15691,15694,15706,15722,15723,15748,15777,15858,18981,19075,19076,19079,19093,19101,19155,19323,19324,19336,19356,19453,19895],"fullWord":14226},{"subwords":[4810,4865,5114,5115,5200,5202,5215,5273,5361,5402,12752,12916,12979,13110,13111,13478,13486,13577,13630,14020,14147,14148,14229,14230,14231,14262,14350,14357,14398,15060,15078,15248,15600,15603,15610,15663,15664,15734,15738,20524,20875,20927,20929,20933],"fullWord":14230},{"subwords":[6004,6033,12916,12925,12936,12979,12982,13007,13110,13112,13577,13607,13630,13635,14147,14149,14166,14168,14229,14231,14232,14233,14262,14281,14350,14383,14384,14398,14402,14403,15248,15272,15302,15305,15610,15611,15663,15668,15676,15734,15744,16445,16475,17406,17419,17464,17466,17544,17638,18268,18272,20875,20877,20927,20928,20933,20947],"fullWord":14232},{"subwords":[7604,7612,9360,12453,12474,12509,13721,13765,13773,13809,13874,14032,14107,14234,14236],"fullWord":14236},{"subwords":[269,315,732,735,817,842,1062,5588,5627,5956,5976,5988,7365,7366,7368,7375,7461,7935,8099,13184,13286,13294,13439,13455,13516,13577,13602,14238,14262,14449,14518,14525,14758,14762,14851,14852,14979,15141,15248,15777,15790,19847,19855],"fullWord":14238},{"subwords":[349,359,732,735,737,739,775,779,817,825,858,863,905,906,961,966,970,5588,5599,5956,5976,5977,6033,9376,9384,9389,9409,13200,13202,13286,13294,13299,13303,13321,13322,13336,13439,13455,13459,13461,13577,13588,13597,13705,13712,13715,13716,13839,14239,14262,14281,14309,14336,14403,14421,14788,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15508,15509,15514,15524,15526,16014,16028,16270,16286,16405,16419,16883,16889,16890,17476,17494,17495,17523,17565,17591,17592,17722],"fullWord":14239},{"subwords":[93,114,121,732,735,796,817,2869,2883,2885,2921,2922,2924,2941,2954,2977,2987,2989,4069,4077,4078,5588,5595,5856,5956,5976,12224,12229,12257,12259,12270,12317,12319,13154,13155,13157,13239,13245,13286,13294,13439,13453,13455,13470,13539,13577,14243,14262,14717,14821,14851,14852,14979,15021,15025,15248],"fullWord":14243},{"subwords":[867,868,905,950,961,9965,12257,12269,12277,12279,13239,13259,13286,13306,13311,13321,13336,14244,14245,14403,14821,14840,14845,14851,14866,14891,15986,16007,16014,17220,17227,17476,17490,17491,17494,17500],"fullWord":14245},{"subwords":[161,732,733,735,781,782,817,911,1009,4516,4537,4551,4553,4607,4797,4805,4810,4812,5323,5327,5588,5620,5956,5976,5982,6055,13171,13174,13286,13292,13294,13295,13328,13329,13330,13364,13367,13368,13372,13439,13455,13460,13464,13478,13577,13599,13613,13616,14247,14248,14249,14262,14736,14851,14852,14853,14867,14898,14901,14902,14961,14979,15060,15248,15312,15318,15748,18339,18436,18437,18438,18439,18449,18450,18453,18454,18467,18541,18554,19205,19221,19233],"fullWord":14249},{"subwords":[732,735,781,782,817,911,1009,5588,5620,5956,5976,5982,6008,6055,13286,13294,13297,13328,13329,13364,13367,13372,13439,13455,13460,13464,13577,13599,13613,14247,14248,14250,14262,14851,14852,14854,14867,14868,14872,14898,14901,14903,14979,14983,15248,15312,15748,18436,18437,18439,18449,18453,18467,18541,18554,18652,18653,19221],"fullWord":14250},{"subwords":[732,735,737,739,775,779,781,782,817,825,905,906,911,918,961,966,993,1009,5588,5599,5616,5620,5626,5956,5976,5977,5982,6018,6033,6055,13286,13294,13299,13321,13322,13328,13329,13333,13336,13352,13355,13358,13364,13367,13372,13373,13374,13385,13439,13455,13459,13460,13461,13464,13465,13577,13599,13609,13613,13626,14247,14248,14251,14252,14262,14281,14284,14403,14427,14851,14852,14856,14866,14867,14881,14891,14898,14901,14905,14912,14979,14982,15248,15253,15272,15305,15306,15312,15748,16014,16041,16043,16270,16286,16293,16409,16410,16419,16457,17476,17494,17495,17510,17511,17523,17652,17773,17775,17836,17948,17961,18436,18437,18439,18440,18441,18448,18449,18453,18455,18467,18469,18472,18541,18554,18557,18559,19221,19222,19381,19386],"fullWord":14251},{"subwords":[905,961,1158,1161,12257,12269,13239,13259,13286,13321,13336,13408,13415,13420,13421,14254,14255,14403,14821,14851,14866,14891,14933,14938,15986,16014,16089,16095,17220,17476,17490,17494,17516,18195,18201,20393,20410,20432,20435,20436,20439,20442,20449,20454,20973,20974],"fullWord":14255},{"subwords":[732,735,737,739,740,775,779,817,825,905,906,961,966,1167,1173,5588,5599,5956,5976,5977,6033,13286,13294,13299,13321,13322,13336,13422,13423,13439,13455,13459,13461,13577,14256,14262,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15373,16014,16098,16270,16286,16419,16483,17476,17494,17495,17523],"fullWord":14256},{"subwords":[349,359,905,961,1180,9376,9409,13200,13202,13286,13303,13321,13336,13422,13839,13874,14257,14345,14403,14421,14851,14866,14891,15508,15524,16014,16028,16098,16883,16889,16922,17476,17494,17722],"fullWord":14257},{"subwords":[227,732,733,735,738,817,1196,4516,4578,4607,4613,4810,4814,5323,5337,5430,5567,5570,5588,5956,5976,13171,13174,13286,13292,13294,13295,13424,13425,13428,13439,13455,13478,13577,13582,14258,14259,14262,14290,14410,14576,14736,14851,14852,14853,14939,14940,14961,14966,14979,15060,15248,15255,15864,15866,21064,21068,21071,21097,21099,21127],"fullWord":14259},{"subwords":[227,732,735,738,817,1196,5588,5956,5976,6008,13286,13294,13297,13320,13424,13428,13439,13455,13577,13596,14258,14260,14262,14290,14410,14411,14576,14851,14852,14854,14872,14939,14979,14983,15248,15255,15864,15866,21064,21071,21073,21097,21099,21127],"fullWord":14260},{"subwords":[93,98,121,732,735,796,801,817,2921,2922,2924,2941,2954,2987,2989,3202,3206,3209,3236,4077,4078,5582,5588,5956,5976,8321,8333,8351,8450,8453,8549,8552,13154,13155,13157,13286,13291,13294,13439,13443,13455,13577,13578,14262,14263,14717,14775,14851,14852,14958,14979,15021,15025,15248,15376],"fullWord":14263},{"subwords":[574,732,735,762,817,869,5588,5956,5976,11270,11274,11276,11286,11437,11539,13238,13268,13276,13286,13294,13439,13455,13569,13577,13593,14240,14262,14264,14278,14808,14816,14851,14852,14975,14979,15202,15209,15248,15747],"fullWord":14264},{"subwords":[574,732,735,817,869,872,5588,5956,5976,6008,11270,11276,11286,11437,11539,13286,13294,13297,13439,13455,13577,13593,14240,14262,14265,14808,14816,14851,14852,14854,14872,14975,14979,14983,14986,15202,15209,15248,15747],"fullWord":14265},{"subwords":[4046,4048,4158,4169,4237,5959,5961,6023,6033,9079,9085,9384,9389,9409,13577,13588,13702,13705,13712,13715,13716,14262,14266,14281,14294,14297,14309,14336,14403,14421,15021,15048,15248,15272,15305,15411,15415,15508,15509,15514,15524,15526,16178,16239,16298,16769,16883,16889,16890,17525,17550,17553,17555,17565,17591,17722],"fullWord":14266},{"subwords":[3864,3867,3870,3898,3923,4188,6166,12916,12917,12965,12979,13577,14147,14234,14262,14267,14350,14356,15021,15248,15373,15592,15610,15663],"fullWord":14267},{"subwords":[3161,4049,4139,4214,4268,4302,4312,4326,4357,4375,4376,4378,5654,6019,6021,6057,13438,13577,13599,13602,13613,14262,14268,14433,14518,14561,14957,15021,15059,15248,15312,15748,15777,15858,19350,19356,19453],"fullWord":14268},{"subwords":[5918,5984,5998,6000,6033,12339,13489,13499,13501,13506,13508,13510,13539,13547,13558,13559,13577,13583,13584,14262,14269,14270,14281,14403,15248,15272,15305,16319,16335,16336,16340,16425,17237,17658],"fullWord":14270},{"subwords":[232,732,735,817,828,1366,1377,1383,1535,2308,2317,5588,5956,5976,6308,6317,6392,13286,13294,13439,13455,13577,14262,14271,14851,14852,14979,14995,15114,15248],"fullWord":14271},{"subwords":[5984,6008,6409,7057,7060,7068,13489,13506,13577,13583,14262,14272,15098,15114,15116,15248],"fullWord":14272},{"subwords":[6543,6621,6622,6661,6663,6664,9384,13577,13705,13712,13874,14262,14273,14345,15114,15126,15248,15373,15446,15508,15509],"fullWord":14273},{"subwords":[5782,5830,9178,9186,9189,9384,10414,10536,10549,10584,10595,10611,10613,10665,10677,10957,11539,11659,11668,11669,11743,13577,13585,13593,13705,13712,13743,13959,14262,14274,14313,14317,15202,15248,15444,15473,15480,15481,15508,15509,15747],"fullWord":14274},{"subwords":[4671,4673,4678,4810,4818,5984,11478,11539,11543,13478,13489,13490,13506,13577,13583,13593,14262,14275,15060,15093,15202,15248,15747],"fullWord":14275},{"subwords":[5735,5830,5842,5984,5995,9178,9189,9384,11539,11543,11743,13489,13506,13577,13583,13593,13705,13712,14262,14276,14313,14317,15202,15248,15480,15481,15508,15509,15747],"fullWord":14276},{"subwords":[5830,9178,9189,9384,11539,11743,11797,11798,13577,13593,13705,13712,13874,14262,14277,14313,14317,14345,15202,15219,15248,15373,15480,15481,15508,15509,15747],"fullWord":14277},{"subwords":[227,732,735,738,762,817,1196,5588,5956,5976,13268,13276,13278,13286,13294,13424,13428,13439,13455,13569,13577,14258,14262,14278,14279,14290,14410,14576,14851,14852,14939,14979,15248,15255,15864,15866,21064,21066,21071,21097,21099,21127],"fullWord":14279},{"subwords":[5984,6018,6033,6046,13489,13506,13508,13510,13577,13583,13584,13599,13609,13610,13613,13617,13618,13626,14262,14281,14282,14284,14403,14427,15248,15272,15290,15305,15306,15312,15748,16319,16336,16340,16409,16425,16457,17658,17821,17823,17836,17840,17961,18576,18588,18658,19240,19242,19386],"fullWord":14282},{"subwords":[6004,6018,6033,6049,12916,12925,12936,12937,12944,12979,12982,13007,13008,13011,13577,13599,13607,13609,13613,13624,13626,14027,14030,14147,14149,14160,14165,14166,14168,14182,14185,14188,14201,14262,14281,14284,14285,14350,14383,14384,14403,14427,15248,15272,15305,15306,15312,15610,15611,15663,15668,15676,15691,15694,15695,15700,15748,16409,16457,17406,17419,17429,17435,17638,17641,17644,17836,17921,17924,17961,17985,18981,18985,19075,19076,19079,19080,19081,19090,19093,19101,19103,19113,19323,19324,19325,19386],"fullWord":14285},{"subwords":[6008,12916,12937,12979,13008,13577,13599,13613,13624,14027,14147,14160,14163,14188,14262,14286,14350,15248,15268,15271,15312,15330,15610,15663,15665,15691,15694,15748,18652,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":14286},{"subwords":[13577,13599,13613,13629,14262,14287,14290,14410,14576,15248,15312,15748,15866,19257,19377,19389,19559,19570,21127,21135],"fullWord":14287},{"subwords":[5984,6092,6100,13489,13506,13577,13583,13602,14262,14288,14518,14519,15248,15337,15355,15777,15836,19992,19993,19996],"fullWord":14288},{"subwords":[732,735,817,1145,5588,5956,5976,6008,13286,13294,13297,13408,13410,13439,13455,13577,13630,14262,14289,14851,14852,14854,14872,14933,14934,14979,14983,15248,15372,20410,20417,20436,20438,20510,20973],"fullWord":14289},{"subwords":[4673,4678,4810,5430,5567,5570,5698,5984,6189,6191,6196,13478,13489,13490,13506,13509,13577,13582,13583,14262,14290,14291,14410,14576,15060,15089,15093,15097,15248,15866,21127],"fullWord":14291},{"subwords":[5698,5984,6008,6189,6196,13489,13506,13509,13577,13583,13596,14262,14290,14292,14410,14411,14576,15248,15866,21127],"fullWord":14292},{"subwords":[3406,4046,4155,4639,4714,4810,4909,4911,4935,5014,5023,5377,5959,9079,9082,9384,9385,13478,13577,13705,13710,13712,14262,14294,14295,14303,14306,15021,15028,15060,15076,15248,15411,15412,15428,15433,15508,15509],"fullWord":14295},{"subwords":[4046,4156,5959,6008,9079,9384,13577,13705,13712,14262,14294,14296,14307,15021,15248,15411,15413,15508,15509,15513],"fullWord":14296},{"subwords":[4046,4048,4158,4169,4237,5959,5961,6023,6033,9079,9085,9384,9389,9409,13577,13588,13702,13705,13712,13715,13716,14262,14266,14281,14294,14297,14309,14336,14403,14421,15021,15048,15248,15272,15305,15411,15415,15508,15509,15514,15524,15526,16178,16239,16298,16769,16883,16889,16890,17525,17550,17553,17555,17565,17591,17722],"fullWord":14297},{"subwords":[4046,4140,4232,5959,9079,9101,9384,13577,13705,13712,14262,14290,14294,14298,14302,14410,14576,14578,15021,15248,15411,15508,15509,15866,21127,21146,21147],"fullWord":14298},{"subwords":[4046,4048,4169,4237,9396,9399,9409,9932,9934,10041,13691,13697,13702,14299,14300,14403,14421,15422,15425,15508,15524,15534,16178,16239,16769,16772,16883,16889,16954,16979,17550,17558,17722],"fullWord":14300},{"subwords":[4046,4232,9096,9101,9396,9932,13691,13699,14299,14301,14302,14410,14578,15422,15508,21146],"fullWord":14301},{"subwords":[4714,4810,4928,4935,4936,5014,5023,5364,5377,9384,9385,13478,13577,13705,13710,13712,14262,14303,14304,14306,15060,15074,15076,15248,15428,15433,15508,15509],"fullWord":14304},{"subwords":[4714,4810,4826,4935,4939,5014,5021,5023,5037,5367,5377,5379,6033,9111,9127,9384,9385,9389,9409,13478,13488,13577,13588,13705,13710,13712,13715,13716,14262,14281,14303,14305,14306,14309,14336,14337,14403,14421,15060,15076,15087,15248,15272,15305,15428,15433,15436,15443,15508,15509,15514,15524,15526,16780,16883,16889,16890,16891,17530,17561,17562,17565,17591,17593,17722],"fullWord":14305},{"subwords":[6008,6016,6033,9384,9389,9409,13577,13588,13705,13712,13715,13716,14262,14281,14307,14308,14309,14336,14403,14421,15248,15272,15305,15508,15509,15513,15514,15524,15526,15528,16883,16889,16890,17565,17591,17660,17722],"fullWord":14308},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":14310},{"subwords":[337,341,349,481,574,776,869,9178,9376,10121,10136,10158,10182,10502,10584,10585,10611,10665,10675,10957,11148,11173,11182,11270,11276,11303,11659,13191,13200,13204,13224,13286,13741,13758,14240,14313,14314,14315,14780,14808,14816,14851,15399,15480,15508,15747],"fullWord":14315},{"subwords":[341,347,349,359,554,555,574,579,869,883,905,961,9178,9196,9376,9409,9422,11270,11275,11276,11314,11330,13200,13202,13286,13303,13321,13336,13758,13759,13839,14240,14241,14313,14314,14316,14326,14339,14403,14421,14808,14816,14818,14820,14851,14866,14891,15480,15489,15508,15524,15747,15973,16014,16028,16764,16853,16883,16889,17476,17494,17722],"fullWord":14316},{"subwords":[4714,4810,4818,4935,4938,4971,4972,4973,5014,5023,5377,5830,9109,9178,9184,9189,9384,9385,11539,11626,11743,11744,13478,13577,13593,13705,13710,13712,14262,14303,14306,14313,14317,14318,15060,15076,15202,15248,15428,15433,15480,15481,15482,15508,15509,15747],"fullWord":14318},{"subwords":[5830,6008,9178,9189,9384,11539,11743,13577,13593,13705,13712,14262,14307,14313,14317,14319,15202,15248,15480,15481,15508,15509,15513,15747],"fullWord":14319},{"subwords":[5830,5831,5845,6033,9178,9189,9196,9384,9389,9409,9422,11539,11743,11745,11764,11765,13577,13588,13593,13595,13705,13712,13715,13716,14262,14281,14309,14313,14317,14320,14326,14336,14339,14403,14421,15202,15224,15248,15272,15305,15480,15481,15484,15489,15508,15509,15514,15524,15526,15747,16375,16853,16854,16883,16889,16890,17542,17565,17591,17722],"fullWord":14320},{"subwords":[9178,9192,10584,10611,10618,10665,10957,11659,11755,14009,14313,14321,14410,15480,15490,15508,15747,21146],"fullWord":14321},{"subwords":[9178,9196,9374,9409,9422,11772,11854,11947,11961,12872,12936,13007,14032,14313,14322,14323,14326,14339,14350,14369,14371,14383,14403,14421,15480,15489,15508,15524,15627,15634,15637,15638,15747,16853,16883,16889,17406,17722],"fullWord":14323},{"subwords":[9178,9196,9409,9422,13760,13764,13813,13828,14313,14324,14325,14326,14339,14403,14421,15480,15489,15508,15524,15747,16853,16883,16889,17722],"fullWord":14325},{"subwords":[9178,9196,9409,9422,13871,14313,14326,14327,14339,14403,14421,14530,14533,14551,15480,15489,15508,15524,15747,15806,15815,15818,15820,16853,16883,16889,16900,17687,17722,18083,18103,18114,18135,19624,19628,19825],"fullWord":14327},{"subwords":[3413,4046,5856,5959,5996,9079,9207,9384,12410,12412,12453,13539,13577,13705,13712,13765,13767,13769,14262,14294,14328,15021,15175,15248,15262,15411,15508,15509,15511],"fullWord":14328},{"subwords":[9276,9284,9307,9396,9399,9409,9913,9929,9932,9934,10041,12453,12459,13765,13780,13787,13798,14329,14330,14403,14421,15498,15499,15508,15524,15534,16858,16876,16883,16889,16954,16974,16979,17248,17580,17722],"fullWord":14330},{"subwords":[9307,9318,9322,9325,9338,9409,9447,12453,12459,12463,12471,13765,13798,13799,13804,13850,13866,14331,14332,14403,14421,14427,15508,15524,16858,16883,16889,16907,17248,17255,17580,17598,17664,17665,17722,17881,17974,18894,18919,18926,18936,18947,19295,19301,19386],"fullWord":14332},{"subwords":[9374,9409,12936,13006,13007,14032,14333,14334,14350,14383,14403,14421,15508,15524,16883,16889,17406,17722],"fullWord":14334},{"subwords":[14032,14333,14335,14350,14410,15508,15672,21146],"fullWord":14335},{"subwords":[4714,4810,4826,4935,4939,5014,5021,5023,5037,5367,5377,5379,6033,9111,9127,9384,9385,9389,9409,13478,13488,13577,13588,13705,13710,13712,13715,13716,14262,14281,14303,14305,14306,14309,14336,14337,14403,14421,15060,15076,15087,15248,15272,15305,15428,15433,15436,15443,15508,15509,15514,15524,15526,16780,16883,16889,16890,16891,17530,17561,17562,17565,17591,17593,17722],"fullWord":14337},{"subwords":[6033,6039,9384,9389,9409,13577,13588,13705,13712,13715,13716,13844,14262,14281,14283,14309,14336,14338,14342,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15530,16883,16888,16889,16890,16895,16899,16903,17565,17566,17567,17591,17594,17722],"fullWord":14338},{"subwords":[9178,9196,9409,9422,9423,11774,12082,13844,14313,14326,14339,14340,14342,14403,14421,15480,15489,15508,15524,15747,16853,16857,16883,16888,16889,16899,16903,17722],"fullWord":14340},{"subwords":[9307,9360,9366,9374,9400,9405,9409,12453,12459,12513,12548,12560,12936,13007,13765,13798,13809,13811,14032,14112,14154,14157,14341,14350,14372,14383,14403,14421,15508,15524,15684,16858,16883,16889,17248,17383,17406,17580,17722],"fullWord":14341},{"subwords":[9409,13844,14342,14343,14403,14410,14421,15508,15524,16883,16888,16889,16899,16903,17597,17672,17697,17722,21146,21152,21212],"fullWord":14343},{"subwords":[9384,13577,13599,13613,13623,13705,13712,13850,14262,14344,15248,15312,15337,15508,15509,15542,15549,15555,15748,18844,18847,18926,18941,19295,19296,20080,20095,20129,20132,20177,20178],"fullWord":14344},{"subwords":[4714,4810,4935,5014,5023,5377,9384,9385,13478,13577,13705,13710,13712,14262,14303,14306,14346,14347,15060,15076,15248,15428,15433,15508,15509,21249,21282],"fullWord":14347},{"subwords":[6008,9384,13577,13705,13712,14262,14307,14346,14348,15248,15508,15509,15513,21282],"fullWord":14348},{"subwords":[6033,9384,9389,9409,13577,13588,13705,13712,13715,13716,14262,14281,14309,14336,14346,14349,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,16883,16889,16890,16929,16931,17565,17591,17722,21282,21285],"fullWord":14349},{"subwords":[1560,2058,2059,2072,2197,2205,2207,2384,2446,4618,4810,5114,5115,5200,5202,5215,5402,12752,12916,12959,12960,12979,13478,13486,13577,14020,14147,14148,14262,14350,14352,14353,14357,14995,15011,15060,15078,15248,15576,15579,15580,15600,15603,15610,15663,15664],"fullWord":14353},{"subwords":[2072,2197,2205,2446,6008,12916,12959,12979,13577,14147,14262,14350,14352,14354,14995,15011,15248,15271,15576,15579,15610,15663,15665],"fullWord":14354},{"subwords":[2072,2073,2197,2200,2205,2208,2307,2446,2476,6004,6033,12916,12925,12936,12959,12964,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14352,14355,14383,14384,14403,14995,15011,15012,15014,15248,15272,15305,15576,15579,15582,15590,15610,15611,15663,15668,15676,16423,17308,17312,17406,17419,17638],"fullWord":14355},{"subwords":[5845,5969,6004,6033,11539,11947,11948,11951,11952,11953,11961,11970,11973,11987,12872,12916,12925,12936,12979,12982,13007,13577,13593,13595,13607,14024,14025,14093,14094,14147,14149,14166,14168,14262,14281,14350,14359,14360,14369,14371,14383,14384,14403,15202,15224,15248,15272,15305,15610,15611,15627,15632,15634,15637,15638,15663,15668,15676,15747,17382,17406,17419,17542,17638],"fullWord":14360},{"subwords":[6621,6651,6937,6940,6982,7103,12785,12937,13008,13850,14032,14160,14188,14350,14361,14362,15458,15504,15508,15691,18926,18945,19075,19093,19292,19295,19323],"fullWord":14362},{"subwords":[6004,6033,10443,10447,10864,10865,10867,10868,10869,10874,10882,10883,10888,10889,12845,12848,12916,12925,12936,12979,12982,13007,13577,13607,14056,14061,14064,14065,14066,14087,14147,14149,14166,14168,14262,14281,14350,14365,14366,14383,14384,14403,15248,15272,15305,15610,15611,15621,15622,15663,15668,15676,17097,17104,17105,17107,17354,17359,17406,17419,17420,17638],"fullWord":14366},{"subwords":[10665,10864,10953,12812,13138,13874,14032,14056,14234,14345,14350,14367,15508,15617],"fullWord":14367},{"subwords":[7708,7826,7846,10793,10809,10833,10849,10864,14056,14086,14121,14127,14350,14368],"fullWord":14368},{"subwords":[11947,11989,12010,12933,12937,13008,14096,14130,14160,14188,14350,14369,14370,14379,15627,15634,15691,15747,19026,19075,19093,19318,19323],"fullWord":14370},{"subwords":[12509,12512,12548,12560,12936,13007,14107,14112,14154,14157,14350,14364,14372,14374,14375,14383,14403,17383,17389,17406],"fullWord":14375},{"subwords":[12548,12574,12887,12937,13008,14127,14154,14155,14160,14188,14350,14372,14376,14391,15659,15691,15697,19036,19060,19075,19093,19105,19106,19321,19323],"fullWord":14376},{"subwords":[6937,6939,6940,7024,7103,12905,12936,13007,14127,14350,14361,14363,14377,14378,14383,14403,14418,15644,15647,17406,17410,17626,17636],"fullWord":14378},{"subwords":[10443,10864,10865,10867,10872,10882,12845,12916,12933,12979,13569,13577,13971,14056,14061,14064,14130,14131,14147,14262,14278,14350,14365,14379,14380,15248,15610,15621,15663],"fullWord":14380},{"subwords":[6008,12916,12933,12979,13569,13577,14130,14131,14147,14262,14278,14350,14379,14381,15248,15271,15610,15663,15665],"fullWord":14381},{"subwords":[10864,10873,10887,12933,13971,13981,14009,14056,14088,14089,14130,14350,14379,14382,14410,15672],"fullWord":14382},{"subwords":[4810,4826,5114,5115,5116,5117,5200,5202,5203,5204,5215,5216,5221,5223,5225,5402,5403,6004,6033,12752,12755,12916,12925,12936,12979,12982,13007,13478,13486,13487,13488,13577,13607,14020,14023,14147,14148,14149,14166,14167,14168,14262,14281,14350,14357,14358,14383,14384,14385,14403,15060,15078,15081,15087,15248,15272,15305,15600,15603,15609,15610,15611,15663,15664,15668,15676,15677,17323,17406,17419,17530,17638,17639],"fullWord":14385},{"subwords":[6004,6008,6016,6033,12916,12925,12936,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14383,14384,14386,14403,15248,15271,15272,15305,15610,15611,15663,15665,15666,15668,15676,17406,17419,17423,17638],"fullWord":14386},{"subwords":[6004,6033,6039,12916,12925,12936,12979,12982,13007,13577,13607,13608,14147,14149,14166,14168,14169,14170,14179,14262,14281,14283,14350,14383,14384,14387,14403,15248,15272,15305,15610,15611,15663,15668,15676,15679,17406,17414,17419,17424,17434,17638,17640],"fullWord":14387},{"subwords":[9374,9409,9447,12936,12937,12944,13007,13008,13011,13850,13866,14032,14160,14165,14177,14182,14188,14201,14350,14383,14388,14403,14421,14427,15504,15507,15508,15518,15524,15691,15700,16883,16889,16907,17406,17429,17435,17598,17641,17644,17665,17722,17881,17921,17974,17985,18926,18936,18945,18946,18947,19075,19090,19093,19113,19114,19292,19294,19295,19301,19313,19323,19386],"fullWord":14388},{"subwords":[732,735,761,781,782,817,911,1009,1028,5588,5620,5956,5976,5982,6055,12680,12686,12688,12916,12923,12937,12955,12979,13008,13286,13294,13328,13329,13364,13367,13372,13439,13455,13460,13464,13577,13599,13613,13624,14027,14147,14160,14188,14247,14248,14262,14350,14390,14851,14852,14867,14898,14901,14979,15248,15312,15610,15663,15691,15694,15748,18432,18436,18437,18439,18449,18453,18463,18467,18541,18554,18981,19075,19076,19079,19093,19094,19101,19221,19323,19324],"fullWord":14390},{"subwords":[12548,12574,12887,12937,13008,14127,14154,14155,14160,14188,14350,14372,14376,14391,15659,15691,15697,19036,19060,19075,19093,19105,19106,19321,19323],"fullWord":14391},{"subwords":[4810,5114,5115,5200,5202,5215,5267,5268,5402,5408,12752,12916,12979,13095,13478,13486,13577,14020,14147,14148,14262,14350,14357,14393,14394,15060,15078,15248,15337,15600,15603,15610,15663,15664,15728,15729],"fullWord":14394},{"subwords":[5953,12547,12548,12876,12916,12918,12979,13093,13095,13539,13564,13577,14105,14147,14154,14262,14350,14372,14373,14393,14395,15238,15248,15337,15610,15663,15728,20262],"fullWord":14395},{"subwords":[6008,12916,12979,13095,13577,14147,14262,14350,14393,14396,15248,15271,15337,15610,15663,15665,15728,15730],"fullWord":14396},{"subwords":[6004,6033,12916,12925,12936,12979,12982,13007,13095,13099,13577,13607,14147,14149,14166,14168,14262,14281,14350,14383,14384,14393,14397,14403,15248,15272,15305,15337,15354,15610,15611,15663,15668,15676,15728,15732,16453,17406,17419,17638,20070,20077],"fullWord":14397},{"subwords":[902,12680,13286,13408,14229,14350,14398,14399,14851,14933,15570,15734,20410,20436,20927,20973],"fullWord":14399},{"subwords":[10864,10874,10942,10952,12936,13007,13114,13118,13977,13980,14056,14087,14229,14233,14350,14383,14398,14400,14401,14402,14403,15734,15744,17104,17121,17354,17406,17464,18268,20927,20928],"fullWord":14401},{"subwords":[4810,4826,4849,5428,5429,5471,5478,5525,5526,5528,5529,5531,6033,13478,13488,13577,13579,13581,13602,14262,14281,14403,14404,14405,14416,14438,14441,14518,14544,14545,14551,15060,15087,15248,15272,15305,15773,15777,15778,15782,15840,17530,17675,17676,17687,18066,18067,18071,18135,18136,18137,18150,19825,19846,19876,19877,19880],"fullWord":14405},{"subwords":[4774,4810,5428,5471,5507,5511,5525,5526,5528,5539,5865,12358,12624,12626,13478,13539,13544,13577,13579,13602,14262,14404,14406,14407,14438,14484,14518,15060,15227,15248,15773,15777,15778,15821,15822,19660,19802,19866],"fullWord":14407},{"subwords":[6008,13539,13577,13602,14262,14406,14408,14484,14518,14523,14541,15248,15278,15777,15780,15821,15822,19866],"fullWord":14408},{"subwords":[5918,6000,6033,12655,13539,13558,13577,13602,14262,14281,14403,14406,14409,14484,14500,14518,14544,14551,15248,15272,15305,15777,15782,15821,15822,15823,15832,15840,17683,17687,17689,18066,18071,18117,18135,18136,18137,18150,19825,19866,19867,19876,19880],"fullWord":14409},{"subwords":[6008,6016,6033,6038,13577,13596,14262,14281,14290,14293,14403,14410,14411,14412,14576,14577,15248,15272,15305,15866,15867,17672,17673,17697,21127,21130,21212],"fullWord":14412},{"subwords":[7604,7612,8015,8022,8031,8188,12453,13721,13765,13773,13807,14311,14410,14413,15461,15494,15508,21144,21146],"fullWord":14413},{"subwords":[470,481,486,574,579,961,972,973,10136,10158,10160,10161,10182,10194,10236,10957,11173,11270,11275,11330,11348,12082,13204,13224,13227,13232,13336,13344,13919,13921,14414,14415,15942,15973,16014,16020,17012,17013,17019,17020,17476,17507,17508],"fullWord":14415},{"subwords":[4826,4849,5114,5117,5200,5204,5221,5223,5263,5471,5478,5523,5524,5525,5526,5531,6033,12752,12755,12916,12925,12936,12945,13478,13488,13607,14020,14023,14166,14167,14416,14417,14438,14441,14551,17323,17406,17447,17448,17530,17675,17676,18066,18067,18135,18136,19825,19876,19877],"fullWord":14417},{"subwords":[325,932,961,972,973,8321,8324,8362,8367,8369,8409,8416,13336,13344,13408,13421,14419,14420,16014,16020,16033,16089,16096,16571,17476,17507,18201,18202,18210,20449,20450,20454,20455,20599,20612,20613],"fullWord":14420},{"subwords":[4048,4237,6023,6033,6038,8549,8607,9051,9054,13681,14423,14424,16298,16574,16758,17525,17697,21127,21130],"fullWord":14424},{"subwords":[3354,3357,3864,3883,3888,3944,3964,4029,4048,4237,8714,8845,8856,8886,9058,9060,12810,12936,13681,14172,14187,14423,14425,16194,16693,16758,17316,17406,17407,17409,17472,17697],"fullWord":14425},{"subwords":[4048,4237,13681,14423,14426,16758,17697],"fullWord":14426},{"subwords":[1962,3529,3580,4046,4047,4049,4242,4302,10504,10665,14428,14430,14431],"fullWord":14431},{"subwords":[4049,4268,4278,4302,4312,4326,5654,13472,13577,13590,13602,14262,14433,14435,14436,14452,14518,15021,15248,15766,15777,19595],"fullWord":14436},{"subwords":[4728,5466,5467,5471,5472,5525,5526,5527,5533,5756,10378,10470,13478,13950,14438,14439,14454,14455],"fullWord":14439},{"subwords":[5466,5498,5525,14009,14438,14440,21224],"fullWord":14440},{"subwords":[1636,2004,2106,2197,2251,10443,10470,10748,10753,10864,10865,10917,10918,10961,12845,12916,14056,14061,14428,14442,14454],"fullWord":14442},{"subwords":[6021,12916,12937,12979,13008,13051,13059,13066,13080,13577,13599,13602,13613,13624,14027,14147,14160,14188,14220,14224,14226,14262,14350,14443,14518,14561,15248,15312,15610,15663,15691,15694,15706,15722,15723,15748,15777,15858,18981,19075,19076,19079,19093,19101,19155,19323,19324,19336,19356,19453,19895],"fullWord":14443},{"subwords":[5471,5481,5525,5526,6406,6501,13478,14438,14444,14445],"fullWord":14445},{"subwords":[7194,13577,13602,14262,14444,14446,14518,15114,15248,15777,15783],"fullWord":14446},{"subwords":[6593,7179,12453,13765,14444,14447,14484],"fullWord":14447},{"subwords":[5471,5485,5525,5526,5709,13478,13516,14438,14449,14450],"fullWord":14450},{"subwords":[7604,7612,7759,8151,8154,9276,9913,9922,9932,10051,12453,13721,13765,13773,13780,13884,14449,14453,14484,14491],"fullWord":14453},{"subwords":[6033,10470,11029,11033,13577,13602,14003,14262,14281,14403,14454,14456,14457,14458,14472,14474,14518,14536,14538,14544,14551,15248,15272,15305,15777,15782,15800,15804,15840,17128,17141,17142,17687,18066,18071,18135,18136,18137,18150,19825,19876,19880],"fullWord":14457},{"subwords":[7604,7612,7759,8141,8151,10637,10665,10981,11012,11025,12438,12453,13721,13765,13773,13987,14449,14459,14484,19585],"fullWord":14459},{"subwords":[4728,4744,5471,5472,5492,5525,5526,5533,5756,5780,10378,10470,13478,13950,14438,14454,14455,14460,14461],"fullWord":14461},{"subwords":[5780,10470,11029,13577,13602,14262,14454,14456,14460,14462,14518,14536,15248,15777,15800],"fullWord":14462},{"subwords":[5780,10460,10468,10470,11050,13532,13613,14454,14460,14463,14561,18591,19425,19453,19605],"fullWord":14463},{"subwords":[5780,10470,10495,11065,14009,14454,14460,14464,21110,21115,21127,21222,21224],"fullWord":14464},{"subwords":[4728,5471,5472,5525,5526,5533,5756,10378,10470,13478,13569,13950,14237,14438,14454,14455,14465,14466,14506,19814],"fullWord":14466},{"subwords":[10470,11029,13569,13577,13602,14262,14278,14454,14456,14465,14467,14506,14518,14536,14539,15248,15777,15800,19815],"fullWord":14467},{"subwords":[10665,10691,13813,13850,14465,14468,14506,14512,14561,18863,18926,19423,19453,19605],"fullWord":14468},{"subwords":[481,486,905,961,10182,10194,13204,13232,13286,13321,13336,13391,14003,14253,14403,14471,14536,14538,14551,14851,14866,14891,15942,16014,17019,17141,17142,17476,17494,17687,18135,18146,19825,19837,19868,19871],"fullWord":14471},{"subwords":[4728,4826,4849,5471,5472,5476,5478,5496,5525,5526,5531,5533,5756,5760,6033,10378,10470,13478,13488,13950,14003,14416,14438,14441,14454,14455,14458,14472,14473,14551,17044,17128,17129,17530,17675,17676,18066,18067,18135,18136,19825,19876,19877],"fullWord":14473},{"subwords":[6033,10470,11029,11033,13577,13602,14003,14262,14281,14403,14454,14456,14457,14458,14472,14474,14518,14536,14538,14544,14551,15248,15272,15305,15777,15782,15800,15804,15840,17128,17141,17142,17687,18066,18071,18135,18136,18137,18150,19825,19876,19880],"fullWord":14474},{"subwords":[6033,6039,10453,10470,14003,14004,14454,14458,14472,14475,14551,14558,17128,17130,17677,18066,18073,18135,18136,18140,18147,19825,19876,19882],"fullWord":14475},{"subwords":[4046,4049,4268,4293,4302,5846,5959,9079,9178,11619,13705,14433,14478,19624],"fullWord":14478},{"subwords":[5782,5846,10470,10957,10995,12110,12127,12131,13988,13991,14454,14479,19624],"fullWord":14479},{"subwords":[5471,5503,5525,5526,5846,12091,13478,13569,14237,14438,14480,14481,14506,19624,19625,19814],"fullWord":14481},{"subwords":[5846,11539,13569,13577,13593,13602,14262,14278,14480,14482,14506,14518,15202,15248,15747,15777,15806,15815,19624,19815],"fullWord":14482},{"subwords":[4049,4302,8989,9002,14484,14485,14486,14505,21224],"fullWord":14486},{"subwords":[4985,5008,5014,5022,5507,5525,9303,9325,9449,12453,12463,12659,13765,13799,13850,14438,14484,14487,14501,14561,18894,18926,19434,19453,19701],"fullWord":14487},{"subwords":[5996,9344,9384,12453,13539,13577,13602,13705,13712,13765,13769,14262,14406,14484,14488,14518,14531,15175,15248,15262,15508,15509,15511,15777,15795,15821,15822,19749,19750,19864,19866],"fullWord":14488},{"subwords":[9293,10662,10665,11024,11025,12438,12453,13765,13807,14009,14484,14489,14505,21144,21146,21224],"fullWord":14489},{"subwords":[8664,8671,8678,8679,8989,8997,9002,9307,12453,12459,13651,13765,13798,13841,13871,14421,14484,14490,14500,14551,14552,16629,16639,16748,16858,16874,16883,17248,17580,17683,18083,18117,18135,19592,19690,19767,19825],"fullWord":14490},{"subwords":[9836,9855,12640,13539,13577,13590,13602,14262,14406,14452,14484,14491,14492,14518,15248,15777,15821,15822,19595,19866],"fullWord":14492},{"subwords":[9836,9865,12640,13539,14452,14484,14491,14493,14497,14505,19595,21120,21127,21218,21224],"fullWord":14493},{"subwords":[9276,9836,9846,9913,9919,9932,12453,12640,13524,13539,13705,13732,13765,13769,13780,14452,14484,14491,14494,19595],"fullWord":14494},{"subwords":[9276,9297,9913,9932,12453,12651,13765,13780,14484,14491,14495,19741],"fullWord":14495},{"subwords":[4774,5471,5507,5511,5525,5526,5865,12624,12651,13478,13539,13544,14438,14484,14498,19737,19802],"fullWord":14498},{"subwords":[12651,13539,13577,13602,14262,14406,14484,14499,14518,15248,15777,15821,15822,19737,19866],"fullWord":14499},{"subwords":[4774,4788,4805,5471,5479,5507,5511,5525,5526,5865,12374,12624,12659,13478,13539,13544,13560,13613,14438,14484,14501,14502,14561,18607,18610,19434,19438,19439,19453,19802],"fullWord":14502},{"subwords":[6021,12374,12659,13539,13560,13577,13599,13602,13613,14262,14406,14484,14501,14503,14518,14561,15241,15248,15312,15748,15777,15821,15822,15833,15858,18607,18649,19356,19434,19438,19440,19453,19476,19866],"fullWord":14503},{"subwords":[732,762,781,1009,5620,5627,5956,6055,13268,13364,13367,13439,13464,13569,13613,14506,14507,14508,14511,14561,18436,18437,18508,18512,18541,19453],"fullWord":14511},{"subwords":[10665,10672,10681,13813,13828,13871,14003,14421,14465,14469,14506,14512,14513,14515,14551,16883,17088,17092,18083,18135,19825],"fullWord":14513},{"subwords":[5471,5525,5526,13478,13569,14237,14438,14506,14514,19814],"fullWord":14514},{"subwords":[1053,5525,8217,8321,8327,8351,9002,13171,13286,13292,14438,14516,14736,14775,14851],"fullWord":14516},{"subwords":[200,905,961,1053,5525,13171,13177,13286,13292,13321,13336,14253,14403,14438,14441,14517,14551,14736,14751,14851,14866,14891,15893,16014,17476,17494,17675,17687,18135,18146,19825,19846,19868,19871],"fullWord":14517},{"subwords":[4673,4678,4810,5428,5471,5525,5526,5528,5984,13478,13489,13490,13506,13577,13579,13580,13583,13602,14262,14404,14438,14518,14519,14520,15060,15093,15248,15773,15777,15778,15836],"fullWord":14520},{"subwords":[5984,6033,13489,13506,13508,13510,13577,13583,13584,13602,13604,14262,14281,14403,14518,14519,14521,14544,14551,15248,15272,15305,15334,15777,15782,15836,15837,15840,16319,16336,16340,16425,17658,17687,18066,18071,18135,18136,18137,18150,19825,19876,19878,19880],"fullWord":14521},{"subwords":[10470,10495,11029,11065,11074,13577,13602,14009,14010,14262,14290,14410,14454,14456,14518,14522,14536,14576,15201,15248,15267,15777,15800,15866,21115,21127,21222,21224],"fullWord":14522},{"subwords":[6018,6021,6022,6033,13577,13599,13602,13609,13613,13626,14262,14281,14284,14403,14427,14518,14524,14544,14551,14561,14567,15248,15272,15305,15306,15312,15748,15777,15782,15840,15852,15858,15861,16409,16457,16468,17687,17693,17836,17961,18013,18066,18071,18074,18135,18136,18137,18148,18150,19356,19359,19386,19453,19456,19482,19825,19826,19876,19880],"fullWord":14524},{"subwords":[4810,5351,5420,5428,5471,5485,5525,5526,5528,5988,13478,13516,13577,13579,13602,14262,14404,14438,14449,14518,14525,14526,15060,15141,15248,15773,15777,15778,15790,19855,19856],"fullWord":14526},{"subwords":[5988,6008,13516,13577,13602,14262,14449,14518,14523,14525,14527,14541,15141,15248,15777,15780,15790,19855,19858],"fullWord":14527},{"subwords":[5988,5992,6033,13516,13519,13577,13602,14262,14281,14403,14449,14451,14518,14525,14528,14544,14551,15141,15248,15272,15305,15777,15782,15790,15794,15840,17687,17688,18066,18071,18135,18136,18137,18150,18160,19825,19855,19860,19876,19880],"fullWord":14528},{"subwords":[6621,7140,7194,7207,14410,14529,15508,21146,21224],"fullWord":14529},{"subwords":[5996,9344,9384,12453,13539,13577,13602,13705,13712,13765,13769,14262,14406,14484,14488,14518,14531,15175,15248,15262,15508,15509,15511,15777,15795,15821,15822,19749,19750,19864,19866],"fullWord":14531},{"subwords":[9307,9409,12453,12459,13765,13798,13871,14403,14421,14484,14500,14532,14551,15508,15524,15795,15799,15821,15832,16858,16883,16889,16900,17248,17580,17683,17687,17689,17722,18083,18117,18135,19749,19825,19866,19867],"fullWord":14532},{"subwords":[9178,9196,9409,9422,13871,14313,14326,14327,14339,14403,14421,14530,14533,14551,15480,15489,15508,15524,15747,15806,15815,15818,15820,16853,16883,16889,16900,17687,17722,18083,18103,18114,18135,19624,19628,19825],"fullWord":14533},{"subwords":[9409,9447,13850,13866,13871,14403,14421,14427,14534,14551,14561,14567,15508,15524,15852,15858,15861,16883,16889,16900,16907,16917,16918,17598,17665,17687,17693,17722,17881,17974,18083,18085,18135,18148,18926,18936,18947,19295,19301,19386,19453,19456,19482,19825],"fullWord":14534},{"subwords":[13850,13870,14410,14535,14561,15508,15858,18926,19295,19377,19453,21146,21224,21226],"fullWord":14535},{"subwords":[4728,4810,5428,5471,5472,5525,5526,5528,5533,5756,10378,10470,11029,11030,13478,13577,13579,13602,13950,14262,14404,14438,14454,14455,14456,14518,14536,14537,15060,15248,15773,15777,15778,15800,15801],"fullWord":14537},{"subwords":[10470,11029,13569,13577,13602,14262,14278,14454,14456,14465,14467,14506,14518,14536,14539,15248,15777,15800,19815],"fullWord":14539},{"subwords":[14009,14410,14465,14470,14506,14536,14540,21224],"fullWord":14540},{"subwords":[4810,5428,5471,5525,5526,5528,6008,13478,13577,13579,13602,14262,14404,14438,14518,14523,14541,14542,15060,15248,15773,15775,15777,15778,15780],"fullWord":14542},{"subwords":[4810,4826,4849,5428,5429,5471,5478,5525,5526,5528,5529,5531,6033,13478,13488,13577,13579,13581,13602,14262,14281,14403,14404,14405,14416,14438,14441,14518,14544,14545,14551,15060,15087,15248,15272,15305,15773,15777,15778,15782,15840,17530,17675,17676,17687,18066,18067,18071,18135,18136,18137,18150,19825,19846,19876,19877,19880],"fullWord":14545},{"subwords":[6008,6016,6033,13577,13602,14262,14281,14403,14518,14523,14541,14543,14544,14546,14551,15248,15272,15305,15777,15780,15781,15782,15840,17687,18066,18071,18135,18136,18137,18150,18152,19825,19876,19880],"fullWord":14546},{"subwords":[6033,6039,13577,13602,14262,14281,14283,14403,14518,14544,14547,14551,14558,15248,15272,15305,15777,15782,15840,15841,15849,17677,17687,17692,18066,18071,18072,18073,18135,18136,18137,18139,18140,18147,18150,19825,19876,19880,19881,19882,19886],"fullWord":14547},{"subwords":[6033,13577,13602,14262,14281,14403,14518,14544,14548,14551,15248,15272,15305,15777,15782,15840,17687,18066,18071,18135,18136,18137,18150,19825,19876,19880,19890],"fullWord":14548},{"subwords":[13577,13602,14262,14290,14410,14518,14550,14576,15248,15337,15777,15866,20085,21127,21224],"fullWord":14550},{"subwords":[4826,4849,5471,5478,5525,5526,5531,6033,8549,8945,8946,8947,9002,13478,13488,14416,14438,14441,14551,14552,14553,16574,16581,17530,17675,17676,18066,18067,18135,18136,19592,19825,19876,19877],"fullWord":14553},{"subwords":[6033,8549,8552,8584,8934,8945,8947,9002,13577,13602,14262,14281,14403,14518,14544,14551,14552,14554,15248,15272,15305,15777,15782,15840,15842,16574,17687,18066,18071,18135,18136,18137,18150,19592,19825,19876,19880,19883],"fullWord":14554},{"subwords":[6033,6039,8549,8945,8947,9002,14551,14552,14555,14558,16574,16609,17677,18066,18073,18135,18136,18140,18147,19592,19825,19876,19882],"fullWord":14555},{"subwords":[9002,14506,14515,14551,14552,14556,18135,19592,19825],"fullWord":14556},{"subwords":[6033,6039,14551,14558,14559,17677,18066,18073,18135,18136,18140,18147,19825,19876,19882],"fullWord":14559},{"subwords":[6937,12771,12785,12937,13059,14188,14209,14211,14224,14444,14561,14562,18986,18991,19075,19414,19453,19580],"fullWord":14562},{"subwords":[12560,12574,12591,12597,12659,12663,12888,12936,12937,12944,12945,13055,13059,13082,14112,14182,14188,14201,14224,14227,14427,14484,14500,14501,14504,14551,14561,14563,14564,14567,17278,17281,17383,17406,17435,17447,17644,17648,17683,17921,17934,18005,18117,18135,18148,19036,19057,19075,19090,19386,19434,19452,19453,19456,19772,19780,19813,19825],"fullWord":14564},{"subwords":[12937,13059,13078,14188,14224,14561,14565,14569,19075,19131,19160,19453,19493,19499],"fullWord":14565},{"subwords":[5014,5022,5034,5377,5380,5525,9449,13850,14438,14561,14566,15428,15508,15858,18926,19295,19453,19465],"fullWord":14566},{"subwords":[4048,4049,4237,4238,4241,4302,4311,4367,4375,4394,8935,9002,9026,9027,13438,14427,14551,14552,14561,14567,14568,16265,16753,18050,18135,18148,18802,19386,19453,19456,19486,19592,19825],"fullWord":14568},{"subwords":[4805,5471,5479,5525,5526,13478,13613,14438,14561,14569,14570,19453,19493],"fullWord":14570},{"subwords":[13489,13613,14561,14569,14571,18576,19453,19493,19494],"fullWord":14571},{"subwords":[6021,13577,13599,13602,13613,14262,14518,14561,14569,14572,15248,15312,15748,15777,15858,19356,19453,19493,19900],"fullWord":14572},{"subwords":[10864,10874,12560,12573,12882,12936,13981,13983,14009,14056,14087,14088,14091,14112,14115,14187,14573,14574,17104,17149,17354,17383,17406,17472,17697,21183],"fullWord":14574},{"subwords":[10665,10864,10887,12812,12824,13981,14009,14032,14056,14088,14350,14410,14575,15508,15617,15620,15670,15672,21146],"fullWord":14575},{"subwords":[9384,13577,13599,13613,13623,13705,13712,13719,13850,13870,14262,14290,14410,14576,14579,15248,15312,15508,15509,15542,15748,15866,18844,18847,18926,18941,19257,19295,19296,19377,19559,19564,19570,21127,21135,21136,21146,21147],"fullWord":14579},{"subwords":[8789,8845,8892,9058,12574,12612,12937,13670,14115,14188,14580,18743,18806,19036,19059,19075,19186,19561,19567,21183],"fullWord":14580},{"subwords":[6033,6038,13705,13716,13874,13877,13880,14421,14581,14582,14583,14584,14585,16483,16499,16883,16922,17697,21127,21130,21146,21147,21148,21152],"fullWord":14584},{"subwords":[950,1070,1071,3033,14589,14590,14591,15880,15884,18051,19871],"fullWord":14591},{"subwords":[1070,2812,3100,14589,14590,14592,14608,14633,21041,21047,21218],"fullWord":14592},{"subwords":[7267,7447,8180,14589,14596,14597,14633],"fullWord":14597},{"subwords":[299,8233,8731,8951,14589,14596,14598,14694,19583],"fullWord":14598},{"subwords":[337,340,9375,10673,14589,14599,14600,14601,14603,14609,14629,14659,14660,15931,15942,18083,19871],"fullWord":14601},{"subwords":[693,700,1074,9325,12300,12463,12659,14589,14599,14602,14616,14618,14630,14659,14660,14676,14689,18347,18408,18508,18894,19434,19435,19701],"fullWord":14602},{"subwords":[1053,1070,5471,5489,5627,14586,14589,14593,14595,14604,14605,14635,19595],"fullWord":14605},{"subwords":[817,867,1070,5588,5627,5976,14589,14595,14604,14606,14620,14635,14798,15274,15777,19595,19847],"fullWord":14606},{"subwords":[950,1070,1071,5627,14589,14595,14604,14607,14635,14650,15939,16270,16416,17711,18066,19593,19595,19596,19871,19876],"fullWord":14607},{"subwords":[470,497,501,586,10136,10161,11173,11330,11387,11390,14589,14609,14611,14612,14614,15942,15973,17012,17135,18103,19871],"fullWord":14612},{"subwords":[497,586,594,10136,10304,11173,11387,11408,14589,14609,14611,14613,14614,14633,21051],"fullWord":14613},{"subwords":[183,605,1053,4492,5172,5173,5507,5523,12493,14589,14593,14615,14694,14695,19664],"fullWord":14615},{"subwords":[596,693,785,1074,12300,12659,14589,14616,14617,14630,18408,18508,19434,19435],"fullWord":14617},{"subwords":[693,700,1074,9325,12300,12463,12659,14589,14599,14602,14616,14618,14630,14659,14660,14676,14689,18347,18408,18508,18894,19434,19435,19701],"fullWord":14618},{"subwords":[693,711,712,1074,1076,12300,12659,12663,14587,14589,14616,14619,14630,15986,16041,17706,18005,18117,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":14619},{"subwords":[867,868,905,950,1070,1071,14589,14620,14621,15848,19868,19871],"fullWord":14621},{"subwords":[817,911,1009,1096,5588,5620,5627,5976,5982,6055,14589,14595,14622,14623,14630,14631,14635,14898,14901,15274,15312,15748,15777,15858,18449,18453,18508,18541,18554,19356,19847],"fullWord":14623},{"subwords":[911,1093,12680,12686,13008,13051,13059,14589,14622,14624,14630,14694,14701,14898,15691,15722,15858,18432,18449,18463,18508,19093,19094,19155],"fullWord":14624},{"subwords":[905,911,918,14587,14589,14622,14625,14630,14898,14912,15852,15858,15861,16041,17706,17773,18172,18449,18472,18508,19381,19868,19871],"fullWord":14625},{"subwords":[911,14589,14622,14626,14630,14898,15858,18449,18508,19575],"fullWord":14626},{"subwords":[785,786,905,1078,1081,14589,14627,19868,19871],"fullWord":14627},{"subwords":[817,911,1009,1096,5588,5620,5627,5976,5982,6055,14589,14595,14622,14623,14630,14631,14635,14898,14901,15274,15312,15748,15777,15858,18449,18453,18508,18541,18554,19356,19847],"fullWord":14631},{"subwords":[817,1106,1109,5588,5627,5976,14589,14595,14632,14635,14921,15274,15337,15777,19847],"fullWord":14632},{"subwords":[712,5627,5918,12229,14589,14595,14635,14636,14637,14650,15986,15995,16270,16416,18066,18117,19871,19876],"fullWord":14637},{"subwords":[1196,1197,5619,5627,14589,14595,14633,14634,14635,14638,14650,14656,14657,16103,16270,16416,18066,18077,19871,19876,21097,21105,21130],"fullWord":14638},{"subwords":[1196,5627,14589,14595,14633,14635,14639,14656,21097],"fullWord":14639},{"subwords":[5918,5923,12339,14635,14640,14641,14650,16319,16335,16416,18066,18117,19876,19878],"fullWord":14641},{"subwords":[5984,14635,14642,14643,14650,15274,15334,15777,15782,15840,16319,16340,16416,16425,18066,18071,18150,19876,19878,19880],"fullWord":14643},{"subwords":[5780,5781,10470,14635,14644,14645,14650,16368,16416,17128,18066,19876],"fullWord":14645},{"subwords":[4268,5856,8540,8945,8989,14635,14647],"fullWord":14647},{"subwords":[5918,6000,12655,14635,14648,14649,14650,15274,15777,15782,15821,15822,15823,15832,15840,16416,18066,18071,18117,18150,19866,19867,19876,19880],"fullWord":14649},{"subwords":[6039,14587,14635,14650,14651,14652,16416,16457,16464,18066,18073,18074,18075,19876,19882],"fullWord":14652},{"subwords":[5984,14635,14642,14653,14654,15274,15777],"fullWord":14654},{"subwords":[14635,14650,14653,14655,16319,16416,18066,19876,19878],"fullWord":14655},{"subwords":[399,5627,5970,10314,10324,10470,14589,14595,14609,14610,14635,14658,21241],"fullWord":14658},{"subwords":[3272,4268,8612,8625,8945,9079,14635,14659,14661],"fullWord":14661},{"subwords":[9375,14659,14662,14663,16178,16769,16772,16954,18051,18083],"fullWord":14663},{"subwords":[1009,5620,5627,6055,14589,14595,14599,14630,14635,14659,14660,14666,14667,14689,14690,18347,18508,18541,18844],"fullWord":14667},{"subwords":[14635,14659,14666,14668,14689,14690,18844],"fullWord":14668},{"subwords":[9375,9447,14587,14635,14650,14651,14659,14666,14669,14689,14690,14692,16416,16457,16907,16911,16917,18066,18074,18083,18085,18086,18844,18850,18947,19876],"fullWord":14669},{"subwords":[9152,9155,9375,10673,14659,14670,14671,16834,18083],"fullWord":14671},{"subwords":[9375,9447,10673,10686,10691,10707,11044,14587,14659,14672,14673,14689,14692,16840,16907,16917,17093,17147,18083,18085,18863,18947,19605],"fullWord":14673},{"subwords":[3413,3416,4268,5856,9079,9207,12410,14635,14659,14674],"fullWord":14674},{"subwords":[9307,9375,14659,14675,16858,18083,18117,21144,21145],"fullWord":14675},{"subwords":[9307,9318,9325,9375,9447,12463,12471,12659,12663,14587,14659,14676,14677,14689,14692,16858,16907,16917,17255,17717,18005,18083,18085,18117,18894,18919,18947,19434,19447,19452,19701,19706],"fullWord":14677},{"subwords":[9375,13871,14421,14551,14659,14678,14679,14680,14681,16883,18083,18135,19825],"fullWord":14681},{"subwords":[4714,4810,4935,5023,5471,9384,9385,9449,14586,14635,14659,14664,14682,14683,15060,15274,15428,15433,15773,15777,15778],"fullWord":14683},{"subwords":[9375,9384,9389,9409,14635,14650,14659,14682,14684,15274,15526,15539,15777,15782,15840,16416,16796,16889,16890,17718,17722,18066,18071,18083,18150,19876,19880],"fullWord":14684},{"subwords":[9375,9396,9399,9409,10041,14659,14685,14686,15534,15848,16889,16954,17722,18083],"fullWord":14686},{"subwords":[9375,9409,9447,14587,14659,14687,14688,14689,14692,15852,15858,15861,16889,16907,16917,17720,17722,17881,18083,18085,18947],"fullWord":14688},{"subwords":[9384,14635,14659,14682,14693,15274,15337,15549,15777,20129,20132],"fullWord":14693},{"subwords":[9307,9360,9366,9369,9375,12560,12597,12888,13048,14659,14694,14696,14697,14700,16858,17383,18083,18117],"fullWord":14697},{"subwords":[9369,9375,9447,13048,13055,13059,13082,14587,14659,14689,14691,14692,14694,14698,14699,14700,16907,16917,17435,18083,18085,18947],"fullWord":14699},{"subwords":[1093,1095,12686,12692,13055,13059,13082,14587,14589,14630,14694,14700,14701,14702,16041,17435,17706,17885,18432,18435,18508,19871],"fullWord":14702},{"subwords":[5114,5234,5237,5471,5479,5523,12752,13059,13065,14586,14635,14694,14695,14703,14704,18981,18983,19091],"fullWord":14704},{"subwords":[12979,13008,13051,13059,13066,13080,14635,14694,14703,14705,15274,15312,15610,15691,15694,15706,15722,15723,15748,15777,15858,18981,19091,19093,19101,19111,19155,19356,19895],"fullWord":14705},{"subwords":[13055,13059,13082,14587,14635,14650,14651,14694,14700,14703,14706,16416,16457,17435,18066,18074,18981,18985,19091,19092,19876],"fullWord":14706},{"subwords":[1093,8378,8892,9026,12686,12690,13059,14589,14630,14694,14701,14707,14708,18432,18508,18743,18759,19892],"fullWord":14708},{"subwords":[17,25,31,72,817,911,1009,1219,1366,1367,1377,1462,1464,1535,1542,1721,1722,2308,2317,2349,5588,5620,5632,5976,5982,6055,14709,14898,14901,14995,15312,15748,18302,18449,18453,18541,18554],"fullWord":14709},{"subwords":[25,67,349,359,905,1366,1367,1371,1419,1422,1763,1767,1772,2308,2343,9376,9409,14710,14711,15402,15410,16028,16765,16889,17722],"fullWord":14711},{"subwords":[25,72,349,911,1282,1366,1367,1462,1767,1881,2308,2349,2444,9376,14710,14712,14898,15402,18302,18347,18449],"fullWord":14712},{"subwords":[17,25,43,44,385,399,817,1219,1220,1301,1304,1366,1367,1369,1377,1510,1535,1636,1895,1915,1933,2308,2317,5588,5592,5632,5976,10061,10324,10355,14713,14968,14995],"fullWord":14713},{"subwords":[67,349,359,817,825,858,863,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,1763,1790,1791,2308,2317,2318,2331,2343,2417,2423,5588,5599,5976,5977,9376,9384,9389,9409,14716,14788,14881,14995,15014,15402,15410,15526,15869,16028,16270,16286,16419,16423,16424,16765,16889,16890,17722],"fullWord":14716},{"subwords":[93,112,121,526,534,796,817,869,2848,2853,2941,2954,4065,4110,4120,4131,5588,5976,5984,11086,11089,11091,11276,11281,11286,11437,11539,11543,14717,14719,14808,14975,15021,15202],"fullWord":14719},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2958,2959,2960,3001,3021,5588,5599,5976,5977,6008,6016,6023,14717,14720,14721,14722,14872,14881,14883,14983,14988,15021,15048,15880,16142,16145,16147,16270,16286,16298,16419],"fullWord":14721},{"subwords":[337,349,372,377,796,852,2813,2941,2971,3402,3452,4050,9376,10072,10121,10502,10675,14723,14780,15399],"fullWord":14723},{"subwords":[93,121,349,352,796,817,2941,2954,2958,3156,3402,4156,5588,5976,5993,6008,9079,9376,9384,14717,14720,14724,14872,14983,15021,15411,15413],"fullWord":14724},{"subwords":[337,349,361,796,2813,2941,2971,3100,3402,3452,3487,4232,9101,9376,10072,10089,10121,10304,10502,10675,11076,14725,14735,14780,14939,15399,15558,15864],"fullWord":14725},{"subwords":[110,287,314,349,796,807,2801,2869,2941,2970,3402,3408,4062,7283,7375,7604,7918,8015,9207,9208,9376,9378,12230,12270,14726,14758,14784,14821,14832,14838,15461,15494],"fullWord":14726},{"subwords":[341,347,349,359,554,555,796,810,869,883,905,2848,2868,2941,3001,3402,4065,4068,9376,9409,9422,11086,11105,11276,11281,11284,11314,11330,11617,11618,11759,14727,14808,14820,15480,15489,15880,15973,16028,16129,16142,16178,16221,16236,16764,16769,16889,17722],"fullWord":14727},{"subwords":[126,134,349,359,796,810,905,911,918,997,2941,3001,3003,3011,3041,3052,3064,3402,3429,4238,4241,9376,9409,9447,14728,14898,14912,15880,16028,16041,16142,16157,16178,16769,16889,16907,16908,17722,17744,17773,17881,17967,18347,18449,18472,18474,18823,18830,18947,19381],"fullWord":14728},{"subwords":[93,94,121,122,796,800,808,817,867,2766,2780,2807,2808,2941,2949,2954,2955,3111,4107,4431,4516,4522,4607,4639,4651,4810,5316,5348,5355,5588,5976,14717,14718,14729,14730,14736,14798,14799,14961,15021,15028,15060],"fullWord":14730},{"subwords":[93,121,796,817,867,2807,2941,2954,2958,4107,5588,5976,6008,14717,14720,14729,14731,14798,14800,14872,14983,15021],"fullWord":14731},{"subwords":[93,121,126,796,817,867,911,1009,2807,2941,2954,2962,3003,3004,3052,3055,3161,4085,4107,5588,5620,5976,5982,6055,6057,9791,14717,14729,14732,14798,14898,14901,14959,15021,15049,15312,15748,18326,18328,18358,18360,18449,18453,18541,18545,18554,19197,19201,19244],"fullWord":14732},{"subwords":[118,796,809,2869,2941,3777,3826,3852,3913,3922,4186,12270,12271,12548,12680,12965,12966,14734,14821,15568,15592],"fullWord":14734},{"subwords":[200,896,905,14736,14737,14738,14751,14871,15893],"fullWord":14738},{"subwords":[148,151,155,396,399,817,4438,4466,4516,4517,4590,4601,4607,4728,4810,5340,5588,5592,5659,5756,5976,10090,10091,10093,10094,10097,10202,10203,10324,10327,10355,10378,14736,14739,14961,14962,14968,15060],"fullWord":14739},{"subwords":[326,337,349,372,377,852,854,4891,9376,10090,10119,10121,10122,10202,10502,10530,10531,10675,14736,14740,14776,14780,15399,15428],"fullWord":14740},{"subwords":[326,349,596,605,852,854,4492,4493,4532,4897,4985,4986,5314,9376,9378,12227,12234,12274,14736,14741,14776,14784,14821,14826,14838,15428,15491],"fullWord":14741},{"subwords":[168,183,197,200,326,336,349,359,854,887,905,4461,4901,5037,5212,5216,5217,5219,5221,9127,9376,9409,12680,12683,13007,14736,14743,14744,14751,14776,14779,15428,15443,15561,15563,15600,15609,15673,15893,15928,16028,16030,16889,17303,17323,17324,17722],"fullWord":14744},{"subwords":[200,325,326,336,349,359,854,905,932,4461,4543,4901,5037,5046,8217,8245,8248,8327,8331,8362,8366,8617,8678,8934,9127,9376,9409,14736,14745,14751,14775,14776,14779,14886,15428,15443,15893,15928,16028,16503,16547,16889,17722],"fullWord":14745},{"subwords":[326,341,349,540,586,854,869,920,1053,4472,4896,4971,5318,5424,9376,9449,11107,11145,11276,11285,11626,12091,12095,14736,14746,14776,14808,15428,15480,15806],"fullWord":14746},{"subwords":[200,326,336,349,359,854,905,1053,4461,4901,5037,9127,9376,9409,9449,9450,14736,14747,14751,14776,14779,15428,15443,15893,15928,16028,16063,16889,17722,18083,19846,19868,19871],"fullWord":14747},{"subwords":[183,191,817,869,871,4472,4475,4516,4607,4763,4810,4818,4819,5114,5115,5163,5165,5213,5318,5342,5588,5658,5976,11107,11115,11120,11265,11276,11286,11437,11438,11539,11831,11833,11970,12680,12681,12752,12979,12980,14736,14748,14808,14961,14975,15060,15078,15202,15561,15564,15565,15600,15603,15610,15627,15632],"fullWord":14748},{"subwords":[183,195,196,197,200,605,610,905,909,4492,4532,4536,5172,5173,5188,5216,5217,5221,12274,12493,12501,12548,12560,12680,12683,13007,14736,14749,14750,14751,14821,14826,14828,15561,15563,15568,15569,15600,15609,15673,15893,15986,15988,16030,17303,17323,17324,17383,17384],"fullWord":14750},{"subwords":[230,234,349,828,852,6254,6308,6621,9376,14752,15450],"fullWord":14752},{"subwords":[399,817,828,5588,5592,5765,5976,6308,6317,6392,6464,6710,6734,10324,10333,10355,14753,14968,15114],"fullWord":14753},{"subwords":[254,255,817,828,911,1009,4447,4448,4516,4537,4551,4553,4595,4607,4683,4701,4810,4812,5307,5327,5588,5620,5705,5976,5982,6055,6230,6231,6232,6308,6317,6318,6332,6333,6344,6347,6348,6392,6399,6406,6485,7042,7056,7073,14736,14754,14755,14898,14901,14902,14961,15060,15114,15135,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19205,19233,19243],"fullWord":14755},{"subwords":[254,255,817,828,911,1009,5588,5620,5705,5976,5982,6008,6055,6308,6317,6319,6332,6344,6347,6392,6399,6485,7042,7043,7073,14754,14756,14872,14898,14901,14903,14983,15114,15135,15312,15748,18449,18453,18541,18554,18652,18653,19243],"fullWord":14756},{"subwords":[263,787,1210,1256,1366,2308,2319,7242,7267,7268,7375,7377,7900,14758,14759,14761],"fullWord":14761},{"subwords":[269,270,817,4450,4516,4607,4810,5310,5351,5588,5666,5707,5709,5976,5988,7253,7267,7269,7270,7271,7375,7383,7461,7907,7908,14736,14758,14762,14763,14765,14961,15060,15141],"fullWord":14765},{"subwords":[269,399,817,833,5588,5592,5709,5976,5988,7267,7269,7271,7293,7298,7375,7385,7461,7477,7661,10109,10110,10113,10208,10324,10355,10398,14758,14762,14766,14968,15141,15143],"fullWord":14766},{"subwords":[287,288,349,7267,7283,7352,7375,7578,7604,7918,8015,9376,9378,12230,14758,14768,14784,14821,14832,14838,15461,15494],"fullWord":14768},{"subwords":[263,375,377,411,596,598,829,7293,7294,7375,7740,7898,7927,10109,12230,14758,14759,14769,14821,14832],"fullWord":14769},{"subwords":[263,504,596,869,7317,7375,7921,7927,11127,11213,11276,12230,12244,14758,14759,14770,14808,14821,14832],"fullWord":14770},{"subwords":[269,528,622,817,869,5588,5595,5894,5895,5976,5988,7317,7323,7326,7375,7461,7489,7493,7530,7531,7921,11127,11128,11213,11218,11223,11224,11276,11286,11288,11437,11446,11487,11512,11539,12229,12230,12244,12245,12248,12319,14758,14762,14771,14808,14821,14832,14833,14975,15141,15202,15207],"fullWord":14771},{"subwords":[299,840,911,1093,7375,7416,7422,7768,7874,7886,8040,8056,8064,8099,8175,12680,12686,13008,13051,13059,14758,14772,14898,15691,15722,15790,15858,18342,18432,18449,18463,18508,18993,18994,19093,19094,19155,19418],"fullWord":14772},{"subwords":[263,911,7267,7268,7375,7416,7944,14758,14759,14774,14898,14899,18342,18449],"fullWord":14774},{"subwords":[148,151,326,327,328,329,349,351,817,854,4438,4516,4517,4590,4599,4607,4714,4810,4928,4935,4936,5023,5340,5364,5588,5659,5976,9103,9376,9384,9385,14736,14776,14777,14961,14962,15060,15074,15428,15433],"fullWord":14777},{"subwords":[326,327,329,349,351,352,817,854,855,4516,4518,4599,4607,4714,4810,4935,5023,5026,5346,5365,5588,5976,6008,9103,9376,9384,9385,14736,14776,14778,14872,14961,14983,15060,15428,15433,15434],"fullWord":14778},{"subwords":[326,327,329,337,338,349,351,396,399,817,854,857,4466,4516,4599,4601,4607,4714,4728,4739,4810,4811,4891,4893,4935,5023,5588,5592,5756,5976,9103,9104,9117,9119,9376,9384,9385,10090,10093,10097,10119,10121,10122,10124,10202,10324,10327,10355,10378,10414,10502,10530,10531,10536,10537,10549,10675,10677,14736,14776,14780,14781,14961,14968,15060,15399,15428,15433,15444,15473,15474],"fullWord":14781},{"subwords":[337,349,352,399,817,857,5588,5592,5976,6008,9376,9384,9407,10121,10324,10355,10414,10502,10536,10549,10675,10677,14780,14782,14872,14968,14983,15399,15444,15473],"fullWord":14782},{"subwords":[326,327,329,349,351,605,608,817,854,4492,4500,4516,4532,4599,4605,4607,4714,4774,4810,4898,4935,4985,4986,4988,4990,5023,5314,5588,5595,5865,5976,5996,9103,9376,9378,9384,9385,12227,12229,12274,12319,12358,14736,14776,14784,14785,14821,14826,14838,14961,15060,15175,15227,15428,15433,15491],"fullWord":14785},{"subwords":[200,326,327,329,330,331,336,349,351,359,817,825,854,858,863,905,906,948,4461,4516,4520,4599,4600,4607,4611,4714,4810,4826,4901,4935,4939,5023,5037,5367,5588,5599,5976,5977,9103,9106,9111,9127,9376,9377,9384,9385,9389,9409,14736,14751,14776,14779,14788,14789,14881,14882,14961,14965,15060,15087,15428,15433,15436,15443,15526,15893,15928,16028,16270,16286,16419,16780,16889,16890,16891,17722],"fullWord":14789},{"subwords":[349,352,359,817,825,858,863,905,906,5588,5599,5976,5977,6008,6016,9376,9384,9389,9409,14788,14790,14872,14881,14883,14983,14988,15526,15528,16028,16270,16286,16419,16794,16889,16890,17722],"fullWord":14790},{"subwords":[349,359,817,825,858,863,865,905,906,907,908,973,5588,5599,5976,5977,6039,9376,9384,9389,9409,14788,14791,14881,14885,15526,15530,16028,16029,16270,16286,16290,16291,16419,16889,16890,16895,16899,16903,17722],"fullWord":14791},{"subwords":[349,359,647,691,905,9307,9376,9378,9392,9409,12276,12462,14784,14786,14792,14821,14838,14839,15986,16028,16858,16889,17722],"fullWord":14792},{"subwords":[349,359,647,691,905,909,9307,9360,9366,9376,9378,9400,9405,9409,12276,12513,12548,12560,12680,12683,13007,14784,14786,14793,14821,14838,14839,15568,15569,15673,15684,15986,16028,16858,16889,17303,17383,17384,17722],"fullWord":14793},{"subwords":[0,2,317,325,366,905,932,8362,8934,9508,9512,14775,14794,14795,14796,14797,14886,16021],"fullWord":14796},{"subwords":[817,825,867,868,905,906,950,953,5588,5599,5976,5977,6008,6016,14798,14800,14801,14802,14872,14881,14883,14983,14988,15939,16270,16286,16419],"fullWord":14801},{"subwords":[287,349,369,867,7283,7375,7604,7918,8015,9276,9376,9378,9396,9913,9922,12230,12277,14758,14784,14803,14821,14832,14838,14840,15461,15494,15498],"fullWord":14803},{"subwords":[325,349,359,867,868,905,932,950,8245,8248,8340,8343,8362,8678,8934,9376,9396,9399,9409,10041,14775,14804,14886,15534,16028,16554,16644,16823,16889,16954,17722],"fullWord":14804},{"subwords":[227,399,442,449,450,464,817,1196,5588,5592,5594,5780,5976,10304,10306,10324,10343,10355,10359,10495,11065,11074,14806,14807,14939,14968,14970,15183,15201,15864,15866,21050,21071,21097,21099,21110],"fullWord":14807},{"subwords":[43,44,385,399,513,516,518,817,869,1301,1304,1324,1366,1377,1526,1535,1636,1665,1700,1907,1909,1915,1933,2308,2317,2380,5588,5592,5782,5803,5976,10061,10136,10139,10142,10145,10150,10324,10355,11173,11180,11276,11279,11286,11303,11437,11442,11491,11539,14808,14809,14968,14971,14975,14995,15202],"fullWord":14809},{"subwords":[341,343,344,347,349,359,546,553,554,555,817,825,858,863,869,875,883,905,906,5588,5599,5830,5831,5845,5976,5977,9376,9384,9389,9409,9422,11276,11286,11287,11292,11314,11315,11330,11333,11437,11453,11539,11560,11743,11745,11764,11765,14788,14808,14810,14811,14820,14881,14975,14978,15202,15224,15480,15481,15484,15489,15526,15973,15978,16028,16270,16278,16286,16375,16419,16764,16889,16890,17161,17722],"fullWord":14811},{"subwords":[341,349,361,828,869,884,6254,6260,6308,6324,6386,6621,6629,6630,7050,7140,9376,11276,11329,11408,11755,14808,14812,14939,15480,15490,15864,21051],"fullWord":14812},{"subwords":[817,869,911,1009,5588,5620,5976,5982,6055,9487,9508,9557,11276,11286,11320,11361,11362,11364,11437,11456,11539,11574,11575,14808,14813,14898,14901,14975,15202,15312,15748,18389,18393,18396,18449,18453,18541,18549,18554,18595,18644,19216],"fullWord":14813},{"subwords":[817,869,871,4472,4475,4478,4516,4607,4810,4818,4819,5318,5342,5588,5658,5976,11107,11115,11120,11276,11286,11437,11438,11539,14736,14808,14814,14961,14975,15060,15202],"fullWord":14814},{"subwords":[817,869,872,5588,5976,6008,11276,11286,11437,11539,14808,14815,14872,14975,14983,14986,15202],"fullWord":14815},{"subwords":[574,732,733,735,817,869,871,4472,4475,4484,4487,4516,4607,4810,4818,4819,5318,5323,5342,5588,5658,5956,5976,11107,11115,11120,11270,11276,11286,11437,11438,11539,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,13593,14240,14262,14736,14808,14816,14817,14851,14852,14853,14961,14975,14979,15060,15202,15209,15248,15747],"fullWord":14817},{"subwords":[183,814,869,878,4472,5163,5213,5318,11107,11265,11276,11831,12680,14736,14808,14819,15561,15564,15570,15600,15627],"fullWord":14819},{"subwords":[118,603,796,801,806,809,2869,2941,3206,3215,3777,3913,8696,8714,8789,8857,8858,8867,12270,12271,12480,12548,12680,12965,12966,12968,14775,14821,14822,14823,15386,15560,15568,15592],"fullWord":14823},{"subwords":[106,124,326,349,605,796,854,2766,2801,2869,2941,2949,3402,4492,4532,4985,4986,5314,9207,9208,9376,9378,12227,12270,12274,14736,14776,14784,14821,14824,14826,14838,15428,15491],"fullWord":14824},{"subwords":[118,796,809,2869,2941,3777,3913,12270,12271,12548,12680,12965,12966,14821,14825,15568,15570,15592],"fullWord":14825},{"subwords":[183,195,605,869,4472,4479,4492,4532,5163,5172,5173,5213,5318,11107,11213,11243,11265,11276,11810,11831,11891,11893,11977,12244,12274,12493,12522,12523,12548,12550,12551,12680,14736,14749,14808,14821,14826,14827,15561,15564,15568,15600,15607,15627,15628],"fullWord":14827},{"subwords":[817,825,905,906,5588,5595,5598,5599,5605,5609,5918,5976,5977,5978,5984,5998,6000,12229,12275,12319,12324,12339,14821,14830,14831,14881,15986,15995,15998,16024,16270,16286,16319,16335,16340,16419,16425,17223,17237],"fullWord":14831},{"subwords":[269,270,605,608,622,817,4492,4500,4502,4504,4516,4532,4605,4607,4774,4810,5310,5351,5588,5595,5666,5707,5865,5894,5976,5988,7253,7346,7375,7383,7384,7461,7493,7907,7908,7928,7929,12229,12230,12274,12319,12358,14736,14758,14762,14763,14821,14826,14832,14833,14834,14961,15060,15141,15227],"fullWord":14834},{"subwords":[269,622,817,5588,5595,5894,5976,5988,6008,7375,7388,7461,7493,12229,12230,12319,14758,14762,14821,14832,14833,14835,14872,14983,15141,15275],"fullWord":14835},{"subwords":[269,279,280,622,623,817,825,905,906,5588,5595,5598,5599,5894,5918,5976,5977,5988,5992,6000,7359,7375,7391,7396,7461,7463,7493,7511,7743,7939,12229,12230,12233,12275,12319,12324,14758,14762,14764,14773,14821,14832,14833,14836,14881,15141,15910,15912,15914,15986,15995,15998,16001,16003,16026,16270,16286,16419,17211,17223],"fullWord":14836},{"subwords":[605,608,817,867,4492,4500,4509,4510,4516,4522,4524,4532,4605,4607,4774,4810,5316,5322,5355,5588,5595,5865,5976,9785,9836,9855,9968,12229,12243,12274,12277,12278,12319,12358,14736,14798,14799,14821,14826,14840,14841,14961,15060,15227],"fullWord":14841},{"subwords":[817,867,5588,5595,5976,6008,9785,9836,9855,12229,12277,12319,14798,14800,14821,14840,14842,14872,14983,15275],"fullWord":14842},{"subwords":[399,653,817,867,5588,5592,5595,5745,5778,5976,9760,9785,9836,9855,10128,10130,10174,10177,10178,10214,10324,10338,10344,10355,10356,10416,12229,12277,12319,14798,14821,14840,14843,14968,15225],"fullWord":14843},{"subwords":[716,867,10135,10177,10180,10214,10218,10304,12277,12282,12311,14821,14840,14844,14939,15864,21047,21059,21075],"fullWord":14844},{"subwords":[869,883,905,909,11213,11243,11244,11245,11247,11265,11276,11314,11330,11345,11810,11812,11813,11891,11915,11977,11978,12244,12522,12527,12548,12550,12551,12555,12560,12680,12683,12872,13007,14808,14820,14821,14846,15564,15567,15568,15569,15627,15628,15630,15638,15673,15973,15986,17303,17378,17383,17384],"fullWord":14846},{"subwords":[605,608,693,694,695,709,813,817,911,1009,4492,4500,4512,4516,4532,4537,4551,4553,4605,4607,4774,4788,4810,4812,5327,5588,5595,5620,5865,5976,5982,6055,6074,12229,12274,12319,12325,12358,12374,14736,14821,14826,14847,14848,14898,14901,14902,14961,15060,15227,15241,15312,15318,15748,18339,18408,18449,18450,18453,18454,18460,18541,18554,18607,18610,18649,19205,19233,19248],"fullWord":14848},{"subwords":[693,694,709,817,911,1009,5588,5595,5620,5976,5982,6008,6010,6055,6074,12229,12319,12325,12374,14821,14847,14849,14872,14898,14901,14903,14983,15241,15275,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,18652,18653],"fullWord":14849},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6008,6016,6033,13286,13294,13297,13298,13299,13321,13322,13325,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14854,14855,14856,14866,14872,14881,14883,14891,14893,14979,14982,14983,14988,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17497,17523],"fullWord":14855},{"subwords":[200,326,336,349,359,854,905,961,4461,4901,5014,5021,5037,5377,5379,9127,9376,9409,13171,13176,13177,13190,13200,13202,13286,13292,13303,13321,13336,13839,14403,14421,14736,14751,14776,14779,14851,14857,14858,14866,14891,15428,15443,15508,15524,15893,15928,16014,16015,16028,16883,16889,17476,17494,17722],"fullWord":14858},{"subwords":[349,352,732,735,817,5588,5956,5976,6008,9376,9384,13200,13286,13294,13297,13439,13455,13577,13705,13712,14262,14307,14851,14852,14854,14859,14872,14979,14983,15248,15251,15508,15509,15513],"fullWord":14859},{"subwords":[349,732,735,817,5588,5595,5956,5976,5996,9376,9378,9384,12229,12257,12259,12317,12319,12453,13193,13194,13200,13239,13245,13257,13286,13294,13439,13453,13455,13539,13577,13705,13712,13765,13769,14262,14784,14821,14838,14851,14852,14860,14979,15175,15248,15262,15508,15509,15511],"fullWord":14860},{"subwords":[287,349,750,7283,7365,7375,7604,7612,7918,8015,8022,9376,9378,12230,12257,12453,13193,13200,13239,13251,13286,13302,13721,13765,13773,14311,14758,14784,14821,14832,14838,14851,14861,15461,15494,15508],"fullWord":14861},{"subwords":[349,359,781,905,911,918,961,997,1032,9376,9409,9447,13200,13202,13286,13303,13321,13328,13331,13333,13336,13352,13364,13385,13839,13850,13851,13852,13866,14247,14252,14403,14421,14427,14851,14862,14866,14867,14891,14898,14912,15508,15524,16014,16028,16041,16883,16889,16907,16908,17476,17494,17510,17598,17652,17665,17722,17744,17773,17881,17948,17967,17974,18347,18436,18443,18444,18448,18449,18467,18469,18472,18474,18926,18936,18947,19221,19222,19295,19301,19381,19386],"fullWord":14862},{"subwords":[732,733,735,762,817,4514,4516,4607,4810,5323,5588,5956,5976,13171,13174,13268,13276,13286,13292,13294,13295,13439,13455,13478,13569,13577,14237,14262,14278,14736,14851,14852,14853,14863,14961,14979,15060,15248],"fullWord":14863},{"subwords":[399,481,732,735,762,770,817,5588,5592,5956,5976,10182,10189,10191,10324,10350,10355,13204,13207,13210,13268,13276,13286,13294,13439,13450,13455,13456,13569,13577,13940,14262,14278,14851,14852,14864,14968,14979,15248],"fullWord":14864},{"subwords":[732,735,762,817,5588,5956,5976,6008,13268,13276,13286,13294,13297,13439,13455,13569,13577,14262,14278,14851,14852,14854,14865,14872,14979,14983,15248],"fullWord":14865},{"subwords":[732,735,781,782,817,911,1009,5588,5620,5956,5976,5982,6008,6055,13286,13294,13297,13328,13329,13364,13367,13372,13439,13455,13460,13464,13577,13599,13613,14247,14248,14250,14262,14851,14852,14854,14867,14868,14872,14898,14901,14903,14979,14983,15248,15312,15748,18436,18437,18439,18449,18453,18467,18541,18554,18652,18653,19221],"fullWord":14868},{"subwords":[481,488,781,784,911,919,10182,10304,13204,13235,13286,13328,13332,13334,13364,13381,13424,13922,13930,13932,14009,14247,14258,14410,14851,14867,14869,14898,14939,15864,18436,18449,18467,19221,19231,19377,19558,21064],"fullWord":14869},{"subwords":[761,781,911,1028,12680,12686,12937,13008,13286,13319,13328,13364,14160,14188,14247,14350,14851,14867,14870,14898,15570,15691,18432,18436,18449,18463,18467,19075,19093,19094,19221,19323],"fullWord":14870},{"subwords":[227,817,828,1196,5588,5976,6008,6239,6308,6317,6319,6386,6392,6474,6509,7050,7140,7141,14872,14873,14939,14983,15114,15133,15864,15866,21071,21073,21097,21099],"fullWord":14873},{"subwords":[227,399,817,1196,5588,5592,5594,5976,6008,10220,10304,10306,10324,10355,10359,10495,11065,11074,14872,14874,14939,14968,14983,15183,15201,15864,15866,21050,21071,21073,21097,21099],"fullWord":14874},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":14876},{"subwords":[349,361,828,6254,6260,6308,6386,6621,6635,7050,7076,7078,7140,9376,14877,14939,15864],"fullWord":14877},{"subwords":[287,349,7283,7375,7604,7918,8015,9376,9378,12230,14758,14784,14821,14832,14838,14878,15461,15494],"fullWord":14878},{"subwords":[349,361,911,919,9376,14879,14898,14939,15864,18347,18449,18471,19231,19377],"fullWord":14879},{"subwords":[377,382,796,810,905,2813,2941,2971,3001,3017,4050,4051,10072,10226,14880,15880,15888,15889,15942,16118,16142],"fullWord":14880},{"subwords":[817,825,905,906,907,973,5588,5599,5976,5977,6008,6016,6039,14872,14881,14883,14884,14885,14983,14988,16270,16286,16290,16291,16419],"fullWord":14884},{"subwords":[325,817,825,905,906,932,5588,5599,5976,5977,6008,6016,8333,8338,8362,8453,8456,8552,8583,8584,8934,14775,14872,14881,14883,14886,14887,14983,14988,15376,15377,16270,16286,16419,16549,16551,16574,16577],"fullWord":14887},{"subwords":[325,817,825,905,906,907,932,936,973,5588,5599,5976,5977,6039,8333,8338,8362,8453,8456,8552,8584,8934,14775,14881,14885,14886,14888,15376,15377,16033,16270,16286,16290,16291,16419,16549,16552,16574,16577,16578,16609],"fullWord":14888},{"subwords":[325,905,924,932,944,8362,8420,8428,8934,10231,10304,10313,14775,14886,14889,14939,14944,15864,15865,15942,16103,16530,16572,16758,17039,17149,21212],"fullWord":14889},{"subwords":[287,349,359,647,691,905,7283,7287,7375,7391,7396,7604,7611,7626,7743,7918,7919,7939,8015,8019,9307,9376,9378,9409,12230,12233,12276,14758,14773,14784,14786,14821,14832,14838,14839,14890,15461,15472,15494,15497,15910,15986,16001,16028,16815,16858,16866,16889,17211,17722],"fullWord":14890},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":14892},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6008,6016,6033,13286,13294,13297,13298,13299,13321,13322,13325,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14854,14855,14856,14866,14872,14881,14883,14891,14893,14979,14982,14983,14988,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17497,17523],"fullWord":14893},{"subwords":[399,407,817,825,905,906,907,973,5588,5592,5593,5599,5976,5977,6039,10207,10228,10229,10230,10236,10324,10355,10360,10453,14805,14881,14885,14896,14968,14973,15942,15948,15950,16270,16274,16277,16286,16290,16291,16419,16420],"fullWord":14896},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":14897},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":14904},{"subwords":[817,911,1009,5588,5600,5620,5976,5982,6008,6055,8333,8360,8378,8381,8383,8453,8458,8461,8552,8583,14775,14872,14898,14901,14903,14906,14983,15312,15376,15748,18449,18453,18541,18554,18652,18653,18697],"fullWord":14906},{"subwords":[250,254,349,361,828,911,919,6254,6260,6261,6308,6332,6344,6386,6518,6621,6651,7042,7050,7140,9376,14754,14898,14907,14939,15458,15864,18347,18449,19231,19377],"fullWord":14907},{"subwords":[287,349,693,700,911,7283,7289,7375,7416,7561,7604,7628,7637,7745,7918,7933,7951,8015,8035,9325,9338,9339,9376,9378,12230,12463,14758,14784,14821,14832,14838,14847,14898,14908,15461,15494,18342,18347,18408,18410,18449,18458,18460,18894,18901,19212,19280],"fullWord":14908},{"subwords":[349,693,700,888,911,9325,9335,9338,9339,9340,9360,9367,9376,9378,9400,12293,12463,12469,12513,12548,12574,12575,12680,12686,13008,14784,14821,14838,14847,14898,14909,14910,15504,15568,15691,18347,18408,18432,18449,18460,18463,18894,18945,19036,19093,19094,19105,19212,19292],"fullWord":14910},{"subwords":[349,359,905,911,918,997,9367,9368,9376,9409,9447,12680,12683,12686,12692,13007,13008,13011,13031,14898,14909,14911,14912,15504,15507,15574,15673,15691,15700,16028,16041,16053,16889,16907,16908,17303,17429,17435,17722,17744,17773,17881,17885,17967,18347,18432,18435,18449,18463,18464,18472,18474,18945,18946,18947,19093,19094,19097,19113,19114,19292,19294,19313,19381],"fullWord":14911},{"subwords":[596,693,707,911,1036,1044,14821,14847,14898,14899,14913,18408,18431,18449,18460,18476,18477,18495,18497,18969],"fullWord":14913},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4810,4812,5327,5588,5620,5976,5982,6055,14736,14898,14901,14902,14914,14961,15060,15312,15318,15748,18339,18449,18450,18453,18454,18476,18479,18495,18498,18499,18541,18554,18565,18672,18673,19205,19233,19235],"fullWord":14914},{"subwords":[817,911,1009,5588,5620,5976,5982,6008,6055,14872,14898,14901,14903,14915,14983,15312,15748,18449,18453,18476,18480,18495,18498,18499,18541,18554,18565,18652,18653,18672,19235],"fullWord":14915},{"subwords":[399,405,488,491,817,911,1009,5588,5592,5620,5976,5982,6055,10247,10254,10268,10324,10355,10460,14898,14901,14916,14968,15312,15748,18370,18372,18449,18453,18476,18495,18498,18499,18541,18547,18554,18565,18672,19235],"fullWord":14916},{"subwords":[488,911,919,1047,10304,14898,14917,14919,14939,15864,18449,18476,18481,18495,19231,19377,19389],"fullWord":14917},{"subwords":[905,911,918,14898,14912,14918,15852,15858,15861,16041,17773,17782,17788,17992,18172,18174,18449,18472,18476,18482,18495,18503,18508,18515,18519,19372,19381,19493,19498,19868,19871],"fullWord":14918},{"subwords":[263,267,269,817,818,1106,1109,1115,5588,5976,5988,7375,7439,7461,7953,14758,14759,14762,14920,14921,15141,15337],"fullWord":14920},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":14924},{"subwords":[817,825,905,906,1106,1109,1110,1114,5588,5595,5598,5599,5918,5976,5977,6000,6091,12229,12275,12305,12308,12319,12324,14821,14881,14921,14925,14926,14929,15337,15354,15986,15995,15998,16076,16078,16270,16286,16419,17223,19948,19950,19952,19957,19967,20070,20071],"fullWord":14926},{"subwords":[817,825,905,906,1106,1109,1110,1114,5588,5599,5976,5977,6008,6016,14872,14881,14883,14921,14927,14928,14929,14983,14988,15337,15354,16076,16078,16270,16286,16419,19967,20070,20071],"fullWord":14928},{"subwords":[349,817,1106,1109,5588,5595,5976,5996,9376,9378,9384,12229,12242,12305,12319,12387,14784,14821,14838,14921,14925,14930,15175,15337,15549,15551,19920,19921,19948,19950,20008,20107,20129,20132,20152,20157],"fullWord":14930},{"subwords":[287,349,1115,7283,7375,7604,7918,8015,9376,9378,12230,14758,14784,14821,14832,14838,14931,15461,15494,19920,19948,20107,20152],"fullWord":14931},{"subwords":[325,349,359,905,932,1124,8245,8248,8362,8678,8934,9376,9409,14775,14886,14932,16028,16655,16656,16889,17722,20107,20115,20191],"fullWord":14932},{"subwords":[817,825,905,906,911,918,993,1009,1145,1150,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14933,14935,14938,15281,15306,15312,15748,16041,16043,16089,16091,16270,16286,16293,16419,16457,16475,17773,17775,17850,17953,17964,18207,18211,18220,18222,18449,18453,18455,18472,18521,18523,18527,18541,18554,18557,18559,19256,19381,19508,20410,20417,20419,20442,20444,20446,20449,20457,20458,20460,20464,20465,20467,20510,20512,20588,20591,20594,20596,20987],"fullWord":14935},{"subwords":[325,349,359,905,932,8245,8248,8362,8409,8416,8678,8934,9376,9409,14775,14886,14933,14936,14938,16028,16089,16889,17722,20410,20442,20449,20450,20599,20665,20672,20832],"fullWord":14936},{"subwords":[287,349,361,633,716,7283,7375,7395,7447,7604,7918,7920,7961,8015,9376,9378,12230,12282,12311,14758,14784,14787,14821,14832,14837,14838,14939,14941,15461,15494,15864,21058,21075,21144],"fullWord":14941},{"subwords":[716,905,909,12282,12311,12312,12548,12560,12573,12680,12683,13007,14821,14939,14942,14943,14944,15568,15569,15673,15690,15864,15865,15986,16103,17303,17383,17384,17472,17473,21075,21077,21183,21212],"fullWord":14943},{"subwords":[817,825,905,906,5588,5599,5976,5977,6008,6016,14872,14881,14883,14945,14948,14949,14950,14983,14988,16270,16286,16419],"fullWord":14949},{"subwords":[287,349,7283,7375,7604,7918,8015,9376,9378,9455,12230,12313,14758,14784,14821,14832,14838,14951,15461,15494,21230,21269,21276],"fullWord":14951},{"subwords":[905,12680,12683,13007,14952,14953,15570,15573,15673,17303],"fullWord":14953},{"subwords":[213,817,4516,4584,4607,4810,5588,5976,14736,14945,14946,14954,14955,14961,15060,21249],"fullWord":14955},{"subwords":[817,825,905,906,5588,5599,5976,5977,14881,14945,14950,14954,14956,16270,16286,16419],"fullWord":14956},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":14960},{"subwords":[148,151,152,158,200,817,825,905,906,4438,4445,4516,4517,4520,4590,4594,4607,4611,4810,4826,5340,5341,5588,5599,5659,5976,5977,14736,14751,14881,14882,14961,14962,14963,14965,15060,15087,15893,15895,16270,16286,16419],"fullWord":14963},{"subwords":[817,4516,4518,4607,4608,4678,4810,5346,5588,5589,5976,5984,6008,6012,14736,14872,14961,14964,14983,14984,15060,15093,15276],"fullWord":14964},{"subwords":[263,269,596,611,622,817,818,821,5588,5595,5894,5976,5988,7375,7461,7493,7927,12229,12230,12319,14758,14759,14762,14821,14832,14833,14967,15141],"fullWord":14967},{"subwords":[399,401,817,5588,5592,5691,5976,5984,6008,10324,10355,10383,10388,14872,14968,14969,14983,15107],"fullWord":14969},{"subwords":[227,399,442,449,450,464,817,1196,5588,5592,5594,5780,5976,10304,10306,10324,10343,10355,10359,10495,11065,11074,14806,14807,14939,14968,14970,15183,15201,15864,15866,21050,21071,21097,21099,21110],"fullWord":14970},{"subwords":[399,407,470,817,825,869,883,905,906,5588,5592,5593,5599,5782,5784,5845,5976,5977,10136,10145,10150,10151,10161,10207,10228,10324,10355,10360,11173,11180,11181,11276,11286,11287,11303,11314,11315,11330,11333,11437,11442,11444,11453,11539,11560,14805,14808,14820,14881,14968,14971,14972,14973,14975,14978,15202,15224,15942,15948,15949,15973,15978,16270,16274,16278,16286,16419,16420,17012,17161],"fullWord":14972},{"subwords":[227,399,405,488,491,817,911,919,1009,1196,5588,5592,5594,5620,5976,5982,6055,10247,10254,10304,10306,10324,10355,10359,10460,10495,11065,11073,11074,14898,14901,14939,14968,14974,15183,15201,15312,15748,15864,15866,18370,18372,18449,18453,18541,18547,18554,18558,19231,19257,19377,19555,19570,21050,21071,21097,21099,21135],"fullWord":14974},{"subwords":[526,817,869,871,4472,4475,4516,4607,4671,4678,4810,4818,4819,5318,5342,5588,5589,5658,5663,5976,5984,11107,11115,11120,11276,11286,11437,11438,11478,11539,11543,14736,14808,14961,14975,14976,15060,15093,15202,15203],"fullWord":14976},{"subwords":[526,817,869,872,5588,5976,5984,6008,11276,11286,11437,11539,11543,11545,14808,14872,14975,14977,14983,14986,15202],"fullWord":14977},{"subwords":[732,733,735,817,4516,4607,4673,4678,4810,5323,5588,5589,5956,5976,5984,13171,13174,13286,13292,13294,13295,13439,13455,13478,13489,13490,13506,13577,13583,14262,14736,14851,14852,14853,14961,14979,14980,15060,15093,15248],"fullWord":14980},{"subwords":[732,735,817,5588,5956,5976,5984,6008,13286,13294,13297,13439,13455,13489,13506,13577,13583,14262,14851,14852,14854,14872,14979,14981,14983,15248],"fullWord":14981},{"subwords":[817,4516,4518,4607,4608,4678,4810,5346,5588,5589,5976,5984,6008,6012,14736,14872,14961,14964,14983,14984,15060,15093,15276],"fullWord":14984},{"subwords":[817,5588,5976,5984,6008,14872,14875,14983,14985],"fullWord":14985},{"subwords":[817,825,869,872,873,883,905,906,5588,5599,5845,5976,5977,6008,6016,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,14808,14820,14872,14881,14883,14975,14978,14983,14986,14987,14988,15202,15224,15973,15978,16270,16278,16286,16419,17161],"fullWord":14987},{"subwords":[215,217,817,825,891,905,906,909,5588,5595,5598,5599,5918,5953,5955,5976,5977,6000,6004,12229,12275,12319,12324,12506,12548,12556,12560,12561,12680,12683,12876,12879,12979,12982,13007,14821,14881,14989,15238,15568,15569,15610,15611,15673,15676,15986,15995,15998,16270,16286,16391,16392,16419,17223,17272,17303,17383,17384,17419],"fullWord":14989},{"subwords":[204,817,1106,1109,4516,4569,4607,4678,4810,4851,5329,5588,5589,5629,5630,5976,5984,6087,6089,6092,6100,14736,14921,14922,14961,14990,14991,15060,15093,15337,19910,19990,19992,19996,20057],"fullWord":14991},{"subwords":[817,1106,1109,5588,5629,5976,5984,6008,6092,6100,14872,14921,14927,14983,14990,14992,15337,19992,19996],"fullWord":14992},{"subwords":[817,825,905,906,1106,1109,1110,1111,1114,5588,5599,5605,5609,5629,5631,5976,5977,5978,5984,6092,6100,6104,14881,14921,14929,14990,14993,15337,15354,16024,16076,16078,16270,16286,16319,16340,16419,16425,16449,16472,19967,19992,19996,19998,20000,20070,20071,20073],"fullWord":14993},{"subwords":[817,1106,1109,1130,1133,1145,5588,5976,12680,12979,13087,13095,13110,14921,14933,14994,15337,15610,15728,15734,20273,20277,20288,20410,20417,20473,20475,20510,20875,20933,20962],"fullWord":14994},{"subwords":[31,72,349,817,911,1009,1282,1284,1366,1377,1393,1462,1464,1535,1542,1721,1722,1790,1881,1884,1885,2308,2317,2349,2417,2444,5588,5620,5976,5982,6055,9376,9382,9384,14898,14901,14995,14996,15312,15402,15542,15748,18302,18347,18449,18453,18541,18554,18817,18844,18847,18941,19265],"fullWord":14996},{"subwords":[31,72,817,826,911,1009,1366,1377,1462,1464,1535,1542,1544,1576,1587,1591,1691,1694,1721,1722,1725,2308,2317,2349,5588,5620,5622,5976,5982,5984,6055,14898,14901,14995,14997,15312,15748,18302,18449,18453,18541,18554,18576,19240],"fullWord":14997},{"subwords":[1576,1587,1588,1590,5632,5635,5984,14995,14998,14999,15014,16319,16340,16423,16425],"fullWord":14999},{"subwords":[1556,1576,1587,4120,4123,5740,5984,9849,14995,15000,15001,15021,15103],"fullWord":15001},{"subwords":[1576,1587,1588,1590,3119,3154,4120,4130,5984,6023,14995,15000,15002,15014,15021,15048,16228,16298,16319,16340,16423,16425],"fullWord":15002},{"subwords":[1576,1587,1588,1590,1636,5691,5693,5790,5984,10323,10383,10388,10390,10392,10451,14995,15003,15004,15014,15107,15110,16319,16340,16423,16425],"fullWord":15004},{"subwords":[1560,1574,1777,1780,1782,1783,1784,1788,1790,1791,1867,1871,2384,2413,2414,2417,2423,4618,4628,4629,4714,4810,4826,4908,4935,4939,5023,5037,5362,5363,5367,9111,9127,9384,9385,9389,9409,14995,15005,15006,15014,15060,15087,15402,15410,15428,15433,15436,15443,15526,16423,16765,16780,16889,16890,16891,17722],"fullWord":15006},{"subwords":[1636,1648,1652,1790,1817,1827,1829,2417,2427,5780,9152,9153,9384,10414,10504,10507,10509,10514,10536,10549,10677,14995,15007,15402,15444,15473,15477],"fullWord":15007},{"subwords":[1560,1671,1673,1777,1780,1782,1790,1837,1840,1841,1867,2384,2413,2417,2429,2430,2431,4618,4714,4774,4810,4935,4985,4988,4990,5023,5362,5865,5996,9206,9384,9385,12331,12358,12406,14995,15005,15008,15060,15175,15227,15402,15428,15433,15491],"fullWord":15008},{"subwords":[1636,1790,1817,1851,1852,2072,2095,2097,2106,2205,2417,2439,2446,2454,9384,10414,10443,10504,10509,10514,10536,10549,10677,10748,10753,10882,12695,12700,12812,12816,12845,12959,12979,12992,14995,15009,15246,15402,15444,15473,15576,15579,15586,15610,15617,15621],"fullWord":15009},{"subwords":[1721,2072,2160,2180,2185,2205,2219,2237,2446,12709,12959,12979,13008,14995,15010,15312,15576,15579,15588,15610,15659,15691,15694,15697,15748,18981,19060,19093,19101,19106],"fullWord":15010},{"subwords":[2072,2073,2197,2200,2205,2208,2307,2446,2476,6004,6033,12916,12925,12936,12959,12964,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14352,14355,14383,14384,14403,14995,15011,15012,15014,15248,15272,15305,15576,15579,15582,15590,15610,15611,15663,15668,15676,16423,17308,17312,17406,17419,17638],"fullWord":15012},{"subwords":[1671,2072,2127,2134,2136,2205,2211,2212,2446,5637,5953,6008,12331,12481,12548,12876,12959,12979,14995,15013,15238,15576,15579,15610],"fullWord":15013},{"subwords":[2530,2532,2610,7194,14995,15015,15114,15749,15755,15777,15783,19840],"fullWord":15015},{"subwords":[1576,1587,2610,2629,5740,5984,9849,14995,15016,15103,15749,15755,15777,19595,19840],"fullWord":15016},{"subwords":[1702,1749,2610,2648,2655,2667,2710,2711,2721,2730,6008,14995,15017,15749,15755,15765,15777,15780,15866,19840],"fullWord":15017},{"subwords":[1716,1721,1736,2498,2500,2502,2610,2656,2662,2664,2668,2690,2692,2697,2700,6018,14995,15014,15018,15019,15020,15306,15312,15748,15749,15755,15757,15764,15777,15782,15840,15852,15858,15861,16423,16457,17994,18035,18066,18071,18074,18150,18540,19356,19359,19390,19397,19399,19400,19401,19403,19840,19844,19876,19880],"fullWord":15020},{"subwords":[93,121,399,442,449,796,817,2813,2826,2830,2941,2954,2971,3128,3129,3493,5588,5592,5780,5976,10072,10073,10075,10324,10343,10355,14717,14968,15021,15022],"fullWord":15022},{"subwords":[93,114,121,796,817,2869,2883,2885,2941,2954,2956,2977,4069,4120,5588,5595,5856,5976,5984,5998,12224,12229,12270,12319,12339,14717,14821,14830,15021,15023],"fullWord":15023},{"subwords":[93,114,121,126,693,694,709,796,817,911,1009,2869,2883,2885,2908,2910,2941,2954,2962,2977,3003,3004,3052,3055,3145,3148,3161,4069,4085,5588,5595,5620,5849,5856,5976,5982,6055,6057,6074,12224,12229,12270,12319,12325,12338,12374,14717,14821,14847,14898,14901,14959,15021,15024,15049,15241,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,19197,19220],"fullWord":15024},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":15026},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":15027},{"subwords":[3113,3115,3153,4120,4121,4639,4663,4678,4810,5984,15021,15028,15029,15060,15093],"fullWord":15029},{"subwords":[3145,3146,3149,3161,4120,4144,5856,5928,5935,5984,5985,5998,6057,12339,12374,15021,15030,15241,15312,15748,18576,18583,18607,18642,18649,18650,19240],"fullWord":15030},{"subwords":[3161,4120,4127,4135,4139,4144,5984,5985,6057,13438,13489,13506,13577,13583,13599,13613,13617,14262,14957,15021,15031,15248,15312,15748,18576,18642,19240],"fullWord":15031},{"subwords":[3119,3154,3165,4120,4130,4141,5984,6023,6031,6039,6042,15021,15032,15048,16228,16231,16298,16303,16319,16340,16341,16342,16425,16429],"fullWord":15032},{"subwords":[4046,4120,4127,4135,5735,5959,5984,5995,9079,9384,13489,13506,13577,13583,13705,13706,13708,13712,13713,14262,14294,15021,15033,15248,15411,15508,15509],"fullWord":15033},{"subwords":[3161,3429,3430,3432,4120,4144,5735,5984,5985,5995,6057,9079,9384,15021,15034,15051,15312,15321,15411,15542,15748,18576,18642,18823,18844,18847,18941,19240,19267],"fullWord":15034},{"subwords":[3113,3115,3153,4120,4121,4123,4639,4651,4653,4678,4810,5348,5355,5740,5741,5984,15021,15028,15035,15060,15093,15103],"fullWord":15035},{"subwords":[3697,3777,3786,3804,3806,3898,3906,3913,4181,5653,5856,5953,9836,9841,9855,10044,12335,12490,12548,12874,12876,12965,12979,15021,15036,15042,15238,15592,15593,15610],"fullWord":15036},{"subwords":[93,94,121,122,396,399,796,800,817,2766,2780,2813,2941,2949,2954,2955,2971,3111,3447,3493,4058,4431,4466,4516,4601,4607,4639,4641,4728,4810,5588,5592,5756,5976,10072,10073,10074,10075,10090,10093,10097,10202,10324,10327,10355,10378,14717,14718,14736,14961,14968,15021,15028,15038,15060],"fullWord":15038},{"subwords":[3120,3685,3687,3693,3701,3708,3898,5650,9079,9384,10414,10443,10518,10536,10549,10677,10760,10767,10882,12812,12816,12845,12965,12979,12992,15021,15039,15188,15246,15411,15444,15473,15592,15610,15617,15621],"fullWord":15039},{"subwords":[3413,3689,3691,3693,3777,3786,3898,3913,4181,5653,5856,5953,5996,9079,9097,9207,9360,9384,9400,12410,12412,12513,12514,12548,12874,12876,12965,12979,15021,15040,15042,15175,15238,15411,15592,15610],"fullWord":15040},{"subwords":[1700,2072,2205,2446,3617,3732,3735,3737,3739,3744,3748,3898,3911,11539,11817,11970,12861,12959,12965,12979,14995,15021,15041,15202,15576,15579,15592,15610,15627,15632],"fullWord":15041},{"subwords":[3143,3777,3786,3788,3814,3898,3902,3913,3919,3929,4181,4182,5653,5856,5918,5953,5955,6000,6004,6023,12506,12548,12556,12560,12561,12874,12875,12876,12879,12965,12971,12979,12982,13007,15021,15042,15043,15048,15238,15592,15599,15610,15611,15676,16188,16198,16203,16298,16391,17272,17316,17383,17419],"fullWord":15043},{"subwords":[3697,3826,3830,3835,3837,3898,3906,4184,12965,12979,15021,15044,15592,15593,15610,15648],"fullWord":15044},{"subwords":[3864,3867,3870,3888,3898,3923,4029,4030,4140,4188,4232,12916,12917,12965,12979,13145,13577,14147,14262,14290,14350,14356,14410,14576,15021,15045,15248,15592,15610,15663,15672,15866,21127,21189],"fullWord":15045},{"subwords":[3638,3644,3647,3657,3893,3895,3898,3899,3900,4118,4639,4656,4659,4810,5096,5114,5115,6008,12752,12965,12974,12979,15021,15028,15046,15060,15078,15592,15600,15603,15610],"fullWord":15046},{"subwords":[3864,3867,3870,3898,3923,3984,3985,4049,4188,4195,4268,4302,4312,4326,5654,12916,12917,12965,12979,13051,13577,13602,14147,14220,14262,14350,14356,14433,14518,15021,15047,15248,15592,15610,15663,15706,15777],"fullWord":15047},{"subwords":[93,121,126,399,405,488,491,796,817,911,1009,2813,2941,2954,2962,2971,3003,3004,3006,3052,3055,3135,3161,3469,3493,3495,4085,4240,5588,5592,5620,5648,5976,5982,6055,6057,10072,10073,10075,10247,10254,10324,10355,10376,10460,14717,14898,14901,14959,14968,15021,15049,15050,15312,15748,18365,18370,18372,18449,18453,18541,18547,18554,19197],"fullWord":15050},{"subwords":[3161,3898,3900,3965,3968,6008,6057,12965,12979,13008,15021,15052,15053,15312,15330,15592,15610,15691,15694,15748,18652,18981,19093,19098,19101],"fullWord":15053},{"subwords":[3161,3898,3902,3929,3931,3940,3958,3961,3965,3968,3970,3971,4142,4238,4241,6004,6018,6023,6028,6057,12965,12971,12979,12982,13007,13008,13011,15021,15048,15052,15054,15306,15312,15592,15599,15610,15611,15676,15691,15694,15695,15700,15748,16198,16205,16298,16304,16305,16457,17316,17419,17429,17435,17924,18981,18985,19093,19098,19100,19101,19103,19113],"fullWord":15054},{"subwords":[3161,4214,4268,4293,4312,4326,4357,4375,4376,4378,5654,5846,6019,6057,11539,11574,12184,12187,15021,15055,15059,15202,15312,15748,15777,15806,15858,18573,18595,18644,19350,19356],"fullWord":15055},{"subwords":[4224,4268,4271,4312,4326,4328,4329,4330,4350,4351,4353,5654,5655,5656,6008,6016,6023,15021,15048,15056,15057,15777,15780,15781,15782,15840,16298,18056,18066,18071,18150,18152,19876,19880],"fullWord":15057},{"subwords":[3119,3154,3155,4120,4130,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,5984,6023,15021,15048,15058,15283,15334,15777,15782,15840,16228,16298,16307,16319,16340,16425,18056,18066,18071,18150,19876,19878,19880],"fullWord":15058},{"subwords":[93,94,121,122,126,127,796,800,817,911,1009,2766,2772,2780,2941,2949,2954,2955,2962,3003,3004,3005,3052,3055,3111,3161,4085,4086,4431,4516,4537,4551,4553,4607,4639,4810,4812,5327,5588,5620,5976,5982,6055,6057,14717,14718,14736,14898,14901,14902,14959,14961,15021,15028,15049,15060,15061,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19197,19198,19205,19233],"fullWord":15061},{"subwords":[1560,2384,2517,2519,2610,4618,4810,5417,5445,5466,5467,5471,14995,15060,15062,15749,15755,15773,15777,15778,19578,19840],"fullWord":15062},{"subwords":[1560,1573,1604,1696,2384,2517,2521,2523,2537,2610,2615,4618,4634,4810,5351,5417,5420,5445,5471,5485,5988,8079,14995,15060,15063,15141,15749,15755,15773,15777,15778,15790,19840,19855,19856],"fullWord":15063},{"subwords":[93,94,121,122,732,733,735,796,800,817,2766,2780,2921,2922,2923,2924,2941,2949,2954,2955,2987,2989,2990,3111,4077,4078,4079,4431,4516,4607,4639,4810,5323,5588,5956,5976,13154,13155,13156,13157,13171,13174,13286,13292,13294,13295,13439,13455,13478,13577,14262,14717,14718,14736,14851,14852,14853,14961,14979,15021,15025,15028,15060,15064,15248],"fullWord":15064},{"subwords":[4667,4678,4810,5984,15060,15065,15069,15093],"fullWord":15065},{"subwords":[4667,4678,4774,4810,5665,5865,5867,5868,5984,5998,12339,12340,12358,15060,15066,15069,15093,15227,15228],"fullWord":15066},{"subwords":[4667,4678,4810,5984,6008,6012,15060,15067,15069,15093],"fullWord":15067},{"subwords":[4667,4678,4728,4731,4733,4810,5691,5756,5757,5984,10378,10383,10388,15060,15068,15069,15093,15107],"fullWord":15068},{"subwords":[4671,4678,4810,4818,5820,5984,11478,11539,11543,15060,15070,15093,15202],"fullWord":15070},{"subwords":[4678,4810,5430,5567,5570,5698,5984,6189,6191,6196,15060,15072,15089,15093,15097,15866],"fullWord":15072},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5865,5996,6406,6453,6458,6467,6537,6543,6548,6593,6598,6599,6601,6602,6604,6621,6622,6623,7056,7081,7082,9250,9384,9385,12358,15060,15073,15114,15175,15227,15428,15433,15446,15491],"fullWord":15073},{"subwords":[4714,4720,4774,4810,4935,4947,4985,4988,4990,4993,5023,5028,5351,5865,5892,5894,5988,5996,7493,7604,7617,7997,8015,8016,9384,9385,12358,15060,15075,15141,15173,15175,15227,15234,15428,15433,15437,15461,15491,15494,15495],"fullWord":15075},{"subwords":[4678,4679,4680,4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,5984,6001,6003,6004,6005,12752,12755,12979,12982,13007,15060,15071,15078,15079,15081,15087,15093,15096,15600,15603,15609,15610,15611,15676,15677,16311,16319,16320,16340,16425,16426,17323,17419],"fullWord":15079},{"subwords":[4678,4774,4810,5114,5115,5172,5176,5177,5392,5665,5865,5868,5953,5984,5998,6001,12339,12340,12358,12493,12499,12548,12752,12876,12979,15060,15078,15080,15093,15227,15238,15600,15603,15610],"fullWord":15080},{"subwords":[4810,4845,5114,5115,5234,5237,5239,5260,5471,5479,5523,12752,12979,13008,13051,13059,13065,13066,13080,15060,15078,15082,15312,15318,15600,15603,15610,15691,15694,15706,15722,15723,15724,15748,15773,15777,15778,15858,18981,18983,19093,19101,19155,19156,19310,19311,19356,19357,19411,19465,19895],"fullWord":15082},{"subwords":[817,1145,1147,4516,4518,4574,4607,4810,4865,5330,5331,5346,5361,5588,5976,6008,14736,14872,14933,14934,14961,14983,15060,15084,15358,20303,20309,20311,20410,20412,20415,20417,20418,20440,20510,20524],"fullWord":15084},{"subwords":[4678,4810,4865,5361,5984,6008,6012,6118,6119,15060,15085,15093,15362,20524,20532,20533,20587],"fullWord":15085},{"subwords":[3113,3115,3153,4120,4121,4207,4209,4263,4268,4269,4312,4321,4326,4327,4639,4678,4810,4846,5455,5471,5654,5685,5984,15021,15028,15060,15088,15093,15773,15777,15778],"fullWord":15088},{"subwords":[4667,4669,4678,4810,5430,5567,5568,5570,5662,5698,5984,6189,6191,6196,15060,15069,15089,15090,15093,15097,15866],"fullWord":15090},{"subwords":[4678,4679,4680,4810,4826,5430,5439,5567,5570,5571,5572,5698,5984,6189,6191,6196,6197,6198,15060,15071,15087,15089,15091,15093,15096,15097,15866,15867,16311,16319,16320,16324,16340,16425,16426,21096,21130,21212],"fullWord":15091},{"subwords":[3248,3361,3674,3898,4120,5641,5643,5984,8483,8552,8562,8575,8714,8725,8728,8857,12724,12727,12965,12968,12979,15021,15092,15386,15592,15610],"fullWord":15092},{"subwords":[4667,4678,4810,5984,15060,15069,15093,15094],"fullWord":15094},{"subwords":[4678,4714,4810,4842,4935,4942,4944,5023,5034,5680,5725,5735,5984,5995,9108,9384,9385,15060,15093,15095,15312,15318,15321,15322,15428,15433,15542,15748,18576,18577,18835,18844,18845,18847,18848,18941,18942,19240,19241,19274],"fullWord":15095},{"subwords":[4678,4688,4810,5984,6406,6409,6412,6413,7056,7057,7058,15060,15093,15098,15099,15114,15115],"fullWord":15099},{"subwords":[5984,6008,6409,7057,7060,7068,15098,15100,15114,15116],"fullWord":15100},{"subwords":[4678,4810,5355,5740,5741,5984,15060,15093,15103,15104],"fullWord":15104},{"subwords":[4678,4728,4731,4810,5691,5756,5757,5984,10378,10383,10388,10389,15060,15093,15107,15108],"fullWord":15108},{"subwords":[5691,5984,6008,10383,10388,15107,15109],"fullWord":15109},{"subwords":[4678,4810,5984,6092,6100,15060,15093,15111,15112,15337,19992,19996,19997,20057],"fullWord":15112},{"subwords":[5984,6092,6100,6104,15111,15113,15286,15337,15354,16319,16340,16425,16449,16472,16473,19992,19996,19998,20000,20070,20073],"fullWord":15113},{"subwords":[5984,6008,6016,6409,6419,7057,7060,7061,7068,7069,15098,15101,15114,15116,15117,15134,16319,16340,16425,16428,16431],"fullWord":15117},{"subwords":[4678,4688,4810,5984,6406,6409,6412,7056,7057,7058,15060,15093,15098,15114,15115,15118],"fullWord":15118},{"subwords":[5691,5735,5765,5984,5995,6409,6416,6543,6568,6570,6621,6622,6743,6746,6765,7057,9384,10383,10388,10414,10536,10539,10540,10549,10554,10555,10677,15098,15107,15114,15119,15192,15444,15446,15454,15473],"fullWord":15119},{"subwords":[5765,5780,6430,6543,6568,6570,6577,6578,6580,6621,6622,6765,7091,9152,9153,9384,10414,10536,10539,10549,10554,10555,10677,15114,15120,15444,15446,15454,15473,15477],"fullWord":15120},{"subwords":[5765,5782,5827,5830,6446,6465,6543,6568,6570,6585,6621,6622,6629,6765,9384,10414,10536,10539,10549,10554,10555,10584,10595,10677,11539,11659,11668,11669,11743,15114,15121,15202,15444,15446,15454,15473,15480,15481],"fullWord":15121},{"subwords":[5735,5984,5995,5996,5998,6409,6453,6467,6543,6593,6601,6604,6621,6622,7057,9250,9384,9387,12339,15098,15114,15122,15175,15446],"fullWord":15122},{"subwords":[5735,5984,5995,6008,6409,6543,6621,6622,6624,7057,7060,7068,7083,9384,15098,15114,15116,15123,15446,15448],"fullWord":15123},{"subwords":[5705,5706,6018,6425,6543,6621,6622,6626,6636,6637,6647,6651,6654,7073,7074,7085,9135,9384,9389,9409,9447,15114,15124,15125,15134,15135,15306,15312,15446,15449,15458,15460,15526,15542,15543,15748,16431,16437,16457,16801,16803,16889,16890,16907,16911,17722,17881,17971,18844,18847,18849,18850,18941,18943,18947,19243,19277],"fullWord":15125},{"subwords":[5691,5765,5984,6409,6416,6743,6746,6757,7057,10383,10388,10494,15098,15107,15114,15127,15373],"fullWord":15127},{"subwords":[5765,5950,6507,6756,6793,6817,6819,6874,6940,6955,7014,7016,7103,7123,10443,10882,10942,10945,12845,12979,13110,13114,15114,15128,15610,15621,15734,15739,20875,20885,20887,20933],"fullWord":15128},{"subwords":[5765,6757,6821,6824,6851,7153,7194,7196,10470,10494,11029,11058,11059,15114,15129,15373,15777,15800],"fullWord":15129},{"subwords":[4728,4810,5114,5115,5146,5756,5765,5950,6406,6740,6793,6874,6902,6904,6940,6951,6955,7056,7103,10378,10443,10780,10878,10882,12752,12837,12839,12845,12979,15060,15078,15114,15131,15600,15603,15610,15621],"fullWord":15131},{"subwords":[5827,5950,6008,6446,6874,6940,6955,6973,6978,7103,7111,11539,11970,12979,15114,15132,15202,15610,15627,15632],"fullWord":15132},{"subwords":[5691,5765,5984,6083,6409,6416,6475,6743,6746,6821,6824,7057,7153,7155,7194,7196,10383,10388,10470,11029,15098,15107,15114,15136,15777,15800],"fullWord":15136},{"subwords":[5984,5988,6409,7057,7130,7194,7467,15098,15114,15137,15141,15777,15790,19855],"fullWord":15137},{"subwords":[4774,4810,5471,5507,5511,5539,5865,6406,6453,6458,6467,6501,7056,7075,7179,7180,7194,12358,12624,12626,15060,15114,15138,15227,15773,15777,15778,15821,15822,19660,19676,19866],"fullWord":15138},{"subwords":[5984,6409,6419,7057,7061,7194,7206,7210,7212,15098,15101,15114,15134,15139,15334,15777,15782,15840,16319,16340,16425,16431,18066,18071,18150,18155,19876,19878,19880],"fullWord":15139},{"subwords":[5705,5984,6409,6420,6489,7057,7073,7194,15098,15114,15135,15140,15312,15748,15777,15858,18576,19240,19243,19356,19468],"fullWord":15140},{"subwords":[269,287,349,622,817,5588,5591,5595,5894,5976,5988,5996,7283,7285,7375,7461,7493,7604,7918,8015,9376,9378,9384,12229,12230,12319,14758,14762,14784,14821,14832,14833,14838,15141,15142,15150,15154,15173,15175,15234,15461,15494],"fullWord":15142},{"subwords":[269,294,311,399,401,817,833,5583,5585,5588,5592,5691,5976,5984,5988,7293,7298,7375,7461,7467,7477,7661,7678,10109,10110,10208,10324,10355,10383,10388,10398,10405,14758,14762,14968,15107,15141,15143,15144],"fullWord":15144},{"subwords":[269,270,817,4516,4518,4607,4810,5310,5346,5351,5588,5666,5707,5976,5988,6008,7253,7375,7383,7461,7907,7908,7910,14736,14758,14762,14763,14872,14961,14983,15060,15141,15145],"fullWord":15145},{"subwords":[269,311,817,5583,5588,5976,5984,5988,6008,7375,7461,7467,14758,14762,14872,14983,15141,15146],"fullWord":15146},{"subwords":[5723,5894,5928,5935,5984,5988,5998,7467,7493,7496,7499,7509,7512,7540,7984,7987,12339,12374,15141,15147,15241,15312,15748,18576,18583,18607,18649,18650,19240],"fullWord":15147},{"subwords":[269,311,817,5583,5588,5709,5712,5976,5984,5988,7267,7269,7271,7375,7461,7467,14758,14762,15141,15149],"fullWord":15149},{"subwords":[4714,4728,4739,4810,4935,4947,5023,5028,5351,5756,5988,7477,7478,7484,7586,7588,7617,7620,7622,7684,7686,7997,9117,9119,9384,9385,10378,10398,10414,10530,10536,10537,10549,10562,10677,15060,15141,15151,15428,15433,15437,15444,15461,15473,15474],"fullWord":15151},{"subwords":[5988,7477,7487,7540,7596,7622,7628,7637,8035,9384,10398,10408,10414,10460,10536,10549,10562,10677,10691,10694,10695,10705,15141,15152,15197,15312,15444,15461,15473,15542,15748,18844,18847,18855,18863,18866,18868,18941,19280],"fullWord":15152},{"subwords":[5735,5828,5830,5984,5988,5995,7467,7489,7530,8009,8010,9384,11487,11539,11543,11548,11649,11743,15141,15153,15202,15461,15480,15481],"fullWord":15153},{"subwords":[269,287,349,622,817,5588,5591,5595,5894,5976,5988,5996,7283,7285,7375,7461,7493,7604,7918,8015,9376,9378,9384,12229,12230,12319,14758,14762,14784,14821,14832,14833,14838,15141,15142,15150,15154,15173,15175,15234,15461,15494],"fullWord":15154},{"subwords":[5718,5894,5953,5988,5989,5996,7493,7604,7788,7815,7816,7855,8015,8045,9140,9360,9384,9400,12347,12509,12513,12514,12548,12798,12876,12979,12995,15141,15155,15173,15175,15234,15238,15461,15494,15610],"fullWord":15155},{"subwords":[5691,5984,5988,6083,7467,7477,7678,7722,7724,8083,10383,10388,10398,10405,10470,10981,10982,11029,15107,15141,15156,15777,15790,15800,19855],"fullWord":15156},{"subwords":[269,399,620,622,625,627,817,833,5588,5592,5595,5745,5894,5976,5988,7293,7298,7375,7461,7477,7493,7494,7661,7674,7680,7740,10109,10110,10174,10208,10324,10344,10355,10356,10398,12229,12230,12319,14758,14762,14821,14832,14833,14968,15141,15143,15157,15225],"fullWord":15157},{"subwords":[5846,5894,5988,7489,7493,7530,7545,7759,8145,8151,11487,11512,11534,11539,12104,15141,15158,15202,15777,15790,15806,15821,15822,15824,19855,19866],"fullWord":15158},{"subwords":[5723,5984,5988,6008,7467,7540,7987,15141,15159,15312,15748,18576,18652,18655,19240],"fullWord":15159},{"subwords":[5984,5988,6008,6118,6119,7467,7991,15141,15160,20532,20587],"fullWord":15160},{"subwords":[5718,5988,5989,6008,7788,7855,7991,8071,8072,12798,12979,13110,15141,15161,15610,15612,15734,15741,20875,20933],"fullWord":15161},{"subwords":[269,622,817,5588,5595,5894,5976,5988,7375,7461,7493,8233,8304,8307,8333,8453,8540,8552,12229,12230,12319,14758,14762,14775,14821,14832,14833,15141,15162,15376],"fullWord":15162},{"subwords":[325,817,825,905,906,932,5588,5599,5976,5977,8239,8240,8333,8338,8359,8362,8363,8453,8456,8552,8584,8934,14775,14881,14886,15163,15376,15377,16270,16286,16419,16516,16549,16574,16577],"fullWord":15163},{"subwords":[817,5588,5976,5984,6008,8333,8453,8455,8483,8552,8562,8583,14775,14872,14983,15164,15376],"fullWord":15164},{"subwords":[229,817,826,911,1009,5588,5600,5620,5622,5976,5982,5984,6055,6066,8333,8360,8378,8381,8383,8453,8458,8461,8463,8483,8552,8562,8563,14775,14898,14901,15165,15312,15376,15748,18449,18453,18541,18554,18576,18697,18698,18712,18767,19240],"fullWord":15165},{"subwords":[5691,5984,8483,8488,8490,8552,8562,10383,10388,15107,15166],"fullWord":15166},{"subwords":[5845,5984,8483,8532,8534,8539,8552,8562,8568,8572,8584,8934,11539,11543,11546,11563,15167,15168,15202,15224,16319,16330,16340,16425,16574,16587],"fullWord":15168},{"subwords":[5735,5984,5995,6008,8483,8503,8552,8562,8583,8625,8672,8674,9384,15169],"fullWord":15169},{"subwords":[5894,5988,7493,7759,8151,8540,8552,8945,8951,8952,8954,8989,8990,8991,12349,15141,15170,15777,15790,15821,15822,15824,19583,19855,19866],"fullWord":15170},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":15174},{"subwords":[4678,4714,4774,4778,4810,4935,4985,4988,4990,5023,5665,5725,5735,5865,5868,5984,5995,5996,5998,9108,9384,9385,9387,12339,12340,12358,12360,15060,15093,15175,15176,15227,15428,15433,15491],"fullWord":15176},{"subwords":[3161,4120,4144,5737,5984,5985,6057,9531,9533,9557,15021,15178,15312,15748,18576,18642,19240],"fullWord":15178},{"subwords":[5953,5996,9360,9384,9400,9614,9624,9625,9627,12513,12514,12548,12876,12979,15175,15179,15238,15610],"fullWord":15179},{"subwords":[5698,5740,5742,5984,6189,6196,6197,6198,9865,9870,15103,15105,15106,15180,15181,15866,15867,16319,16326,16340,16425,16992,21130,21212],"fullWord":15181},{"subwords":[399,401,405,488,491,817,826,911,1009,5588,5592,5620,5622,5691,5750,5752,5976,5982,5984,6055,10247,10254,10324,10355,10383,10388,10460,14898,14901,14968,15107,15182,15186,15312,15748,18370,18372,18449,18453,18541,18547,18554,18576,19240],"fullWord":15182},{"subwords":[227,399,407,817,825,905,906,924,1196,1197,5588,5592,5593,5594,5599,5619,5976,5977,10207,10228,10304,10306,10307,10313,10324,10355,10359,10360,10495,10496,11065,11066,11074,11075,14805,14881,14939,14944,14968,14973,15183,15184,15201,15282,15864,15865,15866,15867,15942,15948,16103,16105,16270,16274,16286,16419,16420,17039,17040,17149,17150,21050,21071,21097,21099,21104,21105,21130,21212],"fullWord":15184},{"subwords":[5691,5928,5935,5984,5998,10383,10388,10437,10460,12339,12374,15107,15185,15186,15241,15312,15748,18576,18583,18607,18649,18650,19240],"fullWord":15185},{"subwords":[5691,5693,5790,5984,6018,6046,10383,10388,10390,10392,10451,10459,10460,10465,15107,15110,15186,15187,15290,15306,15312,15748,16319,16340,16425,16457,17052,17818,17823,17828,17840,18576,18588,18658,19240,19242],"fullWord":15187},{"subwords":[3120,3123,4158,6023,9079,9085,9384,9389,9409,9416,10414,10415,10518,10536,10549,10550,10551,10677,15021,15048,15188,15189,15411,15415,15444,15445,15473,15475,15526,16178,16179,16298,16769,16889,16890,17062,17064,17072,17722],"fullWord":15189},{"subwords":[3120,3135,3161,3429,3430,3432,4240,6057,9079,9384,10376,10414,10460,10518,10536,10549,10677,10691,10694,10695,10705,15021,15051,15188,15190,15197,15312,15411,15444,15473,15542,15748,18823,18844,18847,18863,18866,18868,18941,19267],"fullWord":15190},{"subwords":[4678,4714,4728,4731,4739,4810,4935,5023,5691,5725,5735,5756,5757,5771,5984,5995,9108,9117,9119,9384,9385,10378,10383,10388,10414,10530,10536,10537,10538,10549,10677,15060,15093,15107,15191,15428,15433,15444,15473,15474],"fullWord":15191},{"subwords":[5691,5735,5765,5984,5995,6409,6416,6543,6568,6570,6621,6622,6743,6746,6765,7057,9384,10383,10388,10414,10536,10539,10540,10549,10554,10555,10677,15098,15107,15114,15119,15192,15444,15446,15454,15473],"fullWord":15192},{"subwords":[5691,5693,5735,5790,5984,5995,9384,9389,9409,9416,10383,10388,10390,10392,10414,10415,10451,10536,10549,10550,10551,10677,15107,15110,15193,15444,15445,15473,15475,15526,16319,16340,16425,16889,16890,16892,17072,17722],"fullWord":15193},{"subwords":[5691,5735,5984,5995,5996,5998,9384,9387,10383,10388,10414,10536,10544,10549,10625,10632,10677,12339,12438,12439,15107,15175,15194,15444,15473],"fullWord":15194},{"subwords":[5769,8500,8502,8503,8505,8552,8584,8625,8628,8672,8676,8678,8934,9384,9389,9409,9416,10414,10415,10536,10549,10550,10551,10677,15195,15444,15445,15473,15475,15526,16574,16617,16642,16889,16890,17072,17722],"fullWord":15195},{"subwords":[6018,9384,9389,9409,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10549,10550,10551,10677,10686,10689,10691,10694,10695,10696,10697,10705,10706,10707,15196,15197,15306,15312,15444,15445,15473,15475,15526,15542,15543,15748,16457,16840,16889,16890,16907,16911,17072,17093,17722,17862,17881,18844,18847,18849,18850,18863,18866,18868,18869,18870,18941,18943,18947,19277],"fullWord":15196},{"subwords":[5691,5735,5796,5984,5995,6092,6100,6107,6108,9384,10383,10388,10414,10471,10479,10481,10483,10536,10549,10677,10711,10716,10722,15107,15198,15337,15340,15348,15444,15473,15549,19992,19996,20004,20006,20129,20132,20144,20146],"fullWord":15198},{"subwords":[183,191,396,399,472,817,4466,4516,4601,4607,4728,4810,5114,5115,5146,5588,5592,5756,5976,10090,10093,10097,10202,10324,10327,10355,10378,10443,10730,10732,10780,10878,10882,12680,12681,12752,12837,12839,12845,12948,12973,12979,12980,14736,14961,14968,15060,15078,15199,15561,15600,15603,15610,15621],"fullWord":15199},{"subwords":[215,399,472,477,680,817,5588,5592,5595,5745,5914,5953,5976,10174,10324,10344,10355,10356,10443,10444,10741,10743,10822,10824,10876,10882,10886,12229,12319,12504,12548,12680,12845,12876,12948,12979,14821,14968,15200,15225,15238,15568,15610,15621],"fullWord":15200},{"subwords":[526,817,869,871,4472,4475,4516,4607,4671,4678,4810,4818,4819,5318,5342,5588,5589,5658,5663,5976,5984,11107,11115,11120,11276,11286,11437,11438,11478,11539,11543,14736,14808,14961,14975,14976,15060,15093,15202,15203],"fullWord":15203},{"subwords":[337,341,343,349,399,553,817,857,869,5588,5592,5782,5830,5976,9376,9384,10121,10136,10145,10150,10324,10355,10414,10502,10536,10549,10584,10585,10595,10675,10677,11148,11150,11173,11180,11182,11276,11286,11292,11303,11437,11442,11539,11659,11668,11669,11743,14780,14808,14810,14968,14971,14975,15202,15204,15399,15444,15473,15480,15481],"fullWord":15204},{"subwords":[341,343,349,358,528,553,817,869,5588,5595,5830,5976,5996,9204,9376,9378,9384,11156,11157,11213,11218,11276,11286,11292,11294,11437,11446,11489,11512,11539,11645,11697,11706,11708,11743,12229,12244,12245,12248,12319,12443,14784,14808,14810,14821,14838,14975,15175,15202,15205,15207,15480,15481],"fullWord":15205},{"subwords":[526,817,867,869,5588,5740,5976,5984,9768,11167,11168,11276,11286,11296,11437,11480,11539,11543,14798,14808,14975,15103,15202,15206],"fullWord":15206},{"subwords":[176,528,529,605,608,817,869,871,4472,4475,4479,4481,4492,4500,4516,4532,4605,4607,4774,4810,4818,4819,5318,5342,5588,5595,5658,5865,5976,11107,11115,11120,11213,11218,11219,11276,11286,11437,11438,11446,11512,11516,11539,12229,12244,12245,12246,12248,12274,12319,12358,14736,14808,14821,14826,14961,14975,15060,15202,15207,15208,15227],"fullWord":15208},{"subwords":[817,867,869,872,5588,5976,6008,9768,11167,11168,11276,11286,11296,11298,11437,11539,14798,14800,14808,14872,14975,14983,14986,15202,15210],"fullWord":15210},{"subwords":[4671,4678,4810,4818,5430,5567,5570,5698,5825,5984,6189,6191,6196,11478,11539,11543,15060,15089,15093,15097,15202,15211,15866],"fullWord":15211},{"subwords":[5691,5782,5984,10383,10388,10460,11483,11502,11504,11539,11543,11574,11578,11581,11588,15107,15186,15202,15212,15214,15312,15748,18576,18579,18595,18644,19240],"fullWord":15212},{"subwords":[4671,4678,4774,4810,4818,5665,5822,5865,5868,5984,5998,11478,11512,11516,11519,11539,11543,12339,12340,12358,15060,15093,15202,15213,15227],"fullWord":15213},{"subwords":[4714,4774,4780,4810,4818,4935,4938,4971,4972,4973,4985,4988,4990,5023,5830,5865,5996,9109,9384,9385,11489,11512,11516,11539,11626,11645,11697,11702,11704,11706,11707,11708,11743,11744,12358,12443,15060,15175,15202,15215,15227,15428,15433,15480,15481,15482,15491],"fullWord":15215},{"subwords":[5830,5831,5845,6039,9384,9389,9409,9422,9423,11539,11569,11743,11745,11764,11765,11766,11774,12082,15202,15216,15224,15480,15481,15484,15489,15526,15530,16356,16375,16376,16889,16890,16895,16899,16903,17722],"fullWord":15216},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":15218},{"subwords":[4728,4763,4810,4818,5114,5115,5146,5163,5165,5213,5756,5782,10378,10443,10780,10878,10882,11492,11539,11831,11833,11834,11865,11867,11870,11970,11971,12752,12837,12839,12845,12979,15060,15078,15202,15220,15600,15603,15610,15621,15627,15632],"fullWord":15220},{"subwords":[817,869,872,878,5588,5976,6008,11265,11276,11286,11437,11539,11970,12680,12979,14808,14872,14975,14983,14986,15202,15221,15564,15566,15570,15610,15627,15632],"fullWord":15221},{"subwords":[5838,5840,5984,11483,11539,11543,11574,11578,11580,11581,11588,11592,11970,11989,12010,12011,12979,13008,15202,15214,15222,15312,15610,15627,15632,15691,15694,15748,18576,18579,18595,18644,18981,19026,19032,19093,19101,19240],"fullWord":15222},{"subwords":[5984,6092,6100,11539,11543,11970,12059,12060,12979,13095,15202,15223,15337,15610,15627,15632,15728,19992,19996],"fullWord":15223},{"subwords":[526,528,817,869,5588,5595,5881,5976,5984,5998,11213,11218,11276,11286,11437,11446,11447,11512,11539,11543,12229,12244,12245,12248,12319,12339,14808,14821,14830,14975,15202,15207,15226],"fullWord":15226},{"subwords":[4667,4678,4774,4810,5665,5865,5867,5868,5984,5998,12339,12340,12358,15060,15066,15069,15093,15227,15228],"fullWord":15228},{"subwords":[4678,4774,4810,5665,5865,5868,5984,5998,6008,6012,12339,12340,12358,15060,15093,15227,15229],"fullWord":15229},{"subwords":[5894,5984,5988,5998,7467,7493,7496,7509,7984,12339,15141,15231],"fullWord":15231},{"subwords":[5918,5984,5998,6000,6118,6119,6120,6121,12339,12390,12394,12397,15232,15233,15292,16319,16335,16340,16425,16475,16478,16481,17237,20532,20541,20544,20579,20584,20587,20984,20986],"fullWord":15233},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":15235},{"subwords":[5928,5935,5984,5998,12339,12374,15236,15241,15312,15748,18576,18583,18607,18617,18649,18650,19240],"fullWord":15236},{"subwords":[5996,9297,9300,9384,12448,15175,15237],"fullWord":15237},{"subwords":[5953,5996,6008,9360,9384,9400,9402,12513,12514,12548,12876,12979,15175,15238,15239,15610],"fullWord":15239},{"subwords":[5909,5953,12353,12390,12528,12533,12548,12606,12876,12979,13110,13119,13121,15238,15240,15368,15610,15734,20579,20875,20897,20933,20944,20984],"fullWord":15240},{"subwords":[399,405,488,491,693,694,705,709,817,911,1009,5588,5592,5595,5620,5745,5976,5982,6055,6074,10174,10247,10251,10254,10324,10344,10349,10355,10356,10358,10437,10460,12229,12292,12319,12325,12374,14821,14847,14898,14901,14968,15225,15241,15242,15312,15748,18370,18372,18408,18449,18453,18460,18541,18547,18554,18607,18649],"fullWord":15242},{"subwords":[4678,4774,4788,4810,4842,5665,5865,5868,5928,5935,5984,5998,12339,12340,12358,12374,15060,15093,15227,15241,15243,15312,15318,15748,18576,18577,18583,18607,18610,18612,18649,18650,19240,19241,19248],"fullWord":15243},{"subwords":[5928,5935,5984,5998,6008,12339,12374,15241,15244,15312,15748,18576,18583,18607,18649,18650,18652,18655,19240],"fullWord":15244},{"subwords":[5953,5984,5998,12339,12547,12548,12876,12916,12918,12920,12979,13489,13499,13506,13539,13564,13577,13583,14105,14147,14154,14262,14269,14350,14372,14373,15238,15247,15248,15610,15663],"fullWord":15247},{"subwords":[93,121,732,735,796,817,867,2807,2921,2922,2924,2941,2954,2987,2989,4077,4078,4107,5588,5956,5976,13154,13155,13157,13162,13164,13286,13294,13306,13439,13446,13455,13472,13577,13590,14262,14717,14729,14798,14851,14852,14979,15021,15025,15248,15249],"fullWord":15249},{"subwords":[326,327,329,349,351,732,733,735,817,854,4516,4599,4607,4714,4810,4899,4935,5014,5023,5323,5377,5588,5956,5976,9103,9376,9384,9385,13171,13174,13176,13190,13200,13201,13286,13292,13294,13295,13439,13455,13478,13577,13705,13710,13712,14262,14303,14306,14736,14776,14851,14852,14853,14857,14961,14979,15060,15076,15248,15250,15428,15433,15508,15509],"fullWord":15250},{"subwords":[349,352,732,735,817,5588,5956,5976,6008,9376,9384,13200,13286,13294,13297,13439,13455,13577,13705,13712,14262,14307,14851,14852,14854,14859,14872,14979,14983,15248,15251,15508,15509,15513],"fullWord":15251},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":15252},{"subwords":[732,735,737,739,775,779,781,782,817,825,905,906,911,918,961,966,993,1009,5588,5599,5616,5620,5626,5956,5976,5977,5982,6018,6033,6055,13286,13294,13299,13321,13322,13328,13329,13333,13336,13352,13355,13358,13364,13367,13372,13373,13374,13385,13439,13455,13459,13460,13461,13464,13465,13577,13599,13609,13613,13626,14247,14248,14251,14252,14262,14281,14284,14403,14427,14851,14852,14856,14866,14867,14881,14891,14898,14901,14905,14912,14979,14982,15248,15253,15272,15305,15306,15312,15748,16014,16041,16043,16270,16286,16293,16409,16410,16419,16457,17476,17494,17495,17510,17511,17523,17652,17773,17775,17836,17948,17961,18436,18437,18439,18440,18441,18448,18449,18453,18455,18467,18469,18472,18541,18554,18557,18559,19221,19222,19381,19386],"fullWord":15253},{"subwords":[732,735,817,1106,1109,5588,5629,5956,5976,5984,6092,6100,13286,13294,13300,13335,13401,13403,13439,13455,13489,13506,13577,13583,14262,14851,14852,14921,14979,14990,15248,15254,15337,19992,19993,19996],"fullWord":15254},{"subwords":[227,732,735,737,738,739,775,779,817,825,905,906,961,966,1196,1197,5588,5599,5619,5956,5976,5977,6033,6038,13286,13294,13299,13321,13322,13336,13424,13428,13429,13436,13439,13455,13459,13461,13577,14258,14261,14262,14281,14290,14293,14403,14410,14576,14577,14851,14852,14856,14866,14881,14891,14895,14939,14944,14979,14982,15248,15255,15256,15272,15282,15305,15864,15865,15866,15867,16014,16103,16105,16270,16286,16419,17476,17494,17495,17518,17523,17655,17672,17697,21064,21067,21071,21097,21099,21104,21105,21127,21130,21212],"fullWord":15256},{"subwords":[399,401,481,732,735,817,5588,5592,5691,5956,5976,5984,10182,10324,10350,10352,10355,10383,10388,10448,13204,13207,13210,13286,13294,13439,13450,13455,13456,13489,13495,13506,13577,13583,13940,14262,14851,14852,14968,14979,15107,15248,15257,15259],"fullWord":15257},{"subwords":[732,735,781,782,817,826,911,1009,5588,5620,5622,5956,5976,5982,5984,6055,6056,13286,13294,13328,13329,13364,13367,13372,13439,13455,13460,13464,13489,13506,13577,13583,13599,13613,13617,14247,14248,14262,14851,14852,14867,14898,14901,14979,15248,15258,15312,15748,18436,18437,18439,18449,18453,18467,18541,18554,18576,19221,19240],"fullWord":15258},{"subwords":[5691,5693,5790,5984,6033,10383,10388,10390,10392,10448,10449,10451,13489,13495,13498,13506,13508,13510,13577,13583,13584,14262,14281,14403,15107,15110,15248,15259,15260,15272,15305,16319,16336,16340,16425,17049,17658],"fullWord":15260},{"subwords":[5928,5935,5984,5998,12339,12374,13489,13499,13506,13539,13560,13577,13583,13599,13613,13617,14262,14269,15241,15248,15261,15312,15748,18576,18583,18607,18649,18650,19240],"fullWord":15261},{"subwords":[5735,5984,5995,5996,5998,9384,9387,12339,12453,13489,13499,13506,13539,13577,13583,13705,13712,13765,13769,14262,14269,15175,15248,15262,15263,15508,15509,15511],"fullWord":15263},{"subwords":[5918,5996,6000,6033,9307,9384,9389,9409,12453,12459,13520,13539,13549,13558,13577,13588,13705,13712,13715,13716,13765,13769,13772,13798,14262,14281,14309,14336,14403,14421,15175,15177,15248,15262,15264,15272,15296,15305,15500,15508,15509,15511,15512,15514,15524,15526,15527,16439,16858,16860,16883,16889,16890,16893,17248,17249,17251,17565,17580,17582,17591,17722],"fullWord":15264},{"subwords":[399,481,732,735,817,5588,5592,5595,5745,5956,5976,10174,10182,10324,10344,10350,10355,10356,12229,12257,12259,12317,12319,12356,13204,13207,13210,13239,13245,13247,13286,13294,13439,13450,13453,13455,13456,13539,13540,13577,13904,13906,13908,13940,13952,14262,14821,14851,14852,14968,14979,15225,15248,15265],"fullWord":15265},{"subwords":[227,399,481,732,735,738,817,1196,5588,5592,5594,5956,5976,10182,10304,10306,10324,10350,10355,10359,10495,11065,11074,13204,13207,13210,13286,13294,13313,13424,13428,13439,13450,13455,13456,13458,13577,13932,13936,13940,14009,14010,14258,14262,14290,14410,14576,14851,14852,14939,14968,14979,15183,15201,15248,15255,15266,15267,15864,15866,21050,21064,21071,21097,21099,21115,21127],"fullWord":15266},{"subwords":[6008,12916,12937,12979,13008,13577,13599,13613,13624,14027,14147,14160,14163,14188,14262,14286,14350,15248,15268,15271,15312,15330,15610,15663,15665,15691,15694,15748,18652,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":15268},{"subwords":[5984,6004,6005,6033,12916,12925,12936,12979,12982,13007,13489,13506,13508,13510,13577,13583,13584,13607,14147,14149,14166,14168,14262,14281,14350,14383,14384,14403,15248,15269,15272,15305,15610,15611,15663,15668,15676,16319,16336,16340,16425,17406,17419,17638,17658],"fullWord":15269},{"subwords":[4673,4678,4810,5984,13478,13489,13490,13502,13506,13569,13577,13583,14237,14262,14278,15060,15093,15248,15270],"fullWord":15270},{"subwords":[5984,6021,13489,13506,13577,13583,13599,13602,13613,13617,14262,14518,14519,14561,15248,15273,15312,15748,15777,15836,15858,18576,19240,19356,19453],"fullWord":15273},{"subwords":[817,4516,4518,4607,4608,4678,4810,5346,5588,5589,5976,5984,6008,6012,14736,14872,14961,14964,14983,14984,15060,15093,15276],"fullWord":15276},{"subwords":[5780,6008,10443,10882,12845,12979,15277,15610,15621,15623,15625],"fullWord":15277},{"subwords":[5918,6000,6008,6016,12655,12657,15278,15279,15777,15780,15781,15782,15821,15822,15823,15832,15840,18066,18071,18117,18150,18152,19866,19867,19876,19880],"fullWord":15279},{"subwords":[399,401,407,817,825,905,906,5588,5592,5593,5599,5605,5607,5609,5691,5693,5790,5976,5977,5978,5984,10207,10228,10324,10355,10360,10361,10363,10383,10388,10390,10392,10451,14805,14881,14968,14973,15107,15110,15280,15284,15942,15948,16024,16270,16274,16276,16286,16319,16340,16419,16420,16425],"fullWord":15280},{"subwords":[3119,3154,3155,4120,4130,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,5984,6023,15021,15048,15058,15283,15334,15777,15782,15840,16228,16298,16307,16319,16340,16425,18056,18066,18071,18150,19876,19878,19880],"fullWord":15283},{"subwords":[399,401,407,817,825,905,906,5588,5592,5593,5599,5605,5607,5609,5691,5693,5790,5976,5977,5978,5984,10207,10228,10324,10355,10360,10361,10363,10383,10388,10390,10392,10451,14805,14881,14968,14973,15107,15110,15280,15284,15942,15948,16024,16270,16274,16276,16286,16319,16340,16419,16420,16425],"fullWord":15284},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":15285},{"subwords":[4678,4679,4680,4810,4826,5984,15060,15071,15087,15093,15096,15286,15287,16311,16319,16320,16322,16340,16425,16426],"fullWord":15287},{"subwords":[5691,5693,5780,5781,5790,5984,10383,10388,10390,10392,10451,15107,15110,15288,16319,16340,16368,16369,16425],"fullWord":15288},{"subwords":[5918,5928,5929,5935,5984,5998,5999,6000,6018,6046,12339,12362,12368,12370,12374,12376,15241,15245,15289,15290,15306,15312,15748,16319,16335,16340,16399,16425,16457,17237,17823,17840,17843,18576,18583,18585,18588,18607,18624,18625,18627,18649,18650,18651,18658,19240,19242],"fullWord":15289},{"subwords":[5984,6018,6031,6039,6042,6046,6047,15290,15291,15306,15309,15312,15748,16319,16340,16341,16342,16425,16429,16430,16457,16464,17823,17824,17840,17842,18576,18588,18658,19240,19242,19253],"fullWord":15291},{"subwords":[6033,8503,8505,8549,8552,8584,8625,8628,8664,8671,8672,8676,8678,8934,9384,9389,9409,13577,13588,13589,13651,13705,13712,13715,13716,13841,14262,14281,14309,14336,14403,14421,15248,15272,15293,15305,15508,15509,15514,15524,15526,16574,16617,16639,16642,16883,16889,16890,17565,17591,17722],"fullWord":15293},{"subwords":[4678,4679,4680,4714,4810,4826,4833,4935,4939,5023,5037,5367,5725,5726,5735,5984,5995,9108,9111,9127,9384,9385,9389,9409,15060,15071,15087,15093,15096,15294,15428,15433,15436,15443,15526,16311,16319,16320,16340,16425,16426,16780,16889,16890,16891,16892,17722],"fullWord":15294},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":15295},{"subwords":[5918,5996,6000,6039,9307,9384,9389,9409,12367,15175,15177,15296,15297,15500,15503,15526,15527,15530,16439,16442,16858,16860,16861,16881,16889,16890,16893,16894,16895,16899,16903,17722],"fullWord":15297},{"subwords":[6018,6039,9384,9389,9409,9447,15298,15306,15309,15312,15526,15530,15542,15543,15748,16457,16464,16889,16890,16895,16899,16903,16906,16907,16911,16913,16915,17722,17857,17881,17882,18844,18847,18849,18850,18941,18943,18947,19253,19277],"fullWord":15298},{"subwords":[4728,4810,4826,5114,5115,5116,5117,5146,5148,5216,5221,5223,5225,5756,5760,6004,10378,10443,10447,10780,10782,10878,10881,10882,10883,10888,10889,12752,12755,12837,12839,12844,12845,12848,12979,12982,13007,15060,15078,15081,15087,15299,15600,15603,15609,15610,15611,15621,15622,15676,15677,17044,17097,17323,17354,17357,17358,17359,17360,17419,17420],"fullWord":15299},{"subwords":[5691,5693,5790,5984,6004,6005,10383,10388,10390,10392,10443,10447,10451,10882,10883,10888,10889,12845,12848,12979,12982,13007,15107,15110,15300,15610,15611,15621,15622,15676,16319,16340,16425,17097,17354,17359,17419,17420],"fullWord":15300},{"subwords":[6004,6008,6016,6018,12979,12982,13007,13008,13011,15301,15306,15312,15330,15610,15611,15676,15688,15691,15694,15695,15700,15748,16457,17419,17423,17429,17431,17435,17924,18652,18981,18985,19093,19101,19103,19113],"fullWord":15301},{"subwords":[5909,5918,5953,5955,6000,6004,12390,12397,12506,12548,12556,12560,12561,12606,12610,12876,12879,12979,12982,13007,13110,13112,13119,13121,13122,13124,15238,15302,15303,15368,15610,15611,15676,15734,15744,16391,16445,16475,16481,17272,17284,17383,17419,17464,17466,17469,18272,18273,20579,20584,20875,20877,20897,20933,20944,20947,20948,20984,20986],"fullWord":15303},{"subwords":[6004,6039,12979,12982,13007,13110,13112,15302,15304,15610,15611,15676,15679,15734,15744,16445,16475,16482,17419,17424,17434,17464,17466,17467,17470,18272,20875,20877,20933,20947,20950],"fullWord":15304},{"subwords":[4678,4679,4680,4810,4826,4830,4842,4843,5360,5984,6018,6046,15060,15071,15087,15093,15096,15290,15306,15307,15312,15318,15748,16311,16319,16320,16340,16425,16426,16457,17816,17823,17840,18575,18576,18577,18588,18658,19240,19241,19242],"fullWord":15307},{"subwords":[5984,6008,6016,6018,6046,15290,15306,15308,15312,15748,16319,16340,16425,16428,16457,17823,17840,18576,18588,18652,18655,18658,18659,19240,19242],"fullWord":15308},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":15310},{"subwords":[5845,5846,5847,5984,11539,11543,11546,12152,12154,15202,15224,15311,15334,15777,15782,15806,15820,15840,16319,16330,16340,16425,16446,18066,18071,18103,18150,19876,19878,19880],"fullWord":15311},{"subwords":[337,349,399,405,434,435,488,491,817,857,911,1009,5588,5592,5620,5976,5982,6055,9376,9382,9384,9437,10121,10126,10247,10254,10324,10355,10414,10460,10502,10536,10549,10675,10677,10691,10694,10695,10705,14780,14898,14901,14968,15197,15312,15313,15399,15444,15473,15542,15748,18347,18349,18351,18370,18372,18449,18453,18541,18547,18554,18844,18847,18863,18866,18868,18941,19210,19262],"fullWord":15313},{"subwords":[349,693,694,700,709,817,911,1009,5588,5595,5620,5976,5982,5996,6055,6074,9245,9325,9331,9338,9339,9376,9378,9382,9384,12229,12319,12325,12374,12463,12464,12466,14784,14821,14838,14847,14898,14901,15175,15241,15312,15314,15324,15542,15748,18347,18408,18449,18453,18460,18541,18554,18607,18649,18844,18847,18894,18898,18941,19212,19289],"fullWord":15314},{"subwords":[817,826,867,911,1009,5588,5620,5622,5740,5976,5982,5984,6055,9791,14798,14898,14901,15103,15312,15315,15748,18358,18360,18449,18453,18541,18545,18554,18576,19240,19244],"fullWord":15315},{"subwords":[817,911,1009,4516,4518,4537,4539,4551,4553,4607,4810,4812,5327,5346,5588,5620,5976,5982,6008,6055,14736,14872,14898,14901,14902,14903,14961,14983,15060,15312,15316,15318,15748,18339,18449,18450,18453,18454,18470,18541,18554,18652,18653,19205,19207,19233],"fullWord":15316},{"subwords":[5691,5780,5984,10383,10388,10460,15107,15186,15312,15319,15748,18576,18591,18592,19240],"fullWord":15319},{"subwords":[5984,6018,6046,15290,15306,15312,15320,15748,16319,16340,16425,16457,16466,17823,17840,17846,17960,18576,18588,18658,18662,18665,19240,19242,19255],"fullWord":15320},{"subwords":[4678,4714,4810,4842,4935,4942,4944,5023,5034,5680,5725,5735,5984,5995,9108,9384,9385,15060,15093,15095,15312,15318,15321,15322,15428,15433,15542,15748,18576,18577,18835,18844,18845,18847,18848,18941,18942,19240,19241,19274],"fullWord":15322},{"subwords":[5735,5984,5995,6018,6046,9384,9389,9409,9447,15290,15306,15312,15321,15323,15526,15542,15543,15748,16319,16340,16425,16457,16889,16890,16892,16907,16911,17722,17823,17840,17881,18576,18588,18658,18844,18847,18849,18850,18941,18943,18947,19240,19242,19277],"fullWord":15323},{"subwords":[349,693,694,700,709,817,911,1009,5588,5595,5620,5976,5982,5996,6055,6074,9245,9325,9331,9338,9339,9376,9378,9382,9384,12229,12319,12325,12374,12463,12464,12466,14784,14821,14838,14847,14898,14901,15175,15241,15312,15314,15324,15542,15748,18347,18408,18449,18453,18460,18541,18554,18607,18649,18844,18847,18894,18898,18941,19212,19289],"fullWord":15324},{"subwords":[5735,5984,5995,6008,9384,15312,15321,15325,15542,15748,18576,18652,18655,18844,18847,18941,19240,19275],"fullWord":15325},{"subwords":[4728,4810,5114,5115,5146,5161,5234,5237,5239,5756,10378,10443,10460,10780,10878,10882,10897,12752,12837,12839,12845,12979,13008,15060,15078,15312,15318,15326,15600,15603,15610,15621,15691,15694,15748,18981,18983,19016,19017,19093,19101,19310,19311],"fullWord":15326},{"subwords":[10027,12979,13008,15312,15327,15610,15648,15659,15691,15694,15697,15748,18981,19010,19060,19061,19093,19101,19106,19244],"fullWord":15327},{"subwords":[10443,10460,10833,10860,10862,10882,10897,12845,12846,12979,13008,15312,15328,15610,15621,15659,15691,15694,15697,15748,18981,19017,19060,19062,19064,19093,19101,19106],"fullWord":15328},{"subwords":[6008,12979,13008,13041,15312,15329,15330,15610,15691,15694,15703,15748,18652,18981,19093,19101,19117,19118,19131,19134,19138,19331],"fullWord":15329},{"subwords":[6008,12374,12659,15241,15278,15312,15332,15748,15777,15780,15821,15822,15833,15858,18607,18649,18652,19356,19358,19434,19438,19440,19476,19478,19866],"fullWord":15332},{"subwords":[5698,5984,6189,6196,13489,13506,13509,13577,13583,13599,13613,13617,14262,14290,14410,14576,15248,15312,15333,15748,15866,18576,19240,19257,19377,19559,19570,21127,21135],"fullWord":15333},{"subwords":[4678,4679,4680,4810,4826,4849,5471,5478,5984,15060,15071,15087,15093,15096,15334,15335,15773,15777,15778,15782,15840,16311,16319,16320,16340,16425,16426,18066,18067,18068,18071,18150,19846,19876,19877,19878,19880],"fullWord":15335},{"subwords":[5984,6031,6039,6042,15334,15336,15777,15782,15840,15841,15849,16319,16340,16341,16342,16425,16429,18066,18071,18072,18073,18150,19876,19878,19880,19881,19882,19886],"fullWord":15336},{"subwords":[574,732,735,817,869,1106,1109,5588,5956,5976,11270,11276,11286,11437,11539,13286,13294,13335,13401,13403,13439,13455,13577,13593,14240,14262,14808,14816,14851,14852,14921,14975,14979,15202,15209,15248,15337,15338,15747,19945,19947],"fullWord":15338},{"subwords":[399,401,817,1106,1109,5588,5592,5629,5691,5796,5976,5984,6092,6100,10285,10287,10324,10355,10368,10371,10383,10388,10471,10472,10479,14921,14923,14968,14990,15107,15337,15339,15340,19923,19924,19986,19992,19996,20014,20015],"fullWord":15339},{"subwords":[5691,5693,5790,5796,5797,5798,5984,6092,6100,6104,10383,10388,10390,10392,10451,10471,10479,10480,15107,15110,15337,15340,15341,15354,16319,16340,16425,16449,16472,19992,19996,19998,20000,20070,20073],"fullWord":15341},{"subwords":[1576,1587,2392,5984,6008,6092,6100,14995,15337,15342,19992,19996,20053],"fullWord":15342},{"subwords":[5984,6008,6092,6100,15111,15337,15343,19992,19996],"fullWord":15343},{"subwords":[5984,6008,6016,6092,6100,6104,15337,15344,15354,16319,16340,16425,16428,16449,16451,16472,19992,19996,19998,20000,20070,20073,20075],"fullWord":15344},{"subwords":[5984,6008,6092,6100,6101,15312,15337,15345,15748,18576,18652,18655,19240,19992,19996,20080,20095],"fullWord":15345},{"subwords":[5698,5984,6008,6092,6100,6103,6189,6196,15337,15346,15866,19992,19996,19999,20085],"fullWord":15346},{"subwords":[5735,5984,5995,6092,6100,6118,6119,9384,15337,15347,15549,19992,19996,20129,20132,20135,20137,20532,20560,20587,20817,20855,20857],"fullWord":15347},{"subwords":[5691,5735,5796,5984,5995,6092,6100,6107,6108,9384,10383,10388,10414,10471,10479,10481,10483,10536,10549,10677,10711,10716,10722,15107,15198,15337,15340,15348,15444,15473,15549,19992,19996,20004,20006,20129,20132,20144,20146],"fullWord":15348},{"subwords":[5735,5984,5995,6092,6100,6104,9384,9389,9409,15337,15349,15354,15526,15549,15554,16319,16340,16425,16449,16472,16798,16889,16890,16892,17722,19992,19996,19998,20000,20070,20073,20129,20132,20133,20134,20197],"fullWord":15349},{"subwords":[5735,5984,5995,6092,6100,9384,15337,15350,15549,19992,19996,20082,20129,20132,20219,20221],"fullWord":15350},{"subwords":[6008,9384,12979,13095,15337,15351,15549,15552,15610,15728,15730,20129,20132,20183],"fullWord":15351},{"subwords":[5740,5984,6092,6100,6112,6114,12979,13095,15103,15337,15352,15610,15728,19992,19996],"fullWord":15352},{"subwords":[10443,10460,10471,10488,10882,10897,10935,10938,12845,12979,13008,13095,13100,15312,15337,15353,15610,15621,15691,15694,15728,15748,18981,19017,19093,19101,19165,19340,20080,20095,20097,20250,20251,20255,20265,20267],"fullWord":15353},{"subwords":[5984,6092,6100,6104,15334,15337,15354,15355,15356,15777,15782,15840,16319,16340,16425,16449,16472,18066,18071,18150,19876,19878,19880,19992,19996,19998,20000,20070,20073],"fullWord":15356},{"subwords":[4678,4810,5984,6092,6100,15060,15093,15337,15357,19992,19996,20057,20082],"fullWord":15357},{"subwords":[817,1145,1147,4516,4518,4574,4607,4810,4865,5330,5331,5346,5361,5588,5976,6008,14736,14872,14933,14934,14961,14983,15060,15084,15358,20303,20309,20311,20410,20412,20415,20417,20418,20440,20510,20524],"fullWord":15358},{"subwords":[817,869,872,1145,5588,5976,6008,11276,11286,11399,11437,11539,11595,14808,14872,14933,14934,14975,14983,14986,15202,15359,20410,20417,20425,20427,20510],"fullWord":15359},{"subwords":[325,817,825,905,906,932,1145,1150,5588,5599,5976,5977,8333,8338,8362,8409,8416,8417,8418,8453,8456,8552,8584,8588,8594,8934,14775,14881,14886,14933,14938,15281,15360,15376,15377,16089,16091,16270,16286,16419,16475,16549,16574,16577,16610,16724,18220,20410,20417,20419,20442,20449,20450,20452,20510,20512,20599],"fullWord":15360},{"subwords":[4678,4679,4680,4810,4826,4865,4873,5361,5984,6118,6119,6120,6121,15060,15071,15087,15093,15096,15292,15362,15363,16311,16319,16320,16340,16425,16426,16475,16477,16478,18225,20524,20531,20532,20533,20536,20587],"fullWord":15363},{"subwords":[4678,4728,4731,4810,4865,5361,5691,5756,5757,5984,6118,6119,10378,10383,10388,10490,10491,15060,15093,15107,15362,15364,20524,20532,20533,20566,20568,20587],"fullWord":15364},{"subwords":[4714,4774,4810,4865,4935,4985,4988,4990,5023,5361,5865,5996,9384,9385,12358,12390,15060,15175,15227,15365,15366,15428,15433,15491,20524,20560,20561,20579,20581,20720,20722,20724,20738,20774,20779,20781,20785,20786,20817,20818,20984,20990],"fullWord":15366},{"subwords":[5735,5984,5995,6008,6118,6119,9384,15367,20532,20560,20587,20817,20819,20991],"fullWord":15367},{"subwords":[4810,4865,5114,5115,5273,5361,6008,12752,12974,12979,13110,13111,15060,15078,15369,15600,15603,15610,15734,15738,15741,20524,20875,20929,20933],"fullWord":15369},{"subwords":[6008,12979,13110,15370,15610,15734,15741,20875,20879,20880,20933,20934,20936],"fullWord":15370},{"subwords":[5984,6092,6100,6118,6119,12979,13095,13110,15337,15371,15610,15728,15734,19992,19996,20273,20277,20288,20532,20587,20875,20933,20962],"fullWord":15371},{"subwords":[732,735,817,1145,5588,5956,5976,6008,13286,13294,13297,13408,13410,13439,13455,13577,13630,14262,14289,14851,14852,14854,14872,14933,14934,14979,14983,15248,15372,20410,20417,20436,20438,20510,20973],"fullWord":15372},{"subwords":[5953,5984,5998,12339,12548,12876,12979,15238,15375,15610,21251,21255,21260,21297,21299],"fullWord":15375},{"subwords":[2072,2205,2446,2456,8552,8554,8575,8705,8725,8728,8743,8857,9849,12959,12979,14995,15378,15386,15576,15579,15610],"fullWord":15378},{"subwords":[6039,8552,8584,8934,8945,8947,15379,15777,15782,15840,15841,15842,15846,15849,16574,16609,18066,18071,18072,18073,18150,19592,19876,19880,19881,19882,19883,19884,19886],"fullWord":15379},{"subwords":[5845,5846,5847,8532,8539,8552,8584,8934,8945,8947,8970,8988,11539,11563,12152,12154,12158,12160,15202,15224,15380,15381,15777,15782,15806,15820,15840,15842,16446,16574,18066,18071,18103,18150,19592,19876,19880,19883],"fullWord":15381},{"subwords":[5846,8532,8552,8607,8945,8970,11539,15202,15380,15382,15394,15777,15806,15866],"fullWord":15382},{"subwords":[8678,8679,8739,8789,8857,8867,8871,8874,8934,9307,9360,9366,9400,9405,9409,12513,12548,12560,12565,12810,13007,15384,15385,15386,15681,15684,16629,16700,16858,16874,16889,17383,17722],"fullWord":15385},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,8552,8558,8561,8575,8581,8584,8721,8724,8725,8726,8728,8729,8730,8857,8864,8866,8874,8875,8876,8881,8882,8934,12752,12755,12802,12810,12979,12982,13007,15060,15078,15081,15087,15386,15387,15600,15603,15609,15610,15611,15676,15677,16574,16581,16604,16674,16676,16677,16678,16697,16698,16722,17323,17419],"fullWord":15387},{"subwords":[1851,2428,2439,2446,8648,8705,8739,8857,9077,11817,11854,12700,12806,12959,15386,15388,15389,15402,15480,15576,15627],"fullWord":15389},{"subwords":[2223,2446,2476,8705,8713,8857,8874,8934,11817,11823,12806,12808,12810,12872,12959,12964,13007,15386,15388,15390,15576,15590,15627,15638,16664,17308],"fullWord":15390},{"subwords":[586,869,920,1269,1366,2308,2567,2610,2637,8290,8346,8936,8970,11276,14775,14808,15391,15392,15749,15806,15807,19617,19840],"fullWord":15392},{"subwords":[2496,2567,2576,2610,2656,2668,2673,8934,8936,8940,8970,8988,12158,15391,15393,15749,15764,15806,15820,15842,16737,18035,18103,19592,19840,19844],"fullWord":15393},{"subwords":[4810,4818,5430,5567,5570,8532,8552,8558,8607,9035,11539,15060,15202,15394,15395,15866],"fullWord":15395},{"subwords":[6008,8532,8552,8583,8607,11539,11559,12211,15202,15394,15396,15866],"fullWord":15396},{"subwords":[5845,8532,8539,8552,8584,8607,8934,11539,11563,11566,15202,15224,15394,15397,15866,15867,16574,16758,16759,21130,21212],"fullWord":15397},{"subwords":[337,349,434,488,495,911,9367,9376,9437,10121,10126,10502,10675,10691,10897,12680,12686,12812,12948,13008,14780,14898,14909,15399,15401,15504,15617,15691,18347,18349,18352,18432,18449,18463,18863,18945,19002,19093,19094,19210,19262,19292],"fullWord":15401},{"subwords":[326,337,349,385,854,1243,1272,1296,1307,1366,1372,1777,1867,2308,2315,2324,2326,2412,4427,4587,4891,5303,5362,9376,10061,10090,10119,10121,10122,10202,10502,10504,10512,10530,10531,10675,14715,14736,14776,14780,15399,15402,15403,15428],"fullWord":15403},{"subwords":[326,349,605,854,1243,1280,1332,1336,1366,1372,1406,1777,1837,1840,1867,2308,2315,2324,2328,2337,2339,2400,2429,4427,4492,4532,4985,4986,5303,5314,5362,9376,9378,12219,12227,12274,12406,14715,14736,14776,14784,14821,14826,14838,15402,15404,15428,15491],"fullWord":15404},{"subwords":[1560,1767,1777,1780,1782,1790,1867,2384,2404,2405,2413,2417,4618,4714,4810,4905,4935,5023,5362,5632,9384,9385,14995,15005,15060,15402,15405,15428,15433],"fullWord":15405},{"subwords":[1767,1790,2404,2407,2417,2420,5632,6008,9384,14995,15402,15406],"fullWord":15406},{"subwords":[1767,1837,1851,2042,2127,2211,2429,2439,2446,9360,9400,12406,12481,12513,12548,12700,12959,15402,15407,15576,15583],"fullWord":15407},{"subwords":[1636,1661,1721,1790,1817,1881,1884,1885,2417,2444,9384,10414,10460,10504,10509,10514,10536,10549,10677,10691,10694,10695,10705,14995,15197,15312,15402,15408,15444,15473,15542,15748,18817,18844,18847,18863,18866,18868,18941,19265],"fullWord":15408},{"subwords":[1790,1791,1851,1858,2072,2073,2099,2205,2208,2417,2423,2439,2441,2446,2476,6004,9384,9389,9409,12700,12701,12959,12964,12979,12982,13007,13022,14995,15014,15402,15409,15410,15526,15576,15579,15582,15590,15610,15611,15676,16423,16765,16889,16890,17308,17312,17419,17722],"fullWord":15409},{"subwords":[4156,4157,4158,6008,6016,6023,9079,9085,9384,9389,9409,15021,15048,15411,15413,15414,15415,15526,15528,16178,16298,16769,16889,16890,17722],"fullWord":15414},{"subwords":[3272,4156,6008,8503,8552,8583,8612,8625,8672,8674,9079,9384,15021,15171,15411,15413,15416,15417,15418],"fullWord":15418},{"subwords":[3272,4158,6023,8503,8505,8552,8584,8612,8625,8628,8672,8676,8678,8934,9079,9085,9384,9389,9409,15021,15048,15171,15411,15415,15416,15417,15419,15526,16178,16298,16574,16617,16642,16769,16889,16890,17722],"fullWord":15419},{"subwords":[3272,4232,8612,9101,11076,15416,15420],"fullWord":15420},{"subwords":[7604,8015,9092,9207,9391,15421,15461,15494],"fullWord":15421},{"subwords":[3406,4155,4639,4651,4714,4810,4909,4911,4917,4918,4935,4957,4959,5023,5030,5348,5355,9079,9082,9094,9384,9385,9396,9397,9885,15021,15028,15060,15411,15412,15422,15423,15428,15433],"fullWord":15423},{"subwords":[4232,9079,9094,9096,9101,9384,9396,9865,10058,15021,15411,15422,15424,15866],"fullWord":15424},{"subwords":[349,796,2941,3402,3419,3420,4106,9376,15426],"fullWord":15426},{"subwords":[3429,3439,4226,4238,4241,4312,4350,4356,4357,4375,4388,4394,9100,9409,9447,15427,15852,15854,15858,15861,16178,16265,16769,16889,16907,16917,17722,17881,18083,18085,18823,18830,18947,19862],"fullWord":15427},{"subwords":[4714,4810,4928,4935,4936,5023,5364,9384,9385,15060,15074,15428,15429,15433],"fullWord":15429},{"subwords":[4714,4774,4810,4928,4935,4936,4985,4988,4989,4990,5023,5364,5865,5996,9384,9385,12358,15060,15074,15175,15227,15428,15430,15433,15491,15492],"fullWord":15430},{"subwords":[4714,4810,4928,4935,4936,5023,5026,5364,5365,6008,9384,9385,15060,15074,15428,15431,15433,15434],"fullWord":15431},{"subwords":[4714,4728,4739,4810,4928,4935,4936,5023,5354,5364,5756,9117,9118,9119,9384,9385,10378,10414,10530,10536,10537,10549,10677,15060,15074,15428,15432,15433,15444,15473,15474],"fullWord":15432},{"subwords":[4714,4810,4825,4826,4935,4939,5023,5026,5037,5365,5366,5367,6008,6016,9111,9127,9384,9385,9389,9409,15060,15087,15428,15433,15434,15435,15436,15443,15526,15528,16780,16889,16890,16891,17722],"fullWord":15435},{"subwords":[4714,4810,4928,4935,4936,4947,5023,5028,5351,5364,5988,7617,7618,7997,7998,9384,9385,15060,15074,15141,15428,15433,15437,15438,15461],"fullWord":15438},{"subwords":[4714,4810,4826,4935,4939,4947,4956,5023,5028,5029,5037,5351,5353,5367,5716,5988,5992,7460,7617,7621,7997,7999,8000,9111,9127,9384,9385,9389,9409,15060,15087,15141,15428,15433,15436,15437,15439,15443,15461,15472,15526,16780,16889,16890,16891,17722],"fullWord":15439},{"subwords":[4947,4985,4993,7604,7617,7997,8015,8016,9391,15428,15441,15461,15468,15491,15494],"fullWord":15441},{"subwords":[4714,4728,4739,4810,4935,5023,5025,5374,5430,5567,5570,5756,9117,9119,9124,9128,9384,9385,10378,10414,10495,10530,10536,10537,10549,10677,11065,11074,15060,15077,15201,15428,15433,15442,15444,15473,15474,15866,21140,21142],"fullWord":15442},{"subwords":[5765,6509,6543,6551,6568,6570,6621,6622,6765,6854,6855,7140,9384,10414,10495,10536,10539,10549,10554,10555,10677,11065,11074,15114,15130,15172,15201,15444,15446,15447,15454,15473,15866],"fullWord":15447},{"subwords":[5705,5706,6018,6425,6543,6621,6622,6626,6636,6637,6647,6651,6654,7073,7074,7085,9135,9384,9389,9409,9447,15114,15124,15125,15134,15135,15306,15312,15446,15449,15458,15460,15526,15542,15543,15748,16431,16437,16457,16801,16803,16889,16890,16907,16911,17722,17881,17971,18844,18847,18849,18850,18941,18943,18947,19243,19277],"fullWord":15449},{"subwords":[4714,4810,4935,4946,5023,6406,6537,6543,6544,6553,6554,6555,6621,6622,6623,7056,7081,9384,9385,15060,15114,15428,15433,15446,15450,15451],"fullWord":15451},{"subwords":[5765,6543,6544,6553,6555,6568,6570,6621,6622,6765,9384,10414,10536,10539,10549,10554,10555,10677,15114,15444,15446,15450,15452,15454,15473],"fullWord":15452},{"subwords":[4714,4728,4739,4810,4935,5023,5756,5765,6406,6537,6538,6543,6546,6568,6569,6570,6621,6622,6623,6740,6764,6765,7056,7081,9117,9119,9384,9385,10378,10414,10530,10536,10537,10539,10549,10554,10555,10677,15060,15114,15428,15433,15444,15446,15454,15455,15473,15474],"fullWord":15455},{"subwords":[5765,6008,6543,6568,6570,6621,6622,6624,6765,7083,9384,10414,10536,10539,10549,10554,10555,10677,15114,15444,15446,15448,15454,15456,15473],"fullWord":15456},{"subwords":[5765,6543,6568,6570,6571,6572,6621,6622,6626,6636,6765,6766,6767,7085,9135,9384,9389,9409,9416,10414,10415,10536,10539,10549,10550,10551,10554,10555,10556,10677,15114,15134,15444,15445,15446,15454,15457,15473,15475,15526,16365,16431,16437,16889,16890,17072,17722],"fullWord":15457},{"subwords":[4701,4714,4810,4935,4942,5023,5034,5369,5680,5705,6406,6492,6537,6543,6621,6622,6623,6651,7056,7073,7081,9384,9385,15060,15114,15124,15135,15312,15318,15428,15433,15446,15458,15459,15542,15748,18835,18844,18845,18847,18941,18942,19243,19274],"fullWord":15459},{"subwords":[4714,4810,4935,4947,4951,5023,5028,5351,5709,5988,7578,7617,7997,9384,9385,15060,15141,15428,15433,15437,15461,15462],"fullWord":15462},{"subwords":[5709,5988,6008,7578,9384,15141,15461,15463],"fullWord":15463},{"subwords":[7628,7630,7637,7874,7875,8020,8035,8056,8688,8731,8739,8857,8892,12995,13008,13009,15386,15461,15464,15465,15504,15691,18743,18749,18777,18945,18993,19093,19280,19292],"fullWord":15465},{"subwords":[7628,7630,7631,7632,7635,7637,8033,8035,8036,8678,8685,8688,8691,8934,8935,9409,9447,15461,15464,15466,15472,16648,16653,16805,16809,16889,16907,17722,17881,18742,18947,19280],"fullWord":15466},{"subwords":[7628,7630,7637,8035,8688,15461,15464,15467,18806,19280,19377],"fullWord":15467},{"subwords":[7627,9409,12995,13006,13007,15461,15469,15470,15472,16889,17722],"fullWord":15470},{"subwords":[8126,9369,12995,13048,13051,15461,15469,15471,15790],"fullWord":15471},{"subwords":[7604,7622,8015,9391,10637,12438,15461,15476,15494],"fullWord":15476},{"subwords":[4714,4728,4739,4744,4810,4935,4967,5023,5372,5756,5780,9117,9119,9152,9153,9384,9385,10378,10414,10530,10536,10537,10549,10677,15060,15428,15433,15444,15473,15474,15477,15478],"fullWord":15478},{"subwords":[5830,5831,5845,6008,6016,9384,9389,9409,9422,11539,11743,11745,11764,11765,15202,15224,15480,15481,15483,15484,15489,15526,15528,16375,16889,16890,17722],"fullWord":15483},{"subwords":[5830,6008,9384,11539,11743,11747,15202,15480,15481,15485],"fullWord":15485},{"subwords":[7604,8009,8015,9391,11649,11697,11711,11714,11748,12443,15461,15480,15486,15494],"fullWord":15486},{"subwords":[4714,4810,4818,4935,4938,4971,4972,4973,4979,5023,5830,9109,9384,9385,11539,11626,11688,11689,11692,11743,11744,15060,15202,15428,15433,15480,15481,15482,15487],"fullWord":15487},{"subwords":[5830,6008,9384,11539,11688,11692,11743,15202,15480,15481,15488],"fullWord":15488},{"subwords":[4714,4774,4810,4928,4935,4936,4985,4988,4989,4990,5023,5364,5865,5996,9384,9385,12358,15060,15074,15175,15227,15428,15430,15433,15491,15492],"fullWord":15492},{"subwords":[4714,4720,4774,4810,4935,4947,4985,4988,4990,4993,5023,5028,5351,5865,5892,5894,5988,5996,7493,7604,7617,7997,8015,8016,9384,9385,12358,15060,15075,15141,15173,15175,15227,15234,15428,15433,15437,15461,15491,15494,15495],"fullWord":15495},{"subwords":[5894,5988,5996,6008,6013,7493,7604,8015,9384,15141,15173,15175,15234,15461,15494,15496],"fullWord":15496},{"subwords":[4714,4774,4785,4810,4826,4935,4939,4985,4988,4990,4991,4992,5007,5023,5037,5367,5865,5875,5918,5996,6000,9111,9127,9307,9384,9385,9389,9409,12358,12359,15060,15087,15175,15177,15227,15230,15296,15428,15433,15436,15443,15491,15493,15500,15501,15526,15527,16381,16439,16780,16858,16860,16889,16890,16891,16893,17243,17244,17722],"fullWord":15501},{"subwords":[5918,5996,6000,6008,6016,9307,9384,9389,9409,15175,15177,15296,15500,15502,15526,15527,15528,16439,16858,16860,16889,16890,16893,17722],"fullWord":15502},{"subwords":[5918,5996,6000,6039,9307,9384,9389,9409,12367,15175,15177,15296,15297,15500,15503,15526,15527,15530,16439,16442,16858,16860,16861,16881,16889,16890,16893,16894,16895,16899,16903,17722],"fullWord":15503},{"subwords":[4714,4810,4935,4942,5023,5034,5114,5115,5234,5237,5239,5243,5387,5680,5683,9110,9384,9385,12752,12979,13008,15060,15078,15312,15318,15428,15433,15504,15505,15542,15600,15603,15610,15691,15694,15748,18835,18844,18845,18847,18941,18942,18945,18981,18983,19093,19101,19274,19292,19293,19310,19311],"fullWord":15505},{"subwords":[6008,9384,12979,13008,15312,15330,15504,15506,15542,15610,15691,15694,15748,18652,18844,18847,18941,18945,18981,19093,19101,19275,19292],"fullWord":15506},{"subwords":[9384,10414,10495,10536,10549,10665,10677,11065,11074,13577,13585,13705,13712,13743,13959,14009,14010,14262,14290,14410,14576,15201,15248,15267,15444,15473,15508,15509,15510,15866,21115,21127,21146,21147],"fullWord":15510},{"subwords":[5918,5996,6000,6033,9307,9384,9389,9409,12453,12459,13520,13539,13549,13558,13577,13588,13705,13712,13715,13716,13765,13769,13772,13798,14262,14281,14309,14336,14403,14421,15175,15177,15248,15262,15264,15272,15296,15305,15500,15508,15509,15511,15512,15514,15524,15526,15527,16439,16858,16860,16883,16889,16890,16893,17248,17249,17251,17565,17580,17582,17591,17722],"fullWord":15512},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":15515},{"subwords":[7604,7612,8015,8022,9391,12453,13721,13765,13773,14311,15461,15494,15508,15516],"fullWord":15516},{"subwords":[6621,6937,6940,7103,12771,14032,14350,14361,15450,15508,15517],"fullWord":15517},{"subwords":[9374,9409,9447,12936,12937,12944,13007,13008,13011,13850,13866,14032,14160,14165,14177,14182,14188,14201,14350,14383,14388,14403,14421,14427,15504,15507,15508,15518,15524,15691,15700,16883,16889,16907,17406,17429,17435,17598,17641,17644,17665,17722,17881,17921,17974,17985,18926,18936,18945,18946,18947,19075,19090,19093,19113,19114,19292,19294,19295,19301,19313,19323,19386],"fullWord":15518},{"subwords":[4714,4810,4935,5014,5019,5023,5377,9384,9385,13478,13569,13577,13705,13710,13712,13813,13815,13816,13817,14237,14262,14278,14303,14306,15060,15076,15248,15428,15433,15508,15509,15519],"fullWord":15519},{"subwords":[6008,9384,13569,13577,13705,13712,13813,13815,13817,14262,14278,14307,15248,15508,15509,15513,15520],"fullWord":15520},{"subwords":[9384,10414,10536,10549,10665,10670,10677,13569,13577,13585,13705,13712,13743,13813,13815,13817,13959,14262,14278,15248,15444,15473,15508,15509,15521],"fullWord":15521},{"subwords":[10665,10671,13813,13829,14009,14410,15508,15522,21146],"fullWord":15522},{"subwords":[349,762,9376,13200,13268,13286,13813,14851,15508,15523],"fullWord":15523},{"subwords":[349,359,905,961,9376,9409,13200,13202,13286,13303,13321,13336,13408,13421,13839,14403,14421,14851,14866,14891,14933,14938,15508,15524,15525,16014,16028,16089,16883,16889,17476,17494,17722,18201,20410,20436,20439,20442,20449,20454,20838,20973,20974],"fullWord":15525},{"subwords":[6008,6016,6039,9384,9389,9409,15526,15528,15529,15530,16889,16890,16895,16899,16903,17722],"fullWord":15529},{"subwords":[8678,8681,8934,9392,9395,9409,9413,15531,15532,16889,16899,16903,17722],"fullWord":15532},{"subwords":[7604,7611,7626,8015,8019,9138,9307,9391,9392,9409,12462,15461,15472,15494,15497,15533,16815,16858,16866,16889,16896,17722],"fullWord":15533},{"subwords":[4714,4810,4826,4835,4935,4939,4957,4959,4960,4961,5023,5030,5032,5037,5050,5355,5356,5367,9111,9127,9384,9385,9389,9396,9397,9399,9409,9885,9894,10041,15060,15087,15428,15433,15436,15443,15526,15534,15535,16780,16889,16890,16891,16954,16955,16959,16960,17722],"fullWord":15535},{"subwords":[6008,6016,9384,9389,9396,9399,9409,10041,15526,15528,15534,15536,16889,16890,16954,16960,17722],"fullWord":15536},{"subwords":[9375,9384,9389,9409,14635,14650,14659,14682,14684,15274,15526,15539,15777,15782,15840,16416,16796,16889,16890,17718,17722,18066,18071,18083,18150,19876,19880],"fullWord":15539},{"subwords":[169,326,349,854,911,4537,5034,5327,9376,14736,14776,14898,15428,15541,18339,18347,18449,19259],"fullWord":15541},{"subwords":[337,349,434,488,911,9376,9437,10121,10126,10502,10675,10691,14780,14898,15399,15544,15858,18347,18349,18449,18508,18863,19210,19262,19605,19608,19837],"fullWord":15544},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15545,15546,15748,16457,16889,16890,16907,16911,16921,16929,16931,17722,17881,18844,18847,18849,18850,18941,18943,18947,19277,21264],"fullWord":15546},{"subwords":[337,340,349,359,860,905,1124,9376,9409,10121,10125,10502,10503,10675,10676,14780,14783,15399,15400,15547,15548,15931,15942,16028,16844,16889,17029,17722,19919,19923,20107,20110,20112,20115,20182,20191],"fullWord":15548},{"subwords":[6008,6016,9384,9389,9409,15337,15354,15526,15528,15549,15552,15553,15554,16889,16890,17722,20070,20129,20132,20133,20134,20197],"fullWord":15553},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15337,15354,15526,15542,15543,15549,15554,15555,15556,15748,16457,16889,16890,16907,16911,17722,17881,17884,17979,18844,18847,18849,18850,18941,18943,18947,19277,20070,20080,20088,20095,20101,20129,20132,20133,20134,20197],"fullWord":15556},{"subwords":[7604,7644,8015,9391,15461,15494,15557,20152,20185],"fullWord":15557},{"subwords":[337,340,349,359,361,860,905,924,9376,9409,10121,10125,10304,10313,10502,10503,10675,10676,14780,14783,14939,14944,15399,15400,15558,15559,15864,15865,15931,15942,16028,16103,16889,17039,17149,17722,18295,21212],"fullWord":15559},{"subwords":[183,191,193,814,817,4516,4518,4607,4810,5114,5115,5346,5588,5976,6008,12680,12681,12752,12974,12979,12980,14736,14872,14961,14983,15060,15078,15561,15562,15570,15571,15600,15603,15610],"fullWord":15562},{"subwords":[183,191,817,869,871,4472,4475,4516,4607,4763,4810,4818,4819,5114,5115,5163,5165,5213,5318,5342,5588,5658,5976,11107,11115,11120,11265,11276,11286,11437,11438,11539,11831,11833,11970,12680,12681,12752,12979,12980,14736,14748,14808,14961,14975,15060,15078,15202,15561,15564,15565,15600,15603,15610,15627,15632],"fullWord":15565},{"subwords":[817,869,872,878,5588,5976,6008,11265,11276,11286,11437,11539,11970,12680,12979,14808,14872,14975,14983,14986,15202,15221,15564,15566,15570,15610,15627,15632],"fullWord":15566},{"subwords":[183,191,193,814,817,4516,4518,4607,4810,5114,5115,5346,5588,5976,6008,12680,12681,12752,12974,12979,12980,14736,14872,14961,14983,15060,15078,15561,15562,15570,15571,15600,15603,15610],"fullWord":15571},{"subwords":[817,5588,5976,6008,6014,12680,12979,14872,14875,14983,15570,15572,15610],"fullWord":15572},{"subwords":[905,911,918,973,989,990,12680,12683,12685,12686,12692,13007,13008,13011,14898,14912,15574,15575,15673,15691,15700,16041,17303,17306,17429,17433,17434,17435,17436,17773,17781,17885,17886,18432,18435,18449,18463,18464,18472,18487,19093,19094,19097,19113,19125,19381,19382],"fullWord":15575},{"subwords":[1560,2042,2058,2059,2072,2205,2207,2384,2446,4618,4810,5090,5114,5115,5632,12752,12959,12960,12979,14995,15060,15078,15576,15577,15579,15580,15600,15603,15610],"fullWord":15577},{"subwords":[2042,2072,2205,2446,5632,6008,12959,12979,14995,15576,15578,15579,15610],"fullWord":15578},{"subwords":[1721,2072,2205,2219,2237,2446,6008,12959,12979,13008,14995,15312,15330,15576,15579,15581,15610,15691,15694,15748,18652,18981,19093,19101],"fullWord":15581},{"subwords":[1797,1837,1847,1851,2079,2127,2140,2210,2211,2424,2429,2434,2439,2446,7604,7771,8015,8045,9360,9400,12406,12481,12509,12513,12548,12700,12959,12961,12995,15402,15461,15494,15576,15583,15584],"fullWord":15584},{"subwords":[1837,1850,1851,1858,1877,2127,2153,2211,2429,2439,2441,2446,2476,9307,9360,9366,9400,9405,9409,12406,12409,12481,12489,12513,12548,12560,12700,12701,12959,12964,13007,15402,15410,15576,15583,15585,15590,15684,16765,16858,16889,17259,17308,17383,17722],"fullWord":15585},{"subwords":[1636,2072,2073,2106,2108,2205,2208,2446,2476,6004,10323,10443,10447,10748,10753,10755,10758,10882,10883,10888,10889,12845,12848,12959,12964,12979,12982,13007,14995,15014,15576,15579,15582,15586,15587,15590,15610,15611,15621,15622,15676,16423,17096,17097,17308,17312,17354,17359,17419,17420],"fullWord":15587},{"subwords":[2160,2180,2181,2182,2183,2185,2191,2219,2220,2237,2446,2476,12959,12964,13007,13008,13011,15576,15588,15589,15590,15657,15659,15662,15691,15697,15700,17308,17399,17429,17435,18540,19060,19093,19106,19108,19113,19115],"fullWord":15589},{"subwords":[2219,2220,2237,2268,2269,2446,2476,2498,2610,2656,2664,2668,2690,2697,2700,12959,12964,13007,13008,13011,13051,13052,13055,13059,13082,15576,15590,15591,15691,15700,15720,15722,15727,15749,15764,15852,15858,15861,17308,17429,17435,17451,17994,18035,18540,19093,19113,19121,19155,19158,19390,19403,19462,19463,19840,19844],"fullWord":15591},{"subwords":[3638,3644,3647,3657,3697,3698,3893,3898,3899,3906,3907,4118,4639,4651,4656,4659,4810,5096,5099,5101,5114,5115,5348,5355,12752,12965,12979,15021,15028,15060,15078,15592,15593,15594,15600,15603,15610],"fullWord":15594},{"subwords":[3697,3898,3900,3906,3908,6008,12965,12979,15021,15592,15593,15595,15610],"fullWord":15595},{"subwords":[3161,3697,3898,3906,3965,3968,6057,12965,12979,13008,15021,15052,15312,15592,15593,15596,15610,15691,15694,15748,18981,19010,19093,19098,19101,19244],"fullWord":15596},{"subwords":[4810,5106,5114,5115,12745,12746,12752,12979,15060,15078,15600,15601,15603,15610],"fullWord":15601},{"subwords":[4810,5114,5115,6008,12745,12746,12752,12974,12979,15060,15078,15600,15602,15603,15610],"fullWord":15602},{"subwords":[4774,4788,4810,5114,5115,5172,5176,5234,5237,5239,5392,5865,5953,12358,12374,12493,12499,12548,12574,12581,12582,12583,12590,12752,12876,12979,13008,15060,15078,15227,15238,15241,15312,15318,15600,15603,15604,15610,15691,15694,15748,18607,18610,18621,18649,18981,18983,19036,19038,19039,19040,19093,19101,19105,19248,19310,19311],"fullWord":15604},{"subwords":[4810,4826,5114,5115,5116,5117,5196,5197,5216,5221,5223,5225,6004,12752,12755,12762,12764,12976,12977,12979,12982,13007,15060,15078,15081,15087,15600,15603,15605,15606,15609,15610,15611,15642,15643,15676,15677,17323,17419],"fullWord":15606},{"subwords":[183,195,605,869,4472,4479,4492,4532,5163,5172,5173,5213,5318,11107,11213,11243,11265,11276,11810,11831,11891,11893,11977,12244,12274,12493,12522,12523,12548,12550,12551,12680,14736,14749,14808,14821,14826,14827,15561,15564,15568,15600,15607,15627,15628],"fullWord":15607},{"subwords":[4763,4767,4774,4810,4818,5114,5115,5163,5165,5172,5176,5213,5392,5865,5953,11512,11516,11539,11831,11833,11838,11891,11896,11970,11977,12358,12493,12499,12522,12525,12548,12550,12554,12752,12866,12876,12979,15060,15078,15202,15227,15238,15600,15603,15608,15610,15627,15632],"fullWord":15608},{"subwords":[5718,5721,5988,5989,5992,6004,6008,6016,7788,7789,7790,7855,7857,7867,12798,12799,12979,12982,13007,15141,15610,15611,15612,15613,15676,17419,17423],"fullWord":15613},{"subwords":[4810,5114,5115,5123,5125,5260,5351,5386,5420,5471,5485,5523,5718,5988,5989,7782,7788,7855,7856,7883,7884,12752,12798,12979,13051,15060,15078,15141,15600,15603,15610,15614,15615,15706,15709,15710,15773,15777,15778,15790,19855,19856],"fullWord":15615},{"subwords":[5718,5721,5988,5989,5992,6004,7788,7789,7790,7855,7857,7867,8063,12798,12799,12979,12982,13007,13051,13052,15141,15610,15611,15614,15616,15676,15706,15708,15709,15711,15716,15777,15782,15790,15794,15840,17419,17451,18066,18071,18150,18160,19855,19860,19876,19880],"fullWord":15616},{"subwords":[4714,4728,4739,4810,4935,5023,5114,5115,5146,5756,9110,9117,9119,9125,9384,9385,10378,10414,10443,10530,10533,10536,10537,10549,10677,10780,10878,10882,12752,12812,12815,12816,12837,12839,12841,12845,12979,12992,15060,15078,15246,15428,15433,15444,15473,15474,15600,15603,15610,15617,15618,15621],"fullWord":15618},{"subwords":[4728,4744,4810,5114,5115,5146,5150,5389,5756,5780,10378,10443,10780,10878,10882,12752,12837,12839,12845,12979,15060,15078,15600,15603,15610,15621,15623,15624],"fullWord":15624},{"subwords":[5780,6008,10443,10882,12845,12979,15277,15610,15621,15623,15625],"fullWord":15625},{"subwords":[869,11213,11243,11265,11276,11307,11810,11891,11911,11921,11931,11936,11977,11979,12244,12522,12548,12550,12551,12680,14808,14821,15564,15568,15627,15628,15629,15652],"fullWord":15629},{"subwords":[869,883,905,909,11213,11243,11244,11245,11247,11265,11276,11314,11330,11345,11810,11812,11813,11891,11915,11977,11978,12244,12522,12527,12548,12550,12551,12555,12560,12680,12683,12872,13007,14808,14820,14821,14846,15564,15567,15568,15569,15627,15628,15630,15638,15673,15973,15986,17303,17378,17383,17384],"fullWord":15630},{"subwords":[685,716,869,884,11213,11243,11264,11265,11276,11329,11408,11420,11421,11810,11891,11920,11967,11977,12201,12244,12282,12311,12522,12548,12550,12551,12680,14808,14821,14939,14942,15564,15568,15627,15628,15631,15864,21051,21075,21183],"fullWord":15631},{"subwords":[4763,4810,4818,5114,5115,5163,5165,5200,5202,5213,5215,5402,11539,11831,11833,11947,11948,11949,11951,11970,12752,12916,12979,13478,13486,13577,13593,14020,14024,14093,14147,14148,14262,14350,14357,14359,14369,15060,15078,15202,15248,15600,15603,15610,15627,15632,15634,15635,15663,15664,15747],"fullWord":15635},{"subwords":[6008,11539,11947,11948,11951,11970,12916,12979,13577,13593,14024,14093,14147,14262,14350,14359,14369,15202,15248,15271,15610,15627,15632,15634,15636,15663,15665,15747],"fullWord":15636},{"subwords":[183,195,605,886,4492,4532,5172,5173,10090,10106,10169,10202,10730,10741,10876,10878,10886,12274,12493,12494,12548,12680,12837,12948,14736,14749,14821,14826,15561,15568,15600,15639],"fullWord":15639},{"subwords":[5172,5186,5187,5188,5196,5197,5216,5221,12493,12501,12548,12560,12762,12764,12976,12977,13007,15600,15609,15640,15641,15642,15643,17262,17323,17383,17397],"fullWord":15641},{"subwords":[4810,5114,5115,5196,5950,6406,6874,6928,6940,6951,6955,6957,7056,7103,12752,12762,12976,12979,15060,15078,15114,15600,15603,15605,15610,15642,15644,15645],"fullWord":15645},{"subwords":[5950,6008,6874,6940,6955,7103,12979,15114,15610,15644,15646],"fullWord":15646},{"subwords":[4810,5114,5115,5196,5355,12752,12762,12976,12979,15060,15078,15600,15603,15605,15610,15642,15648,15649],"fullWord":15649},{"subwords":[9384,9396,12834,12979,15610,15648,15650],"fullWord":15650},{"subwords":[4763,4810,4818,5114,5115,5163,5165,5193,5196,5213,11539,11831,11833,11844,11921,11923,11926,11936,11937,11938,11970,12752,12762,12976,12979,15060,15078,15202,15600,15603,15605,15610,15627,15632,15633,15642,15652,15653],"fullWord":15653},{"subwords":[6008,11539,11921,11936,11937,11970,12979,15202,15610,15627,15632,15633,15652,15654],"fullWord":15654},{"subwords":[13007,13008,13011,15657,15658,15659,15662,15691,15697,15700,17399,17404,17429,17433,17434,17435,17436,19060,19093,19106,19108,19113,19115,19116,19125],"fullWord":15658},{"subwords":[4810,5114,5115,5196,5234,5237,5239,12752,12762,12976,12979,13008,15060,15078,15312,15318,15600,15603,15605,15610,15642,15659,15660,15691,15694,15697,15748,18981,18983,19060,19093,19101,19106,19310,19311],"fullWord":15660},{"subwords":[6008,12979,13008,15312,15330,15610,15659,15661,15691,15694,15697,15698,15748,18652,18981,19060,19093,19101,19102,19106],"fullWord":15661},{"subwords":[6004,6008,6016,6033,12916,12925,12936,12979,12982,13007,13577,13607,14147,14149,14166,14168,14262,14281,14350,14383,14384,14386,14403,15248,15271,15272,15305,15610,15611,15663,15665,15666,15668,15676,17406,17419,17423,17638],"fullWord":15666},{"subwords":[6008,12916,12979,13145,13577,13596,14147,14262,14290,14350,14410,14411,14576,15248,15271,15610,15663,15665,15667,15672,15866,21127,21189],"fullWord":15667},{"subwords":[6008,9384,12916,12979,13577,13705,13712,14032,14147,14262,14307,14333,14350,15248,15271,15508,15509,15513,15610,15663,15665,15669],"fullWord":15669},{"subwords":[10665,10864,10887,12812,12824,13981,14009,14032,14056,14088,14350,14410,14575,15508,15617,15620,15670,15672,21146],"fullWord":15670},{"subwords":[7604,7612,8015,8022,8045,9360,9400,12453,12509,12513,12548,12995,13721,13765,13773,13809,13837,14032,14107,14150,14154,14311,14350,14372,14374,15461,15494,15508,15671],"fullWord":15671},{"subwords":[905,12680,12683,13007,14939,14944,15570,15573,15673,15674,15690,15864,15865,16103,17303,17428,17472,17473,21212],"fullWord":15674},{"subwords":[3826,3830,3831,3860,3898,3902,3929,6004,6023,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15675,15676,16198,16298,17316,17419],"fullWord":15675},{"subwords":[6004,6008,6016,12979,12982,13007,13145,13146,13147,15610,15611,15676,15678,15690,15866,15867,17419,17423,17428,17472,21130,21189,21190,21212],"fullWord":15678},{"subwords":[6004,6018,6039,12979,12982,13007,13008,13011,15306,15309,15312,15610,15611,15676,15679,15680,15691,15694,15695,15700,15748,16457,16464,17419,17424,17425,17429,17433,17434,17435,17436,17924,17926,18981,18985,19093,19101,19103,19113,19125,19127,19253],"fullWord":15680},{"subwords":[6004,6008,6016,9384,9389,9409,12979,12982,13006,13007,13022,15526,15528,15610,15611,15676,15682,16889,16890,17419,17423,17722],"fullWord":15682},{"subwords":[9409,10885,10887,12812,12822,12824,13007,15617,15619,15620,15683,15690,16837,16889,17149,17350,17354,17364,17472,17722,21212],"fullWord":15683},{"subwords":[7604,7611,7626,7627,8015,8019,8045,8046,9307,9360,9366,9400,9405,9409,12509,12512,12513,12548,12560,12995,13007,15461,15472,15494,15497,15684,15685,16815,16821,16858,16866,16889,17383,17389,17722],"fullWord":15685},{"subwords":[9307,9360,9366,9400,9405,9409,12513,12548,12560,13007,15684,15686,16858,16881,16889,16899,16903,17383,17395,17434,17722],"fullWord":15686},{"subwords":[9307,9360,9366,9400,9405,9406,9409,12513,12519,12548,12560,12573,13007,15684,15687,15690,16858,16889,17383,17472,17722,21144,21145,21183,21186,21187,21212],"fullWord":15687},{"subwords":[6004,6008,6016,6018,12979,12982,13007,13008,13011,15301,15306,15312,15330,15610,15611,15676,15688,15691,15694,15695,15700,15748,16457,17419,17423,17429,17431,17435,17924,18652,18981,18985,19093,19101,19103,19113],"fullWord":15688},{"subwords":[905,911,918,12680,12683,12686,12692,13007,13008,13011,14898,14912,15570,15573,15574,15673,15689,15691,15700,16032,16041,17303,17429,17435,17773,17885,18432,18435,18449,18463,18464,18472,19093,19094,19097,19113,19381],"fullWord":15689},{"subwords":[911,919,12680,12686,13008,14898,14939,15570,15691,15692,15864,18432,18449,18463,18471,19093,19094,19122,19186,19231,19347,19377,19573],"fullWord":15692},{"subwords":[817,911,1009,5588,5620,5976,5982,6055,12680,12686,12688,12955,12979,13008,13041,14898,14901,15312,15610,15691,15693,15694,15748,18432,18449,18453,18463,18465,18476,18495,18498,18499,18541,18554,18565,18672,18981,19093,19094,19101,19117,19118,19131,19134,19138,19235,19331],"fullWord":15693},{"subwords":[7874,7886,8056,8064,8175,13008,13051,13059,15691,15696,15722,15790,15858,18993,19093,19117,19131,19155,19160,19331,19337,19418,19493,19496],"fullWord":15696},{"subwords":[13007,13008,13011,15657,15659,15662,15691,15697,15698,15699,15700,17399,17429,17435,19060,19093,19106,19108,19113,19115],"fullWord":15699},{"subwords":[4810,5114,5115,5234,5237,5239,5247,12752,12979,13008,13041,15060,15078,15312,15318,15600,15603,15610,15691,15694,15701,15748,18981,18983,19093,19101,19117,19118,19131,19134,19135,19138,19310,19311,19331],"fullWord":15701},{"subwords":[5953,12374,12548,12574,12581,12583,12590,12876,12979,13008,13041,15238,15241,15312,15610,15691,15694,15702,15748,18607,18621,18630,18649,18969,18981,19036,19038,19040,19093,19101,19105,19117,19118,19131,19134,19138,19331],"fullWord":15702},{"subwords":[6008,12979,13008,13041,15312,15329,15330,15610,15691,15694,15703,15748,18652,18981,19093,19101,19117,19118,19131,19134,19138,19331],"fullWord":15703},{"subwords":[5172,5189,5234,5260,5507,5523,5539,12493,12548,12574,12659,13008,13051,13059,15600,15691,15704,15714,15722,15821,15833,15858,19036,19093,19105,19155,19310,19411,19434,19465,19476,19664,19780,19782,19866],"fullWord":15704},{"subwords":[1636,2004,2007,2021,2072,2106,2205,2251,2446,2610,2630,10443,10470,10748,10753,10882,10922,10961,11029,12845,12959,12979,13051,14995,15576,15579,15586,15610,15621,15705,15706,15749,15755,15761,15777,15800,19840],"fullWord":15705},{"subwords":[5918,5953,5955,6000,6004,12506,12548,12556,12560,12561,12597,12655,12876,12879,12888,12979,12982,13007,13051,13052,15238,15610,15611,15676,15706,15707,15708,15716,15777,15782,15821,15822,15823,15832,15840,16391,17272,17383,17419,17451,18066,18071,18117,18150,19866,19867,19876,19880],"fullWord":15707},{"subwords":[4810,5114,5115,5123,5125,5260,5351,5386,5420,5471,5485,5523,5718,5988,5989,7782,7788,7855,7856,7883,7884,12752,12798,12979,13051,15060,15078,15141,15600,15603,15610,15614,15615,15706,15709,15710,15773,15777,15778,15790,19855,19856],"fullWord":15710},{"subwords":[5718,5721,5988,5989,5992,6004,7788,7789,7790,7855,7857,7867,8063,12798,12799,12979,12982,13007,13051,13052,15141,15610,15611,15614,15616,15676,15706,15708,15709,15711,15716,15777,15782,15790,15794,15840,17419,17451,18066,18071,18150,18160,19855,19860,19876,19880],"fullWord":15711},{"subwords":[7871,8166,8731,8737,8857,8874,8906,8910,8934,8951,8958,12810,13007,13051,13052,15386,15712,15713,15790,15794,15842,16739,17439,17451,19583,19584,19592],"fullWord":15713},{"subwords":[5172,5188,5216,5221,5260,5507,5522,5523,5524,5539,5541,12493,12501,12503,12548,12560,12597,12888,13007,13051,13052,15600,15609,15714,15715,15821,15832,17323,17383,17445,17451,18060,18117,19664,19846,19866,19867],"fullWord":15715},{"subwords":[4810,4826,4849,5114,5115,5116,5117,5216,5221,5223,5225,5260,5263,5265,5471,5478,5523,5524,6004,12752,12755,12979,12982,13007,13051,13052,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,15706,15708,15716,15717,15773,15777,15778,15782,15840,17323,17419,17451,17453,18060,18066,18067,18071,18150,19846,19876,19877,19880],"fullWord":15717},{"subwords":[6004,6008,6016,12979,12982,13007,13051,13052,15610,15611,15676,15706,15708,15716,15718,15777,15780,15781,15782,15840,17419,17423,17451,17454,18066,18071,18150,18152,19876,19880],"fullWord":15718},{"subwords":[6004,6039,12979,12982,13007,13051,13052,15610,15611,15676,15679,15706,15708,15716,15719,15777,15782,15840,15841,15849,16444,17419,17424,17434,17451,17456,17457,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886],"fullWord":15719},{"subwords":[13007,13008,13011,13051,13052,13055,13058,13059,13082,15691,15700,15720,15721,15722,15727,15852,15856,15858,15861,17429,17433,17434,17435,17436,17451,17456,19093,19113,19121,19125,19155,19158,19371,19886],"fullWord":15721},{"subwords":[4810,4845,5114,5115,5234,5237,5239,5260,5471,5479,5523,12752,12979,13008,13051,13059,13065,13066,13080,15060,15078,15082,15312,15318,15600,15603,15610,15691,15694,15706,15722,15723,15724,15748,15773,15777,15778,15858,18981,18983,19093,19101,19155,19156,19310,19311,19356,19357,19411,19465,19895],"fullWord":15724},{"subwords":[6008,12979,13008,13051,13059,13066,13080,15312,15330,15610,15691,15694,15706,15722,15723,15725,15748,15777,15780,15858,18652,18981,19093,19101,19155,19157,19356,19358,19895],"fullWord":15725},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13051,13052,13055,13057,13059,13066,13067,13080,13082,15306,15312,15610,15611,15676,15691,15694,15695,15700,15706,15708,15716,15720,15722,15723,15726,15727,15748,15777,15782,15840,15852,15858,15861,16457,17419,17429,17435,17451,17924,18066,18071,18074,18150,18981,18985,19093,19101,19103,19113,19121,19155,19158,19356,19359,19876,19880,19895],"fullWord":15726},{"subwords":[6004,6008,6016,12979,12982,13007,13095,13099,15337,15354,15610,15611,15676,15728,15730,15731,15732,16453,17419,17423,20070,20077],"fullWord":15731},{"subwords":[7604,7889,8015,8045,9360,9400,12509,12513,12548,12995,15461,15494,15733,20140,20152,20164,20186,20262],"fullWord":15733},{"subwords":[905,909,1158,1161,12548,12560,12606,12610,12680,12683,13007,13119,13124,14821,14933,14938,15568,15569,15673,15734,15735,15736,15744,15986,16089,16095,17284,17303,17383,17384,17464,17469,18195,18273,20393,20410,20432,20435,20442,20449,20897,20944],"fullWord":15736},{"subwords":[6004,10443,10447,10882,10883,10888,10889,10942,10945,10946,10952,12845,12848,12979,12982,13007,13110,13112,13114,13118,15302,15610,15611,15621,15622,15676,15734,15739,15740,15744,16445,16475,17059,17097,17121,17123,17354,17359,17419,17420,17464,17466,18272,20875,20877,20933,20947],"fullWord":15740},{"subwords":[6004,6008,6016,12979,12982,13007,13110,13112,15302,15610,15611,15676,15734,15741,15742,15744,16445,16475,17419,17423,17464,17466,18272,20875,20877,20933,20947,20949],"fullWord":15742},{"subwords":[7604,7892,8015,8045,8071,8076,9360,9400,12509,12513,12548,12606,12995,13113,13119,15461,15494,15734,15743,20742,20774,20790,20804,20897,20944,20995,21006],"fullWord":15743},{"subwords":[487,905,924,10181,10304,10313,10887,12680,12683,12948,12950,13007,14939,14944,15673,15690,15745,15746,15864,15865,15942,16103,17039,17149,17303,17354,17356,17472,17473,21212],"fullWord":15746},{"subwords":[51,58,61,72,77,911,1093,1366,1462,2029,2030,2037,2219,2237,2268,2308,2349,2446,2498,2610,2697,12680,12686,12959,13008,13051,13059,14898,15576,15691,15722,15749,15750,15858,18302,18315,18317,18319,18432,18449,18463,18508,19093,19094,19155,19390,19391,19462,19840],"fullWord":15750},{"subwords":[1560,2384,2505,2517,2610,4618,4810,5417,5445,5447,5471,5632,14995,15060,15749,15751,15755,15773,15777,15778,19840],"fullWord":15751},{"subwords":[2505,2610,2648,5632,6008,14995,15749,15752,15755,15777,15780,19840],"fullWord":15752},{"subwords":[1510,1636,2004,2007,2021,2022,2505,2550,2610,2611,2630,5632,10470,10960,10961,11029,14995,15749,15753,15755,15761,15777,15800,19840],"fullWord":15753},{"subwords":[1510,2021,2022,2505,2550,2610,2612,2630,2636,2667,2710,15749,15754,15765,19840],"fullWord":15754},{"subwords":[1671,1684,2577,2600,2610,2638,2643,2656,2662,2668,5918,6000,12331,12332,12614,12622,12655,14995,15014,15018,15749,15755,15756,15757,15764,15777,15782,15821,15822,15823,15832,15840,16423,17288,18035,18066,18071,18117,18150,19840,19844,19866,19867,19876,19880],"fullWord":15756},{"subwords":[1560,1777,1780,1782,1790,1867,2384,2413,2417,2517,2610,2624,4618,4714,4810,4935,5023,5362,5417,5445,5471,9384,9385,9449,14995,15005,15060,15402,15428,15433,15749,15755,15758,15773,15777,15778,19840],"fullWord":15758},{"subwords":[1790,2417,2420,2610,2625,2648,6008,9384,14995,15402,15749,15755,15759,15777,15780,19840],"fullWord":15759},{"subwords":[1790,1791,2417,2423,2489,2610,2626,2656,2662,2668,2680,9384,9389,9409,14995,15014,15018,15402,15410,15526,15749,15755,15757,15760,15764,15777,15782,15840,16423,16765,16796,16889,16890,17722,18035,18066,18071,18083,18150,19840,19844,19876,19880],"fullWord":15760},{"subwords":[1636,2004,2007,2008,2021,2025,2610,2630,2635,2656,2662,2668,10323,10470,10961,10962,11029,11033,14995,15014,15018,15749,15755,15757,15761,15762,15764,15777,15782,15800,15804,15840,16423,17128,17141,18035,18066,18071,18150,19840,19844,19876,19880],"fullWord":15762},{"subwords":[2610,2648,4151,4242,4312,4317,15402,15749,15763,19840,19862],"fullWord":15763},{"subwords":[4207,4209,4263,4268,4269,4278,4312,4321,4326,4327,4639,4651,4810,5348,5355,5455,5457,5459,5471,5489,5654,15021,15028,15060,15766,15767,15773,15777,15778,19595],"fullWord":15767},{"subwords":[4312,4350,15766,15768,15769,15848,18051],"fullWord":15769},{"subwords":[4810,5466,5467,5471,6008,15060,15770,15773,15775,15777,15778,15780,19578],"fullWord":15770},{"subwords":[4728,4810,5466,5467,5471,5472,5756,10378,10470,11029,11030,15060,15771,15773,15777,15778,15800,15801,19578],"fullWord":15771},{"subwords":[4728,4810,5430,5471,5472,5498,5567,5570,5756,10378,10470,10495,11029,11030,11065,11074,15060,15077,15201,15773,15774,15777,15778,15800,15801,15866,21222],"fullWord":15774},{"subwords":[4810,4826,4849,5360,5471,5478,5479,5480,5543,5548,5550,6018,15060,15087,15306,15312,15318,15748,15773,15776,15777,15778,15782,15840,15852,15853,15858,15861,16457,17999,18066,18067,18071,18074,18150,18575,19356,19357,19359,19465,19466,19846,19876,19877,19880],"fullWord":15776},{"subwords":[5765,6821,6824,7153,7194,7196,10470,11029,15114,15777,15779,15800],"fullWord":15779},{"subwords":[4810,5471,5481,5483,6406,6501,7056,7075,7194,15060,15114,15773,15777,15778,15783,15784],"fullWord":15784},{"subwords":[5703,7194,7206,7210,15114,15134,15777,15782,15783,15785,15788,15840,16431,18066,18071,18079,18150,18155,19876,19880],"fullWord":15785},{"subwords":[5765,6821,6824,7153,7194,7196,10470,10978,11029,15114,15777,15783,15786,15800],"fullWord":15786},{"subwords":[6821,6854,7140,7194,7196,7207,10978,15783,15787],"fullWord":15787},{"subwords":[6940,7008,7009,7103,7194,7206,13007,13051,13052,15789,17451,18155,19580,19581],"fullWord":15789},{"subwords":[4810,5351,5420,5471,5485,5709,5988,8082,15060,15141,15773,15777,15778,15790,15792,19855,19856],"fullWord":15792},{"subwords":[5709,5988,6008,15141,15777,15780,15790,15793,19855,19858],"fullWord":15793},{"subwords":[4714,4774,4810,4935,4985,4988,4990,5023,5471,5507,5511,5539,5865,5996,9241,9344,9345,9384,9385,9449,12358,12624,12626,12633,15060,15175,15227,15428,15433,15491,15773,15777,15778,15795,15796,15821,15822,19660,19864,19866],"fullWord":15796},{"subwords":[5996,6008,9344,9384,15175,15278,15777,15780,15795,15797,15821,15822,19864,19866],"fullWord":15797},{"subwords":[6008,6016,10470,11029,11031,11032,11033,15777,15780,15781,15782,15800,15802,15803,15804,15840,17128,17141,18066,18071,18150,18152,19876,19880],"fullWord":15803},{"subwords":[7604,7622,7759,8015,8151,10637,10981,11012,11034,12438,15461,15494,15790,15795,15798,15805,15821,15824,19585,19748,19866],"fullWord":15805},{"subwords":[67,586,869,883,905,920,921,1366,1419,1422,2308,2343,2567,2576,2610,2637,2656,2657,2668,11276,11314,11330,14808,14820,15749,15764,15806,15807,15808,15820,15973,18035,18103,19617,19620,19840,19844,19868,19871],"fullWord":15808},{"subwords":[1636,1700,2004,2007,2021,2567,2610,2630,5782,5846,10425,10470,10961,10991,11029,11539,12110,14995,15202,15749,15755,15761,15777,15800,15806,15809,19612,19614,19840],"fullWord":15809},{"subwords":[2021,2567,2610,2630,2636,2667,2710,15749,15765,15806,15810,19840],"fullWord":15810},{"subwords":[5846,6008,11539,12127,15202,15777,15780,15806,15811],"fullWord":15811},{"subwords":[12872,13007,13051,13052,15627,15638,15806,15813,15814,15820,17451,18103,18112],"fullWord":15814},{"subwords":[5782,5846,10425,10470,10957,10995,10998,11029,11539,12110,13577,13593,13602,13988,13991,14262,14454,14456,14518,14536,15202,15248,15747,15777,15800,15806,15815,15816,19624],"fullWord":15816},{"subwords":[10957,10995,11000,13988,13998,14009,14410,14536,15747,15806,15815,15817,19624,21224],"fullWord":15817},{"subwords":[14403,14551,15747,15806,15815,15818,15819,15820,17687,18103,18114,18135,19624,19628,19825,19890],"fullWord":15819},{"subwords":[10437,10460,10470,11008,11010,11029,11050,12374,12659,15241,15312,15748,15777,15800,15821,15822,15827,15833,15858,18607,18649,19356,19434,19438,19440,19476,19605,19719,19866],"fullWord":15827},{"subwords":[10470,11008,11029,12651,15777,15800,15821,15822,15828,19866],"fullWord":15828},{"subwords":[6008,12651,15278,15777,15780,15821,15822,15829,19866],"fullWord":15829},{"subwords":[6940,7008,7103,7179,7194,12548,12771,13051,15783,15821,15830,19580,19866],"fullWord":15830},{"subwords":[12548,12574,12659,13008,13051,13059,13081,15691,15722,15821,15831,15833,15858,19036,19093,19105,19155,19434,19476,19780,19866],"fullWord":15831},{"subwords":[716,1158,1166,12282,12311,14821,14933,14939,15821,15835,15864,19634,19787,19866,20393,20410,20432,20448,20493,21010,21075,21079,21085,21215],"fullWord":15835},{"subwords":[5984,6033,13489,13506,13508,13510,13577,13583,13584,13602,13604,14262,14281,14403,14518,14519,14521,14544,14551,15248,15272,15305,15334,15777,15782,15836,15837,15840,16319,16336,16340,16425,17658,17687,18066,18071,18135,18136,18137,18150,19825,19876,19878,19880],"fullWord":15837},{"subwords":[349,8245,8321,8351,8664,9002,9376,13200,13286,13651,14775,14851,15508,15838],"fullWord":15838},{"subwords":[4810,4826,4849,5471,5478,8552,8558,8561,8584,8934,8945,8946,8947,15060,15087,15773,15777,15778,15782,15840,15842,15843,16574,16581,16604,16722,18066,18067,18071,18150,19592,19846,19876,19877,19880,19883],"fullWord":15843},{"subwords":[5984,8483,8552,8562,8568,8584,8934,8945,8947,15334,15777,15782,15840,15842,15844,16319,16340,16425,16574,16587,18066,18071,18150,19592,19876,19878,19880,19883],"fullWord":15844},{"subwords":[6008,6016,8552,8583,8584,8934,8945,8947,15777,15780,15781,15782,15840,15842,15845,16574,18066,18071,18150,18152,19592,19876,19880,19883],"fullWord":15845},{"subwords":[6039,8552,8584,8934,8945,8947,15379,15777,15782,15840,15841,15842,15846,15849,16574,16609,18066,18071,18072,18073,18150,19592,19876,19880,19881,19882,19883,19884,19886],"fullWord":15846},{"subwords":[6018,6039,6054,15306,15309,15312,15748,15777,15782,15840,15841,15849,15850,15852,15856,15858,15861,16457,16464,18066,18071,18072,18073,18074,18075,18150,18153,19253,19356,19359,19371,19876,19880,19881,19882,19886],"fullWord":15850},{"subwords":[349,359,905,908,973,9376,9409,15540,15851,16028,16029,16889,16899,16903,17722,18083,19868,19871,19886],"fullWord":15851},{"subwords":[4810,4826,4849,5360,5471,5478,5479,5480,5543,5548,5550,6018,15060,15087,15306,15312,15318,15748,15773,15776,15777,15778,15782,15840,15852,15853,15858,15861,16457,17999,18066,18067,18071,18074,18150,18575,19356,19357,19359,19465,19466,19846,19876,19877,19880],"fullWord":15853},{"subwords":[3429,3439,4226,4238,4241,4312,4350,4356,4357,4375,4388,4394,9100,9409,9447,15427,15852,15854,15858,15861,16178,16265,16769,16889,16907,16917,17722,17881,18083,18085,18823,18830,18947,19862],"fullWord":15854},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":15855},{"subwords":[4810,5471,5479,15060,15312,15318,15748,15773,15777,15778,15858,15862,19356,19357,19465,19493,19900],"fullWord":15862},{"subwords":[67,72,1210,1215,1216,1217,1422,1456,1462,1482,15868,16041,17723,18302,18318,18540],"fullWord":15868},{"subwords":[67,817,825,905,906,907,973,1366,1377,1381,1419,1422,1425,1428,1429,1448,1535,1539,1715,2308,2317,2318,2343,2347,5588,5599,5976,5977,6039,14881,14885,14995,15014,15869,15870,15879,16270,16286,16290,16291,16419,16423],"fullWord":15870},{"subwords":[67,647,648,691,1332,1342,1344,1359,1422,1425,1440,1530,1534,1671,1684,1763,1789,1837,1844,1850,5918,9307,12219,12223,12229,12331,12332,12406,12409,15871,15986,15995,16270,16765,16858,16860],"fullWord":15871},{"subwords":[43,45,67,385,392,399,407,973,1301,1306,1422,1425,1429,1448,1636,1715,1918,1947,6039,10061,10071,10230,10236,10323,10324,10360,10453,15872,15873,15942,15948,15950,16270,16274,16277,16291,16999,17000],"fullWord":15873},{"subwords":[51,67,72,973,990,1422,1448,1453,1456,1461,1462,1482,2029,2034,2035,2036,2037,2041,2230,2231,2237,12685,12686,12692,15874,15875,16041,17308,17315,17434,17435,17436,17723,17726,17885,17886,18302,18318,18432,18435,18487,18540,19125],"fullWord":15875},{"subwords":[67,787,791,905,973,1210,1215,1366,1419,1422,1448,2308,2343,2347,15876,15877],"fullWord":15877},{"subwords":[30,67,200,817,825,905,906,1243,1246,1254,1366,1372,1374,1376,1377,1378,1381,1419,1422,1425,1426,1428,1515,1518,1535,1536,1537,1539,1560,1574,2308,2315,2316,2317,2318,2343,2376,2377,2384,4427,4430,4516,4520,4607,4611,4618,4619,4621,4629,4810,4826,5303,5305,5588,5599,5976,5977,14736,14751,14881,14882,14961,14965,14995,15014,15060,15087,15869,15878,15893,16270,16286,16419,16423],"fullWord":15878},{"subwords":[67,817,825,905,906,907,973,1366,1377,1381,1419,1422,1425,1428,1429,1448,1535,1539,1715,2308,2317,2318,2343,2347,5588,5599,5976,5977,6039,14881,14885,14995,15014,15869,15870,15879,16270,16286,16290,16291,16419,16423],"fullWord":15879},{"subwords":[27,67,72,77,78,126,134,1422,1456,1462,1482,2668,2690,2697,2700,2738,2757,3041,3052,3064,4238,4241,4242,4243,4262,4375,4394,15880,15881,16041,16111,16157,16250,16265,16266,17723,17994,18035,18302,18318,18319,18508,18540,19387,19390,19391,19393,19403,19871],"fullWord":15881},{"subwords":[93,96,98,101,112,113,319,320,325,932,2848,2853,2868,3021,3025,3189,3193,3221,3225,3257,3336,5582,5845,6023,8290,8296,8362,8532,8539,11086,11089,11093,11094,11097,11105,11330,11335,11437,11453,11461,11560,11563,12080,15880,15882,15973,15978,16129,16165,16270,16278,16298,16531,16533,16574],"fullWord":15882},{"subwords":[93,96,98,101,126,134,325,932,1009,3021,3025,3041,3042,3052,3057,3064,3221,3228,3229,3230,3238,3239,3264,4238,4241,5582,5616,5620,5626,6023,6055,6057,6058,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,15880,15883,16041,16043,16157,16158,16270,16293,16298,16304,16457,16559,16574,18323,18324,18541,18543,18559,18570,18697],"fullWord":15883},{"subwords":[93,94,96,200,950,952,2766,2771,2782,2807,2808,2809,3021,3022,3033,3034,4431,4432,4639,4651,4655,4826,4835,6023,15880,15884,15885,15893,15939,16114,16270,16298],"fullWord":15885},{"subwords":[93,96,121,123,796,810,817,825,867,868,905,906,950,953,2807,2809,2941,2954,2960,3001,3021,3033,4107,4108,5588,5599,5976,5977,6023,14717,14722,14729,14733,14798,14802,14881,15021,15037,15048,15880,15884,15886,15939,16142,16145,16270,16286,16298,16419],"fullWord":15886},{"subwords":[377,382,796,810,905,2813,2941,2971,3001,3017,4050,4051,10072,10226,14880,15880,15888,15889,15942,16118,16142],"fullWord":15889},{"subwords":[93,94,96,121,122,123,200,796,800,810,817,825,905,906,2766,2771,2780,2781,2782,2941,2949,2953,2954,2955,2960,3001,3021,3022,3111,3112,4431,4432,4516,4520,4607,4611,4639,4810,4826,5588,5599,5976,5977,6023,14717,14718,14722,14736,14751,14881,14882,14961,14965,15021,15028,15048,15060,15087,15880,15890,15893,16114,16142,16145,16146,16270,16286,16298,16419],"fullWord":15890},{"subwords":[586,796,810,812,869,883,905,920,921,2848,2868,2941,3001,4065,4068,4293,4312,4350,11086,11105,11276,11281,11284,11314,11330,14808,14820,15806,15820,15880,15891,15973,16129,16142,16221,16260,18103,18104,19868,19871],"fullWord":15891},{"subwords":[148,158,200,605,607,610,4438,4445,4492,4500,4501,4590,4594,4605,4606,4774,4785,4826,4828,5659,5865,5875,5918,12229,15893,15894,15986,15988,15990,15995,15996,16270,16308,16381],"fullWord":15894},{"subwords":[148,151,152,158,200,817,825,905,906,4438,4445,4516,4517,4520,4590,4594,4607,4611,4810,4826,5340,5341,5588,5599,5659,5976,5977,14736,14751,14881,14882,14961,14962,14963,14965,15060,15087,15893,15895,16270,16286,16419],"fullWord":15895},{"subwords":[148,158,200,325,932,1053,4438,4445,4543,5440,5441,5466,5470,8217,8362,15893,15896,15898,16503,19592,19871],"fullWord":15896},{"subwords":[148,155,157,158,200,399,407,4438,4445,4466,4467,4590,4594,4601,4603,4728,4826,5659,5756,5760,10090,10093,10094,10099,10107,10227,10324,10327,10331,10360,10378,15893,15897,15942,15948,16270,16274,17044],"fullWord":15897},{"subwords":[200,325,932,973,1053,4543,8217,8362,15893,15898,15899,16033,16503,16509,18062,19592,19871],"fullWord":15899},{"subwords":[200,326,336,341,347,540,544,555,557,973,4461,4472,4489,4896,4901,4971,4983,5037,9127,9422,9423,11107,11123,11145,11147,11330,11348,11626,11628,11641,11774,12082,15893,15900,15928,15929,15973,16764,16903],"fullWord":15900},{"subwords":[169,170,200,326,336,973,990,4461,4901,5037,9127,9447,15893,15901,15928,15929,16041,16903,16907,16915,17741,18339,18340,18347,18487,18947],"fullWord":15901},{"subwords":[230,231,349,359,828,852,853,905,945,6254,6259,6308,6621,6636,9135,9376,9409,15903,16028,16889,17722],"fullWord":15903},{"subwords":[399,402,407,1196,1197,5619,5765,6281,6386,6388,6509,6730,6733,6734,6735,6854,10304,10313,10324,10333,10335,10336,10360,10495,10496,11065,11066,15904,15905,15942,15948,16103,16270,16274,16365,17039,17149,21050,21097,21105,21130],"fullWord":15905},{"subwords":[254,973,982,990,1009,5616,5618,5620,5626,5705,5706,6039,6055,6339,6343,6344,6347,6349,6354,6397,6398,6399,6402,6479,6485,6487,15904,15907,15908,16041,16043,16046,16270,16291,16293,16296,16457,16464,18487,18541,18559],"fullWord":15908},{"subwords":[254,1009,1196,1197,5616,5619,5620,5626,5705,5706,6055,6339,6344,6347,6349,6354,6386,6388,6397,6399,6402,6485,6487,6509,15904,15909,16041,16043,16103,16270,16293,16457,17802,18018,18019,18541,18559,21097,21105,21106,21130,21135],"fullWord":15909},{"subwords":[269,280,297,399,407,1196,1197,5619,7260,7293,7298,7300,7316,7396,7447,7452,7477,7486,10109,10115,10304,10313,10324,10360,10398,10412,10495,10496,11065,11066,15910,15912,15913,15924,15942,15948,16103,16270,16274,17003,17039,17149,21050,21097,21105,21130],"fullWord":15913},{"subwords":[269,280,973,982,990,1009,5616,5618,5620,5626,6039,6055,7396,7398,7416,7417,7419,7423,7539,7540,7541,15910,15912,15915,15916,15923,16041,16043,16046,16270,16291,16293,16296,16457,16464,17732,17733,17736,17739,18342,18345,18487,18541,18559],"fullWord":15916},{"subwords":[200,269,270,280,4707,4826,5707,5708,5709,5715,7253,7258,7267,7269,7270,7273,7280,7396,7460,15893,15910,15912,15917,16270],"fullWord":15917},{"subwords":[269,279,280,817,825,905,906,5588,5599,5709,5715,5976,5977,5988,5992,7267,7269,7271,7272,7273,7280,7375,7391,7396,7461,7463,7939,14758,14762,14764,14773,14881,15141,15910,15912,15914,15918,16026,16270,16286,16419],"fullWord":15918},{"subwords":[214,269,279,280,349,359,817,825,858,863,905,906,5588,5599,5716,5976,5977,5988,5992,7375,7391,7396,7461,7463,7939,9376,9384,9389,9409,14758,14762,14764,14773,14788,14881,15141,15150,15461,15472,15526,15910,15912,15914,15920,16026,16028,16270,16286,16419,16889,16890,17722],"fullWord":15920},{"subwords":[0,2,317,325,905,932,8362,8934,14775,14886,15925,16021],"fullWord":15925},{"subwords":[67,325,932,973,1269,1422,1431,1443,1448,1451,1763,8362,8678,8681,15926,15927,16033,16765,16766,16903],"fullWord":15927},{"subwords":[287,299,304,647,691,7283,7287,7396,7604,7611,9307,9360,9366,12230,12233,12509,12512,12560,15910,15921,15930,15986,16001,16815,16858,16866,17211,17383,17389],"fullWord":15930},{"subwords":[200,326,327,331,336,337,338,340,362,363,399,407,948,4461,4466,4467,4601,4603,4714,4728,4739,4742,4826,4891,4895,4901,4935,4939,5037,5756,5760,9103,9104,9105,9106,9111,9117,9121,9127,9416,9417,10090,10093,10099,10100,10107,10119,10227,10324,10327,10331,10360,10378,10414,10415,10530,10535,10536,10537,10551,15893,15928,15931,15932,15942,15948,16270,16274,16780,16784,17044,17068,17069],"fullWord":15932},{"subwords":[337,340,349,359,362,399,407,817,825,857,858,860,863,905,906,5588,5592,5593,5599,5976,5977,9376,9384,9389,9409,9416,9429,10121,10125,10207,10228,10324,10355,10360,10414,10415,10502,10503,10536,10549,10550,10551,10675,10676,10677,14780,14783,14788,14805,14881,14968,14973,15399,15400,15444,15445,15473,15475,15526,15931,15933,15942,15948,16028,16270,16274,16286,16419,16420,16435,16889,16890,17072,17722],"fullWord":15933},{"subwords":[337,340,349,359,487,860,905,9376,9409,10121,10125,10181,10502,10503,10675,10676,10885,12680,12683,12812,12822,12948,12950,13007,14780,14783,15399,15400,15617,15619,15673,15931,15934,15942,16028,16837,16889,17303,17350,17354,17356,17364,17722],"fullWord":15934},{"subwords":[647,691,693,700,704,711,973,987,990,9307,9318,9325,9447,12463,12471,15936,15937,15986,16009,16041,16047,16049,16858,16881,16903,16907,16915,17255,17257,17742,17743,18347,18408,18428,18487,18894,18919,18947],"fullWord":15937},{"subwords":[382,466,470,504,10136,10137,10138,10161,11173,11174,11330,15942,15943,15973,17012],"fullWord":15943},{"subwords":[200,382,973,10090,10107,10236,15893,15942,15944,15945,15959],"fullWord":15945},{"subwords":[337,340,341,347,372,382,419,466,470,504,536,555,945,9414,9422,10136,10137,10138,10153,10154,10161,10584,10585,10586,11148,11151,11173,11174,11182,11330,11659,11685,15931,15942,15946,15973,16764,17012,17076],"fullWord":15946},{"subwords":[377,381,382,905,924,1004,10304,10313,14939,14944,15864,15865,15942,15947,16103,17039,17149,21212],"fullWord":15947},{"subwords":[337,340,362,399,407,423,424,430,433,637,639,647,648,691,5745,5748,5918,9307,9416,10120,10174,10175,10324,10344,10348,10360,10414,10415,10433,10501,10536,10544,10548,10551,10625,10634,10654,12229,12238,12241,12438,12439,12442,15931,15942,15948,15951,15986,15995,16270,16274,16858,16860,17006,17214],"fullWord":15951},{"subwords":[337,340,372,382,419,945,1101,1102,1124,10281,10284,15931,15942,15952,15970,16844,17029,19919,19923,20107,20110,20112,20115,20191],"fullWord":15952},{"subwords":[442,457,458,461,487,1155,1157,1164,1165,10181,10292,10299,10942,10952,12856,12857,13114,13118,15942,15953,16089,17037,17121,17354,17464,20378,20386,20449],"fullWord":15953},{"subwords":[470,487,10136,10161,10181,10738,10740,10741,10744,11173,11213,11245,11247,11265,11330,11345,11810,11812,11813,11891,11915,12244,12522,12527,12560,12872,15942,15955,15956,15973,15986,17012,17354,17378,17383],"fullWord":15955},{"subwords":[487,973,987,10181,10236,10239,10741,10744,10893,12560,15942,15956,15957,15986,16009,17354,17383,17395,17434],"fullWord":15957},{"subwords":[487,10181,10741,10744,10833,10845,10847,10854,12521,12560,13024,15942,15956,15958,15986,17354,17370,17383,17397],"fullWord":15958},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":15961},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":15962},{"subwords":[399,407,488,1009,5616,5620,5626,5627,6055,10241,10247,10324,10360,10366,10459,10460,10465,10470,11044,11050,11053,15942,15948,15960,15965,16041,16043,16066,16070,16270,16274,16293,16457,16459,17022,17023,17128,17147,17750,17811,18066,18074,18341,18370,18374,18388,18508,18541,18547,18548,18559,18660,19422,19427,19605,19871,19876],"fullWord":15965},{"subwords":[200,204,399,407,1106,1114,4466,4467,4569,4601,4603,4728,4826,4851,4852,5756,5760,10090,10093,10099,10107,10227,10285,10286,10289,10324,10327,10331,10360,10378,10471,10472,15893,15942,15948,15966,15967,16076,16077,16270,16274,17029,17030,17031,17044,19910,19923,19924,19925,19935,19967,19986,19987,19990,20014,20017,20018],"fullWord":15967},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":15968},{"subwords":[399,407,973,1106,1114,6039,10230,10236,10285,10289,10324,10360,10453,10471,10472,15942,15948,15950,15966,15969,16076,16080,16270,16274,16277,16291,17029,17030,17033,17036,19923,19924,19925,19935,19936,19967,19968,19986,19987,20014],"fullWord":15969},{"subwords":[337,340,372,382,419,945,1101,1102,1124,10281,10284,15931,15942,15952,15970,16844,17029,19919,19923,20107,20110,20112,20115,20191],"fullWord":15970},{"subwords":[487,973,10181,10236,10239,10893,13087,13088,13090,15942,15971,15972,17029,17036,17354,17434,19923,20250],"fullWord":15972},{"subwords":[67,504,508,973,975,1210,1215,1422,1448,11330,11348,11349,12082,15973,15974,15975],"fullWord":15975},{"subwords":[51,67,973,1422,1448,1453,2029,2034,2230,2231,11265,11330,11348,11813,11817,11823,12002,12082,12872,15973,15976,15977,17308,17315,17378,17379,17434],"fullWord":15977},{"subwords":[341,347,546,555,1009,5616,5620,5626,5832,5833,5845,6055,9422,9444,9446,9447,11160,11330,11356,11361,11362,11366,11376,11437,11453,11456,11457,11560,11574,11575,11764,11780,11786,11789,15973,15978,15979,16041,16043,16270,16278,16293,16375,16457,16764,16907,16911,17179,17180,17813,17830,18347,18389,18393,18398,18407,18541,18549,18552,18559,18595,18844,18850,18882,18886,18891,18947],"fullWord":15979},{"subwords":[399,407,470,488,1009,5616,5620,5626,5782,5784,5845,6055,10136,10145,10151,10152,10161,10241,10247,10324,10360,10366,10459,10460,10465,11173,11180,11181,11192,11195,11330,11356,11361,11362,11366,11376,11437,11442,11444,11453,11456,11457,11502,11506,11560,11574,11575,11576,11577,15942,15948,15949,15960,15973,15978,15980,16041,16043,16270,16274,16278,16293,16457,16459,17012,17022,17023,17168,17750,17811,17813,17830,18341,18370,18374,18389,18393,18398,18407,18541,18547,18548,18549,18552,18559,18595,18660],"fullWord":15980},{"subwords":[504,596,11213,11216,11245,11247,11265,11330,11345,11810,11812,11813,11891,11915,12244,12283,12522,12527,12560,12872,15973,15981,15982,15986,17378,17383],"fullWord":15982},{"subwords":[504,574,579,596,925,961,11213,11216,11247,11270,11275,11330,12244,12257,12269,12283,13239,13259,13336,15973,15983,15986,16014,17220,17476,17490],"fullWord":15983},{"subwords":[399,407,470,481,486,574,576,579,732,739,779,961,5782,5784,5845,5956,6033,10136,10145,10151,10158,10160,10161,10182,10194,10195,10324,10350,10353,10360,10957,11173,11180,11181,11270,11271,11272,11275,11330,11437,11442,11444,11453,11560,13204,13207,13211,13224,13227,13232,13336,13439,13450,13452,13461,13919,13940,13943,14414,15942,15948,15949,15973,15978,15984,16014,16270,16274,16278,16403,17012,17019,17476,17488],"fullWord":15984},{"subwords":[399,407,470,497,501,586,590,5627,5782,5784,5845,5846,5847,10136,10145,10151,10161,10324,10360,10470,11173,11180,11181,11330,11387,11390,11437,11442,11444,11453,11560,12110,12112,12152,15942,15948,15949,15973,15978,15985,16270,16274,16278,17012,17128,17135,18066,18103,19871,19876],"fullWord":15985},{"subwords":[126,134,596,693,711,2869,2906,2907,2908,2917,3017,3041,3052,3064,4238,4241,12283,15880,15986,15987,16011,16041,16042,16134,16136,16157,18408,18428],"fullWord":15987},{"subwords":[200,375,376,382,596,598,605,610,4492,4493,10090,10107,10169,10173,12283,12284,15893,15942,15944,15986,15988,15989],"fullWord":15989},{"subwords":[148,158,200,605,607,610,4438,4445,4492,4500,4501,4590,4594,4605,4606,4774,4785,4826,4828,5659,5865,5875,5918,12229,15893,15894,15986,15988,15990,15995,15996,16270,16308,16381],"fullWord":15990},{"subwords":[200,605,607,608,610,817,825,905,906,4492,4500,4501,4516,4520,4532,4536,4605,4606,4607,4611,4774,4785,4810,4826,5588,5595,5598,5599,5865,5875,5918,5976,5977,6000,12229,12274,12275,12319,12324,12358,12359,14736,14751,14821,14826,14828,14881,14882,14961,14965,15060,15087,15227,15230,15893,15986,15988,15991,15995,15996,15998,16270,16286,16308,16381,16419,17223,17224],"fullWord":15991},{"subwords":[200,596,605,610,905,4492,4493,4532,4536,12274,12283,14736,14751,14821,14826,14828,15893,15986,15988,15992,16022],"fullWord":15992},{"subwords":[399,407,716,1196,1197,5619,5745,5748,5918,10174,10175,10304,10313,10324,10344,10348,10360,10433,10495,10496,11065,11066,12229,12311,12312,15942,15948,15986,15995,15997,16103,16270,16274,17039,17149,18287,21050,21097,21105,21120,21122,21130],"fullWord":15997},{"subwords":[693,694,697,711,973,978,982,987,990,1009,5616,5618,5620,5626,5918,6039,6055,6074,6075,12229,12289,12325,12330,12367,12368,12373,12374,12376,15986,15995,15999,16000,16009,16041,16043,16046,16270,16291,16293,16296,16399,16457,16464,18408,18428,18487,18541,18559,18607,18624],"fullWord":16000},{"subwords":[269,279,280,622,623,817,825,905,906,5588,5595,5598,5599,5894,5918,5976,5977,5988,5992,6000,7359,7375,7391,7396,7461,7463,7493,7511,7743,7939,12229,12230,12233,12275,12319,12324,14758,14762,14764,14773,14821,14832,14833,14836,14881,15141,15910,15912,15914,15986,15995,15998,16001,16003,16026,16270,16286,16419,17211,17223],"fullWord":16003},{"subwords":[0,2,283,284,317,325,596,619,932,7396,7399,7549,7744,8233,8237,8304,8308,8362,12230,12233,12283,15910,15911,15986,16001,16002,16004,16005,16513,17211],"fullWord":16005},{"subwords":[647,691,693,700,704,711,716,9307,9318,9325,9447,12286,12311,12312,12463,12471,15936,15986,16006,16041,16047,16050,16103,16858,16907,17255,17742,17802,18018,18347,18408,18428,18429,18894,18919,18925,18947,21144,21145],"fullWord":16006},{"subwords":[647,648,649,691,973,987,5918,6039,9307,12229,12367,15986,15995,15999,16009,16010,16270,16291,16858,16860,16861,16881,16903],"fullWord":16010},{"subwords":[693,694,697,711,1009,5605,5616,5620,5621,5626,5853,5854,5918,6055,6074,6075,12229,12289,12325,12330,12339,12368,12374,12376,15986,15995,16012,16041,16043,16045,16270,16293,16319,16335,16380,16399,16457,16458,18408,18428,18541,18559,18560,18576,18583,18585,18588,18607,18624,18625],"fullWord":16012},{"subwords":[657,663,5918,12229,12252,15986,15995,16013,16270,16389,21255],"fullWord":16013},{"subwords":[200,732,733,739,762,779,961,4826,5956,6033,13171,13177,13268,13281,13336,13439,13461,13478,13488,13569,13573,14237,15893,16014,16017,16270,17476,17481,17530],"fullWord":16017},{"subwords":[732,735,737,739,762,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6033,13268,13276,13277,13281,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13569,13573,13577,14262,14278,14280,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16018,16270,16286,16419,17476,17494,17495,17523],"fullWord":16018},{"subwords":[732,735,737,739,775,779,817,818,820,825,905,906,925,931,961,966,5588,5599,5956,5976,5977,6033,13286,13287,13289,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16023,16270,16286,16419,17476,17494,17495,17523],"fullWord":16023},{"subwords":[817,825,905,906,907,973,5588,5599,5605,5609,5610,5611,5976,5977,5978,5981,5984,6031,6039,6042,14881,14885,16024,16025,16270,16286,16290,16291,16319,16340,16341,16342,16419,16425,16429],"fullWord":16025},{"subwords":[269,279,280,817,825,905,906,907,973,5588,5599,5976,5977,5988,5992,6039,7375,7391,7396,7398,7413,7461,7463,7939,7942,14758,14762,14764,14773,14881,14885,15141,15910,15912,15914,15915,15923,16026,16027,16270,16286,16290,16291,16419],"fullWord":16027},{"subwords":[299,304,837,838,905,909,7375,7391,7396,7743,7939,8038,8039,12230,12233,12509,12512,12548,12560,12680,12683,12951,12953,12983,12985,13007,14758,14773,14821,14832,15568,15569,15673,15910,15921,15986,16001,16031,17211,17303,17383,17384,17389],"fullWord":16031},{"subwords":[905,911,918,12680,12683,12686,12692,13007,13008,13011,14898,14912,15570,15573,15574,15673,15689,15691,15700,16032,16041,17303,17429,17435,17773,17885,18432,18435,18449,18463,18464,18472,19093,19094,19097,19113,19381],"fullWord":16032},{"subwords":[0,2,317,325,932,944,973,976,1194,1195,8362,8420,8428,16033,16034,16103,16109,16572,16573,16758],"fullWord":16034},{"subwords":[200,325,932,934,936,973,4543,4546,4614,4826,6039,8217,8219,8362,8440,8443,15893,16033,16035,16270,16291,16503,16504,16507,16509,16574,16581,16582,16609],"fullWord":16035},{"subwords":[325,932,936,973,980,6039,8362,16033,16036,16037,16270,16291,16574,16609],"fullWord":16036},{"subwords":[200,973,980,4826,6039,15893,16037,16038,16270,16291],"fullWord":16038},{"subwords":[973,980,981,6039,16037,16039,16270,16291],"fullWord":16039},{"subwords":[693,694,697,711,1009,5605,5616,5620,5621,5626,5853,5854,5918,6055,6074,6075,12229,12289,12325,12330,12339,12368,12374,12376,15986,15995,16012,16041,16043,16045,16270,16293,16319,16335,16380,16399,16457,16458,18408,18428,18541,18559,18560,18576,18583,18585,18588,18607,18624,18625],"fullWord":16045},{"subwords":[287,290,634,647,691,693,700,704,711,7283,7287,7288,7289,7292,7396,7416,7423,7561,7562,7604,7611,7635,7637,7745,7746,9307,9318,9325,9447,12230,12233,12463,12471,15910,15936,15986,16001,16041,16047,16048,16815,16858,16866,16907,17211,17255,17732,17742,17870,18342,18345,18347,18408,18410,18416,18428,18894,18901,18907,18919,18947],"fullWord":16048},{"subwords":[647,691,693,700,704,711,973,987,990,9307,9318,9325,9447,12463,12471,15936,15937,15986,16009,16041,16047,16049,16858,16881,16903,16907,16915,17255,17257,17742,17743,18347,18408,18428,18487,18894,18919,18947],"fullWord":16049},{"subwords":[647,691,693,700,704,711,716,9307,9318,9325,9447,12286,12311,12312,12463,12471,15936,15986,16006,16041,16047,16050,16103,16858,16907,17255,17742,17802,18018,18347,18408,18428,18429,18894,18919,18925,18947,21144,21145],"fullWord":16050},{"subwords":[349,353,359,817,825,858,863,905,906,911,918,993,997,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9376,9382,9384,9389,9409,9447,14788,14881,14898,14901,14905,14912,15306,15312,15526,15542,15543,15748,16028,16041,16043,16051,16270,16286,16293,16419,16457,16889,16890,16907,16908,16911,17722,17744,17773,17775,17881,17967,17968,18347,18449,18453,18455,18472,18474,18541,18554,18557,18559,18844,18847,18849,18850,18941,18943,18947,19277,19381],"fullWord":16051},{"subwords":[945,1103,1124,9447,16041,16052,16907,18347,18947,19970,19975,19978,20107,20115,20191,20207,20210],"fullWord":16052},{"subwords":[349,359,905,911,918,997,9367,9368,9376,9409,9447,12680,12683,12686,12692,13007,13008,13011,13031,14898,14909,14911,14912,15504,15507,15574,15673,15691,15700,16028,16041,16053,16889,16907,16908,17303,17429,17435,17722,17744,17773,17881,17885,17967,18347,18432,18435,18449,18463,18464,18472,18474,18945,18946,18947,19093,19094,19097,19113,19114,19292,19294,19313,19381],"fullWord":16053},{"subwords":[730,781,905,911,918,925,961,13286,13287,13289,13321,13328,13333,13336,13352,13353,13364,13385,14247,14252,14403,14427,14851,14866,14867,14891,14898,14899,14912,16014,16041,16054,17476,17494,17506,17510,17652,17773,17948,18436,18448,18449,18467,18469,18472,19221,19222,19381,19386],"fullWord":16054},{"subwords":[693,711,712,905,911,918,1074,1076,12300,12659,12663,14821,14847,14850,14898,14912,15821,15832,15833,15834,15852,15858,15861,15986,16041,16055,17773,18005,18117,18172,18408,18428,18449,18460,18462,18472,18508,19381,19434,19435,19436,19452,19476,19480,19866,19867,19868,19871],"fullWord":16055},{"subwords":[905,911,918,919,973,990,14898,14912,14939,14944,15864,15865,16041,16056,16057,16103,16109,16110,17773,17781,17802,17805,17956,17957,18018,18449,18472,18487,19231,19232,19377,19381,19382,21212],"fullWord":16057},{"subwords":[93,94,96,200,1053,2766,2771,2782,3021,3022,3076,3077,4263,4267,4268,4269,4271,4431,4432,4639,4826,4849,5455,5456,5471,5478,5627,5656,6023,15880,15893,16058,16059,16114,16252,16270,16298,18066,18067,19871,19876,19877],"fullWord":16059},{"subwords":[93,96,121,123,796,810,812,817,825,905,906,2941,2954,2960,3001,3021,3076,3078,3168,4224,4268,4271,4312,4326,4330,4350,4351,5588,5599,5627,5654,5655,5656,5976,5977,6023,14717,14722,14881,15021,15048,15777,15782,15840,15880,16058,16060,16142,16145,16270,16286,16298,16419,18056,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":16060},{"subwords":[93,96,973,3021,3024,3051,3076,3079,3165,4268,4271,4370,5627,5656,6023,6039,15880,15892,16058,16061,16270,16291,16298,16303,18066,18073,19871,19876,19882],"fullWord":16061},{"subwords":[200,326,336,973,1053,4461,4901,5037,9127,9449,9450,15893,15928,15929,16063,16064,16903,18062,18083,19871],"fullWord":16064},{"subwords":[488,973,990,10236,10241,10245,11044,11048,15942,15960,15963,16041,16065,16066,16067,17022,17027,17147,17148,18388,18487,18508,19427,19605,19871],"fullWord":16067},{"subwords":[596,712,973,987,12283,15986,16009,16068,16069,18117,18130,18169,19871],"fullWord":16069},{"subwords":[200,1009,1053,4551,4555,4826,4849,5471,5478,5479,5480,5548,5616,5620,5626,5627,6055,15893,16041,16043,16044,16070,16071,16270,16293,16457,17806,17999,18066,18067,18074,18339,18340,18508,18541,18559,18575,19871,19876,19877],"fullWord":16071},{"subwords":[973,982,990,1009,5616,5618,5620,5626,5627,6039,6055,16041,16043,16046,16070,16072,16270,16291,16293,16296,16457,16464,18066,18073,18074,18075,18487,18508,18541,18559,19871,19876,19882],"fullWord":16072},{"subwords":[267,268,269,280,931,1106,1114,1115,7396,7439,15910,15911,15912,16073,16076,16270,19967,20003],"fullWord":16073},{"subwords":[596,693,711,1103,12283,15986,16011,16041,16042,16074,18408,18428,19948,19957,19970,19975,19978],"fullWord":16074},{"subwords":[931,1009,1103,1106,1114,5616,5620,5626,6055,16041,16043,16075,16076,16270,16293,16457,17799,18541,18559,19967,19970,19975,19978,20088,20095,20101],"fullWord":16075},{"subwords":[817,825,905,906,907,973,1106,1109,1110,1114,5588,5599,5976,5977,6039,14881,14885,14921,14929,15337,15354,16076,16078,16079,16080,16270,16286,16290,16291,16419,19967,19968,20070,20071],"fullWord":16079},{"subwords":[287,647,691,1115,1124,7283,7287,7396,7604,7611,9307,12230,12233,15910,15986,16001,16081,16815,16858,16866,17211,19920,19948,19957,20107,20115,20152,20154,20167,20191],"fullWord":16081},{"subwords":[349,359,905,1124,1125,9376,9409,12680,12683,13007,13087,15673,16028,16082,16083,16889,17303,17722,20107,20115,20191,20205],"fullWord":16082},{"subwords":[905,973,12680,12683,13007,13087,15673,16083,16084,17303,17306,17434],"fullWord":16084},{"subwords":[905,12680,12683,13007,13087,13091,14939,14944,15673,15690,15864,15865,16083,16085,16087,16103,17303,17472,17473,19966,21212],"fullWord":16085},{"subwords":[905,12680,12683,13007,13051,13052,13087,15673,16083,16086,17303,17451,19868,19871],"fullWord":16086},{"subwords":[973,13087,16087,16088,16103,16109,17434,17472,17473,17474,17475],"fullWord":16088},{"subwords":[817,825,905,906,907,973,1145,1150,5588,5599,5976,5977,6039,14881,14885,14933,14938,15281,16089,16091,16092,16096,16270,16286,16290,16291,16419,16475,16482,18220,18221,20410,20417,20419,20442,20449,20510,20512,20975],"fullWord":16092},{"subwords":[1155,1157,6386,6388,6723,6725,6726,6730,6733,6854,10292,10299,10304,10313,15942,16089,16093,16103,17037,17039,17149,18217,20449,20493,20496,21079,21082,21084,21093],"fullWord":16093},{"subwords":[287,647,691,1154,1158,1161,7283,7287,7396,7604,7611,7747,7751,9307,12230,12233,15910,15986,16001,16089,16094,16095,16815,16858,16866,17211,18181,18186,18195,18196,18239,18246,20326,20341,20349,20350,20393,20399,20449,20742,20749,20774,20790,20792,20807],"fullWord":16094},{"subwords":[227,817,825,905,906,1145,1150,1166,1196,1197,5588,5599,5619,5976,5977,14881,14933,14938,14939,14944,15281,15282,15864,15865,15866,15867,16089,16091,16097,16103,16105,16270,16286,16419,16475,18217,18219,18220,20410,20417,20419,20442,20448,20449,20493,20496,20510,20512,20513,21010,21016,21017,21071,21079,21093,21097,21099,21104,21105,21130,21138,21139,21212],"fullWord":16097},{"subwords":[973,987,1187,1192,12560,15986,16009,16098,16100,16101,17383,17395,17434,17471],"fullWord":16101},{"subwords":[716,1187,1192,12311,12312,12560,12573,12891,13143,15986,16098,16100,16102,16103,17383,17471,17472,17473,21183],"fullWord":16102},{"subwords":[227,817,825,905,906,907,973,1196,1197,5588,5599,5619,5976,5977,6039,6040,14881,14885,14939,14944,15282,15864,15865,15866,15867,16103,16105,16106,16109,16270,16286,16290,16291,16419,21071,21097,21099,21104,21105,21130,21212],"fullWord":16106},{"subwords":[973,982,990,1009,1196,1197,5616,5618,5619,5620,5626,6039,6040,6055,16041,16043,16046,16103,16107,16109,16110,16270,16291,16293,16296,16457,16464,17802,17805,18018,18019,18021,18487,18541,18559,21097,21105,21106,21107,21130,21135],"fullWord":16107},{"subwords":[287,647,691,716,7283,7287,7396,7447,7452,7604,7611,9307,12230,12233,12311,12312,15910,15924,15986,16001,16103,16108,16815,16858,16866,17211,21058,21144,21145],"fullWord":16108},{"subwords":[27,67,1234,1422,1502,1507,2738,2744,2757,3100,3102,15880,16103,16111,16112],"fullWord":16112},{"subwords":[377,382,796,810,905,2813,2941,2971,3001,3017,4050,4051,10072,10226,14880,15880,15888,15889,15942,16118,16142],"fullWord":16118},{"subwords":[200,973,2766,2782,2813,3447,3448,3476,10072,10090,10107,10236,15880,15892,15893,15942,16114,16115,16119,16120],"fullWord":16120},{"subwords":[93,94,96,200,399,400,407,2766,2771,2782,2813,3021,3022,3447,3448,4431,4432,4466,4467,4601,4603,4639,4641,4642,4728,4826,5756,5760,6023,10072,10073,10074,10077,10090,10093,10099,10107,10227,10324,10327,10331,10360,10378,15880,15893,15942,15948,16114,16119,16121,16122,16270,16274,16298,17044],"fullWord":16122},{"subwords":[93,96,121,123,399,400,407,796,810,817,825,905,906,2813,2941,2954,2960,2971,3001,3021,3493,3494,5588,5592,5593,5599,5976,5977,6023,10072,10073,10075,10076,10077,10207,10228,10324,10355,10360,14717,14722,14805,14881,14968,14973,15021,15048,15880,15942,15948,16121,16123,16142,16145,16182,16270,16274,16286,16298,16419,16420],"fullWord":16123},{"subwords":[93,96,399,400,407,973,2813,3021,3024,3165,3476,6023,6039,10072,10073,10077,10230,10236,10324,10360,10453,15880,15892,15942,15948,15950,16121,16124,16270,16274,16277,16291,16298,16303],"fullWord":16124},{"subwords":[442,461,973,2813,2826,2833,3476,10072,10236,15880,15892,15942,16125],"fullWord":16125},{"subwords":[481,486,961,972,973,2813,2921,2938,3465,3466,3473,3474,3476,4047,4048,4237,10072,10182,10194,10236,13154,13167,13204,13232,13336,13344,15880,15892,15942,16014,16020,16126,16127,17019,17020,17476,17507],"fullWord":16127},{"subwords":[341,347,555,574,579,961,968,2848,2859,2862,2865,2868,2921,2938,3402,4046,4048,4237,9178,9196,9422,11086,11105,11270,11275,11330,11617,11618,11759,13154,13167,13336,13688,13690,13702,13758,13759,13839,14421,15880,15973,16014,16129,16130,16131,16178,16764,16769,16853,16883,17476,17550,17551],"fullWord":16131},{"subwords":[574,579,961,972,973,2848,2859,2865,2868,2921,2938,4048,4237,11086,11105,11270,11275,11330,11348,12082,13154,13167,13336,13344,15880,15892,15973,16014,16020,16129,16130,16132,16133,17476,17507,17508],"fullWord":16132},{"subwords":[126,134,693,711,973,987,990,2869,2906,2907,2908,2917,3041,3049,3052,3064,4238,4241,15880,15892,15986,16009,16041,16134,16135,16136,16137,16157,16159,18408,18428,18487],"fullWord":16137},{"subwords":[126,134,693,711,716,1006,2869,2906,2907,2908,2917,2918,3041,3052,3064,3100,3102,4238,4241,4400,4403,4423,12286,12311,12312,15880,15986,16041,16103,16134,16136,16138,16157,17802,18018,18283,18408,18428,18429],"fullWord":16138},{"subwords":[93,94,96,200,732,733,739,779,961,2766,2771,2782,2921,2922,2923,2926,2938,3021,3022,4048,4237,4431,4432,4639,4826,5956,6023,6033,13154,13155,13156,13159,13167,13171,13177,13336,13439,13461,13478,13488,15880,15893,16014,16114,16139,16140,16270,16298,17476,17477,17478,17481,17525,17530],"fullWord":16140},{"subwords":[93,96,732,739,779,780,961,972,973,2921,2922,2926,2938,3021,3024,3165,4048,4237,5956,6023,6033,6039,13154,13155,13159,13167,13336,13344,13345,13439,13461,15880,15892,16014,16020,16139,16141,16270,16291,16298,16303,17476,17477,17480,17507,17525,17529],"fullWord":16141},{"subwords":[27,67,787,791,796,810,905,1210,1215,1366,1419,1422,2308,2343,2738,2757,2941,3001,3017,4052,4054,15876,15880,15888,16111,16142,16143],"fullWord":16143},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2960,3001,3021,3107,4106,5588,5599,5976,5977,6023,14717,14722,14881,15021,15048,15880,16142,16144,16145,16270,16286,16298,16419],"fullWord":16144},{"subwords":[93,94,96,121,122,123,200,796,800,810,817,825,905,906,2766,2771,2780,2781,2782,2941,2949,2953,2954,2955,2960,3001,3021,3022,3111,3112,4431,4432,4516,4520,4607,4611,4639,4810,4826,5588,5599,5976,5977,6023,14717,14718,14722,14736,14751,14881,14882,14961,14965,15021,15028,15048,15060,15087,15880,15890,15893,16114,16142,16145,16146,16270,16286,16298,16419],"fullWord":16146},{"subwords":[93,96,121,123,796,810,817,825,905,906,2941,2954,2958,2959,2960,3001,3021,5588,5599,5976,5977,6008,6016,6023,14717,14720,14721,14722,14872,14881,14883,14983,14988,15021,15048,15880,16142,16145,16147,16270,16286,16298,16419],"fullWord":16147},{"subwords":[93,96,121,123,796,810,817,825,905,906,907,973,2941,2954,2960,2961,3001,3021,3024,3165,4084,4141,5588,5599,5976,5977,6023,6026,6039,14717,14722,14881,14885,15021,15048,15880,15892,16142,16145,16148,16155,16270,16286,16290,16291,16298,16303,16419],"fullWord":16148},{"subwords":[93,96,121,123,227,796,810,817,825,905,906,1196,1197,2941,2954,2960,3001,3021,3100,3102,4114,4232,5588,5599,5619,5976,5977,6023,14717,14722,14735,14881,14939,14944,15021,15048,15282,15864,15865,15866,15867,15880,16103,16105,16142,16145,16149,16156,16270,16286,16298,16419,21071,21097,21099,21104,21105,21130,21212],"fullWord":16149},{"subwords":[796,810,828,905,973,2941,3001,4084,6308,15880,15892,16142,16150,16151,16155],"fullWord":16151},{"subwords":[796,810,905,961,972,973,2921,2938,2941,2987,2995,3001,4048,4077,4082,4084,4237,13154,13167,13286,13321,13336,13344,14403,14851,14866,14891,14894,15880,15892,16014,16020,16142,16152,16153,16155,16223,16225,17476,17494,17504,17507],"fullWord":16153},{"subwords":[796,810,905,2941,3000,3001,3100,3102,4232,14735,14939,14944,15864,15865,15880,16103,16142,16154,16156,21212],"fullWord":16154},{"subwords":[93,96,98,101,126,134,325,932,1009,3021,3025,3041,3042,3052,3057,3064,3221,3228,3229,3230,3238,3239,3264,4238,4241,5582,5616,5620,5626,6023,6055,6057,6058,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,15880,15883,16041,16043,16157,16158,16270,16293,16298,16304,16457,16559,16574,18323,18324,18541,18543,18559,18570,18697],"fullWord":16158},{"subwords":[3119,3139,3142,3165,5856,5918,6023,6031,6039,6042,12339,12367,16160,16161,16298,16303,16319,16335,16342,16394],"fullWord":16161},{"subwords":[3413,3415,5856,5918,6023,9079,9085,9207,9307,12410,16162,16178,16298,16769,16858,16859,16860],"fullWord":16162},{"subwords":[3145,3150,3165,4238,4241,5856,5918,6023,6039,6057,12367,12368,12373,12374,12376,16163,16164,16298,16303,16304,16306,16399,16457,16464,18607,18624],"fullWord":16164},{"subwords":[93,96,98,101,112,113,319,320,325,932,2848,2853,2868,3021,3025,3189,3193,3221,3225,3257,3336,5582,5845,6023,8290,8296,8362,8532,8539,11086,11089,11093,11094,11097,11105,11330,11335,11437,11453,11461,11560,11563,12080,15880,15882,15973,15978,16129,16165,16270,16278,16298,16531,16533,16574],"fullWord":16165},{"subwords":[3119,3257,3336,5845,6023,8483,8532,8534,8539,11461,11563,12080,16166,16298,16319,16330,16574],"fullWord":16166},{"subwords":[3272,3275,3276,3277,3281,8612,8614,8616,8678,16167,16178,16769,16772,16823,16954],"fullWord":16167},{"subwords":[3272,3336,8612,8648,8678,8681,9422,9423,11759,11774,12082,16168,16178,16627,16628,16769,16779,16903],"fullWord":16168},{"subwords":[3272,3328,3331,3428,3429,4238,4241,8612,8678,8681,8685,8687,8688,8691,8935,9440,9447,16169,16178,16651,16653,16654,16769,16779,16903,16907,16915,18742,18823,18830,18947],"fullWord":16169},{"subwords":[3272,3944,8612,8678,8714,8739,12810,16170,16178,16769,17316],"fullWord":16170},{"subwords":[4047,4048,4237,6023,6033,8525,8528,8549,10373,16171,16298,16574,16662,17525],"fullWord":16171},{"subwords":[3257,3336,3367,3732,3744,3750,3944,5641,5845,6023,8532,8539,8714,8725,8730,8775,8780,8881,11461,11563,12080,12806,12808,12810,12872,16172,16173,16298,16574,16664,16676,17316,17382],"fullWord":16173},{"subwords":[3675,3677,3701,3826,3841,3847,3860,3944,8714,10760,10765,10766,10774,10777,10833,10854,12809,12810,12895,12898,13024,16174,16686,17316,17354,17370],"fullWord":16174},{"subwords":[325,932,973,3025,3096,3099,3232,3235,8362,8409,8416,15880,15892,16033,16089,16096,16176,16177,16571,18210,20302,20449,20450,20599],"fullWord":16177},{"subwords":[3417,3689,3692,3777,3814,9097,9099,9207,9307,9360,9366,12560,16178,16180,16181,16769,16779,16858,16881,16903,17316,17383,17391,17392,17395,17434],"fullWord":16181},{"subwords":[93,96,121,123,399,400,407,796,810,817,825,905,906,2813,2941,2954,2960,2971,3001,3021,3493,3494,5588,5592,5593,5599,5976,5977,6023,10072,10073,10075,10076,10077,10207,10228,10324,10355,10360,14717,14722,14805,14881,14968,14973,15021,15048,15880,15942,15948,16121,16123,16142,16145,16182,16270,16274,16286,16298,16419,16420],"fullWord":16182},{"subwords":[3664,12771,12783,16183,16184,17316,17434],"fullWord":16184},{"subwords":[3538,3540,3638,3656,3701,3704,3707,5096,5104,5221,5229,10760,10893,12837,12844,16185,16186,17316,17323,17332,17354,17357,17434],"fullWord":16186},{"subwords":[3777,3786,3788,3814,3938,5653,5856,5918,5953,5955,6023,12506,12560,12561,12874,12875,12876,12879,16187,16188,16298,17316,17383],"fullWord":16187},{"subwords":[3165,3777,3786,3788,3814,5653,5856,5918,5953,5955,6023,6039,12367,12506,12560,12561,12563,12874,12875,12876,12879,16188,16189,16298,16303,17316,17383,17388,17395,17434],"fullWord":16189},{"subwords":[3826,3854,3857,3860,3864,3883,4048,4237,12905,12936,14019,16190,16191,16194,17316,17406,17414,17434],"fullWord":16191},{"subwords":[3826,3860,3861,3863,3958,3963,3965,3971,4238,4241,16192,16193,16205,16208,17316,17399,17404,17434,17435,17436,19060,19125],"fullWord":16193},{"subwords":[3165,3864,3867,3872,3883,3884,3885,4048,4237,6023,6033,6039,12916,12917,12925,12936,13607,13608,14166,14170,14179,16194,16195,16196,16298,16303,17316,17406,17414,17434,17525,17529],"fullWord":16196},{"subwords":[3944,4106,8714,8857,8874,8934,12810,12965,12968,12971,13007,15386,15592,15599,16197,17316],"fullWord":16197},{"subwords":[3638,3644,3647,3648,3649,3656,3657,3658,3893,3897,3898,3899,3902,3929,4118,4119,4639,4656,4659,4660,4810,4826,5096,5104,5114,5115,5116,5117,5216,5221,5223,5225,6004,6023,12752,12755,12965,12971,12979,12982,13007,15021,15028,15048,15060,15078,15081,15087,15592,15599,15600,15603,15609,15610,15611,15676,15677,16198,16199,16243,16298,17316,17323,17419],"fullWord":16199},{"subwords":[3898,3900,3901,3902,3929,6004,6008,6016,6023,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,16198,16200,16298,17316,17419,17423],"fullWord":16200},{"subwords":[3165,3898,3902,3929,3930,4141,4191,4192,6004,6023,6039,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,15679,16198,16201,16298,16303,17316,17419,17424,17434],"fullWord":16201},{"subwords":[349,359,796,809,810,905,2803,2941,3001,3402,3403,3693,3694,9376,9409,12680,12683,12965,12966,12967,12971,13007,13018,15592,15599,15673,15880,16028,16142,16178,16202,16769,16889,17303,17316,17722],"fullWord":16202},{"subwords":[3777,3814,3913,3919,4191,12548,12560,12965,12971,13007,15592,15599,16203,16204,17316,17383,17395,17434],"fullWord":16204},{"subwords":[3944,3958,3965,3971,4238,4241,8714,8887,8892,8901,8935,12810,16205,16206,16704,17316,17435,18743,19123],"fullWord":16206},{"subwords":[126,134,929,3041,3052,3064,3402,3403,3429,3603,3605,3609,3610,3611,3958,3965,3971,4238,4241,9367,9368,9447,12686,12692,13031,13038,15880,16041,16157,16178,16205,16207,16769,16907,17316,17435,17885,17897,18333,18335,18347,18432,18435,18823,18830,18947],"fullWord":16207},{"subwords":[4191,4312,4350,4370,12965,12971,13007,13051,13052,15592,15599,16210,16211,17316,17434,17451,17456,19886],"fullWord":16211},{"subwords":[3958,3963,3965,3971,4238,4241,4370,4375,4394,13055,13058,13059,13082,16205,16208,16212,16213,16265,16268,17316,17434,17435,17436,19125],"fullWord":16213},{"subwords":[3638,3644,3649,3656,3657,3658,4010,4013,4028,4639,4656,4826,4865,4873,5096,5104,5114,5117,5221,5223,5282,5283,6023,12752,12755,13110,13111,13112,16214,16215,16298,16475,17316,17323,17464,17465,20524,20531,20875,20877],"fullWord":16215},{"subwords":[3701,4010,4018,4020,4028,10760,10893,10942,10952,13114,13118,16214,16216,16217,16218,17121,17125,17316,17354,17434,17464,17470],"fullWord":16217},{"subwords":[796,810,905,973,2941,3001,3171,4062,4064,4084,7375,7391,7396,7939,7942,14758,14773,15880,15892,15910,15923,16116,16117,16142,16155,16219,16220],"fullWord":16220},{"subwords":[796,810,869,883,905,973,2848,2868,2941,3001,4065,4068,4084,11086,11105,11276,11281,11284,11314,11330,11348,12082,14808,14820,15880,15892,15973,16129,16133,16142,16155,16221,16222],"fullWord":16222},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":16224},{"subwords":[796,810,905,961,972,973,2921,2938,2941,2987,2995,3001,4048,4077,4082,4084,4237,13154,13167,13286,13321,13336,13344,14403,14851,14866,14891,14894,15880,15892,16014,16020,16142,16152,16153,16155,16223,16225,17476,17494,17504,17507],"fullWord":16225},{"subwords":[796,810,905,1155,1157,2813,2941,2971,3001,3096,3099,3482,3485,4096,4097,4098,4100,10072,10292,10299,14933,14938,15880,15942,16089,16142,16226,17037,20302,20410,20442,20449],"fullWord":16226},{"subwords":[93,96,112,113,121,123,796,810,817,825,869,883,905,906,2848,2853,2868,2941,2954,2960,3001,3021,4065,4068,4110,4111,5588,5599,5845,5976,5977,6023,11086,11089,11091,11092,11093,11105,11276,11281,11284,11286,11287,11314,11315,11330,11333,11437,11453,11539,11560,12080,14717,14722,14808,14820,14881,14975,14978,15021,15048,15202,15224,15880,15973,15978,16129,16142,16145,16221,16227,16270,16278,16286,16298,16419,17161],"fullWord":16227},{"subwords":[3113,3115,3116,3117,3119,3153,3154,4120,4121,4122,4130,4639,4678,4679,4680,4810,4826,5984,6023,15021,15028,15048,15060,15071,15087,15093,15096,16228,16229,16298,16311,16319,16320,16340,16425,16426],"fullWord":16229},{"subwords":[3119,3139,3141,3154,4120,4130,5856,5918,5984,5998,6000,6023,12339,15021,15048,16160,16228,16230,16298,16319,16335,16340,16425,17237],"fullWord":16230},{"subwords":[3119,3154,3165,4120,4130,4141,5984,6023,6031,6039,6042,15021,15032,15048,16228,16231,16298,16303,16319,16340,16341,16342,16425,16429],"fullWord":16231},{"subwords":[3165,4141,4147,4150,6023,6039,15021,15048,16232,16233,16298,16303,16475,16482],"fullWord":16233},{"subwords":[4147,4150,4232,6023,15021,15048,15866,15867,16232,16234,16298,16475,21010,21016,21017,21130,21138,21139,21212],"fullWord":16234},{"subwords":[1790,1791,2417,2423,4151,4152,4158,6023,9079,9085,9384,9389,9409,14995,15014,15021,15048,15402,15410,15411,15415,15526,16178,16235,16298,16423,16765,16769,16889,16890,17722],"fullWord":16235},{"subwords":[4046,4048,4162,4163,4169,4237,9178,9196,9409,9422,11759,13702,14313,14326,14339,14403,14421,15480,15489,15508,15524,15747,16178,16236,16237,16239,16769,16853,16883,16889,17550,17722],"fullWord":16237},{"subwords":[9409,9422,9423,11759,11774,12082,15480,15489,16178,16236,16238,16769,16779,16889,16899,16903,17722],"fullWord":16238},{"subwords":[4046,4048,4169,4170,4237,9409,13702,13844,14342,14403,14421,15508,15524,16178,16239,16240,16769,16779,16883,16888,16889,16899,16903,17550,17559,17722],"fullWord":16240},{"subwords":[3429,4046,4048,4169,4237,4238,4241,9409,9447,13438,13702,13850,13866,14403,14421,14427,14957,15508,15524,16178,16239,16241,16769,16883,16889,16907,17550,17598,17665,17722,17881,17974,18823,18830,18926,18936,18947,19295,19301,19386],"fullWord":16241},{"subwords":[4158,6023,9079,9085,9384,9389,9409,15021,15048,15337,15354,15411,15415,15526,15549,15554,16178,16242,16298,16769,16889,16890,17722,20070,20119,20121,20129,20132,20133,20134,20197],"fullWord":16242},{"subwords":[3638,3656,3893,3897,4191,5096,5104,5216,5221,5229,5406,12965,12971,13007,15592,15599,15600,15609,16243,16244,17316,17323,17332,17434],"fullWord":16244},{"subwords":[3701,3714,10760,12965,12971,13007,15592,15599,15623,15626,16245,17316,17354],"fullWord":16245},{"subwords":[126,132,133,134,796,809,810,905,911,918,929,2941,3001,3003,3011,3041,3047,3048,3052,3064,3603,3605,3611,3958,3959,3965,3971,4238,4241,12680,12683,12686,12692,12965,12966,12967,12971,13007,13008,13011,13018,14898,14912,15574,15592,15599,15673,15691,15700,15880,16041,16142,16157,16205,16246,17303,17316,17429,17435,17773,17885,18333,18335,18432,18435,18449,18463,18464,18472,19093,19094,19097,19098,19100,19113,19381],"fullWord":16246},{"subwords":[2610,2656,2668,2687,4242,4262,4312,4317,4320,4350,4370,15749,15764,16247,16248,18035,18043,19840,19844,19886],"fullWord":16248},{"subwords":[4273,4275,4312,4350,7194,7206,15783,15788,16249,16254,16262,18155],"fullWord":16249},{"subwords":[27,67,973,1422,1448,2668,2687,2738,2757,3051,4242,4243,4262,4370,15880,15892,16111,16113,16250,16251,18035,18043,19871],"fullWord":16251},{"subwords":[4370,10969,10972,16255,16256,18051,18055,18094,18097],"fullWord":16256},{"subwords":[4047,4048,4049,4237,4238,4241,4289,4291,4302,4311,4367,4375,4394,11044,13438,14003,14427,14551,14561,14567,16258,16259,16265,17147,18135,18148,19386,19453,19456,19605,19825],"fullWord":16259},{"subwords":[4312,4350,4370,7194,7206,7222,16262,16263,18155,18158,19886],"fullWord":16263},{"subwords":[4232,4312,4350,7140,7194,7206,7207,16262,16264,18155,18159,21212],"fullWord":16264},{"subwords":[3264,3266,4238,4241,4423,6023,6057,6058,8586,8607,8935,16269,16298,16304,16457,16574,16758,18018,18019,18570,18572,18697,18724,18806,21130,21135],"fullWord":16269},{"subwords":[5,67,269,280,931,1210,1215,1256,1266,1422,1425,1604,1617,7242,7252,7396,15910,15911,15912,16270,16271],"fullWord":16271},{"subwords":[30,67,200,1243,1246,1254,1422,1425,1426,1515,1518,1560,1574,1576,1590,4427,4430,4618,4622,4629,4680,4826,5605,5606,15893,16270,16272,16319,16320],"fullWord":16272},{"subwords":[183,197,200,269,270,280,299,4451,4453,4454,4707,4826,5114,5117,5123,5125,5127,5139,5221,5222,5223,5707,5708,5718,5721,7253,7258,7396,7460,7761,7763,7782,7785,7790,12752,12755,13015,15893,15910,15912,15921,16270,16273,17323,17324],"fullWord":16273},{"subwords":[200,399,401,407,4466,4467,4601,4603,4680,4728,4731,4734,4826,5605,5606,5607,5691,5693,5756,5760,5790,10090,10093,10099,10107,10227,10324,10327,10331,10360,10361,10362,10378,10383,10385,10392,10451,15893,15942,15948,16270,16274,16275,16319,16320,17044],"fullWord":16275},{"subwords":[399,401,407,817,825,905,906,5588,5592,5593,5599,5605,5607,5609,5691,5693,5790,5976,5977,5978,5984,10207,10228,10324,10355,10360,10361,10363,10383,10388,10390,10392,10451,14805,14881,14968,14973,15107,15110,15280,15284,15942,15948,16024,16270,16274,16276,16286,16319,16340,16419,16420,16425],"fullWord":16276},{"subwords":[504,528,531,596,931,5845,5918,11213,11216,11218,11221,11247,11248,11330,11437,11446,11450,11453,11512,11524,11560,12229,12244,12245,12250,12283,15973,15978,15986,15995,16270,16278,16279],"fullWord":16279},{"subwords":[200,4472,4475,4476,4489,4671,4672,4680,4826,5605,5606,5658,5663,5664,5845,11107,11115,11123,11330,11437,11438,11440,11453,11478,11479,11560,15893,15973,15978,16270,16278,16280,16319,16320,16330],"fullWord":16280},{"subwords":[528,531,5605,5845,5881,5882,5918,11213,11218,11221,11247,11248,11330,11437,11446,11450,11453,11512,11524,11560,12229,12244,12245,12250,12339,15973,15978,15986,15995,16270,16278,16281,16319,16330,16335,16373],"fullWord":16281},{"subwords":[526,527,817,825,869,883,905,906,5588,5599,5605,5609,5845,5976,5977,5978,5984,11276,11286,11287,11314,11315,11330,11333,11437,11453,11539,11543,11546,11560,14808,14820,14881,14975,14978,15202,15224,15973,15978,16024,16270,16278,16282,16286,16319,16330,16340,16419,16425,17161],"fullWord":16282},{"subwords":[93,96,114,116,2869,2883,2887,2906,3021,3104,3119,3139,5605,5856,5859,5918,6023,12229,12339,15880,15986,15995,16134,16160,16270,16285,16298,16319,16335,16385],"fullWord":16285},{"subwords":[93,96,98,101,121,123,325,796,801,804,810,817,825,905,906,932,2941,2954,2960,3001,3021,3025,3027,3206,3209,3211,3217,3221,3223,4083,5582,5588,5599,5976,5977,6023,8333,8338,8362,8453,8456,8552,8584,8934,14717,14722,14775,14881,14886,14958,15021,15048,15376,15377,15880,16142,16145,16270,16286,16287,16298,16419,16549,16574,16577],"fullWord":16287},{"subwords":[200,817,825,905,906,4516,4520,4607,4611,4678,4679,4680,4810,4826,5588,5589,5599,5605,5606,5609,5976,5977,5978,5979,5984,14736,14751,14881,14882,14961,14965,15060,15071,15087,15093,15096,15893,16024,16270,16286,16288,16311,16319,16320,16340,16419,16425,16426],"fullWord":16288},{"subwords":[817,825,905,906,5588,5599,5605,5609,5976,5977,5978,5980,5984,6008,6016,14872,14881,14883,14983,14988,16024,16270,16286,16289,16319,16340,16419,16425,16428],"fullWord":16289},{"subwords":[215,217,973,987,5918,5953,5955,6039,12229,12367,12506,12560,12561,12563,12684,12876,12879,13029,15986,15995,15999,16009,16270,16291,16292,17383,17388,17395,17434],"fullWord":16292},{"subwords":[163,200,1009,4551,4555,4680,4826,5605,5606,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16294,16310,16319,16320,16457,16458,17806,17816,18339,18340,18541,18559,18560,18561,18575,18576,18577,18588],"fullWord":16294},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":16295},{"subwords":[931,1144,1145,1150,1196,1197,5619,16089,16103,16270,16297,16475,18217,20449,20493,20496,21016,21017,21079,21093,21097,21105,21130,21138,21139],"fullWord":16297},{"subwords":[93,96,114,116,126,134,693,694,697,711,927,1009,2869,2883,2887,2906,2907,2908,2917,3021,3041,3042,3052,3057,3064,3145,3150,4238,4241,5616,5620,5626,5849,5850,5856,5918,6023,6055,6057,6074,6075,12229,12289,12325,12330,12368,12374,12376,15880,15986,15995,16041,16043,16134,16136,16157,16163,16270,16293,16298,16299,16304,16399,16457,17763,18408,18428,18541,18559,18607,18624],"fullWord":16299},{"subwords":[3113,3117,3119,4639,4680,4826,6023,16298,16300,16319,16320],"fullWord":16300},{"subwords":[3638,3644,3649,3656,3657,3658,3777,3786,3787,3788,3814,4639,4656,4774,4785,4826,5096,5104,5114,5117,5172,5176,5188,5221,5223,5653,5856,5865,5875,5918,5953,5955,6023,12493,12499,12500,12501,12506,12560,12561,12562,12752,12755,12874,12875,12876,12879,16188,16298,16301,16381,17316,17323,17383,17387],"fullWord":16301},{"subwords":[3119,3154,3161,3162,4120,4130,4142,4144,4238,4241,5984,5985,5986,6018,6023,6046,6057,15021,15048,15290,15306,15312,15748,16228,16298,16302,16304,16319,16340,16425,16457,17823,17840,18576,18588,18642,18658,19240,19242],"fullWord":16302},{"subwords":[3161,3898,3902,3929,3931,3940,3958,3961,3965,3968,3970,3971,4142,4238,4241,6004,6018,6023,6028,6057,12965,12971,12979,12982,13007,13008,13011,15021,15048,15052,15054,15306,15312,15592,15599,15610,15611,15676,15691,15694,15695,15700,15748,16198,16205,16298,16304,16305,16457,17316,17419,17429,17435,17924,18981,18985,19093,19098,19100,19101,19103,19113],"fullWord":16305},{"subwords":[3119,3154,3155,4120,4130,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,5984,6023,15021,15048,15058,15283,15334,15777,15782,15840,16228,16298,16307,16319,16340,16425,18056,18066,18071,18150,19876,19878,19880],"fullWord":16307},{"subwords":[200,605,607,610,973,987,4492,4500,4501,4605,4606,4774,4785,4826,5865,5875,5918,6039,12229,12367,15893,15986,15988,15993,15995,15996,15999,16009,16270,16291,16308,16309,16381,16384],"fullWord":16309},{"subwords":[163,200,1009,4551,4555,4680,4826,5605,5606,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16294,16310,16319,16320,16457,16458,17806,17816,18339,18340,18541,18559,18560,18561,18575,18576,18577,18588],"fullWord":16310},{"subwords":[4678,4679,4680,4810,4826,5358,5984,6031,6039,6042,15060,15071,15087,15093,15096,16311,16312,16319,16320,16323,16340,16341,16342,16425,16426,16429],"fullWord":16312},{"subwords":[4680,4826,5667,5671,6031,6039,6042,7460,7467,7468,7473,16313,16314,16319,16320,16323,16342],"fullWord":16314},{"subwords":[3113,3117,3119,4263,4267,4268,4269,4271,4639,4680,4826,4846,4848,4849,5455,5456,5471,5478,5656,5685,5687,6023,16252,16298,16316,16319,16320,18066,18067,18068,19876,19877,19878],"fullWord":16316},{"subwords":[4826,4849,5471,5478,5845,5846,5847,6039,11569,12082,12091,12097,12152,12153,12156,12173,12174,16317,16318,18062,18066,18067,18073,18103,18116,19876,19877,19882],"fullWord":16318},{"subwords":[4667,4668,4680,4826,16319,16320,16321],"fullWord":16321},{"subwords":[4678,4679,4680,4810,4826,5984,15060,15071,15087,15093,15096,15286,15287,16311,16319,16320,16322,16340,16425,16426],"fullWord":16322},{"subwords":[5716,5918,7467,7473,7493,7496,7498,7503,7504,7511,7604,7611,9307,12339,16319,16325,16335,16351,16352,16790,16815,16818,16858,16860,16866,16867],"fullWord":16325},{"subwords":[5740,5742,5984,15103,15105,15286,16319,16326,16327,16340,16425],"fullWord":16327},{"subwords":[4671,4672,4680,4826,5845,11478,11479,16319,16320,16330,16331],"fullWord":16331},{"subwords":[5820,5821,5845,5984,11539,11543,11546,15202,15224,15286,16319,16330,16332,16340,16425],"fullWord":16332},{"subwords":[5691,5693,5694,5782,5784,5785,5790,5845,6189,6198,10383,10392,10451,10495,10496,11065,11066,16319,16330,16333,17149,21130],"fullWord":16333},{"subwords":[4673,4677,4680,4826,5957,5958,6033,13478,13483,13488,13489,13490,13510,16319,16320,16336,16337,17530,17532],"fullWord":16337},{"subwords":[973,1145,1150,5605,5611,6031,6039,6042,6118,6121,16089,16096,16270,16291,16319,16342,16343,16475,16482,20449,20532],"fullWord":16343},{"subwords":[8483,8586,8935,16319,16344,16457,16574,16589,18576,18588,18697,18698,18716],"fullWord":16344},{"subwords":[5718,5721,5918,5953,5955,6039,7493,7511,7536,7757,7790,7815,12367,12506,12509,12512,12560,12561,12563,12876,12879,16345,16346,16347,17383,17388,17389,17390,17395,17434],"fullWord":16346},{"subwords":[4680,4826,4849,5471,5478,5485,5488,5667,5671,7460,7467,7468,7473,16313,16319,16320,16348,16349,18066,18067,18068,19876,19877,19878],"fullWord":16349},{"subwords":[6031,6039,6042,7467,7473,8106,16319,16342,16348,16350,18066,18073,19876,19878,19882],"fullWord":16350},{"subwords":[4680,4714,4774,4779,4785,4786,4826,4935,4939,4985,4988,4992,5007,5037,5665,5865,5875,5918,9108,9111,9127,9307,12339,12340,12344,16319,16320,16335,16352,16353,16381,16780,16858,16860,17243],"fullWord":16353},{"subwords":[5735,5918,5984,5995,5996,5998,6000,9307,9384,9387,9389,9409,12339,12361,15175,15177,15296,15500,15526,15527,16319,16335,16340,16352,16354,16425,16439,16440,16858,16860,16889,16890,16892,16893,17237,17722],"fullWord":16354},{"subwords":[5918,6031,6039,6042,9307,12339,12367,16319,16335,16342,16352,16355,16394,16858,16860,16861,16881,16903],"fullWord":16355},{"subwords":[5845,6039,9422,9423,11569,11764,11774,11777,12082,16356,16357,16375,16376,16903],"fullWord":16357},{"subwords":[4680,4714,4826,4935,4939,5037,9108,9111,9127,16319,16320,16358,16359,16780,16929,16930,21249,21250,21251,21252],"fullWord":16359},{"subwords":[5735,5984,5995,9384,9389,9409,15526,16319,16340,16358,16360,16425,16889,16890,16892,16929,16931,17722,21251,21252],"fullWord":16360},{"subwords":[6031,6039,6042,16319,16342,16358,16361,16903,16929,16933,21251,21252,21254],"fullWord":16361},{"subwords":[6004,9384,9389,9409,12979,12982,13007,13022,15526,15610,15611,15676,16362,16889,16890,16929,16931,17419,17722,21260,21263,21312],"fullWord":16362},{"subwords":[4728,4763,4769,4826,5114,5117,5146,5148,5163,5165,5167,5171,5221,5223,5756,5760,5782,5784,5845,10378,10443,10447,10780,10782,10888,11492,11495,11831,11833,11834,11835,11839,11845,11865,11868,11870,11871,12752,12755,12837,12844,12845,12848,12872,16363,17044,17097,17323,17354,17357,17359,17360,17382],"fullWord":16363},{"subwords":[3119,3135,3137,4238,4241,5691,5693,5761,5762,5790,6023,6057,10376,10383,10392,10451,10459,10460,10465,16298,16304,16319,16364,16457,17052,17818,17828,18576,18588],"fullWord":16364},{"subwords":[4680,4728,4731,4734,4826,5691,5693,5756,5760,5765,5790,6406,6408,6409,6412,6414,6416,6418,6419,6740,6743,6748,10378,10383,10385,10392,10451,16319,16320,16365,16366,17044],"fullWord":16366},{"subwords":[5691,5693,5780,5781,5790,5984,10383,10388,10390,10392,10451,15107,15110,15288,16319,16340,16368,16369,16425],"fullWord":16369},{"subwords":[5918,6039,10433,10453,10495,10496,11065,11066,11081,12367,16371,17149,18287,21120,21122,21130],"fullWord":16371},{"subwords":[5691,5693,5790,5791,5798,6031,6039,6042,6092,6104,10383,10392,10451,10453,10471,16319,16329,16342,16372,19992,20000,20087],"fullWord":16372},{"subwords":[5845,5918,6031,6039,6042,11512,11524,11529,11569,12082,12339,12367,16319,16330,16334,16335,16342,16373,16374,16394],"fullWord":16374},{"subwords":[5832,5833,5845,9422,9444,9446,9447,11483,11486,11574,11578,11583,11764,11780,11786,11789,16319,16330,16375,16377,16457,16907,16911,17179,17180,17830,18576,18579,18582,18588,18595,18844,18850,18882,18886,18891,18947],"fullWord":16377},{"subwords":[5845,5984,6033,11539,11543,11546,13489,13506,13508,13510,13577,13583,13584,13593,13595,14262,14281,14403,15202,15224,15248,15272,15305,15747,16319,16330,16336,16340,16378,16379,16425,17542,17658],"fullWord":16378},{"subwords":[5845,5984,6033,11539,11543,11546,13489,13506,13508,13510,13577,13583,13584,13593,13595,14262,14281,14403,15202,15224,15248,15272,15305,15747,16319,16330,16336,16340,16378,16379,16425,17542,17658],"fullWord":16379},{"subwords":[693,694,697,711,1009,5605,5616,5620,5621,5626,5853,5854,5918,6055,6074,6075,12229,12289,12325,12330,12339,12368,12374,12376,15986,15995,16012,16041,16043,16045,16270,16293,16319,16335,16380,16399,16457,16458,18408,18428,18541,18559,18560,18576,18583,18585,18588,18607,18624,18625],"fullWord":16380},{"subwords":[4680,4774,4785,4786,4826,5665,5865,5875,5918,12339,12340,12344,16319,16320,16335,16381,16382],"fullWord":16382},{"subwords":[4678,4679,4680,4774,4785,4786,4787,4810,4826,5665,5865,5868,5869,5875,5918,5984,5998,6000,12339,12340,12344,12358,12359,15060,15071,15087,15093,15096,15227,15230,16311,16319,16320,16335,16340,16381,16383,16425,16426,17237],"fullWord":16383},{"subwords":[93,96,114,116,2869,2883,2887,2906,3021,3104,3119,3139,5605,5856,5859,5918,6023,12229,12339,15880,15986,15995,16134,16160,16270,16285,16298,16319,16335,16385],"fullWord":16385},{"subwords":[5918,5953,5955,6000,6004,8540,8547,8552,8575,8579,8580,8581,8584,8725,8728,8729,8730,8789,8793,8795,8796,8797,8857,8867,8871,8874,8875,8881,8934,12506,12548,12556,12560,12561,12565,12567,12810,12876,12879,12979,12982,13007,15238,15386,15610,15611,15676,16386,16391,16574,16676,16678,16685,16697,16700,17272,17383,17419],"fullWord":16386},{"subwords":[5691,5693,5790,5918,5920,9307,9416,10383,10392,10414,10415,10433,10434,10451,10536,10544,10548,10551,10625,10634,10654,12339,12438,12439,12442,16319,16335,16352,16387,16858,16860],"fullWord":16387},{"subwords":[5918,5953,5955,5996,6000,6004,9307,9360,9366,9384,9389,9400,9403,9405,9409,12506,12513,12514,12515,12516,12548,12556,12560,12561,12569,12876,12879,12979,12982,13007,13022,15175,15177,15238,15296,15500,15526,15527,15610,15611,15676,15684,16388,16391,16439,16858,16860,16889,16890,16893,17272,17383,17419,17722],"fullWord":16388},{"subwords":[657,663,973,987,5918,6039,12229,12252,12367,15986,15995,15999,16009,16270,16291,16389,16390],"fullWord":16390},{"subwords":[215,217,817,825,891,905,906,909,5588,5595,5598,5599,5918,5953,5955,5976,5977,6000,6004,12229,12275,12319,12324,12506,12548,12556,12560,12561,12680,12683,12876,12879,12979,12982,13007,14821,14881,14989,15238,15568,15569,15610,15611,15673,15676,15986,15995,15998,16270,16286,16391,16392,16419,17223,17272,17303,17383,17384,17419],"fullWord":16392},{"subwords":[5918,5953,5955,6000,6004,6039,12367,12506,12548,12556,12560,12561,12563,12876,12879,12979,12982,13007,15238,15610,15611,15676,15679,16391,16393,16397,17272,17275,17383,17388,17395,17419,17424,17434],"fullWord":16393},{"subwords":[4680,4774,4785,4786,4826,5665,5865,5875,5918,6031,6039,6042,12339,12340,12344,12367,16319,16320,16323,16335,16342,16381,16384,16394,16395],"fullWord":16395},{"subwords":[5918,6031,6039,6042,6043,12339,12367,16319,16335,16342,16394,16396],"fullWord":16396},{"subwords":[5918,5953,5955,6000,6004,6039,12367,12506,12548,12556,12560,12561,12563,12876,12879,12979,12982,13007,15238,15610,15611,15676,15679,16391,16393,16397,17272,17275,17383,17388,17395,17419,17424,17434],"fullWord":16397},{"subwords":[5918,5937,6000,6018,12362,12368,12374,12376,15241,15245,15306,15312,15748,15866,15867,16399,16401,16457,17843,18018,18019,18287,18293,18607,18624,18649,18651,19257,19258,19377,19570,19572,21120,21122,21130,21135,21212],"fullWord":16401},{"subwords":[399,407,481,486,732,739,779,780,961,972,973,5956,6033,6039,10182,10194,10195,10198,10230,10236,10324,10350,10353,10360,10453,13204,13207,13211,13232,13336,13344,13345,13348,13439,13450,13452,13461,13940,13943,15942,15948,15950,16014,16020,16270,16274,16277,16291,16403,16404,17019,17020,17476,17488,17507],"fullWord":16404},{"subwords":[732,739,779,780,961,972,973,5956,6033,6039,13336,13344,13345,13439,13461,13705,13716,13839,13844,14421,16014,16020,16270,16291,16405,16406,16883,16888,16903,17476,17507,17567],"fullWord":16406},{"subwords":[6033,6039,13705,13716,13844,13846,14421,16408,16883,16888,16903,17567],"fullWord":16408},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":16411},{"subwords":[6033,13489,13510,13609,13613,13626,14427,16319,16336,16409,16412,16457,17821,17836,17846,18576,18588,18662,19386],"fullWord":16412},{"subwords":[3429,3430,3434,4046,4048,4237,4238,4241,5959,5961,6023,6033,6057,9079,9085,9447,13438,13609,13613,13626,13702,13705,13716,13850,13866,14421,14427,16178,16298,16304,16409,16413,16457,16769,16883,16907,16911,17525,17550,17553,17598,17600,17836,18823,18830,18844,18850,18926,18936,18947,19386],"fullWord":16413},{"subwords":[5845,5846,5847,6033,11574,12152,12177,12184,12188,13609,13613,13626,14427,14551,14561,14567,16409,16415,16457,16468,17203,17679,17830,17836,18002,18013,18066,18074,18103,18114,18135,18136,18148,18595,18596,18603,18606,19386,19433,19453,19456,19624,19628,19825,19826,19876],"fullWord":16415},{"subwords":[5691,5693,5790,10383,10392,10451,10470,14635,14650,16319,16416,16417,17128,18066,19876,19878],"fullWord":16417},{"subwords":[5918,9307,9375,14635,14650,14659,16416,16418,16858,16860,18066,18083,18117,19876],"fullWord":16418},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5605,5609,5956,5976,5977,5978,5984,6033,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13462,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,16014,16024,16270,16286,16319,16336,16340,16419,16421,16425,17476,17494,17495,17523,17658],"fullWord":16421},{"subwords":[325,732,735,737,739,775,779,817,825,905,906,932,961,966,5588,5599,5956,5976,5977,6033,8321,8324,8333,8338,8351,8354,8362,8367,8450,8452,8453,8456,8549,8552,8584,8934,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,13643,13645,13677,14262,14281,14403,14775,14851,14852,14856,14866,14881,14886,14891,14979,14982,15248,15272,15305,15376,15377,16014,16270,16286,16419,16422,16543,16545,16549,16556,16574,16577,16607,17476,17494,17495,17523],"fullWord":16422},{"subwords":[67,349,359,817,825,858,863,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,1763,1790,1791,2308,2317,2318,2331,2343,2417,2423,5588,5599,5976,5977,9376,9384,9389,9409,14716,14788,14881,14995,15014,15402,15410,15526,15869,16028,16270,16286,16419,16423,16424,16765,16889,16890,17722],"fullWord":16424},{"subwords":[5918,5984,5998,6000,12339,15286,16319,16335,16340,16425,16427,17237],"fullWord":16427},{"subwords":[5984,6018,6031,6039,6042,6046,6047,15290,15291,15306,15309,15312,15748,16319,16340,16341,16342,16425,16429,16430,16457,16464,17823,17824,17840,17842,18576,18588,18658,19240,19242,19253],"fullWord":16430},{"subwords":[5722,5984,5988,5992,6031,6039,6042,7467,7473,15141,15148,16319,16340,16341,16342,16425,16429,16433,16434],"fullWord":16434},{"subwords":[337,340,349,359,362,399,407,817,825,857,858,860,863,905,906,5588,5592,5593,5599,5976,5977,9376,9384,9389,9409,9416,9429,10121,10125,10207,10228,10324,10355,10360,10414,10415,10502,10503,10536,10549,10550,10551,10675,10676,10677,14780,14783,14788,14805,14881,14968,14973,15399,15400,15444,15445,15473,15475,15526,15931,15933,15942,15948,16028,16270,16274,16286,16419,16420,16435,16889,16890,17072,17722],"fullWord":16435},{"subwords":[5735,5984,5995,6031,6039,6042,9384,9389,9409,15526,15530,16319,16340,16341,16342,16425,16429,16436,16889,16890,16892,16895,16899,16903,17722],"fullWord":16436},{"subwords":[6039,6479,6543,6621,6622,6626,6636,7085,9135,9384,9389,9409,15114,15134,15446,15526,15530,16431,16432,16437,16438,16889,16890,16895,16899,16903,17722],"fullWord":16438},{"subwords":[5735,5918,5984,5995,5996,5998,6000,9307,9384,9387,9389,9409,12339,12361,15175,15177,15296,15500,15526,15527,16319,16335,16340,16352,16354,16425,16439,16440,16858,16860,16889,16890,16892,16893,17237,17722],"fullWord":16440},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":16441},{"subwords":[5918,5996,6000,6039,9307,9384,9389,9409,12367,15175,15177,15296,15297,15500,15503,15526,15527,15530,16439,16442,16858,16860,16861,16881,16889,16890,16893,16894,16895,16899,16903,17722],"fullWord":16442},{"subwords":[5845,5918,5953,5955,6000,6004,11512,11524,11539,11567,11891,11915,11970,11973,11977,11978,11987,12506,12522,12525,12527,12548,12550,12555,12556,12560,12561,12866,12868,12872,12876,12879,12979,12982,13007,15202,15224,15238,15610,15611,15627,15632,15638,15676,16391,16443,17272,17382,17383,17419],"fullWord":16443},{"subwords":[6004,6039,12979,12982,13007,13051,13052,15610,15611,15676,15679,15706,15708,15716,15719,15777,15782,15840,15841,15849,16444,17419,17424,17434,17451,17456,17457,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886],"fullWord":16444},{"subwords":[5845,5846,5847,6039,11539,11569,12082,12152,12154,12155,12156,12173,15202,15224,15777,15782,15806,15820,15840,15841,15849,16446,16447,18066,18071,18072,18073,18103,18116,18150,19876,19880,19881,19882,19886],"fullWord":16447},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":16448},{"subwords":[4678,4679,4680,4810,4826,5984,6092,6100,6104,15060,15071,15087,15093,15096,15337,15354,16311,16319,16320,16340,16425,16426,16449,16450,16472,19992,19996,19998,20000,20057,20070,20073,20074],"fullWord":16450},{"subwords":[5984,6008,6016,6092,6100,6104,15337,15344,15354,16319,16340,16425,16428,16449,16451,16472,19992,19996,19998,20000,20070,20073,20075],"fullWord":16451},{"subwords":[5984,6031,6039,6042,6092,6100,6104,15337,15354,16319,16340,16341,16342,16425,16429,16449,16452,16472,16474,19992,19996,19998,20000,20070,20073,20076],"fullWord":16452},{"subwords":[6004,6039,12979,12982,13007,13095,13099,15337,15354,15610,15611,15676,15679,15728,15732,16453,16454,17419,17424,17434,20070,20077,20078],"fullWord":16454},{"subwords":[973,5605,5611,5845,6031,6039,6042,11330,11348,11351,11437,11453,11560,11561,11569,12082,15973,15978,16270,16278,16283,16291,16319,16330,16334,16342,16455],"fullWord":16455},{"subwords":[6031,6039,6042,16319,16342,16456,16457,16464,17846,17847,18576,18588,18662,18666,18668,19383],"fullWord":16456},{"subwords":[5703,5705,5706,5950,6874,6879,12771,12783,12784,12785,16457,16460,17340,17435,18981,18985,18986,18988],"fullWord":16460},{"subwords":[5918,5953,5955,6039,12367,12368,12373,12374,12376,12506,12560,12561,12563,12574,12581,12585,12591,12876,12879,12884,12885,16399,16457,16461,16462,16464,17278,17279,17383,17388,17395,17434,17435,17436,17834,17835,17909,17912,18607,18624,18981,18985,19036,19038,19042,19057,19125],"fullWord":16462},{"subwords":[13055,13059,13082,13083,16457,16463,17435,17846,17936,18066,18074,18662,18981,18985,19130,19131,19134,19140,19144,19160,19163,19493,19498,19876],"fullWord":16463},{"subwords":[16319,16457,16465,17846,18576,18588,18662,18664],"fullWord":16465},{"subwords":[5984,6018,6046,15290,15306,15312,15320,15748,16319,16340,16425,16457,16466,17823,17840,17846,17960,18576,18588,18658,18662,18665,19240,19242,19255],"fullWord":16466},{"subwords":[5691,5693,5790,10383,10392,10451,10459,10460,10465,16319,16457,16467,17052,17818,17828,17846,18576,18588,18662],"fullWord":16467},{"subwords":[6033,6039,13609,13612,13613,13626,14422,14427,14551,14558,14561,14567,16409,16414,16457,16464,16468,16469,17677,17836,17838,18013,18014,18066,18073,18074,18075,18135,18136,18140,18147,18148,19386,19453,19456,19825,19826,19827,19876,19882],"fullWord":16469},{"subwords":[5918,6031,6039,6042,6092,6093,6097,6104,12339,12367,16319,16335,16342,16394,16470,16471,19992,20000],"fullWord":16471},{"subwords":[5984,6092,6100,6104,15111,15113,15286,15337,15354,16319,16340,16425,16449,16472,16473,19992,19996,19998,20000,20070,20073],"fullWord":16473},{"subwords":[5984,6031,6039,6042,6092,6100,6104,15337,15354,16319,16340,16341,16342,16425,16429,16449,16452,16472,16474,19992,19996,19998,20000,20070,20073,20076],"fullWord":16474},{"subwords":[269,280,1145,1150,5605,6118,6121,7396,7467,7473,15910,15912,16089,16270,16319,16475,16476,18181,18182,20326,20327,20331,20341,20449,20532],"fullWord":16476},{"subwords":[5984,6031,6039,6042,6118,6119,6120,6121,15292,16319,16340,16341,16342,16425,16429,16475,16478,16479,16482,20532,20587],"fullWord":16479},{"subwords":[5716,5918,6122,7493,7511,7604,7611,9307,12390,12397,16475,16480,16481,16815,16858,16860,16862,16866,16867,18239,18245,18246,18247,20579,20584,20742,20749,20774,20785,20788,20790,20792,20807,20826],"fullWord":16480},{"subwords":[5735,5984,5995,6144,9384,9389,9409,15373,15374,15526,16319,16340,16425,16483,16486,16889,16890,16892,16922,17722],"fullWord":16486},{"subwords":[9416,10414,10415,10494,10495,10496,10536,10551,11065,11066,16483,16487,16499,16827,16922,17149,21130],"fullWord":16487},{"subwords":[5716,5918,7493,7511,7604,7611,9307,12474,12476,16483,16488,16815,16858,16860,16866,16867,16922],"fullWord":16488},{"subwords":[5845,6039,9422,9423,11569,11764,11774,11797,11800,12082,16356,16375,16376,16483,16489,16903,16922,16923],"fullWord":16489},{"subwords":[6039,6152,6153,6154,6156,6171,9447,16457,16464,16483,16490,16497,16903,16907,16911,16913,16915,16922,16923,16925,16926,17857,18677,18844,18850,18947],"fullWord":16490},{"subwords":[6033,6049,6166,6168,6171,12916,12925,12936,12937,12944,13131,13607,13609,13613,13626,14027,14030,14166,14182,14188,14201,14234,14235,14427,16409,16457,16483,16491,16494,17406,17435,17471,17644,17836,17921,18677,18981,18985,19075,19076,19081,19090,19386],"fullWord":16491},{"subwords":[693,694,697,711,1009,1167,1173,5616,5620,5626,5918,6055,6074,6075,6171,12229,12289,12325,12330,12368,12374,12376,12402,15986,15995,16041,16043,16098,16270,16293,16399,16457,16483,16492,18408,18428,18528,18532,18541,18559,18607,18624,18677,18679,18680,18681],"fullWord":16492},{"subwords":[6144,6171,16319,16457,16483,16493,17846,18576,18588,18662,18677,18682,18683],"fullWord":16493},{"subwords":[5918,5953,5955,6171,12368,12374,12376,12402,12506,12560,12561,12574,12581,12585,12591,12876,12879,12884,13130,13131,16399,16457,16461,16483,16494,16495,17278,17383,17435,17471,17834,17909,18607,18624,18677,18981,18985,19036,19038,19042,19057],"fullWord":16495},{"subwords":[6039,6171,13131,16457,16464,16483,16494,16496,16497,17434,17435,17436,17471,18677,18981,18985,19125],"fullWord":16496},{"subwords":[399,407,1098,1167,1169,1170,1173,1182,1183,5627,5628,10301,10324,10360,10470,10494,11058,11059,11060,15942,15948,16098,16270,16274,16483,16498,17128,18066,19871,19876],"fullWord":16498},{"subwords":[67,325,932,944,1234,1269,1422,1431,1502,1507,8362,8420,8428,16103,16500,16572,16758],"fullWord":16500},{"subwords":[325,932,950,957,973,3025,3033,3036,8209,8216,8362,15880,15884,15887,15892,16033,16501,16502],"fullWord":16502},{"subwords":[148,158,200,325,932,934,4438,4445,4543,4544,4590,4594,4614,4826,5659,8217,8219,8362,8440,8443,15893,16270,16503,16504,16505,16574,16581],"fullWord":16505},{"subwords":[200,325,817,825,905,906,932,934,4516,4520,4543,4545,4607,4611,4614,4810,4826,5588,5599,5976,5977,8217,8219,8327,8331,8333,8334,8338,8362,8440,8443,8453,8454,8456,8552,8558,8561,8584,8934,14736,14751,14775,14881,14882,14886,14961,14965,15060,15087,15376,15377,15893,16270,16286,16419,16503,16504,16506,16547,16549,16550,16574,16577,16581,16604,16722],"fullWord":16506},{"subwords":[200,325,932,934,936,973,4543,4546,4614,4826,6039,8217,8219,8362,8440,8443,15893,16033,16035,16270,16291,16503,16504,16507,16509,16574,16581,16582,16609],"fullWord":16507},{"subwords":[183,197,200,325,932,4543,4574,4885,4886,5221,5282,8217,8362,8409,8416,8721,8724,8920,8930,12810,15893,16089,16503,16508,16674,16716,17323,17324,17464,20303,20318,20449,20450,20599,20689,20690,20868,20870],"fullWord":16508},{"subwords":[254,325,932,973,990,6339,6343,6344,6354,8229,8232,8362,8371,8378,8391,8935,16033,16041,16511,16512,16559,17786,18487],"fullWord":16512},{"subwords":[325,932,944,7267,7280,7396,7399,7447,7452,8233,8237,8362,8420,8428,15910,15919,15924,16103,16513,16514,16572,16758],"fullWord":16514},{"subwords":[325,651,652,932,935,950,5918,8256,8257,8310,8314,8362,8540,8547,9836,9843,9876,9877,12229,15939,15986,15995,16007,16270,16518,16519,16539,16574,16944,17216,17234],"fullWord":16519},{"subwords":[325,817,825,867,868,905,906,932,950,953,5588,5599,5976,5977,8256,8257,8333,8338,8340,8343,8362,8453,8456,8552,8584,8934,14775,14798,14802,14881,14886,15376,15377,15939,16270,16286,16419,16518,16520,16549,16554,16574,16577],"fullWord":16520},{"subwords":[325,932,936,950,957,973,6039,8256,8257,8362,15939,15940,16033,16270,16291,16518,16521,16574,16609],"fullWord":16521},{"subwords":[325,932,950,957,973,8362,12675,12677,12810,16033,16522,16523,17294,17297,17434],"fullWord":16523},{"subwords":[200,325,399,407,932,934,4466,4467,4543,4601,4603,4614,4728,4826,5756,5760,8217,8219,8258,8259,8262,8362,8440,8443,8445,8448,8509,10090,10093,10099,10107,10227,10231,10232,10324,10327,10331,10360,10365,10378,15893,15942,15948,16270,16274,16503,16504,16524,16525,16574,16581,17044],"fullWord":16525},{"subwords":[325,399,407,932,936,973,6039,8258,8262,8362,8370,8445,8448,10230,10231,10234,10236,10324,10360,10365,10453,15942,15948,15950,16033,16270,16274,16277,16291,16524,16526,16574,16609,17021],"fullWord":16526},{"subwords":[325,470,487,932,8276,8279,8290,8296,8362,10136,10161,10181,10231,10738,10740,11173,11265,11330,11335,11813,12806,12808,12810,12872,15942,15973,16528,16531,16664,16667,17012,17354,17378],"fullWord":16528},{"subwords":[0,2,317,325,504,505,506,596,932,940,8290,8296,8362,11213,11216,11247,11330,11335,12244,12283,15973,15986,16531,16532],"fullWord":16532},{"subwords":[200,319,320,325,932,934,4472,4475,4476,4489,4543,4614,4826,5658,5845,8217,8219,8290,8296,8362,8440,8443,8532,8539,11107,11115,11123,11330,11335,11336,11437,11438,11440,11453,11560,11563,15893,15973,15978,16270,16278,16503,16504,16531,16533,16534,16574,16581],"fullWord":16534},{"subwords":[319,320,325,932,936,973,5845,6039,8290,8296,8362,8532,8539,11330,11335,11338,11348,11351,11437,11453,11560,11561,11563,11569,12082,15973,15978,16033,16270,16278,16283,16291,16531,16533,16535,16537,16574,16609,17160],"fullWord":16535},{"subwords":[325,932,944,8290,8294,8296,8362,8420,8428,11330,11335,11340,11408,11424,15973,16103,16531,16536,16572,16758,21051,21055],"fullWord":16536},{"subwords":[325,586,932,973,8290,8296,8362,8970,8988,11330,11335,11348,12082,12158,12173,15973,16033,16531,16537,16538,17160,18103,18116,19592,19871],"fullWord":16538},{"subwords":[325,651,652,932,950,957,973,987,8310,8314,8362,9876,9877,15986,16007,16009,16033,16539,16540],"fullWord":16540},{"subwords":[325,647,691,693,700,704,711,932,8318,8362,8371,8378,8391,8660,8663,8678,8679,8685,8688,8691,8935,9307,9318,9325,9447,12463,12471,12612,15936,15938,15986,16041,16047,16541,16559,16629,16653,16858,16874,16907,17255,17742,18347,18408,18428,18684,18686,18731,18738,18742,18894,18919,18947],"fullWord":16541},{"subwords":[325,693,711,716,932,944,8318,8362,8371,8377,8378,8391,8420,8428,8935,12286,12311,12312,12612,15986,16041,16103,16542,16559,16572,16758,17802,18018,18408,18428,18429,18686,18806],"fullWord":16542},{"subwords":[200,325,732,733,739,779,932,934,961,4543,4614,4826,5956,6033,8217,8219,8321,8324,8362,8367,8368,8440,8443,8450,8452,8549,13171,13177,13336,13439,13461,13478,13488,13643,13644,15893,16014,16270,16503,16504,16543,16544,16574,16581,17476,17481,17530],"fullWord":16544},{"subwords":[325,732,735,737,739,775,779,817,825,905,906,932,961,966,5588,5599,5956,5976,5977,6033,8321,8324,8333,8338,8351,8354,8362,8367,8450,8452,8453,8456,8549,8552,8584,8934,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,13643,13645,13677,14262,14281,14403,14775,14851,14852,14856,14866,14881,14886,14891,14979,14982,15248,15272,15305,15376,15377,16014,16270,16286,16419,16422,16543,16545,16549,16556,16574,16577,16607,17476,17494,17495,17523],"fullWord":16545},{"subwords":[325,732,739,779,780,932,936,961,972,973,5956,6033,6039,8321,8324,8362,8367,8369,8450,8452,8549,13336,13342,13344,13345,13439,13461,13643,13646,16014,16020,16033,16270,16291,16543,16546,16574,16609,17476,17507],"fullWord":16546},{"subwords":[200,325,905,932,973,4543,8217,8327,8331,8362,8934,14736,14751,14775,14886,15893,16033,16503,16509,16547,16548],"fullWord":16548},{"subwords":[200,325,817,825,905,906,932,934,4516,4520,4543,4545,4607,4611,4614,4810,4826,5588,5599,5976,5977,8217,8219,8327,8331,8333,8334,8338,8362,8440,8443,8453,8454,8456,8552,8558,8561,8584,8934,14736,14751,14775,14881,14882,14886,14961,14965,15060,15087,15376,15377,15893,16270,16286,16419,16503,16504,16506,16547,16549,16550,16574,16577,16581,16604,16722],"fullWord":16550},{"subwords":[325,817,825,905,906,932,5588,5599,5976,5977,6008,6016,8333,8338,8362,8453,8456,8552,8583,8584,8934,14775,14872,14881,14883,14886,14887,14983,14988,15376,15377,16270,16286,16419,16549,16551,16574,16577],"fullWord":16551},{"subwords":[325,817,825,905,906,907,932,936,973,5588,5599,5976,5977,6039,8333,8338,8362,8453,8456,8552,8584,8934,14775,14881,14885,14886,14888,15376,15377,16033,16270,16286,16290,16291,16419,16549,16552,16574,16577,16578,16609],"fullWord":16552},{"subwords":[325,349,359,828,905,932,6254,6259,6308,6621,6636,6642,8245,8248,8362,8678,8934,9135,9376,9409,14775,14886,16028,16553,16889,17722],"fullWord":16553},{"subwords":[325,867,868,905,932,950,957,973,8340,8343,8362,8934,14775,14886,16033,16554,16555],"fullWord":16555},{"subwords":[325,905,932,961,972,973,8321,8324,8351,8354,8362,8367,8369,8934,13286,13321,13336,13344,14403,14775,14851,14866,14886,14891,14894,16014,16020,16033,16556,16557,17476,17494,17504,17507],"fullWord":16557},{"subwords":[325,905,932,944,961,8321,8324,8351,8354,8355,8362,8367,8420,8428,8934,13286,13321,13336,13424,13436,13681,14258,14261,14403,14410,14775,14851,14866,14886,14891,14895,14939,14944,15864,15865,16014,16103,16556,16558,16572,16758,17476,17494,17518,17655,17672,17697,21064,21067,21212],"fullWord":16558},{"subwords":[200,204,325,932,934,1106,1114,4543,4569,4614,4826,4851,4852,8217,8219,8362,8400,8405,8440,8443,15893,16076,16077,16270,16503,16504,16560,16561,16574,16581,19910,19967,19990],"fullWord":16561},{"subwords":[325,932,935,1106,1114,5918,6091,8362,8400,8401,8402,8405,8540,8547,12229,12305,12308,15986,15995,16076,16270,16560,16562,16574,19948,19950,19952,19957,19967],"fullWord":16562},{"subwords":[325,817,825,905,906,932,1106,1109,1110,1114,5588,5599,5976,5977,8333,8338,8362,8400,8403,8404,8405,8453,8456,8552,8584,8934,14775,14881,14886,14921,14929,15337,15354,15376,15377,16076,16078,16270,16286,16419,16549,16560,16563,16574,16577,19967,20070,20071],"fullWord":16563},{"subwords":[325,932,936,973,1106,1114,6039,8362,8400,8405,16033,16076,16080,16270,16291,16560,16564,16574,16609,19967,19968],"fullWord":16564},{"subwords":[200,325,932,934,1145,1147,1150,4543,4574,4614,4826,4865,4873,8217,8219,8362,8409,8410,8416,8417,8440,8443,8588,8594,15893,16089,16090,16270,16475,16503,16504,16565,16574,16581,16610,20303,20309,20313,20318,20449,20450,20451,20524,20531,20599],"fullWord":16565},{"subwords":[325,932,973,1155,1157,8362,8409,8416,10231,10236,10292,10299,15942,16033,16089,16096,16566,16567,16571,17021,17037,17038,18210,20449,20450,20599],"fullWord":16567},{"subwords":[325,932,973,8290,8296,8362,8409,8416,11330,11335,11348,11399,11400,12082,15973,16033,16089,16096,16531,16537,16568,16569,16571,17160,18189,18210,20449,20450,20599,20607,20609],"fullWord":16569},{"subwords":[325,932,936,973,6039,6338,6479,8362,15904,15907,16033,16270,16291,16574,16575,16576,16609],"fullWord":16576},{"subwords":[325,817,825,905,906,907,932,936,973,5588,5599,5976,5977,6039,8333,8338,8362,8453,8456,8552,8584,8934,14775,14881,14885,14886,14888,15376,15377,16033,16270,16286,16290,16291,16419,16549,16552,16574,16577,16578,16609],"fullWord":16578},{"subwords":[325,932,1009,5616,5620,5626,6055,8228,8239,8240,8362,8363,8371,8373,8378,8381,8385,8387,8391,8461,8464,8465,8467,8586,8935,16041,16043,16270,16293,16457,16516,16559,16574,16579,18541,18559,18697],"fullWord":16579},{"subwords":[325,932,1106,1114,5605,5629,5631,6092,6104,8362,8400,8405,8468,8472,8483,16076,16270,16319,16560,16574,16580,19967,19992,20000],"fullWord":16580},{"subwords":[5918,6031,6039,6042,8483,8540,8547,12339,12367,16319,16335,16342,16394,16574,16583,16584,16609],"fullWord":16584},{"subwords":[5918,6189,6198,8483,8540,8547,8607,12339,16319,16335,16574,16583,16585,16758,18287,21120,21122,21130],"fullWord":16585},{"subwords":[5984,6031,6039,6042,8483,8552,8562,8568,8584,8934,16319,16340,16341,16342,16425,16429,16574,16587,16588,16609],"fullWord":16588},{"subwords":[6031,6039,6042,8483,8586,8935,16319,16342,16457,16464,16574,16589,16590,16609,18576,18588,18697,18698,18716,18717],"fullWord":16590},{"subwords":[8625,8628,8636,8639,8678,16574,16591,16592,16823,16954],"fullWord":16592},{"subwords":[6039,8625,8628,8636,8639,8678,8681,9941,16574,16591,16593,16609,16619,16823,16824,16903,16954,16962,16985],"fullWord":16593},{"subwords":[325,337,340,362,399,407,932,5769,8241,8244,8258,8262,8362,8445,8448,8500,8502,8625,8628,8678,9416,10231,10324,10360,10365,10414,10415,10536,10551,15931,15942,15948,16270,16274,16524,16574,16594],"fullWord":16594},{"subwords":[5691,5693,5740,5742,5778,5779,5790,8483,8488,8491,9812,9815,10383,10386,10387,10392,10416,10417,10451,16319,16326,16574,16595,17047],"fullWord":16595},{"subwords":[5780,5781,6039,8513,8518,10453,16368,16370,16574,16597,16598,16609],"fullWord":16598},{"subwords":[5780,5781,8513,8518,8607,10495,10496,11065,11066,16368,16574,16597,16599,16758,17149,21110,21114,21130],"fullWord":16599},{"subwords":[5691,5693,5790,5798,6092,6104,8483,8488,8491,8529,8531,10383,10392,10451,10471,16319,16574,16600,19992,20000],"fullWord":16600},{"subwords":[8607,10471,10489,10495,10496,11065,11066,16574,16601,16758,17149,21130],"fullWord":16601},{"subwords":[6039,8725,8730,8754,8757,8881,8883,10443,10447,10453,10787,10888,10891,10893,12810,12845,12848,16574,16602,16603,16609,16676,16680,17097,17098,17111,17354,17359,17363,17434],"fullWord":16603},{"subwords":[4810,4826,5358,6039,8552,8558,8561,8584,8934,15060,15087,16574,16581,16582,16604,16605,16609,16722,16723],"fullWord":16605},{"subwords":[6543,6621,6622,6626,6636,6642,6644,7071,7085,8503,8505,8552,8584,8625,8628,8672,8676,8678,8934,9135,9384,9389,9409,15114,15134,15446,15526,16431,16437,16574,16606,16617,16642,16889,16890,17722],"fullWord":16606},{"subwords":[325,732,735,737,739,775,779,817,825,905,906,932,961,966,5588,5599,5956,5976,5977,6033,8321,8324,8333,8338,8351,8354,8362,8367,8450,8452,8453,8456,8549,8552,8584,8934,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13577,13643,13645,13677,14262,14281,14403,14775,14851,14852,14856,14866,14881,14886,14891,14979,14982,15248,15272,15305,15376,15377,16014,16270,16286,16419,16422,16543,16545,16549,16556,16574,16577,16607,17476,17494,17495,17523],"fullWord":16607},{"subwords":[6008,6016,8552,8583,8584,8607,8934,15866,15867,16574,16608,16758,16759,21130,21212],"fullWord":16608},{"subwords":[4680,4826,4865,4873,6118,6121,8483,8484,8486,8588,8589,8594,16319,16320,16475,16477,16574,16581,16610,16611,18225,20524,20531,20532,20533,20536,20623],"fullWord":16611},{"subwords":[5984,6118,6119,6120,6121,8483,8552,8562,8568,8584,8588,8590,8591,8594,8934,15292,16319,16340,16425,16475,16478,16574,16587,16610,16612,16724,20532,20587,20623,20639,20640],"fullWord":16612},{"subwords":[4714,4728,4738,4739,4742,4826,4935,4939,5037,5046,5756,5760,5769,8500,8502,8509,8617,8619,8623,8625,8626,8628,8678,9111,9117,9121,9127,9416,9417,10378,10414,10415,10530,10535,10536,10537,10551,16574,16581,16615,16616,16780,16784,17044,17068,17069],"fullWord":16616},{"subwords":[6039,8503,8505,8552,8584,8625,8628,8672,8676,8678,8681,8683,8934,9384,9389,9409,15526,15530,16574,16609,16617,16618,16619,16642,16643,16889,16890,16895,16899,16903,17722],"fullWord":16618},{"subwords":[6039,8506,8507,8586,8625,8628,8678,8681,8685,8687,8688,8691,8935,9447,16457,16464,16574,16609,16619,16620,16651,16653,16654,16903,16907,16911,16913,16915,17857,18697,18718,18742,18844,18850,18947],"fullWord":16620},{"subwords":[6642,6647,6650,6651,6654,8678,8681,8685,8687,8688,8691,8935,9135,9447,16621,16622,16651,16653,16654,16801,16804,16903,16907,16915,18742,18947],"fullWord":16622},{"subwords":[6642,6646,6647,6651,6654,8678,8685,8688,8691,8935,9135,9447,16621,16623,16653,16758,16801,16907,18018,18742,18806,18947],"fullWord":16623},{"subwords":[325,932,950,957,973,8362,8678,8681,9941,15941,16033,16624,16823,16824,16903,16954,16985],"fullWord":16624},{"subwords":[8640,8643,8678,8681,9152,9155,16625,16626,16834,16835,16903],"fullWord":16626},{"subwords":[4985,5007,5037,5046,5049,8617,8649,8652,8678,8679,9127,9307,16629,16630,16638,16758,16858,16874,21096,21140,21141,21144,21145],"fullWord":16630},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5037,5046,5865,5875,5918,8540,8547,8617,8619,8623,8625,8626,8628,8649,8652,8678,8679,9111,9127,9307,16381,16574,16581,16615,16629,16631,16632,16780,16858,16860,16874,17243],"fullWord":16632},{"subwords":[5918,5996,6000,8503,8505,8540,8547,8552,8584,8625,8628,8672,8676,8678,8679,8934,9307,9384,9389,9409,15175,15177,15296,15383,15500,15526,15527,16439,16574,16617,16629,16631,16633,16642,16732,16858,16860,16874,16889,16890,16893,17722],"fullWord":16633},{"subwords":[5918,6039,8540,8547,8625,8628,8678,8679,8681,9307,12367,16574,16609,16619,16629,16631,16634,16636,16858,16860,16861,16874,16875,16881,16903],"fullWord":16634},{"subwords":[8659,8678,8679,9297,9302,9307,16629,16635,16638,16758,16858,16874,21144,21145],"fullWord":16635},{"subwords":[8660,8663,8678,8679,8685,8688,8691,8739,8741,8789,8887,8892,8901,8935,9307,9318,9325,9335,9360,9366,9447,12463,12471,12560,12565,12574,12591,12612,12810,16629,16637,16653,16704,16858,16874,16907,17255,17278,17383,17435,18731,18738,18742,18743,18894,18919,18947,19036,19057,19123],"fullWord":16637},{"subwords":[6039,8503,8505,8552,8584,8625,8628,8672,8676,8678,8681,8683,8934,9384,9389,9409,15526,15530,16574,16609,16617,16618,16619,16642,16643,16889,16890,16895,16899,16903,17722],"fullWord":16643},{"subwords":[8678,8681,8934,9396,9399,9409,9941,10041,15534,15537,16644,16645,16823,16824,16889,16899,16903,16954,16985,17722],"fullWord":16645},{"subwords":[8678,8681,8934,9409,16646,16647,16889,16899,16903,17722],"fullWord":16647},{"subwords":[8678,8681,8685,8687,8688,8691,8934,8935,9409,9447,16648,16649,16651,16653,16654,16889,16899,16903,16907,16915,17722,17881,17882,18742,18947],"fullWord":16649},{"subwords":[8678,8685,8688,8691,8934,8935,9409,9447,16648,16650,16653,16758,16889,16907,17722,17881,18018,18742,18806,18947,19377,21212],"fullWord":16650},{"subwords":[8678,8681,8685,8687,8688,8691,8935,9447,16651,16652,16653,16654,16903,16907,16915,18742,18947],"fullWord":16652},{"subwords":[325,932,1124,8239,8240,8362,8363,8678,16516,16655,16656,16657,20107,20115,20191],"fullWord":16657},{"subwords":[325,932,973,1124,8362,8678,8681,16033,16655,16656,16658,16661,16903,20107,20115,20191,20195],"fullWord":16658},{"subwords":[8503,8505,8552,8584,8625,8628,8672,8676,8678,8693,8694,8934,9384,9389,9409,15337,15354,15526,15549,15554,16574,16617,16642,16655,16659,16660,16734,16889,16890,17722,20070,20129,20132,20133,20134,20197],"fullWord":16660},{"subwords":[3701,3944,8714,8715,8719,10011,10012,10760,10765,10766,10768,10772,12810,16663,16672,17316,17319,17354],"fullWord":16663},{"subwords":[5845,6039,8532,8539,8725,8730,8775,8780,8881,8883,11563,11569,11996,12002,12082,12806,12808,12810,12872,16574,16609,16664,16665,16676,16680,17382,17434],"fullWord":16665},{"subwords":[325,932,961,972,973,987,8321,8324,8362,8367,8369,12257,12269,13239,13259,13336,13344,15986,16009,16014,16020,16033,16666,17220,17222,17476,17490,17493,17507],"fullWord":16666},{"subwords":[325,487,932,973,8276,8279,8362,10181,10231,10236,10239,10893,12810,15942,16033,16667,16668,17021,17111,17354,17434],"fullWord":16668},{"subwords":[324,325,487,932,944,8276,8279,8362,8420,8428,8772,10181,10231,10304,10313,12810,15942,16103,16530,16572,16667,16669,16758,17039,17149,17354,17472,17473],"fullWord":16669},{"subwords":[325,932,973,990,8362,8371,8378,8391,8887,8891,8892,8901,8935,12685,12686,12690,12691,12692,12810,16033,16041,16559,16670,16671,16704,16707,17434,17435,17436,17786,17885,17886,18432,18435,18487,18743,19123,19125],"fullWord":16671},{"subwords":[3944,8714,8715,8719,12810,16672,16673,17316,17319,17322,17434],"fullWord":16673},{"subwords":[5221,8721,8724,12745,12751,12810,16674,16675,16758,17323,17328,17472,21096,21154,21157],"fullWord":16675},{"subwords":[6004,6039,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8877,8881,8883,8934,12810,12979,12982,13007,15386,15610,15611,15676,15679,16574,16609,16676,16678,16679,16680,16697,16699,17419,17424,17434],"fullWord":16679},{"subwords":[7759,7760,7871,8151,8160,8166,8731,8737,8789,8951,8958,8989,8990,8997,12509,12512,12560,12565,12597,12810,12888,16681,16748,17292,17383,17389,17439,18117,18125,19583,19584,19592],"fullWord":16681},{"subwords":[8678,8681,8739,9649,9654,12810,16682,16683,16903,17434],"fullWord":16683},{"subwords":[8786,8787,10833,10842,10844,10854,11921,11941,12806,12808,12809,12810,12872,12895,12898,13024,16664,16684,16686,17354,17370],"fullWord":16684},{"subwords":[4826,5114,5117,5221,5223,8721,8724,8725,8726,8730,8813,8815,8881,8882,12752,12755,12802,12809,12810,12895,12896,12898,16574,16581,16674,16676,16677,16686,16687,17323],"fullWord":16687},{"subwords":[8821,8828,12809,12810,12895,12898,16686,16688,16689,16690,17434],"fullWord":16689},{"subwords":[8838,8842,8887,8891,8892,8901,8935,12809,12810,12895,12898,16686,16690,16691,16692,16704,16707,17399,17401,17403,17404,17434,17435,17436,18743,19060,19123,19125],"fullWord":16692},{"subwords":[6033,8549,8725,8730,8845,8846,8850,8856,8881,8886,12810,12916,12925,12933,12936,13569,13573,13607,14130,14131,14133,14144,14166,14172,16574,16676,16693,16694,16695,17406,17407],"fullWord":16695},{"subwords":[4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,8552,8558,8561,8575,8581,8584,8721,8724,8725,8726,8728,8729,8730,8857,8864,8866,8874,8875,8876,8881,8882,8934,12752,12755,12802,12810,12979,12982,13007,15060,15078,15081,15087,15386,15387,15600,15603,15609,15610,15611,15676,15677,16574,16581,16604,16674,16676,16677,16678,16697,16698,16722,17323,17419],"fullWord":16698},{"subwords":[6004,6039,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8877,8881,8883,8934,12810,12979,12982,13007,15386,15610,15611,15676,15679,16574,16609,16676,16678,16679,16680,16697,16699,17419,17424,17434],"fullWord":16699},{"subwords":[8857,8874,8879,8887,8891,8892,8901,8934,8935,12810,13007,13008,13009,13011,15386,15691,15700,16701,16702,16704,16707,17429,17433,17434,17435,17436,18743,18749,18777,19093,19113,19123,19125],"fullWord":16702},{"subwords":[8857,8874,8879,8880,8887,8892,8901,8934,8935,12810,13007,13008,13009,13011,15386,15690,15691,15700,16701,16703,16704,16758,17429,17435,17472,17933,18018,18743,18749,18777,18806,19093,19113,19122,19123,19186,19195,19347,19348,19377,19573,19574,21212],"fullWord":16703},{"subwords":[6039,6071,8586,8725,8730,8881,8883,8887,8891,8892,8901,8935,12810,16457,16464,16574,16609,16676,16680,16704,16705,16706,16707,17434,17435,17436,18697,18743,18758,18981,18985,19123,19124,19125],"fullWord":16706},{"subwords":[5221,5523,5524,8721,8724,8749,8752,10906,11039,12810,12837,12844,16674,16708,16746,17323,17354,17357,17442,19592],"fullWord":16708},{"subwords":[8887,8891,8892,8901,8935,9026,9027,12810,13055,13058,13059,13082,16704,16707,16709,16710,16753,16757,17434,17435,17436,17460,17461,18743,18759,18762,18802,19123,19125,19486,19592],"fullWord":16710},{"subwords":[4826,5114,5117,5221,5223,5267,5269,8721,8724,8725,8726,8730,8881,8882,8915,12752,12755,12802,12810,16574,16581,16674,16676,16677,16711,16712,17323],"fullWord":16712},{"subwords":[8725,8730,8754,8757,8881,8915,8916,8917,10443,10447,10471,10488,10888,10935,10940,12810,12845,12848,16574,16602,16676,16711,16713,17097,17354,17359,17374,20250,20251,20252],"fullWord":16713},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8915,8918,8919,8934,12810,12979,12982,13007,13095,13099,15337,15354,15386,15610,15611,15676,15728,15732,16453,16574,16676,16678,16697,16711,16714,16736,17419,20070,20077],"fullWord":16714},{"subwords":[6039,8725,8730,8881,8883,8915,12810,16574,16609,16676,16680,16711,16715,17434],"fullWord":16715},{"subwords":[4826,4865,4873,4885,4886,5114,5117,5221,5223,5282,5283,8588,8594,8721,8724,8725,8726,8730,8881,8882,8920,8923,8924,8930,12752,12755,12802,12810,13110,13111,13112,16475,16574,16581,16610,16674,16676,16677,16716,16717,17323,17464,17465,20524,20531,20689,20707,20875,20877],"fullWord":16717},{"subwords":[6004,8552,8575,8581,8584,8588,8594,8725,8728,8729,8730,8857,8874,8875,8881,8920,8923,8924,8930,8934,12810,12979,12982,13007,13110,13112,15302,15386,15610,15611,15676,15734,15744,16445,16475,16574,16610,16676,16678,16697,16716,16718,16724,17419,17464,17466,18272,20689,20702,20704,20707,20875,20877,20933,20947],"fullWord":16718},{"subwords":[8845,8856,8886,8920,8930,9002,12810,12936,12945,14172,14229,14233,14551,14552,16693,16716,16720,17406,17407,17447,17464,18135,18268,19592,19825,20689,20701,20927,20928],"fullWord":16720},{"subwords":[325,651,652,867,868,905,932,950,8310,8314,8340,8343,8362,8934,9876,9877,12277,12279,14775,14821,14840,14845,14886,15986,16007,16539,16554,16721,17227],"fullWord":16721},{"subwords":[4810,4826,5358,6039,8552,8558,8561,8584,8934,15060,15087,16574,16581,16582,16604,16605,16609,16722,16723],"fullWord":16723},{"subwords":[4810,4826,4865,4873,5361,8552,8558,8561,8584,8588,8594,8934,15060,15087,16475,16574,16581,16604,16610,16722,16724,16725,20524,20531],"fullWord":16725},{"subwords":[6039,8552,8584,8588,8594,8934,16475,16482,16574,16609,16610,16614,16724,16726],"fullWord":16726},{"subwords":[8503,8505,8552,8584,8625,8628,8636,8637,8638,8639,8672,8676,8678,8934,9384,9389,9396,9399,9409,10041,15526,15534,16574,16591,16617,16642,16644,16727,16729,16823,16889,16890,16954,16960,17722],"fullWord":16727},{"subwords":[6621,6636,6637,6639,6640,6642,6647,6651,6654,8678,8685,8688,8691,8934,8935,9135,9409,9447,15458,15460,16621,16648,16653,16728,16801,16889,16907,17722,17881,18742,18947],"fullWord":16728},{"subwords":[8503,8505,8552,8584,8625,8628,8636,8637,8638,8639,8672,8676,8678,8934,9384,9389,9396,9399,9409,10041,15526,15534,16574,16591,16617,16642,16644,16727,16729,16823,16889,16890,16954,16960,17722],"fullWord":16729},{"subwords":[8640,8643,8678,8934,9152,9155,9409,15477,15479,16625,16730,16834,16889,17722],"fullWord":16730},{"subwords":[8648,8664,8671,8678,8934,9178,9196,9409,9422,12079,13651,13841,14313,14326,14339,14403,14421,15480,15489,15508,15524,15747,16627,16639,16731,16853,16883,16889,17722],"fullWord":16731},{"subwords":[5918,5996,6000,8503,8505,8540,8547,8552,8584,8625,8628,8672,8676,8678,8679,8934,9307,9384,9389,9409,15175,15177,15296,15383,15500,15526,15527,16439,16574,16617,16629,16631,16633,16642,16732,16858,16860,16874,16889,16890,16893,17722],"fullWord":16732},{"subwords":[8678,8679,8934,9276,9284,9307,9396,9399,9409,9913,9929,9984,10041,15498,15499,15534,16629,16644,16733,16823,16858,16874,16876,16889,16954,16974,17722],"fullWord":16733},{"subwords":[8503,8505,8552,8584,8625,8628,8672,8676,8678,8693,8694,8934,9384,9389,9409,15337,15354,15526,15549,15554,16574,16617,16642,16655,16659,16660,16734,16889,16890,17722,20070,20129,20132,20133,20134,20197],"fullWord":16734},{"subwords":[5216,5221,5260,5523,5524,8721,8724,8857,8874,8906,8910,8934,12810,13007,13051,13052,15386,15600,15609,15842,16674,16735,17323,17451,18060,19592,19846],"fullWord":16735},{"subwords":[6004,8552,8575,8581,8584,8725,8728,8729,8730,8857,8874,8875,8881,8915,8918,8919,8934,12810,12979,12982,13007,13095,13099,15337,15354,15386,15610,15611,15676,15728,15732,16453,16574,16676,16678,16697,16711,16714,16736,17419,20070,20077],"fullWord":16736},{"subwords":[2496,2610,2656,2668,2673,2687,8934,8936,8940,15749,15764,15842,16737,16738,18035,18043,19592,19840,19844,19886],"fullWord":16738},{"subwords":[8166,8934,8951,8958,15790,15794,15842,16739,16740,19583,19584,19592,19886],"fullWord":16740},{"subwords":[8934,8989,8993,8995,8997,9019,15821,15832,15842,15848,16741,16748,18117,18126,19592,19866,19867],"fullWord":16741},{"subwords":[8586,8935,10459,10460,10465,16457,16574,16742,17846,18662,18697],"fullWord":16742},{"subwords":[3272,3328,3331,3429,4238,4241,8612,8614,8616,8678,8685,8688,8691,8935,9440,9447,9945,9946,9952,9953,9955,9956,16178,16653,16743,16769,16772,16823,16907,16954,16986,17853,18725,18726,18742,18823,18824,18829,18830,18947],"fullWord":16743},{"subwords":[4370,8941,8942,9019,9022,16744,16745,18050,18051,18055,19592],"fullWord":16745},{"subwords":[8935,8989,8997,8998,9001,9026,9027,12612,12659,12663,16748,16749,16750,16751,16753,16757,18005,18008,18117,18130,18802,19434,19452,19486,19592],"fullWord":16751},{"subwords":[4826,4849,5471,5478,5479,5480,5548,8586,8935,8945,8946,8947,9026,9027,16457,16574,16581,16753,16754,16755,17999,18066,18067,18074,18575,18697,18794,18795,18802,19486,19487,19592,19876,19877],"fullWord":16755},{"subwords":[6039,8586,8935,8945,8947,9026,9027,16457,16464,16574,16609,16753,16754,16756,16757,18066,18073,18074,18075,18697,18802,19486,19488,19592,19876,19882],"fullWord":16756},{"subwords":[6039,8552,8584,8607,8934,15866,15867,16574,16609,16758,16759,16760,21130,21212],"fullWord":16760},{"subwords":[6039,8586,8607,8935,16457,16464,16574,16609,16758,16761,18018,18019,18021,18697,18724,18806,21130,21135],"fullWord":16761},{"subwords":[7604,7611,8678,8679,9044,9307,12429,12432,16629,16638,16758,16762,16805,16815,16858,16866,16874,21144,21145],"fullWord":16762},{"subwords":[1964,10323,10504,10516,16765,16766,16767,16768,16903,17149],"fullWord":16768},{"subwords":[4639,4714,4826,4909,4913,4935,4939,5037,5040,6023,9079,9082,9085,9111,9127,16178,16298,16769,16770,16780],"fullWord":16770},{"subwords":[9091,9101,16178,16179,16769,16771,17149],"fullWord":16771},{"subwords":[4639,4651,4655,4714,4826,4835,4909,4913,4917,4921,4935,4939,4957,4961,5037,5040,5050,6023,9079,9082,9085,9111,9127,9885,9894,16178,16298,16769,16772,16773,16780,16954,16955,16959],"fullWord":16773},{"subwords":[3413,3415,5856,5918,6023,9079,9085,9207,9276,9284,9307,9836,9843,9913,9919,9921,9929,12335,12337,12410,12418,12423,16178,16298,16769,16772,16774,16858,16859,16860,16876,16948,16954,16974,17241],"fullWord":16774},{"subwords":[4158,6023,9079,9085,9094,9384,9389,9396,9399,9409,10041,15021,15037,15048,15411,15415,15422,15425,15526,15534,16178,16298,16769,16772,16775,16889,16890,16954,16960,17722],"fullWord":16775},{"subwords":[3120,3123,5778,5779,6023,9079,9085,9150,9151,9416,10414,10415,10416,10417,10518,10525,10528,10536,10551,10566,10573,16178,16179,16298,16769,16772,16776,16829,16954,17062,17066],"fullWord":16776},{"subwords":[9096,9101,9150,9151,10525,10528,16178,16179,16769,16772,16777,16829,16833,16954,16992,17066,17149],"fullWord":16777},{"subwords":[4947,4956,4985,4993,4999,5007,5037,7460,7604,7611,9127,9138,9307,12462,16783,16815,16858,16866],"fullWord":16783},{"subwords":[4714,4728,4739,4742,4826,4928,4935,4936,4939,5037,5756,5760,9111,9117,9118,9121,9127,9416,9417,10378,10414,10415,10530,10535,10536,10537,10551,16780,16781,16784,16785,17044,17068,17069],"fullWord":16785},{"subwords":[4714,4728,4739,4742,4810,4826,4935,4939,5023,5037,5367,5756,5760,9111,9117,9119,9120,9121,9127,9384,9385,9389,9409,9416,9417,10378,10414,10415,10530,10535,10536,10537,10549,10550,10551,10677,15060,15087,15428,15433,15436,15443,15444,15445,15473,15474,15475,15526,16780,16784,16786,16889,16890,16891,17044,17068,17069,17070,17072,17722],"fullWord":16786},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5756,5760,6039,9111,9117,9121,9127,9416,9417,9418,10378,10414,10415,10453,10530,10535,10536,10537,10551,16780,16782,16784,16787,16903,17044,17046,17068,17069,17071],"fullWord":16787},{"subwords":[4714,4774,4785,4795,4826,4935,4939,4985,4988,4992,5007,5037,5056,5567,5572,5579,5580,5865,5875,5918,9111,9127,9307,16381,16780,16788,16858,16860,17243,18287,21096,21120,21122,21130,21140,21141,21144,21145],"fullWord":16788},{"subwords":[3119,3120,3123,5691,5693,5790,6023,9079,9085,9416,10383,10392,10414,10415,10451,10518,10536,10551,16178,16179,16298,16319,16769,16789,17062],"fullWord":16789},{"subwords":[4680,4714,4826,4935,4939,4947,4956,5037,5667,5671,5716,7460,7467,7468,7473,9108,9111,9127,16313,16319,16320,16351,16780,16790,16791],"fullWord":16791},{"subwords":[5716,5717,6031,6039,6042,7467,7473,16319,16342,16351,16790,16792,16903],"fullWord":16792},{"subwords":[647,648,657,663,665,691,5918,9200,9202,9297,9302,9307,9308,12229,12252,12448,12449,15986,15995,16270,16389,16793,16858,16860],"fullWord":16793},{"subwords":[349,352,359,817,825,858,863,905,906,5588,5599,5976,5977,6008,6016,9376,9384,9389,9409,14788,14790,14872,14881,14883,14983,14988,15526,15528,16028,16270,16286,16419,16794,16889,16890,17722],"fullWord":16794},{"subwords":[973,982,990,1009,5616,5618,5620,5626,6039,6055,9447,16041,16043,16046,16270,16291,16293,16296,16457,16464,16795,16903,16907,16911,16913,16915,17857,18347,18487,18541,18559,18844,18850,18947],"fullWord":16795},{"subwords":[6039,9384,9389,9409,9431,9433,15526,15530,15540,15777,15782,15840,15841,15849,16796,16797,16889,16890,16895,16899,16903,17722,18066,18071,18072,18073,18083,18150,19876,19880,19881,19882,19886],"fullWord":16797},{"subwords":[4680,4714,4826,4858,4935,4939,5037,5071,5076,6092,6104,9108,9111,9127,16319,16320,16780,16798,16799,19992,20000,20126,20129,20130,20134,20197,20198],"fullWord":16799},{"subwords":[6031,6039,6042,6092,6104,16319,16342,16798,16800,16903,19992,20000,20129,20134,20197,20199],"fullWord":16800},{"subwords":[4701,4714,4724,4826,4935,4939,4942,4945,5037,5063,5680,5684,5705,5706,6406,6408,6425,6492,6537,6539,6542,6543,6647,6648,6651,6654,9111,9127,9135,9447,16457,16780,16801,16802,16907,16911,16912,17856,18575,18835,18837,18844,18845,18850,18947],"fullWord":16802},{"subwords":[5705,5706,6018,6425,6543,6621,6622,6626,6636,6637,6647,6651,6654,7073,7074,7085,9135,9384,9389,9409,9447,15114,15124,15125,15134,15135,15306,15312,15446,15449,15458,15460,15526,15542,15543,15748,16431,16437,16457,16801,16803,16889,16890,16907,16911,17722,17881,17971,18844,18847,18849,18850,18941,18943,18947,19243,19277],"fullWord":16803},{"subwords":[4714,4826,4935,4939,4947,4956,5037,5046,5716,7460,8617,8619,8623,8625,8626,8628,8678,9111,9127,16574,16581,16615,16780,16805,16806],"fullWord":16806},{"subwords":[5716,5988,5992,8503,8505,8552,8584,8625,8628,8672,8676,8678,8934,9384,9389,9409,15141,15461,15472,15526,16574,16617,16642,16805,16807,16889,16890,17722],"fullWord":16807},{"subwords":[7635,7636,7637,8678,8681,8685,8687,8688,8691,8935,9447,16651,16653,16654,16805,16808,16809,16810,16903,16907,16915,18742,18947],"fullWord":16810},{"subwords":[7712,10793,10811,10893,12812,12822,16812,16837,16839,16903,17099,17101,17350,17352,17354,17364,17434],"fullWord":16812},{"subwords":[341,347,555,557,973,7317,7342,7396,9422,9423,11127,11132,11140,11330,11348,11649,11654,11774,12081,12082,15910,15923,15973,16764,16813,16814,16903],"fullWord":16814},{"subwords":[287,337,340,416,417,426,427,639,647,691,7283,7287,7293,7316,7396,7585,7604,7611,7660,9307,10109,10115,10120,10235,10637,10639,10642,10654,12230,12233,12238,12241,12438,12442,15910,15931,15942,15986,16001,16815,16816,16858,16866,17003,17006,17014,17083,17211,17214],"fullWord":16816},{"subwords":[4714,4720,4721,4774,4785,4826,4832,4935,4939,4947,4956,4985,4988,4992,4993,4999,5007,5037,5716,5865,5875,5918,7460,7493,7511,7604,7611,9111,9127,9307,16381,16780,16815,16817,16858,16860,16866,16867,16868,17243],"fullWord":16817},{"subwords":[5716,5918,7467,7473,7493,7496,7498,7503,7504,7511,7604,7611,9307,12339,16319,16325,16335,16351,16352,16790,16815,16818,16858,16860,16866,16867],"fullWord":16818},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":16819},{"subwords":[5716,5918,7493,7511,7512,7517,7540,7541,7604,7611,7635,7637,9264,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16815,16820,16858,16860,16866,16867,16907,16911,17255,17826,17870,18607,18624,18844,18850,18894,18898,18900,18901,18902,18904,18907,18919,18947],"fullWord":16820},{"subwords":[7604,7611,7626,7627,8015,8019,8045,8046,9307,9360,9366,9400,9405,9409,12509,12512,12513,12548,12560,12995,13007,15461,15472,15494,15497,15684,15685,16815,16821,16858,16866,16889,17383,17389,17722],"fullWord":16821},{"subwords":[214,269,280,286,337,340,362,399,407,5716,7260,7293,7298,7300,7316,7396,7477,7486,7585,9416,10109,10115,10324,10360,10398,10412,10414,10415,10536,10551,15910,15912,15931,15942,15948,16270,16274,16825,17003],"fullWord":16825},{"subwords":[5902,5918,9290,9291,9307,9312,9318,9325,9328,9334,9416,9419,9436,9447,10414,10415,10433,10437,10459,10460,10465,10536,10544,10548,10551,10625,10634,10654,10656,10659,10686,10688,10691,10694,10697,10707,12368,12374,12376,12438,12439,12442,12463,12471,16399,16400,16457,16826,16840,16858,16860,16907,16911,17093,17255,17826,17862,18607,18624,18844,18850,18863,18866,18870,18894,18898,18900,18919,18920,18947],"fullWord":16826},{"subwords":[337,340,428,928,2813,3402,3410,9146,10072,15880,15931,15942,16178,16179,16769,16828],"fullWord":16828},{"subwords":[4714,4728,4739,4742,4826,4835,4935,4939,4957,4961,5037,5050,5756,5760,5778,5779,9111,9117,9121,9127,9150,9151,9416,9417,9885,9894,10378,10414,10415,10416,10417,10530,10535,10536,10537,10551,10566,10567,10573,16780,16784,16829,16830,16954,16955,16959,17044,17068,17069],"fullWord":16830},{"subwords":[5778,5779,5918,9150,9151,9276,9281,9282,9284,9307,9416,9836,9843,9902,9904,9913,9919,9921,9929,10414,10415,10416,10417,10433,10536,10544,10548,10551,10566,10569,10570,10573,10625,10634,10645,10648,10654,12438,12439,12442,16829,16831,16858,16860,16876,16948,16954,16974,17085],"fullWord":16831},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5114,5117,5146,5148,5221,5223,5728,5756,5760,9110,9111,9117,9121,9125,9126,9127,9416,9417,10378,10414,10415,10443,10447,10530,10533,10534,10535,10536,10537,10551,10780,10782,10888,12752,12755,12812,12815,12822,12837,12841,12842,12844,12845,12848,16780,16784,16837,16838,17044,17068,17069,17097,17323,17350,17351,17354,17357,17359,17360,17364,17365],"fullWord":16838},{"subwords":[4714,4724,4728,4739,4742,4743,4826,4935,4939,4942,4945,5037,5063,5680,5684,5756,5760,9111,9117,9121,9122,9127,9416,9417,9419,9436,9447,10378,10414,10415,10459,10460,10465,10530,10535,10536,10537,10551,10686,10687,10691,10694,10697,10707,16457,16780,16784,16840,16841,16907,16911,16912,17044,17068,17069,17093,17856,17862,18575,18835,18837,18844,18845,18850,18863,18864,18865,18866,18867,18870,18947],"fullWord":16841},{"subwords":[337,340,639,647,691,714,715,1124,9307,10120,10654,12238,12241,12438,12442,15931,15942,15986,16844,16845,16858,17006,17029,17214,19919,19920,19923,19948,19957,20107,20110,20112,20115,20152,20153,20154,20167,20191],"fullWord":16845},{"subwords":[337,340,973,1124,10236,15931,15935,15942,16844,16846,16903,16904,17029,17036,19919,19923,20107,20110,20112,20115,20191,20195],"fullWord":16846},{"subwords":[5799,6107,6110,9384,9389,9409,9416,10414,10415,10471,10481,10486,10536,10549,10550,10551,10677,10711,10716,10717,10719,10722,10723,15337,15354,15444,15445,15473,15475,15526,15549,15554,16847,16889,16890,17072,17095,17722,20004,20007,20070,20129,20132,20133,20134,20144,20146,20197],"fullWord":16847},{"subwords":[341,347,555,647,691,9307,9422,11156,11159,11213,11247,11330,11697,11714,11720,11728,12244,12443,12447,12462,15973,15986,16764,16848,16858],"fullWord":16848},{"subwords":[5782,5784,5845,9416,9422,10414,10415,10536,10551,10584,10595,10598,11659,11668,11671,11685,11764,16375,16849,17076,17077,17171],"fullWord":16849},{"subwords":[5830,5831,5845,9384,9389,9409,9422,11539,11688,11692,11693,11694,11743,11745,11764,11765,15202,15224,15480,15481,15484,15489,15526,16375,16850,16889,16890,17722],"fullWord":16850},{"subwords":[9307,9360,9366,9422,11697,11728,11772,11854,11891,11915,11920,12209,12443,12447,12519,12522,12527,12560,12573,12872,16851,16852,16858,17383,17472,21144,21145,21183,21186,21187],"fullWord":16852},{"subwords":[5830,5831,5845,6033,9178,9189,9196,9384,9389,9409,9422,11539,11743,11745,11764,11765,13577,13588,13593,13595,13705,13712,13715,13716,14262,14281,14309,14313,14317,14320,14326,14336,14339,14403,14421,15202,15224,15248,15272,15305,15480,15481,15484,15489,15508,15509,15514,15524,15526,15747,16375,16853,16854,16883,16889,16890,17542,17565,17591,17722],"fullWord":16854},{"subwords":[5782,5784,5845,6033,9178,9186,9187,9196,9416,9422,10414,10415,10536,10551,10584,10595,10598,10611,10617,10665,10672,10681,10957,11659,11668,11671,11685,11764,13705,13716,13743,13745,13961,14421,16375,16853,16855,16883,17076,17077,17088,17171,17563],"fullWord":16855},{"subwords":[9178,9192,9196,9422,10584,10611,10617,10618,10665,10672,10681,10957,11659,11685,14009,14421,16853,16856,16883,17076,17082,17088,17149,17697,21146,21152],"fullWord":16856},{"subwords":[5918,6039,9307,12367,12390,12397,16475,16481,16482,16858,16860,16861,16862,16863,16881,16903,18245,20579,20584,20774,20785,20788,20807,20826,20830],"fullWord":16863},{"subwords":[5918,9307,12390,12397,12398,16475,16481,16858,16860,16862,16864,18245,18287,20579,20584,20774,20785,20788,20789,20807,20810,20826,21016,21017,21120,21122,21130,21138,21139,21144,21145],"fullWord":16864},{"subwords":[6593,6619,6821,6845,7179,7217,9135,9307,10654,12438,12442,16858,16865,18083,18117],"fullWord":16865},{"subwords":[4714,4720,4721,4774,4785,4826,4832,4935,4939,4947,4956,4985,4988,4992,4993,4999,5007,5037,5716,5865,5875,5918,7460,7493,7511,7604,7611,9111,9127,9307,16381,16780,16815,16817,16858,16860,16866,16867,16868,17243],"fullWord":16868},{"subwords":[5716,5894,5918,5988,5992,5996,6000,7493,7511,7604,7611,7626,8015,8019,9307,9384,9389,9409,15141,15173,15174,15175,15177,15234,15235,15295,15296,15461,15472,15494,15497,15500,15526,15527,16439,16441,16815,16819,16858,16860,16866,16867,16869,16889,16890,16893,17722],"fullWord":16869},{"subwords":[5716,5918,6039,7493,7511,7604,7611,7752,9307,12367,16815,16822,16858,16860,16861,16866,16867,16870,16873,16881,16903],"fullWord":16870},{"subwords":[5716,5918,7477,7486,7493,7511,7604,7611,7680,7681,9265,9266,9307,9416,10398,10412,10414,10415,10433,10536,10544,10548,10551,10625,10634,10637,10642,10654,12438,12439,12442,16815,16858,16860,16866,16867,16871,17083],"fullWord":16871},{"subwords":[7604,7611,9293,9307,10637,10642,10654,10662,11067,11068,11082,11084,12438,12442,16815,16858,16866,16872,17083,17149,21144,21145],"fullWord":16872},{"subwords":[5918,5996,6000,9276,9278,9279,9284,9307,9384,9389,9396,9399,9409,9836,9843,9855,9858,9913,9919,9921,9929,10041,15175,15177,15296,15498,15499,15500,15526,15527,15534,16439,16858,16860,16876,16877,16889,16890,16893,16948,16954,16960,16974,17722],"fullWord":16877},{"subwords":[4714,4774,4783,4785,4826,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,9111,9127,9297,9299,9302,9307,12448,12449,16381,16780,16858,16860,16879,17243],"fullWord":16879},{"subwords":[5918,5996,6000,9297,9300,9301,9302,9307,9384,9389,9409,12448,12449,15175,15177,15296,15500,15526,15527,16439,16858,16860,16880,16889,16890,16893,17722],"fullWord":16880},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":16882},{"subwords":[8664,8671,8678,8679,8739,8789,8845,8851,8853,8856,8886,9307,9360,9366,9374,12453,12459,12560,12565,12810,12936,13651,13669,13765,13798,13809,13811,13841,14032,14112,14172,14421,16629,16639,16693,16858,16874,16883,16884,17248,17383,17406,17407,17580],"fullWord":16884},{"subwords":[4714,4826,4935,4939,5014,5021,5037,6033,9111,9127,13478,13488,13569,13573,13574,13705,13710,13716,13813,13815,13816,13819,13828,14237,14421,16780,16883,16885,17530,17562],"fullWord":16885},{"subwords":[6033,9384,9389,9409,13569,13573,13574,13577,13588,13705,13712,13715,13716,13813,13815,13817,13818,13819,13828,14262,14278,14280,14281,14309,14336,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,16883,16886,16889,16890,17565,17591,17722],"fullWord":16886},{"subwords":[5918,5996,6000,6039,9307,9384,9389,9409,12367,15175,15177,15296,15297,15500,15503,15526,15527,15530,16439,16442,16858,16860,16861,16881,16889,16890,16893,16894,16895,16899,16903,17722],"fullWord":16894},{"subwords":[7604,7611,7626,8015,8019,9138,9307,9391,9392,9409,12462,15461,15472,15494,15497,15533,16815,16858,16866,16889,16896,17722],"fullWord":16896},{"subwords":[325,349,359,905,932,8245,8248,8356,8362,8678,8934,9376,9409,14775,14886,16028,16646,16889,16897,17722],"fullWord":16897},{"subwords":[5735,5984,5995,6008,6016,9384,9389,9409,15526,15528,16319,16340,16425,16428,16889,16890,16892,16898,17722],"fullWord":16898},{"subwords":[9409,13844,13871,14342,14403,14421,14551,14558,15508,15524,15540,16883,16888,16889,16899,16900,16901,16903,17687,17692,17722,18083,18135,18147,19825,19886],"fullWord":16901},{"subwords":[9409,13871,14403,14410,14421,14549,14551,15508,15524,16883,16889,16900,16902,17597,17672,17687,17697,17722,18083,18135,18298,19825,21146,21152,21212,21224],"fullWord":16902},{"subwords":[337,340,973,10236,15931,15935,15942,16037,16903,16904,16905],"fullWord":16905},{"subwords":[6018,6039,9384,9389,9409,9447,15298,15306,15309,15312,15526,15530,15542,15543,15748,16457,16464,16889,16890,16895,16899,16903,16906,16907,16911,16913,16915,17722,17857,17881,17882,18844,18847,18849,18850,18941,18943,18947,19253,19277],"fullWord":16906},{"subwords":[349,359,905,908,911,918,973,990,997,9376,9409,9447,14898,14912,16028,16029,16041,16889,16899,16903,16907,16908,16909,16915,17722,17744,17745,17773,17781,17881,17882,17967,18347,18449,18472,18474,18487,18947,19381,19382],"fullWord":16909},{"subwords":[3429,3732,3958,3965,3971,4238,4241,9422,9447,11759,11772,11780,11854,11862,12007,12010,12030,12869,12870,12872,13025,13038,16178,16205,16769,16907,16910,17179,17316,17435,17897,18823,18830,18882,18947,19026,19034],"fullWord":16910},{"subwords":[7604,7611,7635,7637,9138,9307,9318,9325,9447,12462,12463,12471,16815,16858,16866,16907,16914,17255,17870,18894,18901,18907,18919,18947],"fullWord":16914},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16889,16890,16907,16911,16916,17722,17846,17881,18662,18844,18847,18849,18850,18941,18943,18947,18950,18953,18954,18963,18964,19255,19277,19302,19303],"fullWord":16916},{"subwords":[9447,13844,13850,13866,13871,14421,14422,14427,14551,14558,14561,14567,16883,16888,16903,16907,16915,16917,16918,16919,16920,17598,17603,18083,18085,18090,18135,18147,18148,18926,18936,18947,19386,19453,19456,19825],"fullWord":16919},{"subwords":[7604,7611,9138,9307,12462,12474,16815,16858,16866,16922,16924,21024],"fullWord":16924},{"subwords":[6039,6152,6153,6154,6156,6171,9447,16457,16464,16483,16490,16497,16903,16907,16911,16913,16915,16922,16923,16925,16926,17857,18677,18844,18850,18947],"fullWord":16926},{"subwords":[8678,8681,8685,8687,8688,8691,8935,9447,16651,16653,16654,16903,16907,16915,16922,16927,16928,18742,18947],"fullWord":16928},{"subwords":[6039,9384,9389,9409,15526,15530,16889,16890,16895,16899,16903,16929,16931,16932,16933,17722,21254],"fullWord":16932},{"subwords":[9384,9389,9392,9409,15526,16889,16890,16929,16931,16934,17722],"fullWord":16934},{"subwords":[7604,7611,9138,9307,12462,16815,16858,16866,16935,21269,21271,21276,21279],"fullWord":16935},{"subwords":[9416,10414,10415,10536,10551,16929,16936],"fullWord":16936},{"subwords":[200,950,957,973,10090,10107,10236,15893,15942,16938,16939],"fullWord":16939},{"subwords":[200,950,952,1009,4551,4555,4826,4835,5616,5620,5626,6055,9804,15893,15939,16041,16043,16044,16270,16293,16457,16940,16941,17746,17747,17806,17809,18339,18340,18358,18362,18484,18485,18541,18545,18546,18559,18575,19384],"fullWord":16941},{"subwords":[817,825,867,868,905,906,911,918,950,953,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9789,9791,9792,9804,14798,14802,14881,14898,14901,14905,14912,15306,15312,15748,15939,16041,16043,16270,16286,16293,16419,16457,16940,16942,17746,17773,17775,17779,17809,17958,18358,18360,18361,18362,18449,18453,18455,18472,18484,18541,18545,18546,18554,18557,18559,19244,19245,19381],"fullWord":16942},{"subwords":[950,957,973,982,990,1009,5616,5618,5620,5626,6039,6055,9804,15939,15940,16041,16043,16046,16270,16291,16293,16296,16457,16464,16940,16943,17746,17748,17809,17810,18358,18362,18484,18486,18487,18541,18545,18546,18559],"fullWord":16943},{"subwords":[950,957,973,987,5918,6039,9836,9843,12229,12367,15939,15940,15986,15995,15999,16007,16009,16270,16291,16944,16945,17216,17218,17234,17235],"fullWord":16945},{"subwords":[5740,5742,6031,6039,6042,16319,16326,16328,16342,16457,16464,16946,16947,18576,18588],"fullWord":16947},{"subwords":[5918,6039,9276,9284,9307,9836,9843,9913,9919,9921,9929,9941,12367,16858,16860,16861,16876,16878,16881,16903,16948,16949,16954,16962,16974,16978,16985],"fullWord":16949},{"subwords":[3264,4238,4241,6023,6057,6058,8474,8476,8586,8935,9860,16298,16304,16457,16574,16950,18570,18697],"fullWord":16950},{"subwords":[4680,4826,4835,4865,4873,5740,5741,5742,6118,6121,16319,16320,16326,16475,16477,16951,16952,18225,20524,20531,20532,20533,20536,20538,20540],"fullWord":16952},{"subwords":[5740,5742,5984,6118,6119,6120,6121,15103,15105,15292,16319,16326,16340,16425,16475,16478,16951,16953,20532,20538,20540,20587],"fullWord":16953},{"subwords":[4928,4934,5037,5050,9127,9885,9891,9894,16954,16955,16956,16992,21096,21140,21141],"fullWord":16956},{"subwords":[5037,5050,5221,9127,9885,9894,16954,16955,16957,17323],"fullWord":16957},{"subwords":[6039,9384,9389,9396,9399,9409,9941,9943,10041,10042,15526,15530,15534,15537,16889,16890,16895,16899,16903,16954,16960,16961,16962,16985,17722],"fullWord":16961},{"subwords":[9135,9941,16903,16954,16964,16965,16985],"fullWord":16965},{"subwords":[7604,7608,7611,9138,9276,9284,9307,9913,9922,9925,9929,12462,16815,16858,16866,16876,16954,16966,16974],"fullWord":16966},{"subwords":[9150,9151,9152,9155,9898,9901,9941,16829,16832,16834,16835,16903,16954,16967,16968,16985],"fullWord":16968},{"subwords":[9178,9196,9422,9423,9932,9934,9941,11774,12082,13844,14421,16853,16857,16883,16888,16903,16954,16969,16970,16971,16973,16979,16980,16985],"fullWord":16971},{"subwords":[9178,9196,9422,9932,9934,14421,16853,16883,16954,16969,16970,16972,16979,16992,17575,17697,21146,21152],"fullWord":16972},{"subwords":[9276,9284,9307,9913,9926,9928,9929,9941,16858,16876,16878,16881,16903,16954,16974,16975,16976,16978,16985],"fullWord":16976},{"subwords":[9276,9284,9285,9297,9302,9307,9913,9929,16858,16876,16954,16974,16977,16992,21144,21145],"fullWord":16977},{"subwords":[9150,9151,9396,9399,9409,9941,10041,15534,15537,16829,16832,16889,16899,16903,16954,16981,16982,16985,17722],"fullWord":16982},{"subwords":[9396,9399,9409,9447,9941,9945,9946,9955,10041,15534,15537,16889,16899,16903,16907,16915,16954,16983,16984,16985,16986,16987,17722,17881,17882,18947],"fullWord":16984},{"subwords":[487,950,957,973,10013,10014,10181,10236,10239,10893,12675,12677,15942,16988,16989,17294,17297,17354,17434],"fullWord":16989},{"subwords":[950,961,2812,2921,2938,3033,3100,3102,4048,4237,9801,13154,13162,13166,13167,13336,13424,13436,15880,15884,16014,16103,16992,16993,17476,17518,17697,21041,21043,21047,21049,21064,21067],"fullWord":16993},{"subwords":[7604,7608,7611,9276,9284,9285,9307,9913,9922,9925,9929,16815,16858,16866,16876,16954,16974,16992,16994,21144,21145],"fullWord":16994},{"subwords":[49,67,385,392,950,1309,1313,1314,1422,1444,1502,1507,1894,9801,10061,10071,10135,10304,10313,10323,15942,16103,16992,16995,16999,17039,17149,21047,21049],"fullWord":16995},{"subwords":[716,950,9801,11213,11247,11264,11330,11341,11408,11424,12201,12204,12244,12311,12312,15973,15986,16007,16103,16992,16996,17219,21047,21049,21051,21055,21059,21062],"fullWord":16996},{"subwords":[5845,5918,5921,9836,9843,9865,9870,11512,11524,16992,16997,18287,21120,21122,21130],"fullWord":16997},{"subwords":[950,9801,16089,16103,16992,16998,18217,20449,20493,20496,21047,21049,21079,21093,21094],"fullWord":16998},{"subwords":[950,957,973,2813,2822,2825,3033,3036,3476,10072,10082,10086,10236,15880,15884,15887,15892,15942,17001,17002],"fullWord":17002},{"subwords":[7267,7280,7293,7316,7396,7447,7452,10109,10115,10304,10313,15910,15919,15924,15942,16103,17003,17004,17039,17149],"fullWord":17004},{"subwords":[200,399,407,950,952,4466,4467,4601,4603,4728,4826,4835,5756,5760,5778,5779,9760,9761,10090,10093,10099,10107,10128,10129,10132,10227,10324,10327,10331,10338,10341,10360,10378,10416,10417,15893,15939,15942,15948,16270,16274,16938,17007,17008,17044],"fullWord":17008},{"subwords":[399,407,817,825,867,868,905,906,950,953,5588,5592,5593,5599,5778,5779,5976,5977,9760,9761,10128,10130,10131,10132,10207,10214,10217,10228,10324,10338,10341,10355,10360,10416,10417,14798,14802,14805,14881,14968,14973,15939,15942,15948,16270,16274,16286,16419,16420,17007,17009],"fullWord":17009},{"subwords":[399,407,950,957,973,5778,5779,6039,9760,9761,10128,10132,10230,10236,10324,10338,10341,10360,10416,10417,10453,15939,15940,15942,15948,15950,16270,16274,16277,16291,17007,17010],"fullWord":17010},{"subwords":[442,461,470,487,10136,10161,10181,10738,10740,11173,11186,11191,11265,11330,11813,11875,11877,12856,12857,12872,15942,15973,17011,17012,17154,17354,17378],"fullWord":17011},{"subwords":[973,987,7293,7316,7396,7660,7665,10109,10115,10236,12230,12233,15910,15923,15942,15986,16001,16009,17003,17005,17014,17015,17211,17213],"fullWord":17015},{"subwords":[716,7293,7316,7396,7447,7452,7660,10109,10115,10304,10313,12230,12233,12311,12312,15910,15924,15942,15986,16001,16103,17003,17014,17016,17039,17149,17211,21058],"fullWord":17016},{"subwords":[488,693,711,973,987,990,10236,10241,10245,12292,15942,15960,15963,15986,16009,16041,17017,17018,17022,17027,18408,18428,18487],"fullWord":17018},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":17024},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":17025},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":17026},{"subwords":[200,204,399,407,1106,1114,4466,4467,4569,4601,4603,4728,4826,4851,4852,5756,5760,10090,10093,10099,10107,10227,10285,10286,10289,10324,10327,10331,10360,10378,10471,10472,15893,15942,15948,15966,15967,16076,16077,16270,16274,17029,17030,17031,17044,19910,19923,19924,19925,19935,19967,19986,19987,19990,20014,20017,20018],"fullWord":17031},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":17032},{"subwords":[399,407,973,1106,1114,6039,10230,10236,10285,10289,10324,10360,10453,10471,10472,15942,15948,15950,15966,15969,16076,16080,16270,16274,16277,16291,17029,17030,17033,17036,19923,19924,19925,19935,19936,19967,19968,19986,19987,20014],"fullWord":17033},{"subwords":[399,407,1106,1114,1196,1197,5619,10285,10289,10304,10313,10324,10360,10471,10472,10489,10495,10496,11065,11066,15942,15948,15966,16076,16103,16270,16274,17029,17030,17034,17039,17149,19923,19924,19925,19935,19967,19986,19987,19988,20014,21050,21097,21105,21130],"fullWord":17034},{"subwords":[337,340,1124,2813,3090,3091,3402,10072,15880,15931,15942,16178,16179,16769,16844,17029,17035,19919,19923,20107,20110,20112,20115,20191],"fullWord":17035},{"subwords":[227,399,407,817,825,905,906,924,1196,1197,5588,5592,5593,5594,5599,5619,5976,5977,10207,10228,10304,10306,10307,10313,10324,10355,10359,10360,10495,10496,11065,11066,11074,11075,14805,14881,14939,14944,14968,14973,15183,15184,15201,15282,15864,15865,15866,15867,15942,15948,16103,16105,16270,16274,16286,16419,16420,17039,17040,17149,17150,21050,21071,21097,21099,21104,21105,21130,21212],"fullWord":17040},{"subwords":[399,401,407,1106,1114,5605,5607,5629,5631,5691,5693,5790,5798,6092,6104,10285,10289,10324,10360,10361,10368,10372,10383,10392,10451,10471,10472,15942,15948,15966,16076,16270,16274,16319,17029,17030,17042,19923,19924,19925,19935,19967,19986,19987,19992,20000,20014],"fullWord":17042},{"subwords":[399,407,1196,1197,5619,10304,10313,10314,10316,10322,10324,10360,10495,10496,11065,11066,15942,15948,16103,16270,16274,17039,17043,17149,21050,21097,21105,21130,21241,21243],"fullWord":17043},{"subwords":[4680,4728,4731,4734,4826,5667,5671,5691,5693,5756,5760,5790,7460,7467,7468,7473,7477,7478,7481,7486,7678,7679,10378,10379,10381,10383,10385,10392,10398,10412,10451,16313,16319,16320,17044,17045],"fullWord":17045},{"subwords":[5691,5693,5740,5742,5778,5779,5790,5791,6031,6039,6042,9812,9815,10383,10386,10387,10392,10416,10417,10451,10453,16319,16326,16328,16329,16342,17047,17048],"fullWord":17048},{"subwords":[5691,5693,5790,5791,6031,6033,6039,6042,10383,10392,10451,10453,13489,13495,13498,13510,16319,16329,16336,16338,16342,17049,17050],"fullWord":17050},{"subwords":[5691,5693,5694,5790,6033,6038,6189,6198,10383,10392,10451,10495,10496,11065,11066,13489,13495,13498,13510,14009,16319,16336,16339,17049,17051,17149,17697,21115,21118,21127,21130],"fullWord":17051},{"subwords":[5691,5693,5790,5791,6031,6039,6042,10383,10392,10451,10453,10459,10460,10465,16319,16329,16342,16457,16464,17052,17053,17818,17819,17828,18576,18588],"fullWord":17053},{"subwords":[5691,5693,5694,5790,6189,6198,10383,10392,10451,10459,10460,10465,10495,10496,11065,11066,16319,16457,17052,17054,17149,17818,17820,17828,18018,18019,18023,18576,18588,21130,21135],"fullWord":17054},{"subwords":[5691,5693,5790,5798,6092,6104,10383,10392,10451,10471,10474,10476,16319,17055,19992,20000],"fullWord":17055},{"subwords":[5716,5769,7477,7486,8500,8502,8625,8628,8678,9416,10398,10412,10414,10415,10536,10551,16574,16805,17056],"fullWord":17056},{"subwords":[8586,8935,8945,8947,9025,9026,9027,10459,10460,10465,10470,11039,11044,11050,11053,16457,16574,16746,16753,16754,17058,17128,17147,18066,18074,18697,18802,19422,19486,19592,19605,19876],"fullWord":17058},{"subwords":[4680,4728,4731,4734,4826,4865,4873,5691,5693,5756,5760,5790,6118,6121,10378,10383,10385,10392,10451,10490,16319,16320,16475,16477,17044,17059,17060,18225,20524,20531,20532,20533,20536,20566,20569],"fullWord":17060},{"subwords":[3120,3123,4639,4714,4728,4739,4742,4826,4909,4913,4935,4939,5037,5040,5756,5760,6023,9079,9082,9085,9111,9117,9121,9127,9416,9417,10378,10414,10415,10518,10530,10535,10536,10537,10551,16178,16179,16298,16769,16780,16784,17044,17062,17063,17068,17069],"fullWord":17063},{"subwords":[3120,3123,4158,6023,9079,9085,9384,9389,9409,9416,10414,10415,10518,10536,10549,10550,10551,10677,15021,15048,15188,15189,15411,15415,15444,15445,15473,15475,15526,16178,16179,16298,16769,16889,16890,17062,17064,17072,17722],"fullWord":17064},{"subwords":[3120,3123,3165,6023,6039,9079,9085,9416,9418,10414,10415,10453,10518,10536,10551,16178,16179,16298,16303,16769,16779,16903,17062,17065],"fullWord":17065},{"subwords":[9150,9151,9941,10525,10528,16178,16179,16769,16772,16778,16779,16829,16832,16903,16954,16985,17066,17067],"fullWord":17067},{"subwords":[4714,4728,4739,4742,4810,4826,4935,4939,5023,5037,5367,5756,5760,9111,9117,9119,9120,9121,9127,9384,9385,9389,9409,9416,9417,10378,10414,10415,10530,10535,10536,10537,10549,10550,10551,10677,15060,15087,15428,15433,15436,15443,15444,15445,15473,15474,15475,15526,16780,16784,16786,16889,16890,16891,17044,17068,17069,17070,17072,17722],"fullWord":17070},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5756,5760,6039,9111,9117,9121,9127,9416,9417,9418,10378,10414,10415,10453,10530,10535,10536,10537,10551,16780,16782,16784,16787,16903,17044,17046,17068,17069,17071],"fullWord":17071},{"subwords":[6039,9416,9418,9419,9420,9436,9447,10414,10415,10453,10459,10460,10465,10536,10551,10686,10690,10691,10694,10697,10707,16457,16464,16840,16842,16903,16907,16911,16913,16915,17073,17093,17094,17857,17862,17863,18844,18850,18863,18866,18870,18947],"fullWord":17073},{"subwords":[7596,7597,7635,7637,8645,8647,8678,8685,8688,8691,8935,9447,10563,10564,10686,10691,10698,10707,16653,16805,16809,16840,16907,17074,17093,18742,18863,18947],"fullWord":17074},{"subwords":[4714,4722,4728,4739,4742,4826,4935,4938,4939,4971,4972,4975,4983,5037,5756,5760,5782,5784,5845,9109,9111,9117,9121,9127,9416,9417,9422,10378,10414,10415,10530,10535,10536,10537,10551,10584,10595,10596,10598,11492,11495,11626,11641,11659,11663,11668,11671,11685,11764,11771,16375,16780,16784,17044,17068,17069,17076,17077,17078,17171,17172],"fullWord":17078},{"subwords":[5782,5784,5845,6039,9416,9418,9422,9423,10414,10415,10453,10536,10551,10584,10595,10598,11569,11659,11668,11671,11685,11764,11774,12082,16356,16375,16376,16903,17076,17077,17079,17081,17171,17174],"fullWord":17079},{"subwords":[9152,9155,9157,9422,10583,10584,10618,11659,11676,11682,11685,16834,16836,17075,17076,17080,17082,17149],"fullWord":17080},{"subwords":[7604,7611,9307,10637,10642,10654,12438,12442,16815,16822,16858,16866,16873,16881,16903,17083,17084],"fullWord":17084},{"subwords":[9150,9151,9276,9284,9307,9902,9904,9913,9929,9941,10645,10648,10654,12438,12442,16829,16832,16858,16876,16878,16881,16903,16954,16974,16978,16985,17085,17086],"fullWord":17086},{"subwords":[9150,9151,9276,9284,9285,9293,9307,9902,9904,9913,9929,10645,10648,10650,10654,10662,11082,12438,12442,16829,16833,16858,16876,16954,16974,16992,17085,17087,17149,21144,21145],"fullWord":17087},{"subwords":[10665,10671,10672,10681,13813,13828,13829,14009,14421,16883,16887,17088,17089,17149,17697,21146,21152],"fullWord":17089},{"subwords":[10665,10672,10681,13813,13828,13871,14003,14421,14465,14469,14506,14512,14513,14515,14551,16883,17088,17092,18083,18135,19825],"fullWord":17092},{"subwords":[5799,6107,6110,9384,9389,9409,9416,10414,10415,10471,10481,10486,10536,10549,10550,10551,10677,10711,10716,10717,10719,10722,10723,15337,15354,15444,15445,15473,15475,15526,15549,15554,16847,16889,16890,17072,17095,17722,20004,20007,20070,20129,20132,20133,20134,20144,20146,20197],"fullWord":17095},{"subwords":[299,304,478,487,629,630,7293,7316,7361,7364,7396,7660,7764,7767,10109,10115,10181,10741,10744,10793,10794,10795,10811,10826,10831,12230,12233,12509,12512,12560,15910,15921,15942,15956,15986,16001,17003,17014,17099,17100,17211,17354,17383,17389],"fullWord":17100},{"subwords":[10833,10849,10852,10854,10864,10874,10893,12905,12936,13024,14056,14086,14087,14121,14123,17102,17103,17104,17110,17354,17370,17372,17406,17414,17434,17631,17632],"fullWord":17103},{"subwords":[4728,4826,5114,5117,5146,5148,5200,5204,5221,5223,5756,5760,6033,10378,10443,10447,10780,10782,10864,10865,10866,10869,10874,10888,12752,12755,12837,12844,12845,12848,12916,12925,12936,13478,13488,13607,13950,13967,13968,14020,14023,14056,14061,14063,14066,14087,14166,14167,17044,17097,17104,17105,17106,17323,17354,17357,17359,17360,17406,17530],"fullWord":17106},{"subwords":[6004,6033,10443,10447,10864,10865,10867,10868,10869,10874,10882,10883,10888,10889,12845,12848,12916,12925,12936,12979,12982,13007,13577,13607,14056,14061,14064,14065,14066,14087,14147,14149,14166,14168,14262,14281,14350,14365,14366,14383,14384,14403,15248,15272,15305,15610,15611,15621,15622,15663,15668,15676,17097,17104,17105,17107,17354,17359,17406,17419,17420,17638],"fullWord":17107},{"subwords":[6033,6039,10443,10447,10453,10787,10864,10865,10869,10874,10888,10891,10893,12845,12848,12916,12925,12936,13607,13608,14056,14061,14066,14087,14166,14170,14179,17097,17098,17104,17105,17108,17110,17354,17359,17363,17406,17414,17434],"fullWord":17108},{"subwords":[10864,10873,10874,12933,12936,13971,13972,13981,13983,14009,14056,14087,14088,14089,14090,14091,14130,14144,14187,17104,17109,17149,17354,17406,17413,17472,17697],"fullWord":17109},{"subwords":[8772,10893,10895,12810,16758,17111,17112,17149,17354,17434,17472,17475],"fullWord":17112},{"subwords":[8770,8771,8887,8891,8892,8901,8935,10893,10896,10897,10898,10901,12810,16704,16707,17111,17113,17114,17115,17116,17354,17434,17435,17436,18743,19123,19125],"fullWord":17115},{"subwords":[3370,3701,3944,8714,8720,10760,10765,10766,10778,11039,12810,13044,16175,16746,17117,17316,17354,17442,18050,19592],"fullWord":17117},{"subwords":[7559,7560,7871,8166,8731,8737,8951,8958,10793,10811,10910,10981,10986,11039,12810,16746,17099,17118,17131,17354,17439,17442,19583,19584,19592],"fullWord":17118},{"subwords":[487,950,10013,10014,10181,12675,12677,13087,13088,13090,15942,15971,16988,17029,17119,17294,17354,19923,20250],"fullWord":17119},{"subwords":[5918,5953,5955,10433,10443,10444,10447,10471,10488,10822,10888,10935,10940,12504,12505,12506,12560,12561,12601,12602,12845,12848,12876,12879,13093,13094,17097,17120,17354,17359,17374,17383,20250,20251,20252,20262],"fullWord":17120},{"subwords":[4728,4826,4865,4873,5114,5117,5146,5148,5221,5223,5271,5272,5282,5283,5756,5760,10378,10443,10447,10490,10780,10782,10888,10942,10944,10952,12752,12755,12837,12844,12845,12848,13110,13111,13112,13114,13118,16475,17044,17059,17097,17121,17122,17323,17354,17357,17359,17360,17464,17465,20524,20531,20566,20569,20875,20877,20883,20884],"fullWord":17122},{"subwords":[6004,10443,10447,10882,10883,10888,10889,10942,10945,10946,10952,12845,12848,12979,12982,13007,13110,13112,13114,13118,15302,15610,15611,15621,15622,15676,15734,15739,15740,15744,16445,16475,17059,17097,17121,17123,17354,17359,17419,17420,17464,17466,18272,20875,20877,20933,20947],"fullWord":17123},{"subwords":[10942,10951,10952,13114,13118,17121,17124,17149,17354,17464,17472,21202,21207,21210,21211],"fullWord":17124},{"subwords":[4728,4826,4849,5471,5472,5476,5478,5485,5488,5496,5756,5760,7460,7477,7478,7481,7486,7722,7723,7726,10378,10398,10412,10470,10981,10982,10983,10986,17044,17126,17128,17129,17131,18066,18067,19876,19877],"fullWord":17126},{"subwords":[5485,5488,5498,7460,8180,8183,10981,10986,17127,17131,17149,19590,21096],"fullWord":17127},{"subwords":[3120,3123,3584,3586,4268,4271,5656,6023,9079,9085,9416,10414,10415,10470,10518,10536,10551,10552,10965,16178,16179,16298,16769,17062,17128,17132,18066,18083,19876],"fullWord":17132},{"subwords":[9101,10976,16178,16179,16769,17133,17149,18083],"fullWord":17133},{"subwords":[7604,7611,7759,7760,8151,8160,9307,10637,10642,10654,10981,10986,11012,11018,12438,12442,16815,16858,16866,17083,17131,17134,17139,17292,18083,18084,18117,18125,19585,19589,19885],"fullWord":17134},{"subwords":[10957,10995,10999,12082,12173,13988,13997,14003,14551,14558,17135,17136,17137,17138,18103,18114,18115,18116,18135,18147,19624,19628,19825],"fullWord":17137},{"subwords":[14003,14403,14536,14538,14551,14558,17141,17142,17143,17144,17687,17692,18135,18147,19825,19886],"fullWord":17143},{"subwords":[9024,11039,16746,16747,16758,17145,17146,17149,19592],"fullWord":17146},{"subwords":[6039,10453,10459,10460,10465,10495,10496,11065,11066,11081,16457,16464,17149,17151,18018,18019,18021,18023,18026,21130,21135],"fullWord":17151},{"subwords":[950,957,973,2848,2868,3033,3036,11086,11099,11100,11105,11330,11341,11344,11348,12082,15880,15884,15887,15892,15973,16129,16133,17152,17153],"fullWord":17153},{"subwords":[442,461,470,973,10136,10161,10236,11173,11186,11191,11330,11348,12082,15942,15973,17012,17013,17154,17155],"fullWord":17155},{"subwords":[869,883,884,905,11276,11314,11329,11330,11408,11424,14808,14820,14939,14944,15864,15865,15973,16103,17156,21051,21055,21212],"fullWord":17156},{"subwords":[869,883,905,911,918,973,990,11276,11314,11320,11325,11330,11348,11356,11360,11361,11376,12082,14808,14820,14898,14912,15973,16041,17157,17158,17773,17781,18389,18407,18449,18472,18487,19216,19219,19381,19382],"fullWord":17158},{"subwords":[869,883,884,905,911,918,919,11276,11314,11320,11325,11329,11330,11356,11361,11376,11408,11424,11425,14808,14820,14898,14912,14939,14944,15864,15865,15973,16041,16056,16103,17157,17159,17773,17802,17956,18018,18389,18407,18449,18472,19216,19219,19231,19232,19377,19381,21051,21055,21212],"fullWord":17159},{"subwords":[817,825,869,883,905,906,907,973,5588,5599,5845,5976,5977,6039,11276,11286,11287,11314,11315,11316,11330,11333,11334,11348,11351,11437,11453,11539,11560,11561,11569,12082,14808,14820,14881,14885,14975,14978,15202,15224,15973,15978,16270,16278,16283,16286,16290,16291,16419,17161,17162],"fullWord":17162},{"subwords":[227,817,825,869,883,884,905,906,1196,1197,5588,5599,5619,5845,5976,5977,11276,11286,11287,11314,11315,11329,11330,11333,11408,11424,11437,11453,11539,11560,14808,14820,14881,14939,14944,14975,14978,15202,15224,15282,15864,15865,15866,15867,15973,15978,16103,16105,16270,16278,16284,16286,16419,17161,17163,21051,21055,21071,21097,21099,21104,21105,21130,21212],"fullWord":17163},{"subwords":[269,280,5845,7317,7323,7327,7342,7396,7489,7492,11127,11128,11129,11140,11330,11437,11453,11487,11560,12081,15910,15912,15973,15978,16270,16278,17164],"fullWord":17164},{"subwords":[5780,5781,5782,5784,5845,6039,10453,11569,12082,16368,16370,17165,17166],"fullWord":17166},{"subwords":[5780,5781,5782,5784,5785,5845,10495,10496,11065,11066,16368,17149,17165,17167,21110,21114,21130],"fullWord":17167},{"subwords":[5782,5784,5845,6039,10453,10459,10460,10465,11502,11506,11569,11574,12082,16457,16464,17168,17169,17830,17832,18595],"fullWord":17169},{"subwords":[337,340,341,347,470,555,1175,1176,1180,9414,9422,10136,10161,10301,10584,10585,10586,11148,11151,11173,11182,11330,11401,11402,11406,11659,11685,11797,15931,15942,15973,16098,16764,16922,17012,17076,17170,21027],"fullWord":17170},{"subwords":[4714,4722,4728,4739,4742,4826,4935,4938,4939,4971,4972,4975,4983,5037,5756,5760,5782,5784,5845,9109,9111,9117,9121,9127,9416,9417,9422,10378,10414,10415,10530,10535,10536,10537,10551,10584,10595,10596,10598,11492,11495,11626,11641,11659,11663,11668,11671,11685,11764,11771,16375,16780,16784,17044,17068,17069,17076,17077,17078,17171,17172],"fullWord":17172},{"subwords":[5782,5784,5830,5831,5845,9384,9389,9409,9416,9422,10414,10415,10536,10549,10550,10551,10584,10595,10598,10677,11539,11659,11668,11669,11670,11671,11685,11743,11745,11764,11765,15202,15224,15444,15445,15473,15475,15480,15481,15484,15489,15526,16375,16889,16890,17072,17076,17077,17171,17173,17722],"fullWord":17173},{"subwords":[5782,5784,5845,6039,9416,9418,9422,9423,10414,10415,10453,10536,10551,10584,10595,10598,11569,11659,11668,11671,11685,11764,11774,12082,16356,16375,16376,16903,17076,17077,17079,17081,17171,17174],"fullWord":17174},{"subwords":[3272,3336,3373,8612,8648,8678,8934,9409,9422,11759,15416,15480,15489,16178,16236,16627,16769,16889,17175,17722],"fullWord":17175},{"subwords":[9396,9399,9409,9422,9423,9941,10041,11749,11750,11774,12082,15480,15489,15534,15537,16889,16899,16903,16954,16969,16973,16985,17176,17177,17722],"fullWord":17177},{"subwords":[9396,9399,9409,9422,10041,11749,11750,11751,11755,15480,15489,15490,15534,15538,16889,16954,16969,16992,17176,17178,17722,21212],"fullWord":17178},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":17181},{"subwords":[5832,5833,5845,6039,9422,9423,9444,9446,9447,11569,11574,11764,11774,11780,11783,11786,11789,12082,16356,16375,16376,16457,16464,16903,16907,16911,16913,16915,17179,17180,17182,17830,17832,17857,18595,18844,18850,18882,18886,18891,18947],"fullWord":17182},{"subwords":[8648,8678,8681,8685,8687,8688,8691,8935,9422,9423,9447,11774,11780,11783,12082,16627,16628,16651,16653,16654,16903,16907,16915,17179,17183,17184,18742,18882,18947,18967],"fullWord":17184},{"subwords":[8648,8678,8685,8688,8691,8935,9422,9447,11780,11784,12215,12218,16627,16653,16758,16907,17179,17183,17185,17869,18018,18742,18806,18810,18882,18947,18967],"fullWord":17185},{"subwords":[3732,11826,11829,11999,12002,12082,12872,17186,17187,17316,17319,17322,17434],"fullWord":17187},{"subwords":[7895,7897,8186,8187,12081,12872,17188,17189,17348,17472],"fullWord":17189},{"subwords":[4763,4769,4826,4835,5114,5117,5163,5165,5167,5171,5221,5223,5845,11831,11833,11839,11845,12752,12755,12872,17190,17191,17323,17382],"fullWord":17191},{"subwords":[5845,6004,11539,11970,11973,11987,12872,12979,12982,13007,15202,15224,15610,15611,15627,15632,15638,15676,17190,17192,17382,17419],"fullWord":17192},{"subwords":[5845,6039,11569,11996,11999,12002,12082,12872,17190,17193,17382,17434],"fullWord":17193},{"subwords":[5845,9865,9870,11997,12872,13147,16992,17190,17194,17195,17382,17472,21130,21174,21178],"fullWord":17194},{"subwords":[3336,3675,3677,3732,3826,3860,3944,3955,8714,8786,8787,11921,11922,11941,12806,12808,12809,12810,12872,12895,12898,16172,16664,16686,17196,17316],"fullWord":17196},{"subwords":[8786,8787,8838,8842,8887,8892,8901,8935,11921,11941,11943,11946,12007,12010,12018,12020,12030,12806,12808,12809,12810,12872,12895,12898,16664,16686,16691,16704,17197,17399,17401,17435,18743,18967,19026,19034,19060,19123],"fullWord":17197},{"subwords":[4711,4712,4826,4849,5471,5478,5485,5488,5845,5846,5847,7460,7489,7492,7545,7546,8145,8150,11487,12081,12091,12097,12104,12107,12152,12153,16317,17199,17201,18066,18067,18103,19876,19877],"fullWord":17199},{"subwords":[5485,5488,7460,8145,8150,8180,8183,8186,8187,12081,12091,12097,12104,12107,17200,17201,18103,21096],"fullWord":17200},{"subwords":[7731,8145,8150,8180,8183,8186,8187,10981,10986,12081,12104,12107,17131,17135,17149,17201,17202,18103,19590],"fullWord":17202},{"subwords":[3336,3386,3390,4238,4241,4293,4375,4394,8935,8970,8988,9026,9027,12083,12158,12177,16260,16265,16753,17203,17204,18050,18103,18802,18967,19486,19592],"fullWord":17204},{"subwords":[12177,12181,12193,12196,17203,17206,18018,18103,19389,19493,19498],"fullWord":17206},{"subwords":[950,957,973,987,2869,2906,3033,3036,15880,15884,15887,15892,15986,16007,16009,16134,16135,17207,17208],"fullWord":17208},{"subwords":[712,973,987,1060,6293,6302,6366,6371,7179,7222,15986,16009,17209,17210,18117,18130,18169,19871],"fullWord":17210},{"subwords":[716,7267,7280,7352,7357,7396,7447,7452,12230,12233,12311,12312,15910,15919,15924,15986,16001,16103,17211,17212,21058],"fullWord":17212},{"subwords":[337,340,639,647,691,973,987,9307,10120,10236,10654,12238,12241,12438,12442,15931,15935,15942,15986,16009,16858,16881,16903,16904,17006,17214,17215],"fullWord":17215},{"subwords":[200,605,607,610,950,952,4492,4500,4501,4509,4605,4606,4774,4785,4826,4835,5865,5875,5918,9836,9843,9968,9969,12229,12243,15893,15939,15986,15988,15995,15996,16007,16270,16308,16381,16944,17216,17217,17234],"fullWord":17217},{"subwords":[950,957,973,987,5918,6039,9836,9843,12229,12367,15939,15940,15986,15995,15999,16007,16009,16270,16291,16944,16945,17216,17218,17234,17235],"fullWord":17218},{"subwords":[716,762,961,12257,12268,12269,12311,12312,13239,13259,13260,13268,13281,13336,13424,13436,15986,16014,16019,16103,17220,17221,17476,17490,17518,17697,21064,21067],"fullWord":17221},{"subwords":[200,605,607,608,610,817,825,905,906,4492,4500,4501,4516,4520,4532,4536,4605,4606,4607,4611,4774,4785,4810,4826,5588,5595,5598,5599,5865,5875,5918,5976,5977,6000,12229,12274,12275,12319,12324,12358,12359,14736,14751,14821,14826,14828,14881,14882,14961,14965,15060,15087,15227,15230,15893,15986,15988,15991,15995,15996,15998,16270,16286,16308,16381,16419,17223,17224],"fullWord":17224},{"subwords":[817,825,905,906,5588,5595,5598,5599,5918,5976,5977,6000,6008,6016,12229,12275,12319,12324,14821,14872,14881,14883,14983,14988,15275,15986,15995,15998,16270,16286,16419,17223,17225],"fullWord":17225},{"subwords":[817,825,905,906,907,973,987,5588,5595,5598,5599,5918,5976,5977,6000,6039,12229,12275,12319,12324,12367,14821,14881,14885,15986,15995,15998,15999,16009,16270,16286,16290,16291,16419,17223,17226],"fullWord":17226},{"subwords":[867,868,905,950,957,973,987,12277,12279,14821,14840,14845,15986,16007,16009,17227,17228],"fullWord":17228},{"subwords":[905,973,987,10236,14821,15942,15986,16009,17229,17230],"fullWord":17230},{"subwords":[716,905,924,10304,10313,12282,12311,12312,14821,14939,14944,15864,15865,15942,15986,16103,17039,17149,17229,17231,21075,21077,21212],"fullWord":17231},{"subwords":[126,134,325,693,711,932,2869,2906,2907,2908,2917,3025,3041,3052,3064,3198,3199,3229,3230,4238,4241,8318,8362,8371,8378,8391,8935,12612,15880,15986,16041,16134,16136,16157,16559,17232,17764,18323,18324,18408,18428,18686],"fullWord":17232},{"subwords":[716,12311,12312,15986,16103,17233,21237],"fullWord":17233},{"subwords":[950,957,973,987,5918,6039,9836,9843,12229,12367,15939,15940,15986,15995,15999,16007,16009,16270,16291,16944,16945,17216,17218,17234,17235],"fullWord":17235},{"subwords":[716,950,1196,1197,5619,5918,5921,9801,9836,9843,9845,9865,9870,12229,12311,12312,15939,15986,15995,16007,16103,16270,16944,16992,17216,17219,17234,17236,18287,21047,21049,21059,21062,21097,21105,21120,21122,21130],"fullWord":17236},{"subwords":[5918,5984,5998,6000,6031,6039,6042,12339,12367,16319,16335,16340,16341,16342,16394,16425,16429,17237,17238],"fullWord":17238},{"subwords":[5918,12339,16319,16335,17239,21251,21252,21255],"fullWord":17239},{"subwords":[5918,6189,6198,12339,16319,16335,17240,18287,21120,21122,21130,21251,21252,21255],"fullWord":17240},{"subwords":[9207,9276,9284,9307,9913,9929,9941,12418,12423,16178,16769,16772,16778,16779,16858,16876,16878,16881,16903,16954,16974,16978,16985,17241,17242],"fullWord":17242},{"subwords":[4714,4774,4785,4810,4826,4935,4939,4985,4988,4990,4991,4992,5007,5023,5037,5367,5865,5875,5918,5996,6000,9111,9127,9307,9384,9385,9389,9409,12358,12359,15060,15087,15175,15177,15227,15230,15296,15428,15433,15436,15443,15491,15493,15500,15501,15526,15527,16381,16439,16780,16858,16860,16889,16890,16891,16893,17243,17244,17722],"fullWord":17244},{"subwords":[6593,6619,9135,9307,16858,16881,16903,17245,17246],"fullWord":17246},{"subwords":[6593,6619,9134,9135,9307,16858,17245,17247,21144,21145],"fullWord":17247},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5014,5021,5037,5865,5875,5918,6033,9111,9127,9307,12453,12459,13478,13488,13520,13539,13544,13546,13549,13558,13705,13710,13716,13765,13769,13771,13772,13798,14421,16381,16780,16858,16860,16883,17243,17248,17249,17250,17530,17539,17562,17580,17582,17583],"fullWord":17250},{"subwords":[5918,5996,6000,6033,9307,9384,9389,9409,12453,12459,13520,13539,13549,13558,13577,13588,13705,13712,13715,13716,13765,13769,13772,13798,14262,14281,14309,14336,14403,14421,15175,15177,15248,15262,15264,15272,15296,15305,15500,15508,15509,15511,15512,15514,15524,15526,15527,16439,16858,16860,16883,16889,16890,16893,17248,17249,17251,17565,17580,17582,17591,17722],"fullWord":17251},{"subwords":[5918,6033,6039,9307,12367,12453,12459,13520,13539,13549,13558,13705,13716,13765,13769,13772,13798,13844,14421,16858,16860,16861,16881,16883,16888,16903,17248,17249,17252,17254,17567,17580,17582,17585,17588],"fullWord":17252},{"subwords":[9307,12453,12458,12459,13765,13798,13807,13813,13828,13829,14421,16858,16883,16887,17248,17253,17580,17589,17697,21144,21145,21146,21152],"fullWord":17253},{"subwords":[3272,3305,3316,3317,3328,3331,3429,4238,4241,8612,8660,8663,8678,8679,8685,8688,8691,8935,9207,9213,9307,9318,9325,9440,9447,12463,12471,12612,16178,16629,16653,16769,16858,16874,16907,17255,17256,18731,18738,18742,18823,18830,18894,18919,18947],"fullWord":17256},{"subwords":[5799,5918,6107,6110,9307,9416,10414,10415,10433,10471,10481,10485,10486,10536,10544,10548,10551,10625,10634,10654,10711,10714,10715,10719,12387,12438,12439,12442,16858,16860,17258,20004,20007,20008,20012,20129,20134,20144,20152,20157,20161,20167,20197],"fullWord":17258},{"subwords":[2042,2048,2127,2153,2156,2300,2304,12481,12483,12489,12560,12573,17259,17260,17308,17383,17472,21183],"fullWord":17260},{"subwords":[5172,5188,5221,5229,12493,12501,12560,17262,17263,17323,17332,17383,17395,17397,17434],"fullWord":17263},{"subwords":[12560,12905,12936,14112,17264,17265,17383,17395,17397,17406,17414,17434,17633,17634],"fullWord":17265},{"subwords":[12560,12573,12905,12936,14112,14115,14187,17264,17266,17383,17397,17406,17472,17633,17635,17697,21183],"fullWord":17266},{"subwords":[12560,12574,12591,12887,17267,17268,17278,17279,17383,17395,17397,17399,17404,17434,17435,17436,19036,19057,19060,19125],"fullWord":17268},{"subwords":[12560,12573,12574,12591,12887,17267,17269,17278,17383,17397,17399,17405,17435,17472,17914,18018,19036,19057,19059,19060,19186,19191,19192,19193,19195,21183],"fullWord":17269},{"subwords":[5918,5953,5955,12506,12543,12560,12561,12876,12879,12906,12908,13150,13151,17270,17383,17397,21255,21297,21301,21304,21310,21311],"fullWord":17270},{"subwords":[12560,12573,12912,17271,17383,17397,17472,21183,21304,21310,21311],"fullWord":17271},{"subwords":[4774,4785,4810,4826,5114,5115,5116,5117,5172,5176,5188,5216,5221,5223,5225,5392,5395,5865,5875,5918,5953,5955,6000,6004,12358,12359,12493,12499,12500,12501,12506,12548,12556,12560,12561,12562,12752,12755,12876,12879,12979,12982,13007,15060,15078,15081,15087,15227,15230,15238,15600,15603,15609,15610,15611,15676,15677,16381,16391,17272,17273,17323,17383,17387,17419],"fullWord":17273},{"subwords":[5918,5953,5955,6000,6004,6008,6016,12506,12548,12556,12560,12561,12876,12879,12979,12982,13007,15238,15610,15611,15676,16391,17272,17274,17383,17419,17423],"fullWord":17274},{"subwords":[5918,5953,5955,6000,6004,6039,12367,12506,12548,12556,12560,12561,12563,12876,12879,12979,12982,13007,15238,15610,15611,15676,15679,16391,16393,16397,17272,17275,17383,17388,17395,17419,17424,17434],"fullWord":17275},{"subwords":[12548,12560,12574,12591,13007,13008,13011,15691,15700,17276,17277,17278,17279,17383,17395,17429,17433,17434,17435,17436,19036,19057,19093,19105,19113,19125],"fullWord":17277},{"subwords":[12560,12573,12574,12591,17278,17280,17383,17435,17472,17914,18018,18969,19036,19057,19059,19130,19131,19144,19186,19195,19389,21183],"fullWord":17280},{"subwords":[12560,12574,12591,12597,12659,12663,12888,13055,13058,13059,13082,17278,17279,17281,17282,17383,17395,17434,17435,17436,18005,18008,18117,18130,19036,19057,19125,19434,19452,19780],"fullWord":17282},{"subwords":[12560,12573,12574,12591,12597,12659,12663,12888,13055,13059,13082,17278,17281,17283,17383,17435,17472,17914,18005,18018,18117,19036,19057,19059,19186,19195,19434,19452,19780,21183,21193],"fullWord":17283},{"subwords":[4774,4785,4826,4865,4873,5114,5117,5172,5176,5188,5221,5223,5277,5280,5282,5283,5865,5872,5873,5875,5909,5918,5953,5955,12390,12397,12493,12499,12500,12501,12506,12560,12561,12562,12606,12610,12752,12755,12876,12879,13110,13111,13112,13119,13120,13124,16381,16475,16481,17284,17285,17323,17383,17387,17464,17465,17469,20524,20531,20579,20581,20583,20584,20875,20877,20897],"fullWord":17285},{"subwords":[2505,2509,2577,2600,2668,2670,2696,2710,2714,12614,12618,12622,17288,17289,18035,18117],"fullWord":17289},{"subwords":[7759,7760,8151,8160,8180,8183,10981,10986,11012,11018,11024,17131,17139,17149,17292,17293,18117,18125,19590],"fullWord":17293},{"subwords":[183,197,200,950,952,4826,4835,5114,5117,5221,5223,12675,12677,12752,12755,15893,15939,16270,17294,17295,17323,17324],"fullWord":17295},{"subwords":[817,825,867,868,891,905,906,950,953,5588,5599,5976,5977,6004,10022,12675,12677,12680,12683,12835,12836,12979,12982,13007,14798,14802,14881,15610,15611,15673,15676,15939,16270,16286,16419,17294,17296,17303,17419],"fullWord":17296},{"subwords":[183,197,200,228,732,733,739,779,961,4826,5114,5117,5200,5204,5221,5223,5956,6033,12752,12755,12916,12925,12936,13171,13177,13336,13338,13343,13439,13461,13478,13488,13607,14020,14023,14166,14167,15893,16014,16270,17298,17299,17323,17324,17406,17476,17481,17530],"fullWord":17299},{"subwords":[228,732,735,737,739,775,779,817,825,891,905,906,961,966,5588,5599,5956,5976,5977,6004,6033,12680,12683,12916,12923,12924,12925,12936,12979,12982,13007,13286,13294,13299,13321,13322,13336,13338,13343,13439,13455,13459,13461,13577,13607,14147,14149,14166,14168,14246,14262,14281,14350,14351,14383,14384,14403,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15610,15611,15663,15668,15673,15676,16014,16016,16270,16286,16419,17298,17300,17303,17406,17419,17476,17494,17495,17523,17638],"fullWord":17300},{"subwords":[183,191,194,197,200,817,825,891,905,906,4516,4520,4607,4611,4810,4826,5114,5115,5116,5117,5216,5217,5221,5223,5225,5588,5599,5976,5977,6004,12680,12681,12683,12752,12755,12979,12980,12982,13007,14736,14751,14881,14882,14961,14965,15060,15078,15081,15087,15561,15563,15600,15603,15609,15610,15611,15673,15676,15677,15893,16030,16270,16286,16419,17303,17304,17323,17324,17419],"fullWord":17304},{"subwords":[817,825,891,905,906,5588,5599,5976,5977,6004,6008,6016,12680,12683,12979,12982,13007,14872,14881,14883,14983,14988,15570,15573,15610,15611,15673,15676,16270,16286,16419,17303,17305,17419,17423],"fullWord":17305},{"subwords":[1560,1574,2042,2048,2058,2059,2062,2069,4618,4629,4826,5114,5117,5221,5223,5632,5635,12752,12755,17308,17309,17323],"fullWord":17309},{"subwords":[2042,2048,2072,2073,2205,2208,2446,2476,5632,5635,6004,12959,12964,12979,12982,13007,14995,15014,15576,15579,15582,15590,15610,15611,15676,16423,17308,17310,17312,17419],"fullWord":17310},{"subwords":[1713,1716,1721,1736,1851,1858,1881,1884,1887,1889,2099,2237,9447,12700,12701,12702,12704,16457,16765,16907,16911,17308,17311,17435,18540,18844,18850,18947,18981,18985],"fullWord":17311},{"subwords":[1715,2072,2073,2205,2208,2230,2446,2476,6004,6039,12959,12964,12979,12982,13007,14995,15014,15576,15579,15582,15590,15610,15611,15676,15679,16423,17308,17312,17313,17315,17419,17424,17434],"fullWord":17313},{"subwords":[2119,2668,6821,6822,6823,6845,6868,6870,6999,7003,10323,10748,10758,17096,17308,17314,17354,17442,18035,19580,19581],"fullWord":17314},{"subwords":[3898,3902,3929,3938,4106,6004,6023,12965,12971,12979,12982,13007,15021,15048,15592,15599,15610,15611,15676,16198,16298,17316,17317,17419],"fullWord":17317},{"subwords":[337,340,487,2813,3402,3403,3597,3600,3685,3688,3701,3702,3703,10072,10181,10760,10767,12812,12822,15880,15931,15942,16178,16179,16769,16837,17316,17318,17350,17354,17364],"fullWord":17318},{"subwords":[3638,3644,3649,3656,3657,3658,3697,3698,3699,4639,4651,4655,4656,4826,4835,5096,5099,5103,5104,5114,5117,5221,5223,6023,12752,12755,16298,17316,17319,17320,17323],"fullWord":17320},{"subwords":[3697,3699,3940,3958,3965,3968,3970,3971,4238,4241,6023,6057,16205,16298,16304,16457,17316,17319,17321,17435,17889,17899,18981,18985,19010,19014],"fullWord":17321},{"subwords":[4826,5114,5117,5221,5223,5224,12745,12751,12752,12755,17323,17326],"fullWord":17326},{"subwords":[4774,4785,4826,5114,5117,5172,5176,5188,5221,5223,5224,5865,5875,5918,5953,5955,12493,12499,12500,12501,12506,12560,12561,12562,12745,12751,12752,12755,12876,12879,16381,17323,17327,17383,17387],"fullWord":17327},{"subwords":[4971,4983,5037,5163,5171,5221,5523,5524,9127,9369,9422,9449,9450,11626,11641,11763,11772,11831,11841,11845,11849,11854,12091,12097,12760,12761,12872,13048,17323,17329,18083,18103,18112],"fullWord":17329},{"subwords":[5163,5171,5193,5195,5221,11831,11844,11845,11921,11923,11924,11925,11941,12872,17323,17330,17331,17472,21096,21154],"fullWord":17331},{"subwords":[5984,6004,6005,6092,6100,6104,12979,12982,13007,13095,13099,15337,15354,15610,15611,15676,15728,15732,16319,16340,16425,16449,16453,16472,17333,17419,19992,19996,19998,20000,20070,20073,20077],"fullWord":17333},{"subwords":[252,253,828,905,973,6308,6328,6330,6940,6941,6992,7103,12672,12674,12680,12683,13007,15673,17303,17306,17334,17335,17336,17337,17434],"fullWord":17336},{"subwords":[6647,6651,6654,6900,9135,9447,12771,12783,12785,16801,16907,17338,17340,17435,17858,18851,18854,18947,18986,18988],"fullWord":17338},{"subwords":[5705,5706,5918,5950,5953,5955,6453,6463,6874,6879,6925,6927,12368,12374,12376,12506,12560,12561,12574,12581,12585,12591,12785,12786,12876,12879,12884,16399,16457,16461,17278,17340,17341,17383,17435,17834,17909,18607,18624,18981,18985,19036,19038,19042,19057],"fullWord":17341},{"subwords":[5705,5706,5950,6004,6018,6495,6496,6874,6879,6940,6955,6959,6960,6982,6983,6984,6987,6997,7073,7074,7103,7106,7117,12785,12787,12979,12982,13007,13008,13011,15114,15134,15135,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16431,16457,17340,17342,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,19243],"fullWord":17342},{"subwords":[5705,5706,5950,6425,6543,6647,6651,6654,6874,6879,6881,6900,9135,9447,12785,16457,16801,16907,16911,17340,17343,17435,18844,18850,18947,18981,18985],"fullWord":17343},{"subwords":[6854,10788,10791,10792,10896,10897,10901,12785,17113,17149,17340,17344,17346,17354,17435,17472,18018,19186,19195],"fullWord":17344},{"subwords":[4826,5114,5117,5123,5125,5127,5139,5221,5223,5709,5715,5718,5721,7460,7522,7782,7785,7790,12752,12755,17323,17347],"fullWord":17347},{"subwords":[5716,5718,5721,5918,5953,5955,7493,7511,7604,7611,7790,7815,9307,9360,9366,12506,12509,12512,12516,12560,12561,12876,12879,16345,16815,16858,16860,16866,16867,17349,17383,17389],"fullWord":17349},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5114,5117,5146,5148,5221,5223,5728,5756,5760,9110,9111,9117,9121,9125,9126,9127,9416,9417,10378,10414,10415,10443,10447,10530,10533,10534,10535,10536,10537,10551,10780,10782,10888,12752,12755,12812,12815,12822,12837,12841,12842,12844,12845,12848,16780,16784,16837,16838,17044,17068,17069,17097,17323,17350,17351,17354,17357,17359,17360,17364,17365],"fullWord":17351},{"subwords":[5735,5984,5995,6004,6005,9384,9389,9409,12979,12982,13007,13022,15526,15610,15611,15676,16319,16340,16425,16889,16890,16892,17353,17419,17722],"fullWord":17353},{"subwords":[93,96,399,400,407,472,473,487,2813,3021,3555,3597,3600,3701,3702,3703,3708,3709,5650,6023,10072,10073,10077,10181,10324,10360,10443,10447,10760,10888,12845,12848,15880,15942,15948,16121,16270,16274,16298,17097,17316,17354,17355,17359],"fullWord":17355},{"subwords":[4728,4810,4826,5114,5115,5116,5117,5146,5148,5216,5221,5223,5225,5756,5760,6004,10378,10443,10447,10780,10782,10878,10881,10882,10883,10888,10889,12752,12755,12837,12839,12844,12845,12848,12979,12982,13007,15060,15078,15081,15087,15299,15600,15603,15609,15610,15611,15621,15622,15676,15677,17044,17097,17323,17354,17357,17358,17359,17360,17419,17420],"fullWord":17358},{"subwords":[5780,5781,10443,10447,10495,10496,10888,11065,11066,12845,12848,13147,16368,17097,17149,17354,17359,17361,17472,21110,21114,21130],"fullWord":17361},{"subwords":[5782,5784,5845,5918,5953,5955,10422,10423,10433,10443,10444,10447,10822,10888,11500,11501,11512,11524,11567,11870,11871,11891,11915,12504,12505,12506,12522,12525,12527,12560,12561,12845,12848,12866,12868,12872,12876,12879,17097,17354,17359,17362,17382,17383],"fullWord":17362},{"subwords":[5037,5221,9125,9126,9127,10530,10533,10534,10535,12812,12822,12837,12844,16837,17068,17323,17350,17354,17357,17364,17365,17366],"fullWord":17366},{"subwords":[5037,5221,9125,9126,9127,10530,10533,10534,10535,10833,10854,12812,12822,12837,12844,12850,12851,13024,16837,17068,17323,17350,17354,17357,17364,17365,17367,17370],"fullWord":17367},{"subwords":[5037,5221,5229,9125,9126,9127,10530,10533,10534,10535,10893,12812,12822,12837,12844,16837,16839,16903,17068,17323,17332,17350,17352,17354,17357,17364,17365,17368,17434],"fullWord":17368},{"subwords":[7604,7611,9307,9360,9366,10637,10641,10642,10652,10653,10654,10663,10664,10793,10811,10814,10815,10826,10831,10892,12438,12442,12509,12512,12560,12812,12822,16815,16837,16858,16866,17083,17099,17350,17354,17364,17369,17383,17389],"fullWord":17369},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5756,5760,10378,10443,10447,10780,10782,10833,10854,10855,10856,10888,12752,12755,12837,12844,12845,12846,12847,12848,12894,13024,17044,17097,17323,17354,17357,17359,17360,17370,17371],"fullWord":17371},{"subwords":[10443,10447,10459,10460,10465,10470,10888,10896,10897,10901,10905,10925,10929,10931,11044,11050,11053,12845,12848,13053,13055,13059,13082,16402,16457,17097,17113,17128,17147,17354,17359,17373,17435,17442,17903,18066,18074,18981,18985,19017,19159,19422,19605,19876],"fullWord":17373},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5267,5269,5756,5760,10378,10443,10447,10471,10488,10780,10782,10888,10935,10936,10940,12752,12755,12837,12844,12845,12848,17044,17097,17323,17354,17357,17359,17360,17374,17375,20017,20018,20250,20251,20252],"fullWord":17375},{"subwords":[6004,10443,10447,10471,10488,10882,10883,10888,10889,10935,10938,10939,10940,12845,12848,12979,12982,13007,13095,13099,15337,15354,15610,15611,15621,15622,15676,15728,15732,16453,17097,17354,17359,17374,17376,17419,17420,20070,20077,20250,20251,20252],"fullWord":17376},{"subwords":[6039,10443,10447,10453,10471,10488,10787,10888,10891,10893,10935,10940,12845,12848,17097,17098,17354,17359,17363,17374,17377,17434,20250,20251,20252],"fullWord":17377},{"subwords":[1700,1701,1711,2072,2073,2205,2208,2446,2476,5845,6004,11539,11817,11823,11970,11973,11987,12861,12862,12872,12959,12964,12979,12982,13007,14995,15014,15202,15224,15576,15579,15582,15590,15610,15611,15627,15632,15638,15676,16423,17308,17312,17380,17381,17382,17419],"fullWord":17380},{"subwords":[1700,1701,1711,2072,2073,2205,2208,2446,2476,5845,6004,11539,11817,11823,11970,11973,11987,12861,12862,12872,12959,12964,12979,12982,13007,14995,15014,15202,15224,15576,15579,15582,15590,15610,15611,15627,15632,15638,15676,16423,17308,17312,17380,17381,17382,17419],"fullWord":17381},{"subwords":[905,909,910,973,987,12548,12560,12680,12683,13007,14821,15568,15569,15673,15986,16009,17303,17306,17383,17384,17385,17395,17434],"fullWord":17385},{"subwords":[596,693,711,12283,12293,12560,12574,12575,12591,12686,12692,15986,16011,16041,16042,17278,17383,17386,17435,17885,18408,18428,18432,18435,19036,19057],"fullWord":17386},{"subwords":[3417,3689,3692,3777,3814,9097,9099,9207,9307,9360,9366,12560,16178,16180,16181,16769,16779,16858,16881,16903,17316,17383,17391,17392,17395,17434],"fullWord":17392},{"subwords":[5918,5953,5955,12353,12355,12368,12374,12376,12506,12528,12533,12535,12560,12561,12574,12581,12585,12591,12876,12879,12884,16399,16457,16461,17278,17383,17393,17435,17834,17909,18607,18619,18620,18624,18981,18985,19036,19038,19042,19054,19056,19057],"fullWord":17393},{"subwords":[5918,5953,5955,6000,6004,12506,12543,12545,12548,12556,12560,12561,12876,12879,12979,12982,13007,15238,15610,15611,15676,16391,17272,17383,17397,17398,17419],"fullWord":17398},{"subwords":[4826,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,12752,12755,16457,17323,17399,17400,17435,17915,18575,18981,18983,18985,19060],"fullWord":17400},{"subwords":[6071,8586,8725,8730,8838,8842,8881,8887,8892,8901,8935,12809,12810,12895,12898,16457,16574,16676,16686,16691,16704,16705,17399,17401,17402,17435,18697,18743,18758,18981,18985,19060,19123],"fullWord":17402},{"subwords":[8838,8842,8887,8891,8892,8901,8935,12809,12810,12895,12898,16686,16690,16691,16692,16704,16707,17399,17401,17403,17404,17434,17435,17436,18743,19060,19123,19125],"fullWord":17403},{"subwords":[12905,12936,13007,14127,14350,14383,14403,17406,17410,17411,17414,17434,17636,17637],"fullWord":17411},{"subwords":[4826,5114,5117,5200,5204,5221,5223,6033,12752,12755,12916,12925,12933,12936,13478,13488,13569,13573,13607,14020,14023,14130,14131,14133,14144,14166,14167,14237,17323,17406,17412,17530],"fullWord":17412},{"subwords":[1560,1574,2058,2059,2062,2069,2072,2073,2205,2207,2208,2384,2446,2476,4618,4629,4810,4826,5114,5115,5116,5117,5216,5221,5223,5225,6004,12752,12755,12959,12960,12964,12979,12982,13007,14995,15014,15060,15078,15081,15087,15576,15579,15580,15582,15590,15600,15603,15609,15610,15611,15676,15677,16423,17308,17312,17323,17415,17419],"fullWord":17415},{"subwords":[1713,1716,1721,1736,2072,2073,2205,2208,2219,2220,2237,2446,2476,6004,6018,12959,12964,12979,12982,13007,13008,13011,14995,15014,15306,15312,15576,15579,15582,15590,15610,15611,15676,15691,15694,15695,15700,15748,16423,16457,17308,17312,17416,17419,17429,17435,17924,17980,18540,18981,18985,19093,19101,19103,19113],"fullWord":17416},{"subwords":[1851,1858,2209,2439,2441,2446,2476,3617,3624,3693,3694,4151,4152,9409,12700,12701,12959,12964,12965,12971,13007,15402,15410,15576,15590,15592,15599,16178,16765,16769,16889,17308,17316,17417,17722],"fullWord":17417},{"subwords":[4928,4931,4933,5037,5212,5216,5219,5221,9127,9409,12745,12751,13007,15428,15443,15600,15609,16889,17323,17418,17722],"fullWord":17418},{"subwords":[6004,6039,10443,10447,10453,10458,10787,10882,10883,10888,10889,10890,10891,10893,12845,12848,12979,12982,13007,15610,15611,15621,15622,15676,15679,17097,17098,17354,17359,17363,17419,17420,17421,17424,17434],"fullWord":17421},{"subwords":[6004,10443,10447,10495,10496,10882,10883,10887,10888,10889,11065,11066,11074,11075,12845,12848,12979,12982,13007,13145,13146,13147,15201,15610,15611,15621,15622,15676,15690,15866,15867,17097,17149,17150,17354,17359,17419,17420,17422,17472,21130,21189,21190,21212],"fullWord":17422},{"subwords":[6004,6018,6039,12979,12982,13007,13008,13011,15306,15309,15312,15610,15611,15676,15679,15680,15691,15694,15695,15700,15748,16457,16464,17419,17424,17425,17429,17433,17434,17435,17436,17924,17926,18981,18985,19093,19101,19103,19113,19125,19127,19253],"fullWord":17425},{"subwords":[6004,6008,6016,10443,10447,10882,10883,10888,10889,12845,12848,12979,12982,13007,15610,15611,15621,15622,15676,17097,17354,17359,17419,17420,17423,17426],"fullWord":17426},{"subwords":[13007,15734,15744,17427,17464,20903,20925],"fullWord":17427},{"subwords":[4810,4826,5114,5115,5116,5117,5118,5216,5221,5223,5225,5233,5234,5237,5239,5240,5241,5245,5360,6004,6018,12752,12755,12979,12982,13007,13008,13011,15060,15078,15081,15087,15306,15312,15318,15600,15603,15609,15610,15611,15676,15677,15691,15694,15695,15700,15748,16457,17323,17419,17429,17430,17435,17924,17925,17981,18575,18981,18983,18985,19093,19101,19103,19113,19310,19311],"fullWord":17430},{"subwords":[6004,6008,6016,6018,12979,12982,13007,13008,13011,15301,15306,15312,15330,15610,15611,15676,15688,15691,15694,15695,15700,15748,16457,17419,17423,17429,17431,17435,17924,18652,18981,18985,19093,19101,19103,19113],"fullWord":17431},{"subwords":[6004,6018,9384,9389,9409,9447,12979,12982,13007,13008,13011,13022,15306,15312,15504,15507,15526,15542,15543,15610,15611,15676,15691,15694,15695,15700,15748,16457,16889,16890,16907,16911,17419,17429,17432,17435,17722,17881,17924,18844,18847,18849,18850,18941,18943,18945,18946,18947,18981,18985,19093,19101,19103,19104,19113,19114,19277,19292,19294,19313],"fullWord":17432},{"subwords":[4826,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,12752,12755,16457,17323,17435,17437,17846,18575,18662,18981,18983,18985,19130,19131,19134,19135,19140,19144],"fullWord":17437},{"subwords":[183,197,200,605,610,712,1053,4492,5172,5173,5188,5221,5507,5522,5523,5524,12493,12501,12503,12560,12597,12888,15893,15986,15988,17323,17324,17383,17438,17445,18058,18117,19664,19871],"fullWord":17438},{"subwords":[7871,8166,8731,8737,8951,8958,12810,17434,17439,17440,19583,19584,19592],"fullWord":17440},{"subwords":[7556,7871,7874,7875,7877,7886,7887,8166,8171,8173,8175,8176,8731,8737,8887,8892,8901,8935,8951,8958,9026,9027,12810,13046,13047,13055,13059,13082,16704,16709,16753,17435,17439,17441,17460,18743,18759,18762,18796,18797,18802,18993,19001,19123,19151,19152,19418,19421,19486,19583,19584,19592],"fullWord":17441},{"subwords":[4728,4826,4849,5114,5117,5146,5148,5221,5223,5263,5471,5472,5476,5478,5496,5523,5524,5756,5760,10378,10443,10447,10470,10780,10782,10888,10906,10925,10926,12752,12755,12837,12844,12845,12848,13053,16402,17044,17097,17128,17129,17323,17354,17357,17359,17360,17442,17443,18066,18067,19876,19877],"fullWord":17443},{"subwords":[5172,5188,5221,5229,5507,5522,5523,5524,12493,12501,12503,12560,12597,12888,17323,17332,17383,17395,17434,17445,17446,18062,18117,18130,19664],"fullWord":17446},{"subwords":[4826,4849,5114,5117,5200,5204,5221,5223,5263,5471,5478,5523,5524,5525,5526,5531,6033,12752,12755,12916,12925,12936,12945,13478,13488,13607,14020,14023,14166,14167,14416,14417,14438,14441,14551,17323,17406,17447,17448,17530,17675,17676,18066,18067,18135,18136,19825,19876,19877],"fullWord":17448},{"subwords":[3898,3902,3929,3991,4224,4268,4271,4312,4326,4330,4350,4351,5654,5655,5656,6004,6023,12965,12971,12979,12982,13007,13051,13052,15021,15048,15592,15599,15610,15611,15676,15706,15708,15716,15777,15782,15840,16198,16210,16298,17316,17419,17451,17452,18056,18066,18071,18150,19876,19880],"fullWord":17452},{"subwords":[4810,4826,4849,5114,5115,5116,5117,5216,5221,5223,5225,5260,5263,5265,5471,5478,5523,5524,6004,12752,12755,12979,12982,13007,13051,13052,15060,15078,15081,15087,15600,15603,15609,15610,15611,15676,15677,15706,15708,15716,15717,15773,15777,15778,15782,15840,17323,17419,17451,17453,18060,18066,18067,18071,18150,19846,19876,19877,19880],"fullWord":17453},{"subwords":[6004,6008,6016,12979,12982,13007,13051,13052,15610,15611,15676,15706,15708,15716,15718,15777,15780,15781,15782,15840,17419,17423,17451,17454,18066,18071,18150,18152,19876,19880],"fullWord":17454},{"subwords":[10887,10922,10923,10924,10928,13007,13051,13052,15690,17141,17149,17354,17442,17451,17455,17472,18165,21193,21196,21198,21212],"fullWord":17455},{"subwords":[4826,4849,5114,5117,5221,5223,5227,5229,5263,5266,5471,5478,5523,5524,6039,12752,12755,17323,17332,17434,17457,17458,18062,18066,18067,18073,19876,19877,19882],"fullWord":17458},{"subwords":[6039,17434,17457,17459,18066,18073,19876,19882],"fullWord":17459},{"subwords":[8887,8891,8892,8901,8935,9026,9027,12810,13055,13058,13059,13082,16704,16707,16709,16710,16753,16757,17434,17435,17436,17460,17461,18743,18759,18762,18802,19123,19125,19486,19592],"fullWord":17461},{"subwords":[9447,16457,16907,16911,17435,17462,17938,18844,18850,18947,18981,18985,19165,20088,20095,20097,20101,20129,20134,20197,20265,20269],"fullWord":17462},{"subwords":[905,909,12548,12560,12598,12600,12680,12683,13007,13087,14821,15568,15569,15673,15986,16083,17303,17383,17384,17463,19948,19957,20262],"fullWord":17463},{"subwords":[6004,6039,12979,12982,13007,13110,13112,15302,15304,15610,15611,15676,15679,15734,15744,16445,16475,16482,17419,17424,17434,17464,17466,17467,17470,18272,20875,20877,20933,20947,20950],"fullWord":17467},{"subwords":[7604,7611,7892,7894,9307,9360,9366,12509,12512,12560,12606,12610,13113,13119,13124,16815,16858,16866,17284,17383,17389,17464,17468,17469,18239,18246,20742,20749,20774,20790,20792,20804,20806,20807,20897],"fullWord":17468},{"subwords":[93,94,96,200,732,733,739,779,961,2766,2771,2782,2921,2922,2923,2926,2938,3021,3022,4048,4237,4431,4432,4639,4826,5956,6023,6033,13154,13155,13156,13159,13167,13171,13177,13336,13439,13461,13478,13488,15880,15893,16014,16114,16139,16140,16270,16298,17476,17477,17478,17481,17525,17530],"fullWord":17478},{"subwords":[93,96,121,123,732,735,737,739,775,779,796,810,817,825,905,906,961,966,2921,2922,2924,2925,2926,2938,2941,2954,2960,2987,2989,2995,3001,3021,3037,4048,4077,4078,4080,4082,4237,5588,5599,5956,5976,5977,6023,6025,6033,13154,13155,13157,13158,13159,13167,13286,13294,13299,13321,13322,13323,13336,13439,13455,13459,13461,13577,14262,14281,14403,14717,14722,14851,14852,14856,14866,14881,14891,14979,14982,15021,15025,15026,15048,15248,15272,15305,15880,16014,16139,16142,16145,16152,16223,16224,16270,16286,16298,16419,17476,17477,17479,17494,17495,17523,17525],"fullWord":17479},{"subwords":[93,96,732,739,779,780,961,972,973,2921,2922,2926,2938,3021,3024,3165,4048,4237,5956,6023,6033,6039,13154,13155,13159,13167,13336,13344,13345,13439,13461,15880,15892,16014,16020,16139,16141,16270,16291,16298,16303,17476,17477,17480,17507,17525,17529],"fullWord":17480},{"subwords":[148,158,200,732,733,739,779,961,4438,4445,4590,4594,4826,5659,5956,6033,13171,13177,13336,13439,13461,13478,13488,15893,16014,16270,17476,17481,17482,17530],"fullWord":17482},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":17483},{"subwords":[200,732,733,739,779,780,961,972,973,4826,5956,6033,6039,13171,13177,13336,13344,13345,13346,13439,13461,13478,13488,15893,16014,16020,16270,16291,17476,17481,17484,17507,17530],"fullWord":17484},{"subwords":[200,326,336,961,1180,4461,4901,5014,5021,5037,9127,13171,13177,13190,13336,13422,13839,13874,14421,15893,15928,16014,16015,16098,16883,16922,17476,17485],"fullWord":17485},{"subwords":[442,461,481,486,961,972,973,10182,10194,10236,13204,13217,13222,13232,13336,13344,15942,16014,16020,17019,17020,17476,17489,17507],"fullWord":17489},{"subwords":[950,957,961,972,973,987,9965,12257,12269,13239,13259,13336,13344,15986,16007,16009,16014,16020,17220,17222,17476,17490,17491,17492,17493,17507],"fullWord":17492},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":17496},{"subwords":[732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,6008,6016,6033,13286,13294,13297,13298,13299,13321,13322,13325,13336,13439,13455,13459,13461,13577,14262,14281,14403,14851,14852,14854,14855,14856,14866,14872,14881,14883,14891,14893,14979,14982,14983,14988,15248,15272,15305,16014,16270,16286,16419,17476,17494,17495,17497,17523],"fullWord":17497},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":17498},{"subwords":[269,279,280,732,735,737,739,775,779,817,825,905,906,961,966,5588,5599,5956,5976,5977,5988,5992,6033,7365,7366,7368,7369,7370,7373,7375,7391,7396,7408,7410,7461,7463,7935,7936,7939,7940,13184,13186,13187,13286,13294,13299,13321,13322,13336,13439,13455,13459,13461,13516,13519,13577,14262,14281,14403,14758,14762,14764,14773,14851,14852,14856,14866,14881,14891,14979,14982,15141,15248,15272,15305,15910,15912,15914,16014,16026,16270,16286,16419,17476,17494,17495,17499,17523],"fullWord":17499},{"subwords":[867,868,905,950,957,961,972,973,13286,13306,13311,13321,13336,13344,14403,14851,14866,14891,14894,16014,16020,17476,17494,17500,17501,17504,17507],"fullWord":17501},{"subwords":[867,868,905,950,961,9801,13286,13306,13311,13321,13336,13424,13436,14258,14261,14403,14410,14851,14866,14891,14895,14939,14944,15864,15865,16014,16103,16992,17476,17494,17500,17502,17518,17655,17672,17697,21047,21049,21064,21067,21212],"fullWord":17502},{"subwords":[905,961,13286,13320,13321,13336,13424,13436,14258,14261,14403,14410,14851,14866,14891,14895,14939,14944,15864,15865,16014,16103,17476,17494,17503,17518,17655,17672,17697,21064,21067,21212],"fullWord":17503},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":17505},{"subwords":[730,781,905,911,918,925,961,13286,13287,13289,13321,13328,13333,13336,13352,13353,13364,13385,14247,14252,14403,14427,14851,14866,14867,14891,14898,14899,14912,16014,16041,16054,17476,17494,17506,17510,17652,17773,17948,18436,18448,18449,18467,18469,18472,19221,19222,19381,19386],"fullWord":17506},{"subwords":[574,579,961,972,973,11270,11275,11330,11348,12082,13336,13344,15973,16014,16020,16037,17476,17507,17508,17509],"fullWord":17509},{"subwords":[732,739,779,780,781,961,972,973,982,990,1009,5616,5618,5620,5626,5956,6033,6039,6055,13336,13344,13345,13352,13355,13359,13362,13364,13367,13374,13385,13439,13461,13464,13465,13609,13612,13613,13626,14422,14427,16014,16020,16041,16043,16046,16270,16291,16293,16296,16409,16410,16414,16457,16464,17476,17507,17510,17511,17512,17514,17769,17836,17838,18436,18437,18441,18448,18487,18541,18559,19386],"fullWord":17512},{"subwords":[325,732,739,779,781,932,961,1009,5616,5620,5626,5956,6033,6055,8228,8321,8324,8362,8367,8371,8373,8378,8381,8385,8391,8450,8452,8461,8467,8549,8586,8935,13336,13352,13355,13364,13367,13374,13375,13377,13385,13439,13461,13464,13465,13609,13613,13626,13643,14427,16014,16041,16043,16270,16293,16409,16410,16457,16543,16559,16574,17476,17510,17511,17513,17770,17836,18436,18437,18441,18448,18541,18559,18697,19386],"fullWord":17513},{"subwords":[647,691,961,1124,9307,12257,12269,12453,12459,13193,13196,13239,13259,13336,13765,13798,13839,14421,15986,16014,16858,16883,17220,17248,17476,17486,17490,17515,17580,19920,19948,19957,20107,20115,20152,20154,20167,20177,20180,20191],"fullWord":17515},{"subwords":[961,972,973,987,1158,1161,12257,12269,13239,13259,13336,13344,13408,13415,13420,13421,15986,16009,16014,16020,16089,16095,16096,17220,17222,17476,17490,17493,17507,17516,17517,18195,18200,18201,18202,20393,20449,20454,20455],"fullWord":17517},{"subwords":[200,732,733,739,779,961,1196,1197,4578,4582,4826,5567,5572,5619,5956,6033,6038,13171,13177,13336,13424,13425,13436,13439,13461,13478,13488,15893,16014,16103,16270,17476,17481,17518,17519,17530,17697,21064,21067,21096,21097,21105,21127,21130],"fullWord":17519},{"subwords":[732,739,779,780,950,957,961,972,973,5956,6033,6039,13336,13344,13345,13439,13446,13448,13461,15939,15940,16014,16020,16270,16291,17476,17487,17507,17521,17522],"fullWord":17522},{"subwords":[732,735,737,739,775,779,780,817,825,905,906,907,961,966,967,972,973,5588,5599,5956,5976,5977,6033,6039,13286,13294,13299,13321,13322,13326,13336,13344,13345,13349,13439,13455,13459,13461,13577,14262,14281,14283,14403,14851,14852,14856,14866,14881,14885,14891,14894,14979,14982,15248,15252,15272,15305,16014,16020,16270,16286,16290,16291,16419,17476,17494,17495,17498,17504,17505,17507,17523,17524],"fullWord":17524},{"subwords":[3119,4046,4048,4237,5959,5961,6023,6033,9079,9085,13489,13510,13702,13705,13706,13709,13716,14421,16178,16298,16319,16336,16769,16883,17525,17526,17550,17553],"fullWord":17526},{"subwords":[3165,4048,4237,6023,6033,6039,13472,13475,16298,16303,17525,17527,17528,17529],"fullWord":17528},{"subwords":[3119,3246,3247,4048,4237,6023,6033,8483,8549,13489,13510,16298,16319,16336,16574,16586,17525,17531],"fullWord":17531},{"subwords":[4673,4677,4680,4826,6031,6033,6039,6042,13478,13483,13488,13489,13490,13510,16319,16320,16323,16336,16338,16342,17530,17532,17533],"fullWord":17533},{"subwords":[4673,4677,4680,4826,5567,5572,6033,6038,6189,6191,6198,13478,13483,13488,13489,13490,13510,16319,16320,16324,16336,16339,17530,17532,17534,17697,21096,21127,21130],"fullWord":17534},{"subwords":[5780,5781,6033,6039,10453,16368,16370,17535,17536],"fullWord":17536},{"subwords":[3119,3139,4048,4237,5856,5918,6023,6033,12339,13489,13499,13501,13510,13539,13542,13547,13558,13559,16160,16298,16319,16335,16336,17525,17538],"fullWord":17538},{"subwords":[4774,4785,4826,5865,5875,5918,6033,6039,12367,13478,13488,13539,13544,13546,13558,16381,16384,17530,17539,17540],"fullWord":17540},{"subwords":[5845,6033,6039,11539,11569,12082,13577,13593,13595,14262,14281,14283,14403,15202,15224,15248,15272,15305,15747,17542,17543],"fullWord":17543},{"subwords":[4673,4677,4680,4826,4865,4873,6033,6118,6121,13478,13483,13488,13489,13490,13510,13630,13635,16319,16320,16336,16475,16477,17530,17532,17544,17545,18225,18228,20524,20531,20532,20533,20536,20547,20549],"fullWord":17545},{"subwords":[5984,6033,6118,6119,6120,6121,13489,13506,13508,13510,13577,13583,13584,13630,13635,14262,14281,14403,15248,15272,15292,15305,16319,16336,16340,16425,16475,16478,17544,17546,17658,18228,20532,20547,20549,20587],"fullWord":17546},{"subwords":[5984,6033,8483,8549,8552,8562,8568,8582,8584,8934,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,15248,15272,15305,16319,16336,16340,16425,16574,16586,16587,17548,17658],"fullWord":17548},{"subwords":[8664,8671,8678,8679,9307,12453,12459,12474,13651,13765,13798,13841,13874,14421,16629,16639,16858,16874,16883,16922,17248,17549,17580],"fullWord":17549},{"subwords":[961,968,969,972,973,2921,2938,3402,4046,4048,4237,13154,13167,13336,13344,13688,13690,13702,13839,13844,14421,15880,15892,16014,16020,16178,16769,16779,16883,16888,16903,17476,17507,17550,17551,17552,17559],"fullWord":17552},{"subwords":[4046,4048,4237,4639,4714,4826,4909,4913,4935,4939,5014,5021,5037,5040,5959,5961,6023,6033,9079,9082,9085,9111,9127,13478,13488,13702,13705,13710,13716,14421,16178,16298,16769,16780,16883,17525,17530,17550,17553,17554,17562],"fullWord":17554},{"subwords":[4046,4048,4158,4169,4237,5959,5961,6023,6033,9079,9085,9384,9389,9409,13577,13588,13702,13705,13712,13715,13716,14262,14266,14281,14294,14297,14309,14336,14403,14421,15021,15048,15248,15272,15305,15411,15415,15508,15509,15514,15524,15526,16178,16239,16298,16769,16883,16889,16890,17525,17550,17553,17555,17565,17591,17722],"fullWord":17555},{"subwords":[3165,4046,4048,4237,5959,5961,6023,6033,6039,9079,9085,13702,13705,13716,13840,13844,14421,16178,16298,16303,16769,16779,16883,16888,16903,17525,17529,17550,17553,17556,17559,17567],"fullWord":17556},{"subwords":[4046,4048,4237,5959,5961,6023,6033,6038,9079,9085,9101,13702,13705,13716,14421,16178,16298,16769,16883,17525,17550,17553,17557,17560,17697,21127,21130,21146,21147,21148,21152],"fullWord":17557},{"subwords":[4714,4810,4826,4935,4939,5014,5021,5023,5037,5367,5377,5379,6033,9111,9127,9384,9385,9389,9409,13478,13488,13577,13588,13705,13710,13712,13715,13716,14262,14281,14303,14305,14306,14309,14336,14337,14403,14421,15060,15076,15087,15248,15272,15305,15428,15433,15436,15443,15508,15509,15514,15524,15526,16780,16883,16889,16890,16891,17530,17561,17562,17565,17591,17593,17722],"fullWord":17561},{"subwords":[6033,6039,9416,9418,10414,10415,10453,10536,10551,10665,10672,10681,10684,13705,13716,13743,13745,13844,13961,13966,14421,16883,16888,16903,17088,17090,17563,17564,17567],"fullWord":17564},{"subwords":[6033,6039,9384,9389,9409,13577,13588,13705,13712,13715,13716,13844,14262,14281,14283,14309,14336,14338,14342,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15530,16883,16888,16889,16890,16895,16899,16903,17565,17566,17567,17591,17594,17722],"fullWord":17566},{"subwords":[7024,9134,9135,14418,14421,16883,17568,17569,17697,21146,21152],"fullWord":17569},{"subwords":[7612,7615,7635,7637,7874,9374,9447,12936,12937,12944,13721,13730,13850,13866,14032,14177,14182,14188,14201,14421,14427,16883,16907,17406,17435,17570,17598,17644,17921,18926,18936,18947,18993,19001,19075,19090,19386],"fullWord":17570},{"subwords":[4714,4826,4835,4935,4939,4957,4961,5014,5021,5037,5050,6033,9111,9127,9846,9847,9885,9894,9932,9934,13478,13488,13705,13710,13716,13732,13733,13736,14421,16780,16883,16954,16955,16959,16979,17530,17562,17571,17572],"fullWord":17572},{"subwords":[6033,9384,9389,9396,9399,9409,9846,9847,9932,9934,10041,13577,13588,13590,13592,13705,13712,13715,13716,13732,13734,13735,13736,14262,14281,14309,14336,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15534,16883,16889,16890,16954,16960,16979,17565,17571,17573,17591,17722],"fullWord":17573},{"subwords":[6033,6039,9846,9847,9932,9934,9941,13705,13716,13732,13736,13844,14421,16883,16888,16903,16954,16962,16979,16980,16985,17567,17571,17574],"fullWord":17574},{"subwords":[9152,9155,10665,10672,10681,10684,13749,13753,13844,14421,16834,16835,16883,16888,16903,17088,17090,17576,17577],"fullWord":17577},{"subwords":[8645,8647,8664,8671,8678,8685,8688,8691,8935,9447,10665,10672,10681,10686,10691,10698,10707,13651,13841,13850,13855,13857,13866,14421,14427,16639,16641,16653,16840,16883,16907,17088,17091,17093,17578,17579,17598,17614,18742,18863,18926,18936,18947,19386],"fullWord":17579},{"subwords":[337,340,481,486,639,647,691,961,9307,10120,10182,10187,10188,10194,10654,10665,10672,10681,12238,12241,12257,12269,12438,12442,12453,12459,13191,13192,13193,13196,13204,13232,13239,13259,13336,13765,13798,13839,13899,13900,13904,13913,14421,15931,15942,15986,16014,16858,16883,17006,17019,17088,17214,17220,17248,17476,17486,17490,17580,17581],"fullWord":17581},{"subwords":[4714,4774,4785,4826,4935,4939,4985,4988,4992,5007,5014,5021,5037,5865,5875,5918,6033,9111,9127,9307,12453,12459,13478,13488,13520,13539,13544,13546,13549,13558,13705,13710,13716,13765,13769,13771,13772,13798,14421,16381,16780,16858,16860,16883,17243,17248,17249,17250,17530,17539,17562,17580,17582,17583],"fullWord":17583},{"subwords":[5918,6033,9307,9416,10414,10415,10433,10536,10544,10548,10551,10625,10634,10654,10665,10672,10681,12438,12439,12442,12453,12459,13520,13539,13549,13558,13705,13716,13743,13745,13765,13769,13772,13798,13961,14421,16858,16860,16883,17088,17248,17249,17563,17580,17582,17584,17612],"fullWord":17584},{"subwords":[5918,6033,6039,9307,12367,12453,12459,13520,13539,13549,13558,13705,13716,13765,13769,13772,13798,13844,14421,16858,16860,16861,16881,16883,16888,16903,17248,17249,17252,17254,17567,17580,17582,17585,17588],"fullWord":17585},{"subwords":[5918,6033,9244,9307,9312,9318,9320,9325,9447,12368,12374,12376,12453,12459,12463,12471,13520,13539,13549,13558,13560,13609,13613,13626,13705,13716,13765,13769,13772,13798,13799,13804,13850,13866,14421,14427,16399,16400,16409,16457,16858,16860,16883,16907,16911,17248,17249,17255,17541,17580,17582,17586,17598,17600,17826,17836,18607,18624,18844,18850,18894,18898,18900,18919,18926,18936,18947,19386],"fullWord":17586},{"subwords":[9297,9302,9307,12453,12459,13765,13798,13807,14421,16858,16883,17248,17580,17587,17589,17697,21144,21145,21146,21152],"fullWord":17587},{"subwords":[337,340,349,359,481,486,776,860,905,961,9376,9409,10121,10125,10182,10188,10194,10502,10503,10665,10672,10675,10676,10681,13191,13192,13200,13202,13204,13232,13286,13303,13321,13336,13741,13839,14403,14421,14780,14783,14851,14866,14891,15399,15400,15508,15524,15931,15942,16014,16028,16883,16889,17019,17088,17476,17494,17590,17722],"fullWord":17590},{"subwords":[349,359,732,735,737,739,775,779,817,825,858,863,905,906,961,966,970,5588,5599,5956,5976,5977,6033,9376,9384,9389,9409,13200,13202,13286,13294,13299,13303,13321,13322,13336,13439,13455,13459,13461,13577,13588,13597,13705,13712,13715,13716,13839,14239,14262,14281,14309,14336,14403,14421,14788,14851,14852,14856,14866,14881,14891,14979,14982,15248,15272,15305,15508,15509,15514,15524,15526,16014,16028,16270,16286,16405,16419,16883,16889,16890,17476,17494,17495,17523,17565,17591,17592,17722],"fullWord":17592},{"subwords":[4714,4810,4826,4935,4939,5014,5021,5023,5037,5367,5377,5379,6033,9111,9127,9384,9385,9389,9409,13478,13488,13577,13588,13705,13710,13712,13715,13716,14262,14281,14303,14305,14306,14309,14336,14337,14403,14421,15060,15076,15087,15248,15272,15305,15428,15433,15436,15443,15508,15509,15514,15524,15526,16780,16883,16889,16890,16891,17530,17561,17562,17565,17591,17593,17722],"fullWord":17593},{"subwords":[6033,6039,9384,9389,9409,13577,13588,13705,13712,13715,13716,13844,14262,14281,14283,14309,14336,14338,14342,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,15530,16883,16888,16889,16890,16895,16899,16903,17565,17566,17567,17591,17594,17722],"fullWord":17594},{"subwords":[9392,9409,9447,13850,13866,14403,14421,14427,15508,15524,16883,16889,16907,17595,17598,17665,17722,17881,17974,18926,18928,18929,18936,18947,19295,19301,19386],"fullWord":17595},{"subwords":[9409,9447,13844,13850,13866,14342,14403,14421,14422,14427,15508,15524,16883,16888,16889,16899,16903,16907,16915,17596,17598,17603,17665,17667,17722,17881,17882,17974,17976,18926,18936,18947,19295,19301,19386],"fullWord":17596},{"subwords":[337,340,434,481,486,488,781,961,9437,9447,10126,10182,10188,10194,10241,10665,10672,10681,10686,10691,10707,13191,13192,13204,13232,13336,13352,13364,13385,13839,13850,13851,13852,13866,13902,13903,13922,13929,14421,14427,15931,15942,15960,16014,16041,16840,16883,16907,17019,17022,17088,17091,17093,17476,17510,17578,17598,17599,17605,17614,18347,18349,18353,18436,18448,18863,18926,18936,18947,19386],"fullWord":17599},{"subwords":[4714,4724,4805,4826,4935,4939,4942,4945,5014,5021,5022,5037,5063,5680,5684,6033,9111,9127,9447,13478,13488,13609,13613,13626,13705,13710,13716,13850,13866,14421,14427,16409,16457,16780,16883,16907,16911,16912,17530,17562,17598,17600,17601,17836,17856,18575,18641,18835,18837,18844,18845,18850,18926,18936,18947,19386],"fullWord":17601},{"subwords":[6033,6039,9447,13609,13612,13613,13626,13705,13716,13844,13850,13866,14421,14422,14427,16409,16414,16457,16464,16883,16888,16903,16907,16911,16913,16915,17567,17598,17600,17602,17603,17836,17838,17857,17880,18844,18850,18926,18936,18947,19386],"fullWord":17602},{"subwords":[325,481,486,932,961,972,973,8321,8324,8362,8367,8369,10182,10194,10231,10236,13204,13232,13336,13344,13917,15942,16014,16020,16033,17019,17020,17021,17476,17507,17604],"fullWord":17604},{"subwords":[481,486,488,781,961,972,973,990,10182,10194,10236,10241,10245,13204,13232,13336,13344,13352,13362,13364,13385,13922,13929,14422,14427,15942,15960,15963,16014,16020,16041,17019,17020,17022,17027,17476,17507,17510,17514,17605,17606,18436,18448,18487,19386],"fullWord":17606},{"subwords":[481,486,961,972,973,10182,10194,10236,10304,10313,13204,13232,13233,13336,13344,13424,13436,13932,13937,14009,15942,16014,16020,16103,16109,17019,17020,17039,17041,17149,17476,17507,17518,17520,17607,17608,17697,21064,21067],"fullWord":17608},{"subwords":[5691,5693,5790,5918,6033,10383,10392,10433,10434,10451,12339,13489,13495,13498,13499,13501,13510,13539,13547,13558,13559,16319,16335,16336,17049,17609],"fullWord":17609},{"subwords":[5918,6033,10433,10437,10459,10460,10465,12368,12374,12376,13532,13535,13539,13558,13560,13609,13613,13626,14427,16399,16409,16457,17057,17537,17541,17610,17836,18607,18624,19386],"fullWord":17610},{"subwords":[3120,3123,3529,3530,4046,4047,4048,4237,5959,5961,6023,6033,9079,9085,9416,10414,10415,10518,10536,10551,10665,10672,10681,13702,13705,13716,13743,13745,13961,14421,16178,16179,16298,16769,16883,17062,17088,17525,17550,17553,17563,17611],"fullWord":17611},{"subwords":[5918,6033,9307,9416,10414,10415,10433,10536,10544,10548,10551,10625,10634,10654,10665,10672,10681,12438,12439,12442,12453,12459,13520,13539,13549,13558,13705,13716,13743,13745,13765,13769,13772,13798,13961,14421,16858,16860,16883,17088,17248,17249,17563,17580,17582,17584,17612],"fullWord":17612},{"subwords":[9307,9318,9325,9334,9447,10654,10656,10659,10665,10672,10681,10686,10691,10707,12438,12442,12453,12459,12463,12471,13765,13798,13799,13804,13850,13866,14421,14427,16840,16858,16883,16907,17088,17091,17093,17248,17255,17578,17580,17598,17613,17614,18863,18894,18919,18926,18936,18947,19386],"fullWord":17613},{"subwords":[9447,10665,10672,10681,10684,10686,10690,10691,10707,13844,13850,13866,14421,14422,14427,16840,16842,16883,16888,16903,16907,16915,17088,17090,17091,17093,17094,17578,17598,17603,17614,17615,18863,18926,18936,18947,19386],"fullWord":17615},{"subwords":[8845,8856,8886,10864,10874,10893,12810,12936,14056,14087,14172,16693,16696,17104,17110,17111,17354,17406,17407,17408,17414,17434,17616],"fullWord":17616},{"subwords":[9374,10665,10672,10681,10684,10864,10874,10893,12812,12822,12936,13844,14032,14056,14072,14087,14421,16837,16839,16883,16888,16903,17088,17090,17104,17110,17350,17352,17354,17364,17406,17414,17434,17617,17618],"fullWord":17618},{"subwords":[9374,9447,10665,10672,10681,10686,10691,10707,10864,10874,10896,10897,10901,12812,12822,12936,12937,12944,13755,13756,13848,13850,13866,13973,13974,14032,14056,14072,14074,14087,14177,14182,14188,14201,14421,14427,16837,16840,16883,16907,17088,17091,17093,17104,17113,17350,17354,17364,17406,17435,17578,17598,17614,17617,17619,17644,17921,18863,18926,18936,18947,19002,19006,19075,19090,19386],"fullWord":17619},{"subwords":[4826,4835,5114,5117,5200,5204,5221,5223,6033,12752,12755,12916,12925,12936,13478,13488,13607,14020,14023,14044,14045,14048,14166,14167,17323,17406,17530,17620,17621],"fullWord":17621},{"subwords":[5918,5953,5955,6033,9836,9841,9842,9843,12506,12547,12560,12561,12876,12879,12916,12918,12922,12925,12936,13539,13558,13564,13566,13607,14044,14048,14105,14106,14112,14166,17383,17406,17620,17622],"fullWord":17622},{"subwords":[6033,6039,12916,12925,12936,13607,13608,14044,14048,14166,14170,14179,17406,17414,17434,17620,17623],"fullWord":17623},{"subwords":[5718,5721,5918,5953,5955,6033,7493,7511,7790,7815,12506,12509,12512,12547,12560,12561,12876,12879,12916,12918,12922,12925,12936,13516,13519,13539,13558,13564,13566,13607,14105,14106,14107,14112,14166,16345,17383,17389,17406,17624],"fullWord":17624},{"subwords":[7895,7897,8188,8191,12509,12512,12560,12573,12936,14107,14112,14115,14187,17383,17389,17406,17472,17625,17697,21183],"fullWord":17625},{"subwords":[6937,6939,7024,12905,12936,14418,17406,17414,17434,17626,17627],"fullWord":17627},{"subwords":[12905,12936,17406,17414,17434,17628,17629],"fullWord":17629},{"subwords":[12905,12936,14055,14187,16992,17406,17472,17628,17630,17697],"fullWord":17630},{"subwords":[10833,10849,10852,10854,10864,10874,10893,12905,12936,13024,14056,14086,14087,14121,14123,17102,17103,17104,17110,17354,17370,17372,17406,17414,17434,17631,17632],"fullWord":17632},{"subwords":[12560,12905,12936,14112,17264,17265,17383,17395,17397,17406,17414,17434,17633,17634],"fullWord":17634},{"subwords":[12560,12573,12905,12936,14112,14115,14187,17264,17266,17383,17397,17406,17472,17633,17635,17697,21183],"fullWord":17635},{"subwords":[12905,12936,13007,14127,14350,14383,14403,17406,17410,17411,17414,17434,17636,17637],"fullWord":17637},{"subwords":[4810,4826,5114,5115,5116,5117,5200,5202,5203,5204,5215,5216,5221,5223,5225,5402,5403,6004,6033,12752,12755,12916,12925,12936,12979,12982,13007,13478,13486,13487,13488,13577,13607,14020,14023,14147,14148,14149,14166,14167,14168,14262,14281,14350,14357,14358,14383,14384,14385,14403,15060,15078,15081,15087,15248,15272,15305,15600,15603,15609,15610,15611,15663,15664,15668,15676,15677,17323,17406,17419,17530,17638,17639],"fullWord":17639},{"subwords":[6004,6033,6039,12916,12925,12936,12979,12982,13007,13577,13607,13608,14147,14149,14166,14168,14169,14170,14179,14262,14281,14283,14350,14383,14384,14387,14403,15248,15272,15305,15610,15611,15663,15668,15676,15679,17406,17414,17419,17424,17434,17638,17640],"fullWord":17640},{"subwords":[12936,12937,12944,13007,13008,13011,14160,14165,14182,14186,14188,14201,14350,14383,14403,14422,14427,15691,15700,17406,17414,17429,17433,17434,17435,17436,17641,17642,17644,17645,17921,17922,17985,17986,19075,19090,19093,19113,19125,19323,19386],"fullWord":17642},{"subwords":[12936,12937,12944,13007,13008,13011,14160,14165,14182,14187,14188,14201,14203,14350,14383,14389,14403,14410,14427,15672,15690,15691,15700,17406,17429,17435,17472,17641,17643,17644,17672,17697,17921,17933,17985,18018,19075,19090,19093,19113,19122,19186,19195,19323,19347,19348,19377,19386,19567,19568,19573,19574,21212],"fullWord":17643},{"subwords":[12936,12937,12944,14182,14187,14188,14201,14203,14206,14427,17406,17435,17472,17644,17646,17697,17921,17923,18018,19075,19090,19130,19131,19144,19186,19195,19386,19389,19567,19568],"fullWord":17646},{"subwords":[6033,6039,12916,12925,12936,12945,12946,13607,13608,14166,14170,14179,14551,14558,17406,17414,17434,17447,17449,17457,17647,17677,18066,18073,18135,18136,18140,18147,19825,19876,19882],"fullWord":17647},{"subwords":[12936,12937,12944,12945,13055,13058,13059,13082,14182,14186,14188,14201,14224,14227,14422,14427,14551,14558,14561,14567,17406,17414,17434,17435,17436,17447,17449,17644,17645,17648,17649,17921,17922,17934,17935,18135,18147,18148,19075,19090,19125,19129,19386,19453,19456,19825],"fullWord":17649},{"subwords":[349,359,647,691,905,961,9307,9376,9378,9409,12257,12269,12276,12453,12459,13193,13196,13200,13202,13239,13259,13286,13303,13321,13336,13765,13798,13839,14403,14421,14784,14786,14821,14838,14839,14851,14866,14891,15508,15524,15986,16014,16028,16858,16883,16889,17220,17248,17476,17486,17490,17494,17580,17650,17722],"fullWord":17650},{"subwords":[905,961,7365,7373,7375,7391,7396,7408,7743,7939,7940,12230,12233,12257,12269,13239,13251,13254,13259,13286,13321,13336,14403,14758,14773,14821,14832,14851,14866,14891,15910,15986,16001,16014,17211,17220,17476,17490,17494,17651],"fullWord":17651},{"subwords":[781,905,911,918,961,972,973,990,13286,13321,13328,13333,13336,13344,13352,13362,13364,13385,14247,14252,14403,14422,14427,14851,14866,14867,14891,14894,14898,14912,16014,16020,16041,17476,17494,17504,17507,17510,17514,17652,17653,17773,17781,17948,17949,18436,18448,18449,18467,18469,18472,18487,19221,19222,19381,19382,19386],"fullWord":17653},{"subwords":[481,486,905,961,1155,1157,10182,10194,10292,10299,13204,13232,13286,13321,13336,13408,13413,13414,13421,14403,14851,14866,14891,14933,14938,15942,16014,16089,17019,17037,17476,17494,17654,18201,20410,20436,20439,20442,20449,20454,20973,20974],"fullWord":17654},{"subwords":[905,961,972,973,13286,13321,13336,13344,13424,13436,14258,14261,14403,14410,14851,14866,14891,14894,14895,14939,14944,15864,15865,16014,16020,16103,16109,17476,17494,17504,17507,17518,17520,17655,17656,17672,17697,21064,21067,21212],"fullWord":17656},{"subwords":[200,732,733,735,737,739,775,779,817,825,905,906,961,966,4516,4520,4607,4611,4810,4826,5323,5326,5588,5599,5956,5976,5977,6033,13171,13174,13175,13177,13286,13292,13294,13295,13299,13321,13322,13324,13336,13439,13455,13459,13461,13478,13488,13577,14262,14281,14403,14736,14751,14851,14852,14853,14856,14866,14881,14882,14891,14892,14961,14965,14979,14982,15060,15087,15248,15272,15305,15893,16014,16270,16286,16419,17476,17481,17483,17494,17495,17496,17523,17530,17657],"fullWord":17657},{"subwords":[5984,6031,6033,6039,6042,13489,13506,13508,13510,13577,13583,13584,14262,14281,14283,14403,15248,15272,15305,16319,16336,16338,16340,16341,16342,16425,16429,17658,17659],"fullWord":17659},{"subwords":[6008,6016,6033,9384,9389,9409,13577,13588,13705,13712,13715,13716,14262,14281,14307,14308,14309,14336,14403,14421,15248,15272,15305,15508,15509,15513,15514,15524,15526,15528,16883,16889,16890,17565,17591,17660,17722],"fullWord":17660},{"subwords":[7612,7615,8022,8030,9409,13721,13730,13844,14311,14312,14342,14403,14421,15461,15472,15508,15524,16883,16888,16889,16899,16903,17661,17662,17722],"fullWord":17662},{"subwords":[7604,7611,7612,7615,7626,8015,8019,8022,8030,9307,9409,12453,12459,13721,13730,13765,13773,13776,13798,14311,14312,14403,14421,15461,15472,15494,15497,15508,15524,16815,16858,16866,16883,16889,17248,17580,17661,17663,17722],"fullWord":17663},{"subwords":[9307,9318,9322,9325,9338,9409,9447,12453,12459,12463,12471,13765,13798,13799,13804,13850,13866,14331,14332,14403,14421,14427,15508,15524,16858,16883,16889,16907,17248,17255,17580,17598,17664,17665,17722,17881,17974,18894,18919,18926,18936,18947,19295,19301,19386],"fullWord":17664},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":17666},{"subwords":[9409,9447,13844,13850,13866,14342,14403,14421,14422,14427,15508,15524,16883,16888,16889,16899,16903,16907,16915,17596,17598,17603,17665,17667,17722,17881,17882,17974,17976,18926,18936,18947,19295,19301,19386],"fullWord":17667},{"subwords":[12936,12937,12944,12945,13007,13008,13011,13051,13052,13055,13059,13082,14160,14165,14182,14188,14201,14220,14223,14224,14227,14350,14383,14403,14427,14551,14561,14567,15691,15700,15720,15722,15727,15852,15858,15861,17406,17429,17435,17447,17451,17641,17644,17648,17668,17687,17693,17921,17934,17985,18016,18135,18148,19075,19090,19093,19113,19121,19155,19158,19323,19386,19453,19456,19482,19825],"fullWord":17668},{"subwords":[4048,4049,4224,4237,4268,4271,4302,4311,4312,4326,4330,4350,4351,4367,5654,5655,5656,6023,6033,13577,13602,14262,14281,14403,14433,14434,14518,14544,14551,15021,15048,15248,15272,15305,15777,15782,15840,16298,17525,17669,17687,18056,18066,18071,18135,18136,18137,18150,19825,19876,19880],"fullWord":17669},{"subwords":[4048,4049,4232,4237,4302,4311,4312,4350,4367,4422,14403,14410,14549,14551,17670,17672,17687,17697,18135,18298,19825,21212,21224],"fullWord":17670},{"subwords":[7759,7760,8151,8160,14403,14449,14451,14484,14500,14551,15790,15794,15821,15824,15825,15832,17292,17671,17683,17687,17689,18117,18125,18135,19825,19866,19867],"fullWord":17671},{"subwords":[6008,6016,6033,6038,13577,13596,14262,14281,14290,14293,14403,14410,14411,14412,14576,14577,15248,15272,15305,15866,15867,17672,17673,17697,21127,21130,21212],"fullWord":17673},{"subwords":[14009,14403,14410,17149,17672,17674,17697,21212],"fullWord":17674},{"subwords":[7604,7611,7612,7615,7759,7760,8151,8160,9307,12453,12459,13721,13730,13765,13773,13776,13798,13871,14421,14449,14451,14484,14500,14551,16815,16858,16866,16883,17248,17292,17580,17678,17683,18083,18084,18117,18125,18135,19825,19885],"fullWord":17678},{"subwords":[4826,4849,5471,5478,5503,5506,5525,5526,5531,5845,5846,5847,6033,12091,12097,12152,12153,13478,13488,14416,14438,14441,14551,16317,17530,17675,17676,17679,17680,18066,18067,18103,18114,18135,18136,19624,19625,19628,19825,19876,19877],"fullWord":17680},{"subwords":[5845,5846,5847,6033,6039,11569,12082,12152,12156,12173,14551,14558,17677,17679,17681,18066,18073,18103,18114,18115,18116,18135,18136,18140,18147,19624,19628,19825,19876,19882],"fullWord":17681},{"subwords":[14484,14491,14496,14500,14551,14558,17683,17684,17685,18117,18126,18130,18135,18147,19825],"fullWord":17685},{"subwords":[14484,14491,14496,14497,14500,14505,14551,16992,17683,17684,17686,17697,18117,18126,18135,19825,21218,21221,21224],"fullWord":17686},{"subwords":[5988,5992,6033,13516,13519,13577,13602,14262,14281,14403,14449,14451,14518,14525,14528,14544,14551,15141,15248,15272,15305,15777,15782,15790,15794,15840,17687,17688,18066,18071,18135,18136,18137,18150,18160,19825,19855,19860,19876,19880],"fullWord":17688},{"subwords":[14403,14484,14500,14551,14558,15821,15832,17683,17687,17689,17690,17692,18117,18130,18135,18147,19825,19866,19867,19886],"fullWord":17690},{"subwords":[14403,14410,14541,14543,14549,14551,17672,17687,17691,17697,18135,18298,19825,21212,21224],"fullWord":17691},{"subwords":[14403,14422,14427,14551,14558,14561,14567,15852,15856,15858,15861,17687,17692,17693,17694,18135,18147,18148,19371,19386,19453,19456,19482,19825,19886],"fullWord":17694},{"subwords":[12177,14427,14551,14561,14567,17203,17696,18002,18103,18114,18135,18148,19386,19433,19453,19456,19624,19628,19825],"fullWord":17696},{"subwords":[7604,7611,7612,7615,7616,8188,8191,9307,12453,12459,13721,13730,13765,13773,13776,13798,13807,14421,16815,16858,16866,16883,17248,17580,17589,17697,17698,21144,21145,21146,21152],"fullWord":17698},{"subwords":[67,973,1422,1448,2668,2687,14589,17699,17700,18035,18043,19871],"fullWord":17700},{"subwords":[200,973,1053,14589,14593,14594,15893,17701,17702,18062,19871],"fullWord":17702},{"subwords":[442,461,14589,14609,15942,17703,19871],"fullWord":17703},{"subwords":[817,825,905,906,5588,5599,5627,5976,5977,14589,14595,14635,14650,14881,15274,15777,15782,15840,16270,16286,16416,16419,17704,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880],"fullWord":17704},{"subwords":[325,932,973,8362,14589,14628,16033,17705,19592,19871],"fullWord":17705},{"subwords":[973,990,14587,14589,14630,16041,17706,17707,18487,18508,19871],"fullWord":17707},{"subwords":[950,1070,1071,14589,16089,17708,17709,19871,20449],"fullWord":17709},{"subwords":[973,14589,16089,16096,17708,17710,19871,20449],"fullWord":17710},{"subwords":[950,1070,1071,5627,14589,14595,14604,14607,14635,14650,15939,16270,16416,17711,18066,19593,19595,19596,19871,19876],"fullWord":17711},{"subwords":[399,407,5627,5970,5971,10324,10360,10470,14589,14595,14609,14610,14635,14650,15942,15948,16270,16274,16416,17128,17712,18066,19871,19876],"fullWord":17712},{"subwords":[2668,2687,9375,14659,16765,16766,16903,17713,17714,18035,18043,18083],"fullWord":17714},{"subwords":[5037,9127,9375,9449,9450,14659,14664,14665,16903,17715,17716,18062,18083],"fullWord":17716},{"subwords":[9307,9318,9325,9375,9447,12463,12471,12659,12663,14587,14659,14676,14677,14689,14692,16858,16907,16917,17255,17717,18005,18083,18085,18117,18894,18919,18947,19434,19447,19452,19701,19706],"fullWord":17717},{"subwords":[9375,9384,9389,9409,14635,14650,14659,14682,14684,15274,15526,15539,15777,15782,15840,16416,16796,16889,16890,17718,17722,18066,18071,18083,18150,19876,19880],"fullWord":17718},{"subwords":[9375,9409,9422,14659,15480,15489,15806,15820,16889,17719,17722,18083,18103],"fullWord":17719},{"subwords":[9375,9409,9447,14587,14659,14687,14688,14689,14692,15852,15858,15861,16889,16907,16917,17720,17722,17881,18083,18085,18947],"fullWord":17720},{"subwords":[8678,8681,9375,14659,16903,17721,18083,19592],"fullWord":17721},{"subwords":[31,32,43,45,46,67,72,385,392,399,407,488,1009,1301,1306,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1636,1661,1663,1716,1721,1722,1724,1736,1918,1919,1922,1923,1936,1937,1948,5616,5620,5626,6055,10061,10071,10241,10247,10323,10324,10360,10366,10459,10460,10465,15872,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16999,17022,17023,17723,17724,17750,17811,18302,18309,18311,18318,18341,18370,18374,18540,18541,18547,18548,18559,18660],"fullWord":17724},{"subwords":[49,67,72,385,392,488,1422,1456,1462,1482,1502,1507,1919,1921,1922,1923,10061,10071,10241,10304,10313,10323,15942,15960,15964,16041,16103,16999,17022,17028,17039,17149,17723,17725,17802,18018,18302,18318,18540],"fullWord":17725},{"subwords":[126,134,950,957,973,990,3033,3036,3041,3049,3052,3064,4238,4241,15880,15884,15887,15892,16041,16157,16159,17727,17728,18326,18331,18484,18486,18487],"fullWord":17728},{"subwords":[169,170,200,326,336,945,4461,4548,4901,5037,9127,9447,15893,15928,16041,16907,17729,17741,18339,18340,18347,18947],"fullWord":17729},{"subwords":[254,973,990,6339,6343,6344,6354,16041,17730,17731,18487],"fullWord":17731},{"subwords":[200,269,270,280,1009,4551,4555,4707,4826,5616,5620,5626,5707,5708,6055,7253,7258,7396,7416,7417,7418,7419,7423,7460,7540,7541,15893,15910,15912,16041,16043,16044,16270,16293,16457,17732,17733,17734,17806,18339,18340,18342,18345,18541,18559,18575],"fullWord":17734},{"subwords":[269,279,280,817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,5988,5992,6018,6055,7375,7391,7396,7416,7417,7419,7423,7461,7463,7540,7541,7939,7946,7949,7972,7973,7990,14758,14762,14764,14773,14881,14898,14901,14905,14912,15141,15306,15312,15748,15910,15912,15914,16026,16041,16043,16270,16286,16293,16419,16457,17732,17733,17735,17773,17775,18342,18345,18449,18453,18455,18472,18541,18554,18557,18559,19381],"fullWord":17735},{"subwords":[269,280,973,982,990,1009,5616,5618,5620,5626,6039,6055,7396,7398,7416,7417,7419,7423,7539,7540,7541,15910,15912,15915,15916,15923,16041,16043,16046,16270,16291,16293,16296,16457,16464,17732,17733,17736,17739,18342,18345,18487,18541,18559],"fullWord":17736},{"subwords":[269,280,1009,1196,1197,5616,5619,5620,5626,6055,7396,7416,7417,7419,7423,7447,7449,7452,7540,7541,15910,15912,15924,16041,16043,16103,16270,16293,16457,17732,17733,17737,17740,17802,18018,18019,18342,18345,18541,18559,21097,21105,21106,21130,21135],"fullWord":17737},{"subwords":[7267,7280,7396,7416,7423,7447,7452,15910,15919,15924,16041,16103,17732,17738,17740,17802,18018,18342,18345],"fullWord":17738},{"subwords":[647,691,693,700,704,711,973,987,990,9307,9318,9325,9447,12463,12471,15936,15937,15986,16009,16041,16047,16049,16858,16881,16903,16907,16915,17255,17257,17742,17743,18347,18408,18428,18487,18894,18919,18947],"fullWord":17743},{"subwords":[349,359,905,908,911,918,973,990,997,9376,9409,9447,14898,14912,16028,16029,16041,16889,16899,16903,16907,16908,16909,16915,17722,17744,17745,17773,17781,17881,17882,17967,18347,18449,18472,18474,18487,18947,19381,19382],"fullWord":17745},{"subwords":[200,950,952,1009,4551,4555,4826,4835,5616,5620,5626,6055,9804,15893,15939,16041,16043,16044,16270,16293,16457,16940,16941,17746,17747,17806,17809,18339,18340,18358,18362,18484,18485,18541,18545,18546,18559,18575,19384],"fullWord":17747},{"subwords":[950,957,973,982,990,1009,5616,5618,5620,5626,6039,6055,9804,15939,15940,16041,16043,16046,16270,16291,16293,16296,16457,16464,16940,16943,17746,17748,17809,17810,18358,18362,18484,18486,18487,18541,18545,18546,18559],"fullWord":17748},{"subwords":[382,411,414,488,1013,7293,7294,7295,7316,7396,7416,7423,10109,10115,10241,15910,15911,15942,15960,16041,17003,17022,17732,17749,18342,18345],"fullWord":17749},{"subwords":[200,399,407,488,1009,4466,4467,4551,4555,4601,4603,4604,4728,4747,4748,4826,4827,5616,5620,5626,5756,5760,6055,10090,10093,10099,10107,10227,10241,10242,10247,10248,10324,10327,10331,10360,10366,10378,10459,10460,10465,15893,15942,15948,15960,15961,16041,16043,16044,16270,16274,16293,16457,16459,17022,17023,17024,17044,17750,17751,17806,17811,18339,18340,18341,18370,18374,18541,18547,18548,18559,18575,18660],"fullWord":17751},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":17752},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":17753},{"subwords":[337,340,434,488,639,647,691,693,700,704,711,9307,9318,9319,9325,9334,9437,9447,10120,10126,10241,10263,10265,10654,10656,10659,10686,10691,10707,12238,12241,12292,12438,12442,12463,12471,15931,15936,15942,15960,15986,16041,16047,16840,16858,16907,17006,17017,17022,17093,17214,17255,17742,17754,18347,18349,18353,18408,18428,18863,18894,18919,18947],"fullWord":17754},{"subwords":[488,950,957,973,990,10236,10241,10245,15942,15960,15963,16041,17022,17027,17755,17756,18375,18379,18484,18486,18487],"fullWord":17756},{"subwords":[488,950,9801,10056,10057,10135,10241,10304,10313,15942,15960,15964,16041,16103,16992,17022,17028,17039,17149,17755,17757,17802,18018,18375,18379,18380,18484,21047,21049],"fullWord":17757},{"subwords":[442,461,488,973,990,10236,10241,10245,15942,15960,15963,16041,17022,17027,17758,17759,18381,18487],"fullWord":17759},{"subwords":[528,531,532,533,693,694,697,711,1009,5616,5620,5626,5845,5918,6055,6074,6075,11213,11218,11221,11247,11248,11253,11330,11356,11361,11362,11366,11376,11437,11446,11450,11451,11453,11456,11457,11512,11524,11560,11574,11575,12229,12244,12245,12250,12289,12325,12330,12368,12374,12376,15973,15978,15986,15995,16041,16043,16270,16278,16293,16399,16457,17760,17813,17830,18389,18393,18398,18407,18408,18428,18541,18549,18552,18559,18595,18607,18624],"fullWord":17760},{"subwords":[574,579,781,961,972,973,990,11270,11275,11330,11348,11356,11360,11361,11376,12082,13336,13344,13352,13362,13364,13385,14422,14427,15973,16014,16020,16041,17476,17507,17508,17510,17514,17761,17762,18389,18402,18406,18407,18436,18448,18487,19386],"fullWord":17762},{"subwords":[93,96,114,116,126,134,693,694,697,711,927,1009,2869,2883,2887,2906,2907,2908,2917,3021,3041,3042,3052,3057,3064,3145,3150,4238,4241,5616,5620,5626,5849,5850,5856,5918,6023,6055,6057,6074,6075,12229,12289,12325,12330,12368,12374,12376,15880,15986,15995,16041,16043,16134,16136,16157,16163,16270,16293,16298,16299,16304,16399,16457,17763,18408,18428,18541,18559,18607,18624],"fullWord":17763},{"subwords":[126,134,325,693,711,932,2869,2906,2907,2908,2917,3025,3041,3052,3064,3198,3199,3229,3230,4238,4241,8318,8362,8371,8378,8391,8935,12612,15880,15986,16041,16134,16136,16157,16559,17232,17764,18323,18324,18408,18428,18686],"fullWord":17764},{"subwords":[200,605,610,693,711,973,987,990,4492,15893,15986,15988,15993,16009,16041,17765,17766,18339,18340,18408,18428,18487],"fullWord":17766},{"subwords":[596,693,711,12283,15986,16011,16041,16042,17768,18408,18428],"fullWord":17768},{"subwords":[732,739,779,780,781,961,972,973,982,990,1009,5616,5618,5620,5626,5956,6033,6039,6055,13336,13344,13345,13352,13355,13359,13362,13364,13367,13374,13385,13439,13461,13464,13465,13609,13612,13613,13626,14422,14427,16014,16020,16041,16043,16046,16270,16291,16293,16296,16409,16410,16414,16457,16464,17476,17507,17510,17511,17512,17514,17769,17836,17838,18436,18437,18441,18448,18487,18541,18559,19386],"fullWord":17769},{"subwords":[325,781,932,961,972,973,990,8321,8324,8362,8367,8369,8371,8378,8391,8935,13336,13344,13352,13362,13364,13375,13377,13385,14422,14427,16014,16020,16033,16041,16559,17476,17507,17510,17514,17770,17771,17786,18436,18448,18487,19386],"fullWord":17771},{"subwords":[399,407,481,486,488,732,739,779,781,961,1009,5616,5620,5626,5956,6033,6055,10182,10194,10195,10241,10247,10324,10350,10353,10354,10360,10366,10459,10460,10465,13204,13207,13211,13212,13213,13232,13336,13352,13355,13357,13364,13367,13374,13385,13439,13450,13452,13461,13464,13465,13532,13535,13609,13613,13614,13615,13626,13922,13923,13927,13929,13940,13943,13945,13946,14427,15942,15948,15960,16014,16041,16043,16270,16274,16293,16403,16409,16410,16411,16457,16459,17019,17022,17023,17057,17476,17488,17510,17511,17537,17605,17750,17772,17811,17836,18341,18370,18374,18436,18437,18441,18448,18541,18547,18548,18559,18660,19386],"fullWord":17772},{"subwords":[126,134,325,796,801,810,905,911,918,932,2941,3001,3003,3011,3025,3041,3052,3064,3206,3217,3218,3219,3229,3230,4083,4238,4241,8360,8361,8362,8371,8378,8391,8934,8935,14775,14886,14898,14900,14912,15880,16041,16142,16157,16559,17773,17774,18323,18324,18449,18472,19224,19381],"fullWord":17774},{"subwords":[200,817,825,905,906,911,918,993,1009,4516,4520,4537,4540,4551,4553,4554,4555,4607,4611,4810,4812,4813,4826,5327,5328,5360,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14736,14751,14881,14882,14898,14901,14902,14905,14912,14961,14965,15060,15087,15306,15312,15318,15748,15893,16041,16043,16044,16270,16286,16293,16419,16457,17773,17775,17776,17806,18339,18340,18449,18450,18453,18454,18455,18472,18541,18554,18557,18559,18575,19205,19208,19233,19234,19381],"fullWord":17776},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":17777},{"subwords":[817,825,905,906,907,911,918,973,979,982,990,993,995,1009,5588,5599,5616,5618,5620,5626,5976,5977,5982,6018,6039,6055,14881,14885,14898,14901,14905,14912,15306,15309,15312,15748,16041,16043,16046,16270,16286,16290,16291,16293,16296,16419,16457,16464,17773,17775,17778,17781,18449,18453,18455,18472,18487,18541,18554,18557,18559,19253,19381,19382],"fullWord":17778},{"subwords":[905,911,918,919,14898,14912,14939,14944,15864,15865,16041,16056,16103,17773,17780,17802,17956,18018,18449,18471,18472,19231,19232,19377,19381,21212],"fullWord":17780},{"subwords":[905,911,918,973,990,14898,14912,16041,17773,17781,17782,17783,17788,17796,18449,18472,18476,18482,18487,18495,18503,19381,19382],"fullWord":17783},{"subwords":[817,825,905,906,911,918,993,1009,1106,1109,1110,1112,1113,1114,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14921,14929,15306,15312,15337,15354,15748,16041,16043,16076,16078,16270,16286,16293,16419,16457,17773,17775,17784,17799,18449,18453,18455,18472,18541,18554,18557,18559,19227,19381,19967,19970,19971,19975,19978,20070,20071,20080,20088,20095,20101],"fullWord":17784},{"subwords":[973,980,982,983,990,1009,5616,5618,5620,5626,6039,6055,16037,16041,16043,16046,16270,16291,16293,16296,16457,16464,17785,18487,18489,18541,18559],"fullWord":17785},{"subwords":[973,985,990,9447,16037,16041,16903,16907,16915,17787,18347,18487,18947],"fullWord":17787},{"subwords":[382,488,1013,10241,15942,15960,16041,17022,17788,17789,18495,18503],"fullWord":17789},{"subwords":[200,1009,4551,4555,4826,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16457,17788,17790,17791,17806,17846,18339,18340,18490,18491,18495,18498,18503,18541,18559,18565,18567,18575,18662],"fullWord":17791},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":17792},{"subwords":[973,982,990,1009,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17788,17790,17793,17796,17846,17847,18487,18490,18493,18495,18498,18503,18541,18559,18565,18567,18662,18668],"fullWord":17793},{"subwords":[126,134,1040,1041,3041,3052,3064,3402,3429,4238,4241,9447,15880,16041,16157,16178,16769,16907,17788,17794,18325,18336,18338,18347,18495,18503,18823,18830,18947,18950,18964],"fullWord":17794},{"subwords":[905,911,918,12680,12683,12686,12692,13007,13008,13011,14898,14912,15574,15673,15691,15700,16041,17303,17429,17435,17773,17782,17788,17795,17885,17887,18432,18435,18449,18463,18464,18465,18466,18472,18476,18482,18495,18503,18973,19093,19094,19097,19113,19117,19120,19130,19131,19144,19331,19334,19381],"fullWord":17795},{"subwords":[1000,1009,5616,5620,5626,5627,6055,16041,16043,16070,16270,16293,16457,17788,17790,17797,17846,18066,18074,18174,18490,18495,18498,18503,18508,18515,18519,18541,18559,18565,18567,18662,19493,19498,19871,19876],"fullWord":17797},{"subwords":[973,990,16041,17788,17796,17798,18174,18175,18487,18495,18503,18508,18515,18519,19493,19498,19871],"fullWord":17798},{"subwords":[200,204,210,1009,1106,1114,4551,4555,4569,4826,4851,4852,5616,5620,5626,6055,15893,16041,16043,16044,16076,16077,16270,16293,16457,17799,17800,17806,18339,18340,18541,18559,18575,19910,19967,19970,19975,19978,19990,20088,20095,20101],"fullWord":17800},{"subwords":[973,982,990,1009,1106,1114,5616,5618,5620,5626,6039,6055,16041,16043,16046,16076,16080,16270,16291,16293,16296,16457,16464,17799,17801,18487,18541,18559,19967,19968,19970,19973,19975,19978,20088,20090,20094,20095,20101],"fullWord":17801},{"subwords":[200,1009,1196,1197,4551,4555,4578,4582,4826,5567,5572,5616,5619,5620,5626,6055,15893,16041,16043,16044,16103,16270,16293,16457,17802,17803,17806,17808,18018,18019,18020,18339,18340,18541,18559,18575,21096,21097,21105,21106,21130,21135],"fullWord":17803},{"subwords":[227,817,825,905,906,911,918,919,993,1009,1196,1197,5588,5599,5616,5619,5620,5626,5976,5977,5982,6018,6051,6055,14881,14898,14901,14905,14912,14939,14944,15282,15306,15312,15748,15864,15865,15866,15867,16041,16043,16056,16103,16105,16270,16286,16293,16419,16457,17773,17775,17802,17804,17956,18018,18019,18449,18453,18455,18472,18541,18554,18557,18558,18559,19231,19232,19257,19258,19377,19381,19570,19572,21071,21074,21097,21099,21104,21105,21106,21130,21135,21212],"fullWord":17804},{"subwords":[200,973,982,990,1009,4551,4555,4826,5616,5618,5620,5626,6039,6055,15893,16041,16043,16044,16046,16270,16291,16293,16296,16457,16464,17806,17807,18339,18340,18487,18541,18559,18575],"fullWord":17807},{"subwords":[200,1009,1196,1197,4551,4555,4578,4582,4826,5567,5572,5616,5619,5620,5626,6055,15893,16041,16043,16044,16103,16270,16293,16457,17802,17803,17806,17808,18018,18019,18020,18339,18340,18541,18559,18575,21096,21097,21105,21106,21130,21135],"fullWord":17808},{"subwords":[950,957,973,982,990,1009,5616,5618,5620,5626,6039,6055,9804,15939,15940,16041,16043,16046,16270,16291,16293,16296,16457,16464,16940,16943,17746,17748,17809,17810,18358,18362,18484,18486,18487,18541,18545,18546,18559],"fullWord":17810},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":17812},{"subwords":[973,982,990,1009,5616,5618,5620,5626,5845,6039,6055,11330,11348,11351,11356,11360,11361,11362,11366,11376,11437,11453,11456,11457,11560,11561,11569,11574,11575,12082,15973,15978,16041,16043,16046,16270,16278,16283,16291,16293,16296,16457,16464,17813,17814,17830,17832,18389,18393,18398,18407,18487,18541,18549,18552,18559,18595],"fullWord":17814},{"subwords":[1009,1196,1197,5616,5619,5620,5626,5845,6055,6079,11330,11356,11361,11362,11366,11367,11368,11376,11408,11415,11424,11425,11437,11453,11456,11457,11458,11560,11574,11575,15973,15978,16041,16043,16103,16270,16278,16284,16293,16457,17802,17813,17815,17830,18018,18019,18389,18393,18398,18407,18541,18549,18552,18559,18595,21051,21055,21097,21105,21106,21130,21135],"fullWord":17815},{"subwords":[4680,4826,6031,6039,6042,16319,16320,16323,16342,16457,16464,17816,17817,18575,18576,18577,18588],"fullWord":17817},{"subwords":[5691,5693,5790,5791,6031,6039,6042,10383,10392,10451,10453,10459,10460,10465,16319,16329,16342,16457,16464,17052,17053,17818,17819,17828,18576,18588],"fullWord":17819},{"subwords":[5691,5693,5694,5790,6189,6198,10383,10392,10451,10459,10460,10465,10495,10496,11065,11066,16319,16457,17052,17054,17149,17818,17820,17828,18018,18019,18023,18576,18588,21130,21135],"fullWord":17820},{"subwords":[6031,6033,6039,6042,13489,13510,13609,13612,13613,13626,14422,14427,16319,16336,16338,16342,16409,16414,16457,16464,17821,17822,17836,17838,18576,18588,19386],"fullWord":17822},{"subwords":[5984,6018,6031,6039,6042,6046,6047,15290,15291,15306,15309,15312,15748,16319,16340,16341,16342,16425,16429,16430,16457,16464,17823,17824,17840,17842,18576,18588,18658,19240,19242,19253],"fullWord":17824},{"subwords":[6092,6104,16319,16457,17825,17848,18576,18588,19992,20000,20088,20092,20095,20101],"fullWord":17825},{"subwords":[5918,6039,9307,9312,9313,9318,9325,9447,12367,12368,12373,12374,12376,12463,12471,16399,16400,16457,16464,16858,16860,16861,16881,16903,16907,16911,16913,16915,17255,17257,17826,17827,17857,18607,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":17827},{"subwords":[399,407,442,461,488,1009,5616,5620,5626,5780,5781,6055,10241,10247,10324,10343,10360,10366,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16368,16457,16459,17022,17023,17750,17758,17811,17829,18341,18370,18374,18381,18541,18547,18548,18559,18591,18593,18660],"fullWord":17829},{"subwords":[5837,5845,6079,11574,16457,17830,17831,18018,18019,18595,21130,21135],"fullWord":17831},{"subwords":[3145,3150,3264,4238,4241,5856,5918,6023,6057,6058,8540,8547,8548,8586,8935,12368,12374,12376,12612,16163,16298,16304,16399,16457,16574,17833,18570,18607,18609,18624,18697,18708,18710],"fullWord":17833},{"subwords":[5918,5953,5955,6039,12367,12368,12373,12374,12376,12506,12560,12561,12563,12574,12581,12585,12591,12876,12879,12884,12885,16399,16457,16461,16462,16464,17278,17279,17383,17388,17395,17434,17435,17436,17834,17835,17909,17912,18607,18624,18981,18985,19036,19038,19042,19057,19125],"fullWord":17835},{"subwords":[6033,13489,13502,13505,13510,13569,13573,13609,13613,13626,14427,16319,16336,16409,16457,17821,17836,17837,18576,18588,19386],"fullWord":17837},{"subwords":[6033,13569,13573,13609,13613,13626,14427,14506,14515,14551,14561,14567,16409,16457,16468,17836,17839,18013,18066,18074,18135,18136,18148,19386,19453,19456,19825,19826,19876],"fullWord":17839},{"subwords":[5984,6004,6005,6018,6046,12979,12982,13007,13008,13011,15290,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16319,16340,16425,16457,17419,17429,17435,17823,17840,17841,17924,18576,18588,18658,18981,18985,19093,19101,19103,19113,19240,19242],"fullWord":17841},{"subwords":[5984,6018,6031,6039,6042,6046,6047,15290,15291,15306,15309,15312,15748,16319,16340,16341,16342,16425,16429,16430,16457,16464,17823,17824,17840,17842,18576,18588,18658,19240,19242,19253],"fullWord":17842},{"subwords":[693,694,697,709,711,817,825,905,906,911,918,993,994,1009,5588,5595,5598,5599,5616,5620,5626,5918,5976,5977,5982,6000,6018,6055,6074,6075,12229,12275,12289,12319,12324,12325,12330,12362,12368,12374,12376,14821,14847,14850,14881,14898,14901,14905,14912,15241,15245,15306,15312,15748,15986,15995,15998,16041,16043,16270,16286,16293,16399,16419,16457,17223,17773,17775,17843,17844,18408,18428,18449,18453,18455,18460,18462,18472,18541,18554,18557,18559,18607,18624,18649,18651,19381],"fullWord":17844},{"subwords":[5918,6000,6018,6039,12362,12367,12368,12373,12374,12376,15241,15245,15306,15309,15312,15748,16399,16457,16464,17843,17845,18607,18624,18649,18651,19253],"fullWord":17845},{"subwords":[5918,6092,6093,6097,6098,6099,6104,12339,12368,12374,12376,16319,16335,16399,16457,16470,17848,17849,18576,18583,18585,18588,18607,18624,18625,19992,20000,20046,20049,20088,20095,20101],"fullWord":17849},{"subwords":[4680,4826,4865,4873,6118,6121,16319,16320,16457,16475,16477,17816,17850,17851,18225,18231,18575,18576,18577,18588,19513,19514,20524,20531,20532,20533,20536,20551,20591,20594,20596],"fullWord":17851},{"subwords":[3428,3429,4238,4241,9447,9941,9945,9946,9955,16178,16769,16772,16778,16779,16903,16907,16915,16954,16985,16986,16987,17853,17854,18823,18824,18829,18830,18947],"fullWord":17854},{"subwords":[3429,3440,4238,4241,4423,9096,9101,9447,9945,9946,9955,16178,16769,16772,16907,16954,16986,16992,17853,17855,18018,18823,18824,18829,18830,18947],"fullWord":17855},{"subwords":[6647,6650,6651,6654,9135,9447,16801,16804,16903,16907,16915,17858,17859,18851,18854,18947],"fullWord":17859},{"subwords":[5705,5706,5765,6425,6443,6445,6543,6568,6572,6573,6574,6647,6651,6654,6767,6768,6782,6784,6785,6786,9135,9416,9419,9436,9447,9448,10394,10396,10414,10415,10459,10460,10465,10536,10539,10551,10554,10557,10560,10686,10691,10694,10697,10707,16365,16457,16801,16840,16907,16911,17093,17860,17862,18844,18850,18863,18866,18870,18947],"fullWord":17860},{"subwords":[290,341,347,555,7289,7292,7317,7342,7396,7416,7423,7635,7637,9422,9447,11127,11132,11140,11160,11330,11356,11361,11376,11649,11654,11780,12081,15910,15973,16041,16764,16813,16907,17179,17732,17861,18342,18345,18347,18389,18407,18882,18947],"fullWord":17861},{"subwords":[6039,9416,9418,9419,9420,9436,9447,10414,10415,10453,10459,10460,10465,10536,10551,10686,10690,10691,10694,10697,10707,16457,16464,16840,16842,16903,16907,16911,16913,16915,17073,17093,17094,17857,17862,17863,18844,18850,18863,18866,18870,18947],"fullWord":17863},{"subwords":[9152,9155,9447,10580,10582,10686,10690,10691,10707,16834,16835,16840,16842,16903,16907,16915,17093,17094,17864,17865,18863,18872,18875,18947],"fullWord":17865},{"subwords":[9152,9155,9157,9447,10580,10582,10583,10686,10691,10707,16834,16836,16840,16843,16907,17075,17093,17149,17864,17866,18018,18027,18863,18872,18875,18947],"fullWord":17866},{"subwords":[9447,10686,10690,10691,10707,16840,16842,16903,16907,16915,17093,17094,17867,17868,18863,18876,18881,18947,18950,18964],"fullWord":17868},{"subwords":[7604,7611,7635,7637,7874,9267,9268,9307,9318,9325,9335,9360,9366,9447,12463,12471,12509,12512,12560,12574,12591,16815,16858,16866,16907,17255,17278,17383,17389,17435,17870,17871,18894,18901,18907,18919,18947,18993,19001,19036,19043,19047,19057],"fullWord":17871},{"subwords":[7604,7611,7635,7636,7637,9307,9318,9325,9447,12463,12471,16815,16822,16858,16866,16873,16881,16903,16907,16915,17255,17257,17870,17872,18894,18901,18907,18919,18947],"fullWord":17872},{"subwords":[7604,7611,7635,7637,9307,9318,9325,9447,12463,12471,16815,16858,16866,16907,17255,17870,17873,18018,18894,18901,18907,18919,18925,18947,19552,21144,21145],"fullWord":17873},{"subwords":[9142,9143,9276,9284,9307,9318,9325,9335,9360,9366,9447,9913,9929,9945,9946,9955,9985,9986,9993,9994,12463,12471,12560,12574,12591,12825,12827,16858,16876,16907,16954,16974,16986,17255,17278,17383,17435,17874,17875,18894,18919,18947,19036,19057],"fullWord":17875},{"subwords":[9276,9284,9307,9318,9325,9447,9913,9929,9941,9945,9946,9955,9985,9986,12463,12471,16858,16876,16878,16881,16903,16907,16915,16954,16974,16978,16985,16986,16987,17255,17257,17874,17876,18894,18919,18947],"fullWord":17876},{"subwords":[9276,9284,9285,9307,9318,9325,9447,9913,9929,9945,9946,9955,9985,9986,12463,12471,16858,16876,16907,16954,16974,16986,16992,17255,17874,17877,18018,18894,18919,18925,18947,21144,21145],"fullWord":17877},{"subwords":[9307,9318,9325,9447,12463,12471,16858,16881,16903,16907,16915,17255,17257,17878,17879,18894,18919,18921,18924,18947,18950,18964,18969],"fullWord":17879},{"subwords":[6033,6039,9447,13609,13612,13613,13626,13705,13716,13844,13850,13866,14421,14422,14427,16409,16414,16457,16464,16883,16888,16903,16907,16911,16913,16915,17567,17598,17600,17602,17603,17836,17838,17857,17880,18844,18850,18926,18936,18947,19386],"fullWord":17880},{"subwords":[3272,3328,3331,3429,4238,4241,8612,8678,8685,8688,8691,8935,9440,9447,16178,16653,16769,16907,17883,18742,18823,18830,18947,18950,18964],"fullWord":17883},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15337,15354,15526,15542,15543,15549,15554,15555,15556,15748,16457,16889,16890,16907,16911,17722,17881,17884,17979,18844,18847,18849,18850,18941,18943,18947,19277,20070,20080,20088,20095,20101,20129,20132,20133,20134,20197],"fullWord":17884},{"subwords":[973,990,12685,12686,12692,16041,17434,17435,17436,17788,17796,17885,17886,17887,17888,18432,18435,18487,18495,18503,18973,18974,19125,19130,19131,19144],"fullWord":17888},{"subwords":[3958,3963,3965,3971,4238,4241,16205,16208,17316,17319,17322,17434,17435,17436,17889,17890,19125],"fullWord":17890},{"subwords":[3958,3964,3965,3971,4029,4238,4241,4423,16205,16992,17316,17319,17435,17472,17889,17891,18018,19186,19195],"fullWord":17891},{"subwords":[4826,5114,5117,5118,5123,5125,5127,5139,5221,5223,5233,5234,5237,5241,5245,5718,5721,7460,7540,7541,7782,7785,7790,7874,12752,12755,16457,17323,17435,17892,18575,18981,18983,18985,18993,19001],"fullWord":17892},{"subwords":[5123,5139,5140,5221,5233,5234,5245,5249,7460,7782,7785,7874,7895,7897,17323,17435,17472,17893,17896,18018,18993,19001,19186,19195,21096,21154],"fullWord":17893},{"subwords":[5718,5721,7540,7541,7790,7874,7895,7897,13147,16457,17435,17472,17894,17896,18018,18019,18981,18985,18993,19001,19186,19195,21130,21135],"fullWord":17894},{"subwords":[5716,5718,5720,5721,7540,7541,7635,7637,7790,7874,9447,16457,16907,16911,17435,17895,18844,18850,18947,18981,18985,18993,19001],"fullWord":17895},{"subwords":[3428,3429,3958,3963,3965,3971,4238,4241,9447,13038,16178,16205,16208,16769,16779,16903,16907,16915,17316,17434,17435,17436,17897,17898,18823,18830,18947,19125],"fullWord":17898},{"subwords":[4826,4835,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,12752,12755,16457,17323,17435,17899,17900,18575,18981,18983,18985,19010,19011,19014,19384],"fullWord":17900},{"subwords":[6004,6018,12979,12982,13007,13008,13011,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17899,17901,17924,17928,17982,18981,18985,19010,19014,19093,19101,19103,19113,19244,19245],"fullWord":17901},{"subwords":[6039,16457,16464,17434,17435,17436,17899,17902,18981,18985,19010,19014,19125],"fullWord":17902},{"subwords":[5918,5953,5955,10433,10437,10441,10442,10443,10444,10447,10459,10460,10465,10822,10888,10896,10897,10901,12368,12374,12376,12504,12505,12506,12560,12561,12574,12581,12585,12591,12845,12848,12876,12879,12884,16399,16457,16461,17097,17113,17278,17354,17359,17383,17435,17834,17903,17904,17909,18607,18624,18981,18985,19017,19036,19038,19042,19057],"fullWord":17904},{"subwords":[6039,10443,10447,10453,10459,10460,10465,10787,10888,10891,10893,10896,10897,10901,12845,12848,16457,16464,17097,17098,17113,17116,17354,17359,17363,17434,17435,17436,17903,17905,18981,18985,19017,19125],"fullWord":17905},{"subwords":[5037,5161,5162,5221,5233,5234,5245,9125,9126,9127,9447,10530,10533,10534,10535,10686,10691,10707,10896,10897,10901,12812,12822,12837,12844,16837,16840,16907,17068,17093,17113,17323,17350,17354,17357,17364,17365,17435,17906,18863,18947,19002,19006,19016],"fullWord":17906},{"subwords":[11947,11961,12002,12007,12009,12010,12030,12082,12872,12936,12937,12944,14182,14186,14188,14201,14422,14427,17406,17414,17434,17435,17436,17644,17645,17907,17908,17921,17922,19026,19034,19075,19090,19125,19386],"fullWord":17908},{"subwords":[4774,4785,4788,4792,4826,5114,5117,5118,5172,5176,5188,5221,5223,5233,5234,5237,5241,5245,5865,5875,5918,5953,5955,12368,12374,12376,12493,12499,12500,12501,12506,12560,12561,12562,12574,12581,12582,12585,12591,12752,12755,12876,12879,12884,16381,16399,16457,16461,17278,17323,17383,17387,17435,17834,17909,17910,18575,18607,18610,18614,18624,18981,18983,18985,19036,19038,19039,19042,19057],"fullWord":17910},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":17911},{"subwords":[5918,5953,5955,6039,12367,12368,12373,12374,12376,12506,12560,12561,12563,12574,12581,12585,12591,12876,12879,12884,12885,16399,16457,16461,16462,16464,17278,17279,17383,17388,17395,17434,17435,17436,17834,17835,17909,17912,18607,18624,18981,18985,19036,19038,19042,19057,19125],"fullWord":17912},{"subwords":[5918,5953,5955,12368,12374,12376,12506,12560,12561,12564,12573,12574,12581,12585,12591,12876,12879,12884,13147,16399,16457,16461,17278,17383,17435,17472,17834,17909,17913,17914,18018,18019,18287,18607,18624,18981,18985,19036,19038,19042,19057,19059,19186,19195,21120,21122,21130,21135,21183],"fullWord":17913},{"subwords":[5718,5721,7540,7541,7790,7826,7847,7848,7874,16457,17399,17435,17916,18981,18985,18993,19000,19001,19060],"fullWord":17916},{"subwords":[10833,10854,10860,10863,10893,10896,10897,10900,10901,13024,17113,17116,17354,17370,17372,17399,17404,17434,17435,17436,17917,17918,19060,19062,19065,19125],"fullWord":17918},{"subwords":[12905,12936,12937,12944,14182,14186,14188,14201,14422,14427,17399,17404,17406,17414,17434,17435,17436,17644,17645,17919,17920,17921,17922,19060,19075,19086,19090,19125,19386],"fullWord":17920},{"subwords":[4810,4826,5114,5115,5116,5117,5118,5216,5221,5223,5225,5233,5234,5237,5239,5240,5241,5245,5360,6004,6018,12752,12755,12979,12982,13007,13008,13011,15060,15078,15081,15087,15306,15312,15318,15600,15603,15609,15610,15611,15676,15677,15691,15694,15695,15700,15748,16457,17323,17419,17429,17430,17435,17924,17925,17981,18575,18981,18983,18985,19093,19101,19103,19113,19310,19311],"fullWord":17925},{"subwords":[6004,6018,6039,12979,12982,13007,13008,13011,15306,15309,15312,15610,15611,15676,15679,15680,15691,15694,15695,15700,15748,16457,16464,17419,17424,17425,17429,17433,17434,17435,17436,17924,17926,18981,18985,19093,19101,19103,19113,19125,19127,19253],"fullWord":17926},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13145,13146,13147,13149,15306,15312,15610,15611,15676,15690,15691,15694,15695,15700,15748,15866,15867,16457,17419,17429,17435,17472,17924,17927,17933,18018,18019,18981,18985,19093,19101,19103,19113,19122,19186,19187,19188,19195,19257,19258,19347,19348,19377,19570,19572,19573,19574,21130,21135,21189,21190,21212],"fullWord":17927},{"subwords":[13007,13008,13011,15691,15700,17429,17433,17434,17435,17436,17928,17929,19093,19113,19125],"fullWord":17929},{"subwords":[11989,12002,12007,12009,12010,12030,12082,12872,13007,13008,13011,15627,15638,15691,15700,17429,17433,17434,17435,17436,17930,17931,19026,19034,19093,19113,19125],"fullWord":17931},{"subwords":[11989,12007,12010,12030,12872,13007,13008,13011,15627,15638,15690,15691,15700,17429,17435,17472,17930,17932,17933,18018,19026,19034,19093,19113,19122,19186,19195,19347,19348,19377,19573,19574,21212],"fullWord":17932},{"subwords":[12936,12937,12944,12945,13055,13058,13059,13082,14182,14186,14188,14201,14224,14227,14422,14427,14551,14558,14561,14567,17406,17414,17434,17435,17436,17447,17449,17644,17645,17648,17649,17921,17922,17934,17935,18135,18147,18148,19075,19090,19125,19129,19386,19453,19456,19825],"fullWord":17935},{"subwords":[13055,13058,13059,13082,17434,17435,17436,17936,17937,19125,19130,19131,19144,19160,19163,19493,19498],"fullWord":17937},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13095,13099,13100,15306,15312,15337,15354,15610,15611,15676,15691,15694,15695,15700,15728,15732,15748,16453,16457,17419,17429,17435,17924,17938,17939,17987,18981,18985,19093,19101,19103,19113,19165,19340,19342,20070,20077,20080,20088,20095,20097,20101,20265,20267,20268,20269],"fullWord":17939},{"subwords":[6039,16457,16464,17434,17435,17436,17938,17940,18981,18985,19125,19165,20088,20094,20095,20097,20101,20265,20269],"fullWord":17940},{"subwords":[4826,4865,4873,5114,5117,5118,5221,5223,5233,5234,5237,5241,5245,5282,5283,12752,12755,13110,13111,13112,16457,16475,17323,17435,17464,17465,17850,17941,17942,18575,18981,18983,18985,19166,19169,19181,19548,19550,20524,20531,20591,20594,20596,20875,20877,20958],"fullWord":17942},{"subwords":[254,255,256,817,825,828,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5705,5706,5976,5977,5982,6018,6055,6308,6317,6321,6332,6334,6339,6342,6344,6347,6349,6354,6392,6395,6397,6399,6402,6485,6487,7042,7044,7073,7074,14754,14757,14881,14898,14901,14905,14912,15114,15134,15135,15306,15312,15748,15904,15906,16041,16043,16270,16286,16293,16419,16431,16457,17773,17775,17944,18449,18453,18455,18472,18541,18554,18557,18559,19243,19381],"fullWord":17944},{"subwords":[349,359,647,691,693,700,704,711,905,911,918,997,9307,9318,9322,9325,9338,9339,9376,9378,9409,9447,12276,12463,12471,14784,14786,14821,14838,14839,14847,14850,14898,14912,15936,15986,16028,16041,16047,16858,16889,16907,16908,17255,17722,17742,17744,17773,17881,17945,17967,18347,18408,18428,18449,18460,18462,18472,18474,18894,18919,18947,19212,19213,19381],"fullWord":17945},{"subwords":[349,359,905,911,917,918,997,9376,9409,9447,14898,14912,16028,16041,16889,16907,16908,17722,17744,17773,17782,17788,17881,17946,17967,18347,18449,18472,18474,18476,18482,18495,18503,18947,18950,18964,19214,19215,19381],"fullWord":17946},{"subwords":[200,605,610,693,711,905,911,918,4492,4532,4536,4537,4540,5327,5328,12274,14736,14751,14821,14826,14828,14847,14850,14898,14912,15893,15986,15988,16041,17765,17773,17947,18339,18340,18408,18428,18449,18460,18462,18472,19381],"fullWord":17947},{"subwords":[781,905,911,918,961,972,973,990,13286,13321,13328,13333,13336,13344,13352,13362,13364,13385,14247,14252,14403,14422,14427,14851,14866,14867,14891,14894,14898,14912,16014,16020,16041,17476,17494,17504,17507,17510,17514,17652,17653,17773,17781,17948,17949,18436,18448,18449,18467,18469,18472,18487,19221,19222,19381,19382,19386],"fullWord":17949},{"subwords":[905,911,918,1036,1037,14898,14899,14912,16041,17773,17782,17788,17950,18449,18472,18476,18482,18495,18497,18503,19381],"fullWord":17950},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":17951},{"subwords":[325,905,911,918,932,8360,8361,8362,8371,8378,8391,8934,8935,14775,14886,14898,14912,16041,16559,17773,17782,17788,17952,18449,18472,18476,18482,18495,18503,18691,18693,19224,19381],"fullWord":17952},{"subwords":[905,911,918,973,990,14898,14912,14933,14938,16041,16089,16096,17773,17781,17953,17954,18207,18211,18216,18449,18472,18487,18521,18527,19381,19382,19508,20410,20442,20444,20446,20449,20457,20462,20467],"fullWord":17954},{"subwords":[905,911,918,919,1166,14898,14912,14933,14938,14939,14944,15864,15865,16041,16056,16089,16103,17773,17802,17953,17955,17956,18018,18207,18209,18211,18217,18449,18472,18521,18527,19231,19232,19377,19381,19508,20410,20442,20444,20446,20447,20448,20449,20457,20467,20493,20496,21010,21079,21093,21212],"fullWord":17955},{"subwords":[905,911,918,919,973,990,14898,14912,14939,14944,15864,15865,16041,16056,16057,16103,16109,16110,17773,17781,17802,17805,17956,17957,18018,18449,18472,18487,19231,19232,19377,19381,19382,21212],"fullWord":17957},{"subwords":[817,825,867,868,905,906,911,918,950,953,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9789,9791,9792,9804,14798,14802,14881,14898,14901,14905,14912,15306,15312,15748,15939,16041,16043,16270,16286,16293,16419,16457,16940,16942,17746,17773,17775,17779,17809,17958,18358,18360,18361,18362,18449,18453,18455,18472,18484,18541,18545,18546,18554,18557,18559,19244,19245,19381],"fullWord":17958},{"subwords":[817,825,869,883,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5845,5976,5977,5982,6018,6055,11276,11286,11287,11314,11315,11320,11325,11330,11333,11356,11358,11361,11362,11364,11365,11366,11376,11437,11453,11456,11457,11539,11560,11574,11575,14808,14820,14881,14898,14901,14905,14912,14975,14978,15202,15224,15306,15312,15748,15973,15978,16041,16043,16270,16278,16286,16293,16419,16457,17157,17161,17773,17775,17813,17830,17959,18389,18393,18396,18397,18398,18407,18449,18453,18455,18472,18541,18549,18552,18554,18557,18559,18595,18644,18648,19216,19219,19381],"fullWord":17959},{"subwords":[5984,6018,6046,15290,15306,15312,15320,15748,16319,16340,16425,16457,16466,17823,17840,17846,17960,18576,18588,18658,18662,18665,19240,19242,19255],"fullWord":17960},{"subwords":[6018,6033,6039,13577,13599,13609,13612,13613,13626,14262,14281,14283,14284,14403,14422,14427,15248,15272,15305,15306,15309,15312,15748,16409,16414,16457,16464,17836,17838,17961,17962,19253,19386],"fullWord":17962},{"subwords":[6018,6039,15306,15309,15312,15748,16457,16464,17963,19253],"fullWord":17963},{"subwords":[5918,6000,6018,12362,12368,12374,12376,12390,12397,12399,12401,15241,15245,15306,15312,15748,16399,16457,16475,16481,17843,17850,17964,17965,18607,18624,18649,18651,19256,20579,20584,20585,20588,20591,20594,20596,20984,20986,20987],"fullWord":17965},{"subwords":[6018,6039,15306,15309,15312,15748,16457,16464,16475,16482,17850,17852,17964,17966,19253,19256,20588,20591,20593,20594,20596,20987,20988],"fullWord":17966},{"subwords":[349,353,359,817,825,858,863,905,906,911,918,993,997,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9376,9382,9384,9389,9409,9447,14788,14881,14898,14901,14905,14912,15306,15312,15526,15542,15543,15748,16028,16041,16043,16051,16270,16286,16293,16419,16457,16889,16890,16907,16908,16911,17722,17744,17773,17775,17881,17967,17968,18347,18449,18453,18455,18472,18474,18541,18554,18557,18559,18844,18847,18849,18850,18941,18943,18947,19277,19381],"fullWord":17968},{"subwords":[3429,4238,4241,9409,9447,16178,16769,16889,16907,17722,17881,17969,18823,18830,18947,18950,18964],"fullWord":17969},{"subwords":[4714,4724,4810,4826,4935,4939,4942,4945,5023,5027,5034,5035,5037,5060,5063,5360,5367,5368,5680,5684,6018,9111,9127,9384,9385,9389,9409,9447,15060,15087,15306,15312,15318,15428,15433,15436,15443,15526,15542,15543,15748,16457,16780,16889,16890,16891,16907,16911,16912,17722,17856,17881,17970,18575,18835,18837,18844,18845,18847,18849,18850,18941,18942,18943,18947,19274,19277],"fullWord":17970},{"subwords":[5705,5706,6018,6425,6543,6621,6622,6626,6636,6637,6647,6651,6654,7073,7074,7085,9135,9384,9389,9409,9447,15114,15124,15125,15134,15135,15306,15312,15446,15449,15458,15460,15526,15542,15543,15748,16431,16437,16457,16801,16803,16889,16890,16907,16911,17722,17881,17971,18844,18847,18849,18850,18941,18943,18947,19243,19277],"fullWord":17971},{"subwords":[6018,9384,9389,9396,9399,9409,9447,9945,9946,9947,9949,9950,9951,9955,10041,15306,15312,15526,15534,15542,15543,15748,16457,16889,16890,16907,16911,16954,16960,16983,16986,17722,17881,17972,18844,18847,18849,18850,18861,18862,18941,18943,18947,19244,19245,19277],"fullWord":17972},{"subwords":[7604,7611,7626,7628,7632,7635,7637,8015,8019,8033,8035,8036,9307,9318,9322,9325,9338,9409,9447,12463,12471,15461,15472,15494,15497,16815,16858,16866,16889,16907,17255,17722,17870,17881,17973,18894,18901,18907,18919,18947,19280],"fullWord":17973},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":17975},{"subwords":[9409,9447,13844,13850,13866,14342,14403,14421,14422,14427,15508,15524,16883,16888,16889,16899,16903,16907,16915,17596,17598,17603,17665,17667,17722,17881,17882,17974,17976,18926,18936,18947,19295,19301,19386],"fullWord":17976},{"subwords":[9409,9447,13850,13866,14403,14421,14427,15508,15524,16883,16889,16907,17598,17665,17722,17881,17974,17977,18926,18936,18947,18950,18964,19295,19301,19386],"fullWord":17977},{"subwords":[9409,9447,13850,13866,13870,14403,14410,14421,14427,15508,15524,16883,16889,16907,17597,17598,17665,17672,17697,17722,17881,17974,17978,18018,18926,18936,18937,18947,19295,19301,19377,19386,21146,21152,21212],"fullWord":17978},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15337,15354,15526,15542,15543,15549,15554,15555,15556,15748,16457,16889,16890,16907,16911,17722,17881,17884,17979,18844,18847,18849,18850,18941,18943,18947,19277,20070,20080,20088,20095,20101,20129,20132,20133,20134,20197],"fullWord":17979},{"subwords":[1713,1716,1721,1736,2072,2073,2205,2208,2219,2220,2237,2446,2476,6004,6018,12959,12964,12979,12982,13007,13008,13011,14995,15014,15306,15312,15576,15579,15582,15590,15610,15611,15676,15691,15694,15695,15700,15748,16423,16457,17308,17312,17416,17419,17429,17435,17924,17980,18540,18981,18985,19093,19101,19103,19113],"fullWord":17980},{"subwords":[4810,4826,5114,5115,5116,5117,5118,5216,5221,5223,5225,5233,5234,5237,5239,5240,5241,5245,5360,6004,6018,12752,12755,12979,12982,13007,13008,13011,15060,15078,15081,15087,15306,15312,15318,15600,15603,15609,15610,15611,15676,15677,15691,15694,15695,15700,15748,16457,17323,17419,17429,17430,17435,17924,17925,17981,18575,18981,18983,18985,19093,19101,19103,19113,19310,19311],"fullWord":17981},{"subwords":[6004,6018,12979,12982,13007,13008,13011,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17899,17901,17924,17928,17982,18981,18985,19010,19014,19093,19101,19103,19113,19244,19245],"fullWord":17982},{"subwords":[10896,10897,10901,13007,13008,13011,15623,15626,15691,15700,17113,17354,17429,17435,17983,19019,19022,19093,19113,19315,19316],"fullWord":17983},{"subwords":[7874,8056,8057,12509,12512,12548,12560,12574,12591,13007,13008,13011,15691,15700,17276,17278,17383,17389,17429,17435,17984,18993,19001,19036,19043,19047,19057,19093,19105,19113],"fullWord":17984},{"subwords":[12936,12937,12944,13007,13008,13011,14160,14165,14182,14186,14188,14201,14350,14383,14403,14422,14427,15691,15700,17406,17414,17429,17433,17434,17435,17436,17641,17642,17644,17645,17921,17922,17985,17986,19075,19090,19093,19113,19125,19323,19386],"fullWord":17986},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13095,13099,13100,15306,15312,15337,15354,15610,15611,15676,15691,15694,15695,15700,15728,15732,15748,16453,16457,17419,17429,17435,17924,17938,17939,17987,18981,18985,19093,19101,19103,19113,19165,19340,19342,20070,20077,20080,20088,20095,20097,20101,20265,20267,20268,20269],"fullWord":17987},{"subwords":[4226,4238,4241,4312,4350,4356,4357,4375,4394,15766,15768,15848,15852,15858,15861,16265,17988,17998,18051,19353,19354,19405,19409,19473,19475,19489],"fullWord":17988},{"subwords":[12082,12173,12177,12180,15806,15820,15852,15856,15858,15861,17203,17205,17989,17990,18103,18116,19371,19886],"fullWord":17990},{"subwords":[7759,7760,8092,8093,8151,8160,8171,8175,8176,12659,12663,15790,15794,15821,15824,15825,15832,15833,15834,15852,15858,15861,17292,17991,18005,18006,18117,18125,19418,19421,19434,19452,19476,19480,19866,19867],"fullWord":17991},{"subwords":[15852,15856,15858,15861,17992,17993,19371,19372,19373,19493,19498,19886],"fullWord":17993},{"subwords":[2505,2509,2668,2670,2690,2695,2696,2697,2700,2710,2714,17994,17995,18018,18035,18540,19390,19396,19403],"fullWord":17995},{"subwords":[3958,3965,3971,4238,4241,4375,4394,13055,13059,13082,16205,16212,16265,17316,17435,17997],"fullWord":17997},{"subwords":[5037,5221,5233,5234,5245,5523,5524,5548,9127,9369,9447,9449,9450,13048,13055,13059,13082,16907,16917,17323,17435,17999,18000,18083,18085,18947],"fullWord":18000},{"subwords":[12082,12173,12177,12180,14422,14427,14551,14558,14561,14567,17203,17205,18002,18003,18103,18114,18115,18116,18135,18147,18148,19386,19433,19453,19456,19624,19628,19825],"fullWord":18003},{"subwords":[12177,12181,14427,14551,14561,14567,17203,17682,17697,18002,18004,18018,18103,18114,18135,18148,19386,19433,19453,19456,19624,19628,19825,21224],"fullWord":18004},{"subwords":[12659,12663,18005,18008,18009,18010,18117,18130,18969,19434,19452,19493,19498],"fullWord":18010},{"subwords":[781,961,972,973,990,13336,13344,13352,13362,13364,13385,14422,14427,14551,14558,14561,14567,16014,16020,16041,17476,17507,17510,17514,17695,18011,18012,18135,18147,18148,18436,18448,18487,18508,19386,19453,19456,19825,19871],"fullWord":18012},{"subwords":[6033,6039,13609,13612,13613,13626,14422,14427,14551,14558,14561,14567,16409,16414,16457,16464,16468,16469,17677,17836,17838,18013,18014,18066,18073,18074,18075,18135,18136,18140,18147,18148,19386,19453,19456,19825,19826,19827,19876,19882],"fullWord":18014},{"subwords":[5014,5021,5022,5037,5525,5548,9127,9447,9449,9450,13850,13866,13871,14421,14427,14438,14441,14551,14561,14567,16883,16907,16917,16918,17598,17675,17999,18015,18083,18085,18135,18148,18926,18936,18947,19386,19453,19456,19825],"fullWord":18015},{"subwords":[12936,12937,12944,12945,13007,13008,13011,13051,13052,13055,13059,13082,14160,14165,14182,14188,14201,14220,14223,14224,14227,14350,14383,14403,14427,14551,14561,14567,15691,15700,15720,15722,15727,15852,15858,15861,17406,17429,17435,17447,17451,17641,17644,17648,17668,17687,17693,17921,17934,17985,18016,18135,18148,19075,19090,19093,19113,19121,19155,19158,19323,19386,19453,19456,19482,19825],"fullWord":18016},{"subwords":[5430,5439,5543,5548,5552,5555,15852,15857,15858,15861,17999,18001,18017,18018,19377,19465,19466,19846,21096,21212,21226,21227],"fullWord":18017},{"subwords":[488,905,911,918,919,924,10241,10304,10313,14898,14912,14939,14944,15864,15865,15942,15960,15964,16041,16056,16103,17022,17028,17039,17149,17773,17802,17956,18018,18022,18449,18472,19231,19232,19377,19381,21212],"fullWord":18022},{"subwords":[4728,4826,5567,5572,5756,5760,10378,10459,10460,10465,10495,10496,11065,11066,11080,16457,17044,17149,18018,18019,18020,18023,18024,18575,21096,21130,21135],"fullWord":18024},{"subwords":[6018,10459,10460,10465,10495,10496,11065,11066,11074,11075,15201,15306,15312,15748,15866,15867,16457,17149,17150,18018,18019,18023,18025,19257,19258,19377,19555,19570,19572,21130,21135,21212],"fullWord":18025},{"subwords":[6039,10453,10459,10460,10465,10495,10496,11065,11066,11081,16457,16464,17149,17151,18018,18019,18021,18023,18026,21130,21135],"fullWord":18026},{"subwords":[11044,11048,11049,17147,17148,17149,18018,18028,19605],"fullWord":18028},{"subwords":[5832,5833,5845,6079,9422,9444,9446,9447,11574,11764,11780,11784,11786,11789,16375,16457,16907,16911,17179,17180,17830,17869,18018,18019,18029,18595,18844,18850,18882,18886,18891,18947,21130,21135,21136,21137],"fullWord":18029},{"subwords":[43,45,67,73,385,392,399,407,1301,1306,1422,1425,1546,1547,1636,1918,2004,2008,2668,5627,10061,10071,10323,10324,10360,10470,10961,10962,15872,15942,15948,16270,16274,16999,17128,18031,18035,18066,19871,19872,19876],"fullWord":18031},{"subwords":[49,67,385,392,1422,1502,1507,2668,2696,2710,2714,10061,10071,10304,10313,10323,15942,16103,16999,17039,17149,18032,18035,19871,19873],"fullWord":18032},{"subwords":[817,825,905,906,1106,1109,1110,1114,5588,5599,5627,5976,5977,14881,14921,14929,15337,15354,15777,15782,15840,16076,16078,16270,16286,16419,18033,18034,18066,18071,18150,19847,19849,19868,19869,19871,19876,19880,19903,19967,20070,20071],"fullWord":18034},{"subwords":[1560,1574,2505,2509,2517,2527,2668,2671,4618,4629,4826,4849,5445,5451,5471,5478,5632,5635,18035,18036,18037,18066,18067,19876,19877],"fullWord":18036},{"subwords":[1560,1574,2505,2509,2517,2527,2668,2671,4618,4629,4826,4849,5445,5451,5471,5478,5632,5635,18035,18036,18037,18066,18067,19876,19877],"fullWord":18037},{"subwords":[1560,1574,2517,2527,2668,2671,4618,4629,4826,4849,5445,5451,5471,5478,18035,18038,18066,18067,19876,19877],"fullWord":18038},{"subwords":[2537,2545,2567,2576,2668,8145,8150,12081,12104,12107,17201,18035,18039,18103],"fullWord":18039},{"subwords":[1636,1661,1663,1716,1721,1736,1948,2004,2008,2009,2011,2668,2690,2693,2697,2700,10323,10459,10460,10465,10470,10961,10962,11044,11050,11053,16457,17128,17147,17994,18035,18040,18045,18066,18074,18540,19390,19397,19401,19403,19422,19605,19876],"fullWord":18040},{"subwords":[1881,1889,2567,2576,2668,2690,2697,2700,9077,9422,9447,11616,11780,12177,16765,16907,16917,17179,17203,17994,18035,18041,18083,18085,18103,18540,18882,18947,19390,19403],"fullWord":18041},{"subwords":[2127,2153,2155,2211,2235,2260,2262,2446,2476,2577,2600,2610,2638,2643,2656,2668,12481,12489,12548,12560,12597,12614,12622,12888,12959,12964,13007,13051,13052,15576,15590,15749,15764,15821,15832,17259,17288,17308,17383,17451,18035,18042,18117,19840,19844,19866,19867],"fullWord":18042},{"subwords":[1715,1716,1720,1721,1736,2668,2672,2687,2690,2694,2697,2700,6039,16457,16464,17994,17996,18035,18043,18044,18066,18073,18074,18075,18540,19390,19397,19401,19403,19876,19882],"fullWord":18044},{"subwords":[1636,1661,1663,1716,1721,1736,1948,2004,2008,2009,2011,2668,2690,2693,2697,2700,10323,10459,10460,10465,10470,10961,10962,11044,11050,11053,16457,17128,17147,17994,18035,18040,18045,18066,18074,18540,19390,19397,19401,19403,19422,19605,19876],"fullWord":18045},{"subwords":[2668,2690,2695,2696,2697,2700,2708,2709,2710,2714,10323,11044,11049,17147,17149,17994,18018,18035,18046,18540,19390,19403,19605],"fullWord":18046},{"subwords":[2505,2509,2610,2656,2668,15749,15764,18035,18047,19840,19844],"fullWord":18047},{"subwords":[67,1422,1502,1507,2668,2696,2710,2714,16089,16103,18035,18048,18179,18217,19871,20449,20493,20496,21079,21093],"fullWord":18048},{"subwords":[4106,4178,4312,4350,12719,12720,12965,12971,13007,13051,13052,15592,15599,16210,17316,17451,18049],"fullWord":18049},{"subwords":[4263,4267,4268,4269,4271,4278,4279,4639,4651,4655,4826,4835,4849,5455,5456,5457,5461,5471,5478,5489,5490,5546,5656,6023,16252,16298,18051,18052,18066,18067,19595,19596,19876,19877],"fullWord":18052},{"subwords":[4224,4268,4271,4278,4279,4312,4326,4330,4350,4351,5654,5655,5656,6023,15021,15037,15048,15766,15768,15777,15782,15840,15848,16298,18051,18053,18056,18066,18071,18150,19595,19596,19876,19880],"fullWord":18053},{"subwords":[3584,3586,4268,4271,4278,4279,5656,5778,5779,6023,10416,10417,10470,10965,10969,10972,10987,16255,16298,17128,18051,18054,18066,18094,19595,19596,19876],"fullWord":18054},{"subwords":[3165,4141,4224,4268,4271,4312,4326,4330,4350,4351,4354,4370,4372,5654,5655,5656,6023,6039,15021,15048,15777,15782,15840,15841,15849,16298,16303,18056,18057,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886],"fullWord":18057},{"subwords":[4774,4785,4826,4849,5466,5467,5468,5470,5471,5478,5507,5511,5512,5522,5865,5875,5918,12624,12627,16381,18059,18066,18067,18117,19876,19877],"fullWord":18059},{"subwords":[5216,5221,5229,5260,5406,5523,5524,13007,13051,13052,15600,15609,17323,17332,17434,17451,17456,18060,18061,18062,18149,19846,19886],"fullWord":18061},{"subwords":[4826,4849,5466,5467,5468,5470,5471,5478,6039,18062,18063,18066,18067,18073,19876,19877,19882],"fullWord":18063},{"subwords":[4810,4826,4849,5358,5471,5478,5537,6039,15060,15087,15773,15777,15778,15782,15840,15841,15849,18062,18064,18066,18067,18071,18072,18073,18149,18150,19846,19876,19877,19880,19881,19882,19886],"fullWord":18064},{"subwords":[4826,4849,5471,5478,6039,18062,18065,18066,18067,18073,19876,19877,19882],"fullWord":18065},{"subwords":[4667,4668,4680,4826,4849,5466,5467,5468,5470,5471,5478,16319,16320,18066,18067,18068,18069,19876,19877,19878],"fullWord":18069},{"subwords":[4680,4826,4849,5471,5478,6031,6039,6042,16319,16320,16323,16342,18062,18066,18067,18068,18070,18073,19876,19877,19878,19882],"fullWord":18070},{"subwords":[5703,7194,7206,7210,15114,15134,15777,15782,15783,15785,15788,15840,16431,18066,18071,18079,18150,18155,19876,19880],"fullWord":18079},{"subwords":[847,905,973,7375,7391,7396,7435,7939,7942,8099,8102,14758,14773,15790,15794,15910,15923,18080,18081,19868,19871,19886],"fullWord":18081},{"subwords":[847,905,7375,7391,7395,7396,7447,7452,7939,7961,7965,8099,8102,8180,8183,8202,14758,14773,14939,14944,15790,15794,15864,15865,15910,15924,16103,18080,18082,18164,19868,19871,21212],"fullWord":18082},{"subwords":[4714,4724,4826,4849,4935,4939,4942,4945,5037,5063,5471,5478,5479,5480,5548,5554,5680,5684,9111,9127,9447,9449,9450,16457,16780,16907,16911,16912,16917,17856,17999,18066,18067,18074,18083,18085,18086,18087,18575,18835,18837,18844,18845,18850,18947,19876,19877],"fullWord":18087},{"subwords":[6039,9431,9447,16457,16464,16903,16907,16911,16913,16915,16917,16920,17857,18066,18073,18074,18075,18083,18085,18086,18088,18090,18844,18850,18947,18949,19876,19882],"fullWord":18088},{"subwords":[9369,9409,9447,13007,13008,13011,13048,13051,13052,13055,13059,13082,15504,15507,15691,15700,15720,15722,15727,15852,15858,15861,16889,16907,16917,17429,17435,17451,17722,17881,18083,18085,18089,18945,18946,18947,19093,19113,19114,19121,19155,19158,19292,19294,19313],"fullWord":18089},{"subwords":[973,1060,6821,6845,7222,10236,15942,16065,18091,18092,19871],"fullWord":18092},{"subwords":[6821,6845,7194,7196,7199,7206,17141,18093,18155],"fullWord":18093},{"subwords":[4728,4826,4835,4849,5471,5472,5476,5478,5489,5490,5496,5546,5756,5760,5778,5779,10378,10416,10417,10470,10987,17044,17128,17129,18066,18067,18094,18095,19595,19596,19876,19877],"fullWord":18095},{"subwords":[5778,5779,10416,10417,10470,10987,11029,11033,11035,11038,15777,15782,15800,15804,15840,15848,17128,17141,18066,18071,18094,18096,18150,19595,19596,19876,19880],"fullWord":18096},{"subwords":[5780,5781,5918,10433,10470,11008,11009,12642,12645,16368,17128,18066,18098,18117,19876],"fullWord":18098},{"subwords":[325,481,486,932,961,8321,8324,8362,8367,8394,8397,8960,8961,9002,10182,10194,10231,11039,13204,13232,13336,13391,13917,14003,14005,14551,14552,15942,16014,16746,17019,17476,18100,18135,19592,19825,19871],"fullWord":18100},{"subwords":[488,693,711,712,1074,1076,10241,11001,11005,11044,12292,12300,12659,12663,15942,15960,15986,16041,16066,17017,17022,17147,18005,18101,18117,18388,18408,18428,18508,19427,19434,19435,19436,19452,19600,19603,19605,19871],"fullWord":18101},{"subwords":[11044,11049,15852,15857,15858,15861,17141,17147,17149,18018,18102,18165,19365,19377,19605,21212,21226,21227],"fullWord":18102},{"subwords":[325,586,932,2848,2868,3025,3189,3193,3225,3336,3386,3390,4293,8290,8296,8362,8970,8988,11086,11094,11097,11105,11330,11335,12083,12158,15880,15973,16129,16260,16531,18050,18103,18104,18105,19592,19871],"fullWord":18105},{"subwords":[586,973,2848,2868,3051,4293,4370,11086,11105,11330,11348,12082,12173,15880,15892,15973,16129,16133,16260,16261,18103,18104,18106,18116,19871],"fullWord":18106},{"subwords":[4826,4849,5471,5478,5845,5846,5847,12091,12097,12127,12134,12152,12153,16317,18066,18067,18103,18108,19876,19877],"fullWord":18108},{"subwords":[5845,5846,5847,11539,12127,12134,12152,12154,15202,15224,15777,15782,15806,15820,15840,16446,18066,18071,18103,18109,18150,19876,19880],"fullWord":18109},{"subwords":[9422,9447,11780,12127,12134,12177,12192,16907,16917,17179,17203,18083,18085,18103,18110,18882,18947],"fullWord":18110},{"subwords":[11885,11890,11891,11915,12127,12134,12138,12140,12522,12527,12560,12597,12872,12888,17383,18103,18111,18112,18117],"fullWord":18111},{"subwords":[2127,2153,2155,2235,2271,2287,2577,2600,2668,12481,12489,12560,12597,12606,12610,12614,12622,12888,13119,13124,17259,17284,17288,17308,17383,17464,17469,18035,18117,18118,18262,20897],"fullWord":18118},{"subwords":[200,605,607,610,712,1053,4492,4500,4501,4605,4606,4774,4785,4826,4849,5471,5478,5507,5511,5512,5522,5627,5865,5875,5918,12229,12624,12627,15893,15986,15988,15995,15996,16270,16308,16381,18058,18066,18067,18117,18119,19871,19876,19877],"fullWord":18119},{"subwords":[200,605,610,712,716,1053,4492,4578,4582,5507,5522,12311,12312,15893,15986,15988,15994,16103,18058,18117,18120,19669,19757,19871,21096,21215],"fullWord":18120},{"subwords":[4774,4785,4810,4826,4849,5471,5478,5507,5511,5512,5522,5539,5541,5865,5875,5918,6000,12358,12359,12624,12626,12627,12655,12656,15060,15087,15227,15230,15773,15777,15778,15782,15821,15822,15823,15832,15840,16381,18066,18067,18071,18117,18121,18150,19660,19846,19866,19867,19876,19877,19880],"fullWord":18121},{"subwords":[4774,4785,4826,4849,4865,4873,5471,5478,5507,5511,5512,5522,5865,5875,5918,12390,12397,12624,12627,16381,16475,16481,18066,18067,18117,18122,19764,19788,19876,19877,20524,20531,20579,20581,20583,20584],"fullWord":18122},{"subwords":[5123,5139,5172,5179,5180,5188,5221,5485,5488,5507,5513,5515,5522,5523,5524,7460,7759,7760,7782,7785,8151,8160,12493,12501,12503,12509,12512,12560,12597,12888,17292,17323,17383,17389,17445,18117,18123,18125,19664],"fullWord":18123},{"subwords":[5430,5439,5507,5522,5539,5541,15821,15832,18117,18124,19669,19846,19866,19867,21096,21212],"fullWord":18124},{"subwords":[5918,9836,9843,12640,12641,12651,12654,18066,18117,18126,18127,19595,19596,19876],"fullWord":18127},{"subwords":[9307,9318,9323,9325,9334,9447,10654,10656,10659,10686,10691,10707,11044,12438,12442,12463,12471,12659,12663,16840,16858,16907,16917,17093,17147,17255,18005,18083,18085,18117,18128,18863,18894,18919,18947,19434,19447,19452,19605,19701,19706,19722,19779],"fullWord":18128},{"subwords":[4774,4785,4826,4849,5471,5478,5507,5511,5512,5522,5865,5875,5918,12624,12627,12651,12654,16381,18066,18067,18117,18129,19876,19877],"fullWord":18129},{"subwords":[5918,6039,12367,12368,12373,12374,12376,12659,12663,16398,16399,16457,16464,18005,18008,18066,18073,18074,18075,18117,18130,18131,18607,18624,19434,19438,19442,19452,19763,19876,19882],"fullWord":18131},{"subwords":[657,693,711,712,1074,1076,12252,12300,12651,12654,12659,12663,15986,16041,18005,18117,18132,18408,18428,18508,19434,19435,19436,19452,19871],"fullWord":18132},{"subwords":[14484,14500,14551,14558,17683,18117,18130,18133,18134,18135,18147,19825],"fullWord":18134},{"subwords":[2307,2610,2645,2647,2656,2662,2668,6033,13577,13602,14262,14281,14403,14428,14429,14432,14518,14544,14551,14995,15014,15018,15248,15272,15305,15749,15755,15757,15764,15777,15782,15840,16423,17687,18035,18066,18071,18135,18136,18137,18138,18150,19825,19840,19844,19876,19880],"fullWord":18138},{"subwords":[6033,6039,13577,13602,14262,14281,14283,14403,14518,14544,14547,14551,14558,15248,15272,15305,15777,15782,15840,15841,15849,17677,17687,17692,18066,18071,18072,18073,18135,18136,18137,18139,18140,18147,18150,19825,19876,19880,19881,19882,19886],"fullWord":18139},{"subwords":[5918,6033,9307,12453,12459,13520,13539,13549,13558,13705,13716,13765,13769,13772,13798,13871,14421,14484,14500,14551,16858,16860,16883,17248,17249,17580,17582,17683,18066,18083,18117,18135,18136,18141,19825,19876],"fullWord":18141},{"subwords":[4826,4849,5471,5478,5525,5526,5531,6033,13478,13488,13569,13573,14237,14416,14438,14441,14506,14515,14551,17530,17675,17676,18066,18067,18135,18136,18142,19814,19825,19876,19877],"fullWord":18142},{"subwords":[6033,13569,13573,13577,13602,14262,14278,14280,14281,14403,14506,14515,14518,14544,14551,15248,15272,15305,15777,15782,15840,17687,18066,18071,18135,18136,18137,18143,18150,19815,19816,19825,19876,19880],"fullWord":18143},{"subwords":[6033,10470,13569,13573,14003,14454,14458,14465,14469,14472,14506,14515,14551,17128,18066,18135,18136,18144,19825,19876],"fullWord":18144},{"subwords":[14003,14009,14465,14469,14470,14506,14515,14551,17149,17697,18135,18145,19825,21224],"fullWord":18145},{"subwords":[10470,10495,10496,11029,11033,11065,11066,11074,11075,15201,15777,15782,15800,15804,15840,15866,15867,17128,17141,17149,17150,18066,18071,18077,18150,18151,18165,19876,19880,21130,21212,21222,21223],"fullWord":18151},{"subwords":[6018,6039,6054,15306,15309,15312,15748,15777,15782,15840,15841,15849,15850,15852,15856,15858,15861,16457,16464,18066,18071,18072,18073,18074,18075,18150,18153,19253,19356,19359,19371,19876,19880,19881,19882,19886],"fullWord":18153},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15852,15857,15858,15861,15866,15867,16457,18018,18019,18066,18071,18074,18076,18077,18150,18154,19257,19258,19356,19359,19377,19570,19572,19876,19880,21130,21135,21212,21226,21227],"fullWord":18154},{"subwords":[4810,4826,4849,5471,5478,6406,6408,6501,6504,7056,7075,7152,7194,7206,7210,7211,15060,15087,15114,15134,15773,15777,15778,15782,15840,16431,18066,18067,18071,18150,18155,18156,19846,19876,19877,19880],"fullWord":18156},{"subwords":[6008,6016,7194,7206,7210,15114,15134,15777,15780,15781,15782,15840,16431,18066,18071,18150,18152,18155,18157,19876,19880],"fullWord":18157},{"subwords":[4810,4826,4849,5351,5353,5420,5421,5471,5478,5485,5488,5988,5992,7460,15060,15087,15141,15773,15777,15778,15782,15790,15794,15840,18066,18067,18071,18150,18160,18161,19846,19855,19856,19860,19876,19877,19880],"fullWord":18161},{"subwords":[5988,5992,6008,6016,15141,15777,15780,15781,15782,15790,15794,15840,18066,18071,18150,18152,18160,18162,19855,19858,19859,19860,19876,19880],"fullWord":18162},{"subwords":[5988,5992,6039,8106,15141,15777,15782,15790,15794,15840,15841,15849,18066,18071,18072,18073,18150,18160,18163,19855,19860,19876,19880,19881,19882,19886],"fullWord":18163},{"subwords":[6008,6016,15777,15780,15781,15782,15840,15866,15867,18066,18071,18077,18150,18152,18166,19876,19880,21130,21212],"fullWord":18166},{"subwords":[905,911,918,1098,14898,14912,15852,15858,15861,16041,16098,17773,18167,18172,18449,18472,18508,18528,19381,19500,19868,19871],"fullWord":18167},{"subwords":[15337,15354,15777,15782,15840,15866,15867,18066,18071,18077,18150,18168,19876,19880,20070,20085,21130,21212],"fullWord":18168},{"subwords":[712,973,987,15986,16009,16037,18117,18130,18169,18170,19871],"fullWord":18170},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":18171},{"subwords":[905,911,918,973,990,14898,14912,15852,15856,15858,15861,16041,17773,17781,18172,18173,18449,18472,18475,18487,18508,19371,19381,19382,19868,19871,19886],"fullWord":18173},{"subwords":[973,990,16041,17788,17796,17798,18174,18175,18487,18495,18503,18508,18515,18519,19493,19498,19871],"fullWord":18175},{"subwords":[16319,16457,17846,18066,18074,18176,18576,18588,18662,19493,19494,19495,19498,19876,19878],"fullWord":18176},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15852,15858,15861,16457,18066,18071,18074,18150,18177,19356,19359,19876,19880,19896],"fullWord":18177},{"subwords":[5691,5693,5790,5798,6092,6104,10383,10392,10451,10459,10460,10465,10471,16319,16457,17052,17818,17828,17848,18178,18576,18588,19992,20000,20088,20095,20101],"fullWord":18178},{"subwords":[67,1234,1422,1502,1507,16089,16103,18179,18180,18217,20449,20493,20496,21079,21093],"fullWord":18180},{"subwords":[200,269,270,280,1145,1147,1150,4574,4707,4826,4865,4873,5707,5708,7253,7258,7396,7460,15893,15910,15912,16089,16090,16270,16475,18181,18182,18183,20303,20309,20313,20318,20326,20327,20328,20331,20341,20449,20524,20531],"fullWord":18183},{"subwords":[269,280,973,1145,1150,6039,7396,7398,15910,15912,15915,15923,16089,16096,16270,16291,16475,16482,18181,18182,18184,20326,20327,20331,20341,20449],"fullWord":18184},{"subwords":[647,691,973,987,1158,1161,9307,15986,16009,16089,16095,16096,16858,16881,16903,18186,18187,18195,18200,20349,20350,20393,20449,20774,20807],"fullWord":18187},{"subwords":[341,347,555,557,973,9422,9423,11330,11348,11399,11400,11774,12082,15973,16089,16096,16764,16903,18189,18190,18191,18243,18244,20449],"fullWord":18191},{"subwords":[574,579,961,972,973,11270,11275,11330,11348,11399,11400,12082,13336,13344,13408,13421,15973,16014,16020,16089,16096,17476,17507,17508,18189,18192,18193,18201,18202,20449,20454,20455,20968],"fullWord":18193},{"subwords":[574,579,961,11270,11275,11330,11399,11400,11408,11424,13336,13408,13421,13424,13436,15973,16014,16089,16103,17476,17518,17697,18189,18192,18194,18201,18217,20449,20454,20456,20493,20496,20968,21051,21055,21064,21067,21079,21089,21092,21093],"fullWord":18194},{"subwords":[950,957,973,987,1158,1161,15986,16007,16009,16089,16095,16096,18195,18197,18198,18200,20393,20449],"fullWord":18198},{"subwords":[716,950,1158,1161,9801,12311,12312,15986,16007,16089,16095,16103,16992,17219,18195,18197,18199,18217,20393,20449,20493,20496,21047,21049,21059,21062,21079,21085,21088,21093],"fullWord":18199},{"subwords":[200,905,973,4574,5330,5336,14736,14751,14933,14938,15893,16089,16096,18203,18204,20303,20318,20410,20412,20416,20442,20449],"fullWord":18204},{"subwords":[869,883,905,973,11276,11314,11330,11348,11399,11400,12082,14808,14820,14933,14938,15973,16089,16096,18189,18205,18206,20410,20425,20429,20442,20449],"fullWord":18206},{"subwords":[325,905,911,918,932,8360,8361,8362,8371,8378,8391,8409,8416,8934,8935,14775,14886,14898,14912,14933,14938,16041,16089,16559,17773,17953,18207,18208,18211,18213,18449,18472,18521,18527,18694,18696,19224,19381,19508,20410,20442,20444,20446,20449,20450,20457,20467,20599,20617,20618,20976,20977],"fullWord":18208},{"subwords":[905,911,918,919,1166,14898,14912,14933,14938,14939,14944,15864,15865,16041,16056,16089,16103,17773,17802,17953,17955,17956,18018,18207,18209,18211,18217,18449,18472,18521,18527,19231,19232,19377,19381,19508,20410,20442,20444,20446,20447,20448,20449,20457,20467,20493,20496,21010,21079,21093,21212],"fullWord":18209},{"subwords":[126,134,325,932,3025,3041,3052,3064,3096,3099,3229,3230,3232,3235,4238,4241,4399,8362,8371,8378,8391,8409,8416,8935,15880,16041,16089,16157,16176,16559,18211,18212,18213,18323,18324,18521,18527,18694,18696,19508,20302,20449,20450,20457,20463,20467,20599,20617,20618],"fullWord":18212},{"subwords":[325,932,1009,1145,1150,5616,5620,5626,6055,8228,8362,8371,8373,8378,8381,8385,8391,8409,8416,8417,8461,8467,8586,8588,8594,8935,16041,16043,16089,16270,16293,16457,16475,16559,16574,16610,17850,18211,18213,18214,18222,18521,18527,18541,18559,18694,18696,18697,18721,18722,19508,20449,20450,20457,20458,20467,20591,20594,20596,20599,20617,20618,20621,20622,20642,20643],"fullWord":18214},{"subwords":[325,932,973,990,8362,8371,8378,8391,8409,8416,8935,16033,16041,16089,16096,16559,16571,17786,18210,18211,18213,18215,18216,18487,18521,18527,18694,18696,19508,20449,20450,20457,20462,20467,20599,20617,20618],"fullWord":18215},{"subwords":[200,1145,1147,1150,1196,1197,4574,4578,4582,4826,4865,4873,4874,5567,5572,5619,15893,16089,16090,16103,16270,16475,18217,18218,20303,20309,20313,20318,20449,20493,20496,20524,20531,21016,21017,21079,21080,21093,21096,21097,21105,21130,21138,21139],"fullWord":18218},{"subwords":[227,817,825,905,906,1145,1150,1166,1196,1197,5588,5599,5619,5976,5977,14881,14933,14938,14939,14944,15281,15282,15864,15865,15866,15867,16089,16091,16097,16103,16105,16270,16286,16419,16475,18217,18219,18220,20410,20417,20419,20442,20448,20449,20493,20496,20510,20512,20513,21010,21016,21017,21071,21079,21093,21097,21099,21104,21105,21130,21138,21139,21212],"fullWord":18219},{"subwords":[817,825,905,906,907,973,1145,1150,5588,5599,5976,5977,6039,14881,14885,14933,14938,15281,16089,16091,16092,16096,16270,16286,16290,16291,16419,16475,16482,18220,18221,20410,20417,20419,20442,20449,20510,20512,20975],"fullWord":18221},{"subwords":[973,982,990,1009,1145,1150,5616,5618,5620,5626,6039,6055,16041,16043,16046,16089,16096,16270,16291,16293,16296,16457,16464,16475,16482,17850,17852,18211,18216,18222,18223,18487,18521,18527,18541,18559,19508,20449,20457,20458,20461,20462,20467,20591,20593,20594,20596],"fullWord":18223},{"subwords":[1009,1145,1150,1196,1197,5616,5619,5620,5626,6055,16041,16043,16089,16103,16270,16293,16457,16475,17802,17850,18018,18019,18211,18217,18222,18224,18521,18527,18541,18559,19508,20449,20457,20458,20467,20493,20496,20591,20594,20596,21016,21017,21079,21093,21097,21105,21106,21130,21135,21138,21139],"fullWord":18224},{"subwords":[4680,4774,4785,4786,4826,4865,4873,5665,5865,5875,5918,6118,6121,12339,12340,12344,12390,12397,16319,16320,16335,16381,16475,16477,16481,18225,18226,20524,20531,20532,20533,20536,20541,20544,20579,20581,20583,20584],"fullWord":18226},{"subwords":[4680,4826,4865,4873,6031,6039,6042,6118,6121,16319,16320,16323,16342,16475,16477,16482,18225,18227,20524,20531,20532,20533,20536],"fullWord":18227},{"subwords":[6031,6033,6039,6042,6118,6121,13489,13510,13630,13635,16319,16336,16338,16342,16475,16482,17544,17547,18228,18229,20532,20547,20549],"fullWord":18229},{"subwords":[6033,6038,6118,6121,6189,6198,13489,13510,13630,13635,16319,16336,16339,16475,17544,17697,18228,18230,20532,20547,20549,20550,21016,21017,21127,21130,21138,21139],"fullWord":18230},{"subwords":[6031,6039,6042,6118,6121,16319,16342,16457,16464,16475,16482,17850,17852,18231,18232,18576,18588,20532,20551,20591,20593,20594,20596],"fullWord":18232},{"subwords":[5780,5781,6039,10453,16368,16370,16475,16482,17059,17061,18233,18234,20571,20573],"fullWord":18234},{"subwords":[5984,6092,6100,6104,6118,6119,6120,6121,15292,15337,15354,16319,16340,16425,16449,16472,16475,16478,18236,19992,19996,19998,20000,20070,20073,20532,20587],"fullWord":18236},{"subwords":[6647,6650,6651,6654,9135,9447,16801,16804,16903,16907,16915,18237,18238,18947,20841,20842,20853],"fullWord":18238},{"subwords":[9152,9155,16834,16835,16903,18241,18242,20761,20765],"fullWord":18242},{"subwords":[5716,5918,6122,7493,7511,7604,7611,9307,12390,12397,16475,16480,16481,16815,16858,16860,16862,16866,16867,18239,18245,18246,18247,20579,20584,20742,20749,20774,20785,20788,20790,20792,20807,20826],"fullWord":18247},{"subwords":[7604,7611,9307,16815,16822,16858,16866,16873,16881,16903,18239,18240,18246,18248,20742,20749,20774,20790,20792,20807],"fullWord":18248},{"subwords":[7604,7611,9307,16815,16858,16866,18239,18246,18249,20742,20749,20774,20790,20792,20793,20807,20810,21144,21145],"fullWord":18249},{"subwords":[9276,9284,9307,9913,9929,9941,16858,16876,16878,16881,16903,16954,16974,16978,16985,18250,20774,20796,20800,20807],"fullWord":18250},{"subwords":[4714,4826,4865,4873,4935,4939,5014,5021,5037,6033,9111,9127,13478,13488,13630,13635,13705,13710,13716,14421,16475,16780,16883,17530,17544,17562,18251,18252,20524,20531,20720,20725,20811,20812,20815,20826,20827,20838,20839],"fullWord":18252},{"subwords":[6033,6039,13630,13635,13705,13716,13844,14421,16475,16482,16883,16888,16903,17544,17547,17567,18251,18253,20811,20815,20826,20830,20838,20840],"fullWord":18253},{"subwords":[9409,16889,16899,16903,17722,18254,18255],"fullWord":18255},{"subwords":[9409,16889,17149,17722,18254,18256,20771,20824,21010,21212],"fullWord":18256},{"subwords":[8678,8681,9032,16758,16903,18257,18258,20712,20713,20832,20836],"fullWord":18258},{"subwords":[3272,3328,3331,3429,4238,4241,4399,8612,8678,8685,8688,8691,8935,9440,9447,16178,16653,16769,16907,18259,18742,18823,18830,18947,20678,20680,20687,20832,20842,20843,20845,20853],"fullWord":18259},{"subwords":[5799,6107,6110,9416,10414,10415,10471,10481,10486,10493,10536,10551,10711,10719,16475,17059,18260,20004,20007,20129,20134,20135,20138,20144,20197,20755,20757,20826,20855,20860],"fullWord":18260},{"subwords":[9447,16457,16475,16907,16911,17850,18261,18844,18850,18947,20088,20095,20101,20129,20134,20135,20138,20197,20591,20594,20596,20826,20842,20853,20855,20860],"fullWord":18261},{"subwords":[12560,12606,12610,13119,13124,17284,17286,17383,17395,17397,17434,17464,17469,17470,18263,18264,20897,20903,20925],"fullWord":18264},{"subwords":[12905,12936,14229,14233,17406,17414,17434,17464,17470,18265,18266,18268,18269,20903,20924,20925,20927,20928],"fullWord":18266},{"subwords":[8920,8930,12809,12810,12895,12898,16686,16690,16716,16719,17434,17464,17470,18267,20689,20709,20903,20925,20926],"fullWord":18267},{"subwords":[5216,5221,5229,5282,5406,13007,15600,15609,15734,15744,17323,17332,17434,17464,17470,18270,18271,20929,20931],"fullWord":18271},{"subwords":[4774,4785,4795,4826,5567,5572,5579,5580,5865,5875,5918,16381,18275,18287,21096,21120,21122,21130],"fullWord":18275},{"subwords":[13681,14009,16758,17149,17697,18276,18277],"fullWord":18277},{"subwords":[13681,14009,16758,16763,17149,17697,18276,18278],"fullWord":18278},{"subwords":[716,10304,10313,12310,12311,12312,15942,15986,16103,17029,17039,17149,18279,19923,19948,19957],"fullWord":18279},{"subwords":[973,10236,10304,10313,15942,16103,16109,17029,17036,17039,17041,17149,18280,19923],"fullWord":18280},{"subwords":[337,340,1124,9453,10304,10313,15931,15942,16103,16844,17029,17039,17149,18281,19919,19923,20107,20110,20112,20115,20191],"fullWord":18281},{"subwords":[2300,2304,10323,10748,10758,11817,11823,11884,12872,17096,17149,17308,17354,17472,18282],"fullWord":18282},{"subwords":[4639,4774,4785,4795,4826,5567,5572,5579,5580,5856,5865,5875,5918,6023,16298,16381,18283,18284,18287,21096,21120,21122,21130],"fullWord":18284},{"subwords":[3732,3777,3814,3825,3964,4029,11891,11915,11920,12522,12527,12560,12573,12872,17316,17383,17472,18283,18285,21183],"fullWord":18285},{"subwords":[4985,5007,5037,5040,9101,9127,9207,9307,16178,16769,16858,18283,18286,21096,21140,21141,21144,21145],"fullWord":18286},{"subwords":[5172,5188,5221,5229,12493,12501,12560,12573,17323,17332,17383,17395,17434,17472,17475,18288,18289,21096,21154,21183,21184],"fullWord":18289},{"subwords":[693,711,716,12286,12311,12312,15986,16041,16098,16103,17802,18018,18030,18290,18408,18428,18429,18528],"fullWord":18290},{"subwords":[6033,6038,8549,8552,8584,8607,8934,9051,9053,9054,13577,13681,14262,14281,14290,14293,14403,14410,14576,14577,15248,15272,15305,15866,15867,16574,16758,16759,17672,17697,18291,21127,21130,21212],"fullWord":18291},{"subwords":[8789,8845,8856,8886,9058,9060,9061,12560,12565,12573,12810,12936,13669,13670,13681,14112,14115,14172,14187,16693,16758,17383,17406,17407,17409,17472,17697,18292,21183],"fullWord":18292},{"subwords":[5918,6000,6039,12367,15866,15867,18287,18293,18294,21120,21122,21130,21212],"fullWord":18294},{"subwords":[349,359,361,647,691,716,905,9307,9376,9378,9409,12276,12282,12311,12312,14784,14786,14787,14821,14838,14839,14939,14944,15864,15865,15986,16028,16103,16858,16889,17722,18295,18296,21075,21077,21144,21145,21212],"fullWord":18296},{"subwords":[9307,9409,12474,12479,16858,16889,16922,17722,18297,21144,21145,21212],"fullWord":18297},{"subwords":[14403,14410,14549,14551,14558,14560,17672,17687,17692,17697,18135,18147,18298,18299,19825,19886,21212,21224],"fullWord":18299},{"subwords":[14403,14410,14549,14551,17672,17687,17697,18135,18298,18300,19825,21212,21224],"fullWord":18300},{"subwords":[5845,6039,6079,11569,11573,11574,12082,16457,16464,17830,17832,18018,18019,18021,18301,18595,21130,21135],"fullWord":18301},{"subwords":[72,787,911,1210,1243,1366,1372,1462,2308,2315,2349,4427,4537,4548,5303,5327,14736,14898,14899,18302,18303,18339,18449],"fullWord":18303},{"subwords":[17,30,31,72,1009,1219,1243,1246,1462,1464,1466,1515,1542,1560,1721,1722,4427,4551,4618,4630,5620,5632,6055,18302,18304,18339,18541],"fullWord":18304},{"subwords":[31,32,67,72,817,825,905,906,911,918,993,1009,1366,1377,1381,1382,1419,1422,1425,1428,1456,1457,1459,1462,1464,1467,1482,1535,1539,1540,1542,1545,1716,1721,1722,1724,1736,2308,2317,2318,2343,2349,2350,2382,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14995,15014,15306,15312,15748,15869,16041,16043,16270,16286,16293,16419,16423,16457,17723,17773,17775,18302,18306,18318,18449,18453,18455,18472,18540,18541,18554,18557,18559,19381],"fullWord":18306},{"subwords":[67,72,382,385,386,392,488,1013,1210,1213,1214,1215,1327,1422,1423,1424,1456,1462,1482,1919,1922,1923,10061,10071,10241,10323,15942,15960,16041,16999,17022,17723,18302,18307,18308,18318,18540],"fullWord":18308},{"subwords":[30,31,43,72,385,399,488,1009,1243,1246,1296,1301,1302,1462,1464,1466,1515,1542,1560,1636,1661,1721,1722,1900,1922,1936,1938,4427,4466,4551,4587,4601,4604,4618,4630,4728,4747,5620,5756,6055,10061,10090,10093,10247,10248,10324,10327,10378,10460,18302,18309,18310,18339,18370,18541,18547],"fullWord":18310},{"subwords":[31,32,43,45,46,67,72,385,392,399,407,488,1009,1301,1306,1422,1425,1456,1457,1462,1464,1467,1482,1540,1542,1545,1636,1661,1663,1716,1721,1722,1724,1736,1918,1919,1922,1923,1936,1937,1948,5616,5620,5626,6055,10061,10071,10241,10247,10323,10324,10360,10366,10459,10460,10465,15872,15942,15948,15960,16041,16043,16270,16274,16293,16457,16459,16999,17022,17023,17723,17724,17750,17811,18302,18309,18311,18318,18341,18370,18374,18540,18541,18547,18548,18559,18660],"fullWord":18311},{"subwords":[31,43,72,385,399,488,1009,1301,1462,1464,1486,1542,1636,1661,1721,1722,1737,1922,1936,5620,6055,10061,10247,10324,10460,18302,18309,18312,18370,18495,18498,18541,18547,18565],"fullWord":18312},{"subwords":[51,67,72,1422,1456,1462,1482,2029,2034,2035,2037,2041,2160,2182,2183,2185,2191,2237,12686,12692,15874,16041,17308,17399,17435,17723,17885,18302,18313,18314,18318,18432,18435,18540,19060],"fullWord":18314},{"subwords":[51,58,59,67,72,905,911,918,1366,1419,1422,1456,1462,1482,2029,2030,2033,2034,2035,2037,2041,2219,2220,2237,2308,2343,2349,2350,2446,2476,12680,12683,12686,12692,12959,12964,13007,13008,13011,14898,14912,15574,15576,15590,15673,15691,15700,15874,16041,17303,17308,17429,17435,17723,17773,17885,18302,18315,18316,18318,18432,18435,18449,18463,18464,18472,18540,19093,19094,19097,19113,19381],"fullWord":18316},{"subwords":[51,58,61,72,77,911,1093,1366,1462,2029,2030,2037,2219,2237,2268,2308,2349,2446,2498,2610,2697,12680,12686,12959,13008,13051,13059,14898,15576,15691,15722,15749,15750,15858,18302,18315,18317,18319,18432,18449,18463,18508,19093,19094,19155,19390,19391,19462,19840],"fullWord":18317},{"subwords":[30,31,72,77,1009,1053,1243,1246,1462,1464,1466,1490,1515,1542,1546,1548,1560,1721,1722,2517,2697,4427,4551,4562,4618,4630,4637,5445,5471,5479,5620,5627,6055,18302,18319,18320,18339,18508,18541,19390,19391,19397,19398],"fullWord":18320},{"subwords":[72,77,385,386,488,1210,1213,1462,1922,2697,10061,18302,18307,18319,18321,18508,19390,19391,19392,19605],"fullWord":18321},{"subwords":[93,94,126,127,1009,2766,2772,2807,2808,3052,4431,4551,4639,4651,5620,6055,6057,18326,18327,18339,18358,18541,18545],"fullWord":18327},{"subwords":[93,121,126,796,817,867,911,1009,2807,2941,2954,2962,3003,3004,3052,3055,3161,4085,4107,5588,5620,5976,5982,6055,6057,9791,14717,14729,14732,14798,14898,14901,14959,15021,15049,15312,15748,18326,18328,18358,18360,18449,18453,18541,18545,18554,19197,19201,19244],"fullWord":18328},{"subwords":[93,126,1009,1196,2807,2812,3052,3100,5620,6055,6057,9865,10056,18326,18329,18332,18358,18541,18545,19553,21041,21047,21097,21135],"fullWord":18329},{"subwords":[93,126,399,488,1009,2807,2813,2822,3052,3135,3495,5620,5648,5778,6055,6057,9760,10072,10073,10082,10128,10247,10324,10338,10376,10416,10460,18326,18330,18358,18365,18370,18375,18541,18545,18547],"fullWord":18330},{"subwords":[126,504,1014,1020,2848,3052,3605,3732,3733,3965,11086,11265,11361,11814,12010,12686,18333,18334,18389,18432,19026],"fullWord":18334},{"subwords":[90,126,1040,2764,3052,3402,3429,18325,18336,18337,18347,18495,18823,18831,18950],"fullWord":18337},{"subwords":[269,270,1009,4551,5620,5707,5709,6055,7253,7257,7267,7269,7270,7416,7417,7418,7540,18339,18342,18343,18541],"fullWord":18343},{"subwords":[269,817,911,1009,5588,5620,5709,5976,5982,5988,6055,7267,7269,7271,7375,7416,7417,7461,7540,7946,7972,7990,14758,14762,14898,14901,15141,15312,15748,18342,18344,18449,18453,18541,18554],"fullWord":18344},{"subwords":[8249,8378,8688,18346,18347,18495,18684,18691,18950],"fullWord":18346},{"subwords":[169,326,327,337,338,399,434,488,1009,4466,4551,4601,4604,4714,4728,4739,4747,4839,4891,4935,4942,4963,5620,5680,5756,6055,9103,9104,9117,9437,10090,10093,10119,10126,10247,10248,10324,10327,10378,10414,10460,10530,10536,10537,10691,10694,18339,18347,18349,18350,18370,18541,18547,18833,18835,18844,18845,18863,18864,18866,18867],"fullWord":18350},{"subwords":[337,349,399,405,434,435,488,491,817,857,911,1009,5588,5592,5620,5976,5982,6055,9376,9382,9384,9437,10121,10126,10247,10254,10324,10355,10414,10460,10502,10536,10549,10675,10677,10691,10694,10695,10705,14780,14898,14901,14968,15197,15312,15313,15399,15444,15473,15542,15748,18347,18349,18351,18370,18372,18449,18453,18541,18547,18554,18844,18847,18863,18866,18868,18941,19210,19262],"fullWord":18351},{"subwords":[337,349,434,488,495,911,9367,9376,9437,10121,10126,10502,10675,10691,10897,12680,12686,12812,12948,13008,14780,14898,14909,15399,15401,15504,15617,15691,18347,18349,18352,18432,18449,18463,18863,18945,19002,19093,19094,19210,19262,19292],"fullWord":18352},{"subwords":[647,691,693,700,704,711,1044,9307,9318,9325,9447,12463,12471,15936,15986,16041,16047,16858,16907,17255,17742,17788,17878,18347,18354,18355,18408,18428,18495,18503,18894,18919,18921,18924,18947,18950,18951,18952,18964,18969],"fullWord":18355},{"subwords":[732,781,1009,5620,5956,6055,13364,13367,13439,13464,13613,13705,13717,13850,13851,18347,18356,18436,18437,18541,18844,18926,18928],"fullWord":18356},{"subwords":[596,693,700,1048,1135,1158,9325,12463,18347,18357,18408,18521,18894,19503,19530,20349,20353,20393,20404,20774,20842],"fullWord":18357},{"subwords":[817,825,867,868,905,906,911,918,950,953,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,9789,9791,9792,9804,14798,14802,14881,14898,14901,14905,14912,15306,15312,15748,15939,16041,16043,16270,16286,16293,16419,16457,16940,16942,17746,17773,17775,17779,17809,17958,18358,18360,18361,18362,18449,18453,18455,18472,18484,18541,18545,18546,18554,18557,18559,19244,19245,19381],"fullWord":18361},{"subwords":[1009,5620,6055,8256,8378,8381,8461,18358,18363,18495,18498,18541,18545,18565,18691,18697,18719],"fullWord":18363},{"subwords":[287,369,693,700,7283,7289,7416,7561,7604,7637,7745,9276,9325,9913,9922,9946,9985,12230,12463,18342,18347,18364,18408,18410,18418,18894,18901],"fullWord":18364},{"subwords":[93,94,126,127,399,488,1009,2766,2772,2813,3052,3135,3447,3495,4431,4466,4551,4601,4604,4639,4641,4728,4747,5620,5648,5756,6055,6057,10072,10073,10074,10090,10093,10247,10248,10324,10327,10376,10378,10460,18339,18365,18366,18370,18541,18547],"fullWord":18366},{"subwords":[126,488,2812,2813,2822,3052,3100,3487,10056,10072,10082,10089,10135,10304,18326,18332,18365,18367,18375,18380,21041,21047],"fullWord":18367},{"subwords":[111,126,488,497,586,2813,2835,2848,3052,3071,3453,4289,4293,4375,10072,10136,11086,11173,11192,11361,11387,11392,12108,18365,18369,18389,18508,19605],"fullWord":18369},{"subwords":[399,488,693,694,1009,1044,5620,5745,6055,6074,10174,10247,10251,10253,10267,10324,10344,10349,10437,10460,12229,12292,12325,12374,18370,18371,18408,18495,18498,18541,18547,18565,18607,18630,18969],"fullWord":18371},{"subwords":[399,405,406,407,488,491,492,817,825,905,906,911,918,993,1009,5588,5592,5593,5599,5616,5620,5626,5976,5977,5982,6018,6055,10207,10228,10241,10243,10247,10254,10324,10355,10360,10366,10459,10460,10465,14805,14881,14898,14901,14905,14912,14968,14973,15306,15312,15748,15942,15948,15960,15962,16041,16043,16270,16274,16286,16293,16419,16420,16457,16459,17022,17023,17025,17750,17752,17773,17775,17811,18341,18370,18372,18373,18374,18449,18453,18455,18472,18541,18547,18548,18554,18557,18559,18660,19381],"fullWord":18373},{"subwords":[399,488,1009,4466,4551,4601,4604,4728,4747,5620,5756,5778,6055,9760,10090,10093,10128,10129,10247,10248,10324,10327,10338,10378,10416,10460,18339,18358,18370,18375,18376,18541,18545,18547],"fullWord":18376},{"subwords":[399,405,488,491,817,867,911,1009,5588,5592,5620,5778,5976,5982,6055,9760,9791,10128,10130,10214,10247,10254,10324,10338,10355,10416,10460,14798,14898,14901,14968,15312,15748,18358,18360,18370,18372,18375,18377,18449,18453,18541,18545,18547,18554,19244],"fullWord":18377},{"subwords":[337,399,429,434,488,1009,5620,5778,6055,9150,9437,9760,9906,9946,9947,10126,10128,10247,10324,10338,10414,10416,10460,10536,10566,10691,10694,18347,18349,18358,18370,18375,18378,18541,18545,18547,18844,18861,18863,18866],"fullWord":18378},{"subwords":[399,405,442,449,488,491,817,911,1009,5588,5592,5620,5780,5976,5982,6055,10247,10254,10324,10343,10355,10460,14898,14901,14968,15312,15748,18370,18372,18381,18382,18449,18453,18541,18547,18554,18591],"fullWord":18382},{"subwords":[442,455,457,488,495,1018,1155,1164,10292,10897,10942,12686,12856,13114,18381,18383,18432,18521,19019,19166,19548,20378,20389],"fullWord":18383},{"subwords":[202,488,497,586,1053,1072,4472,4559,5442,10090,10136,10270,11107,11173,11192,11361,11387,11392,12091,18339,18385,18389,18508,19605],"fullWord":18385},{"subwords":[487,488,495,496,693,711,10181,10241,10741,10744,10896,10897,10901,12292,12293,12560,12574,12575,12576,12591,12686,12692,15942,15956,15960,15986,16041,17017,17022,17113,17278,17354,17383,17435,17885,18386,18387,18408,18428,18432,18435,19036,19037,19057],"fullWord":18387},{"subwords":[383,399,466,488,504,1009,1014,5620,5782,6055,10136,10137,10145,10247,10324,10460,11173,11174,11180,11192,11193,11361,11362,11437,11442,11456,11502,11574,11575,11576,18370,18389,18390,18393,18541,18547,18549,18595],"fullWord":18390},{"subwords":[382,466,470,488,504,1013,1014,1017,10136,10137,10138,10161,10241,11173,11174,11192,11193,11195,11330,11356,11361,11376,15942,15960,15973,16041,17012,17022,18389,18391,18407],"fullWord":18391},{"subwords":[72,77,586,869,911,920,1366,1462,2308,2349,2498,2567,2610,2637,2697,11276,11320,11361,11392,14808,14898,15749,15806,15807,15858,18302,18319,18389,18392,18449,18508,19216,19390,19391,19617,19840],"fullWord":18392},{"subwords":[399,488,594,1009,1196,5620,5782,5785,6055,6079,10136,10145,10247,10304,10324,10460,10495,11065,11173,11180,11192,11196,11361,11362,11367,11408,11437,11442,11445,11456,11458,11502,11574,11575,11576,18370,18389,18393,18395,18541,18547,18549,18595,21050,21051,21097,21135],"fullWord":18395},{"subwords":[817,825,869,883,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5845,5976,5977,5982,6018,6055,11276,11286,11287,11314,11315,11320,11325,11330,11333,11356,11358,11361,11362,11364,11365,11366,11376,11437,11453,11456,11457,11539,11560,11574,11575,14808,14820,14881,14898,14901,14905,14912,14975,14978,15202,15224,15306,15312,15748,15973,15978,16041,16043,16270,16278,16286,16293,16419,16457,17157,17161,17773,17775,17813,17830,17959,18389,18393,18396,18397,18398,18407,18449,18453,18455,18472,18541,18549,18552,18554,18557,18559,18595,18644,18648,19216,19219,19381],"fullWord":18397},{"subwords":[1009,5616,5620,5626,5845,6055,11330,11356,11361,11362,11366,11376,11377,11378,11381,11382,11437,11453,11456,11457,11560,11574,11575,15973,15978,16041,16043,16270,16278,16293,16457,17788,17790,17813,17830,17846,18389,18393,18398,18399,18407,18490,18495,18498,18503,18541,18549,18552,18559,18565,18567,18595,18662],"fullWord":18399},{"subwords":[287,341,693,700,7283,7289,7317,7334,7416,7561,7604,7637,7745,9325,11127,11132,11156,11213,11361,11371,11372,11649,11697,11711,11729,12230,12244,12443,12463,18342,18347,18389,18400,18408,18410,18882,18894,18901],"fullWord":18400},{"subwords":[341,1009,5620,5832,6055,9162,9444,11152,11204,11361,11362,11437,11456,11574,11575,11688,11786,18347,18389,18393,18401,18541,18549,18595,18844,18882,18886],"fullWord":18401},{"subwords":[161,574,732,733,781,1009,4472,4475,4484,4551,4805,5620,5658,5956,6055,11107,11115,11270,11361,11362,11363,11437,11438,11456,11574,11575,13171,13364,13367,13368,13439,13464,13478,13613,18339,18389,18393,18394,18402,18403,18436,18437,18438,18541,18549,18595,18596],"fullWord":18403},{"subwords":[574,732,735,781,782,817,869,911,1009,5588,5620,5956,5976,5982,6055,11270,11276,11286,11320,11361,11362,11364,11437,11456,11539,11574,11575,13286,13294,13328,13329,13364,13367,13372,13439,13455,13460,13464,13577,13593,13599,13613,14240,14247,14248,14262,14808,14816,14851,14852,14867,14898,14901,14975,14979,15202,15209,15248,15312,15747,15748,18389,18393,18396,18402,18404,18436,18437,18439,18449,18453,18467,18541,18549,18554,18595,18596,18644,19216,19217,19221],"fullWord":18404},{"subwords":[574,693,781,1020,1028,11213,11265,11270,11361,11810,11814,11891,11947,12010,12244,12257,12293,12522,12574,12575,12686,12937,13239,13261,13364,14188,14198,18389,18402,18405,18408,18432,18436,19026,19036,19075],"fullWord":18405},{"subwords":[176,528,529,532,605,693,694,695,1009,4472,4475,4479,4492,4500,4512,4551,4605,4774,4788,5620,5658,5865,6055,6074,11107,11115,11213,11218,11219,11361,11362,11363,11437,11438,11446,11451,11456,11512,11516,11574,11575,12229,12244,12245,12246,12325,12374,18339,18389,18393,18394,18408,18409,18541,18549,18595,18607,18610],"fullWord":18409},{"subwords":[269,270,277,605,693,694,695,1009,4492,4500,4502,4512,4551,4605,4774,4788,5620,5707,5865,6055,6074,7253,7416,7417,7418,7493,7512,7540,7745,12229,12230,12325,12374,18339,18342,18408,18410,18411,18541,18607,18610],"fullWord":18411},{"subwords":[269,277,295,399,488,620,625,693,694,1009,5620,5745,6055,6074,7293,7298,7416,7417,7477,7487,7493,7494,7512,7540,7674,7680,7745,10109,10174,10247,10251,10324,10344,10349,10398,10437,10460,12229,12230,12292,12325,12374,18342,18370,18408,18410,18412,18541,18547,18607],"fullWord":18412},{"subwords":[488,693,716,7293,7416,7447,7745,10109,10304,12230,12292,12311,18342,18408,18410,18413,18417,21058],"fullWord":18413},{"subwords":[299,304,634,693,711,7396,7416,7423,7745,7746,7768,7770,7874,12230,12233,12293,12509,12512,12560,12574,12575,12591,12686,12692,15910,15921,15986,16001,16041,17211,17278,17383,17389,17435,17732,17885,18342,18345,18408,18410,18414,18415,18416,18428,18432,18435,18993,18994,18997,19001,19036,19043,19044,19047,19057],"fullWord":18415},{"subwords":[596,693,711,950,951,9770,12283,15986,16007,16008,16011,16041,16042,17767,18408,18418,18419,18420,18423,18428,18484],"fullWord":18420},{"subwords":[605,693,694,695,1009,4492,4500,4509,4512,4551,4605,4774,4788,5620,5865,6055,6074,9836,9844,9968,12229,12243,12325,12374,18339,18358,18359,18408,18418,18421,18541,18545,18607,18610],"fullWord":18421},{"subwords":[693,694,709,817,867,911,1009,5588,5595,5620,5976,5982,6055,6074,9785,9791,9836,9844,9855,12229,12277,12319,12325,12374,14798,14821,14840,14847,14898,14901,15241,15312,15748,18358,18359,18360,18408,18418,18422,18449,18453,18460,18541,18545,18554,18607,18649,19244],"fullWord":18422},{"subwords":[605,615,657,663,693,694,695,1009,4492,4500,4512,4551,4605,4774,4788,5620,5865,6055,6074,12229,12252,12325,12374,18339,18408,18424,18541,18607,18610],"fullWord":18424},{"subwords":[615,657,663,693,694,709,817,911,1009,5588,5595,5620,5976,5982,6055,6074,12229,12252,12319,12325,12374,14821,14847,14898,14901,15241,15312,15748,18408,18425,18449,18453,18460,18541,18554,18607,18649],"fullWord":18425},{"subwords":[126,128,657,693,700,701,2869,2908,3052,3402,3429,9207,9208,9297,9325,12252,12463,18347,18408,18426,18823,18894],"fullWord":18426},{"subwords":[657,693,700,9297,9325,12252,12463,18347,18408,18427,18894],"fullWord":18427},{"subwords":[596,693,707,911,1036,1044,14821,14847,14898,14899,14913,18408,18431,18449,18460,18476,18477,18495,18497,18969],"fullWord":18431},{"subwords":[341,347,555,1020,1022,9367,9368,9422,9447,11160,11265,11267,11330,11356,11361,11376,11772,11780,11813,11814,11816,11854,11862,12007,12010,12030,12686,12692,12869,12870,12872,13031,15973,16041,16764,16907,17179,17378,17435,17885,18347,18389,18407,18432,18433,18435,18882,18947,19026,19034],"fullWord":18433},{"subwords":[9367,9368,9447,12686,12692,13031,16041,16907,17435,17788,17885,17887,18347,18432,18434,18435,18495,18503,18947,18950,18964,18973,19130,19131,19144],"fullWord":18434},{"subwords":[732,735,737,739,775,779,781,782,817,825,905,906,911,918,961,966,993,1009,5588,5599,5616,5620,5626,5956,5976,5977,5982,6018,6033,6055,13286,13294,13299,13321,13322,13328,13329,13333,13336,13352,13355,13358,13364,13367,13372,13373,13374,13385,13439,13455,13459,13460,13461,13464,13465,13577,13599,13609,13613,13626,14247,14248,14251,14252,14262,14281,14284,14403,14427,14851,14852,14856,14866,14867,14881,14891,14898,14901,14905,14912,14979,14982,15248,15253,15272,15305,15306,15312,15748,16014,16041,16043,16270,16286,16293,16409,16410,16419,16457,17476,17494,17495,17510,17511,17523,17652,17773,17775,17836,17948,17961,18436,18437,18439,18440,18441,18448,18449,18453,18455,18467,18469,18472,18541,18554,18557,18559,19221,19222,19381,19386],"fullWord":18440},{"subwords":[287,693,700,750,781,7283,7289,7365,7416,7561,7604,7612,7637,7745,9203,9325,12230,12257,12453,12463,13193,13197,13239,13251,13261,13364,13721,13765,13773,13799,13800,13850,13851,18342,18347,18408,18410,18436,18442,18894,18901,18926],"fullWord":18442},{"subwords":[349,359,781,905,911,918,961,997,1032,9376,9409,9447,13200,13202,13286,13303,13321,13328,13331,13333,13336,13352,13364,13385,13839,13850,13851,13852,13866,14247,14252,14403,14421,14427,14851,14862,14866,14867,14891,14898,14912,15508,15524,16014,16028,16041,16883,16889,16907,16908,17476,17494,17510,17598,17652,17665,17722,17744,17773,17881,17948,17967,17974,18347,18436,18443,18444,18448,18449,18467,18469,18472,18474,18926,18936,18947,19221,19222,19295,19301,19381,19386],"fullWord":18444},{"subwords":[161,732,733,762,781,1009,4551,4805,5620,5956,6055,13171,13268,13364,13367,13368,13439,13464,13478,13569,13613,14237,18339,18436,18437,18438,18445,18541],"fullWord":18445},{"subwords":[732,735,762,781,782,817,911,1009,5588,5620,5956,5976,5982,6055,13268,13276,13286,13294,13328,13329,13364,13367,13372,13439,13455,13460,13464,13569,13577,13599,13613,14247,14248,14262,14278,14851,14852,14867,14898,14901,14979,15248,15312,15748,18436,18437,18439,18446,18449,18453,18467,18541,18554,19221],"fullWord":18446},{"subwords":[732,762,781,1009,5620,5956,6055,13268,13364,13367,13439,13464,13569,13613,18436,18437,18447,18495,18498,18541,18565],"fullWord":18447},{"subwords":[269,817,911,1009,5588,5620,5976,5982,5988,6055,7375,7416,7417,7461,7540,7946,7972,7990,14758,14762,14898,14901,15141,15312,15748,18342,18449,18453,18456,18476,18495,18498,18499,18541,18554,18565,18672,19235],"fullWord":18456},{"subwords":[250,254,349,828,911,6254,6261,6308,6332,6344,6518,6621,6651,7042,9376,14754,14898,15450,15458,18347,18449,18457,18851],"fullWord":18457},{"subwords":[287,349,693,700,911,7283,7289,7375,7416,7561,7604,7628,7637,7745,7918,7933,7951,8015,8035,9325,9338,9339,9376,9378,12230,12463,14758,14784,14821,14832,14838,14847,14898,14908,15461,15494,18342,18347,18408,18410,18449,18458,18460,18894,18901,19212,19280],"fullWord":18458},{"subwords":[126,504,584,796,869,911,1014,2848,2941,2943,3003,3052,4065,11086,11276,11281,11320,11361,14808,14898,14899,18389,18449,18459,19216],"fullWord":18459},{"subwords":[375,377,488,489,596,598,693,707,708,911,12287,12292,14821,14847,14898,14899,18408,18449,18460,18461],"fullWord":18461},{"subwords":[905,911,918,12680,12683,12686,12692,13007,13008,13011,14898,14912,15574,15673,15691,15700,16041,17303,17429,17435,17773,17782,17788,17795,17885,17887,18432,18435,18449,18463,18464,18465,18466,18472,18476,18482,18495,18503,18973,19093,19094,19097,19113,19117,19120,19130,19131,19144,19331,19334,19381],"fullWord":18466},{"subwords":[693,761,777,781,911,1028,12257,12293,12548,12574,12575,12680,12686,12937,13008,13239,13261,13286,13328,13364,13384,14154,14160,14188,14247,14350,14372,14821,14847,14851,14867,14898,15568,15691,18408,18432,18436,18449,18460,18463,18467,18468,19036,19075,19093,19094,19105,19221,19323],"fullWord":18468},{"subwords":[817,911,1009,4516,4518,4537,4539,4551,4553,4607,4810,4812,5327,5346,5588,5620,5976,5982,6008,6055,14736,14872,14898,14901,14902,14903,14961,14983,15060,15312,15316,15318,15748,18339,18449,18450,18453,18454,18470,18541,18554,18652,18653,19205,19207,19233],"fullWord":18470},{"subwords":[377,382,488,489,490,905,911,918,998,1013,10241,14898,14899,14912,15942,15960,16041,17022,17773,18449,18472,18473,19381],"fullWord":18473},{"subwords":[905,911,918,973,990,14898,14912,15852,15856,15858,15861,16041,17773,17781,18172,18173,18449,18472,18475,18487,18508,19371,19381,19382,19868,19871,19886],"fullWord":18475},{"subwords":[596,693,707,911,1036,1044,14821,14847,14898,14899,14913,18408,18431,18449,18460,18476,18477,18495,18497,18969],"fullWord":18477},{"subwords":[911,1036,14871,14898,14899,18449,18476,18478,18495,18497],"fullWord":18478},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4810,4812,5327,5588,5620,5976,5982,6055,14736,14898,14901,14902,14914,14961,15060,15312,15318,15748,18339,18449,18450,18453,18454,18476,18479,18495,18498,18499,18541,18554,18565,18672,18673,19205,19233,19235],"fullWord":18479},{"subwords":[817,911,1009,5588,5620,5976,5982,6008,6055,14872,14898,14901,14903,14915,14983,15312,15748,18449,18453,18476,18480,18495,18498,18499,18541,18554,18565,18652,18653,18672,19235],"fullWord":18480},{"subwords":[488,911,919,1047,10304,14898,14917,14919,14939,15864,18449,18476,18481,18495,19231,19377,19389],"fullWord":18481},{"subwords":[596,693,707,911,14821,14847,14898,14899,18408,18449,18460,18483,19575],"fullWord":18483},{"subwords":[200,950,952,1009,4551,4555,4826,4835,5616,5620,5626,6055,9804,15893,15939,16041,16043,16044,16270,16293,16457,16940,16941,17746,17747,17806,17809,18339,18340,18358,18362,18484,18485,18541,18545,18546,18559,18575,19384],"fullWord":18485},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":18488},{"subwords":[973,980,982,983,990,1009,5616,5618,5620,5626,6039,6055,16037,16041,16043,16046,16270,16291,16293,16296,16457,16464,17785,18487,18489,18541,18559],"fullWord":18489},{"subwords":[200,1009,4551,4555,4826,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16457,17788,17790,17791,17806,17846,18339,18340,18490,18491,18495,18498,18503,18541,18559,18565,18567,18575,18662],"fullWord":18491},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":18492},{"subwords":[973,982,990,1009,5616,5618,5620,5626,6039,6055,16041,16043,16046,16270,16291,16293,16296,16457,16464,17788,17790,17793,17796,17846,17847,18487,18490,18493,18495,18498,18503,18541,18559,18565,18567,18662,18668],"fullWord":18493},{"subwords":[341,504,1014,11361,11377,11795,18347,18389,18495,18496,18882,18950],"fullWord":18496},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":18500},{"subwords":[12686,12692,13043,16041,17399,17435,17788,17885,17887,18432,18435,18495,18501,18502,18503,18973,19060,19066,19073,19130,19131,19143,19144],"fullWord":18502},{"subwords":[1009,4551,5620,6055,18339,18495,18498,18504,18541,18565],"fullWord":18504},{"subwords":[817,911,1009,5588,5620,5976,5982,6055,14898,14901,15312,15748,18449,18453,18476,18495,18498,18499,18505,18541,18554,18565,18672,19235],"fullWord":18505},{"subwords":[399,488,1009,5620,6055,10247,10324,10460,18370,18495,18498,18506,18541,18547,18565],"fullWord":18506},{"subwords":[12686,13043,18432,18495,18501,18507,19060,19066,19131,19143],"fullWord":18507},{"subwords":[1064,7416,7551,8175,8177,8233,8378,8951,9026,18342,18495,18508,18509,18515,18691,18796,19418,19493,19583,19892],"fullWord":18509},{"subwords":[693,711,712,1044,1074,1076,12300,12659,12663,15986,16041,17788,18005,18009,18117,18174,18408,18428,18495,18503,18508,18510,18511,18515,18519,18969,19434,19435,19436,19452,19493,19498,19871],"fullWord":18511},{"subwords":[732,739,779,781,961,1009,5616,5620,5626,5627,5956,6033,6055,13336,13352,13355,13364,13367,13374,13385,13394,13439,13461,13464,13465,13609,13613,13626,14427,14551,14561,14567,16014,16041,16043,16070,16270,16293,16409,16410,16457,16468,17476,17510,17511,17695,17836,18011,18013,18066,18074,18135,18136,18148,18436,18437,18441,18448,18508,18512,18513,18541,18559,19386,19453,19456,19825,19826,19871,19876],"fullWord":18513},{"subwords":[905,911,918,14898,14912,15852,15858,15861,16041,17773,18172,18449,18472,18508,18514,19381,19868,19871],"fullWord":18514},{"subwords":[693,694,1009,1044,1046,1074,5620,5627,6055,6074,12229,12300,12325,12374,12659,18408,18495,18498,18508,18510,18515,18516,18541,18565,18607,18630,18969,19434,19435,19438,19493],"fullWord":18516},{"subwords":[817,911,1009,1096,5588,5620,5627,5976,5982,6055,14898,14901,15312,15748,15777,15858,18449,18453,18476,18495,18498,18499,18508,18515,18517,18541,18554,18565,18672,19235,19356,19493,19847,19900],"fullWord":18517},{"subwords":[488,1047,10304,18495,18508,18515,18518,19389,19493,19605],"fullWord":18518},{"subwords":[693,694,709,817,911,1009,1106,1109,1112,5588,5595,5620,5976,5982,6055,6074,12229,12305,12319,12325,12374,14821,14847,14898,14901,14921,14925,15241,15312,15337,15748,18408,18449,18453,18460,18520,18541,18554,18607,18649,19227,19948,19950,19975,20046,20080,20095],"fullWord":18520},{"subwords":[911,919,1166,4537,4574,4578,5327,5330,5337,5430,14736,14898,14933,14939,15864,18339,18449,18452,18521,18522,19231,19377,20303,20410,20412,20444,20447,20448,20493,21010,21068,21079],"fullWord":18522},{"subwords":[817,825,905,906,911,918,993,1009,1145,1150,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14933,14935,14938,15281,15306,15312,15748,16041,16043,16089,16091,16270,16286,16293,16419,16457,16475,17773,17775,17850,17953,17964,18207,18211,18220,18222,18449,18453,18455,18472,18521,18523,18527,18541,18554,18557,18559,19256,19381,19508,20410,20417,20419,20442,20444,20446,20449,20457,20458,20460,20464,20465,20467,20510,20512,20588,20591,20594,20596,20987],"fullWord":18523},{"subwords":[287,693,700,1154,1158,7283,7289,7416,7561,7604,7637,7745,7747,9325,12230,12463,18342,18347,18408,18410,18521,18524,18894,18901,19503,19505,19525,19530,20326,20349,20353,20393,20399,20404,20742,20774,20790,20842],"fullWord":18524},{"subwords":[617,693,694,716,1009,1145,1158,1196,5620,6055,6074,12229,12311,12325,12374,12390,12399,18408,18521,18525,18526,18541,18607,20393,20396,20404,20493,20495,20505,20579,20585,20594,21016,21079,21085,21097,21120,21123,21135,21138],"fullWord":18525},{"subwords":[817,825,905,906,911,918,993,1009,1167,1173,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,6171,6180,6181,14881,14898,14901,14905,14912,15306,15312,15373,15748,16041,16043,16098,16270,16286,16293,16419,16457,16483,17773,17775,18449,18453,18455,18472,18528,18530,18531,18532,18541,18554,18557,18559,18677,18681,19381],"fullWord":18531},{"subwords":[169,326,327,1009,1167,1168,4551,4714,4935,4942,5620,5680,6055,6154,6171,9103,18339,18347,18528,18529,18533,18534,18541,18677,18835,18844,18845],"fullWord":18534},{"subwords":[1009,1167,1173,1180,5616,5620,5626,6055,6152,6154,6156,6171,9447,16041,16043,16098,16270,16293,16457,16483,16907,16911,16922,16925,18347,18528,18532,18533,18535,18537,18541,18559,18677,18681,18844,18850,18947],"fullWord":18535},{"subwords":[287,693,700,1177,7283,7289,7416,7561,7604,7637,7745,9325,12230,12463,12474,18342,18347,18408,18410,18528,18533,18536,18894,18901],"fullWord":18536},{"subwords":[504,596,693,1014,1015,1185,11213,11250,11263,11361,11401,12244,18389,18408,18528,18538],"fullWord":18538},{"subwords":[528,532,535,693,694,1009,1167,1186,5620,6055,6074,6128,6171,11213,11218,11263,11361,11362,11401,11437,11446,11451,11456,11512,11574,11575,12229,12244,12245,12325,12374,12402,18389,18393,18408,18528,18539,18541,18549,18595,18607,18677,18679],"fullWord":18539},{"subwords":[31,51,72,1009,1167,1462,1464,1542,1721,1722,2029,2037,2237,2292,5620,6055,6171,12686,18302,18432,18528,18541,18542,18677,18981],"fullWord":18542},{"subwords":[93,126,138,732,781,1009,2921,2922,2940,3052,4049,4268,4302,4375,4376,5620,5627,5956,6055,6057,13154,13155,13168,13364,13367,13438,13439,13464,13613,14433,14561,18436,18437,18508,18512,18541,18544,19453],"fullWord":18544},{"subwords":[1009,4472,4475,4551,4671,5620,5658,5663,6055,11107,11115,11361,11362,11363,11437,11438,11456,11478,11483,11574,11575,11578,11579,18339,18389,18393,18394,18541,18549,18550,18576,18577,18579,18595],"fullWord":18550},{"subwords":[526,817,826,869,911,1009,5588,5620,5622,5976,5982,5984,6055,11276,11286,11320,11361,11362,11364,11437,11456,11483,11539,11543,11574,11575,11578,11581,11588,14808,14898,14901,14975,15202,15214,15312,15748,18389,18393,18396,18449,18453,18541,18549,18551,18554,18576,18579,18595,18644,19216,19240],"fullWord":18551},{"subwords":[732,781,1009,1028,5620,5956,6055,12686,12916,12937,13364,13367,13439,13464,13613,14027,14188,18432,18436,18437,18495,18498,18541,18553,18565,18981,19075,19076,19131,19134],"fullWord":18553},{"subwords":[817,826,911,1009,4516,4537,4551,4553,4607,4678,4810,4812,4842,5327,5588,5589,5620,5622,5976,5982,5984,6055,14736,14898,14901,14902,14961,15060,15093,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,18555,18576,18577,19205,19233,19240,19241],"fullWord":18555},{"subwords":[817,826,911,1009,5588,5620,5622,5976,5982,5984,6008,6055,14872,14898,14901,14903,14983,15312,15748,18449,18453,18541,18554,18556,18576,18652,18653,18655,19240],"fullWord":18556},{"subwords":[163,200,1009,4551,4555,4680,4826,5605,5606,5616,5620,5626,6055,15893,16041,16043,16044,16270,16293,16294,16310,16319,16320,16457,16458,17806,17816,18339,18340,18541,18559,18560,18561,18575,18576,18577,18588],"fullWord":18561},{"subwords":[399,401,407,488,1009,5605,5607,5616,5620,5626,5691,5693,5750,5753,5790,6055,10241,10247,10324,10360,10361,10366,10383,10392,10451,10459,10460,10465,15942,15948,15960,16041,16043,16270,16274,16293,16319,16457,16458,16459,17022,17023,17052,17750,17811,17818,17828,18341,18370,18374,18541,18547,18548,18559,18560,18562,18576,18588,18660],"fullWord":18562},{"subwords":[817,825,826,827,905,906,911,918,993,1009,5588,5599,5605,5609,5616,5617,5620,5622,5623,5626,5976,5977,5978,5982,5984,6018,6046,6055,14881,14898,14901,14905,14912,15285,15290,15306,15312,15748,16024,16041,16043,16270,16286,16293,16295,16319,16340,16419,16425,16457,16458,17773,17775,17823,17840,18449,18453,18455,18472,18541,18554,18557,18559,18560,18563,18576,18588,18658,19240,19242,19381],"fullWord":18563},{"subwords":[973,982,990,1009,5605,5611,5616,5618,5620,5626,6031,6039,6042,6055,16041,16043,16046,16270,16291,16293,16296,16319,16342,16457,16458,16464,18487,18541,18559,18560,18564,18576,18588],"fullWord":18564},{"subwords":[1009,4551,5620,6055,18339,18495,18498,18541,18565,18566,18576,18577],"fullWord":18566},{"subwords":[399,401,488,1009,5620,5691,5750,6055,10247,10314,10324,10383,10460,18370,18541,18547,18568,18569,18576,21241,21251,21266],"fullWord":18568},{"subwords":[399,401,488,1009,5620,5691,5750,6055,10247,10314,10324,10383,10460,18370,18541,18547,18568,18569,18576,21241,21251,21266],"fullWord":18569},{"subwords":[3272,3328,3429,3430,6057,6058,6068,8483,8612,8625,8688,9079,9440,18570,18571,18576,18697,18698,18823,18844],"fullWord":18571},{"subwords":[4714,4761,4935,4938,4942,4971,4972,5471,5479,5680,5832,5846,9109,9444,9449,11574,11626,11786,12091,12184,12185,18574,18595,18835,18844,18845,18882,18886,18887,19429],"fullWord":18574},{"subwords":[7467,7493,7496,7499,7503,7512,7540,7604,7637,9325,12339,12374,12463,18576,18578,18583,18607,18844,18894,18898,18901,18902],"fullWord":18578},{"subwords":[4671,11478,11483,11574,11578,11579,18576,18577,18579,18580,18595],"fullWord":18580},{"subwords":[5820,5984,11483,11484,11539,11543,11574,11578,11581,11588,15202,15214,15312,15748,18576,18579,18581,18595,18644,19240],"fullWord":18581},{"subwords":[5928,5935,5936,5984,5998,6062,12339,12374,15241,15312,15748,18576,18583,18584,18607,18649,18650,19240],"fullWord":18584},{"subwords":[5918,6189,6198,12339,12368,12374,12376,16319,16335,16399,16457,18018,18019,18287,18576,18583,18585,18586,18587,18588,18607,18624,18625,21120,21122,21130,21135],"fullWord":18586},{"subwords":[5705,5765,5950,5953,6440,6443,6453,6793,6874,6925,10394,10437,10441,10443,10444,10460,10788,10822,10897,12374,12504,12574,12581,12785,12786,12845,12876,18590,18607,18981,19017,19036,19038],"fullWord":18590},{"subwords":[5691,5780,5984,10383,10388,10460,15107,15186,15312,15319,15748,18576,18591,18592,19240],"fullWord":18592},{"subwords":[8483,8532,8534,8537,8549,11483,11574,11578,12079,13489,13613,18576,18579,18595,18596,18597,18697,18698,18705,18706,18967],"fullWord":18597},{"subwords":[5984,11483,11539,11543,11574,11578,11581,11588,13489,13506,13577,13583,13593,13599,13613,13617,14262,15202,15214,15248,15312,15747,15748,18576,18579,18595,18596,18598,18644,19240],"fullWord":18598},{"subwords":[5691,5782,10383,10460,10957,11483,11502,11574,11578,13489,13495,13532,13613,18576,18579,18595,18596,18600],"fullWord":18600},{"subwords":[5845,5969,6033,6049,11574,11947,11948,11953,11961,12007,12010,12011,12014,12030,12872,12916,12925,12936,12937,12944,13607,13609,13613,13626,14024,14025,14027,14030,14093,14094,14166,14182,14188,14201,14427,16409,16457,17198,17382,17406,17435,17644,17830,17836,17907,17921,18595,18596,18601,18602,18603,18981,18985,19026,19032,19033,19034,19075,19076,19081,19090,19386],"fullWord":18602},{"subwords":[5845,6033,11574,13609,13613,13626,14427,16409,16457,17830,17836,17846,18595,18596,18603,18604,18605,18662,19386],"fullWord":18605},{"subwords":[5845,5846,5847,6033,11574,12152,12177,12184,12188,13609,13613,13626,14427,14551,14561,14567,16409,16415,16457,16468,17203,17679,17830,17836,18002,18013,18066,18074,18103,18114,18135,18136,18148,18595,18596,18603,18606,19386,19433,19453,19456,19624,19628,19825,19826,19876],"fullWord":18606},{"subwords":[615,657,663,693,694,1009,1044,5620,6055,6074,12229,12252,12325,12374,18408,18495,18498,18541,18565,18607,18608,18630,18969],"fullWord":18608},{"subwords":[4667,4774,4788,4790,5665,5865,5867,12339,12340,12374,18576,18577,18583,18607,18610,18611],"fullWord":18611},{"subwords":[4678,4774,4788,4810,4842,5665,5865,5868,5928,5935,5984,5998,12339,12340,12358,12374,15060,15093,15227,15241,15243,15312,15318,15748,18576,18577,18583,18607,18610,18612,18649,18650,19240,19241,19248],"fullWord":18612},{"subwords":[4774,4788,5114,5172,5176,5184,5234,5237,5865,5953,12353,12374,12493,12499,12528,12533,12574,12581,12582,12752,12876,18607,18610,18613,18619,18981,18983,19036,19038,19039,19054],"fullWord":18613},{"subwords":[5918,12339,12368,12374,12376,16319,16335,16399,16457,17846,18576,18583,18585,18588,18607,18615,18616,18624,18625,18630,18635,18662,18969],"fullWord":18616},{"subwords":[5928,5935,5984,5998,12339,12374,15236,15241,15312,15748,18576,18583,18607,18617,18649,18650,19240],"fullWord":18617},{"subwords":[5918,9297,9302,9307,9312,9318,9325,9447,12368,12374,12376,12448,12449,12463,12471,16399,16400,16457,16858,16860,16907,16911,17255,17826,18607,18618,18624,18844,18850,18894,18898,18900,18919,18947],"fullWord":18618},{"subwords":[5918,5953,5955,12353,12355,12368,12374,12376,12506,12528,12533,12535,12560,12561,12574,12581,12585,12591,12876,12879,12884,16399,16457,16461,17278,17383,17393,17435,17834,17909,18607,18619,18620,18624,18981,18985,19036,19038,19042,19054,19056,19057],"fullWord":18620},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":18622},{"subwords":[9244,9297,9325,12374,12448,12453,12463,13539,13560,13613,13705,13765,13769,13799,13850,18607,18623,18844,18894,18898,18926],"fullWord":18623},{"subwords":[4680,4774,4785,4786,4788,4792,4826,5665,5865,5875,5918,12339,12340,12344,12368,12369,12374,12376,16319,16320,16335,16381,16399,16457,17816,18575,18576,18577,18583,18585,18588,18607,18610,18614,18624,18625,18626],"fullWord":18626},{"subwords":[5918,5928,5929,5935,5984,5998,5999,6000,6018,6046,12339,12362,12368,12370,12374,12376,15241,15245,15289,15290,15306,15312,15748,16319,16335,16340,16399,16425,16457,17237,17823,17840,17843,18576,18583,18585,18588,18607,18624,18625,18627,18649,18650,18651,18658,19240,19242],"fullWord":18627},{"subwords":[5918,6031,6039,6042,12339,12367,12368,12373,12374,12376,16319,16335,16342,16394,16399,16457,16464,18576,18583,18585,18588,18607,18624,18625,18628],"fullWord":18628},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":18629},{"subwords":[4774,4788,4841,5665,5865,12339,12340,12374,12377,18576,18577,18583,18607,18610,18615,18630,18631,18969],"fullWord":18631},{"subwords":[5928,5935,5984,5998,12339,12374,12378,15241,15312,15748,18576,18583,18607,18615,18630,18632,18649,18650,18969,19240],"fullWord":18632},{"subwords":[5918,8540,8547,8548,8586,8935,12368,12374,12376,12612,16399,16457,16574,17846,18607,18624,18630,18633,18634,18635,18662,18697,18708,18710,18969],"fullWord":18634},{"subwords":[5928,5935,5938,5984,5998,12339,12374,12384,12659,15241,15312,15748,15777,15821,15822,15833,15858,18576,18583,18607,18637,18649,18650,19240,19356,19434,19438,19440,19467,19476,19866],"fullWord":18637},{"subwords":[5953,12374,12574,12581,12659,12876,13059,18607,18630,18638,18676,18969,18981,19036,19038,19131,19134,19160,19434,19438,19493,19780],"fullWord":18638},{"subwords":[5957,5958,6033,13489,13510,13609,13613,13626,14427,16319,16336,16409,16457,17821,17836,18576,18588,18639,18640,19386],"fullWord":18640},{"subwords":[3135,3161,4120,4125,4144,4240,5691,5761,5984,5985,6057,10376,10383,10388,10460,15021,15107,15186,15312,15748,18576,18642,18643,19240],"fullWord":18643},{"subwords":[4671,4678,4810,4818,4842,5984,11478,11483,11539,11543,11574,11578,11579,11581,11588,11589,15060,15093,15202,15214,15312,15318,15748,18576,18577,18579,18595,18644,18645,19240,19241],"fullWord":18645},{"subwords":[5984,6008,11483,11539,11543,11545,11574,11578,11581,11588,15202,15214,15312,15748,18576,18579,18595,18644,18646,18652,18655,19240],"fullWord":18646},{"subwords":[5782,5785,6079,10460,10495,11065,11074,11502,11539,11574,12212,15201,15202,15312,15748,15866,18595,18644,18647,19257,19377,19555,19570,21135],"fullWord":18647},{"subwords":[817,825,900,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6008,6016,6018,6055,14872,14876,14881,14883,14897,14898,14901,14903,14904,14905,14912,14983,14988,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17777,18449,18453,18455,18472,18541,18554,18557,18559,18652,18653,18654,19381],"fullWord":18654},{"subwords":[6008,6014,12979,13008,15312,15330,15610,15691,15694,15748,18652,18656,18981,19093,19101],"fullWord":18656},{"subwords":[5984,6008,6016,6018,6046,15290,15306,15308,15312,15748,16319,16340,16425,16428,16457,17823,17840,18576,18588,18652,18655,18658,18659,19240,19242],"fullWord":18659},{"subwords":[399,407,488,973,982,990,1009,5616,5618,5620,5626,6039,6055,10230,10236,10241,10245,10247,10324,10360,10366,10367,10453,10459,10460,10465,15942,15948,15950,15960,15963,16041,16043,16046,16270,16274,16277,16291,16293,16296,16457,16459,16464,17022,17023,17026,17027,17750,17753,17811,17812,18341,18370,18374,18487,18488,18541,18547,18548,18559,18660,18661],"fullWord":18661},{"subwords":[4680,4826,4844,16319,16320,16457,17816,17846,18575,18576,18577,18588,18662,18663],"fullWord":18663},{"subwords":[16319,16457,16465,17846,18576,18588,18662,18664],"fullWord":18664},{"subwords":[5984,6018,6046,15290,15306,15312,15320,15748,16319,16340,16425,16457,16466,17823,17840,17846,17960,18576,18588,18658,18662,18665,19240,19242,19255],"fullWord":18665},{"subwords":[6031,6039,6042,16319,16342,16456,16457,16464,17846,17847,18576,18588,18662,18666,18668,19383],"fullWord":18666},{"subwords":[6039,9447,16457,16464,16903,16907,16911,16913,16915,17846,17847,17857,18662,18667,18668,18844,18850,18947,18950,18964],"fullWord":18667},{"subwords":[693,694,716,1009,1044,1047,1196,5620,6055,6074,12229,12296,12311,12325,12374,12381,18408,18495,18498,18541,18565,18607,18630,18636,18669,18969,19389,21097,21120,21123,21135],"fullWord":18669},{"subwords":[6057,6058,8607,18570,18572,18670,18697,18724,18806,19389,21135],"fullWord":18670},{"subwords":[5984,6066,8483,8552,8562,15312,15748,18576,18589,18671,18697,18698,18712,18767,19240],"fullWord":18671},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4810,4812,5327,5588,5620,5976,5982,6055,14736,14898,14901,14902,14914,14961,15060,15312,15318,15748,18339,18449,18450,18453,18454,18476,18479,18495,18498,18499,18541,18554,18565,18672,18673,19205,19233,19235],"fullWord":18673},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":18674},{"subwords":[10460,10495,11065,11074,15201,15312,15748,15866,18675,19257,19377,19389,19555,19570,21135],"fullWord":18675},{"subwords":[5953,12374,12574,12581,12659,12876,13059,18607,18630,18638,18676,18969,18981,19036,19038,19131,19134,19160,19434,19438,19493,19780],"fullWord":18676},{"subwords":[93,126,1009,1167,3052,3605,3612,3965,3968,5620,6055,6057,6123,6171,12686,18333,18432,18528,18541,18677,18678,18981],"fullWord":18678},{"subwords":[693,694,697,711,1009,1167,1173,5616,5620,5626,5918,6055,6074,6075,6171,12229,12289,12325,12330,12368,12374,12376,12402,15986,15995,16041,16043,16098,16270,16293,16399,16457,16483,16492,18408,18428,18528,18532,18541,18559,18607,18624,18677,18679,18680,18681],"fullWord":18680},{"subwords":[319,320,325,932,1009,5616,5620,5626,5845,6055,8228,8290,8296,8362,8371,8373,8378,8381,8385,8391,8461,8467,8532,8539,8586,8935,11330,11335,11356,11361,11362,11366,11369,11370,11376,11437,11453,11456,11457,11560,11563,11574,11575,15973,15978,16041,16043,16270,16278,16293,16457,16531,16533,16559,16574,17813,17830,18389,18393,18398,18407,18541,18549,18552,18559,18595,18685,18697,18705,18967],"fullWord":18685},{"subwords":[325,693,694,697,711,932,935,1009,1011,5616,5620,5626,5918,6055,6074,6075,8228,8318,8362,8371,8373,8375,8378,8381,8385,8391,8461,8467,8540,8547,8548,8586,8935,12229,12289,12325,12328,12330,12368,12374,12376,12612,15986,15995,16041,16043,16270,16293,16399,16457,16559,16574,18408,18428,18541,18559,18607,18624,18686,18687,18688,18697,18708,18710],"fullWord":18688},{"subwords":[325,651,652,693,711,932,950,8310,8314,8318,8362,8371,8378,8391,8935,9876,9877,9878,12612,15986,16007,16041,16539,16559,17767,18408,18418,18423,18428,18484,18686,18689,18690],"fullWord":18690},{"subwords":[126,3052,3229,8239,8378,8380,8387,18323,18336,18495,18691,18692],"fullWord":18692},{"subwords":[1009,1145,1147,4551,4574,4615,4865,5620,6055,8217,8378,8381,8382,8409,8410,8440,8461,8588,18339,18521,18541,18694,18695,18697,18721,20303,20309,20524,20594,20599,20617,20621,20642],"fullWord":18695},{"subwords":[5705,5706,8492,8495,8586,8935,16457,16574,17846,18662,18697,18699,18700],"fullWord":18700},{"subwords":[6018,8503,8505,8506,8552,8584,8586,8625,8628,8672,8676,8678,8685,8688,8691,8934,8935,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16574,16617,16642,16648,16653,16889,16890,16907,16911,17722,17881,18697,18701,18702,18742,18844,18847,18849,18850,18941,18943,18947,19277],"fullWord":18702},{"subwords":[5832,5833,5845,8506,8532,8539,8586,8625,8628,8648,8678,8685,8688,8691,8935,9422,9444,9446,9447,11563,11574,11764,11780,11786,11789,16375,16457,16574,16627,16653,16907,16911,17179,17180,17183,17830,18595,18697,18703,18705,18742,18844,18850,18882,18886,18891,18947,18967],"fullWord":18703},{"subwords":[8506,8586,8625,8628,8678,8685,8688,8691,8935,9447,16457,16574,16653,16907,16911,17846,18662,18697,18704,18742,18844,18850,18947,18950,18955,18958,18964],"fullWord":18704},{"subwords":[5845,8483,8532,8534,8539,8586,8935,11483,11486,11563,11574,11578,11583,16319,16330,16457,16574,16589,17830,18576,18579,18582,18588,18595,18697,18698,18705,18706,18707,18716,18967],"fullWord":18707},{"subwords":[3145,5856,6057,6058,8483,8540,8542,12339,12374,12612,18570,18576,18583,18607,18609,18697,18698,18708,18709],"fullWord":18709},{"subwords":[8552,8575,8607,8725,8728,8857,8892,12979,13008,13009,13036,13145,15312,15386,15610,15691,15694,15748,15866,18697,18711,18724,18743,18749,18777,18781,18806,18981,19093,19101,19122,19186,19187,19257,19347,19377,19570,19573,21135,21189],"fullWord":18711},{"subwords":[5984,6018,6046,6048,6066,6067,8483,8552,8562,8568,8584,8586,8934,8935,15290,15306,15312,15748,16319,16340,16425,16457,16574,16587,16589,17823,17840,18576,18588,18658,18697,18698,18712,18713,18716,18767,18768,19240,19242],"fullWord":18713},{"subwords":[5845,6018,8532,8539,8552,8584,8586,8934,8935,11539,11563,11574,15202,15224,15306,15312,15748,16457,16574,17830,18595,18644,18648,18697,18705,18714,18715,18967],"fullWord":18715},{"subwords":[6031,6039,6042,8483,8586,8935,16319,16342,16457,16464,16574,16589,16590,16609,18576,18588,18697,18698,18716,18717],"fullWord":18717},{"subwords":[6039,8506,8507,8586,8625,8628,8678,8681,8685,8687,8688,8691,8935,9447,16457,16464,16574,16609,16619,16620,16651,16653,16654,16903,16907,16911,16913,16915,17857,18697,18718,18742,18844,18850,18947],"fullWord":18718},{"subwords":[325,932,1009,5616,5620,5626,6055,8228,8362,8371,8373,8378,8381,8385,8391,8461,8467,8586,8935,16041,16043,16270,16293,16457,16559,16574,17788,17790,17846,18490,18495,18498,18503,18541,18559,18565,18567,18662,18691,18693,18697,18719,18720],"fullWord":18720},{"subwords":[3272,3328,3331,3429,4238,4241,8612,8614,8616,8678,8685,8688,8691,8935,9440,9447,9945,9946,9952,9953,9955,9956,16178,16653,16743,16769,16772,16823,16907,16954,16986,17853,18725,18726,18742,18823,18824,18829,18830,18947],"fullWord":18726},{"subwords":[6092,8483,8625,8688,8693,18576,18697,18698,18728,18844,19992,20095,20129],"fullWord":18728},{"subwords":[7635,7637,8630,8632,8633,8634,8678,8685,8688,8691,8935,9447,16653,16805,16809,16907,18729,18730,18742,18947],"fullWord":18730},{"subwords":[7604,7611,7635,7637,8660,8663,8678,8679,8685,8688,8691,8935,9307,9318,9325,9447,12429,12432,12433,12434,12463,12471,12612,16629,16653,16805,16809,16815,16858,16866,16874,16907,17255,17870,18731,18733,18734,18738,18742,18894,18901,18907,18919,18947],"fullWord":18734},{"subwords":[8660,8663,8678,8679,8685,8688,8691,8935,9276,9284,9307,9318,9325,9447,9913,9929,9945,9946,9952,9953,9955,9984,9985,9986,12463,12471,12612,16629,16653,16823,16858,16874,16876,16907,16954,16974,16986,17255,17874,18731,18735,18736,18738,18742,18894,18919,18947],"fullWord":18736},{"subwords":[8645,8660,8688,9293,9325,9334,10656,10660,10662,10691,10698,12438,12463,12612,18731,18737,18806,18863,18894,18925,21144],"fullWord":18737},{"subwords":[5034,5035,5037,5046,5060,8617,8678,8685,8688,8691,8934,8935,9127,9409,9447,15428,15443,16648,16653,16889,16907,17722,17881,18739,18740,18742,18947],"fullWord":18740},{"subwords":[8678,8685,8688,8691,8934,8935,9409,9447,16648,16653,16889,16907,17722,17881,18741,18742,18947,18950,18964],"fullWord":18741},{"subwords":[6071,8523,8524,8586,8725,8730,8754,8757,8770,8771,8881,8887,8889,8892,8896,8897,8901,8935,10443,10447,10459,10460,10465,10888,10896,10897,10898,10901,12810,12845,12848,16457,16574,16602,16676,16704,16705,17097,17113,17114,17354,17359,17435,17903,18697,18743,18744,18745,18758,18981,18985,19017,19123],"fullWord":18745},{"subwords":[325,932,1020,1022,8290,8296,8362,8371,8378,8391,8887,8892,8901,8935,11265,11330,11335,11356,11361,11369,11370,11376,11813,11814,11816,12007,12010,12018,12020,12030,12686,12690,12691,12692,12806,12808,12810,12872,15973,16041,16531,16559,16664,16670,16704,17378,17435,17885,18389,18407,18432,18435,18743,18746,18967,19026,19034,19123],"fullWord":18746},{"subwords":[7556,7871,7874,7875,7877,8731,8737,8789,8887,8892,8901,8935,12509,12512,12560,12565,12574,12591,12612,12810,16704,17278,17383,17389,17435,18743,18747,18748,18993,19001,19036,19043,19047,19057,19123],"fullWord":18748},{"subwords":[911,8360,8378,8696,8701,8857,8858,8892,12680,12686,12690,13008,13009,14775,14898,15386,15691,18432,18449,18463,18528,18743,18749,18750,18777,19093,19094,19095],"fullWord":18750},{"subwords":[8789,8857,8867,8871,8874,8879,8887,8892,8901,8934,8935,12548,12557,12558,12560,12565,12574,12591,12612,12810,13007,13008,13009,13011,15386,15691,15700,16700,16701,16704,17276,17278,17383,17429,17435,18743,18749,18751,18752,18777,19036,19057,19093,19105,19113,19123],"fullWord":18752},{"subwords":[8789,8857,8867,8872,8892,12548,12557,12574,12612,13008,13009,15386,15691,18743,18749,18751,18753,18777,18806,19036,19059,19093,19105,19122,19186,19347,19377,19573,21183],"fullWord":18753},{"subwords":[8549,8552,8575,8725,8728,8845,8846,8848,8857,8892,12916,12937,12979,13008,13009,13036,13577,13599,13613,13624,14027,14147,14160,14188,14196,14262,14350,15248,15312,15386,15610,15663,15691,15694,15748,18697,18743,18749,18755,18756,18777,18781,18981,19075,19076,19079,19093,19101,19323,19324],"fullWord":18756},{"subwords":[8845,8856,8857,8874,8879,8886,8887,8892,8901,8934,8935,12810,12936,12937,12944,13007,13008,13009,13011,14160,14165,14172,14182,14188,14201,14350,14383,14403,14427,15386,15691,15700,16693,16701,16704,17406,17407,17429,17435,17641,17644,17921,17985,18743,18749,18755,18757,18777,19075,19090,19093,19113,19123,19323,19386],"fullWord":18757},{"subwords":[5114,5119,5234,5237,5242,5471,5479,5523,8721,8725,8726,8892,8945,8946,9026,12752,12802,13059,13065,18697,18743,18759,18760,18794,18981,18983],"fullWord":18760},{"subwords":[7874,7875,7886,8175,8731,8892,8951,8959,9026,13046,13059,18743,18759,18761,18796,18993,19151,19418,19583],"fullWord":18761},{"subwords":[442,488,911,8268,8280,8360,8378,10257,14775,14898,18381,18449,18763],"fullWord":18763},{"subwords":[325,905,911,918,932,8239,8240,8359,8360,8361,8362,8363,8371,8378,8387,8391,8934,8935,14775,14886,14898,14912,16041,16516,16559,17773,18449,18472,18764,19224,19381],"fullWord":18764},{"subwords":[817,911,1009,4516,4537,4551,4553,4607,4612,4615,4810,4812,5327,5588,5600,5620,5976,5982,6055,8217,8327,8333,8334,8360,8378,8381,8382,8383,8390,8440,8453,8454,8458,8461,8552,8558,14736,14775,14898,14901,14902,14961,15060,15312,15318,15376,15748,18339,18449,18450,18453,18454,18541,18554,18697,18765,19205,19233],"fullWord":18765},{"subwords":[817,911,1009,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8393,8453,8458,8461,8552,14775,14898,14901,15312,15376,15748,18449,18453,18476,18495,18498,18499,18541,18554,18565,18672,18691,18697,18719,18766,19235],"fullWord":18766},{"subwords":[5984,6018,6046,6048,6066,6067,8483,8552,8562,8568,8584,8586,8934,8935,15290,15306,15312,15748,16319,16340,16425,16457,16574,16587,16589,17823,17840,18576,18588,18658,18697,18698,18712,18713,18716,18767,18768,19240,19242],"fullWord":18768},{"subwords":[6018,8552,8584,8586,8934,8935,15306,15312,15748,16457,16574,18697,18769],"fullWord":18769},{"subwords":[3161,3260,3272,3328,3429,3430,3432,6057,6058,6068,8503,8552,8612,8625,8672,8688,9079,9384,9440,15021,15051,15171,15312,15317,15411,15416,15417,15542,15748,18570,18697,18701,18771,18823,18844,18847,18941,19267],"fullWord":18771},{"subwords":[6621,6639,6651,8688,15458,18772,18950],"fullWord":18772},{"subwords":[8640,8645,8688,9152,10580,10691,10698,15477,18773,18863,18872,19283],"fullWord":18773},{"subwords":[8664,8671,8678,8685,8688,8691,8934,8935,9409,9447,13651,13841,13850,13855,13857,13866,14403,14421,14427,15508,15524,16639,16641,16648,16653,16883,16889,16907,17598,17665,17722,17881,17974,18742,18774,18775,18926,18936,18947,19295,19301,19386],"fullWord":18775},{"subwords":[8503,8552,8625,8672,8688,8693,9384,15312,15337,15542,15549,15555,15748,18697,18701,18776,18844,18847,18941,20080,20095,20129,20132],"fullWord":18776},{"subwords":[911,8360,8378,8696,8857,8858,8892,12680,12686,12690,13008,13009,14775,14898,15386,15691,18432,18449,18463,18465,18476,18495,18691,18743,18749,18777,18778,19093,19094,19095,19117,19131,19331,19332],"fullWord":18778},{"subwords":[2218,2219,2220,2223,2237,2242,2446,2476,2477,2478,8705,8713,8857,8874,8879,8887,8892,8901,8934,8935,12810,12959,12964,13007,13008,13009,13011,15386,15576,15590,15691,15700,16701,16704,17308,17429,17435,18540,18743,18749,18777,18779,18780,19093,19113,19123],"fullWord":18780},{"subwords":[6004,6018,6071,8552,8575,8581,8584,8586,8725,8728,8729,8730,8857,8874,8875,8879,8881,8887,8892,8901,8934,8935,12810,12979,12982,13007,13008,13009,13011,13036,13037,15306,15312,15386,15610,15611,15676,15691,15694,15695,15700,15748,16457,16574,16676,16678,16697,16701,16704,16705,17419,17429,17435,17924,18697,18743,18749,18758,18777,18781,18782,18981,18985,19093,19101,19103,19113,19123],"fullWord":18782},{"subwords":[5953,8540,8552,8575,8579,8725,8728,8789,8793,8795,8857,8867,8870,8892,12374,12548,12557,12574,12581,12583,12590,12612,12876,12979,13008,13009,13036,15238,15241,15312,15386,15610,15691,15694,15748,18607,18621,18649,18697,18708,18743,18749,18751,18777,18781,18783,18981,19036,19038,19040,19093,19101,19105],"fullWord":18783},{"subwords":[7874,7875,8056,8731,8789,8857,8867,8892,12509,12548,12557,12574,12612,13008,13009,15386,15691,18743,18747,18749,18751,18777,18784,18993,19036,19043,19093,19105],"fullWord":18784},{"subwords":[8552,8575,8725,8728,8857,8892,8915,8918,12979,13008,13009,13036,13095,13100,15312,15337,15386,15610,15691,15694,15728,15748,18697,18743,18749,18777,18781,18785,18981,19093,19101,19165,19340,20080,20095,20097,20265,20267],"fullWord":18785},{"subwords":[8789,8857,8867,8892,8920,12548,12557,12574,12606,12612,13008,13009,13119,15386,15691,15734,18743,18749,18751,18777,18786,18787,19036,19093,19105,19166,19178,19343,19548,20689,20897,20899,20944,20953,20954,21009],"fullWord":18787},{"subwords":[8857,8874,8879,8887,8892,8901,8920,8930,8934,8935,12810,13007,13008,13009,13011,15386,15691,15700,15734,15744,16701,16704,16716,17429,17435,17464,17941,18743,18749,18777,18786,18788,19093,19113,19123,19166,19181,19343,19346,19548,19550,20689,20951,20953,20954,20955,20957,20958,21009],"fullWord":18788},{"subwords":[8934,8935,8970,8988,9012,9015,9026,9027,12158,12177,15806,15820,15842,15852,15858,15859,15860,15861,16753,17203,17989,18103,18789,18790,18791,18802,18967,19486,19592],"fullWord":18791},{"subwords":[8934,8935,8959,9012,9015,9016,9026,9027,15842,15852,15858,15859,15860,15861,16753,18789,18792,18802,19486,19592],"fullWord":18792},{"subwords":[8934,8935,9012,9015,9026,9027,15842,15852,15858,15859,15860,15861,16753,17992,18789,18793,18802,19372,19375,19376,19486,19493,19498,19592],"fullWord":18793},{"subwords":[2567,2576,2668,2673,2690,2697,2700,8935,8936,8940,8970,8988,9026,9027,12158,12177,16753,17203,17994,18035,18103,18540,18798,18799,18802,18967,19390,19403,19486,19592],"fullWord":18799},{"subwords":[8935,8970,8982,8986,8988,9002,9026,9027,12079,12158,12177,14427,14551,14552,14561,14567,16753,17203,18002,18103,18114,18135,18148,18800,18801,18802,18967,19386,19433,19453,19456,19486,19592,19624,19628,19825],"fullWord":18801},{"subwords":[8935,9026,9027,11039,11044,11049,16746,16753,16758,17147,17149,18018,18802,18803,18806,19486,19592,19605],"fullWord":18803},{"subwords":[126,3052,3096,3229,3232,4399,8209,8378,8409,8412,18323,18326,18521,18694,18804,20299,20463,20599,20600,20617],"fullWord":18804},{"subwords":[911,8360,8378,8409,14775,14898,14933,18449,18476,18495,18521,18691,18694,18805,19509,20410,20444,20469,20599,20617,20976],"fullWord":18805},{"subwords":[5845,6079,8532,8539,8586,8607,8935,11563,11566,11574,12215,12218,16457,16574,16758,17830,18018,18019,18595,18697,18705,18724,18806,18807,18808,18967,21130,21135],"fullWord":18808},{"subwords":[6079,8532,8607,11574,12215,18595,18697,18705,18724,18806,18807,18809,18813,18967,21135],"fullWord":18809},{"subwords":[8770,8772,8788,8892,8899,10897,10898,11879,11884,12010,12018,12021,12215,12806,18743,18806,18811,18967,19026,19186],"fullWord":18811},{"subwords":[8935,8970,8988,9026,9027,12158,12162,12177,12181,12215,12218,16753,16758,17203,18018,18103,18802,18806,18812,18967,19486,19592],"fullWord":18812},{"subwords":[6018,8552,8584,8586,8607,8934,8935,15306,15312,15748,15866,15867,16457,16574,16758,16759,18018,18019,18697,18724,18806,18814,19257,19258,19377,19570,19572,21130,21135,21212],"fullWord":18814},{"subwords":[349,359,852,853,905,911,918,945,997,1030,9376,9409,9447,14898,14899,14912,16028,16041,16889,16907,16908,17722,17744,17773,17881,17967,18347,18449,18472,18474,18815,18816,18947,19381],"fullWord":18816},{"subwords":[31,72,1009,1282,1462,1464,1542,1721,1722,1881,1884,5620,6055,18302,18347,18541,18819,18820,18844],"fullWord":18820},{"subwords":[72,337,385,420,428,434,488,1272,1282,1307,1462,1881,1922,9146,9437,10061,10126,10504,10691,18302,18347,18349,18819,18821,18863],"fullWord":18821},{"subwords":[67,72,1282,1285,1422,1456,1462,1482,1763,1881,1889,9075,9447,16041,16765,16907,17723,18302,18318,18347,18540,18819,18822,18947],"fullWord":18822},{"subwords":[3429,3430,3431,4639,4651,4714,4909,4917,4925,4935,4942,4957,5677,5680,6057,9079,9082,9885,9946,9947,9948,18823,18824,18825,18835,18844,18845,18861],"fullWord":18825},{"subwords":[3161,3429,3430,3432,6057,9079,9094,9384,9396,9946,9947,9949,15021,15051,15312,15411,15422,15542,15748,18823,18824,18826,18844,18847,18861,18941,19244,19267,19270],"fullWord":18826},{"subwords":[3429,3430,6057,9079,9946,9947,18823,18824,18827,18844,18861,18950],"fullWord":18827},{"subwords":[3120,3135,3429,3430,5778,6057,9079,9150,9833,9906,9946,9947,10376,10414,10416,10460,10518,10525,10536,10566,10691,10694,18823,18824,18828,18844,18861,18863,18866],"fullWord":18828},{"subwords":[90,126,1040,2764,3052,3402,3429,18325,18336,18337,18347,18495,18823,18831,18950],"fullWord":18831},{"subwords":[3429,3965,13038,18823,18832,18950,19131],"fullWord":18832},{"subwords":[4928,4934,9124,9128,10530,10691,18834,18843,18863,21140],"fullWord":18834},{"subwords":[4714,4928,4935,4936,4942,5680,18835,18836,18838,18844,18845],"fullWord":18838},{"subwords":[4714,4810,4935,4942,5023,5034,5680,9384,9385,15060,15312,15318,15428,15433,15542,15748,18835,18839,18844,18845,18847,18941,18942,19274],"fullWord":18839},{"subwords":[4714,4724,4826,4935,4939,4942,4945,5037,5063,5680,5684,9111,9127,9447,16457,16780,16907,16911,16912,17856,18575,18835,18837,18840,18844,18845,18850,18947],"fullWord":18840},{"subwords":[9124,9128,10530,10691,18841,18843,18863,21140],"fullWord":18841},{"subwords":[4947,4954,4985,4993,5008,7604,7637,9325,12463,18842,18894,18901],"fullWord":18842},{"subwords":[7493,7505,7512,7540,7604,7637,9139,9325,12374,12463,18607,18844,18846,18894,18898,18901,18902],"fullWord":18846},{"subwords":[4678,4714,4810,4842,4935,4942,4944,5023,5034,5680,5725,5735,5984,5995,9108,9384,9385,15060,15093,15095,15312,15318,15321,15322,15428,15433,15542,15748,18576,18577,18835,18844,18845,18847,18848,18941,18942,19240,19241,19274],"fullWord":18848},{"subwords":[4701,4714,4935,4942,5680,5705,6406,6492,6537,6543,6544,6553,6554,6651,18835,18844,18845,18851,18852],"fullWord":18852},{"subwords":[6593,6651,9325,12463,18851,18853,18894],"fullWord":18853},{"subwords":[5716,5988,5992,6018,7540,7541,7628,7632,7635,7637,8033,8035,8036,9384,9389,9409,9447,15141,15306,15312,15461,15472,15526,15542,15543,15748,16457,16889,16890,16907,16911,17722,17881,18844,18847,18849,18850,18855,18856,18941,18943,18947,19277,19280],"fullWord":18856},{"subwords":[7635,7637,8678,8685,8688,8691,8935,9447,16653,16805,16809,16907,18742,18857,18858,18947,18950,18964],"fullWord":18858},{"subwords":[7596,7604,7637,7690,7874,9267,9325,9334,9335,9360,10637,10641,10652,10656,10663,10691,10793,10814,10826,10897,12438,12463,12509,12574,12812,18859,18863,18894,18901,18993,19002,19036,19043],"fullWord":18859},{"subwords":[7628,7632,7635,7637,8033,8035,8036,9392,9409,9447,15461,15472,16889,16907,17722,17881,18860,18947,19280],"fullWord":18860},{"subwords":[4714,4724,4728,4739,4742,4743,4826,4935,4939,4942,4945,5037,5063,5680,5684,5756,5760,9111,9117,9121,9122,9127,9416,9417,9419,9436,9447,10378,10414,10415,10459,10460,10465,10530,10535,10536,10537,10551,10686,10687,10691,10694,10697,10707,16457,16780,16784,16840,16841,16907,16911,16912,17044,17068,17069,17093,17856,17862,18575,18835,18837,18844,18845,18850,18863,18864,18865,18866,18867,18870,18947],"fullWord":18865},{"subwords":[6018,9384,9389,9409,9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10549,10550,10551,10677,10686,10689,10691,10694,10695,10696,10697,10705,10706,10707,15196,15197,15306,15312,15444,15445,15473,15475,15526,15542,15543,15748,16457,16840,16889,16890,16907,16911,17072,17093,17722,17862,17881,18844,18847,18849,18850,18863,18866,18868,18869,18870,18941,18943,18947,19277],"fullWord":18869},{"subwords":[7596,7604,7637,7690,9325,9334,10637,10656,10691,12438,12463,18863,18871,18894,18901],"fullWord":18871},{"subwords":[4714,4728,4739,4744,4935,4942,4967,5680,5756,5780,9117,9152,10378,10414,10460,10530,10536,10537,10580,10581,10691,10694,18591,18835,18844,18845,18863,18864,18866,18867,18872,18873],"fullWord":18873},{"subwords":[5780,9152,9153,9384,10414,10460,10536,10549,10580,10677,10691,10694,10695,10705,15197,15312,15444,15473,15477,15542,15748,18591,18844,18847,18863,18866,18868,18872,18874,18941,19283],"fullWord":18874},{"subwords":[4714,4728,4739,4935,4942,5680,5756,9117,10378,10414,10460,10530,10536,10537,10691,10694,18835,18844,18845,18863,18864,18866,18867,18876,18877,18950,18960,18961],"fullWord":18877},{"subwords":[9384,10414,10460,10536,10549,10677,10691,10694,10695,10705,10709,15197,15312,15444,15473,15542,15748,18844,18847,18863,18866,18868,18876,18878,18941,18950,18953,18960,18963,19303],"fullWord":18878},{"subwords":[8645,8647,8678,8685,8688,8691,8935,9447,10686,10691,10698,10707,16653,16840,16907,17093,17867,18742,18863,18876,18879,18880,18881,18947,18950,18964],"fullWord":18880},{"subwords":[72,337,341,385,434,488,1272,1282,1307,1324,1462,1881,1922,9064,9077,9437,10061,10126,10136,10139,10504,10584,10585,10587,10691,11148,11173,11182,11192,11361,11659,11686,18302,18347,18349,18389,18863,18882,18883],"fullWord":18883},{"subwords":[1700,1721,1790,1881,1884,1885,2417,2428,2444,5830,5832,9077,9384,9444,11539,11553,11574,11743,11786,11787,11792,14995,15202,15217,15312,15402,15480,15481,15542,15748,18595,18644,18817,18844,18847,18882,18884,18885,18886,18889,18941,19265,19285],"fullWord":18884},{"subwords":[1700,1721,1790,1881,1884,1885,2417,2428,2444,5830,5832,9077,9384,9444,11539,11553,11574,11743,11786,11787,11792,14995,15202,15217,15312,15402,15480,15481,15542,15748,18595,18644,18817,18844,18847,18882,18884,18885,18886,18889,18941,19265,19285],"fullWord":18885},{"subwords":[5782,5785,5829,5832,6079,9444,10414,10460,10495,10536,10584,10595,10599,10618,10691,10694,11065,11502,11574,11659,11668,11686,11786,18595,18844,18863,18866,18882,18886,18888,21135,21136],"fullWord":18888},{"subwords":[5830,5831,5832,5833,5845,6018,9384,9389,9409,9422,9444,9446,9447,11539,11553,11554,11574,11743,11745,11764,11765,11780,11782,11786,11787,11788,11789,11792,11794,15202,15217,15218,15224,15306,15312,15480,15481,15484,15489,15526,15542,15543,15748,16375,16457,16889,16890,16907,16911,17179,17180,17181,17722,17830,17881,18595,18644,18648,18844,18847,18849,18850,18882,18886,18889,18890,18891,18941,18943,18947,19277,19285,19287],"fullWord":18890},{"subwords":[7604,7637,9325,11649,11697,11711,11714,11729,12443,12463,18882,18893,18894,18901],"fullWord":18893},{"subwords":[3429,4238,4241,9207,9307,9318,9325,9447,12463,12471,16178,16769,16858,16907,17255,17878,18823,18830,18894,18895,18896,18919,18921,18924,18947,18950,18964,18969],"fullWord":18896},{"subwords":[4714,4774,4788,4810,4935,4942,4985,4988,4990,5008,5023,5034,5680,5865,5996,9245,9325,9331,9338,9384,9385,12358,12374,12463,12464,12466,15060,15175,15227,15241,15312,15318,15428,15433,15491,15542,15748,18607,18610,18649,18835,18844,18845,18847,18894,18897,18898,18899,18941,18942,19248,19274,19289,19290],"fullWord":18897},{"subwords":[4714,4720,4774,4788,4935,4942,4947,4985,4988,4993,5008,5680,5865,7493,7512,7540,7604,7637,9325,12374,12463,18607,18610,18835,18844,18845,18894,18898,18899,18901,18902,18903],"fullWord":18903},{"subwords":[5716,5918,7493,7511,7512,7517,7540,7541,7604,7611,7635,7637,9264,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,16399,16400,16457,16815,16820,16858,16860,16866,16867,16907,16911,17255,17826,17870,18607,18624,18844,18850,18894,18898,18900,18901,18902,18904,18907,18919,18947],"fullWord":18904},{"subwords":[7477,7487,7493,7512,7513,7540,7596,7604,7637,7680,7690,9265,9290,9325,9328,9334,10398,10408,10414,10437,10460,10536,10544,10625,10637,10656,10691,10694,12374,12438,12439,12463,18607,18844,18863,18866,18894,18898,18901,18902,18905],"fullWord":18905},{"subwords":[7596,7604,7637,7690,9293,9325,9334,10637,10656,10660,10662,10691,11067,12438,12463,18863,18894,18901,18906,18925,19552,21144],"fullWord":18906},{"subwords":[5996,9245,9325,9331,9338,9384,12374,12463,12464,12466,15175,15241,15312,15542,15748,18607,18649,18844,18847,18894,18898,18908,18941,19289],"fullWord":18908},{"subwords":[9293,9325,9334,10656,10660,10662,10691,12438,12463,18863,18894,18909,18925,21144],"fullWord":18909},{"subwords":[7604,7637,9297,9325,12463,18894,18901,18910],"fullWord":18910},{"subwords":[5996,9245,9276,9278,9325,9331,9338,9384,9396,9836,9844,9855,9913,9919,9946,9947,9949,9985,12374,12463,12464,12466,15175,15241,15312,15498,15542,15748,18607,18649,18844,18847,18861,18894,18898,18911,18941,19244,19289],"fullWord":18911},{"subwords":[5778,9150,9276,9281,9290,9325,9328,9334,9836,9844,9902,9906,9913,9919,9946,9947,9977,9985,10414,10416,10437,10460,10536,10544,10566,10569,10625,10645,10656,10691,10694,12374,12438,12439,12463,18607,18844,18861,18863,18866,18894,18898,18912],"fullWord":18912},{"subwords":[9150,9276,9285,9293,9325,9334,9902,9906,9911,9913,9946,9985,10645,10650,10656,10660,10662,10691,12438,12463,18863,18894,18913,18925,21144],"fullWord":18913},{"subwords":[341,657,693,700,9297,9325,11156,11213,11361,11371,11697,11729,12244,12252,12443,12463,18347,18389,18408,18882,18894,18914],"fullWord":18914},{"subwords":[5832,9297,9325,9444,11489,11512,11574,11645,11697,11706,11729,11786,12374,12443,12448,12463,18595,18607,18844,18882,18886,18894,18898,18915],"fullWord":18915},{"subwords":[4714,4774,4788,4791,4935,4942,4985,4988,5008,5680,5865,9225,9297,9299,9325,9329,12374,12448,12463,18607,18610,18835,18844,18845,18894,18898,18899,18916],"fullWord":18916},{"subwords":[5996,9245,9297,9300,9325,9331,9332,9338,9384,12374,12448,12463,12464,12466,15175,15241,15312,15542,15748,18607,18649,18844,18847,18894,18898,18917,18941,19289],"fullWord":18917},{"subwords":[5902,5918,9290,9291,9307,9312,9318,9325,9328,9334,9416,9419,9436,9447,10414,10415,10433,10437,10459,10460,10465,10536,10544,10548,10551,10625,10634,10654,10656,10659,10686,10688,10691,10694,10697,10707,12368,12374,12376,12438,12439,12442,12463,12471,16399,16400,16457,16826,16840,16858,16860,16907,16911,17093,17255,17826,17862,18607,18624,18844,18850,18863,18866,18870,18894,18898,18900,18919,18920,18947],"fullWord":18920},{"subwords":[4714,4774,4788,4935,4942,4985,4988,5008,5680,5865,9325,12374,12463,18607,18610,18630,18835,18844,18845,18894,18898,18899,18921,18922,18950,18969],"fullWord":18922},{"subwords":[5996,9245,9325,9331,9338,9384,12374,12463,12464,12466,15175,15241,15312,15542,15748,18607,18630,18649,18844,18847,18894,18898,18921,18923,18941,18950,18953,18963,18969,19289,19303],"fullWord":18923},{"subwords":[126,781,1040,2921,3052,3402,3429,4046,13154,13168,13364,13438,13688,13850,13851,18325,18336,18347,18436,18495,18823,18926,18927,18950],"fullWord":18927},{"subwords":[6651,6937,12771,12785,12937,13850,14032,14188,18851,18926,18930,18986,19075],"fullWord":18930},{"subwords":[4714,4805,4935,4942,5014,5022,5680,13478,13569,13613,13705,13710,13813,13815,13816,13820,13850,14237,18641,18835,18844,18845,18926,18931],"fullWord":18931},{"subwords":[9384,13569,13577,13599,13613,13623,13705,13712,13813,13815,13817,13820,13850,14262,14278,15248,15312,15508,15509,15542,15748,18844,18847,18926,18932,18941,19295,19296],"fullWord":18932},{"subwords":[13569,13613,13619,13705,13813,13815,13820,13850,18844,18926,18933,18950],"fullWord":18933},{"subwords":[10414,10460,10536,10665,10691,10694,13532,13569,13613,13705,13743,13813,13815,13820,13850,18844,18863,18866,18926,18934],"fullWord":18934},{"subwords":[12916,12937,13613,13619,13705,13850,14027,14032,14188,18844,18926,18938,18950,18981,19075,19076,19131,19134],"fullWord":18938},{"subwords":[12933,12937,13813,13850,14032,14130,14188,18926,18939,18950,19075,19131],"fullWord":18939},{"subwords":[169,326,327,329,349,351,817,854,911,1009,4516,4537,4551,4553,4599,4607,4714,4810,4812,4935,4942,5023,5034,5327,5588,5620,5680,5976,5982,6055,9103,9376,9382,9384,9385,14736,14776,14898,14901,14902,14961,15060,15312,15318,15428,15433,15542,15748,18339,18347,18449,18450,18453,18454,18541,18554,18835,18844,18845,18847,18940,18941,18942,19205,19233,19259,19274],"fullWord":18940},{"subwords":[7604,7628,7637,8015,8035,9325,9338,9391,12463,15461,15494,18894,18901,18944,19280],"fullWord":18944},{"subwords":[647,648,691,693,694,697,700,704,711,1009,5616,5620,5626,5918,6055,6074,6075,9307,9312,9318,9325,9447,12229,12289,12325,12330,12368,12374,12376,12463,12471,15936,15986,15995,16041,16043,16047,16270,16293,16399,16400,16457,16858,16860,16907,16911,17255,17742,17826,18347,18408,18428,18541,18559,18607,18624,18844,18850,18894,18898,18900,18919,18947,18948],"fullWord":18948},{"subwords":[6039,9431,9447,16457,16464,16903,16907,16911,16913,16915,16917,16920,17857,18066,18073,18074,18075,18083,18085,18086,18088,18090,18844,18850,18947,18949,19876,19882],"fullWord":18949},{"subwords":[647,691,693,700,704,711,1044,9307,9318,9325,9447,12463,12471,15936,15986,16041,16047,16858,16907,17255,17742,17788,17878,18347,18354,18355,18408,18428,18495,18503,18894,18919,18921,18924,18947,18950,18951,18952,18964,18969],"fullWord":18952},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16889,16890,16907,16911,16916,17722,17846,17881,18662,18844,18847,18849,18850,18941,18943,18947,18950,18953,18954,18963,18964,19255,19277,19302,19303],"fullWord":18954},{"subwords":[4714,4935,4942,5680,5682,8617,8619,8625,8626,8688,18697,18835,18844,18845,18950,18955,18956],"fullWord":18956},{"subwords":[8503,8552,8625,8672,8688,8692,9384,15312,15542,15748,18697,18701,18844,18847,18941,18950,18953,18955,18957,18963,19303],"fullWord":18957},{"subwords":[8506,8586,8625,8628,8678,8685,8688,8691,8935,9447,16457,16574,16653,16907,16911,17846,18662,18697,18704,18742,18844,18850,18947,18950,18955,18958,18964],"fullWord":18958},{"subwords":[693,700,1044,9325,12463,18347,18354,18408,18495,18894,18921,18950,18951,18959,18969],"fullWord":18959},{"subwords":[4714,4728,4739,4935,4942,5680,5756,9117,10378,10414,10460,10530,10536,10537,10691,10694,18835,18844,18845,18863,18864,18866,18867,18876,18877,18950,18960,18961],"fullWord":18961},{"subwords":[9416,9419,9436,9447,10414,10415,10459,10460,10465,10536,10551,10686,10691,10694,10697,10707,16457,16840,16907,16911,17093,17846,17862,17867,18662,18844,18850,18863,18866,18870,18876,18881,18947,18950,18960,18962,18964],"fullWord":18962},{"subwords":[9384,15312,15542,15748,18844,18847,18941,18950,18953,18963,18965,19303],"fullWord":18965},{"subwords":[10414,10460,10536,10691,10694,18844,18863,18866,18876,18950,18960,18966],"fullWord":18966},{"subwords":[973,990,12685,12686,12692,16041,17434,17435,17436,17788,17796,17885,17886,17887,17888,18432,18435,18487,18495,18503,18973,18974,19125,19130,19131,19144],"fullWord":18974},{"subwords":[1047,12686,12692,16041,16103,17435,17472,17473,17788,17802,17885,17887,18018,18432,18435,18494,18495,18503,18973,18975,19130,19131,19144,19186,19195,19389],"fullWord":18975},{"subwords":[3417,3429,3689,3692,3777,3814,3816,3958,3965,3971,4238,4241,9097,9099,9207,9307,9318,9325,9335,9360,9366,9447,12463,12471,12560,12574,12591,13038,16178,16180,16205,16769,16858,16907,17255,17278,17316,17383,17391,17435,17897,18823,18830,18894,18919,18947,18976,19036,19049,19050,19057],"fullWord":18976},{"subwords":[183,197,200,4578,4582,5221,5233,5234,5245,5249,12686,12692,15893,16041,16103,17323,17324,17435,17472,17473,17802,17885,18018,18339,18340,18432,18435,18970,18971,18972,18977,18978,19186,19195,21096,21154],"fullWord":18978},{"subwords":[4728,5114,5146,5147,5161,5234,5237,5238,5756,10378,10443,10460,10780,10897,12745,12752,12837,12845,18979,18981,18983,19016,19017],"fullWord":18979},{"subwords":[93,126,732,781,1009,1028,2921,2922,2933,3052,3605,3864,3867,3965,3968,5620,5956,6055,6057,12686,12916,12917,12937,13154,13155,13168,13364,13367,13438,13439,13464,13613,14027,14188,18333,18432,18436,18437,18541,18981,18982,19075,19076],"fullWord":18982},{"subwords":[5718,5953,7493,7512,7540,7604,7637,7815,7874,9267,9325,9335,9360,12374,12463,12509,12574,12581,12876,18607,18844,18894,18898,18901,18902,18981,18984,18993,19036,19038,19043],"fullWord":18984},{"subwords":[5705,5950,6409,6420,6489,6874,12771,12785,18576,18981,18986,18987],"fullWord":18987},{"subwords":[183,269,270,299,1009,4451,4551,5114,5123,5125,5234,5235,5237,5620,5707,5718,6055,7253,7416,7417,7418,7540,7761,7768,7782,7874,12686,12752,18339,18342,18432,18541,18970,18981,18983,18993,18994,18995,18996],"fullWord":18996},{"subwords":[5114,5123,5125,5234,5237,5709,5718,7522,7540,7782,7874,12752,18981,18983,18993,18998],"fullWord":18998},{"subwords":[5709,5718,7477,7487,7522,7525,7540,7874,10398,10443,10460,10793,10796,10897,12792,12845,18981,18993,18999,19017],"fullWord":18999},{"subwords":[4714,4728,4739,4935,4942,5114,5146,5161,5234,5237,5680,5756,9110,9117,9125,10378,10414,10443,10460,10530,10533,10536,10537,10691,10694,10780,10897,12752,12812,12815,12837,12841,12845,18835,18844,18845,18863,18864,18866,18867,18981,18983,19002,19003,19016,19017],"fullWord":19003},{"subwords":[9384,10414,10443,10460,10536,10549,10677,10691,10694,10695,10705,10816,10882,10897,12812,12816,12845,12979,12992,13008,15197,15246,15312,15444,15473,15504,15542,15610,15617,15621,15691,15694,15748,18844,18847,18863,18866,18868,18941,18945,18981,19002,19004,19017,19093,19101,19292],"fullWord":19004},{"subwords":[10414,10443,10460,10536,10691,10694,10897,12812,12845,18844,18863,18866,18876,18950,18960,18981,19002,19005,19017,19131,19134],"fullWord":19005},{"subwords":[4714,4935,4942,5065,5114,5234,5237,5680,9110,12752,18835,18844,18845,18950,18981,18983,19007,19131,19134,19135],"fullWord":19007},{"subwords":[950,9797,9800,9801,10056,10057,12675,12677,12686,12692,12831,12833,16041,16103,16992,17294,17435,17472,17473,17802,17885,18018,18432,18435,18484,19008,19009,19186,19195,21047,21049],"fullWord":19009},{"subwords":[5918,5953,5955,9836,9841,9842,9843,9844,9993,9994,12368,12374,12376,12506,12560,12561,12574,12581,12585,12591,12876,12879,12884,16399,16457,16461,17278,17383,17435,17834,17899,17909,18607,18624,18981,18985,19010,19012,19013,19014,19036,19038,19042,19057],"fullWord":19013},{"subwords":[7604,7637,7874,9142,9267,9276,9325,9335,9360,9913,9922,9946,9985,9993,10015,12463,12509,12574,12825,18894,18901,18993,19015,19036,19043],"fullWord":19015},{"subwords":[4728,5114,5146,5161,5234,5237,5756,10378,10443,10460,10780,10833,10860,10861,10897,12752,12837,12845,12846,18981,18983,19016,19017,19018,19060,19062,19063],"fullWord":19018},{"subwords":[4728,4744,5114,5146,5150,5161,5234,5237,5756,5780,10378,10443,10460,10780,10897,12752,12837,12845,18591,18981,18983,19016,19017,19019,19020],"fullWord":19020},{"subwords":[5780,10443,10460,10882,10897,12845,12979,13008,15312,15610,15621,15623,15691,15694,15748,18591,18981,19017,19019,19021,19093,19101,19315],"fullWord":19021},{"subwords":[10833,10860,10897,10929,13059,19019,19023,19060,19062,19605],"fullWord":19023},{"subwords":[10897,10929,13059,19019,19024,19186,19605,21193],"fullWord":19024},{"subwords":[10896,10897,10901,17113,17149,17354,17435,17472,18018,19019,19022,19025,19186,19195],"fullWord":19025},{"subwords":[1020,11265,11361,11377,11814,11921,11943,12010,12032,12686,13043,18389,18432,18495,18501,19026,19027,19060,19066,19131,19143],"fullWord":19027},{"subwords":[1560,1721,2058,2059,2237,4618,4630,4763,4764,5114,5163,5165,5234,5237,11574,11817,11831,11833,12010,12011,12752,18595,18981,18983,19026,19028,19029,19032],"fullWord":19029},{"subwords":[2160,2173,2177,2185,2192,2237,2300,2302,11817,11921,11943,12010,19026,19028,19030,19060,19186],"fullWord":19030},{"subwords":[126,1020,2848,3052,3605,3732,3733,3965,3972,11086,11265,11361,11377,11814,12010,12686,18333,18336,18389,18432,18495,19026,19031,19131],"fullWord":19031},{"subwords":[11795,11854,12010,12869,18882,18950,19026,19035,19131],"fullWord":19035},{"subwords":[5918,5953,5955,6000,6004,6018,12362,12368,12372,12374,12376,12506,12548,12556,12560,12561,12572,12574,12581,12583,12584,12585,12590,12591,12876,12879,12884,12979,12982,13007,13008,13011,15238,15241,15245,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16391,16399,16457,16461,17272,17276,17278,17383,17419,17429,17435,17834,17843,17909,17911,17924,18607,18621,18622,18624,18629,18649,18651,18981,18985,19036,19038,19040,19041,19042,19057,19093,19101,19103,19105,19113],"fullWord":19041},{"subwords":[299,304,634,693,711,7396,7416,7423,7745,7746,7768,7770,7874,12230,12233,12293,12509,12512,12560,12574,12575,12591,12686,12692,15910,15921,15986,16001,16041,17211,17278,17383,17389,17435,17732,17885,18342,18345,18408,18410,18414,18415,18416,18428,18432,18435,18993,18994,18997,19001,19036,19043,19044,19047,19057],"fullWord":19044},{"subwords":[4774,4788,5114,5123,5125,5172,5176,5179,5234,5237,5718,5865,5953,7493,7512,7540,7782,7815,7874,12374,12493,12499,12509,12574,12581,12582,12752,12876,18607,18610,18981,18983,18993,19036,19038,19039,19043,19045],"fullWord":19045},{"subwords":[5718,5894,5953,5988,5989,5990,7493,7512,7540,7788,7815,7816,7855,7874,8056,12347,12374,12509,12548,12574,12581,12583,12590,12798,12876,12979,13008,15141,15238,15241,15312,15610,15691,15694,15748,18607,18621,18649,18981,18993,19036,19038,19040,19043,19046,19093,19101,19105],"fullWord":19046},{"subwords":[5718,5953,7493,7512,7540,7759,7815,7874,7886,8151,8175,12374,12509,12574,12581,12659,12876,13059,18607,18981,18993,19036,19038,19043,19048,19418,19434,19438,19685,19780],"fullWord":19048},{"subwords":[3417,3429,3689,3692,3777,3814,3816,3958,3965,3971,4238,4241,9097,9099,9207,9307,9318,9325,9335,9360,9366,9447,12463,12471,12560,12574,12591,13038,16178,16180,16205,16769,16858,16907,17255,17278,17316,17383,17391,17435,17897,18823,18830,18894,18919,18947,18976,19036,19049,19050,19057],"fullWord":19050},{"subwords":[5953,5996,9245,9325,9331,9335,9338,9340,9360,9384,9400,12374,12463,12464,12466,12469,12513,12514,12548,12574,12581,12583,12590,12876,12979,12994,13008,15175,15238,15241,15312,15504,15542,15610,15691,15694,15748,18607,18621,18649,18844,18847,18894,18898,18941,18945,18981,19036,19038,19040,19051,19093,19101,19105,19289,19292],"fullWord":19051},{"subwords":[5918,5953,5955,9307,9312,9318,9325,9335,9360,9366,9447,12368,12374,12376,12463,12471,12506,12516,12560,12561,12574,12581,12585,12591,12876,12879,12884,16399,16400,16457,16461,16858,16860,16907,16911,17255,17278,17383,17435,17826,17834,17909,18607,18624,18844,18850,18894,18898,18900,18919,18947,18981,18985,19036,19038,19042,19052,19057],"fullWord":19052},{"subwords":[7604,7637,7874,9267,9297,9325,9335,9360,12463,12509,12528,12574,12588,18894,18901,18993,19036,19043,19053],"fullWord":19053},{"subwords":[5953,12353,12374,12528,12533,12548,12574,12581,12583,12590,12876,12979,13008,15238,15241,15312,15610,15691,15694,15748,18607,18619,18621,18649,18981,19036,19038,19040,19054,19055,19093,19101,19105],"fullWord":19055},{"subwords":[5918,5953,5955,12353,12355,12368,12374,12376,12506,12528,12533,12535,12560,12561,12574,12581,12585,12591,12876,12879,12884,16399,16457,16461,17278,17383,17393,17435,17834,17909,18607,18619,18620,18624,18981,18985,19036,19038,19042,19054,19056,19057],"fullWord":19056},{"subwords":[9307,9318,9325,9334,9335,9360,9366,9447,10652,10653,10654,10656,10659,10663,10664,10686,10691,10707,10814,10815,10896,10897,10901,12438,12442,12463,12471,12560,12574,12591,12812,12822,16837,16840,16858,16907,17093,17113,17255,17278,17350,17354,17364,17383,17435,18863,18894,18919,18947,19002,19006,19036,19057,19058],"fullWord":19058},{"subwords":[4728,5114,5146,5161,5234,5237,5756,10378,10443,10460,10780,10833,10860,10861,10897,12752,12837,12845,12846,18981,18983,19016,19017,19018,19060,19062,19063],"fullWord":19063},{"subwords":[10443,10460,10833,10860,10862,10882,10897,12845,12846,12979,13008,15312,15328,15610,15621,15659,15691,15694,15697,15748,18981,19017,19060,19062,19064,19093,19101,19106],"fullWord":19064},{"subwords":[5114,5234,5237,12752,13043,18981,18983,19060,19066,19067,19131,19134,19135,19143],"fullWord":19067},{"subwords":[12979,13008,13041,13043,15312,15610,15659,15691,15694,15697,15748,18981,19060,19066,19068,19093,19101,19106,19117,19118,19131,19134,19138,19143,19331],"fullWord":19068},{"subwords":[8838,8842,8887,8892,8901,8935,12809,12810,12895,12898,13043,16686,16691,16704,17399,17401,17435,18743,19060,19066,19069,19070,19073,19123,19130,19131,19143,19144],"fullWord":19070},{"subwords":[8838,8892,12809,12895,13043,18743,18806,19060,19066,19069,19071,19131,19143,19186,19389],"fullWord":19071},{"subwords":[10443,10460,10833,10860,10897,10903,12845,12846,13043,18981,19017,19060,19062,19066,19072,19131,19134,19143],"fullWord":19072},{"subwords":[13043,17399,17405,17435,17472,18018,19060,19066,19073,19074,19130,19131,19143,19144,19186,19193,19195,19389],"fullWord":19074},{"subwords":[732,781,1009,1028,5620,5956,6055,9848,12675,12686,12916,12937,13364,13367,13439,13446,13464,13613,14027,14044,14188,18358,18432,18436,18437,18541,18545,18981,19010,19075,19076,19078,19196],"fullWord":19078},{"subwords":[6004,6018,6033,6049,12916,12925,12936,12937,12944,12979,12982,13007,13008,13011,13577,13599,13607,13609,13613,13624,13626,14027,14030,14147,14149,14160,14165,14166,14168,14182,14185,14188,14201,14262,14281,14284,14285,14350,14383,14384,14403,14427,15248,15272,15305,15306,15312,15610,15611,15663,15668,15676,15691,15694,15695,15700,15748,16409,16457,17406,17419,17429,17435,17638,17641,17644,17836,17921,17924,17961,17985,18981,18985,19075,19076,19079,19080,19081,19090,19093,19101,19103,19113,19323,19324,19325,19386],"fullWord":19080},{"subwords":[6801,6815,6821,6937,6999,10788,10864,10897,10917,10929,12785,12937,13059,13973,14007,14056,14188,14195,14209,14215,14224,14561,18991,19075,19082,19453,19580,19605],"fullWord":19082},{"subwords":[3429,3864,3883,3958,3965,3971,4046,4048,4237,4238,4241,9374,9447,12936,12937,12939,12940,12944,13038,13438,13700,13701,13702,13850,13866,14032,14177,14182,14188,14201,14421,14427,16178,16194,16205,16769,16883,16907,17316,17406,17435,17550,17598,17644,17897,17921,18823,18830,18926,18936,18947,19075,19083,19084,19090,19386],"fullWord":19084},{"subwords":[7604,7612,7637,7874,9267,9325,9335,9360,12453,12463,12509,12574,12937,12942,13721,13765,13773,13799,13802,13809,13850,13864,14032,14035,14107,14188,18894,18901,18926,18993,19036,19043,19075,19085],"fullWord":19085},{"subwords":[4803,4805,5114,5200,5234,5237,12752,12916,12933,12937,12938,13478,13569,13613,14020,14027,14130,14131,14188,14237,18981,18983,19075,19076,19077,19087],"fullWord":19087},{"subwords":[12916,12933,12937,12979,13008,13569,13577,13599,13613,13624,14027,14130,14131,14147,14160,14188,14262,14278,14350,14379,15248,15312,15610,15663,15691,15694,15748,18981,19075,19076,19079,19088,19093,19101,19323,19324],"fullWord":19088},{"subwords":[10443,10460,10864,10865,10897,12845,12916,12933,12937,13532,13569,13613,13971,13973,14027,14056,14061,14130,14131,14188,18981,19017,19075,19076,19089],"fullWord":19089},{"subwords":[13055,13059,13082,14587,14635,14650,14651,14694,14700,14703,14706,16416,16457,17435,18066,18074,18981,18985,19091,19092,19876],"fullWord":19092},{"subwords":[325,905,911,918,932,8360,8361,8362,8371,8378,8391,8696,8857,8858,8863,8874,8879,8887,8892,8901,8934,8935,12680,12683,12686,12690,12691,12692,12810,13007,13008,13009,13011,14775,14886,14898,14912,15386,15574,15673,15691,15700,16041,16559,16670,16701,16704,17303,17429,17435,17773,17885,18432,18435,18449,18463,18464,18472,18743,18749,18777,19093,19094,19095,19096,19097,19113,19123,19224,19381],"fullWord":19096},{"subwords":[6008,12979,13008,15312,15330,15610,15659,15661,15691,15694,15697,15698,15748,18652,18981,19060,19093,19101,19102,19106],"fullWord":19102},{"subwords":[6004,6018,9384,9389,9409,9447,12979,12982,13007,13008,13011,13022,15306,15312,15504,15507,15526,15542,15543,15610,15611,15676,15691,15694,15695,15700,15748,16457,16889,16890,16907,16911,17419,17429,17432,17435,17722,17881,17924,18844,18847,18849,18850,18941,18943,18945,18946,18947,18981,18985,19093,19101,19103,19104,19113,19114,19277,19292,19294,19313],"fullWord":19104},{"subwords":[5034,5196,5234,5387,12762,12976,13008,15428,15504,15600,15642,15659,15691,15697,18945,19060,19093,19106,19107,19292,19310],"fullWord":19107},{"subwords":[5014,5022,5034,5215,5234,5377,5380,5387,5402,5405,12937,13008,13850,14020,14032,14160,14188,14350,14357,15428,15504,15508,15600,15691,18926,18945,19075,19093,19109,19292,19295,19300,19310,19323],"fullWord":19109},{"subwords":[12937,13008,14127,14160,14188,14350,15659,15691,15697,15698,19060,19075,19093,19106,19110,19321,19323],"fullWord":19110},{"subwords":[12979,13008,13051,13059,13066,13080,14635,14694,14703,14705,15274,15312,15610,15691,15694,15706,15722,15723,15748,15777,15858,18981,19091,19093,19101,19111,19155,19356,19895],"fullWord":19111},{"subwords":[5034,5234,5387,13008,15428,15504,15600,15691,18945,19093,19112,19292,19310],"fullWord":19112},{"subwords":[13007,13008,13011,15657,15658,15659,15662,15691,15697,15700,17399,17404,17429,17433,17434,17435,17436,19060,19093,19106,19108,19113,19115,19116,19125],"fullWord":19116},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13041,13042,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17846,17924,18662,18981,18985,19093,19101,19103,19113,19117,19118,19119,19120,19130,19131,19134,19138,19139,19140,19144,19255,19331,19334],"fullWord":19119},{"subwords":[6039,6071,8586,8725,8730,8881,8883,8887,8891,8892,8901,8935,12810,16457,16464,16574,16609,16676,16680,16704,16705,16706,16707,17434,17435,17436,18697,18743,18758,18981,18985,19123,19124,19125],"fullWord":19124},{"subwords":[4826,5114,5117,5118,5221,5223,5227,5229,5233,5234,5237,5241,5245,6039,12752,12755,16457,16464,17323,17332,17434,17435,17436,18575,18981,18983,18985,19125,19126],"fullWord":19126},{"subwords":[6004,6018,6039,12979,12982,13007,13008,13011,15306,15309,15312,15610,15611,15676,15679,15680,15691,15694,15695,15700,15748,16457,16464,17419,17424,17425,17429,17433,17434,17435,17436,17924,17926,18981,18985,19093,19101,19103,19113,19125,19127,19253],"fullWord":19127},{"subwords":[6039,16457,16464,17434,17435,17436,18981,18985,19125,19128],"fullWord":19128},{"subwords":[12936,12937,12944,12945,13055,13058,13059,13082,14182,14186,14188,14201,14224,14227,14422,14427,14551,14558,14561,14567,17406,17414,17434,17435,17436,17447,17449,17644,17645,17648,17649,17921,17922,17934,17935,18135,18147,18148,19075,19090,19125,19129,19386,19453,19456,19825],"fullWord":19129},{"subwords":[487,488,495,496,10181,10241,10896,10897,10901,12686,12692,15942,15960,16041,17022,17113,17354,17435,17788,17885,17887,18432,18435,18495,18503,18973,19130,19131,19132,19133,19144],"fullWord":19133},{"subwords":[5845,11574,12007,12010,12011,12014,12015,12016,12030,12872,16457,17198,17382,17435,17830,17846,18595,18662,18981,18985,19026,19032,19033,19034,19130,19131,19134,19136,19137,19140,19144],"fullWord":19137},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13041,13042,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17846,17924,18662,18981,18985,19093,19101,19103,19113,19117,19118,19119,19120,19130,19131,19134,19138,19139,19140,19144,19255,19331,19334],"fullWord":19139},{"subwords":[8552,8575,8725,8728,8857,8892,8903,12979,13008,13009,13036,13041,15312,15386,15610,15691,15694,15748,18697,18743,18749,18777,18781,18981,19093,19101,19117,19118,19131,19134,19138,19141,19331,19332],"fullWord":19141},{"subwords":[7604,7637,7874,9267,9325,9335,9360,12463,12509,12574,18894,18901,18921,18950,18969,18993,19036,19043,19131,19142],"fullWord":19142},{"subwords":[5114,5234,5237,12752,18981,18983,19131,19134,19135,19145],"fullWord":19145},{"subwords":[12979,13008,13041,15312,15610,15691,15694,15748,18981,19093,19101,19117,19118,19131,19134,19138,19146,19331],"fullWord":19146},{"subwords":[126,693,1074,1093,2869,2908,2913,3052,3605,3777,3816,3965,3966,3981,4300,4375,12293,12300,12574,12575,12659,12686,13059,18333,18408,18432,18508,19036,19147,19434,19435,19655,19780],"fullWord":19147},{"subwords":[3370,3399,3965,3968,3995,4268,4375,4376,5641,6057,6058,8714,8725,8892,8945,9026,13044,13059,18570,18697,18743,18759,18981,19148,19149],"fullWord":19149},{"subwords":[3370,3965,3995,4029,4375,8714,8892,9026,13044,13059,18743,18759,18806,19148,19150,19186,21193,21200],"fullWord":19150},{"subwords":[7556,7871,7874,7875,7877,7886,7887,8166,8171,8173,8175,8176,8731,8737,8887,8892,8901,8935,8951,8958,9026,9027,12810,13046,13047,13055,13059,13082,16704,16709,16753,17435,17439,17441,17460,18743,18759,18762,18796,18797,18802,18993,19001,19123,19151,19152,19418,19421,19486,19583,19584,19592],"fullWord":19152},{"subwords":[7874,7875,7886,7888,7895,8175,8180,8731,8892,8951,9026,13046,13059,18743,18759,18796,18806,18993,19151,19153,19186,19418,19583,21193,21200],"fullWord":19153},{"subwords":[12916,12937,13059,13489,13613,14027,14188,14224,14561,18576,18981,19075,19076,19154,19453],"fullWord":19154},{"subwords":[4810,4845,5114,5115,5234,5237,5239,5260,5471,5479,5523,12752,12979,13008,13051,13059,13065,13066,13080,15060,15078,15082,15312,15318,15600,15603,15610,15691,15694,15706,15722,15723,15724,15748,15773,15777,15778,15858,18981,18983,19093,19101,19155,19156,19310,19311,19356,19357,19411,19465,19895],"fullWord":19156},{"subwords":[6008,12979,13008,13051,13059,13066,13080,15312,15330,15610,15691,15694,15706,15722,15723,15725,15748,15777,15780,15858,18652,18981,19093,19101,19155,19157,19356,19358,19895],"fullWord":19157},{"subwords":[10443,10447,10459,10460,10465,10470,10888,10896,10897,10901,10905,10925,10929,10931,11044,11050,11053,12845,12848,13053,13055,13059,13082,16402,16457,17097,17113,17128,17147,17354,17359,17373,17435,17442,17903,18066,18074,18981,18985,19017,19159,19422,19605,19876],"fullWord":19159},{"subwords":[5114,5234,5237,5471,5479,5523,12752,13059,13065,18981,18983,19131,19134,19135,19160,19161,19493],"fullWord":19161},{"subwords":[12979,13008,13041,13051,13059,13066,13080,15312,15610,15691,15694,15706,15722,15723,15748,15777,15858,18981,19093,19101,19117,19118,19131,19134,19138,19155,19160,19162,19331,19337,19356,19493,19496,19895,19900],"fullWord":19162},{"subwords":[10443,10460,10470,10897,10929,11050,12845,13059,13085,18981,19017,19164,19605],"fullWord":19164},{"subwords":[269,299,1009,1145,5620,5718,6055,7416,7417,7540,7768,7874,12686,13110,18342,18432,18521,18541,18981,18993,18994,18995,19166,19167,19548,20326,20327,20594,20875],"fullWord":19167},{"subwords":[183,911,4537,4574,5234,5327,5330,12680,12686,13008,14736,14898,14933,15561,15600,15691,15734,18339,18432,18449,18451,18463,18521,18970,19093,19094,19166,19168,19310,19343,19548,20303,20410,20412,20444,20868,20929,20953],"fullWord":19168},{"subwords":[10443,10447,10459,10460,10465,10888,10896,10897,10901,10942,10948,10952,12845,12848,13110,13112,13114,13115,13116,13118,16457,16475,17059,17097,17113,17121,17354,17359,17435,17464,17850,17903,17941,18981,18985,19017,19166,19170,19171,19181,19548,19550,20575,20578,20591,20594,20596,20875,20877,20958],"fullWord":19171},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13110,13112,15302,15306,15312,15610,15611,15676,15691,15694,15695,15700,15734,15744,15748,16445,16457,16475,17419,17429,17435,17464,17466,17850,17924,17941,17964,18272,18981,18985,19093,19101,19103,19113,19166,19172,19173,19181,19256,19343,19346,19548,19550,20588,20591,20594,20596,20875,20877,20933,20947,20951,20953,20957,20958,20987,21008],"fullWord":19173},{"subwords":[12979,13008,13110,13145,15312,15610,15691,15694,15734,15748,15866,18981,19093,19101,19122,19166,19172,19174,19186,19187,19257,19343,19347,19377,19548,19570,19573,20588,20594,20875,20933,20953,21008,21010,21016,21135,21138,21189,21202],"fullWord":19174},{"subwords":[6118,8483,8588,8725,8892,8920,8923,13110,18576,18697,18698,18721,18743,18981,19166,19175,19548,20532,20594,20623,20642,20689,20875],"fullWord":19175},{"subwords":[9447,13110,13112,16457,16475,16907,16911,17435,17464,17850,17941,18844,18850,18947,18981,18985,19166,19176,19181,19548,19550,20591,20594,20596,20826,20842,20853,20875,20877,20958],"fullWord":19176},{"subwords":[7604,7637,7874,7892,9267,9325,9335,9360,12463,12509,12574,12606,13113,13119,18894,18901,18993,19036,19043,19166,19177,19178,19525,19530,19548,20742,20774,20790,20804,20842,20897,20899],"fullWord":19177},{"subwords":[5909,5953,9325,9335,9360,12374,12390,12399,12463,12574,12581,12606,12876,13110,13119,18607,18844,18894,18898,18981,19036,19038,19166,19178,19179,19530,19531,19548,20579,20585,20594,20774,20785,20804,20842,20875,20897,20899],"fullWord":19179},{"subwords":[6651,6661,7017,7021,12785,13143,19183,19186],"fullWord":19183},{"subwords":[9307,9318,9325,9335,9360,9366,9447,12463,12471,12474,12560,12574,12591,16858,16907,16922,17255,17278,17383,17435,17471,18894,18919,18947,19036,19057,19184,19185],"fullWord":19185},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13145,13146,13147,13149,15306,15312,15610,15611,15676,15690,15691,15694,15695,15700,15748,15866,15867,16457,17419,17429,17435,17472,17924,17927,17933,18018,18019,18981,18985,19093,19101,19103,19113,19122,19186,19187,19188,19195,19257,19258,19347,19348,19377,19570,19572,19573,19574,21130,21135,21189,21190,21212],"fullWord":19188},{"subwords":[7604,7637,7874,7895,9267,9325,9335,9360,12463,12509,12574,18894,18901,18925,18993,19036,19043,19059,19186,19189,19552,21144,21167,21168,21183,21186],"fullWord":19189},{"subwords":[8678,8685,8688,8691,8739,8741,8887,8892,8901,8935,9447,12810,16653,16704,16758,16907,17435,17472,18018,18742,18743,18806,18947,19123,19186,19190,19195],"fullWord":19190},{"subwords":[12560,12573,12574,12591,12887,17267,17269,17278,17383,17397,17399,17405,17435,17472,17914,18018,19036,19057,19059,19060,19186,19191,19192,19193,19195,21183],"fullWord":19192},{"subwords":[1047,12686,13043,18432,18495,18501,19060,19066,19131,19143,19186,19194,19389],"fullWord":19194},{"subwords":[93,94,121,122,126,127,796,800,817,911,1009,2766,2772,2780,2941,2949,2954,2955,2962,3003,3004,3005,3052,3055,3111,3161,4085,4086,4431,4516,4537,4551,4553,4607,4639,4810,4812,5327,5588,5620,5976,5982,6055,6057,14717,14718,14736,14898,14901,14902,14959,14961,15021,15028,15049,15060,15061,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19197,19198,19205,19233],"fullWord":19198},{"subwords":[93,121,126,796,817,911,1009,2941,2954,2958,2962,3003,3004,3007,3052,3055,3161,4085,4087,5588,5620,5976,5982,6008,6055,6057,14717,14720,14872,14898,14901,14903,14959,14983,15021,15049,15312,15748,18449,18453,18541,18554,18652,18653,19197,19199],"fullWord":19199},{"subwords":[93,96,121,123,126,134,796,810,817,825,905,906,911,918,993,1009,2941,2954,2960,2962,2963,3001,3003,3004,3008,3011,3021,3041,3042,3044,3052,3055,3056,3057,3064,3161,4085,4088,4142,4238,4241,5588,5599,5616,5620,5626,5976,5977,5982,6018,6023,6055,6057,14717,14722,14881,14898,14901,14905,14912,14959,14960,15021,15027,15048,15049,15306,15312,15748,15880,16041,16043,16142,16145,16157,16270,16286,16293,16298,16304,16419,16457,17773,17775,18449,18453,18455,18472,18541,18554,18557,18559,19197,19200,19381],"fullWord":19200},{"subwords":[126,134,796,810,867,868,905,911,918,950,2941,3001,3003,3011,3033,3041,3052,3064,4238,4241,9789,9791,9792,14729,14733,14898,14912,15880,15884,16041,16142,16157,17727,17773,17779,18326,18331,18449,18472,18484,19201,19202,19381],"fullWord":19202},{"subwords":[126,134,796,810,905,911,918,2941,3001,3003,3011,3041,3052,3064,4238,4241,14898,14912,15880,16041,16142,16157,17773,17782,17788,18336,18338,18449,18472,18476,18482,18495,18503,19203,19204,19381],"fullWord":19204},{"subwords":[148,151,817,911,1009,4438,4516,4517,4537,4538,4551,4552,4553,4590,4607,4810,4812,5327,5340,5588,5620,5659,5976,5982,6055,14736,14898,14901,14902,14961,14962,15060,15312,15318,15748,18339,18449,18450,18453,18454,18541,18554,19205,19206,19233],"fullWord":19206},{"subwords":[817,911,1009,4516,4518,4537,4539,4551,4553,4607,4810,4812,5327,5346,5588,5620,5976,5982,6008,6055,14736,14872,14898,14901,14902,14903,14961,14983,15060,15312,15316,15318,15748,18339,18449,18450,18453,18454,18470,18541,18554,18652,18653,19205,19207,19233],"fullWord":19207},{"subwords":[200,817,825,905,906,911,918,993,1009,4516,4520,4537,4540,4551,4553,4554,4555,4607,4611,4810,4812,4813,4826,5327,5328,5360,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14736,14751,14881,14882,14898,14901,14902,14905,14912,14961,14965,15060,15087,15306,15312,15318,15748,15893,16041,16043,16044,16270,16286,16293,16419,16457,17773,17775,17776,17806,18339,18340,18449,18450,18453,18454,18455,18472,18541,18554,18557,18559,18575,19205,19208,19233,19234,19381],"fullWord":19208},{"subwords":[126,314,349,796,911,2941,3003,3052,3402,3408,3429,4062,4239,7289,7375,7416,7628,7637,8035,9376,14758,14898,15461,18342,18347,18449,18823,19209,19280],"fullWord":19209},{"subwords":[337,340,349,359,434,488,860,905,911,918,997,9376,9409,9437,9447,10121,10125,10126,10241,10502,10503,10675,10676,10686,10691,10707,14780,14783,14898,14912,15399,15400,15931,15942,15960,16028,16041,16840,16889,16907,16908,17022,17093,17722,17744,17773,17881,17967,18347,18349,18353,18449,18472,18474,18863,18947,19210,19211,19262,19263,19381],"fullWord":19211},{"subwords":[349,359,647,691,693,700,704,711,905,911,918,997,9307,9318,9322,9325,9338,9339,9376,9378,9409,9447,12276,12463,12471,14784,14786,14821,14838,14839,14847,14850,14898,14912,15936,15986,16028,16041,16047,16858,16889,16907,16908,17255,17722,17742,17744,17773,17881,17945,17967,18347,18408,18428,18449,18460,18462,18472,18474,18894,18919,18947,19212,19213,19381],"fullWord":19213},{"subwords":[349,359,905,911,917,918,997,9376,9409,9447,14898,14912,16028,16041,16889,16907,16908,17722,17744,17773,17782,17788,17881,17946,17967,18347,18449,18472,18474,18476,18482,18495,18503,18947,18950,18964,19214,19215,19381],"fullWord":19215},{"subwords":[574,579,781,869,883,905,911,918,961,11270,11275,11276,11314,11320,11325,11330,11356,11361,11376,13286,13321,13328,13333,13336,13352,13364,13385,14240,14241,14247,14252,14403,14427,14808,14816,14818,14820,14851,14866,14867,14891,14898,14912,15747,15973,16014,16041,17157,17476,17494,17510,17652,17761,17773,17948,18389,18402,18406,18407,18436,18448,18449,18467,18469,18472,19216,19217,19218,19219,19221,19222,19381,19386],"fullWord":19218},{"subwords":[93,114,121,126,693,694,709,796,817,911,1009,2869,2883,2885,2908,2910,2941,2954,2962,2977,3003,3004,3052,3055,3145,3148,3161,4069,4085,5588,5595,5620,5849,5856,5976,5982,6055,6057,6074,12224,12229,12270,12319,12325,12338,12374,14717,14821,14847,14898,14901,14959,15021,15024,15049,15241,15312,15748,18408,18449,18453,18460,18541,18554,18607,18649,19197,19220],"fullWord":19220},{"subwords":[325,905,911,918,919,932,944,8360,8361,8362,8371,8377,8378,8391,8420,8428,8934,8935,14775,14886,14898,14912,14939,14944,15398,15864,15865,16041,16056,16103,16559,16572,16758,17773,17802,17956,18018,18449,18472,18806,19224,19225,19231,19232,19377,19381,21212],"fullWord":19225},{"subwords":[504,586,869,911,920,1014,1078,11276,11320,11361,11392,14808,14898,14899,15806,15858,18389,18449,18508,19216,19226],"fullWord":19226},{"subwords":[399,405,488,491,817,911,1009,1106,1109,1112,5588,5592,5620,5976,5982,6055,10247,10254,10285,10287,10324,10355,10460,10471,10472,14898,14901,14921,14923,14968,15312,15337,15748,18370,18372,18449,18453,18541,18547,18554,19227,19228,19923,19924,19926,19965,19975,19986,20014,20015,20080,20095],"fullWord":19228},{"subwords":[488,905,911,918,1155,1157,10241,10292,10299,14898,14912,14933,14938,15942,15960,16041,16089,17022,17037,17773,17953,18207,18211,18449,18472,18521,18527,19229,19230,19381,19508,20389,20410,20442,20444,20446,20449,20457,20467],"fullWord":19230},{"subwords":[200,817,825,905,906,911,918,993,1009,4516,4520,4537,4540,4551,4553,4554,4555,4607,4611,4810,4812,4813,4826,5327,5328,5360,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14736,14751,14881,14882,14898,14901,14902,14905,14912,14961,14965,15060,15087,15306,15312,15318,15748,15893,16041,16043,16044,16270,16286,16293,16419,16457,17773,17775,17776,17806,18339,18340,18449,18450,18453,18454,18455,18472,18541,18554,18557,18559,18575,19205,19208,19233,19234,19381],"fullWord":19234},{"subwords":[817,825,905,906,911,918,993,1009,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,15306,15312,15748,16041,16043,16270,16286,16293,16419,16457,17773,17775,17782,17788,17790,17792,17846,17951,18449,18453,18455,18472,18476,18482,18490,18492,18495,18498,18499,18500,18503,18541,18554,18557,18559,18565,18567,18662,18672,18674,19235,19236,19255,19381],"fullWord":19236},{"subwords":[227,817,911,919,1009,1047,1196,5588,5620,5976,5982,6055,14898,14901,14919,14939,15312,15748,15864,15866,18449,18453,18476,18495,18498,18499,18541,18554,18558,18565,18672,19231,19235,19237,19257,19377,19389,19570,21071,21097,21099,21135],"fullWord":19237},{"subwords":[1576,1587,1591,1636,1661,1694,1721,1725,1726,5691,5984,10383,10388,10460,14995,15003,15107,15186,15312,15748,18576,19238,19240],"fullWord":19238},{"subwords":[1636,1661,1706,1721,1749,2721,2730,2734,10460,10495,11065,11074,14995,15201,15312,15748,15866,19239,19257,19377,19555,19570,21135],"fullWord":19239},{"subwords":[6008,11539,11574,11592,11970,11989,12010,12011,12979,13008,15202,15312,15330,15610,15627,15632,15691,15694,15748,18595,18644,18652,18981,19026,19032,19093,19101,19246],"fullWord":19246},{"subwords":[3145,3161,3260,5856,6057,6058,8540,8552,12374,12612,15021,15241,15312,15317,15748,18570,18607,18609,18649,18697,18708,19247],"fullWord":19247},{"subwords":[4774,4785,4788,4792,4810,4826,5360,5865,5875,5918,6000,6018,12358,12359,12362,12368,12374,12376,15060,15087,15227,15230,15241,15245,15306,15312,15318,15748,16381,16399,16457,17843,18575,18607,18610,18614,18624,18649,18651,19248,19249],"fullWord":19249},{"subwords":[4774,4788,4795,4810,5430,5567,5570,5579,5865,5937,12358,12374,15060,15227,15241,15312,15318,15748,15866,18607,18610,18649,19248,19250,19257,19377,19570,19571,21120,21135],"fullWord":19250},{"subwords":[693,694,709,732,735,781,782,817,911,1009,5588,5595,5620,5911,5934,5956,5976,5982,6055,6074,12229,12257,12259,12317,12319,12325,12374,13239,13245,13261,13286,13294,13296,13328,13329,13364,13367,13369,13372,13439,13453,13455,13460,13464,13539,13560,13577,13599,13613,14247,14248,14262,14821,14847,14851,14852,14867,14898,14901,14979,15241,15248,15312,15748,18408,18436,18437,18439,18449,18453,18460,18467,18541,18554,18607,18649,19221,19251],"fullWord":19251},{"subwords":[4714,4805,4810,4935,4942,5014,5022,5023,5034,5377,5380,5680,9384,9385,13478,13577,13599,13613,13623,13705,13710,13712,13850,14262,14303,14306,15060,15076,15248,15312,15318,15428,15433,15508,15509,15542,15748,18641,18835,18844,18845,18847,18926,18941,18942,19252,19274,19295,19296],"fullWord":19252},{"subwords":[6018,6039,15306,15309,15312,15748,15866,15867,16457,16464,18018,18019,18021,19253,19254,19257,19258,19377,19570,19572,21130,21135,21212],"fullWord":19254},{"subwords":[169,170,200,326,336,349,359,854,905,911,918,997,4461,4537,4540,4901,5034,5035,5037,5060,5327,5328,9127,9376,9409,9447,14736,14751,14776,14779,14898,14912,15428,15443,15893,15928,16028,16041,16889,16907,16908,17722,17741,17744,17773,17881,17967,18339,18340,18347,18449,18472,18474,18947,19259,19260,19381],"fullWord":19260},{"subwords":[269,349,817,911,1009,5588,5620,5976,5982,5988,6055,7289,7291,7375,7416,7417,7461,7540,7628,7637,7946,7972,7990,8035,9376,9382,9384,14758,14762,14898,14901,15141,15150,15312,15461,15542,15748,18342,18347,18449,18453,18541,18554,18844,18847,18855,18941,19261,19280],"fullWord":19261},{"subwords":[337,340,349,359,434,488,860,905,911,918,997,9376,9409,9437,9447,10121,10125,10126,10241,10502,10503,10675,10676,10686,10691,10707,14780,14783,14898,14912,15399,15400,15931,15942,15960,16028,16041,16840,16889,16907,16908,17022,17093,17722,17744,17773,17881,17967,18347,18349,18353,18449,18472,18474,18863,18947,19210,19211,19262,19263,19381],"fullWord":19263},{"subwords":[72,337,349,385,434,488,911,1272,1282,1307,1366,1462,1881,1922,2308,2326,2349,2444,9376,9437,10061,10121,10126,10502,10504,10512,10675,10691,14780,14898,15399,15402,18302,18347,18349,18449,18863,19210,19262,19264],"fullWord":19264},{"subwords":[1716,1718,1721,1736,1790,1791,1881,1884,1885,1886,1887,1889,2417,2423,2444,6018,9384,9389,9409,9447,14995,15014,15306,15312,15402,15410,15526,15542,15543,15748,16423,16457,16765,16889,16890,16907,16911,17722,17881,18540,18817,18844,18847,18849,18850,18941,18943,18947,19265,19266,19277],"fullWord":19266},{"subwords":[3161,3406,3429,3430,3431,3432,4117,4155,4639,4714,4810,4909,4911,4925,4935,4942,5023,5024,5034,5677,5680,6057,9079,9082,9384,9385,15021,15028,15051,15060,15312,15318,15411,15412,15428,15433,15542,15748,18823,18835,18844,18845,18847,18941,18942,19267,19268,19274],"fullWord":19268},{"subwords":[3161,3429,3430,3432,3433,3434,4142,4158,4238,4241,6018,6023,6057,9079,9085,9384,9389,9409,9447,15021,15048,15051,15306,15312,15411,15415,15526,15542,15543,15748,16178,16298,16304,16457,16769,16889,16890,16907,16911,17722,17881,18823,18830,18844,18847,18849,18850,18941,18943,18947,19267,19269,19277],"fullWord":19269},{"subwords":[3429,4238,4241,9396,9399,9409,9447,9945,9946,9955,10041,15422,15425,15534,16178,16769,16772,16889,16907,16954,16983,16986,17722,17853,17881,18823,18824,18829,18830,18947,19270,19271],"fullWord":19271},{"subwords":[3429,3440,4232,9096,9101,9396,9946,15422,18823,18824,19270,19272,19377],"fullWord":19272},{"subwords":[3429,3693,3965,12965,13008,13038,15504,15592,15691,18823,18945,18950,19093,19098,19117,19131,19273,19292,19331],"fullWord":19273},{"subwords":[6008,6016,6018,9384,9389,9409,9447,15306,15312,15526,15528,15542,15543,15748,16457,16889,16890,16907,16911,17722,17881,18652,18844,18847,18849,18850,18941,18943,18947,19275,19276,19277],"fullWord":19276},{"subwords":[5034,5369,6621,6651,15428,15458,19278],"fullWord":19278},{"subwords":[5705,5765,6443,6543,6568,6570,6573,6589,6621,6622,6651,6765,6779,6782,6784,7073,9384,10394,10414,10460,10536,10539,10549,10554,10555,10557,10559,10677,10691,10694,10695,10705,15114,15124,15135,15197,15312,15444,15446,15454,15458,15473,15542,15748,18844,18847,18863,18866,18868,18941,19243,19279],"fullWord":19279},{"subwords":[7604,7628,7637,7874,8015,8020,8035,8045,8056,9267,9325,9335,9338,9340,9360,9400,12463,12469,12509,12513,12548,12574,12995,13008,15461,15494,15504,15691,18894,18901,18945,18993,19036,19043,19093,19105,19280,19281,19292],"fullWord":19281},{"subwords":[9384,9557,9600,15312,15542,15748,18844,18847,18941,18950,18953,18963,19282,19303],"fullWord":19282},{"subwords":[9152,9155,9409,9447,10580,10582,10686,10691,10707,15477,15479,16834,16840,16889,16907,17093,17722,17864,17881,18863,18872,18875,18947,19283,19284],"fullWord":19284},{"subwords":[10584,10618,10691,11659,11686,11755,15480,15490,18863,18882,19285,19286,19377],"fullWord":19286},{"subwords":[337,349,434,488,693,700,911,9325,9334,9338,9339,9376,9378,9437,10120,10121,10126,10263,10502,10656,10675,10691,12238,12292,12438,12463,14780,14784,14821,14838,14847,14898,15399,18347,18349,18408,18449,18460,18863,18894,19210,19212,19262,19288],"fullWord":19288},{"subwords":[4714,4774,4788,4810,4935,4942,4985,4988,4990,5008,5023,5034,5680,5865,5996,9245,9325,9331,9338,9384,9385,12358,12374,12463,12464,12466,15060,15175,15227,15241,15312,15318,15428,15433,15491,15542,15748,18607,18610,18649,18835,18844,18845,18847,18894,18897,18898,18899,18941,18942,19248,19274,19289,19290],"fullWord":19290},{"subwords":[5918,5996,6000,6018,6052,9245,9246,9307,9311,9312,9318,9322,9325,9331,9333,9338,9384,9389,9409,9447,12362,12368,12374,12376,12463,12464,12465,12466,12467,12471,15175,15177,15241,15245,15296,15306,15312,15500,15526,15527,15542,15543,15748,16399,16400,16439,16457,16858,16860,16882,16889,16890,16893,16907,16911,17255,17722,17826,17843,17881,18607,18624,18649,18651,18844,18847,18849,18850,18894,18898,18900,18919,18941,18943,18947,19277,19289,19291],"fullWord":19291},{"subwords":[4714,4810,4935,4942,5023,5034,5114,5115,5234,5237,5239,5243,5387,5680,5683,9110,9384,9385,12752,12979,13008,15060,15078,15312,15318,15428,15433,15504,15505,15542,15600,15603,15610,15691,15694,15748,18835,18844,18845,18847,18941,18942,18945,18981,18983,19093,19101,19274,19292,19293,19310,19311],"fullWord":19293},{"subwords":[6018,6033,6037,9384,9389,9409,9447,13577,13588,13599,13609,13613,13623,13626,13705,13712,13715,13716,13850,13866,14262,14281,14284,14309,14310,14336,14403,14421,14427,15248,15272,15305,15306,15312,15508,15509,15514,15515,15524,15526,15542,15543,15748,16409,16457,16883,16889,16890,16907,16911,17565,17591,17598,17600,17665,17666,17722,17836,17881,17961,17974,17975,18844,18847,18849,18850,18926,18936,18941,18943,18947,19277,19295,19296,19297,19301,19386],"fullWord":19297},{"subwords":[9384,10414,10460,10536,10549,10665,10677,10691,10694,10695,10705,13532,13577,13585,13599,13613,13623,13705,13712,13743,13850,13959,14262,15197,15248,15312,15444,15473,15508,15509,15542,15748,18844,18847,18863,18866,18868,18926,18941,19295,19296,19298],"fullWord":19298},{"subwords":[10665,10691,13850,13870,14009,14410,15508,18863,18926,19295,19299,19377,21146],"fullWord":19299},{"subwords":[5014,5022,5034,5215,5234,5377,5380,5387,5402,5405,12937,13008,13850,14020,14032,14160,14188,14350,14357,15428,15504,15508,15600,15691,18926,18945,19075,19093,19109,19292,19295,19300,19310,19323],"fullWord":19300},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16889,16890,16907,16911,16916,17722,17846,17881,18662,18844,18847,18849,18850,18941,18943,18947,18950,18953,18954,18963,18964,19255,19277,19302,19303],"fullWord":19302},{"subwords":[6008,9384,15312,15542,15748,18652,18844,18847,18941,18950,18953,18963,19275,19303,19304],"fullWord":19304},{"subwords":[9325,9335,9338,9340,9360,9400,12463,12469,12513,12548,12574,13008,15504,15691,18894,18921,18945,18950,18969,19036,19093,19105,19117,19131,19292,19305,19331],"fullWord":19305},{"subwords":[5996,9245,9325,9331,9338,9344,9384,12374,12463,12464,12466,12659,15175,15241,15312,15542,15748,15777,15795,15821,15822,15833,15858,18607,18649,18844,18847,18894,18898,18941,19289,19306,19356,19434,19438,19440,19476,19701,19702,19704,19776,19864,19866,19894],"fullWord":19306},{"subwords":[9384,15312,15337,15542,15549,15555,15748,18844,18847,18941,18950,18953,18963,19303,19307,20080,20095,20129,20132],"fullWord":19307},{"subwords":[349,911,9376,14898,18347,18449,19308,19975,20107,20210],"fullWord":19308},{"subwords":[3161,3260,3361,3898,3965,3968,5641,6057,6058,8478,8552,8575,8714,8725,8728,8857,8892,12724,12727,12965,12968,12979,13008,13009,13036,15021,15052,15312,15317,15386,15592,15610,15691,15694,15748,18570,18697,18743,18749,18777,18781,18981,19093,19098,19099,19101,19309],"fullWord":19309},{"subwords":[349,867,911,9367,9376,9396,9791,9946,10033,12675,12680,12686,12835,13008,14898,14909,15504,15691,18347,18432,18449,18463,18945,19093,19094,19292,19312],"fullWord":19312},{"subwords":[693,911,9508,9515,9657,9658,12293,12548,12574,12575,12680,12686,13008,14821,14847,14898,15568,15691,18408,18432,18449,18460,18463,19036,19093,19094,19105,19314],"fullWord":19314},{"subwords":[10896,10897,10901,13007,13008,13011,15623,15626,15691,15700,17113,17354,17429,17435,17983,19019,19022,19093,19113,19315,19316],"fullWord":19316},{"subwords":[10887,10897,13008,15623,15691,19019,19093,19122,19186,19315,19317,19347,19377,19573],"fullWord":19317},{"subwords":[5844,11539,11574,11592,11947,11948,11951,11970,11989,12010,12011,12916,12937,12979,13008,13577,13593,13599,13613,13624,14024,14027,14093,14147,14160,14188,14262,14350,14359,14369,15202,15248,15312,15610,15627,15632,15634,15663,15691,15694,15747,15748,18595,18596,18601,18644,18981,19026,19032,19075,19076,19079,19093,19101,19318,19319,19323,19324],"fullWord":19319},{"subwords":[11947,11961,11989,12007,12010,12030,12872,12936,12937,12944,13007,13008,13011,14160,14165,14182,14188,14201,14350,14369,14371,14383,14403,14427,15627,15634,15637,15638,15691,15700,15747,17406,17429,17435,17641,17644,17907,17921,17930,17985,19026,19034,19075,19090,19093,19113,19318,19320,19323,19386],"fullWord":19320},{"subwords":[12905,12936,12937,12944,13007,13008,13011,14127,14160,14165,14182,14188,14201,14350,14383,14403,14427,15657,15659,15662,15691,15697,15700,17399,17406,17410,17429,17435,17636,17641,17644,17919,17921,17985,19060,19075,19086,19090,19093,19106,19108,19113,19115,19321,19322,19323,19386],"fullWord":19322},{"subwords":[6004,6018,6033,6049,12916,12925,12936,12937,12944,12979,12982,13007,13008,13011,13577,13599,13607,13609,13613,13624,13626,14027,14030,14147,14149,14160,14165,14166,14168,14182,14185,14188,14201,14262,14281,14284,14285,14350,14383,14384,14403,14427,15248,15272,15305,15306,15312,15610,15611,15663,15668,15676,15691,15694,15695,15700,15748,16409,16457,17406,17419,17429,17435,17638,17641,17644,17836,17921,17924,17961,17985,18981,18985,19075,19076,19079,19080,19081,19090,19093,19101,19103,19113,19323,19324,19325,19386],"fullWord":19325},{"subwords":[8845,8857,8892,9058,12937,13008,13009,14160,14188,14350,14410,15386,15672,15691,18743,18749,18755,18777,18806,19075,19093,19122,19186,19323,19326,19347,19377,19567,19573],"fullWord":19326},{"subwords":[349,761,781,911,1028,1032,9367,9376,12680,12686,12937,13008,13200,13286,13328,13331,13364,13379,13850,13851,14032,14160,14188,14247,14350,14851,14867,14898,14909,15504,15508,15691,18347,18432,18436,18443,18449,18463,18467,18926,18945,19075,19093,19094,19221,19292,19295,19323,19327],"fullWord":19327},{"subwords":[3429,3693,3864,3923,3965,4046,4188,12937,12939,12965,13008,13038,13438,13700,13850,14032,14160,14188,14350,14356,14957,15504,15508,15592,15691,18823,18926,18945,19075,19083,19093,19098,19292,19295,19323,19328],"fullWord":19328},{"subwords":[9325,9335,9338,9340,9360,9400,12453,12463,12469,12513,12548,12574,12937,13008,13765,13799,13802,13809,13850,13864,14032,14035,14154,14160,14188,14331,14350,14372,15504,15508,15691,18894,18926,18945,19036,19075,19093,19105,19292,19295,19323,19329],"fullWord":19329},{"subwords":[12933,12937,13008,14124,14127,14130,14160,14188,14350,14379,15659,15691,15697,19060,19075,19093,19106,19321,19323,19330],"fullWord":19330},{"subwords":[8857,8874,8879,8887,8892,8901,8934,8935,12810,13007,13008,13009,13011,15386,15691,15700,16701,16704,17429,17435,18743,18749,18777,19093,19113,19117,19120,19123,19130,19131,19144,19331,19332,19333,19334],"fullWord":19333},{"subwords":[7874,7875,7886,8056,8064,8175,8731,8857,8892,8906,8951,9012,9026,13008,13009,13046,13051,13059,15386,15691,15712,15722,15790,15858,15859,18743,18749,18759,18777,18789,18796,18993,19093,19151,19155,19335,19418,19583],"fullWord":19335},{"subwords":[6021,12916,12937,12979,13008,13051,13059,13066,13080,13577,13599,13602,13613,13624,14027,14147,14160,14188,14220,14224,14226,14262,14350,14443,14518,14561,15248,15312,15610,15663,15691,15694,15706,15722,15723,15748,15777,15858,18981,19075,19076,19079,19093,19101,19155,19323,19324,19336,19356,19453,19895],"fullWord":19336},{"subwords":[13007,13008,13011,13051,13052,13055,13059,13082,15691,15700,15720,15722,15727,15852,15858,15861,17429,17435,17451,17936,17992,19093,19113,19117,19120,19121,19130,19131,19144,19155,19158,19160,19163,19331,19334,19337,19338,19372,19493,19496,19497,19498],"fullWord":19338},{"subwords":[13008,13051,13059,15691,15722,15858,15863,19093,19117,19122,19131,19155,19160,19186,19331,19337,19339,19347,19377,19379,19389,19493,19496,19573,21193,21196,21226],"fullWord":19339},{"subwords":[6008,12979,13008,13095,13100,15312,15330,15337,15610,15691,15694,15728,15730,15748,18652,18981,19093,19101,19165,19340,19341,20080,20095,20097,20265,20267],"fullWord":19341},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13095,13099,13100,15306,15312,15337,15354,15610,15611,15676,15691,15694,15695,15700,15728,15732,15748,16453,16457,17419,17429,17435,17924,17938,17939,17987,18981,18985,19093,19101,19103,19113,19165,19340,19342,20070,20077,20080,20088,20095,20097,20101,20265,20267,20268,20269],"fullWord":19342},{"subwords":[4810,4865,5114,5115,5234,5237,5239,5273,5361,12752,12979,13008,13110,13111,15060,15078,15312,15318,15600,15603,15610,15691,15694,15734,15738,15748,18981,18983,19093,19101,19166,19169,19172,19310,19311,19343,19344,19548,20524,20588,20594,20875,20929,20933,20953,21008],"fullWord":19344},{"subwords":[10443,10460,10882,10897,10942,10945,12845,12979,13008,13110,13114,13115,15312,15610,15621,15691,15694,15734,15739,15748,18981,19017,19093,19101,19166,19170,19172,19343,19345,19548,20575,20588,20594,20875,20933,20953,21008],"fullWord":19345},{"subwords":[693,911,1044,1074,12300,12659,14821,14847,14898,15821,15833,15858,18408,18449,18460,18476,18495,18508,18510,18515,18969,19349,19434,19435,19476,19493,19866],"fullWord":19349},{"subwords":[3161,4207,4209,4214,4263,4268,4269,4312,4321,4326,4327,4357,4375,4376,4378,4639,4810,5455,5462,5471,5479,5654,5688,6019,6057,15021,15028,15059,15060,15312,15318,15748,15773,15777,15778,15858,19350,19351,19356,19357,19465],"fullWord":19351},{"subwords":[3161,4142,4214,4215,4224,4226,4238,4241,4268,4271,4312,4326,4330,4331,4350,4351,4356,4357,4375,4376,4378,4379,4394,5654,5655,5656,6018,6019,6020,6023,6057,15021,15048,15059,15306,15312,15748,15777,15782,15840,15852,15858,15861,16265,16267,16298,16304,16457,18056,18066,18071,18074,18150,19350,19352,19356,19359,19876,19880],"fullWord":19352},{"subwords":[4226,4238,4241,4312,4350,4356,4357,4375,4394,15766,15768,15848,15852,15858,15861,16265,17988,17998,18051,19353,19354,19405,19409,19473,19475,19489],"fullWord":19354},{"subwords":[4810,5351,5420,5471,5479,5485,5988,7540,8175,15060,15141,15312,15318,15748,15773,15777,15778,15790,15858,19355,19356,19357,19418,19465,19855,19856],"fullWord":19355},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15852,15858,15861,16457,17846,17992,18066,18071,18074,18150,18662,19255,19356,19359,19360,19372,19493,19498,19876,19880,19900,19901],"fullWord":19360},{"subwords":[7604,7628,7637,7759,8015,8035,8092,8151,8175,9325,9338,12463,12659,15461,15494,15790,15795,15798,15821,15824,15833,15858,18894,18901,19280,19361,19418,19434,19476,19701,19748,19866],"fullWord":19361},{"subwords":[9409,9422,9447,11780,12177,15480,15489,15806,15820,15852,15858,15861,16889,16907,16917,17179,17203,17722,17881,17989,18083,18085,18103,18882,18947,19285,19287,19362],"fullWord":19362},{"subwords":[11044,15852,15858,15861,17141,17147,19363,19364,19605],"fullWord":19364},{"subwords":[586,693,710,869,911,920,1074,11213,11276,11320,11361,11392,12244,12300,12659,14808,14821,14847,14898,15806,15821,15833,15858,18389,18408,18449,18460,18508,19216,19366,19434,19435,19476,19632,19866],"fullWord":19366},{"subwords":[12177,14403,14427,14551,14561,14567,15747,15806,15815,15818,15820,15852,15858,15861,17203,17687,17693,17989,18002,18103,18114,18135,18148,19367,19368,19386,19433,19453,19456,19482,19624,19628,19825],"fullWord":19368},{"subwords":[12659,12663,15821,15832,15833,15834,15848,15852,15858,15861,18005,18007,18117,18126,19369,19370,19434,19452,19473,19475,19476,19480,19489,19866,19867],"fullWord":19370},{"subwords":[15852,15856,15858,15861,17992,17993,19371,19372,19373,19493,19498,19886],"fullWord":19373},{"subwords":[15852,15857,15858,15861,15863,17992,18018,19372,19374,19377,19380,19389,19493,19498,21212,21226,21227],"fullWord":19374},{"subwords":[8934,8935,9012,9015,9026,9027,15842,15852,15858,15859,15860,15861,16753,17992,18789,18793,18802,19372,19375,19376,19486,19493,19498,19592],"fullWord":19376},{"subwords":[7604,7628,7637,8015,8035,9325,9338,12463,15461,15494,18894,18901,18925,19280,19377,19378,19552,21144],"fullWord":19378},{"subwords":[13008,13051,13059,15691,15722,15858,15863,19093,19117,19122,19131,19155,19160,19186,19331,19337,19339,19347,19377,19379,19389,19493,19496,19573,21193,21196,21226],"fullWord":19379},{"subwords":[6031,6039,6042,16319,16342,16456,16457,16464,17846,17847,18576,18588,18662,18666,18668,19383],"fullWord":19383},{"subwords":[7604,7608,7611,7635,7637,9276,9284,9307,9318,9325,9447,9913,9922,9925,9929,9945,9946,9955,9985,9986,12463,12471,16815,16858,16866,16876,16907,16954,16974,16986,17255,17870,17874,18894,18901,18907,18919,18947,19385],"fullWord":19385},{"subwords":[9409,9447,15540,15852,15856,15858,15861,16889,16899,16903,16907,16915,16917,16920,17722,17881,17882,18083,18085,18090,18947,19371,19388,19886],"fullWord":19388},{"subwords":[1560,1721,2505,2517,2697,4618,4630,4637,5445,5471,5479,5632,19390,19394,19397,19398],"fullWord":19394},{"subwords":[1721,2498,2500,2505,2610,2697,5632,14995,15019,15312,15748,15749,15755,15777,15858,19356,19390,19395,19397,19399,19840],"fullWord":19395},{"subwords":[1716,1721,1736,2498,2500,2502,2610,2656,2662,2664,2668,2690,2692,2697,2700,6018,14995,15014,15018,15019,15020,15306,15312,15748,15749,15755,15757,15764,15777,15782,15840,15852,15858,15861,16423,16457,17994,18035,18066,18071,18074,18150,18540,19356,19359,19390,19397,19399,19400,19401,19403,19840,19844,19876,19880],"fullWord":19400},{"subwords":[1797,1837,1881,2537,2577,2585,2602,2697,7604,7637,7759,8151,8175,9325,12406,12463,12614,12659,18894,18901,19390,19402,19418,19434,19701],"fullWord":19402},{"subwords":[1636,1661,1721,2004,2011,2697,10460,10470,10961,11050,19390,19397,19404,19605],"fullWord":19404},{"subwords":[4263,4268,4269,4278,4375,4376,4639,4651,5455,5457,5462,5471,5479,5489,5688,6057,19405,19406,19595],"fullWord":19406},{"subwords":[3161,4214,4268,4278,4312,4326,4357,4375,4376,4378,5654,6019,6057,15021,15059,15312,15748,15766,15777,15858,19244,19350,19353,19356,19405,19407,19473,19595],"fullWord":19407},{"subwords":[4268,4278,4375,4376,6057,19405,19408,19493,19595],"fullWord":19408},{"subwords":[3777,3814,3816,3821,3958,3965,3971,3981,3982,4238,4241,4300,4301,4375,4394,12560,12574,12591,12597,12659,12663,12888,13055,13059,13082,16205,16212,16265,17278,17281,17316,17383,17435,18005,18117,19036,19057,19410,19434,19452,19655,19659,19780],"fullWord":19410},{"subwords":[4701,5471,5479,5705,6406,6501,19415,19416,19493],"fullWord":19416},{"subwords":[5705,7073,7194,15114,15135,15312,15748,15777,15858,19243,19356,19415,19417,19468,19493,19900],"fullWord":19417},{"subwords":[5471,5479,5485,5709,7540,8175,19418,19419],"fullWord":19419},{"subwords":[5709,5988,7540,8175,15141,15312,15748,15777,15790,15858,19356,19418,19420,19855],"fullWord":19420},{"subwords":[9447,10665,10672,10681,10686,10691,10707,11044,13850,13866,13871,14003,14421,14427,14551,14561,14567,16840,16883,16907,16917,16918,17088,17091,17093,17147,17578,17598,17614,18083,18085,18135,18148,18863,18926,18936,18947,19386,19423,19424,19453,19456,19605,19825],"fullWord":19424},{"subwords":[5780,5781,10459,10460,10465,10470,11044,11050,11053,16368,16457,17128,17147,18066,18074,18591,18593,19422,19425,19426,19605,19876],"fullWord":19426},{"subwords":[1636,1661,1721,2004,2011,2567,2697,5782,5846,10460,10470,10961,11050,11502,11574,12110,12184,18595,19390,19397,19428,19605,19612],"fullWord":19428},{"subwords":[11989,12007,12010,12030,12177,12872,13007,13008,13011,13051,13052,13055,13059,13082,15627,15638,15691,15700,15720,15722,15727,15806,15820,15852,15858,15861,17203,17429,17435,17451,17930,17989,18103,18112,19026,19034,19093,19113,19121,19155,19158,19430,19431],"fullWord":19431},{"subwords":[11989,12010,13008,13051,13059,15627,15691,15722,15806,15858,19026,19093,19155,19430,19432],"fullWord":19432},{"subwords":[605,693,911,1053,1074,4492,4532,4537,4567,5327,5507,5539,12274,12300,12659,14736,14821,14826,14847,14898,15821,15833,15858,18339,18408,18449,18460,18508,19434,19435,19437,19465,19476,19866],"fullWord":19437},{"subwords":[5918,6000,6018,12362,12368,12374,12376,12655,12659,12663,15241,15245,15306,15312,15748,15777,15782,15821,15822,15823,15832,15833,15834,15840,15852,15858,15861,16399,16457,17843,18005,18066,18071,18074,18117,18150,18607,18624,18649,18651,19356,19359,19434,19438,19440,19441,19442,19452,19476,19480,19747,19763,19866,19867,19876,19880],"fullWord":19441},{"subwords":[12374,12659,13539,13560,13613,14484,14501,14561,18607,19434,19438,19443,19453],"fullWord":19443},{"subwords":[3429,4238,4241,4300,4301,4375,4386,4387,4388,4394,9100,9207,9223,9307,9318,9325,9447,12463,12471,12659,12663,16178,16265,16769,16858,16907,16917,17255,18005,18083,18085,18117,18823,18830,18894,18919,18947,19434,19444,19445,19447,19452,19701,19706],"fullWord":19445},{"subwords":[7604,7637,7759,8151,8175,9297,9325,12463,12651,12659,18894,18901,19418,19434,19446,19701],"fullWord":19446},{"subwords":[4774,4788,5471,5479,5507,5511,5865,12374,12624,12651,12659,18607,18610,19434,19438,19439,19448],"fullWord":19448},{"subwords":[10437,10460,10470,11008,11010,11050,12374,12651,12659,18607,19434,19438,19449,19605,19719],"fullWord":19449},{"subwords":[12374,12651,12659,18607,19434,19438,19450,19451,21120,21135],"fullWord":19450},{"subwords":[10443,10460,10468,10470,10864,10865,10897,10917,10918,10929,11050,12845,12916,12937,13059,13532,13613,13973,14007,14027,14056,14061,14188,14215,14224,14454,14561,18981,19017,19075,19076,19453,19454,19605],"fullWord":19454},{"subwords":[4805,5471,5479,5525,5526,13478,13569,13613,14237,14438,14506,14561,19453,19455,19814],"fullWord":19455},{"subwords":[14587,14635,14650,14651,16416,16457,18066,18074,19457,19458,19876],"fullWord":19458},{"subwords":[72,77,693,911,1074,1332,1362,1366,1406,1462,2308,2337,2349,2494,2498,2577,2602,2610,2638,2644,2697,12219,12300,12614,12659,14821,14847,14898,15749,15821,15833,15858,18302,18319,18408,18449,18460,18508,19390,19391,19434,19435,19459,19476,19636,19840,19841,19866],"fullWord":19459},{"subwords":[1777,1867,1881,2444,2490,2498,2517,2610,2697,5034,5362,5417,5445,9449,15402,15428,15749,15858,19390,19460,19465,19840],"fullWord":19460},{"subwords":[1881,2444,2490,2498,2610,2697,2701,15402,15749,15858,18950,19390,19461,19493,19840],"fullWord":19461},{"subwords":[2219,2220,2237,2268,2269,2446,2476,2498,2610,2656,2664,2668,2690,2697,2700,12959,12964,13007,13008,13011,13051,13052,13055,13059,13082,15576,15590,15591,15691,15700,15720,15722,15727,15749,15764,15852,15858,15861,17308,17429,17435,17451,17994,18035,18540,19093,19113,19121,19155,19158,19390,19403,19462,19463,19840,19844],"fullWord":19463},{"subwords":[2219,2237,2268,2446,2498,2610,2697,2701,12959,13008,13051,13059,15576,15691,15722,15749,15858,19093,19117,19131,19155,19160,19331,19337,19390,19462,19464,19493,19496,19840],"fullWord":19464},{"subwords":[5928,5935,5938,5984,5998,12339,12374,12384,12659,15241,15312,15748,15777,15821,15822,15833,15858,18576,18583,18607,18637,18649,18650,19240,19356,19434,19438,19440,19467,19476,19866],"fullWord":19467},{"subwords":[4701,4810,5471,5479,5705,6406,6501,7056,7073,7075,7194,15060,15114,15135,15312,15318,15748,15773,15777,15778,15858,19243,19356,19357,19465,19468,19469],"fullWord":19469},{"subwords":[4947,5034,5420,5485,7617,7628,7637,7997,8035,8175,9449,15428,15461,15790,15858,19280,19418,19465,19472],"fullWord":19472},{"subwords":[9865,15312,15748,15777,15858,15866,19244,19257,19356,19377,19473,19474,19553,19570,19595,21135,21218,21226],"fullWord":19474},{"subwords":[4774,4788,4810,5471,5479,5507,5511,5539,5865,12358,12374,12624,12626,12659,15060,15227,15241,15312,15318,15748,15773,15777,15778,15821,15822,15833,15858,18607,18610,18649,19248,19356,19357,19434,19438,19439,19440,19465,19476,19477,19660,19866],"fullWord":19477},{"subwords":[6008,12374,12659,15241,15278,15312,15332,15748,15777,15780,15821,15822,15833,15858,18607,18649,18652,19356,19358,19434,19438,19440,19476,19478,19866],"fullWord":19478},{"subwords":[9303,9325,9338,12453,12463,12659,13765,13799,13850,14331,14484,14501,14561,15508,15795,15821,15833,15858,18894,18926,19295,19434,19453,19476,19479,19701,19749,19866],"fullWord":19479},{"subwords":[12659,14484,14501,14561,15821,15833,15858,19434,19453,19476,19481,19833,19866],"fullWord":19481},{"subwords":[6008,15312,15748,15777,15780,15858,18652,19356,19358,19483,19493,19900],"fullWord":19483},{"subwords":[10460,10470,11029,11050,15312,15748,15777,15800,15858,19356,19484,19493,19605,19900],"fullWord":19484},{"subwords":[3264,3399,3401,4238,4241,4268,4271,4375,4376,4379,4394,5656,6023,6057,6058,8586,8935,8945,8947,9026,9027,16265,16267,16298,16304,16457,16574,16753,16754,18050,18066,18074,18570,18697,18802,19485,19486,19592,19876],"fullWord":19485},{"subwords":[4826,4849,5471,5478,5479,5480,5548,8586,8935,8945,8946,8947,9026,9027,16457,16574,16581,16753,16754,16755,17999,18066,18067,18074,18575,18697,18794,18795,18802,19486,19487,19592,19876,19877],"fullWord":19487},{"subwords":[6039,8586,8935,8945,8947,9026,9027,16457,16464,16574,16609,16753,16754,16756,16757,18066,18073,18074,18075,18697,18802,19486,19488,19592,19876,19882],"fullWord":19488},{"subwords":[4826,4835,4849,5471,5478,5479,5480,5489,5490,5546,5548,16457,17999,18066,18067,18074,18575,19384,19489,19490,19595,19596,19876,19877],"fullWord":19490},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15848,15852,15858,15861,16457,18066,18071,18074,18150,19244,19245,19356,19359,19473,19475,19489,19491,19595,19596,19876,19880],"fullWord":19491},{"subwords":[6039,10453,10459,10460,10465,10470,11044,11048,11050,11053,16457,16464,17128,17130,17147,17148,18066,18073,18074,18075,19422,19492,19605,19876,19882],"fullWord":19492},{"subwords":[16319,16457,17846,18066,18074,18176,18576,18588,18662,19493,19494,19495,19498,19876,19878],"fullWord":19495},{"subwords":[13007,13008,13011,13051,13052,13055,13059,13082,15691,15700,15720,15722,15727,15852,15858,15861,17429,17435,17451,17936,17992,19093,19113,19117,19120,19121,19130,19131,19144,19155,19158,19160,19163,19331,19334,19337,19338,19372,19493,19496,19497,19498],"fullWord":19497},{"subwords":[4850,5114,5234,5237,5471,5479,5523,6171,12752,13059,13065,18677,18981,18983,19500,19501],"fullWord":19501},{"subwords":[647,691,693,700,704,711,1158,1161,9307,9318,9325,9447,12463,12471,15936,15986,16041,16047,16089,16095,16858,16907,17255,17742,18186,18195,18211,18347,18408,18428,18521,18527,18894,18919,18947,19503,19504,19508,19530,19536,20349,20350,20351,20353,20356,20393,20404,20408,20449,20457,20467,20774,20807,20842,20853],"fullWord":19504},{"subwords":[634,693,711,1158,1161,7396,7416,7423,7745,7746,7747,7751,12230,12233,15910,15986,16001,16041,16089,16095,17211,17732,18181,18195,18196,18211,18342,18345,18408,18410,18416,18428,18521,18527,19505,19506,19508,20326,20341,20393,20399,20404,20408,20449,20457,20467],"fullWord":19506},{"subwords":[693,716,1158,7416,7447,7745,7747,12230,12311,18342,18408,18410,18417,18521,18526,19505,19507,20326,20393,20399,20404,20493,21058,21079,21085],"fullWord":19507},{"subwords":[950,955,1009,1145,1150,5616,5620,5626,6055,9804,15939,16041,16043,16089,16270,16293,16457,16475,16940,16951,17746,17809,17850,18211,18222,18358,18362,18484,18521,18527,18541,18545,18546,18559,19508,19510,19511,20361,20367,20449,20457,20458,20467,20497,20591,20594,20596],"fullWord":19511},{"subwords":[1009,1145,1196,5620,6055,9865,10056,18358,18521,18541,18545,19510,19512,19553,20361,20493,20497,20594,21016,21047,21079,21097,21135,21138],"fullWord":19512},{"subwords":[4680,4826,4865,4873,6118,6121,16319,16320,16457,16475,16477,17816,17850,17851,18225,18231,18575,18576,18577,18588,19513,19514,20524,20531,20532,20533,20536,20551,20591,20594,20596],"fullWord":19514},{"subwords":[4865,4874,5567,6118,6189,6191,18576,18577,19513,19515,20524,20532,20533,20537,20594,21016,21135,21138],"fullWord":19515},{"subwords":[6118,6121,16319,16457,16475,17846,17850,18231,18576,18588,18662,19517,19518,20532,20551,20591,20594,20596],"fullWord":19518},{"subwords":[5691,6092,6118,10383,10460,10471,18576,19519,19992,20095,20532,20575,20594],"fullWord":19519},{"subwords":[12374,12381,12390,12399,18607,18630,18636,18969,19389,19520,20579,20585,20594,21016,21120,21135,21138],"fullWord":19520},{"subwords":[6018,6033,13577,13599,13609,13613,13626,13630,13635,14262,14281,14284,14403,14427,15248,15272,15305,15306,15312,15748,16409,16457,16475,17544,17836,17850,17961,17964,18235,19256,19386,19521,19522,20586,20588,20591,20594,20596,20987],"fullWord":19522},{"subwords":[10691,18863,18876,18950,19527,19545,20768,20842],"fullWord":19527},{"subwords":[9152,9155,9447,10580,10582,10686,10691,10707,16834,16840,16907,17093,17864,18241,18863,18872,18875,18947,19528,19529,20761,20765,20768,20770,20842,20853],"fullWord":19529},{"subwords":[4714,4774,4788,4865,4935,4942,4985,4988,5008,5680,5865,9325,12374,12390,12399,12463,18607,18610,18835,18844,18845,18894,18898,18899,19530,19531,19532,20524,20579,20581,20585,20594,20720,20722,20774,20779,20785,20786,20842],"fullWord":19532},{"subwords":[5996,9245,9325,9331,9338,9384,12374,12390,12399,12463,12464,12466,15175,15241,15312,15365,15542,15748,18607,18649,18844,18847,18894,18898,18941,19289,19524,19530,19531,19533,20560,20579,20585,20588,20594,20774,20785,20808,20817,20842,20984,21000,21001],"fullWord":19533},{"subwords":[5918,9307,9312,9318,9325,9447,12368,12374,12376,12390,12397,12399,12401,12463,12471,16399,16400,16457,16475,16481,16858,16860,16862,16907,16911,17255,17826,17850,18245,18607,18624,18844,18850,18894,18898,18900,18919,18947,19530,19531,19534,19536,20579,20584,20585,20591,20594,20596,20774,20785,20788,20807,20826,20842,20853],"fullWord":19534},{"subwords":[6122,7493,7512,7540,7604,7637,9325,12374,12390,12399,12463,18607,18844,18894,18898,18901,18902,19525,19530,19531,19535,20579,20585,20594,20742,20774,20785,20790,20842],"fullWord":19535},{"subwords":[9409,9447,10686,10691,10707,16840,16889,16907,17093,17722,17881,18254,18863,18947,19538,19539,20768,20770,20842,20853,20997,21000,21005],"fullWord":19539},{"subwords":[10691,18863,19377,19538,19540,20768,20771,20824,20842,21000,21010],"fullWord":19540},{"subwords":[9409,9447,13850,13866,14403,14421,14427,15508,15524,16883,16889,16907,17598,17665,17722,17881,17974,18926,18936,18947,19295,19301,19386,19541,19542,20838,20842,20853,20997,21000,21005],"fullWord":19542},{"subwords":[9447,16903,16907,16915,18947,18950,18964,19543,19544,19545,19547,20841,20842,20853],"fullWord":19544},{"subwords":[3272,3328,3429,4399,8612,8688,9440,18823,18950,19545,19546,20680,20842,20843,20845],"fullWord":19546},{"subwords":[5705,5950,6495,6507,6874,6940,6955,6982,6983,7073,7103,7123,12785,12787,12979,13008,13110,15114,15135,15312,15610,15691,15694,15734,15748,18981,19093,19101,19166,19172,19243,19343,19548,19549,20553,20588,20594,20875,20933,20953,21008],"fullWord":19549},{"subwords":[3777,3816,3819,3825,3826,3852,3861,3965,4029,12574,12887,19036,19059,19060,19186,19191,19551,21183],"fullWord":19551},{"subwords":[49,72,385,488,594,1324,1326,1462,1502,1922,10061,10136,10139,10304,11173,11192,11196,11361,11408,18302,18389,19556,21051],"fullWord":19556},{"subwords":[574,693,716,781,11213,11264,11270,11361,11408,12201,12244,12257,12311,13239,13261,13266,13364,13424,18389,18402,18408,18436,19557,21051,21064],"fullWord":19557},{"subwords":[8789,8845,8892,9058,12574,12612,12937,13670,14115,14188,14580,18743,18806,19036,19059,19075,19186,19561,19567,21183],"fullWord":19561},{"subwords":[8935,9002,9026,9027,13681,14427,14551,14552,14557,14561,14567,16753,16758,17697,18018,18135,18148,18802,18806,19386,19453,19456,19486,19562,19592,19825,21224],"fullWord":19562},{"subwords":[9384,13577,13599,13613,13623,13705,13712,13719,13850,13870,14262,14290,14410,14576,14579,15248,15312,15508,15509,15542,15748,15866,18844,18847,18926,18941,19257,19295,19296,19377,19559,19564,19570,21127,21135,21136,21146,21147],"fullWord":19564},{"subwords":[7604,7612,7637,8188,9325,12453,12463,13721,13765,13773,13799,13807,13850,13870,18894,18901,18925,18926,19552,19565,21144,21146],"fullWord":19565},{"subwords":[9447,13850,13866,13870,14421,14427,16883,16907,17598,17697,18018,18926,18936,18937,18947,18950,18964,19386,19389,19566,21146,21152],"fullWord":19566},{"subwords":[693,716,911,919,1044,1047,12282,12296,12311,14821,14847,14898,14919,14939,15864,18408,18449,18460,18476,18495,18969,19231,19377,19389,19569,21075],"fullWord":19569},{"subwords":[9409,9447,15545,15852,15858,15861,16889,16907,16917,16921,17722,17881,18083,18085,18947,19577],"fullWord":19577},{"subwords":[4810,4826,4849,5466,5467,5468,5470,5471,5478,15060,15087,15773,15777,15778,15782,15840,18066,18067,18071,18150,19578,19579,19846,19876,19877,19880],"fullWord":19579},{"subwords":[596,605,1053,4492,4493,4502,5485,5507,5513,7253,7427,7759,8151,12230,19582],"fullWord":19582},{"subwords":[5988,7477,7622,7722,7724,7728,8083,8119,9384,10398,10414,10470,10536,10549,10552,10562,10677,10981,10982,11029,15141,15444,15461,15473,15777,15790,15800,19585,19586,19855],"fullWord":19586},{"subwords":[6560,6821,6854,8132,8134,8180,10981,19585,19587,19590],"fullWord":19587},{"subwords":[7590,7595,7729,8135,8140,8180,9152,9157,10583,10981,19585,19588,19590],"fullWord":19588},{"subwords":[5718,5721,5845,5846,5847,7489,7492,7526,7545,7546,7790,8145,8150,11487,12034,12035,12048,12081,12104,12107,12152,12872,17188,17201,17382,18066,18103,18112,19591,19876],"fullWord":19591},{"subwords":[950,957,973,1070,1071,5627,6039,15939,15940,16270,16291,16990,18066,18073,19593,19594,19595,19596,19871,19876,19882],"fullWord":19594},{"subwords":[3584,3586,4213,4224,4268,4271,4312,4326,4330,4341,4345,4350,4351,5654,5655,5656,6023,10470,10965,10974,10975,11029,11033,15021,15048,15777,15782,15800,15804,15840,16298,17128,17141,18056,18066,18071,18150,19597,19598,19876,19880],"fullWord":19598},{"subwords":[269,315,399,442,5627,5780,7293,7298,7301,7477,7722,8135,10109,10324,10343,10398,10400,10470,10981,10982,19599],"fullWord":19599},{"subwords":[6018,10459,10460,10465,10470,11029,11033,11044,11046,11047,11050,11053,15306,15310,15312,15748,15777,15782,15800,15804,15840,15852,15855,15858,15861,16457,17128,17141,17147,18066,18071,18074,18150,18171,19356,19359,19422,19604,19605,19876,19880],"fullWord":19604},{"subwords":[337,341,434,488,497,586,9437,10126,10136,10584,10585,10691,11148,11173,11182,11192,11361,11387,11392,11615,11659,11686,12125,18347,18349,18389,18508,18863,18882,19605,19606],"fullWord":19606},{"subwords":[9369,10584,10609,10691,10897,10929,11659,11686,11854,11856,11879,12010,12040,12125,12126,12812,12869,13048,13059,18863,18882,19002,19026,19605,19607],"fullWord":19607},{"subwords":[488,905,911,918,10241,11044,14898,14912,15852,15858,15861,15942,15960,16041,16066,17022,17141,17147,17773,18172,18388,18449,18472,18508,19381,19427,19605,19608,19609,19837,19868,19871],"fullWord":19609},{"subwords":[1636,2004,2008,2567,2576,2668,5782,5784,5845,5846,5847,10323,10470,10961,10962,12110,12112,12152,17128,17135,18035,18066,18103,19612,19613,19616,19876],"fullWord":19613},{"subwords":[1700,1701,2567,2576,2610,2656,2662,2668,5845,5846,5847,11539,12152,12154,14995,15014,15018,15202,15224,15749,15755,15757,15764,15777,15782,15806,15820,15840,16423,16446,18035,18066,18071,18103,18150,19614,19615,19840,19844,19876,19880],"fullWord":19615},{"subwords":[1636,2004,2008,2567,2576,2668,5782,5784,5845,5846,5847,10323,10470,10961,10962,12110,12112,12152,17128,17135,18035,18066,18103,19612,19613,19616,19876],"fullWord":19616},{"subwords":[513,586,817,869,920,1366,1377,1526,1535,1546,1665,1700,2308,2317,2380,2567,2610,2637,5588,5627,5803,5846,5976,11276,11286,11437,11539,14808,14975,14995,15202,15749,15755,15777,15806,15807,19614,19617,19618,19840,19847],"fullWord":19618},{"subwords":[385,393,497,586,869,920,1324,1366,2021,2308,2567,2610,2630,2637,10061,10136,10139,10990,11173,11276,11303,11387,12141,14808,15749,15806,15807,19617,19619,19837,19840],"fullWord":19619},{"subwords":[67,586,869,883,905,920,921,1366,1419,1422,2308,2343,2567,2576,2610,2637,2656,2657,2668,11276,11314,11330,14808,14820,15749,15764,15806,15807,15808,15820,15973,18035,18103,19617,19620,19840,19844,19868,19871],"fullWord":19620},{"subwords":[341,347,555,586,950,1070,1071,9422,11330,11341,12166,15973,16764,16954,16969,18083,18103,19621,19622,19871],"fullWord":19622},{"subwords":[488,497,586,10136,10958,11173,11192,11361,11387,11392,12197,18389,18508,19605,19623],"fullWord":19623},{"subwords":[7602,7604,7612,7759,8145,8151,9178,9197,11649,11697,11711,12078,12104,12443,12453,13721,13765,13773,14449,14484,19624,19626],"fullWord":19626},{"subwords":[5830,5846,9178,9189,9198,9384,11539,11743,13577,13593,13602,13705,13712,14262,14313,14317,14518,14530,15202,15248,15480,15481,15508,15509,15747,15777,15806,15815,19624,19627],"fullWord":19627},{"subwords":[43,385,399,1301,1332,1342,1530,1546,1636,1671,2004,2577,5627,5745,10061,10174,10324,10344,10470,10961,11001,11008,12219,12229,12331,12333,12614,19600,19601,19629],"fullWord":19629},{"subwords":[269,270,315,605,1053,1061,4492,4500,4502,4605,4774,5471,5485,5507,5511,5513,5627,5707,5865,7253,7427,7493,7759,8151,12229,12230,12624,12629,19630],"fullWord":19630},{"subwords":[586,712,869,883,905,920,921,11213,11247,11262,11276,11314,11330,12244,14808,14820,14821,15806,15820,15821,15832,15973,15986,18103,18117,19632,19633,19866,19867,19868,19871],"fullWord":19633},{"subwords":[605,617,1053,1145,1147,1158,1159,4492,4500,4574,4576,4605,4774,4865,5471,5507,5511,5627,5865,12229,12390,12624,19635,19788,20303,20309,20393,20394,20396,20397,20505,20524,20579,20581],"fullWord":19635},{"subwords":[67,712,905,1332,1359,1366,1406,1407,1419,1422,2308,2337,2342,2343,2577,2600,2610,2638,2643,2656,2657,2668,12219,12223,12614,12622,14821,15749,15764,15821,15832,15986,17288,18035,18117,19636,19637,19840,19841,19844,19866,19867,19868,19871],"fullWord":19637},{"subwords":[50,817,1332,1342,1366,1377,1406,1530,1535,1546,1671,2308,2317,2337,2577,2610,2638,5588,5595,5627,5976,12219,12229,12319,12331,12614,14821,14995,15749,15755,15777,15821,15822,19636,19638,19840,19841,19843,19847,19866],"fullWord":19638},{"subwords":[1560,1671,1673,2517,2577,2582,2597,4618,4774,5445,5471,5507,5511,5865,12331,12614,12624,12651,19639],"fullWord":19639},{"subwords":[1671,1685,1721,2577,2597,2602,2697,12331,12374,12614,12651,12659,18607,19390,19397,19434,19438,19640],"fullWord":19640},{"subwords":[1777,1837,1840,2517,2577,2582,2597,4985,5445,5507,9297,9449,12406,12614,12651,19641,19642],"fullWord":19642},{"subwords":[1989,2019,2115,2127,2237,2268,2577,2602,2697,10748,10897,10929,12481,12574,12614,12659,13059,19036,19390,19434,19605,19643,19780],"fullWord":19643},{"subwords":[2127,2211,2260,2446,2577,2597,2610,2638,12481,12528,12548,12594,12614,12651,12959,13051,15576,15749,15821,19644,19840,19866],"fullWord":19644},{"subwords":[1560,1671,1673,2384,2517,2577,2582,2610,2613,2638,2639,4618,4774,4810,5417,5445,5471,5507,5511,5539,5865,12331,12358,12614,12624,12626,14995,15060,15227,15749,15755,15773,15777,15778,15821,15822,19645,19660,19840,19866],"fullWord":19645},{"subwords":[93,114,269,315,2788,2869,2883,4268,5627,5856,7493,7759,8151,12229,12230,19646],"fullWord":19646},{"subwords":[712,961,2869,2906,2921,2938,4048,4049,4237,4302,4311,4367,12257,12269,13154,13167,13239,13259,13336,14484,14500,14551,15880,15986,16014,16134,17220,17476,17490,17683,18117,18135,19647,19648,19825,19871],"fullWord":19648},{"subwords":[93,96,114,116,712,2869,2883,2887,2906,3021,3076,4268,4271,5627,5656,5856,5918,6023,12229,15880,15986,15995,16058,16134,16270,16298,18066,18117,19649,19871,19876],"fullWord":19649},{"subwords":[111,337,2813,2869,3071,3402,3459,9207,9208,10072,10120,10619,10966,11001,12238,12438,19600,19650],"fullWord":19650},{"subwords":[111,605,1053,1072,2766,2813,2869,3071,3447,3459,4263,4492,5442,5452,5507,10072,10090,10169,10270,11001,19600,19651],"fullWord":19651},{"subwords":[3584,3586,4268,4271,5656,5856,5861,5918,6023,10433,10470,10965,11008,11009,16298,17128,18066,18117,19652,19653,19876],"fullWord":19653},{"subwords":[3541,3592,3665,3701,3777,7759,8151,10760,10793,10826,10981,11012,12509,19654,19655],"fullWord":19654},{"subwords":[3685,3689,3701,3713,3777,9097,9207,9360,9369,10652,10663,10760,10767,10814,12438,12743,12812,13048,19655,19656],"fullWord":19656},{"subwords":[3701,3722,3777,3826,3841,3852,10760,10774,10833,10845,12521,19655,19657],"fullWord":19657},{"subwords":[3777,3804,3906,3913,3920,4312,12490,12548,12965,13051,15592,15593,15766,15821,19655,19658,19866],"fullWord":19658},{"subwords":[4714,4774,4785,4826,4849,4935,4939,4985,4988,4992,5007,5037,5471,5478,5507,5511,5512,5522,5865,5875,5918,9111,9127,9241,9243,9307,9449,9450,12624,12627,12633,12634,16381,16780,16858,16860,17243,18066,18067,18083,18117,19662,19876,19877],"fullWord":19662},{"subwords":[4714,4774,4935,4985,4988,5471,5507,5511,5865,5906,9241,9297,9299,9449,12448,12624,12633,12651,19663],"fullWord":19663},{"subwords":[4774,4810,5114,5115,5172,5176,5260,5392,5471,5507,5511,5523,5539,5865,5880,5953,12358,12493,12499,12548,12624,12626,12752,12876,12979,13051,15060,15078,15227,15238,15600,15603,15610,15706,15714,15773,15777,15778,15821,15822,19660,19664,19665,19866],"fullWord":19665},{"subwords":[4774,4785,4826,4849,5114,5117,5172,5176,5188,5221,5223,5263,5471,5478,5507,5511,5512,5522,5523,5524,5865,5875,5918,5953,5955,12493,12499,12500,12501,12503,12506,12560,12561,12562,12597,12624,12627,12752,12755,12876,12879,12888,16381,17323,17383,17387,17445,18066,18067,18117,19664,19666,19876,19877],"fullWord":19666},{"subwords":[4774,5114,5172,5176,5184,5471,5507,5511,5523,5865,5953,12353,12493,12499,12528,12533,12594,12624,12651,12752,12876,19664,19667],"fullWord":19667},{"subwords":[4774,4795,5466,5467,5471,5507,5511,5567,5568,5579,5662,5865,12624,19669,19670,21120],"fullWord":19670},{"subwords":[712,5605,5627,5918,5923,12229,12339,15986,15995,16270,16319,16335,18066,18117,19671,19871,19876,19878],"fullWord":19671},{"subwords":[712,716,1196,1197,5619,5627,5918,12229,12311,12312,15986,15995,16103,16270,18066,18077,18117,18287,19672,19757,19871,19876,21097,21105,21120,21122,21130,21215],"fullWord":19672},{"subwords":[3777,3786,3788,3814,3821,4268,4271,5653,5656,5856,5918,5953,5955,6023,12506,12560,12561,12597,12874,12875,12876,12879,12888,13049,13050,16188,16298,17316,17383,18066,18117,19655,19659,19673,19876],"fullWord":19673},{"subwords":[6092,6093,12339,12651,19674,19992,20050],"fullWord":19674},{"subwords":[349,828,1060,6250,6254,6293,6308,6366,6593,6621,7045,7179,7194,9261,9376,9378,12236,14784,14821,14838,15795,15821,19675,19866],"fullWord":19675},{"subwords":[5705,5765,6443,6453,6821,6824,6826,6846,7153,7179,10394,10437,10460,10470,11008,11010,11050,12374,12659,18607,19434,19438,19605,19677,19719],"fullWord":19677},{"subwords":[6593,6619,6647,6651,6654,7179,9135,9307,9318,9325,9447,12463,12471,12659,12663,16801,16858,16907,16917,17255,18005,18083,18085,18117,18894,18919,18947,19434,19447,19452,19678,19679,19701,19706],"fullWord":19679},{"subwords":[5172,5507,5523,6821,6902,6917,6923,6999,7004,7179,7180,10906,12493,12837,19580,19664,19681],"fullWord":19681},{"subwords":[5938,5984,5998,6409,6453,6467,7057,7179,7194,12339,15098,15114,15777,15821,15822,19682,19866],"fullWord":19682},{"subwords":[6821,7179,7194,7196,15821,19683,19866],"fullWord":19683},{"subwords":[7477,7493,7680,7722,7759,8151,10398,10470,10981,10982,11008,11012,11013,19684],"fullWord":19684},{"subwords":[605,657,1053,4492,5507,8217,8298,8989,12252,12651,19686],"fullWord":19686},{"subwords":[325,693,711,712,932,1074,1076,8318,8362,8371,8378,8391,8398,8399,8935,8989,8997,8998,9001,9026,9027,12300,12612,12659,12663,15986,16041,16559,16748,16750,16753,18005,18117,18408,18428,18508,18686,18802,19434,19435,19436,19452,19486,19592,19687,19688,19871,19892],"fullWord":19688},{"subwords":[5782,5846,8519,8532,8540,8945,8970,8989,10470,10992,11008,11512,11534,12110,19689],"fullWord":19689},{"subwords":[8772,8789,8989,11024,12882,19691,21183,21193],"fullWord":19691},{"subwords":[8789,8803,8821,8989,8993,12540,12809,12895,19692],"fullWord":19692},{"subwords":[7759,8151,8951,8989,8990,12651,19583,19693],"fullWord":19693},{"subwords":[8989,8998,9012,9026,12612,12659,15821,15833,15858,15859,18789,19434,19476,19694,19866],"fullWord":19694},{"subwords":[3413,4268,5856,6453,6543,6593,6601,7179,9079,9207,12410,19695],"fullWord":19695},{"subwords":[9297,9302,9307,9360,9366,9369,12528,12560,12594,12596,12597,12651,12654,12888,13048,16858,17383,18083,18117,19696,19697,19700],"fullWord":19697},{"subwords":[4985,5014,5172,5507,5523,5525,9360,9369,9449,12453,12493,12758,13048,13765,13809,14020,14032,14102,14218,14438,14484,19664,19698,19813],"fullWord":19698},{"subwords":[5918,9307,12404,12474,12476,16483,16858,16860,16922,18066,18083,18117,19699,19709,19765,19876],"fullWord":19699},{"subwords":[9297,9302,9307,9360,9366,9369,12528,12560,12594,12596,12597,12651,12654,12888,13048,16858,17383,18083,18117,19696,19697,19700],"fullWord":19700},{"subwords":[4714,4774,4788,4935,4942,4985,4988,5008,5471,5479,5507,5511,5680,5865,9241,9325,9449,12374,12463,12624,12633,12659,18607,18610,18835,18844,18845,18894,18898,18899,19434,19438,19439,19701,19702,19703,19776,19777],"fullWord":19703},{"subwords":[5996,9245,9325,9331,9338,9344,9384,12374,12463,12464,12466,12659,15175,15241,15312,15542,15748,15777,15795,15821,15822,15833,15858,18607,18649,18844,18847,18894,18898,18941,19289,19306,19356,19434,19438,19440,19476,19701,19702,19704,19776,19864,19866,19894],"fullWord":19704},{"subwords":[5918,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,12659,12663,16399,16400,16457,16858,16860,16907,16911,16917,17255,17826,18005,18066,18074,18083,18085,18086,18117,18607,18624,18844,18850,18894,18898,18900,18919,18947,19434,19438,19442,19447,19452,19701,19702,19705,19706,19763,19776,19778,19876],"fullWord":19705},{"subwords":[9734,9735,9741,9744,12659,12663,18005,18117,19434,19452,19710],"fullWord":19710},{"subwords":[9836,9844,9848,12374,12640,12659,13539,13560,13613,14452,14484,14491,14501,14561,18607,18968,19196,19434,19438,19453,19595,19711],"fullWord":19711},{"subwords":[4985,5507,5516,9276,9297,9449,9885,9913,9914,12638,12651,19712],"fullWord":19712},{"subwords":[9993,9996,12528,12574,12594,12651,12659,13059,19036,19434,19713,19780],"fullWord":19713},{"subwords":[93,111,114,399,2813,2869,2883,3071,3459,3491,3584,4268,5627,5745,5856,5861,10072,10073,10164,10174,10324,10344,10470,11001,11008,12229,19600,19601,19652,19714],"fullWord":19714},{"subwords":[5918,6039,10433,10453,10470,11008,11009,12367,16398,17128,17130,18066,18073,18117,18130,19718,19876,19882],"fullWord":19718},{"subwords":[5778,9150,9276,9281,9836,9902,9913,9919,10414,10416,10470,10536,10544,10552,10566,10569,10625,10645,10987,11008,11021,12438,12439,12640,19595,19720],"fullWord":19720},{"subwords":[9150,9276,9297,9902,9913,10645,11021,12438,12651,19721],"fullWord":19721},{"subwords":[183,480,605,1053,1072,4492,5172,5173,5442,5507,5523,10090,10169,10270,10730,10741,10906,11001,12493,12494,12837,19600,19664,19723],"fullWord":19723},{"subwords":[3551,3593,3701,3777,3804,10760,10768,10969,11021,12490,19655,19724],"fullWord":19724},{"subwords":[176,528,529,586,605,1053,4472,4475,4479,4492,4500,4605,4774,5471,5507,5511,5627,5658,5846,5865,11107,11115,11213,11218,11219,11437,11438,11446,11512,11516,11534,12091,12229,12244,12245,12246,12624,19725],"fullWord":19725},{"subwords":[528,586,1070,5627,5846,9768,9836,11167,11213,11218,11437,11446,11512,11534,12229,12244,12245,12640,19595,19726],"fullWord":19726},{"subwords":[586,657,673,712,11213,11247,11262,11330,12244,12252,12651,12654,15973,15986,18103,18117,19727,19728,19871],"fullWord":19728},{"subwords":[586,656,712,950,1070,1071,11213,11247,11262,11330,11341,12166,12244,15973,15986,16007,18103,18117,18126,19729,19871],"fullWord":19729},{"subwords":[9325,11697,11729,11737,11797,11802,12199,12443,12463,12474,12659,18882,18894,19434,19500,19701,19709,19731],"fullWord":19731},{"subwords":[5163,5172,5507,5523,10906,11831,11865,11891,12036,12042,12091,12138,12493,12522,12837,19664,19732],"fullWord":19732},{"subwords":[11891,12066,12071,12138,12522,12528,12594,12606,12651,13119,19733,19793,20897],"fullWord":19733},{"subwords":[1070,2869,2921,4049,4302,12257,13154,13162,13239,14435,14484,14491,19647,19734],"fullWord":19734},{"subwords":[326,605,1053,4492,4985,5014,5507,5525,9449,12257,12453,13171,13190,13193,13239,13765,14438,14484,19735],"fullWord":19735},{"subwords":[5918,6033,12651,12654,13539,13558,14484,14500,14551,17683,18066,18117,18135,18136,19737,19738,19825,19876],"fullWord":19738},{"subwords":[12374,12651,12659,13539,13560,13613,14484,14501,14561,18607,19434,19438,19453,19737,19739],"fullWord":19739},{"subwords":[10414,10470,10536,10544,10552,10625,10635,10665,11008,11025,11026,12438,12439,12453,13539,13705,13743,13765,13769,14454,14484,19740],"fullWord":19740},{"subwords":[9297,9302,9307,12453,12459,12651,12654,13765,13798,13871,14421,14484,14500,14551,16858,16883,17248,17580,17683,18083,18117,18135,19741,19742,19825],"fullWord":19742},{"subwords":[7759,8141,8151,10981,11012,13987,14449,14484,19743],"fullWord":19743},{"subwords":[605,608,817,1053,4492,4500,4516,4532,4605,4607,4774,4810,5471,5507,5511,5539,5588,5595,5627,5865,5976,12229,12274,12319,12358,12624,12626,14736,14821,14826,14961,15060,15227,15773,15777,15778,15821,15822,19660,19744,19847,19866],"fullWord":19744},{"subwords":[399,817,5588,5592,5595,5627,5745,5976,10174,10324,10344,10355,10356,10470,11001,11003,11008,11029,12229,12319,12382,14821,14968,15225,15777,15800,15821,15822,19600,19601,19602,19745,19837,19847,19848,19866],"fullWord":19745},{"subwords":[5691,5938,5984,5998,6083,10383,10388,10470,11008,11029,12339,15107,15777,15800,15821,15822,19746,19866],"fullWord":19746},{"subwords":[5918,6000,6018,12362,12368,12374,12376,12655,12659,12663,15241,15245,15306,15312,15748,15777,15782,15821,15822,15823,15832,15833,15834,15840,15852,15858,15861,16399,16457,17843,18005,18066,18071,18074,18117,18150,18607,18624,18649,18651,19356,19359,19434,19438,19440,19441,19442,19452,19476,19480,19747,19763,19866,19867,19876,19880],"fullWord":19747},{"subwords":[5996,9344,9384,12453,13539,13577,13602,13705,13712,13765,13769,14262,14406,14484,14488,14518,14531,15175,15248,15262,15508,15509,15511,15777,15795,15821,15822,19749,19750,19864,19866],"fullWord":19750},{"subwords":[1671,2072,2127,2134,2136,2205,2211,2212,2260,2261,2446,2577,2610,2638,5637,5953,12331,12481,12548,12614,12876,12959,12979,13051,14995,15238,15576,15579,15610,15706,15749,15755,15777,15821,15822,19751,19840,19866],"fullWord":19751},{"subwords":[10886,10922,12548,12642,12644,13051,15623,15821,19752,19866],"fullWord":19752},{"subwords":[6940,7008,7103,7179,7194,12548,13051,15644,15821,19580,19753,19866],"fullWord":19753},{"subwords":[10470,11008,11029,15777,15800,15821,15822,19754,19866],"fullWord":19754},{"subwords":[712,1060,5627,5918,6293,6295,6302,6366,6371,6453,6463,7179,7210,12229,15904,15986,15995,16270,17209,18066,18117,19755,19871,19876],"fullWord":19755},{"subwords":[200,326,336,348,605,610,647,691,712,1053,4461,4492,4901,4985,5007,5037,5507,5522,9127,9307,9449,9450,15893,15928,15986,15988,16063,16858,18058,18083,18117,19756,19871],"fullWord":19756},{"subwords":[712,716,973,987,12311,12312,15986,16009,16103,16109,18117,18130,18169,19757,19758,19871,21215],"fullWord":19758},{"subwords":[399,407,712,5627,5745,5748,5918,10174,10175,10324,10344,10348,10360,10433,10470,11001,11005,11008,11009,12229,15942,15948,15986,15995,16270,16274,17128,18066,18117,19600,19601,19603,19759,19871,19876],"fullWord":19759},{"subwords":[693,694,697,711,712,1009,1074,1076,5616,5620,5626,5627,5918,6055,6074,6075,12229,12289,12300,12325,12330,12368,12374,12376,12659,12663,15986,15995,16041,16043,16070,16270,16293,16399,16457,18005,18066,18074,18117,18408,18428,18508,18541,18559,18607,18624,19434,19435,19436,19438,19442,19452,19760,19763,19871,19876],"fullWord":19760},{"subwords":[5918,5923,12339,12651,12654,16319,16335,18066,18117,19761,19876,19878],"fullWord":19761},{"subwords":[5918,12368,12374,12376,12651,12654,12659,12663,16399,16457,18005,18066,18074,18117,18607,18624,19434,19438,19442,19452,19762,19763,19876],"fullWord":19762},{"subwords":[4774,4785,4826,4849,5471,5478,5507,5511,5512,5522,5865,5875,5918,8540,8547,8945,8946,8947,8989,8997,12624,12627,16381,16574,16581,16748,18066,18067,18117,19592,19766,19876,19877],"fullWord":19766},{"subwords":[8664,8671,8678,8679,8989,8997,9002,9307,12453,12459,13651,13765,13798,13841,13871,14421,14484,14490,14500,14551,14552,16629,16639,16748,16858,16874,16883,17248,17580,17683,18083,18117,18135,19592,19690,19767,19825],"fullWord":19767},{"subwords":[5172,5188,5221,5507,5522,5523,5524,8721,8724,8789,8904,8905,8944,8989,8997,12493,12501,12503,12560,12565,12597,12810,12888,16674,16748,17323,17383,17445,18117,19592,19664,19768],"fullWord":19768},{"subwords":[8935,8989,8997,8998,9001,9026,9027,12612,12659,12663,16748,16750,16753,18005,18117,18802,19434,19452,19486,19592,19769],"fullWord":19769},{"subwords":[657,712,961,12252,12257,12269,12651,12654,13239,13259,13336,14484,14500,14551,15986,16014,17220,17476,17490,17683,18117,18135,19770,19825,19871],"fullWord":19770},{"subwords":[5172,5188,5221,5507,5522,5523,5524,10906,12493,12501,12503,12560,12597,12837,12844,12888,17323,17354,17357,17383,17442,17445,18117,19664,19771],"fullWord":19771},{"subwords":[12560,12574,12591,12597,12659,12663,12888,12936,12937,12944,12945,13055,13059,13082,14112,14182,14188,14201,14224,14227,14427,14484,14500,14501,14504,14551,14561,14563,14564,14567,17278,17281,17383,17406,17435,17447,17644,17648,17683,17921,17934,18005,18117,18135,18148,19036,19057,19075,19090,19386,19434,19452,19453,19456,19772,19780,19813,19825],"fullWord":19772},{"subwords":[7759,7760,8151,8160,12651,12654,17292,18117,18125,19773],"fullWord":19773},{"subwords":[5918,6000,12655,15777,15782,15821,15822,15823,15832,15840,18066,18071,18117,18150,19774,19866,19867,19876,19880],"fullWord":19774},{"subwords":[4985,5008,5507,5555,9325,9449,12463,12637,12659,18843,18894,18925,19434,19669,19701,19707,19775,21140,21144],"fullWord":19775},{"subwords":[4714,4774,4788,4935,4942,4985,4988,5008,5471,5479,5507,5511,5680,5865,9241,9325,9449,12374,12463,12624,12633,12659,18607,18610,18835,18844,18845,18894,18898,18899,19434,19438,19439,19701,19702,19703,19776,19777],"fullWord":19777},{"subwords":[5918,9307,9312,9318,9325,9447,12368,12374,12376,12463,12471,12659,12663,16399,16400,16457,16858,16860,16907,16911,16917,17255,17826,18005,18066,18074,18083,18085,18086,18117,18607,18624,18844,18850,18894,18898,18900,18919,18947,19434,19438,19442,19447,19452,19701,19702,19705,19706,19763,19776,19778,19876],"fullWord":19778},{"subwords":[5161,5172,5189,5234,5507,5523,10897,10906,10929,12493,12574,12659,12837,13059,19016,19036,19434,19605,19664,19780,19781],"fullWord":19781},{"subwords":[5172,5189,5234,5260,5507,5523,5539,12493,12548,12574,12659,13008,13051,13059,15600,15691,15704,15714,15722,15821,15833,15858,19036,19093,19105,19155,19310,19411,19434,19465,19476,19664,19780,19782,19866],"fullWord":19782},{"subwords":[12374,12659,15241,15312,15748,15777,15821,15822,15833,15858,18607,18649,19356,19434,19438,19440,19476,19783,19866],"fullWord":19783},{"subwords":[4774,4785,4826,4849,5471,5478,5507,5511,5512,5522,5865,5875,5918,12624,12627,16381,18066,18067,18117,19668,19785,19876,19877],"fullWord":19785},{"subwords":[6107,10414,10470,10471,10481,10485,10536,10544,10552,10625,10711,10714,11008,12387,12438,12439,19708,19786,20004,20008,20129,20144,20152,20157],"fullWord":19786},{"subwords":[716,1158,1166,12282,12311,14821,14933,14939,15821,15835,15864,19634,19787,19866,20393,20410,20432,20448,20493,21010,21075,21079,21085,21215],"fullWord":19787},{"subwords":[5780,10470,11008,12390,12642,19789,20571,20579],"fullWord":19789},{"subwords":[12374,12390,12399,12659,13539,13560,13613,13630,14484,14501,14561,18607,19434,19438,19453,19790,20579,20585,20586,20594],"fullWord":19790},{"subwords":[4985,5507,9297,9449,12651,19791,20774,20779],"fullWord":19791},{"subwords":[5918,9307,12390,12397,16475,16481,16858,16860,16862,18066,18083,18117,18245,19764,19792,19876,20579,20584,20774,20785,20788,20807,20826],"fullWord":19792},{"subwords":[12528,12548,12594,12606,12651,13051,13119,15734,15821,19793,19794,19866,20897,20944],"fullWord":19794},{"subwords":[5909,5953,12390,12606,12876,13093,13110,13119,19795,20262,20273,20579,20875,20897,20962,20963],"fullWord":19795},{"subwords":[1158,12257,13239,13286,13408,13415,14254,14484,14821,14851,14933,15821,19796,19866,20393,20410,20432,20436,20973],"fullWord":19796},{"subwords":[5953,9836,9841,9865,12640,12876,19595,19797,21120,21174,21183,21193,21218,21220],"fullWord":19797},{"subwords":[9307,12453,12459,13765,13798,13871,14421,14484,14500,14551,16858,16883,17248,17580,17683,18083,18117,18135,19798,19799,19825,21282,21285,21315,21316],"fullWord":19799},{"subwords":[31,72,77,732,781,1009,1462,1464,1542,1546,1548,1721,1722,2697,5620,5627,5956,6055,13364,13367,13439,13464,13613,14428,14561,18302,18319,18436,18437,18508,18512,18541,19390,19391,19397,19453,19800],"fullWord":19800},{"subwords":[161,732,733,781,1009,1053,4551,4805,5471,5479,5525,5526,5620,5627,5956,6055,13171,13364,13367,13368,13439,13464,13478,13613,14438,14561,18339,18436,18437,18438,18508,18512,18541,19453,19801],"fullWord":19801},{"subwords":[4774,4785,4826,4849,5471,5478,5507,5511,5512,5522,5525,5526,5531,5865,5875,5918,6033,12624,12627,13478,13488,13539,13544,13546,13558,14416,14438,14441,14484,14500,14551,16381,17530,17539,17675,17676,17683,18066,18067,18117,18135,18136,19802,19803,19825,19876,19877],"fullWord":19803},{"subwords":[4728,5471,5472,5525,5526,5533,5756,8509,8525,8549,8945,8946,9002,10378,10470,13478,13950,14438,14454,14455,19804],"fullWord":19804},{"subwords":[8640,8664,8964,9002,9152,10665,13651,13749,14460,19805],"fullWord":19805},{"subwords":[5523,5525,8721,8749,8753,8845,9002,10864,10906,10917,12837,13967,14020,14056,14438,19806],"fullWord":19806},{"subwords":[5740,9821,13489,13492,13502,13522,13569,14452,14506,19595,19807],"fullWord":19807},{"subwords":[481,605,1053,1072,4492,5442,5507,5525,10090,10169,10182,10270,11001,12257,13171,13204,13239,13391,13904,14438,14484,19600,19808],"fullWord":19808},{"subwords":[6651,6777,6782,6821,10557,10665,10691,13850,14561,18863,18926,19423,19453,19605,19809],"fullWord":19809},{"subwords":[9150,9276,9902,9913,9932,10645,10649,10665,11021,11025,12438,12453,13765,13780,13963,14000,14484,14491,19810],"fullWord":19810},{"subwords":[183,480,481,1053,1072,5442,5523,5525,10090,10182,10270,10730,10864,10906,10917,12837,12913,13171,13204,13391,13967,14020,14056,14438,19811],"fullWord":19811},{"subwords":[11947,11961,12007,12010,12030,12177,12872,12936,12937,12944,12945,13055,13059,13082,14182,14188,14201,14224,14227,14427,14551,14561,14567,17203,17406,17435,17447,17644,17648,17907,17921,17934,18002,18103,18112,18114,18135,18148,19026,19034,19075,19090,19386,19433,19453,19456,19624,19628,19812,19825],"fullWord":19812},{"subwords":[6033,13569,13573,13577,13602,14262,14278,14280,14281,14403,14506,14515,14518,14544,14551,15248,15272,15305,15777,15782,15840,17687,18066,18071,18135,18136,18137,18143,18150,19815,19816,19825,19876,19880],"fullWord":19816},{"subwords":[7604,7612,7759,8151,12453,13721,13765,13773,13805,13813,14449,14484,14506,19817],"fullWord":19817},{"subwords":[8664,8671,8678,9002,13651,13813,13828,13841,13871,14421,14506,14515,14551,14552,16639,16883,18083,18135,19592,19818,19825],"fullWord":19818},{"subwords":[13813,13829,13850,13870,14506,14561,18926,18935,19453,19819,21146,21224],"fullWord":19819},{"subwords":[732,735,817,5588,5627,5956,5976,6008,13286,13294,13297,13439,13455,13577,13602,14262,14518,14523,14541,14851,14852,14854,14872,14979,14983,15248,15777,15780,19820,19847],"fullWord":19820},{"subwords":[6033,9384,9389,9409,13577,13588,13602,13705,13712,13715,13716,13871,14262,14281,14309,14336,14403,14421,14518,14544,14551,15248,15272,15305,15508,15509,15514,15524,15526,15777,15782,15840,16796,16883,16889,16890,16900,17565,17591,17687,17722,18066,18071,18083,18135,18136,18137,18150,19821,19825,19876,19880],"fullWord":19821},{"subwords":[12680,13051,13286,14220,14350,14541,14851,15570,19822],"fullWord":19822},{"subwords":[12937,13008,13051,13059,14127,14160,14188,14220,14224,14350,14561,15659,15691,15697,15722,15858,19060,19075,19093,19106,19155,19321,19323,19453,19823],"fullWord":19823},{"subwords":[6004,6033,12916,12925,12936,12945,12979,12982,13007,13051,13052,13577,13602,13607,14147,14149,14166,14168,14171,14220,14223,14262,14281,14350,14383,14384,14403,14518,14544,14551,15248,15272,15305,15610,15611,15663,15668,15676,15706,15708,15716,15777,15782,15840,17406,17419,17447,17451,17638,17687,18066,18071,18135,18136,18137,18150,19824,19825,19876,19880],"fullWord":19824},{"subwords":[6033,6039,13609,13612,13613,13626,14422,14427,14551,14558,14561,14567,16409,16414,16457,16464,16468,16469,17677,17836,17838,18013,18014,18066,18073,18074,18075,18135,18136,18140,18147,18148,19386,19453,19456,19825,19826,19827,19876,19882],"fullWord":19827},{"subwords":[8845,8856,8886,8887,8892,8901,8935,9002,9026,9027,12810,12936,12937,12944,12945,13055,13059,13082,14172,14182,14188,14201,14224,14227,14427,14551,14552,14561,14567,16693,16704,16709,16753,17406,17407,17435,17447,17460,17644,17648,17921,17934,18135,18148,18743,18759,18762,18802,19075,19090,19123,19386,19453,19456,19486,19592,19825,19828],"fullWord":19828},{"subwords":[4714,4826,4849,4935,4939,5014,5021,5037,5471,5478,5525,5526,5531,6033,9111,9127,9449,9450,13478,13488,13705,13710,13716,13871,14416,14421,14438,14441,14551,16780,16883,17530,17562,17675,17676,18066,18067,18083,18135,18136,19825,19829,19876,19877],"fullWord":19829},{"subwords":[732,781,1009,1070,5620,5627,5956,6055,9780,9848,13364,13367,13439,13446,13464,13613,14452,14561,18358,18436,18437,18508,18512,18541,18545,19196,19453,19595,19830],"fullWord":19830},{"subwords":[5832,5846,9178,9199,9444,11574,11786,12184,13613,13705,13850,14561,18595,18596,18599,18844,18882,18886,18926,19453,19624,19831],"fullWord":19831},{"subwords":[12574,12606,12659,12937,13059,13119,14188,14224,14229,14484,14501,14561,14563,19036,19075,19166,19178,19434,19453,19548,19780,19813,19832,20897,20899,20927],"fullWord":19832},{"subwords":[12659,14484,14501,14561,15821,15833,15858,19434,19453,19476,19481,19833,19866],"fullWord":19833},{"subwords":[1053,4574,5330,5525,13171,13286,13292,13408,14438,14736,14851,14933,19834,20303,20410,20412,20436,20973],"fullWord":19834},{"subwords":[4985,5014,5507,5525,9449,12453,13765,14438,14484,19835,20774,20779,20784],"fullWord":19835},{"subwords":[111,337,349,796,1084,2813,2941,2971,3071,3402,3452,4312,4333,4335,4341,9376,10072,10121,10502,10675,10966,14780,15399,19836,19837,19862],"fullWord":19836},{"subwords":[349,796,1084,2801,2869,2941,3402,4312,4333,9207,9208,9221,9376,9378,12270,14784,14821,14838,15795,15821,15826,19838,19862,19866],"fullWord":19838},{"subwords":[712,905,14821,15821,15832,15986,18117,19839,19866,19867,19868,19871],"fullWord":19839},{"subwords":[596,787,1078,1210,1332,1366,1406,2308,2337,2577,2610,2638,12219,12614,14821,15749,15821,19636,19840,19841,19842,19866],"fullWord":19842},{"subwords":[50,817,1332,1342,1366,1377,1406,1530,1535,1546,1671,2308,2317,2337,2577,2610,2638,5588,5595,5627,5976,12219,12229,12319,12331,12614,14821,14995,15749,15755,15777,15821,15822,19636,19638,19840,19841,19843,19847,19866],"fullWord":19843},{"subwords":[3272,3305,3396,4312,8612,8989,9207,9213,9221,15416,15795,15821,15826,19845,19862,19866],"fullWord":19845},{"subwords":[341,343,349,553,586,817,869,920,5588,5627,5830,5846,5976,9376,9384,11276,11286,11292,11437,11539,11743,14808,14810,14975,15202,15480,15481,15777,15806,19847,19851],"fullWord":19851},{"subwords":[3159,4159,4268,4293,4312,4326,4336,5654,5830,5846,9079,9384,11539,11541,11619,11743,15021,15202,15411,15480,15481,15777,15806,19850,19852,19862],"fullWord":19852},{"subwords":[5984,6008,15312,15748,15777,15780,15858,18576,18652,18655,19240,19356,19358,19853],"fullWord":19853},{"subwords":[3161,3429,3430,3432,4214,4268,4312,4326,4336,4357,4375,4376,4378,4384,5654,6019,6057,9079,9384,15021,15051,15059,15312,15411,15542,15748,15777,15858,18823,18844,18847,18941,19267,19350,19356,19850,19854,19862,19894],"fullWord":19854},{"subwords":[5894,5988,7493,7512,7540,7759,8092,8151,8175,12374,12659,15141,15241,15312,15748,15777,15790,15821,15822,15824,15833,15858,18607,18649,19356,19418,19434,19438,19440,19476,19855,19857,19866],"fullWord":19857},{"subwords":[5988,5992,6008,6016,15141,15777,15780,15781,15782,15790,15794,15840,18066,18071,18150,18152,18160,18162,19855,19858,19859,19860,19876,19880],"fullWord":19859},{"subwords":[7578,7604,7759,8015,8151,8153,15461,15494,15790,15795,15798,15821,15824,19748,19861,19866],"fullWord":19861},{"subwords":[337,349,9376,9378,10120,10121,10502,10675,11001,11003,12238,12438,14780,14784,14821,14838,15399,15795,15821,19600,19602,19837,19863,19866],"fullWord":19863},{"subwords":[5918,5996,6000,9307,9324,9344,9346,9384,9389,9409,12655,15175,15177,15296,15500,15526,15527,15777,15782,15795,15799,15821,15822,15823,15832,15840,16439,16796,16858,16860,16889,16890,16893,17722,18066,18071,18083,18117,18150,19864,19865,19866,19867,19870,19876,19880],"fullWord":19865},{"subwords":[5918,5996,6000,9307,9324,9344,9346,9384,9389,9409,12655,15175,15177,15296,15500,15526,15527,15777,15782,15795,15799,15821,15822,15823,15832,15840,16439,16796,16858,16860,16889,16890,16893,17722,18066,18071,18083,18117,18150,19864,19865,19866,19867,19870,19876,19880],"fullWord":19870},{"subwords":[43,45,67,73,385,392,399,407,1301,1306,1422,1425,1546,1547,1636,1918,2004,2008,2668,5627,10061,10071,10323,10324,10360,10470,10961,10962,15872,15942,15948,16270,16274,16999,17128,18031,18035,18066,19871,19872,19876],"fullWord":19872},{"subwords":[49,67,385,392,1422,1502,1507,2668,2696,2710,2714,10061,10071,10304,10313,10323,15942,16103,16999,17039,17149,18032,18035,19871,19873],"fullWord":19873},{"subwords":[269,280,315,316,973,5627,6039,7396,7398,7435,8106,15910,15912,15915,15923,16270,16291,18066,18073,19871,19874,19875,19876,19882],"fullWord":19875},{"subwords":[5765,6821,6824,6827,6845,7153,7156,7210,7214,10470,16365,17128,18066,19876,19879],"fullWord":19879},{"subwords":[6039,8552,8584,8934,8945,8947,15379,15777,15782,15840,15841,15842,15846,15849,16574,16609,18066,18071,18072,18073,18150,19592,19876,19880,19881,19882,19883,19884,19886],"fullWord":19884},{"subwords":[973,10236,10958,10959,15942,16065,19871,19887,19888],"fullWord":19888},{"subwords":[6008,6016,15777,15780,15781,15782,15840,18066,18071,18150,18152,19876,19880,19889],"fullWord":19889},{"subwords":[14403,14551,14558,17687,17692,18135,18147,19825,19886,19890,19891],"fullWord":19891},{"subwords":[0,317,596,693,1074,8378,8398,8989,8998,9026,12300,12612,12659,18408,18508,18686,19434,19435,19687,19892,19893],"fullWord":19893},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15852,15858,15861,16457,18066,18071,18074,18150,18177,19356,19359,19876,19880,19896],"fullWord":19896},{"subwords":[12007,12010,12030,12177,12193,12196,12872,13055,13059,13082,17203,17435,17936,18103,18112,19026,19034,19130,19131,19144,19160,19163,19493,19498,19898],"fullWord":19898},{"subwords":[781,1028,1093,9367,9369,12686,12937,13048,13059,13364,13379,13850,13851,14032,14188,14224,14561,18347,18432,18436,18508,18926,19075,19453,19899],"fullWord":19899},{"subwords":[6018,15306,15312,15748,15777,15782,15840,15852,15858,15861,16457,17846,17992,18066,18071,18074,18150,18662,19255,19356,19359,19360,19372,19493,19498,19876,19880,19900,19901],"fullWord":19901},{"subwords":[399,1106,5627,10285,10324,10470,10471,10472,10958,19610,19902,19904,19905,19923,19924,19937,19986,20014],"fullWord":19905},{"subwords":[10958,10959,15942,17029,19610,19611,19871,19887,19904,19906,19923],"fullWord":19906},{"subwords":[126,596,693,2869,2908,3052,18408,19907,19948,19975],"fullWord":19907},{"subwords":[93,126,1009,1106,3052,3080,3081,5620,6055,6057,18541,19908,19975,20095],"fullWord":19908},{"subwords":[263,1115,7375,7395,7447,7960,7961,14758,14759,14939,15864,19913,19966],"fullWord":19913},{"subwords":[257,287,596,1115,1116,7283,7604,12230,19914,19920,19948,20107,20152],"fullWord":19914},{"subwords":[299,869,1115,7317,7375,7889,7921,11127,11265,11276,12680,13087,14758,14808,15564,15627,19915],"fullWord":19915},{"subwords":[269,315,817,842,1062,1106,1109,1115,5588,5627,5976,5988,7375,7439,7461,7953,8099,14758,14762,14921,15141,15337,15777,15790,19847,19855,19916,19917],"fullWord":19917},{"subwords":[349,817,1106,1109,5588,5595,5976,5996,9376,9378,9384,12229,12242,12305,12319,12387,14784,14821,14838,14921,14925,14930,15175,15337,15549,15551,19920,19921,19948,19950,20008,20107,20129,20132,20152,20157],"fullWord":19921},{"subwords":[337,714,716,9288,9293,9453,10120,10304,10662,12238,12310,12311,12438,19919,19920,19922,19923,19948,20107,20110,20152,20153,20168,20169,21144],"fullWord":19922},{"subwords":[399,407,488,1009,1106,1114,5616,5620,5626,6055,10241,10247,10285,10289,10324,10360,10366,10459,10460,10465,10471,10472,15942,15948,15960,15966,16041,16043,16076,16270,16274,16293,16457,16459,17022,17023,17029,17030,17750,17799,17811,18341,18370,18374,18541,18547,18548,18559,18660,19923,19924,19925,19926,19927,19935,19967,19970,19975,19978,19986,19987,20014,20088,20089,20095,20101],"fullWord":19927},{"subwords":[337,340,362,399,407,436,1106,1114,1124,5799,6107,6110,9416,10285,10289,10324,10360,10414,10415,10471,10472,10481,10486,10536,10551,10711,10719,15931,15942,15948,15966,16076,16270,16274,16844,17029,17030,19919,19923,19924,19925,19929,19935,19967,19986,19987,20004,20007,20014,20107,20110,20112,20115,20129,20134,20144,20191,20197],"fullWord":19929},{"subwords":[337,341,497,586,10136,10584,10585,11148,11173,11182,11387,11615,11659,19610,19919,19923,19930,20107,20110,20150],"fullWord":19930},{"subwords":[399,442,450,464,1106,1196,5780,10285,10304,10324,10343,10471,10472,10489,10495,11065,19923,19924,19931,19986,19988,20014,21050,21097,21110],"fullWord":19931},{"subwords":[487,905,10181,12680,12683,12948,12950,13007,13087,13088,13090,15673,15942,15971,16083,17029,17303,17354,17356,19923,19932,19933,20250],"fullWord":19933},{"subwords":[10922,12680,12948,13051,13087,13088,13106,19610,19837,19923,19932,19934,20250],"fullWord":19934},{"subwords":[399,407,973,1106,1114,6039,10230,10236,10285,10289,10324,10360,10453,10471,10472,15942,15948,15950,15966,15969,16076,16080,16270,16274,16277,16291,17029,17030,17033,17036,19923,19924,19925,19935,19936,19967,19968,19986,19987,20014],"fullWord":19936},{"subwords":[204,399,1053,1072,1106,4466,4569,4601,4728,4851,5442,5471,5472,5627,5756,10090,10093,10270,10271,10285,10286,10324,10327,10378,10470,10471,10472,19610,19902,19910,19923,19924,19937,19938,19986,19990,20014,20017],"fullWord":19938},{"subwords":[399,817,1106,1109,5588,5592,5627,5976,10285,10287,10324,10355,10470,10471,10472,11029,14921,14923,14968,15337,15777,15800,19610,19837,19847,19848,19902,19923,19924,19937,19939,19986,20014,20015],"fullWord":19939},{"subwords":[399,407,1106,1114,5627,10285,10289,10324,10360,10470,10471,10472,15942,15948,15966,16076,16270,16274,17029,17030,17128,18033,18066,19610,19611,19871,19876,19902,19903,19923,19924,19925,19935,19937,19940,19967,19986,19987,20014],"fullWord":19940},{"subwords":[488,10281,18508,19605,19610,19923,19941,19975,19980],"fullWord":19941},{"subwords":[204,399,1106,4466,4569,4601,4728,4851,5756,10090,10093,10285,10286,10324,10327,10378,10471,10472,19910,19923,19924,19942,19943,19986,19990,20014,20017],"fullWord":19943},{"subwords":[399,407,1106,1114,10285,10289,10324,10360,10471,10472,15942,15948,15966,16076,16270,16274,17029,17030,19923,19924,19925,19935,19942,19944,19967,19986,19987,20014],"fullWord":19944},{"subwords":[204,574,732,733,1105,1106,4472,4475,4484,4569,4851,5658,5956,11107,11115,11270,11437,11438,13171,13401,13402,13439,13478,19910,19945,19946,19990],"fullWord":19946},{"subwords":[574,732,735,817,869,1106,1109,5588,5956,5976,11270,11276,11286,11437,11539,13286,13294,13335,13401,13403,13439,13455,13577,13593,14240,14262,14808,14816,14851,14852,14921,14975,14979,15202,15209,15248,15337,15338,15747,19945,19947],"fullWord":19947},{"subwords":[204,375,596,598,605,4492,4493,10090,10169,10281,12304,19923,19948,19949],"fullWord":19949},{"subwords":[325,647,691,932,1124,8362,8678,8679,9307,15986,16629,16655,16656,16858,16874,19920,19948,19953,19957,20107,20115,20152,20154,20167,20191],"fullWord":19953},{"subwords":[693,700,716,9325,9453,12310,12311,12463,18347,18408,18894,18925,19920,19948,19954,19975,20107,20152,20168,20210,21144],"fullWord":19954},{"subwords":[504,596,657,658,11213,11239,12244,12252,19948,19955],"fullWord":19955},{"subwords":[528,657,663,1106,11213,11218,11395,11437,11446,11512,12229,12244,12245,12252,12305,19948,19950,19956],"fullWord":19956},{"subwords":[905,961,12680,12683,12936,13007,13087,13286,13321,13336,13343,14246,14350,14351,14383,14403,14851,14866,14891,15673,16014,16016,16083,17298,17303,17406,17476,17494,19958,19959],"fullWord":19959},{"subwords":[12680,13087,13091,13286,13424,14258,14350,14410,14851,14939,15672,15864,19958,19960,19966,21064],"fullWord":19960},{"subwords":[12680,13051,13087,13286,14220,14350,14851,19958,19961],"fullWord":19961},{"subwords":[204,326,327,329,349,351,817,854,1106,1109,1120,4516,4569,4599,4607,4714,4810,4851,4935,5023,5067,5071,5073,5329,5381,5588,5976,9103,9376,9384,9385,14736,14776,14921,14922,14961,15060,15337,15428,15433,15549,15550,19910,19962,19990,20058,20107,20126,20129,20130,20132],"fullWord":19962},{"subwords":[349,352,817,901,1106,1109,5588,5976,6008,9376,9384,14872,14921,14927,14983,15337,15549,15552,19963,20107,20129,20132],"fullWord":19963},{"subwords":[349,359,817,825,858,863,905,906,1106,1109,1110,1114,1124,5588,5599,5976,5977,9376,9384,9389,9409,14788,14881,14921,14929,15337,15354,15526,15549,15554,16028,16076,16078,16270,16286,16419,16889,16890,17722,19964,19967,20070,20071,20107,20115,20129,20132,20133,20134,20191,20197],"fullWord":19964},{"subwords":[399,405,488,491,817,911,1009,1106,1109,1112,5588,5592,5620,5976,5982,6055,10247,10254,10285,10287,10324,10355,10460,10471,10472,14898,14901,14921,14923,14968,15312,15337,15748,18370,18372,18449,18453,18541,18547,18554,19227,19228,19923,19924,19926,19965,19975,19986,20014,20015,20080,20095],"fullWord":19965},{"subwords":[382,973,10236,10281,10284,15942,15959,17029,17036,19923,19969],"fullWord":19969},{"subwords":[817,825,905,906,911,918,993,1009,1106,1109,1110,1112,1113,1114,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14921,14929,15306,15312,15337,15354,15748,16041,16043,16076,16078,16270,16286,16293,16419,16457,17773,17775,17784,17799,18449,18453,18455,18472,18541,18554,18557,18559,19227,19381,19967,19970,19971,19975,19978,20070,20071,20080,20088,20095,20101],"fullWord":19971},{"subwords":[488,10241,10304,10313,15942,15960,15964,16041,16103,17022,17028,17029,17039,17149,17802,18018,19923,19970,19972,19974,19975,19978],"fullWord":19972},{"subwords":[254,488,1060,6344,6363,6373,6717,6821,18508,19412,19605,19610,19923,19975,19976,19980],"fullWord":19976},{"subwords":[204,210,1009,1106,4551,4569,4851,5620,6055,18339,18495,18498,18541,18565,19910,19975,19979,19990,20095],"fullWord":19979},{"subwords":[488,10241,11044,15942,15960,16041,16066,17022,17029,17147,18388,18508,19427,19605,19610,19611,19871,19923,19970,19975,19978,19980,19981],"fullWord":19981},{"subwords":[488,10304,18508,19605,19610,19923,19975,19980,19982],"fullWord":19982},{"subwords":[693,711,712,1074,1076,12300,12659,12663,15986,16041,18005,18117,18408,18428,18508,19434,19435,19436,19452,19871,19948,19957,19970,19975,19978,19983,19984],"fullWord":19984},{"subwords":[693,716,1074,1077,12300,12310,12311,12659,18408,18508,19434,19435,19948,19975,19983,19985,21215],"fullWord":19985},{"subwords":[3161,3898,3936,3965,3968,3997,4001,4003,4005,6057,12965,12979,13008,13095,13100,15021,15052,15312,15337,15592,15610,15691,15694,15728,15748,18981,19093,19098,19101,19165,19340,19989,20080,20095,20097,20233,20265,20267],"fullWord":19989},{"subwords":[5957,6092,13489,13511,19992,19993,19994],"fullWord":19994},{"subwords":[4678,4810,5984,6092,6100,15060,15093,15111,15112,15337,19992,19996,19997,20057],"fullWord":19997},{"subwords":[269,280,1106,1114,1115,5918,6091,7350,7351,7396,7439,7493,7511,12229,12230,12233,12305,12308,15910,15912,15986,15995,16001,16076,16270,17211,19948,19950,19952,19957,19967,20001,20002,20003],"fullWord":20002},{"subwords":[4714,4728,4731,4739,4753,4856,4935,5071,5691,5756,5771,6092,6107,9108,9117,10378,10383,10414,10471,10481,10482,10530,10536,10537,10711,10712,19992,20004,20005,20017,20126,20129,20130,20144],"fullWord":20005},{"subwords":[5691,5735,5796,5984,5995,6092,6100,6107,6108,9384,10383,10388,10414,10471,10479,10481,10483,10536,10549,10677,10711,10716,10722,15107,15198,15337,15340,15348,15444,15473,15549,19992,19996,20004,20006,20129,20132,20144,20146],"fullWord":20006},{"subwords":[337,399,423,430,436,637,714,1106,5745,6107,10120,10174,10285,10324,10344,10414,10471,10472,10481,10485,10536,10544,10625,10711,10714,12229,12238,12242,12305,12306,12387,12438,12439,19919,19920,19923,19924,19948,19950,19986,20004,20008,20009,20014,20026,20036,20107,20110,20129,20144,20152,20153,20157,20158],"fullWord":20009},{"subwords":[4714,4774,4853,4935,4985,4988,5071,5665,5865,5871,5939,6092,6093,9108,12339,12340,12387,19992,20008,20010,20027,20126,20129,20130,20152,20157,20159],"fullWord":20010},{"subwords":[5735,5940,5984,5995,5996,5998,6092,6093,6100,9384,9387,12339,12363,12386,12387,15175,15337,15549,15551,19992,19996,20008,20011,20041,20129,20132,20152,20157],"fullWord":20011},{"subwords":[3571,3573,3701,3708,3898,3997,4001,5650,10443,10471,10488,10760,10882,10935,10938,12845,12965,12979,13095,15021,15337,15592,15610,15621,15728,20016,20233,20250,20251],"fullWord":20016},{"subwords":[4728,4826,5756,5760,10378,10459,10460,10465,10471,16457,17044,18575,20017,20018,20019,20020,20088,20095,20101],"fullWord":20020},{"subwords":[5780,5782,5846,10470,10471,12110,12118,20021,20023],"fullWord":20021},{"subwords":[10443,10470,10471,10488,10882,10922,10932,10933,10935,10938,11029,12845,12979,13051,13095,13107,15337,15610,15621,15706,15728,15777,15800,20022,20250,20251],"fullWord":20022},{"subwords":[5691,5796,5984,6083,6092,6100,10383,10388,10470,10471,10479,11029,15107,15337,15340,15355,15777,15800,19992,19996,20024],"fullWord":20024},{"subwords":[5691,6092,10383,10460,10471,18576,19992,20025,20095],"fullWord":20025},{"subwords":[4667,4774,5665,5865,5867,6092,6093,12339,12340,19992,20027,20028],"fullWord":20028},{"subwords":[4774,5665,5865,6092,6093,6094,12339,12340,19992,20027,20029],"fullWord":20029},{"subwords":[4678,4774,4794,4810,5665,5865,5868,5984,5998,6092,6093,6100,12339,12340,12358,12363,12364,12386,15060,15093,15227,15337,19992,19996,20027,20030,20057],"fullWord":20030},{"subwords":[4774,4810,4861,5114,5115,5172,5176,5267,5268,5392,5408,5865,5953,12358,12493,12499,12548,12752,12876,12979,13093,13095,15060,15078,15227,15238,15337,15600,15603,15610,15728,15729,20027,20031,20262],"fullWord":20031},{"subwords":[5984,5998,6092,6093,6095,6100,12339,12363,12386,15111,15337,19992,19996,20032],"fullWord":20032},{"subwords":[5698,5946,5984,5998,6092,6093,6100,6103,6189,6196,12339,12363,12366,12386,15337,15866,19992,19996,19999,20033,20085,21120],"fullWord":20033},{"subwords":[4774,5665,5667,5865,6092,6093,7467,7468,7493,7496,12339,12340,19992,20027,20034],"fullWord":20034},{"subwords":[5918,6092,6093,6097,6104,7467,7473,7493,7496,7498,7511,12339,16319,16335,16470,19992,20000,20035],"fullWord":20035},{"subwords":[337,399,423,430,436,637,714,1106,5745,6107,10120,10174,10285,10324,10344,10414,10471,10472,10481,10485,10536,10544,10625,10711,10714,12229,12238,12242,12305,12306,12387,12438,12439,19919,19920,19923,19924,19948,19950,19986,20004,20008,20009,20014,20026,20036,20107,20110,20129,20144,20152,20153,20157,20158],"fullWord":20036},{"subwords":[3413,5856,6092,6093,6111,9079,9207,12339,12387,12410,12424,19992,20008,20037,20119,20129,20152,20157],"fullWord":20037},{"subwords":[6092,6093,9297,12339,12387,12448,19992,20008,20038,20039,20129,20152,20157],"fullWord":20039},{"subwords":[5918,9297,9302,9307,12387,12448,12449,16858,16860,20008,20012,20038,20040,20129,20134,20152,20157,20161,20167,20197],"fullWord":20040},{"subwords":[5735,5940,5984,5995,5996,5998,6092,6093,6100,9384,9387,12339,12363,12386,12387,15175,15337,15549,15551,19992,19996,20008,20011,20041,20129,20132,20152,20157],"fullWord":20041},{"subwords":[5845,5918,5953,5955,11512,11524,11567,11891,11915,12059,12062,12506,12522,12525,12527,12560,12561,12866,12868,12872,12876,12879,13093,13094,17382,17383,20042,20043,20262],"fullWord":20043},{"subwords":[5918,5953,5955,6092,6093,6097,6104,12339,12506,12560,12561,12876,12879,13093,13094,16319,16335,16470,17383,19992,20000,20044,20262],"fullWord":20044},{"subwords":[5918,5953,5955,12389,12506,12560,12561,12597,12876,12879,12888,13093,13094,17383,18066,18117,19876,20045,20052,20262],"fullWord":20045},{"subwords":[4774,4788,5665,5865,6092,6093,6098,12339,12340,12374,18576,18577,18583,18607,18610,19992,20027,20046,20047,20095],"fullWord":20047},{"subwords":[5928,5935,5984,5998,6092,6093,6098,6100,6101,12339,12363,12374,12386,15241,15312,15337,15748,18576,18583,18607,18649,18650,19240,19992,19996,20046,20048,20080,20095],"fullWord":20048},{"subwords":[5918,5923,6092,6093,6097,6104,12339,12389,16319,16335,16470,18066,18117,19876,19878,19992,20000,20050,20051,20052],"fullWord":20051},{"subwords":[43,44,385,399,817,1106,1109,1301,1304,1366,1377,1535,1636,1915,1933,2308,2317,2352,5588,5592,5976,10061,10285,10287,10324,10355,10471,10472,14921,14923,14968,14995,15337,19923,19924,19986,20014,20015,20053,20054],"fullWord":20054},{"subwords":[1560,1777,1780,1782,1790,1867,2384,2395,2413,2417,4618,4714,4810,4935,5023,5071,5073,5362,5381,9384,9385,14995,15005,15060,15337,15402,15428,15433,15549,15550,20053,20055,20058,20126,20129,20130,20132],"fullWord":20055},{"subwords":[4678,4810,5351,5667,5669,5984,5988,6092,6100,7467,7468,7979,15060,15093,15141,15337,19992,19996,20057,20059,20060],"fullWord":20060},{"subwords":[5984,5988,6008,6092,6100,7467,15141,15337,19992,19996,20059,20061],"fullWord":20061},{"subwords":[5984,5988,5992,6092,6100,6104,7467,7473,15141,15148,15337,15354,16319,16340,16425,16433,16449,16472,19992,19996,19998,20000,20059,20062,20070,20073],"fullWord":20062},{"subwords":[5735,5984,5995,6008,6092,6100,9384,15337,15549,15552,19992,19996,20063,20129,20132],"fullWord":20063},{"subwords":[6509,6543,6551,6621,6622,6657,6658,7140,9384,9453,15114,15172,15337,15446,15549,15866,20064,20085,20129,20132],"fullWord":20064},{"subwords":[6107,9384,9453,10414,10471,10481,10489,10495,10536,10549,10677,10711,10716,10718,10722,11065,11074,15201,15337,15444,15473,15549,15866,20004,20065,20085,20129,20132,20144,20146],"fullWord":20065},{"subwords":[5735,5984,5995,6092,6100,6101,9384,15312,15321,15337,15542,15549,15555,15748,18576,18844,18847,18941,19240,19992,19996,20066,20080,20095,20129,20132],"fullWord":20066},{"subwords":[9384,9453,15312,15337,15542,15549,15555,15748,15866,18844,18847,18941,19257,19377,19570,20067,20080,20085,20095,20129,20132,21135,21136],"fullWord":20067},{"subwords":[5830,5996,9384,11489,11512,11539,11645,11697,11706,11708,11743,11754,12387,12443,15175,15202,15337,15480,15481,15549,15551,20008,20068,20129,20132,20150,20152,20157],"fullWord":20068},{"subwords":[399,817,1106,1109,5588,5592,5595,5745,5976,10174,10285,10287,10324,10344,10355,10356,10471,10472,12229,12305,12306,12319,14821,14921,14923,14925,14968,15225,15337,19923,19924,19948,19950,19986,20014,20015,20026,20069],"fullWord":20069},{"subwords":[399,407,817,825,905,906,1106,1109,1110,1114,5588,5592,5593,5599,5976,5977,10207,10228,10285,10287,10288,10289,10324,10355,10360,10471,10472,14805,14881,14921,14923,14924,14929,14968,14973,15337,15354,15942,15948,15966,15968,16076,16078,16270,16274,16286,16419,16420,16448,17029,17030,17032,19923,19924,19925,19935,19967,19986,19987,20014,20015,20070,20071,20072],"fullWord":20072},{"subwords":[4678,4679,4680,4810,4826,5984,6092,6100,6104,15060,15071,15087,15093,15096,15337,15354,16311,16319,16320,16340,16425,16426,16449,16450,16472,19992,19996,19998,20000,20057,20070,20073,20074],"fullWord":20074},{"subwords":[5984,6008,6016,6092,6100,6104,15337,15344,15354,16319,16340,16425,16428,16449,16451,16472,19992,19996,19998,20000,20070,20073,20075],"fullWord":20075},{"subwords":[5984,6031,6039,6042,6092,6100,6104,15337,15354,16319,16340,16341,16342,16425,16429,16449,16452,16472,16474,19992,19996,19998,20000,20070,20073,20076],"fullWord":20076},{"subwords":[6004,6039,12979,12982,13007,13095,13099,15337,15354,15610,15611,15676,15679,15728,15732,16453,16454,17419,17424,17434,20070,20077,20078],"fullWord":20078},{"subwords":[6039,15337,15354,15777,15782,15840,15841,15849,18066,18071,18072,18073,18150,19876,19880,19881,19882,19886,20070,20079],"fullWord":20079},{"subwords":[5984,6092,6100,6101,6142,6171,15312,15337,15373,15748,18576,18677,19240,19992,19996,20080,20081,20095,20102,20103],"fullWord":20081},{"subwords":[5984,6092,6100,6104,15337,15354,16319,16340,16425,16449,16472,19992,19996,19998,20000,20070,20073,20082,20083],"fullWord":20083},{"subwords":[5984,6092,6100,6101,15312,15337,15748,18576,19240,19992,19996,20080,20082,20084,20095],"fullWord":20084},{"subwords":[5984,6033,6092,6100,6104,13489,13506,13508,13510,13577,13583,13584,14262,14281,14403,15248,15272,15305,15337,15354,16319,16336,16340,16425,16449,16472,17658,19992,19993,19995,19996,19998,20000,20070,20073,20086],"fullWord":20086},{"subwords":[5691,5693,5790,5791,5798,6031,6039,6042,6092,6104,10383,10392,10451,10453,10471,16319,16329,16342,16372,19992,20000,20087],"fullWord":20087},{"subwords":[399,407,488,1009,1106,1114,5616,5620,5626,6055,10241,10247,10285,10289,10324,10360,10366,10459,10460,10465,10471,10472,15942,15948,15960,15966,16041,16043,16076,16270,16274,16293,16457,16459,17022,17023,17029,17030,17750,17799,17811,18341,18370,18374,18541,18547,18548,18559,18660,19923,19924,19925,19926,19927,19935,19967,19970,19975,19978,19986,19987,20014,20088,20089,20095,20101],"fullWord":20089},{"subwords":[973,982,990,1009,1106,1114,5616,5618,5620,5626,6039,6055,16041,16043,16046,16076,16080,16270,16291,16293,16296,16457,16464,17799,17801,18487,18541,18559,19967,19968,19970,19973,19975,19978,20088,20090,20094,20095,20101],"fullWord":20090},{"subwords":[4680,4826,4854,6092,6104,16319,16320,16457,17816,17848,18575,18576,18577,18588,19992,20000,20088,20091,20095,20101],"fullWord":20091},{"subwords":[6092,6104,16319,16457,17825,17848,18576,18588,19992,20000,20088,20092,20095,20101],"fullWord":20092},{"subwords":[6018,15306,15312,15337,15354,15748,15866,15867,16457,18018,18019,19257,19258,19377,19570,19572,20070,20080,20085,20088,20093,20095,20101,21130,21135,21212],"fullWord":20093},{"subwords":[4862,5114,5234,5237,5267,6092,12752,18576,18577,18981,18983,19165,19992,20095,20097,20098,20265,20266],"fullWord":20098},{"subwords":[5984,6092,6100,6101,12979,13008,13095,13100,15312,15337,15610,15691,15694,15728,15748,18576,18981,19093,19101,19165,19240,19340,19992,19996,20080,20095,20097,20099,20265,20267],"fullWord":20099},{"subwords":[6092,6104,16319,16457,17435,17848,17938,18576,18588,18981,18985,19165,19992,20000,20088,20095,20097,20100,20101,20265,20269],"fullWord":20100},{"subwords":[5984,6092,6100,6104,6144,15337,15354,15373,15374,16319,16340,16425,16449,16472,16483,19992,19996,19998,20000,20070,20073,20102,20103,20104,20105],"fullWord":20104},{"subwords":[7493,7604,7638,7639,12387,12474,20008,20102,20106,20129,20152,20157,20222,21025,21029],"fullWord":20106},{"subwords":[43,337,385,399,436,1106,1272,1301,1307,1636,1817,6107,10061,10285,10324,10414,10471,10472,10481,10504,10536,10711,19919,19923,19924,19986,20004,20014,20107,20108,20110,20129,20144],"fullWord":20108},{"subwords":[49,337,385,1272,1307,1502,1761,9453,10061,10304,10504,10517,19919,19923,20107,20109,20110],"fullWord":20109},{"subwords":[204,326,327,337,338,399,436,1106,1120,4466,4569,4601,4714,4728,4739,4851,4856,4891,4935,5067,5071,5756,6107,9103,9104,9117,10090,10093,10119,10285,10286,10324,10327,10378,10414,10471,10472,10481,10530,10536,10537,10711,10712,19910,19919,19923,19924,19928,19986,19990,20004,20014,20017,20107,20110,20111,20126,20129,20130,20144],"fullWord":20111},{"subwords":[200,204,326,336,605,610,647,691,1120,1124,4461,4492,4571,4901,4985,5007,5037,5067,5068,5069,5070,9127,9307,15893,15928,15986,15988,16858,19911,19920,19948,19957,20107,20113,20114,20115,20152,20154,20167,20191],"fullWord":20114},{"subwords":[349,359,796,810,905,1124,2941,3001,3402,9376,9409,15880,16028,16142,16178,16769,16889,17722,20107,20115,20117,20118,20191],"fullWord":20118},{"subwords":[7604,7644,9092,9207,20123,20152,20162],"fullWord":20123},{"subwords":[3429,3693,3965,12965,13008,13038,15504,15592,15691,18823,18945,19093,19098,19165,19292,20124,20214],"fullWord":20124},{"subwords":[2869,3402,9207,9208,19708,19920,19948,20107,20125,20152,20155],"fullWord":20125},{"subwords":[4714,4826,4935,4939,5037,5071,5076,5114,5117,5221,5223,5267,5269,5728,9110,9111,9127,12752,12755,13101,16780,17323,20126,20127,20128,20129,20130,20134,20197,20198,20243,20246],"fullWord":20128},{"subwords":[657,663,665,1106,9200,9297,12229,12242,12252,12305,12387,12448,19920,19948,19950,20008,20038,20107,20129,20131,20152,20157],"fullWord":20131},{"subwords":[4714,4865,4935,5071,6092,6118,9108,19992,20126,20129,20130,20135,20136,20524,20532,20533,20720,20855,20856],"fullWord":20136},{"subwords":[5735,5984,5995,6092,6100,6118,6119,9384,15337,15347,15549,19992,19996,20129,20132,20135,20137,20532,20560,20587,20817,20855,20857],"fullWord":20137},{"subwords":[7627,7889,9409,12995,13007,15461,15472,16889,17722,20140,20141,20186,20187,20205],"fullWord":20141},{"subwords":[7889,8126,9369,12995,13048,13051,15461,15790,20140,20142,20186],"fullWord":20142},{"subwords":[7604,7644,9276,9913,9922,20143,20152],"fullWord":20143},{"subwords":[5780,6107,6109,9152,9157,9453,10414,10471,10481,10489,10495,10536,10583,10711,10713,11065,20004,20129,20144,20145,21110],"fullWord":20145},{"subwords":[5799,6107,6110,9416,9419,9436,9447,10414,10415,10459,10460,10465,10471,10481,10486,10536,10551,10686,10691,10694,10697,10707,10711,10719,10720,16457,16840,16907,16911,17093,17862,18844,18850,18863,18866,18870,18947,20004,20007,20088,20095,20101,20129,20134,20144,20147,20197],"fullWord":20147},{"subwords":[337,340,442,461,1124,9152,9155,15931,15942,16834,16844,17029,19919,19923,20107,20110,20112,20115,20148,20149,20191],"fullWord":20149},{"subwords":[647,691,1124,2800,2869,2906,3402,9207,9208,9209,9307,15880,15986,16134,16178,16769,16858,19920,19948,19957,20107,20115,20152,20154,20155,20156,20167,20191],"fullWord":20156},{"subwords":[337,399,423,430,436,637,714,1106,5745,6107,10120,10174,10285,10324,10344,10414,10471,10472,10481,10485,10536,10544,10625,10711,10714,12229,12238,12242,12305,12306,12387,12438,12439,19919,19920,19923,19924,19948,19950,19986,20004,20008,20009,20014,20026,20036,20107,20110,20129,20144,20152,20153,20157,20158],"fullWord":20158},{"subwords":[5946,5996,9384,9453,12366,12387,15175,15337,15549,15551,15866,20008,20013,20085,20129,20132,20152,20157,20160,20168,21120,21144],"fullWord":20160},{"subwords":[5996,9384,12387,15175,15337,15549,15551,20008,20129,20132,20152,20157,20163],"fullWord":20163},{"subwords":[9307,9360,9366,9369,12560,12597,12888,13048,16858,17383,18083,18117,19708,20152,20164,20165,20166,20167,20262],"fullWord":20166},{"subwords":[9293,9307,9453,10654,10662,11082,12438,12442,16858,17149,20152,20167,20168,20169,20170,21144,21145],"fullWord":20170},{"subwords":[337,340,487,1124,1125,10181,12812,12822,13087,13088,13090,15931,15942,15971,16837,16844,17029,17350,17354,17364,19919,19923,20107,20110,20112,20115,20171,20172,20173,20176,20191,20247,20250],"fullWord":20173},{"subwords":[6107,10414,10443,10460,10471,10481,10488,10536,10691,10694,10711,10897,10935,12812,12845,12852,18844,18863,18866,18981,19002,19017,19165,20004,20095,20097,20129,20144,20171,20174,20248,20250,20251,20255,20265],"fullWord":20174},{"subwords":[9360,10652,10663,10814,12438,12812,20152,20164,20171,20175,20250,20262],"fullWord":20175},{"subwords":[6033,9384,9389,9409,13577,13588,13705,13712,13715,13716,14262,14281,14309,14336,14403,14421,15248,15272,15305,15337,15354,15508,15509,15514,15524,15526,15549,15554,16883,16889,16890,17565,17591,17722,20070,20129,20132,20133,20134,20177,20178,20179,20180,20197],"fullWord":20179},{"subwords":[299,349,1115,7375,7889,9376,12680,12995,13087,14758,15461,20107,20140,20181,20186],"fullWord":20181},{"subwords":[6004,9384,9389,9409,12979,12982,13007,13022,13095,13099,15337,15354,15526,15549,15554,15610,15611,15676,15728,15732,16453,16889,16890,17419,17722,20070,20077,20129,20132,20133,20134,20183,20184,20197,20205],"fullWord":20184},{"subwords":[7604,7644,8015,9391,15461,15494,15557,20152,20185],"fullWord":20185},{"subwords":[7627,7889,9409,12995,13007,15461,15472,16889,17722,20140,20141,20186,20187,20205],"fullWord":20187},{"subwords":[6107,9384,10414,10471,10481,10536,10549,10677,10711,10716,10722,15337,15444,15473,15549,20004,20129,20132,20144,20146,20188],"fullWord":20188},{"subwords":[9384,15312,15337,15542,15549,15555,15748,15777,15858,18844,18847,18941,19356,19894,20080,20095,20129,20132,20189,20190],"fullWord":20190},{"subwords":[200,204,209,326,327,331,336,948,1106,1114,1120,1124,4461,4569,4570,4571,4714,4826,4851,4852,4901,4935,4939,5037,5067,5070,5071,5076,9103,9106,9111,9127,15893,15928,16076,16077,16270,16780,19910,19911,19967,19990,20107,20115,20126,20129,20130,20134,20191,20192,20197,20198],"fullWord":20192},{"subwords":[214,269,280,1106,1114,1115,1124,5716,7396,7439,7638,7643,15910,15912,16076,16270,19967,20003,20107,20115,20129,20134,20191,20193,20197],"fullWord":20193},{"subwords":[200,204,326,336,349,359,854,905,1120,1124,4461,4571,4901,5037,5067,5070,9127,9376,9409,14736,14751,14776,14779,15428,15443,15893,15928,16028,16889,17722,19911,20107,20115,20191,20194],"fullWord":20194},{"subwords":[4370,16178,16769,16779,16903,18083,20196],"fullWord":20196},{"subwords":[8678,8679,8989,8997,9307,16629,16655,16748,16858,16874,18083,18117,19592,19708,20152,20167,20200],"fullWord":20200},{"subwords":[7604,7611,7644,9138,9307,12462,16815,16858,16866,20152,20167,20201],"fullWord":20201},{"subwords":[9307,9360,9366,12462,12560,16858,17383,20152,20164,20165,20167,20202,20262],"fullWord":20202},{"subwords":[9413,9447,16903,16907,16915,18947,20203,20204],"fullWord":20204},{"subwords":[9409,13007,16889,16899,16903,17434,17722,20205,20206],"fullWord":20206},{"subwords":[973,990,1124,9447,16041,16903,16907,16915,18347,18487,18947,19970,19973,19975,19978,20107,20115,20191,20195,20207,20208,20210],"fullWord":20208},{"subwords":[337,340,1124,15931,15942,16844,17029,18083,19610,19611,19871,19919,19923,20107,20110,20112,20115,20191,20209],"fullWord":20209},{"subwords":[337,340,434,488,1124,9437,9447,10126,10241,10686,10691,10707,15931,15942,15960,16041,16840,16844,16907,17022,17029,17093,18347,18349,18353,18863,18947,19919,19923,19970,19975,19978,20107,20110,20112,20115,20191,20207,20210,20212,20213],"fullWord":20213},{"subwords":[6107,10414,10460,10471,10481,10536,10691,10694,10711,18844,18863,18866,18876,18950,18960,20004,20095,20129,20144,20215],"fullWord":20215},{"subwords":[93,1106,3080,3088,3402,9079,20107,20119,20129,20216,20217,20219],"fullWord":20217},{"subwords":[693,700,9325,12463,18347,18408,18894,19920,19948,19975,20107,20152,20210,20216,20218],"fullWord":20218},{"subwords":[5918,9307,12387,12474,12476,16483,16858,16860,16922,20008,20012,20102,20129,20134,20152,20157,20161,20167,20197,20222,20223,21025,21029],"fullWord":20223},{"subwords":[204,213,326,349,854,1120,5067,9376,9455,14736,14776,15428,20107,20224,20225],"fullWord":20225},{"subwords":[9384,15337,15549,20129,20132,20224,20226,20227],"fullWord":20226},{"subwords":[9392,9409,16889,17722,20224,20227,20228],"fullWord":20228},{"subwords":[9409,13007,16889,17722,20205,20224,20229,20230,21312],"fullWord":20230},{"subwords":[487,2813,3597,3600,3701,3702,3703,10072,10181,10760,13087,13088,13090,15880,15942,15971,17029,17316,17354,19923,20231,20232,20250],"fullWord":20232},{"subwords":[183,197,200,204,950,5221,12675,12677,13087,15893,17294,17323,17324,20235,20236],"fullWord":20236},{"subwords":[5718,5721,7790,7889,18066,19876,20237,20238,20290],"fullWord":20238},{"subwords":[3638,3644,3657,3997,3998,4639,4656,4714,4909,4935,5071,5096,5114,5267,9079,9082,9110,12752,12757,13101,19991,20119,20120,20126,20127,20129,20130,20233,20239,20240,20243],"fullWord":20240},{"subwords":[3693,3898,3997,4001,9079,9384,12965,12979,13095,15021,15337,15411,15549,15592,15610,15728,20119,20129,20132,20183,20233,20239,20241],"fullWord":20241},{"subwords":[3948,3997,4004,6023,9079,9085,16178,16298,16769,17316,20119,20121,20129,20134,20197,20233,20234,20239,20242],"fullWord":20242},{"subwords":[4714,4859,4928,4931,4935,4936,5011,5071,5072,5114,5267,9110,12745,12752,13101,20126,20127,20129,20130,20243,20244],"fullWord":20244},{"subwords":[4714,4810,4860,4935,5023,5071,5073,5114,5115,5267,5268,5381,5408,9110,9384,9385,12752,12979,13095,13101,15060,15078,15337,15428,15433,15549,15550,15600,15603,15610,15728,15729,20058,20126,20127,20129,20130,20132,20183,20243,20245],"fullWord":20245},{"subwords":[5799,6107,6110,9416,10414,10415,10443,10447,10471,10481,10486,10488,10536,10551,10711,10719,10888,10935,10940,12812,12822,12845,12848,12852,12854,16837,17097,17350,17354,17359,17364,17374,20004,20007,20129,20134,20144,20171,20176,20197,20248,20249,20250,20251,20252],"fullWord":20249},{"subwords":[5780,10443,10471,10488,10489,10495,10935,10937,11065,12845,20250,20251,20254,21110],"fullWord":20254},{"subwords":[10443,10447,10459,10460,10465,10471,10488,10888,10896,10897,10901,10935,10940,12845,12848,16457,17097,17113,17354,17359,17374,17435,17903,17938,18981,18985,19017,19165,20088,20095,20097,20101,20250,20251,20252,20255,20256,20257,20265,20269],"fullWord":20256},{"subwords":[5782,5846,10443,10470,10471,10488,10935,11870,12034,12059,12110,12845,13107,13109,20023,20250,20251,20258],"fullWord":20258},{"subwords":[10443,10460,10470,10471,10488,10897,10929,10935,11050,12845,13059,13107,18981,19017,19165,19605,20095,20097,20250,20251,20255,20259,20265],"fullWord":20259},{"subwords":[9422,9447,11772,11780,11854,11862,12007,12010,12030,12869,12870,12872,16907,17179,17435,18882,18947,19026,19034,19165,20150,20151,20260,20261],"fullWord":20261},{"subwords":[6171,12979,13008,13095,13100,13141,15312,15337,15373,15610,15691,15694,15728,15748,18677,18981,19093,19101,19165,19340,20080,20095,20097,20102,20263,20265,20267,20281],"fullWord":20263},{"subwords":[911,919,12680,12686,13008,13087,13091,14898,14939,15691,15864,18432,18449,18463,19093,19094,19122,19165,19186,19231,19347,19377,19573,19966,19975,20264],"fullWord":20264},{"subwords":[6004,6018,12979,12982,13007,13008,13011,13095,13099,13100,15306,15312,15337,15354,15610,15611,15676,15691,15694,15695,15700,15728,15732,15748,16453,16457,17419,17429,17435,17924,17938,17939,17987,18981,18985,19093,19101,19103,19113,19165,19340,19342,20070,20077,20080,20088,20095,20097,20101,20265,20267,20268,20269],"fullWord":20268},{"subwords":[7604,7637,7874,7889,7891,9267,9325,9335,9360,12463,12509,12574,18894,18901,18993,19036,19043,19165,20152,20164,20262,20270],"fullWord":20270},{"subwords":[18844,18981,19165,20095,20097,20129,20219,20220,20265,20271],"fullWord":20271},{"subwords":[10443,10447,10471,10488,10888,10935,10940,10942,10952,12845,12848,13110,13112,13114,13118,16475,17059,17097,17121,17354,17359,17374,17464,20250,20251,20252,20273,20275,20276,20280,20875,20877,20889,20962],"fullWord":20276},{"subwords":[6004,12979,12982,13007,13095,13099,13110,13112,15302,15337,15354,15610,15611,15676,15728,15732,15734,15744,16445,16453,16475,17419,17464,17466,18272,20070,20077,20273,20277,20278,20280,20288,20289,20875,20877,20933,20947,20962],"fullWord":20278},{"subwords":[7604,7889,7892,9360,12509,12606,13113,13119,20152,20164,20262,20273,20279,20742,20774,20790,20804,20897],"fullWord":20279},{"subwords":[269,299,1106,1115,1196,5718,7439,7447,7889,7895,8203,13087,20282,21097,21162],"fullWord":20282},{"subwords":[12979,13051,13095,13145,15337,15610,15706,15728,15777,15866,20085,20283,21189,21193,21196],"fullWord":20283},{"subwords":[11921,11936,11939,11941,12872,13007,15627,15638,15652,15655,20284,20285],"fullWord":20285},{"subwords":[13007,13051,13052,15734,15744,17451,17464,20273,20280,20286,20287,20288,20289],"fullWord":20287},{"subwords":[111,2813,2869,3071,3459,10072,11001,19600,19610,19923,19948,20291],"fullWord":20291},{"subwords":[1115,7293,7375,8099,10109,10981,14758,15790,19610,19837,19923,20292],"fullWord":20292},{"subwords":[399,1106,5627,10285,10324,10470,10471,10472,19610,19902,19923,19924,19937,19942,19986,20014,20293,20294],"fullWord":20294},{"subwords":[15942,17029,19610,19611,19871,19923,20293,20295],"fullWord":20295},{"subwords":[17,43,385,399,1145,1155,1219,1220,1301,1498,1510,1636,1895,1949,5632,10061,10292,10324,20297,20369,20501,20519],"fullWord":20297},{"subwords":[49,385,1155,1234,1498,1502,1510,1895,2724,10061,10292,10304,20298,20493,21079,21082],"fullWord":20298},{"subwords":[148,149,1145,1147,4438,4574,4590,4865,5659,20303,20304,20309,20310,20524],"fullWord":20304},{"subwords":[148,151,817,1145,1147,4438,4516,4517,4574,4590,4607,4810,4865,5330,5340,5361,5588,5659,5690,5976,14736,14933,14961,14962,15060,20303,20305,20309,20310,20311,20410,20412,20413,20417,20418,20510,20524],"fullWord":20305},{"subwords":[148,155,399,1145,1147,1155,4438,4466,4574,4575,4590,4601,4728,4865,5659,5756,10090,10093,10094,10292,10293,10324,10327,10378,10490,20303,20306,20309,20310,20369,20370,20501,20502,20524,20566],"fullWord":20306},{"subwords":[148,1155,4438,4574,4578,5564,10090,10108,10292,10304,20303,20307,20308,20493,21079,21082],"fullWord":20307},{"subwords":[200,817,825,905,906,1145,1147,1150,4516,4520,4574,4607,4611,4810,4826,4865,4873,5330,5336,5361,5588,5599,5976,5977,14736,14751,14881,14882,14933,14938,14961,14965,15060,15087,15281,15893,16089,16090,16091,16270,16286,16419,16475,18203,18220,20303,20309,20311,20312,20313,20318,20410,20412,20416,20417,20418,20419,20442,20449,20510,20512,20524,20531],"fullWord":20312},{"subwords":[200,326,327,331,336,948,1145,1147,1150,4461,4574,4714,4826,4865,4873,4901,4935,4939,5037,9103,9106,9111,9127,15893,15928,16089,16090,16270,16475,16780,20303,20309,20313,20314,20315,20317,20318,20449,20524,20531,20720,20725,20826,20827],"fullWord":20315},{"subwords":[287,326,605,1154,1158,4492,4502,4574,4576,4890,4947,4985,4993,7253,7283,7604,7747,12230,20303,20314,20316,20326,20349,20393,20394,20399,20742,20774,20779,20790],"fullWord":20316},{"subwords":[817,825,828,905,906,1145,1150,5588,5599,5976,5977,6308,6317,6321,6392,6395,6507,14881,14933,14938,15114,15134,15281,15904,15906,16089,16091,16270,16286,16419,16431,16475,18220,20319,20320,20410,20417,20419,20442,20449,20510,20512],"fullWord":20320},{"subwords":[227,817,828,1145,1166,1196,5588,5976,6239,6308,6317,6386,6392,6507,6509,7050,7140,14933,14939,15114,15864,15866,20319,20321,20410,20417,20448,20493,20510,20513,21010,21016,21071,21079,21097,21099,21138],"fullWord":20321},{"subwords":[399,1145,1155,5765,6507,6723,6734,6756,10292,10324,10333,20322,20369,20501],"fullWord":20322},{"subwords":[254,1009,1145,1147,4447,4551,4574,4595,4683,4701,4865,5620,5705,6055,6230,6231,6344,6347,6348,6399,6406,6485,6507,7240,18339,18521,18541,20303,20309,20323,20324,20524,20553,20594],"fullWord":20324},{"subwords":[254,255,817,828,911,1009,1145,5588,5620,5705,5976,5982,6055,6308,6317,6332,6344,6347,6392,6399,6485,6507,7042,7073,14754,14898,14901,14933,15114,15135,15312,15748,18449,18453,18521,18541,18554,19243,20319,20323,20325,20410,20417,20444,20464,20510,20553,20588,20594],"fullWord":20325},{"subwords":[269,279,280,817,825,905,906,1145,1150,5588,5599,5976,5977,5988,5992,7375,7391,7396,7461,7463,7939,7991,14758,14762,14764,14773,14881,14933,14938,15141,15281,15910,15912,15914,16026,16089,16091,16270,16286,16419,16475,18181,18182,18220,20326,20327,20329,20330,20331,20341,20410,20417,20419,20442,20449,20510,20512],"fullWord":20330},{"subwords":[269,270,1145,1147,4574,4865,5707,5709,7253,7267,7269,7270,20303,20309,20326,20327,20328,20332,20524],"fullWord":20332},{"subwords":[269,817,1145,5588,5709,5976,5988,7267,7269,7271,7375,7461,7991,14758,14762,14933,15141,20326,20327,20329,20333,20410,20417,20510],"fullWord":20333},{"subwords":[269,399,1145,1155,5709,7267,7269,7293,7298,7477,10109,10292,10324,10398,20326,20327,20334,20369,20501],"fullWord":20334},{"subwords":[1155,7267,7293,7447,10109,10292,10304,20326,20335,20493,21079,21082],"fullWord":20335},{"subwords":[299,300,1158,7267,7352,7747,7818,7892,12230,12509,12606,13119,20326,20336,20339,20393,20399,20897],"fullWord":20336},{"subwords":[287,288,1154,1158,7267,7283,7352,7578,7604,7747,12230,20326,20337,20349,20393,20399,20742,20774,20790],"fullWord":20337},{"subwords":[269,617,622,817,1145,1158,5588,5595,5894,5976,5988,7375,7461,7493,7747,7749,7991,12229,12230,12319,12390,14758,14762,14821,14832,14833,14933,15141,20326,20327,20329,20338,20393,20396,20399,20410,20417,20432,20505,20510,20579,20972,20984],"fullWord":20338},{"subwords":[299,304,1158,1161,7396,7747,7751,7892,7894,12230,12233,12509,12512,12560,12606,12610,13119,13124,15910,15921,15986,16001,16089,16095,17211,17284,17383,17389,17464,17469,18181,18195,18196,20326,20339,20340,20341,20393,20399,20449,20897],"fullWord":20340},{"subwords":[617,1145,1158,8409,8540,8588,8593,8625,12229,12390,20342,20349,20393,20396,20505,20579,20599,20635,20656,20774,20785],"fullWord":20342},{"subwords":[325,932,8362,8409,8416,8920,8930,12809,12810,12895,12898,16089,16686,16716,17464,20343,20344,20449,20450,20599,20689,20690,20709,20903,20925,20926],"fullWord":20344},{"subwords":[326,327,337,338,399,1145,1147,1155,4466,4574,4601,4714,4728,4739,4865,4891,4935,5756,9103,9104,9117,10090,10093,10119,10292,10293,10324,10327,10378,10414,10490,10530,10536,10537,20303,20309,20314,20345,20346,20369,20370,20501,20502,20524,20566,20720,20733,20751,20755,20756],"fullWord":20346},{"subwords":[337,349,399,817,857,1145,1155,5588,5592,5976,9376,9384,10121,10292,10324,10355,10414,10502,10536,10549,10675,10677,14780,14933,14968,15399,15444,15473,20345,20347,20369,20371,20410,20417,20501,20510,20560,20755,20817],"fullWord":20347},{"subwords":[973,990,9447,16041,16089,16096,16903,16907,16915,18211,18216,18347,18487,18521,18527,18947,19508,20351,20352,20353,20356,20449,20457,20462,20467,20841,20842,20853],"fullWord":20352},{"subwords":[169,326,327,1009,1145,1147,4551,4574,4714,4865,4935,4942,5620,5680,6055,9103,18339,18347,18521,18541,18835,18844,18845,20303,20309,20314,20353,20354,20524,20594,20720,20842],"fullWord":20354},{"subwords":[349,817,911,1009,1145,5588,5620,5976,5982,6055,9376,9382,9384,14898,14901,14933,15312,15542,15748,18347,18449,18453,18521,18541,18554,18844,18847,18941,19524,20353,20355,20410,20417,20444,20464,20510,20560,20588,20594,20817,20842,21000,21001],"fullWord":20355},{"subwords":[204,326,327,1106,1120,1145,1147,4569,4574,4714,4851,4865,4935,5067,5071,9103,19910,19990,20107,20126,20129,20130,20135,20303,20309,20314,20357,20358,20473,20474,20524,20720,20855,20856],"fullWord":20358},{"subwords":[349,817,1106,1109,1145,5588,5976,9376,9384,14921,14933,15337,15549,20107,20129,20132,20135,20357,20359,20410,20417,20473,20475,20481,20510,20560,20817,20855,20857],"fullWord":20359},{"subwords":[1106,1114,1124,1145,1150,16076,16089,16270,16475,19967,20107,20115,20129,20134,20135,20138,20191,20197,20357,20360,20449,20473,20478,20826,20855,20860],"fullWord":20360},{"subwords":[617,950,955,1145,1150,1158,1161,5918,9836,9843,9978,12229,12390,12397,15939,15986,15995,16007,16089,16095,16270,16475,16481,16944,16951,17216,17234,18195,18197,20361,20363,20364,20367,20393,20396,20398,20449,20497,20505,20508,20579,20584],"fullWord":20364},{"subwords":[817,825,867,868,905,906,950,953,955,1145,1150,5588,5599,5976,5977,14798,14802,14881,14933,14938,15281,15939,16089,16091,16270,16286,16419,16475,16951,18220,20361,20365,20366,20367,20410,20417,20419,20423,20424,20442,20449,20497,20510,20512,20979,20980],"fullWord":20366},{"subwords":[287,369,1154,1158,7283,7444,7604,7747,9276,9913,9922,12230,20326,20349,20368,20393,20399,20742,20774,20790,20796],"fullWord":20368},{"subwords":[287,337,416,426,1154,1155,1158,7283,7293,7585,7604,7747,10109,10120,10292,10295,10298,10637,12230,12238,12438,20326,20345,20349,20373,20393,20399,20742,20774,20790],"fullWord":20373},{"subwords":[399,1145,1147,1155,4466,4574,4601,4728,4865,5756,5778,9760,10090,10093,10128,10129,10292,10293,10324,10327,10338,10378,10416,10490,20303,20309,20361,20362,20369,20370,20374,20375,20497,20501,20502,20524,20566],"fullWord":20375},{"subwords":[399,817,867,1145,1155,5588,5592,5778,5976,9760,10128,10130,10214,10292,10324,10338,10355,10416,14798,14933,14968,20361,20365,20369,20371,20374,20376,20410,20417,20423,20497,20501,20510,20979],"fullWord":20376},{"subwords":[481,1070,1155,10182,10292,13204,13391,13408,13413,20374,20377,20471],"fullWord":20377},{"subwords":[0,317,442,443,1155,8268,8409,10292,20378,20379,20380,20599],"fullWord":20380},{"subwords":[382,442,461,1155,1157,10292,10299,15942,16089,17037,20378,20379,20381,20386,20449],"fullWord":20381},{"subwords":[399,442,1145,1147,1155,4466,4574,4601,4728,4744,4865,5559,5756,5780,10090,10093,10102,10292,10293,10324,10327,10343,10378,10490,20303,20309,20369,20370,20378,20382,20501,20502,20524,20566,20571],"fullWord":20382},{"subwords":[399,442,488,1009,1145,1155,5620,5780,6055,10247,10292,10324,10343,10460,18370,18381,18521,18541,18547,18591,20369,20378,20383,20389,20501,20571,20575,20594],"fullWord":20383},{"subwords":[442,457,481,1155,1164,10182,10292,10864,10942,12856,12913,13114,13204,13217,13408,13413,13977,14056,14080,14229,20378,20384,20927],"fullWord":20384},{"subwords":[442,457,1155,1164,10292,10942,12856,13114,20378,20385,20964],"fullWord":20385},{"subwords":[488,693,1074,1155,1158,10292,10298,11001,12292,12300,12659,18408,18508,18521,19434,19435,19600,19605,19715,20387,20389,20393,20404,20471],"fullWord":20387},{"subwords":[905,1155,1157,10292,10299,14933,14938,15942,16089,17037,17141,19837,19868,19871,20388,20410,20442,20449,20471,20472],"fullWord":20388},{"subwords":[399,405,488,491,817,911,1009,1145,1155,5588,5592,5620,5976,5982,6055,10247,10254,10292,10324,10355,10460,14898,14901,14933,14968,15312,15748,18370,18372,18449,18453,18521,18541,18547,18554,19229,20369,20371,20389,20390,20410,20417,20444,20464,20501,20510,20575,20588,20594],"fullWord":20390},{"subwords":[586,11330,11399,11400,12127,12134,15973,16089,18103,18107,18189,18274,19871,20391,20449],"fullWord":20391},{"subwords":[574,586,11270,11399,12127,12131,13408,14476,19624,20392,20968],"fullWord":20392},{"subwords":[605,608,609,617,817,1145,1147,1158,1159,4492,4500,4516,4532,4574,4576,4605,4607,4774,4810,4865,5330,5335,5361,5588,5595,5865,5976,12229,12274,12319,12358,12390,14736,14821,14826,14933,14961,15060,15227,20303,20309,20311,20393,20394,20395,20396,20397,20410,20412,20414,20417,20418,20432,20433,20505,20510,20524,20579,20581,20984],"fullWord":20395},{"subwords":[269,399,617,620,625,1145,1155,1158,5745,7293,7298,7477,7493,7494,7674,7680,7747,10109,10174,10292,10298,10324,10344,10398,12229,12230,12390,20326,20327,20369,20393,20396,20399,20400,20501,20505,20579],"fullWord":20400},{"subwords":[287,657,1154,1158,1160,7283,7604,7747,7750,9297,12230,12252,20326,20349,20393,20399,20401,20742,20774,20790],"fullWord":20401},{"subwords":[399,617,653,1145,1155,1158,5745,5778,9760,9836,9978,10128,10174,10177,10292,10298,10324,10338,10344,10416,12229,12390,20361,20363,20369,20374,20393,20396,20402,20497,20501,20505,20579],"fullWord":20402},{"subwords":[617,657,663,817,1145,1158,5588,5595,5976,12229,12252,12319,12390,14821,14933,20393,20396,20403,20410,20417,20432,20505,20510,20579,20984],"fullWord":20403},{"subwords":[605,617,693,694,695,1009,1145,1147,1158,1159,4492,4500,4512,4551,4574,4576,4605,4774,4788,4865,5620,5865,6055,6074,12229,12325,12374,12390,12399,18339,18408,18521,18541,18607,18610,20303,20309,20393,20394,20396,20397,20404,20405,20505,20524,20579,20581,20585,20594],"fullWord":20405},{"subwords":[617,693,694,709,817,911,1009,1145,1158,5588,5595,5620,5976,5982,6055,6074,12229,12319,12325,12374,12390,12399,14821,14847,14898,14901,14933,15241,15312,15748,18408,18449,18453,18460,18521,18541,18554,18607,18649,20393,20396,20404,20406,20410,20417,20432,20444,20464,20505,20510,20579,20585,20588,20594,20984],"fullWord":20406},{"subwords":[657,666,686,693,1158,12252,12293,12528,12574,12575,12606,12686,13119,18408,18432,18521,19036,19166,19178,19548,20393,20404,20407,20897,20899],"fullWord":20407},{"subwords":[781,13364,13408,13850,13851,18347,18436,18521,18926,18928,20353,20409,20842],"fullWord":20409},{"subwords":[43,44,385,399,817,1145,1155,1301,1304,1366,1377,1498,1500,1535,1636,1915,1933,1949,2308,2317,2358,2359,2396,5588,5592,5976,10061,10292,10324,10355,14933,14968,14995,20369,20371,20410,20411,20417,20501,20510,20519],"fullWord":20411},{"subwords":[148,151,817,1145,1147,4438,4516,4517,4574,4590,4607,4810,4865,5330,5340,5361,5588,5659,5690,5976,14736,14933,14961,14962,15060,20303,20305,20309,20310,20311,20410,20412,20413,20417,20418,20510,20524],"fullWord":20413},{"subwords":[605,608,609,617,817,1145,1147,1158,1159,4492,4500,4516,4532,4574,4576,4605,4607,4774,4810,4865,5330,5335,5361,5588,5595,5865,5976,12229,12274,12319,12358,12390,14736,14821,14826,14933,14961,15060,15227,20303,20309,20311,20393,20394,20395,20396,20397,20410,20412,20414,20417,20418,20432,20433,20505,20510,20524,20579,20581,20984],"fullWord":20414},{"subwords":[817,1145,1147,4516,4518,4574,4607,4810,4865,5330,5331,5346,5361,5588,5976,6008,14736,14872,14933,14934,14961,14983,15060,15084,15358,20303,20309,20311,20410,20412,20415,20417,20418,20440,20510,20524],"fullWord":20415},{"subwords":[349,352,817,1145,5588,5976,6008,9376,9384,14872,14933,14934,14983,20410,20417,20420,20510,20560,20817,20819,20991],"fullWord":20420},{"subwords":[337,349,361,1155,1166,9376,10121,10292,10304,10502,10675,14780,14933,14937,14939,15399,15558,15864,20345,20410,20421,20448,20493,20771,20824,21010,21079,21082],"fullWord":20421},{"subwords":[287,349,1154,1158,7283,7375,7604,7747,7918,8015,9376,9378,12230,14758,14784,14821,14832,14838,14933,15461,15494,20326,20349,20393,20399,20410,20422,20432,20742,20774,20790,20972,20995],"fullWord":20422},{"subwords":[817,869,871,1145,1147,4472,4475,4516,4574,4607,4810,4818,4819,4865,5318,5330,5342,5361,5588,5658,5976,11107,11115,11120,11276,11286,11399,11437,11438,11539,11595,14736,14808,14933,14961,14975,15060,15202,20303,20309,20311,20410,20412,20417,20418,20425,20426,20510,20524],"fullWord":20426},{"subwords":[817,869,872,1145,5588,5976,6008,11276,11286,11399,11437,11539,11595,14808,14872,14933,14934,14975,14983,14986,15202,15359,20410,20417,20425,20427,20510],"fullWord":20427},{"subwords":[594,869,884,1155,1166,10136,10292,10304,11173,11276,11303,11329,11399,11408,12200,14808,14933,14937,14939,15864,20410,20425,20428,20448,20493,21010,21051,21079,21082],"fullWord":20428},{"subwords":[869,911,8290,8346,8360,8378,8409,11276,11320,11361,11369,11399,14775,14808,14898,14933,18389,18449,18521,18694,18967,19216,20410,20425,20430,20444,20599,20607,20617,20976],"fullWord":20430},{"subwords":[574,586,869,920,11270,11276,11399,13286,13408,14240,14476,14808,14816,14851,14933,15747,15806,15815,19624,20410,20425,20431,20436,20968,20973],"fullWord":20431},{"subwords":[605,608,609,617,817,1145,1147,1158,1159,4492,4500,4516,4532,4574,4576,4605,4607,4774,4810,4865,5330,5335,5361,5588,5595,5865,5976,12229,12274,12319,12358,12390,14736,14821,14826,14933,14961,15060,15227,20303,20309,20311,20393,20394,20395,20396,20397,20410,20412,20414,20417,20418,20432,20433,20505,20510,20524,20579,20581,20984],"fullWord":20433},{"subwords":[617,817,1145,1158,5588,5595,5976,6008,12229,12319,12390,14821,14872,14933,14934,14983,15275,20393,20396,20410,20417,20432,20434,20441,20505,20510,20579,20984],"fullWord":20434},{"subwords":[732,733,735,817,1145,1147,4516,4574,4607,4810,4865,5323,5330,5361,5588,5956,5976,13171,13174,13286,13292,13294,13295,13408,13409,13410,13439,13455,13478,13577,13630,14262,14736,14851,14852,14853,14933,14961,14979,15060,15248,20303,20309,20311,20410,20412,20417,20418,20436,20437,20510,20524,20973],"fullWord":20437},{"subwords":[732,735,817,1145,5588,5956,5976,6008,13286,13294,13297,13408,13410,13439,13455,13577,13630,14262,14289,14851,14852,14854,14872,14933,14934,14979,14983,15248,15372,20410,20417,20436,20438,20510,20973],"fullWord":20438},{"subwords":[817,1145,1147,4516,4518,4574,4607,4810,4865,5330,5331,5346,5361,5588,5976,6008,14736,14872,14933,14934,14961,14983,15060,15084,15358,20303,20309,20311,20410,20412,20415,20417,20418,20440,20510,20524],"fullWord":20440},{"subwords":[617,817,1145,1158,5588,5595,5976,6008,12229,12319,12390,14821,14872,14933,14934,14983,15275,20393,20396,20410,20417,20432,20434,20441,20505,20510,20579,20984],"fullWord":20441},{"subwords":[905,14933,14938,16089,20410,20442,20443,20449],"fullWord":20443},{"subwords":[817,911,1009,1145,1147,4516,4537,4551,4553,4574,4607,4810,4812,4865,5327,5330,5361,5588,5620,5976,5982,6055,14736,14898,14901,14902,14933,14961,15060,15312,15318,15748,18339,18449,18450,18453,18454,18521,18541,18554,19205,19233,20303,20309,20311,20410,20412,20417,20418,20444,20445,20464,20510,20524,20588,20594],"fullWord":20445},{"subwords":[200,325,932,934,1145,1147,1150,4543,4574,4614,4826,4865,4873,8217,8219,8362,8409,8410,8416,8417,8440,8443,8588,8594,15893,16089,16090,16270,16475,16503,16504,16565,16574,16581,16610,20303,20309,20313,20318,20449,20450,20451,20524,20531,20599],"fullWord":20451},{"subwords":[325,817,825,905,906,932,1145,1150,5588,5599,5976,5977,8333,8338,8362,8409,8416,8417,8418,8453,8456,8552,8584,8588,8594,8934,14775,14881,14886,14933,14938,15281,15360,15376,15377,16089,16091,16270,16286,16419,16475,16549,16574,16577,16610,16724,18220,20410,20417,20419,20442,20449,20450,20452,20510,20512,20599],"fullWord":20452},{"subwords":[325,932,936,973,1145,1150,6039,8362,8409,8416,8417,8419,8588,8594,16033,16089,16096,16270,16291,16475,16482,16571,16574,16609,16610,16614,18210,20449,20450,20453,20599],"fullWord":20453},{"subwords":[200,1009,1145,1147,1150,4551,4555,4574,4826,4865,4873,5616,5620,5626,6055,15893,16041,16043,16044,16089,16090,16270,16293,16457,16475,17806,17850,18211,18222,18339,18340,18521,18527,18541,18559,18575,19508,20303,20309,20313,20318,20449,20457,20458,20459,20467,20524,20531,20591,20594,20596],"fullWord":20459},{"subwords":[817,825,905,906,911,918,993,1009,1145,1150,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14933,14935,14938,15281,15306,15312,15748,16041,16043,16089,16091,16270,16286,16293,16419,16457,16475,17773,17775,17850,17953,17964,18207,18211,18220,18222,18449,18453,18455,18472,18521,18523,18527,18541,18554,18557,18559,19256,19381,19508,20410,20417,20419,20442,20444,20446,20449,20457,20458,20460,20464,20465,20467,20510,20512,20588,20591,20594,20596,20987],"fullWord":20460},{"subwords":[973,982,990,1009,1145,1150,5616,5618,5620,5626,6039,6055,16041,16043,16046,16089,16096,16270,16291,16293,16296,16457,16464,16475,16482,17850,17852,18211,18216,18222,18223,18487,18521,18527,18541,18559,19508,20449,20457,20458,20461,20462,20467,20591,20593,20594,20596],"fullWord":20461},{"subwords":[817,825,905,906,911,918,993,1009,1145,1150,5588,5599,5616,5620,5626,5976,5977,5982,6018,6055,14881,14898,14901,14905,14912,14933,14935,14938,15281,15306,15312,15748,16041,16043,16089,16091,16270,16286,16293,16419,16457,16475,17773,17775,17850,17953,17964,18207,18211,18220,18222,18449,18453,18455,18472,18521,18523,18527,18541,18554,18557,18559,19256,19381,19508,20410,20417,20419,20442,20444,20446,20449,20457,20458,20460,20464,20465,20467,20510,20512,20588,20591,20594,20596,20987],"fullWord":20465},{"subwords":[227,817,911,919,1009,1145,1166,1196,5588,5620,5976,5982,6055,14898,14901,14933,14939,15312,15748,15864,15866,18449,18453,18521,18541,18554,18558,19231,19257,19377,19570,20410,20417,20444,20447,20448,20464,20466,20493,20510,20513,20588,20594,21010,21016,21071,21079,21097,21099,21135,21138],"fullWord":20466},{"subwords":[693,711,1158,1161,12293,12560,12574,12575,12591,12606,12610,12686,12692,13119,13124,15986,16041,16089,16095,17278,17284,17383,17435,17464,17469,17885,17941,18195,18211,18408,18428,18432,18435,18521,18527,19036,19057,19166,19178,19180,19181,19508,19548,19550,20393,20404,20408,20449,20457,20467,20468,20897,20899,20902,20958],"fullWord":20468},{"subwords":[399,488,1009,1145,1155,5620,6055,10247,10292,10324,10460,18370,18495,18498,18521,18541,18547,18565,19509,20369,20389,20469,20470,20501,20575,20594],"fullWord":20470},{"subwords":[817,825,905,906,1106,1109,1110,1114,1145,1150,5588,5599,5976,5977,14881,14921,14929,14933,14938,15281,15337,15354,16076,16078,16089,16091,16270,16286,16419,16475,18220,19967,20070,20071,20410,20417,20419,20442,20449,20473,20475,20476,20478,20510,20512],"fullWord":20476},{"subwords":[227,817,1106,1109,1145,1166,1196,5588,5976,14921,14933,14939,15337,15864,15866,19966,20085,20410,20417,20448,20473,20475,20477,20479,20484,20493,20510,20513,21010,21016,21071,21079,21097,21099,21138],"fullWord":20477},{"subwords":[1106,1114,1145,1150,1196,1197,5619,16076,16089,16103,16270,16475,18217,19967,20449,20473,20478,20479,20480,20484,20493,20496,21016,21017,21079,21093,21097,21105,21130,21138,21139],"fullWord":20480},{"subwords":[349,817,1106,1109,1145,5588,5976,9376,9384,14921,14933,15337,15549,20107,20129,20132,20135,20357,20359,20410,20417,20473,20475,20481,20510,20560,20817,20855,20857],"fullWord":20481},{"subwords":[337,1155,9453,10292,10304,19919,19923,20107,20110,20345,20482,20484,20493,20771,21079,21082],"fullWord":20482},{"subwords":[287,1115,1154,1158,7283,7604,7747,12230,19920,19948,20107,20152,20326,20349,20393,20399,20483,20742,20774,20790],"fullWord":20483},{"subwords":[817,825,905,906,1145,1150,1167,1173,5588,5599,5976,5977,14881,14933,14938,15281,15361,15373,16089,16091,16098,16270,16286,16419,16475,16483,18220,20410,20417,20419,20442,20449,20485,20486,20487,20488,20510,20512],"fullWord":20487},{"subwords":[349,817,1145,1167,5588,5976,9376,9384,14933,15361,15373,20410,20417,20485,20486,20489,20510,20560,20817],"fullWord":20489},{"subwords":[337,1155,1175,10292,10301,10304,20345,20485,20490,20492,20493,20771,21079,21082],"fullWord":20490},{"subwords":[287,1154,1158,1177,7283,7604,7747,12230,12474,20326,20349,20393,20399,20485,20491,20742,20774,20790],"fullWord":20491},{"subwords":[502,1144,1155,10292,10304,20493,20494,21079,21082,21094],"fullWord":20494},{"subwords":[617,1145,1158,5740,6118,9816,9836,9970,9978,12229,12339,12390,20361,20363,20393,20396,20497,20498,20505,20532,20538,20541,20579],"fullWord":20498},{"subwords":[817,867,1145,5588,5740,5976,5984,6118,6119,14798,14933,15103,20361,20365,20410,20417,20423,20497,20499,20510,20532,20538,20587,20979],"fullWord":20499},{"subwords":[399,1145,1155,1196,5778,9760,9865,10128,10135,10292,10304,10324,10338,10342,10416,10495,11065,20361,20369,20374,20493,20497,20500,20501,20867,21016,21047,21050,21079,21082,21097,21138],"fullWord":20500},{"subwords":[399,488,1009,1145,1155,5620,6055,8258,8280,8378,8381,8409,8445,8461,8588,10247,10257,10258,10292,10324,10460,18370,18521,18541,18547,18694,18697,18721,20369,20389,20501,20504,20575,20594,20599,20603,20617,20619,20621,20642],"fullWord":20504},{"subwords":[605,617,1145,1147,1158,1159,4492,4500,4574,4576,4605,4774,4865,5665,5865,6118,12229,12339,12340,12390,20303,20309,20393,20394,20396,20397,20505,20506,20524,20532,20533,20541,20579,20581],"fullWord":20506},{"subwords":[617,817,1145,1158,5588,5595,5976,5984,5998,6118,6119,12229,12319,12339,12390,12394,14821,14830,14933,15232,20393,20396,20410,20417,20432,20505,20507,20510,20532,20541,20579,20587,20984],"fullWord":20507},{"subwords":[215,617,732,1145,1158,5909,5953,5956,12229,12257,12259,12317,12390,12547,12606,12876,12916,12918,13110,13119,13239,13245,13408,13415,13439,13453,13539,13564,13630,14105,14229,20393,20396,20505,20509,20579,20875,20897,20927],"fullWord":20509},{"subwords":[817,1145,5588,5976,5984,6008,6118,6119,14872,14933,14934,14983,20410,20417,20510,20511,20532,20587],"fullWord":20511},{"subwords":[399,401,407,1145,1150,1155,1157,5605,5607,5691,5693,5790,6118,6121,10292,10299,10324,10360,10361,10383,10392,10451,15942,15948,16089,16270,16274,16319,16475,17037,17059,18188,20369,20372,20449,20501,20503,20514,20532],"fullWord":20514},{"subwords":[204,1106,1145,1147,4569,4574,4851,4865,5629,5630,6087,6092,6118,19910,19990,19992,20303,20309,20473,20474,20515,20516,20524,20532,20533],"fullWord":20516},{"subwords":[817,1106,1109,1145,5588,5629,5976,5984,6092,6100,6118,6119,14921,14933,14990,15337,19992,19996,20410,20417,20473,20475,20510,20515,20517,20532,20587],"fullWord":20517},{"subwords":[1106,1114,1145,1150,5605,5629,5631,6092,6104,6118,6121,16076,16089,16270,16319,16475,19967,19992,20000,20449,20473,20478,20515,20518,20532],"fullWord":20518},{"subwords":[1560,1566,1576,4618,4865,5632,5633,6118,20519,20520,20524,20532,20533],"fullWord":20520},{"subwords":[1576,1587,1588,1590,2396,2399,5984,6118,6119,6120,6121,14995,15014,15292,16319,16340,16423,16425,16475,16478,20519,20521,20522,20523,20532,20587],"fullWord":20522},{"subwords":[4667,4865,4866,6118,20524,20525,20532,20533],"fullWord":20525},{"subwords":[4667,4678,4810,4865,4866,5361,5984,6118,6119,15060,15069,15093,15362,20524,20526,20532,20533,20587],"fullWord":20526},{"subwords":[4667,4865,4866,5667,5668,6118,7467,7468,20524,20527,20528,20532,20533],"fullWord":20528},{"subwords":[4680,4826,4865,4873,5667,5671,6118,6121,7460,7467,7468,7473,16313,16319,16320,16475,16477,18225,20524,20527,20529,20531,20532,20533,20536],"fullWord":20529},{"subwords":[4714,4865,4935,4947,5667,6118,7467,7468,9108,20524,20527,20530,20532,20533,20720,20742],"fullWord":20530},{"subwords":[4667,4865,4866,6118,20524,20532,20533,20534],"fullWord":20534},{"subwords":[4678,4810,4865,5361,5984,6118,6119,15060,15093,15362,20524,20532,20533,20535,20587],"fullWord":20535},{"subwords":[5691,5694,5740,5778,6118,6189,9812,9865,10383,10386,10416,10495,11065,20532,20538,20539,20867,21016,21138],"fullWord":20539},{"subwords":[4774,4865,5665,5865,6118,12339,12340,12390,20524,20532,20533,20541,20542,20579,20581],"fullWord":20542},{"subwords":[6118,9132,12339,12390,20532,20541,20543,20579,20774,20785],"fullWord":20543},{"subwords":[5918,6118,6121,6189,6198,12339,12390,12397,12398,16319,16335,16475,16481,18287,20532,20541,20544,20545,20546,20579,20584,21016,21017,21120,21122,21130,21138,21139],"fullWord":20545},{"subwords":[5957,5984,6118,6119,13489,13506,13577,13583,13630,13631,14262,15248,20532,20547,20548,20587],"fullWord":20548},{"subwords":[5691,6092,6107,6118,10383,10414,10471,10481,10536,10711,19992,20004,20129,20135,20144,20532,20552,20755,20855],"fullWord":20552},{"subwords":[5984,5998,6118,6119,8483,8540,8552,8562,8588,8590,8593,12339,12390,12394,15232,20532,20541,20555,20579,20587,20623,20635,20639,20984],"fullWord":20555},{"subwords":[5716,8588,8594,8625,8628,8678,16475,16574,16610,16805,18239,20556,20557,20646,20647,20742,20749,20826,20832],"fullWord":20557},{"subwords":[5730,7540,7637,8588,8625,8688,18697,18721,18844,19525,20556,20558,20594,20642,20646,20680,20681,20742,20746,20842,20845,20847],"fullWord":20558},{"subwords":[5735,5984,5995,5996,5998,6118,6119,9384,9387,12339,12390,12394,15175,15232,15365,20532,20541,20559,20560,20579,20587,20736,20774,20785,20817,20984],"fullWord":20559},{"subwords":[4714,4810,4865,4935,5023,5114,5115,5273,5361,9110,9384,9385,12752,12979,13110,13111,15060,15078,15428,15433,15600,15603,15610,15734,15738,20524,20560,20561,20562,20720,20724,20738,20817,20818,20875,20929,20933,20990],"fullWord":20562},{"subwords":[4714,4810,4826,4865,4873,4935,4939,5023,5037,5361,5367,9111,9127,9384,9385,9389,9409,15060,15087,15428,15433,15436,15443,15526,16475,16780,16889,16890,16891,17722,20524,20531,20560,20561,20563,20565,20720,20724,20725,20738,20817,20818,20821,20826,20827,20829,20990,20992],"fullWord":20563},{"subwords":[4714,4810,4865,4874,4935,5023,5361,5430,5567,5570,9384,9385,15060,15428,15433,15866,20524,20560,20561,20564,20720,20724,20738,20817,20818,20824,20990,21010,21016,21138,21140],"fullWord":20564},{"subwords":[4667,4728,4731,4733,4865,4866,5691,5756,6118,10378,10383,10490,20524,20532,20533,20566,20567],"fullWord":20567},{"subwords":[4678,4728,4731,4810,4865,5361,5691,5756,5757,5984,6118,6119,10378,10383,10388,10490,10491,15060,15093,15107,15362,15364,20524,20532,20533,20566,20568,20587],"fullWord":20568},{"subwords":[5778,9150,9276,9281,9836,9902,9913,9919,9978,10414,10416,10536,10544,10566,10569,10625,10645,12390,12438,12439,20570,20579,20755,20774,20785,20796,20799],"fullWord":20570},{"subwords":[4728,4731,4744,4865,5559,5691,5756,5780,6118,10378,10383,10490,20524,20532,20533,20566,20571,20572],"fullWord":20572},{"subwords":[4728,4731,4865,5561,5691,5756,6118,10378,10383,10460,10490,18576,18577,19513,20524,20532,20533,20566,20575,20576,20594],"fullWord":20576},{"subwords":[5691,5984,6118,6119,10383,10388,10460,15107,15186,15312,15748,18576,19240,20532,20575,20577,20587,20588,20594],"fullWord":20577},{"subwords":[4667,4774,4865,4866,5665,5865,5867,6118,12339,12340,12390,20524,20532,20533,20541,20579,20581,20582],"fullWord":20582},{"subwords":[9447,9945,9946,9947,9951,9955,16457,16475,16907,16911,16951,16954,16986,17850,18844,18850,18861,18862,18947,20589,20591,20594,20596,20826,20842,20853],"fullWord":20589},{"subwords":[5691,5693,5694,5790,6118,6121,6189,6198,10383,10392,10451,10495,10496,11065,11066,16319,16475,17059,17149,20532,20590,21016,21017,21130,21138,21139],"fullWord":20590},{"subwords":[5984,6018,6046,6118,6119,6120,6121,15290,15292,15306,15312,15748,16319,16340,16425,16457,16475,16478,17823,17840,17850,17964,18231,18576,18588,18658,19240,19242,19256,20532,20551,20587,20588,20591,20592,20594,20596,20987],"fullWord":20592},{"subwords":[5984,6066,6118,6119,8483,8552,8562,8588,8590,15312,15748,18576,18697,18698,18712,18721,18767,18770,19240,20532,20587,20588,20594,20595,20623,20639,20642],"fullWord":20595},{"subwords":[4865,6118,18576,18577,19513,19517,20524,20532,20533,20594,20597],"fullWord":20597},{"subwords":[5984,6118,6119,15312,15748,18576,19240,19517,20532,20587,20588,20594,20598],"fullWord":20598},{"subwords":[325,932,950,3025,3033,3096,3099,3232,3235,8209,8216,8362,8409,8412,8415,8416,15880,15884,16089,16176,16501,20299,20300,20302,20449,20450,20599,20600,20601],"fullWord":20601},{"subwords":[105,2812,3096,3100,3232,8209,8409,8412,8420,9032,20299,20301,20493,20599,20600,20602,20712,21041,21047,21079,21228],"fullWord":20602},{"subwords":[399,1145,1147,1155,4466,4574,4601,4728,4865,5756,8217,8258,8259,8409,8410,8440,8445,8509,8588,10090,10093,10292,10293,10324,10327,10378,10490,20303,20309,20369,20370,20501,20502,20524,20566,20599,20603,20604,20619],"fullWord":20604},{"subwords":[399,817,1145,1155,5588,5592,5976,8258,8260,8333,8409,8445,8453,8552,8588,10292,10324,10355,14775,14933,14968,15376,20369,20371,20410,20417,20501,20510,20599,20603,20605,20619],"fullWord":20605},{"subwords":[325,399,407,932,1145,1150,1155,1157,8258,8262,8362,8409,8416,8417,8445,8448,8588,8594,10231,10292,10299,10324,10360,10365,15942,15948,16089,16270,16274,16475,16524,16566,16574,16610,17037,17059,18188,20369,20372,20449,20450,20501,20503,20574,20599,20603,20606,20619,20620],"fullWord":20606},{"subwords":[8290,8294,8409,8420,9032,11399,11408,20493,20599,20607,20608,20712,21051,21079],"fullWord":20608},{"subwords":[325,932,1158,1161,7396,7399,7744,7747,7751,8233,8237,8304,8308,8362,8409,8416,12230,12233,15910,15986,16001,16004,16089,16095,16513,16570,17211,18181,18195,18196,20326,20341,20393,20399,20449,20450,20599,20610,20611],"fullWord":20611},{"subwords":[325,828,905,932,6308,8362,8409,8416,8934,14775,14886,14933,14938,16089,20410,20442,20449,20450,20599,20614,20615],"fullWord":20615},{"subwords":[817,1106,1109,1145,5588,5976,8333,8400,8403,8409,8453,8552,8588,14775,14921,14933,15337,15376,20410,20417,20473,20475,20510,20599,20616],"fullWord":20616},{"subwords":[325,399,407,932,1145,1150,1155,1157,8258,8262,8362,8409,8416,8417,8445,8448,8588,8594,10231,10292,10299,10324,10360,10365,15942,15948,16089,16270,16274,16475,16524,16566,16574,16610,17037,17059,18188,20369,20372,20449,20450,20501,20503,20574,20599,20603,20606,20619,20620],"fullWord":20620},{"subwords":[325,932,1009,1145,1150,5616,5620,5626,6055,8228,8362,8371,8373,8378,8381,8385,8391,8409,8416,8417,8461,8467,8586,8588,8594,8935,16041,16043,16089,16270,16293,16457,16475,16559,16574,16610,17850,18211,18213,18214,18222,18521,18527,18541,18559,18694,18696,18697,18721,18722,19508,20449,20450,20457,20458,20467,20591,20594,20596,20599,20617,20618,20621,20622,20642,20643],"fullWord":20622},{"subwords":[5691,5693,5790,6118,6121,8483,8488,8491,8588,8594,10383,10392,10451,16319,16475,16574,16610,17059,20532,20574,20623,20624,20625],"fullWord":20625},{"subwords":[6118,8483,8588,20532,20623,20626,21251],"fullWord":20626},{"subwords":[6118,6189,8483,8588,8607,9032,20532,20623,20627,20644,20712,21016,21138,21251],"fullWord":20627},{"subwords":[5778,5779,8588,8594,10416,10417,16475,16574,16610,16951,17059,20574,20628,20629],"fullWord":20629},{"subwords":[5778,8588,8607,9032,9865,10416,10495,11065,20628,20630,20644,20712,20867,21016,21138],"fullWord":20630},{"subwords":[5782,5784,5845,8519,8522,8532,8539,8588,8594,11563,11595,11598,11601,11602,16475,16574,16610,17059,20574,20631,20632],"fullWord":20632},{"subwords":[6033,8525,8528,8549,8588,8594,13630,13635,13650,16475,16574,16610,16662,17059,17544,20574,20633,20634],"fullWord":20634},{"subwords":[325,617,932,935,1145,1150,1158,1161,5918,8362,8409,8416,8417,8540,8547,8588,8593,8594,12229,12390,12397,15986,15995,16089,16095,16270,16475,16481,16570,16574,16610,16613,18195,20393,20396,20398,20449,20450,20505,20508,20579,20584,20599,20635,20636,20638],"fullWord":20636},{"subwords":[3268,5856,6118,8483,8540,8542,8588,8593,12339,12390,20532,20541,20579,20580,20623,20635,20637],"fullWord":20637},{"subwords":[5984,6118,6119,6120,6121,8483,8552,8562,8568,8584,8588,8590,8591,8594,8934,15292,16319,16340,16425,16475,16478,16574,16587,16610,16612,16724,20532,20587,20623,20639,20640],"fullWord":20640},{"subwords":[6008,8552,8583,8588,8607,9032,15866,20641,20644,20712,21010,21011,21016,21138],"fullWord":20641},{"subwords":[6118,6189,8483,8588,8607,9032,20532,20623,20644,20645,20712,21016,21138],"fullWord":20645},{"subwords":[4714,4728,4738,4739,4865,4935,5756,5769,8500,8509,8588,8617,8619,8625,8626,9117,10378,10414,10490,10530,10536,10537,20524,20566,20648,20649,20720,20733,20751,20755,20756],"fullWord":20649},{"subwords":[5769,8500,8502,8588,8594,8625,8628,8678,9416,10414,10415,10493,10536,10551,16475,16574,16610,17059,20574,20648,20650,20755,20757,20826,20832],"fullWord":20650},{"subwords":[8648,8739,8920,8925,10584,10609,10942,11659,11854,11856,12066,12806,12812,13114,20651,20653,20689,20694],"fullWord":20651},{"subwords":[8645,8647,8678,8685,8688,8691,8935,9447,10686,10691,10698,10707,16653,16840,16907,17093,18742,18863,18947,20652,20678,20680,20687,20768,20770,20832,20842,20845,20853],"fullWord":20652},{"subwords":[8648,8678,9032,9422,16627,16758,18243,20653,20654,20655,20712,20713,20832,20836],"fullWord":20655},{"subwords":[4714,4774,4865,4935,4985,4988,5865,8540,8588,8593,8617,8619,8625,8626,8649,12390,20524,20579,20581,20635,20656,20657,20720,20722,20774,20779,20785,20786],"fullWord":20657},{"subwords":[5996,8503,8540,8552,8588,8593,8625,8672,9384,12390,15175,15365,15383,20560,20579,20635,20656,20658,20665,20774,20785,20817,20984],"fullWord":20658},{"subwords":[5918,8540,8547,8588,8593,8594,8625,8628,8678,8679,9307,12390,12396,12397,16475,16481,16574,16610,16613,16629,16631,16858,16860,16862,16874,18245,20579,20584,20635,20638,20656,20659,20774,20785,20788,20807,20826,20832],"fullWord":20659},{"subwords":[8540,8588,8593,8607,8625,9032,12390,20579,20635,20644,20656,20660,20662,20712,20774,20785,20789,20810,21016,21120,21138,21144],"fullWord":20660},{"subwords":[8659,9032,9297,20661,20662,20712,20774,20810,21144],"fullWord":20661},{"subwords":[8664,8670,9032,13651,13813,13829,20663,20664,20712,21146],"fullWord":20664},{"subwords":[8678,8934,9409,16889,17722,18254,20665,20666,20667,20672,20832],"fullWord":20667},{"subwords":[9032,20665,20666,20668,20712,20771,20824,21010],"fullWord":20668},{"subwords":[8678,8934,9409,16646,16889,17722,20665,20669,20670,20672,20832],"fullWord":20670},{"subwords":[9032,20665,20669,20671,20712,20824,21010],"fullWord":20671},{"subwords":[8678,8685,8688,8691,8935,9447,16653,16907,18742,18947,20673,20674,20678,20680,20687,20832,20842,20845,20853],"fullWord":20674},{"subwords":[8678,8681,9941,16823,16824,16903,16954,16985,18257,20675,20676,20832],"fullWord":20676},{"subwords":[8678,9032,16758,16823,16954,16992,20675,20677,20712,20713,20832,20836],"fullWord":20677},{"subwords":[8678,8681,8685,8687,8688,8691,8935,9447,16651,16653,16654,16903,16907,16915,18257,18742,18947,20678,20679,20680,20687,20832,20841,20842,20845,20853],"fullWord":20679},{"subwords":[4714,4865,4935,4942,5680,5682,8588,8617,8619,8625,8626,8688,18697,18721,18835,18844,18845,20524,20594,20642,20680,20681,20682,20720,20731,20842,20845,20847,20848],"fullWord":20682},{"subwords":[8540,8588,8593,8625,8660,8688,9325,12374,12390,12399,12463,12612,18607,18697,18708,18721,18731,18732,18844,18894,18898,19530,19531,20579,20585,20594,20635,20642,20656,20680,20681,20683,20774,20785,20842,20845,20847],"fullWord":20683},{"subwords":[8503,8552,8588,8625,8672,8688,9384,15312,15542,15748,18697,18701,18721,18770,18844,18847,18941,19524,20560,20588,20594,20642,20665,20680,20681,20684,20817,20842,20845,20847,20849,21000,21001,21004],"fullWord":20684},{"subwords":[8506,8586,8588,8594,8625,8628,8678,8685,8688,8691,8935,9447,16457,16475,16574,16610,16653,16907,16911,17850,18697,18721,18722,18742,18844,18850,18947,20591,20594,20596,20642,20643,20678,20680,20681,20685,20687,20826,20832,20842,20845,20847,20850,20853],"fullWord":20685},{"subwords":[8588,8607,8625,8688,9032,18697,18721,18723,18724,18806,18844,20594,20642,20644,20680,20681,20686,20688,20712,20842,20845,20847,20852,21016,21135,21136,21138],"fullWord":20686},{"subwords":[8588,8594,8725,8730,8754,8757,8881,8920,8923,8924,8925,8929,8930,10443,10447,10888,10942,10952,12810,12845,12848,13110,13112,13114,13118,16475,16574,16602,16610,16676,16716,17059,17097,17121,17354,17359,17464,20574,20689,20691,20692,20707,20875,20877],"fullWord":20692},{"subwords":[8768,8772,8920,8925,9032,10942,10951,13114,20689,20693,20712,21202,21207],"fullWord":20693},{"subwords":[8845,8856,8886,8920,8930,11947,11961,12066,12072,12079,12806,12808,12810,12872,12936,14172,14229,14233,16664,16693,16716,17406,17407,17464,18268,20689,20694,20695,20696,20701,20927,20928,20968],"fullWord":20696},{"subwords":[8786,8787,8920,8930,11921,11941,12066,12072,12806,12808,12809,12810,12872,12895,12898,16664,16686,16716,17464,20689,20694,20697,20709,20903,20925,20926],"fullWord":20697},{"subwords":[8831,8835,8845,8856,8886,8920,8930,12809,12810,12895,12898,12905,12936,14118,14120,14172,14229,14233,16686,16693,16716,17406,17407,17464,18265,18268,20689,20698,20699,20701,20709,20903,20924,20925,20926,20927,20928],"fullWord":20699},{"subwords":[8920,8930,12809,12810,12895,12898,16686,16716,17464,20689,20700,20709,20903,20925,20926],"fullWord":20700},{"subwords":[4810,4865,4885,5114,5115,5273,5361,8552,8558,8575,8588,8721,8725,8726,8728,8857,8864,8920,8923,12752,12802,12979,13110,13111,15060,15078,15386,15600,15603,15610,15734,15738,20524,20689,20702,20703,20875,20929,20933],"fullWord":20703},{"subwords":[6004,8552,8575,8581,8584,8588,8594,8725,8728,8729,8730,8857,8874,8875,8881,8920,8923,8924,8930,8934,12810,12979,12982,13007,13110,13112,15302,15386,15610,15611,15676,15734,15744,16445,16475,16574,16610,16676,16678,16697,16716,16718,16724,17419,17464,17466,18272,20689,20702,20704,20707,20875,20877,20933,20947],"fullWord":20704},{"subwords":[8857,8874,8920,8925,8929,8930,8934,10942,10952,12810,13007,13114,13118,15386,15734,15744,16716,17121,17354,17464,20689,20705,20706],"fullWord":20706},{"subwords":[8678,8681,8739,8920,8930,12810,16716,16719,16903,17434,17464,17470,18257,20689,20708,20832],"fullWord":20708},{"subwords":[8970,8982,8986,8988,9002,12079,12158,14551,14552,18103,18114,18135,18274,19592,19624,19628,19825,20710,20711,20968],"fullWord":20711},{"subwords":[4639,4651,4714,4865,4909,4917,4935,4957,9079,9082,9885,20524,20714,20715,20720],"fullWord":20715},{"subwords":[4147,9079,9094,9384,9396,15021,15411,15422,20560,20714,20716,20817,20982],"fullWord":20716},{"subwords":[3429,3430,4399,6057,9079,9946,9947,18823,18824,18844,18861,19523,20594,20714,20717,20842],"fullWord":20717},{"subwords":[4714,4810,4865,4928,4935,4936,5023,5361,5364,9384,9385,15060,15074,15428,15433,20524,20560,20561,20718,20720,20724,20738,20817,20818,20990],"fullWord":20718},{"subwords":[4714,4728,4739,4865,4928,4935,4936,5756,9117,9118,10378,10414,10490,10530,10536,10537,20524,20566,20719,20720,20733,20751,20755,20756],"fullWord":20719},{"subwords":[4714,4728,4739,4865,4868,4874,4935,5567,5756,9117,9124,9128,10378,10414,10490,10495,10530,10536,10537,11065,20524,20566,20720,20721,20733,20735,20751,20755,20756,20771,21016,21138,21140,21142],"fullWord":20721},{"subwords":[4714,4774,4785,4826,4865,4873,4935,4939,4985,4988,4992,5007,5037,5865,5875,5918,9111,9127,9307,12390,12397,16381,16475,16481,16780,16858,16860,16862,17243,18245,20524,20531,20579,20581,20583,20584,20720,20722,20723,20725,20774,20779,20783,20785,20786,20788,20807,20826,20827],"fullWord":20723},{"subwords":[4714,4724,4826,4865,4873,4935,4939,4942,4945,5037,5063,5680,5684,9111,9127,9447,16457,16475,16780,16907,16911,16912,17850,17856,18575,18835,18837,18844,18845,18850,18947,20524,20531,20591,20594,20596,20720,20725,20726,20826,20827,20842,20853],"fullWord":20726},{"subwords":[4714,4865,4935,4942,4947,5680,7540,7637,18835,18844,18845,19525,20524,20594,20720,20727,20742,20842],"fullWord":20727},{"subwords":[5037,5046,8617,8678,9127,20728,20832],"fullWord":20728},{"subwords":[5037,5221,5282,9127,17323,17464,20729,20730,20964,20966],"fullWord":20730},{"subwords":[5037,5046,8617,8678,8685,8688,8691,8935,9127,9447,16653,16907,18742,18947,20678,20680,20687,20731,20732,20832,20842,20845,20853],"fullWord":20732},{"subwords":[4714,4728,4739,4742,4826,4865,4873,4935,4939,5037,5756,5760,9111,9117,9121,9127,9416,9417,10378,10414,10415,10490,10493,10530,10535,10536,10537,10551,16475,16780,16784,17044,17059,17068,17069,20524,20531,20566,20569,20720,20725,20733,20734,20751,20754,20755,20756,20757,20826,20827],"fullWord":20734},{"subwords":[4714,4728,4739,4865,4868,4874,4935,5567,5756,9117,9124,9128,10378,10414,10490,10495,10530,10536,10537,11065,20524,20566,20720,20721,20733,20735,20751,20755,20756,20771,21016,21138,21140,21142],"fullWord":20735},{"subwords":[5735,5984,5995,5996,5998,6118,6119,9384,9387,12339,12390,12394,15175,15232,15365,20532,20541,20559,20560,20579,20587,20736,20774,20785,20817,20984],"fullWord":20736},{"subwords":[6118,12339,12390,20532,20541,20579,20737,20774,20785],"fullWord":20737},{"subwords":[5765,6507,6509,6543,6568,6756,6854,10414,10495,10536,10539,10554,11065,20739,20740,20755,20771,21016,21138],"fullWord":20740},{"subwords":[6560,6593,7604,20741,20742,20774,20790],"fullWord":20741},{"subwords":[5718,5909,5953,6122,7493,7604,7815,7892,9360,12390,12509,12606,12876,13110,13113,13119,20579,20742,20743,20774,20785,20790,20804,20875,20897],"fullWord":20743},{"subwords":[4714,4865,4935,4947,5709,7578,20524,20720,20742,20744],"fullWord":20744},{"subwords":[5709,7477,7578,10398,10414,10536,20742,20745,20755],"fullWord":20745},{"subwords":[7635,7637,8678,8685,8688,8691,8935,9447,16653,16805,16809,16907,18239,18742,18947,19525,19526,20646,20647,20678,20680,20687,20742,20746,20747,20749,20832,20842,20845,20853],"fullWord":20747},{"subwords":[7477,7487,7540,7596,7637,10398,10408,10414,10460,10536,10691,10694,18844,18863,18866,19525,20575,20594,20742,20748,20755,20768,20842],"fullWord":20748},{"subwords":[341,7317,11127,11132,11399,11649,20326,20742,20750],"fullWord":20750},{"subwords":[4714,4728,4739,4810,4865,4935,5023,5361,5756,9117,9119,9384,9385,10378,10414,10490,10530,10536,10537,10549,10677,15060,15428,15433,15444,15473,15474,20524,20560,20561,20566,20720,20724,20733,20738,20751,20752,20755,20756,20817,20818,20990],"fullWord":20752},{"subwords":[4967,4969,9124,9128,9129,9152,9157,10530,10583,20751,20753,20761,20766,20771,21140],"fullWord":20753},{"subwords":[9384,10414,10536,10549,10677,15444,15473,20560,20755,20758,20817],"fullWord":20758},{"subwords":[9152,9157,10583,20759,20761,20766,20771],"fullWord":20759},{"subwords":[7604,10637,12438,20742,20760,20774,20790],"fullWord":20760},{"subwords":[4714,4728,4739,4744,4865,4935,4967,5559,5756,5780,9117,9152,10378,10414,10490,10530,10536,10537,20524,20566,20571,20720,20733,20751,20755,20756,20761,20762],"fullWord":20762},{"subwords":[5780,9152,9153,9384,10414,10536,10549,10677,15444,15473,15477,20560,20571,20755,20761,20763,20817],"fullWord":20763},{"subwords":[9152,10942,12812,13114,20761,20764,20964],"fullWord":20764},{"subwords":[9307,9360,9366,10652,10653,10654,10663,10664,10814,10815,10942,10952,12438,12442,12560,12606,12610,12812,12822,13114,13118,13119,13124,16837,16858,17121,17284,17350,17354,17364,17383,17464,17469,20767,20774,20804,20806,20807,20897],"fullWord":20767},{"subwords":[4714,4728,4739,4865,4935,4942,5561,5680,5756,9117,10378,10414,10460,10490,10530,10536,10537,10691,10694,18835,18844,18845,18863,18864,18866,18867,20524,20566,20575,20594,20720,20733,20751,20755,20756,20768,20769,20842],"fullWord":20769},{"subwords":[1636,1817,1949,5782,9077,10414,10504,10536,10584,10587,10595,11595,11598,11659,11668,20519,20755,20772],"fullWord":20772},{"subwords":[5782,9178,9186,10414,10536,10584,10595,10611,10665,10957,11595,11598,11659,11668,13630,13705,13743,20755,20773,20811,20968],"fullWord":20773},{"subwords":[3413,4639,4714,4774,4865,4909,4935,4985,4988,5856,5865,9079,9082,9207,12390,12410,20524,20579,20581,20720,20722,20774,20775,20776,20779,20785,20786],"fullWord":20776},{"subwords":[3413,4147,5856,5996,9079,9207,9384,12390,12410,12412,15021,15175,15365,15411,20560,20579,20774,20775,20777,20785,20817,20984],"fullWord":20777},{"subwords":[3413,3415,5856,5918,6023,9079,9085,9207,9307,12390,12397,12410,16178,16298,16475,16481,16769,16858,16859,16860,16862,18245,20579,20584,20774,20775,20778,20785,20788,20807,20826],"fullWord":20778},{"subwords":[4714,4774,4865,4928,4935,4936,4985,4988,4989,5865,12390,20524,20579,20581,20720,20722,20774,20779,20780,20785,20786],"fullWord":20780},{"subwords":[4714,4774,4810,4865,4935,4985,4988,4990,5023,5361,5865,5996,9384,9385,12358,12390,15060,15175,15227,15365,15366,15428,15433,15491,20524,20560,20561,20579,20581,20720,20722,20724,20738,20774,20779,20781,20785,20786,20817,20818,20984,20990],"fullWord":20781},{"subwords":[4985,5172,5277,9237,9360,12493,12606,12758,13119,20729,20774,20779,20782,20804,20897,20964],"fullWord":20782},{"subwords":[4985,5014,5507,5525,9449,12453,13765,14438,14484,19835,20774,20779,20784],"fullWord":20784},{"subwords":[5996,9384,12390,15175,15365,15866,20560,20579,20774,20785,20787,20789,20810,20817,20824,20984,21010,21016,21120,21138,21144],"fullWord":20787},{"subwords":[4714,4720,4774,4865,4869,4935,4947,4985,4988,4993,5865,6122,7493,7604,12390,20524,20579,20581,20720,20722,20742,20774,20779,20785,20786,20790,20791],"fullWord":20791},{"subwords":[5996,9384,12390,15175,15365,20560,20579,20774,20785,20794,20817,20984],"fullWord":20794},{"subwords":[8678,8679,9307,12462,16629,16858,16874,20774,20795,20807,20832],"fullWord":20795},{"subwords":[4714,4774,4865,4935,4957,4985,4988,5865,9276,9277,9836,9885,9913,9914,9919,9978,12390,20524,20579,20581,20720,20722,20774,20779,20785,20786,20796,20797],"fullWord":20797},{"subwords":[5996,9276,9278,9384,9396,9836,9855,9913,9919,9978,12390,15175,15365,15498,20560,20579,20774,20785,20796,20798,20817,20984],"fullWord":20798},{"subwords":[5778,9150,9276,9281,9836,9902,9913,9919,9978,10414,10416,10536,10544,10566,10569,10625,10645,12390,12438,12439,20570,20579,20755,20774,20785,20796,20799],"fullWord":20799},{"subwords":[4714,4774,4865,4935,4985,4988,5865,9297,9299,12390,12448,20524,20579,20581,20720,20722,20774,20779,20785,20786,20801],"fullWord":20801},{"subwords":[5996,9297,9300,9384,12390,12448,15175,15365,20560,20579,20774,20785,20802,20817,20984],"fullWord":20802},{"subwords":[9297,9360,12528,12606,13119,20774,20803,20804,20897,20964],"fullWord":20803},{"subwords":[5909,5918,5953,5955,9307,9360,9366,12390,12397,12506,12516,12560,12561,12606,12609,12610,12876,12879,13110,13112,13119,13124,16475,16481,16858,16860,16862,17284,17383,17464,17469,18245,20579,20584,20774,20785,20788,20804,20805,20806,20807,20826,20875,20877,20897],"fullWord":20805},{"subwords":[5996,9245,9325,9331,9338,9384,12374,12390,12399,12463,12464,12466,15175,15241,15312,15365,15542,15748,18607,18649,18844,18847,18894,18898,18941,19289,19524,19530,19531,19533,20560,20579,20585,20588,20594,20774,20785,20808,20817,20842,20984,21000,21001],"fullWord":20808},{"subwords":[9325,9338,12463,18894,18925,19377,19530,19537,20774,20809,20810,20824,20842,21000,21010,21144],"fullWord":20809},{"subwords":[6033,9384,9389,9409,13577,13588,13630,13635,13705,13712,13715,13716,14262,14281,14309,14336,14403,14421,15248,15272,15305,15508,15509,15514,15524,15526,16475,16883,16889,16890,17544,17565,17591,17722,18251,20560,20565,20811,20813,20814,20815,20817,20821,20826,20829,20838,20992],"fullWord":20814},{"subwords":[7604,7612,12453,13721,13765,13773,20742,20774,20790,20816],"fullWord":20816},{"subwords":[6008,6016,9384,9389,9409,15526,15528,16475,16889,16890,17722,20560,20565,20817,20819,20820,20821,20826,20829,20991,20992],"fullWord":20820},{"subwords":[6008,9384,20560,20817,20819,20822,20991],"fullWord":20822},{"subwords":[7604,8015,9391,15461,15494,20742,20774,20790,20823,20995],"fullWord":20823},{"subwords":[4971,4983,5037,5163,5171,5221,5282,9127,9422,11626,11641,11763,11772,11831,11841,11845,11854,12066,12072,12872,17323,17464,18243,20825],"fullWord":20825},{"subwords":[9416,10414,10415,10493,10495,10496,10536,10551,11065,11066,16475,17059,17149,20755,20757,20771,20826,20828,21016,21017,21130,21138,21139],"fullWord":20828},{"subwords":[6039,9447,16457,16464,16475,16482,16903,16907,16911,16913,16915,17850,17852,17857,18844,18850,18947,20591,20593,20594,20596,20826,20830,20831,20841,20842,20853],"fullWord":20831},{"subwords":[4714,4826,4865,4873,4935,4939,5037,5046,8588,8594,8617,8619,8623,8625,8626,8628,8678,9111,9127,16475,16574,16581,16610,16615,16780,20524,20531,20720,20725,20826,20827,20832,20833],"fullWord":20833},{"subwords":[8503,8505,8552,8584,8588,8594,8625,8628,8672,8676,8678,8934,9384,9389,9409,15526,16475,16574,16610,16617,16642,16724,16889,16890,17722,20560,20565,20665,20672,20817,20821,20826,20829,20832,20834,20992],"fullWord":20834},{"subwords":[6039,8588,8594,8625,8628,8678,8681,16475,16482,16574,16609,16610,16614,16619,16903,18257,20826,20830,20832,20835],"fullWord":20835},{"subwords":[7604,7611,9138,9307,12462,16815,16858,16866,18239,18246,20742,20749,20774,20790,20792,20807,20837],"fullWord":20837},{"subwords":[4714,4826,4865,4873,4935,4939,5014,5021,5037,6033,9111,9127,13478,13488,13630,13635,13705,13710,13716,14421,16475,16780,16883,17530,17544,17562,18251,18252,20524,20531,20720,20725,20811,20812,20815,20826,20827,20838,20839],"fullWord":20839},{"subwords":[3272,3328,3429,3440,4399,8612,8688,9032,9101,9440,9443,18806,18823,20680,20688,20712,20842,20843,20844,20845,20852],"fullWord":20844},{"subwords":[337,434,488,1155,8241,8280,8378,8409,8645,8688,9437,10126,10257,10292,10691,10698,18347,18349,18521,18684,18694,18863,20345,20353,20389,20599,20617,20680,20768,20842,20845,20846],"fullWord":20846},{"subwords":[4714,4865,4935,4942,5680,5682,8588,8617,8619,8625,8626,8688,18697,18721,18835,18844,18845,20524,20594,20642,20680,20681,20682,20720,20731,20842,20845,20847,20848],"fullWord":20848},{"subwords":[8503,8552,8588,8625,8672,8688,9384,15312,15542,15748,18697,18701,18721,18770,18844,18847,18941,19524,20560,20588,20594,20642,20665,20680,20681,20684,20817,20842,20845,20847,20849,21000,21001,21004],"fullWord":20849},{"subwords":[8506,8586,8588,8594,8625,8628,8678,8685,8688,8691,8935,9447,16457,16475,16574,16610,16653,16907,16911,17850,18697,18721,18722,18742,18844,18850,18947,20591,20594,20596,20642,20643,20678,20680,20681,20685,20687,20826,20832,20842,20845,20847,20850,20853],"fullWord":20850},{"subwords":[8660,8688,9325,12463,12612,18731,18894,19530,20680,20774,20842,20845,20851],"fullWord":20851},{"subwords":[4714,4865,4935,4942,5680,18835,18844,18845,18950,19545,20524,20594,20720,20842,20854],"fullWord":20854},{"subwords":[5996,9384,12387,12390,15175,15337,15365,15549,15551,20008,20129,20132,20135,20152,20157,20560,20579,20774,20785,20817,20855,20857,20858,20984],"fullWord":20858},{"subwords":[9384,9389,9409,15337,15354,15526,15549,15554,16475,16889,16890,17722,20070,20129,20132,20133,20134,20135,20138,20197,20560,20565,20817,20821,20826,20829,20855,20857,20859,20860,20992],"fullWord":20859},{"subwords":[7604,7644,20152,20742,20774,20790,20861],"fullWord":20861},{"subwords":[213,326,349,854,4574,5330,9376,9455,14736,14776,14933,15428,20303,20314,20410,20412,20862,20863],"fullWord":20863},{"subwords":[5918,9307,12390,12397,16475,16481,16858,16860,16862,16929,18245,20579,20584,20774,20785,20788,20807,20826,20862,20864,20865,20866,21253,21255],"fullWord":20865},{"subwords":[148,183,1145,1147,4438,4441,4574,4590,4865,5114,5659,12745,12752,13110,13111,20303,20309,20310,20524,20868,20869,20875],"fullWord":20869},{"subwords":[183,197,200,487,1155,1157,1164,1165,4574,5221,5282,10090,10107,10181,10292,10299,10730,10733,10942,10952,12837,12844,13114,13118,15893,15942,16089,17037,17121,17323,17324,17354,17357,17464,20303,20318,20449,20868,20870,20871,20872,20883,20884],"fullWord":20872},{"subwords":[1510,1636,1659,1949,1969,1996,2042,2106,2271,2273,2280,5632,5754,10443,10748,10753,10942,12845,13110,13114,20519,20873,20875],"fullWord":20873},{"subwords":[1510,1969,1996,1997,2002,2042,2271,2280,2300,10748,10752,10942,13114,20874,21202,21207],"fullWord":20874},{"subwords":[5765,5950,6507,6756,6793,6817,6821,6824,6874,6999,7014,7153,10443,10470,10942,12845,13110,13114,19580,20875,20876,20878,20885],"fullWord":20876},{"subwords":[4728,4865,5114,5146,5271,5756,5765,5950,6406,6507,6740,6756,6793,6817,6818,6874,6902,7014,7015,7240,10378,10443,10490,10780,10942,10944,12752,12837,12845,13110,13111,13114,20524,20566,20875,20883,20885,20886],"fullWord":20886},{"subwords":[5765,5950,6507,6756,6793,6817,6819,6874,6940,6955,7014,7016,7103,7123,10443,10882,10942,10945,12845,12979,13110,13114,15114,15128,15610,15621,15734,15739,20875,20885,20887,20933],"fullWord":20887},{"subwords":[10443,10471,10488,10882,10935,10938,10942,10945,12845,12979,13095,13110,13114,15337,15610,15621,15728,15734,15739,20250,20251,20273,20275,20277,20288,20875,20888,20933,20962],"fullWord":20888},{"subwords":[10443,10447,10471,10488,10888,10935,10940,10942,10952,12845,12848,13110,13112,13114,13118,16475,17059,17097,17121,17354,17359,17374,17464,20250,20251,20252,20273,20275,20276,20280,20875,20877,20889,20962],"fullWord":20889},{"subwords":[1158,1161,11213,11245,11247,11265,11330,11345,11399,11400,11810,11812,11813,11891,11915,12066,12071,12072,12244,12522,12527,12560,12606,12610,12872,13119,13124,15973,15986,16089,16095,17284,17378,17383,17464,17469,18189,18195,20393,20449,20890,20891,20897],"fullWord":20891},{"subwords":[51,72,1020,1462,2029,2037,2237,2271,11265,11361,11399,11814,11817,12010,12066,12686,18302,18389,18432,18521,19026,19028,19166,19548,20892,20893],"fullWord":20893},{"subwords":[1560,2058,2059,2271,2272,4618,4763,4764,4865,5114,5163,5165,5815,11536,11595,11817,11831,11833,12066,12067,12752,13110,13111,20519,20524,20875,20892,20894],"fullWord":20894},{"subwords":[4774,4810,4865,5114,5115,5172,5176,5273,5277,5279,5361,5392,5412,5865,5872,5909,5953,12358,12390,12493,12499,12548,12606,12752,12876,12979,13110,13111,13119,13120,13121,15060,15078,15227,15238,15368,15600,15603,15610,15734,15738,20524,20579,20581,20875,20897,20898,20929,20933,20944,20984],"fullWord":20898},{"subwords":[4774,4788,4865,5114,5172,5176,5234,5237,5277,5865,5872,5909,5953,12374,12390,12399,12493,12499,12574,12581,12582,12606,12752,12876,13110,13111,13119,13120,18607,18610,18981,18983,19036,19038,19039,19166,19169,19178,19548,20524,20579,20581,20585,20594,20875,20897,20899,20900],"fullWord":20900},{"subwords":[12528,12541,12574,12606,12887,13119,19036,19060,19166,19178,19548,20897,20899,20901,20903],"fullWord":20901},{"subwords":[4865,5111,5114,12745,12752,13110,13111,20524,20875,20903,20904,20905,20910],"fullWord":20905},{"subwords":[4774,4865,5114,5172,5176,5277,5865,5872,5909,5953,12390,12493,12499,12606,12752,12753,12876,13110,13111,13119,13120,20524,20579,20581,20875,20897,20903,20904,20906,20910],"fullWord":20906},{"subwords":[5221,5282,17323,17464,17472,20903,20904,20907,20908,20909,20925,21096,21154,21202,21211],"fullWord":20908},{"subwords":[6004,12979,12982,13007,13110,13112,15302,15610,15611,15676,15734,15744,16445,16475,17419,17464,17466,18272,20875,20877,20903,20911,20912,20925,20933,20947],"fullWord":20912},{"subwords":[4865,5114,5950,6406,6507,6874,6928,7240,12752,13110,13111,20524,20875,20903,20904,20910,20913,20914],"fullWord":20914},{"subwords":[5950,6507,6874,6940,6955,7103,7123,12979,13110,15114,15610,15644,15734,20875,20903,20911,20913,20915,20933],"fullWord":20915},{"subwords":[7604,7826,7841,7892,9360,12509,12606,13113,13119,20742,20774,20790,20804,20897,20903,20916],"fullWord":20916},{"subwords":[4728,4865,4871,5114,5146,5271,5756,10378,10443,10490,10780,10833,10942,10944,12752,12837,12845,12846,13110,13111,13114,20524,20566,20875,20883,20903,20904,20910,20917,20918],"fullWord":20918},{"subwords":[5909,5953,10443,10444,10822,10833,10845,10942,12390,12504,12521,12606,12845,12846,12876,13110,13114,13119,20579,20875,20897,20903,20917,20919],"fullWord":20919},{"subwords":[10443,10833,10882,10942,10945,12845,12846,12979,13110,13114,15610,15621,15734,15739,20875,20903,20911,20917,20920,20933],"fullWord":20920},{"subwords":[10414,10443,10536,10833,10942,12812,12845,12846,12850,13110,13114,20755,20875,20903,20917,20921],"fullWord":20921},{"subwords":[10833,10942,10951,13114,20903,20917,20922,20923,21202,21207],"fullWord":20922},{"subwords":[4810,4865,5114,5115,5273,5361,12745,12746,12752,12979,13110,13111,15060,15078,15600,15603,15610,15734,15738,20524,20875,20929,20930,20933],"fullWord":20930},{"subwords":[4810,4865,5114,5115,5273,5355,5361,12752,12979,13110,13111,15060,15078,15600,15603,15610,15734,15738,20524,20875,20879,20880,20929,20933,20934,20935],"fullWord":20935},{"subwords":[6008,12979,13110,15370,15610,15734,15741,20875,20879,20880,20933,20934,20936],"fullWord":20936},{"subwords":[13051,14151,14220,14229,14350,14398,15734,20879,20927,20934,20937],"fullWord":20937},{"subwords":[5216,5221,5282,10878,10881,10942,10952,12837,12844,13007,13114,13118,15600,15609,15734,15744,17121,17323,17354,17357,17464,18270,20883,20884,20929,20931,20938,20939],"fullWord":20939},{"subwords":[4763,4810,4818,4865,4872,5114,5115,5163,5165,5213,5273,5361,11536,11539,11595,11831,11833,11970,12066,12067,12068,12752,12979,13110,13111,15060,15078,15202,15600,15603,15610,15627,15632,15734,15738,20524,20875,20929,20933,20940,20941],"fullWord":20941},{"subwords":[6008,11536,11539,11595,11970,12066,12068,12979,13110,15202,15610,15627,15632,15734,15741,20875,20933,20940,20942],"fullWord":20942},{"subwords":[13008,15504,15691,15734,18945,19093,19166,19292,19343,19548,20842,20945,20953,21000],"fullWord":20945},{"subwords":[5909,5918,5953,5955,6000,6004,12390,12397,12506,12548,12556,12560,12561,12606,12610,12876,12879,12979,12982,13007,13110,13112,13119,13121,13122,13124,15238,15302,15303,15368,15610,15611,15676,15734,15744,16391,16445,16475,16481,17272,17284,17383,17419,17464,17466,17469,18272,18273,20579,20584,20875,20877,20897,20933,20944,20947,20948,20984,20986],"fullWord":20948},{"subwords":[6004,6008,6016,12979,12982,13007,13110,13112,15302,15610,15611,15676,15734,15741,15742,15744,16445,16475,17419,17423,17464,17466,18272,20875,20877,20933,20947,20949],"fullWord":20949},{"subwords":[6004,6039,12979,12982,13007,13110,13112,15302,15304,15610,15611,15676,15679,15734,15744,16445,16475,16482,17419,17424,17434,17464,17466,17467,17470,18272,20875,20877,20933,20947,20950],"fullWord":20950},{"subwords":[13007,13008,13011,15691,15700,15734,15744,17429,17433,17434,17435,17436,17464,17470,17941,17943,19093,19113,19125,19166,19181,19343,19346,19548,19550,20951,20952,20953,20957,20958],"fullWord":20952},{"subwords":[8857,8874,8879,8887,8892,8901,8920,8930,8934,8935,12810,13007,13008,13009,13011,15386,15691,15700,15734,15744,16701,16704,16716,17429,17435,17464,17941,18743,18749,18777,18786,18788,19093,19113,19123,19166,19181,19343,19346,19548,19550,20689,20951,20953,20954,20955,20957,20958,21009],"fullWord":20955},{"subwords":[8857,8892,8920,9032,13008,13009,15386,15691,15734,18743,18749,18777,18786,18806,19093,19122,19166,19186,19343,19347,19377,19548,19573,20689,20712,20953,20954,20956,21009,21010,21202],"fullWord":20956},{"subwords":[4865,5114,5234,5237,12752,13110,13111,18981,18983,19131,19134,19135,19166,19169,19548,20524,20594,20875,20959],"fullWord":20959},{"subwords":[5172,5188,5221,5277,5280,5282,5507,5522,5523,5524,12493,12501,12503,12560,12597,12606,12610,12888,13119,13124,17284,17323,17383,17445,17464,17469,18117,19664,20897,20960,20961],"fullWord":20961},{"subwords":[7604,7892,9360,12509,12606,13113,13119,20742,20774,20790,20804,20897,20964,20965],"fullWord":20965},{"subwords":[6004,12979,12982,13007,13110,13112,15302,15610,15611,15676,15734,15744,16445,16475,17419,17464,17466,18272,20875,20877,20933,20947,20964,20966,20967],"fullWord":20967},{"subwords":[796,810,867,868,905,950,2941,3001,3033,3096,3099,4096,4100,14729,14733,14933,14938,15880,15884,16089,16142,20299,20300,20302,20410,20423,20424,20442,20449,20969,20970],"fullWord":20970},{"subwords":[349,866,911,8245,8360,8378,8409,8688,9376,14775,14898,14933,18347,18449,18521,18684,18694,20353,20410,20444,20599,20617,20665,20680,20842,20845,20971,20976,21000],"fullWord":20971},{"subwords":[817,825,905,906,907,973,1145,1150,5588,5599,5976,5977,6039,14881,14885,14933,14938,15281,16089,16091,16092,16096,16270,16286,16290,16291,16419,16475,16482,18220,18221,20410,20417,20419,20442,20449,20510,20512,20975],"fullWord":20975},{"subwords":[325,905,911,918,932,8360,8361,8362,8371,8378,8391,8409,8416,8934,8935,14775,14886,14898,14912,14933,14938,16041,16089,16559,17773,17953,18207,18208,18211,18213,18449,18472,18521,18527,18694,18696,19224,19381,19508,20410,20442,20444,20446,20449,20450,20457,20467,20599,20617,20618,20976,20977],"fullWord":20977},{"subwords":[911,919,1166,8360,8378,8409,8420,9032,14775,14898,14933,14939,15398,15864,18449,18521,18694,18806,19231,19377,20410,20444,20447,20448,20493,20599,20617,20712,20976,20978,21010,21079],"fullWord":20978},{"subwords":[817,825,867,868,905,906,950,953,955,1145,1150,5588,5599,5976,5977,14798,14802,14881,14933,14938,15281,15939,16089,16091,16270,16286,16419,16475,16951,18220,20361,20365,20366,20367,20410,20417,20419,20423,20424,20442,20449,20497,20510,20512,20979,20980],"fullWord":20980},{"subwords":[817,911,1009,1145,5588,5600,5620,5976,5982,6055,8333,8360,8378,8381,8383,8409,8453,8458,8461,8552,8588,14775,14898,14901,14933,15312,15376,15748,18449,18453,18521,18541,18554,18694,18697,18721,18770,20410,20417,20444,20464,20510,20588,20594,20599,20617,20621,20642,20976,20981],"fullWord":20981},{"subwords":[4147,4150,6023,15021,15037,15048,16232,16298,16475,16951,20982,20983],"fullWord":20983},{"subwords":[3268,4147,5856,8540,8552,8588,8593,12390,15021,20579,20580,20635,20984,20985],"fullWord":20985},{"subwords":[6018,6039,15306,15309,15312,15748,16457,16464,16475,16482,17850,17852,17964,17966,19253,19256,20588,20591,20593,20594,20596,20987,20988],"fullWord":20988},{"subwords":[3161,3260,3268,4147,4399,6057,6058,8552,8588,15021,15312,15317,15748,18570,18697,18721,18770,20588,20594,20642,20989],"fullWord":20989},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16475,16889,16890,16907,16911,17722,17850,17881,17964,18844,18847,18849,18850,18941,18943,18947,19256,19277,19524,20560,20565,20588,20591,20594,20596,20817,20821,20826,20829,20842,20853,20987,20992,20993,20997,21000,21001,21003,21005],"fullWord":20993},{"subwords":[7628,7630,7637,8035,8688,15461,15464,19280,19525,20646,20665,20680,20742,20746,20842,20845,20994,21000],"fullWord":20994},{"subwords":[7604,7611,7626,8015,8019,9307,9409,15461,15472,15494,15497,16815,16858,16866,16889,17722,18239,18246,20742,20749,20774,20790,20792,20807,20995,20996],"fullWord":20996},{"subwords":[9409,9447,16889,16899,16903,16907,16915,17722,17881,17882,18947,20841,20842,20853,20997,20998,21000,21005],"fullWord":20998},{"subwords":[9409,9447,16889,16907,17722,17881,18018,18947,19377,20824,20842,20853,20997,20999,21000,21005,21010,21212],"fullWord":20999},{"subwords":[6008,9384,15312,15542,15748,18652,18844,18847,18941,19275,19524,20560,20588,20594,20817,20819,20842,20991,21000,21001,21002],"fullWord":21002},{"subwords":[6018,9384,9389,9409,9447,15306,15312,15526,15542,15543,15748,16457,16475,16889,16890,16907,16911,17722,17850,17881,17964,18844,18847,18849,18850,18941,18943,18947,19256,19277,19524,20560,20565,20588,20591,20594,20596,20817,20821,20826,20829,20842,20853,20987,20992,20993,20997,21000,21001,21003,21005],"fullWord":21003},{"subwords":[8503,8552,8588,8625,8672,8688,9384,15312,15542,15748,18697,18701,18721,18770,18844,18847,18941,19524,20560,20588,20594,20642,20665,20680,20681,20684,20817,20842,20845,20847,20849,21000,21001,21004],"fullWord":21004},{"subwords":[7892,7894,8071,8076,8077,12509,12512,12548,12560,12606,12610,13007,13119,13124,15734,15744,17284,17383,17389,17464,17469,18273,20897,20944,21006,21007],"fullWord":21007},{"subwords":[6018,15306,15312,15748,15866,15867,16457,16475,17850,17964,18018,18019,19256,19257,19258,19377,19570,19572,20588,20591,20594,20596,20987,21010,21012,21016,21017,21130,21135,21138,21139,21212],"fullWord":21012},{"subwords":[7604,8015,15461,15494,20742,20774,20790,20793,20810,20824,20995,21010,21013,21144],"fullWord":21013},{"subwords":[15852,15856,15858,15861,19371,19886,21014,21015],"fullWord":21015},{"subwords":[5946,12366,12390,15337,15866,20085,20579,20984,21010,21016,21018,21120,21138],"fullWord":21018},{"subwords":[1576,1590,3119,6023,6138,6139,6144,16298,16319,16483,21019,21020],"fullWord":21020},{"subwords":[5918,5953,5955,12353,12355,12506,12528,12533,12535,12560,12561,12876,12879,13130,13131,16483,17383,17471,21021,21022],"fullWord":21022},{"subwords":[535,973,1167,1173,5845,6039,6128,6129,11330,11348,11351,11401,11437,11453,11560,11561,11569,12082,15973,15978,16098,16099,16270,16278,16283,16291,16483,21027,21028],"fullWord":21028},{"subwords":[5782,5784,5785,5845,10494,10495,10496,11065,11066,16483,16499,17149,21032,21033,21130],"fullWord":21033},{"subwords":[5691,5694,6189,10383,10494,10495,11065,11071,12339,21034,21120],"fullWord":21034},{"subwords":[5141,5289,9124,9125,9128,10530,10533,10953,12767,12812,12824,12837,13143,21035,21140,21154],"fullWord":21035},{"subwords":[10443,10447,10494,10495,10496,10888,10953,10954,11065,11066,12845,12848,13131,13143,13147,16483,16499,17097,17149,17354,17359,17471,17472,21036,21130],"fullWord":21036},{"subwords":[6018,6171,15306,15312,15373,15748,15866,15867,16457,16483,16499,18018,18019,18030,18677,19257,19258,19377,19570,19572,21037,21130,21135,21212],"fullWord":21037},{"subwords":[17,20,25,227,817,1196,1219,1234,1366,1367,1377,1502,1535,1749,2308,2317,2364,2721,2730,5588,5632,5976,14939,14995,15864,15866,21038,21071,21097,21099,21128],"fullWord":21038},{"subwords":[105,126,134,325,932,944,3025,3041,3052,3059,3064,3100,3102,3229,3230,4238,4241,4423,8362,8371,8377,8378,8391,8420,8428,8935,15880,16041,16103,16157,16559,16572,16758,17802,18018,18323,18324,18806,21039,21040],"fullWord":21040},{"subwords":[93,94,1196,2766,2807,2808,2812,3100,4431,4578,4639,4645,4651,5567,5575,9865,21041,21042,21047,21097],"fullWord":21042},{"subwords":[324,325,932,944,8362,8420,8428,12809,12810,12895,12898,16103,16572,16686,16758,17472,17473,21044,21045],"fullWord":21045},{"subwords":[1145,1196,8239,8409,8420,8588,8607,9032,20493,20599,20644,20712,21016,21046,21079,21097,21098,21138],"fullWord":21046},{"subwords":[1196,4578,5567,5575,9865,21047,21048,21097],"fullWord":21048},{"subwords":[528,531,716,1196,1197,5619,5845,5918,11213,11218,11221,11247,11248,11264,11330,11408,11424,11437,11446,11450,11452,11453,11512,11524,11560,12201,12204,12229,12244,12245,12250,12311,12312,15973,15978,15986,15995,16103,16270,16278,16284,18287,21051,21052,21053,21055,21097,21105,21120,21122,21130],"fullWord":21053},{"subwords":[227,817,869,884,1196,5588,5837,5976,11276,11286,11329,11408,11437,11539,14808,14939,14975,15202,15864,15866,21051,21054,21071,21097,21099],"fullWord":21054},{"subwords":[586,712,716,11213,11247,11262,11264,11330,11408,11424,12201,12204,12244,12311,12312,15973,15986,16103,18103,18117,19757,19871,21051,21055,21056,21057,21215],"fullWord":21057},{"subwords":[605,716,1196,4492,4500,4509,4578,4605,4774,4795,5567,5575,5579,5865,9836,9845,9865,9968,12229,12243,12311,21047,21059,21060,21097,21120],"fullWord":21060},{"subwords":[716,1196,5740,6189,9816,9836,9845,9865,9970,12229,12311,12339,21047,21059,21061,21097,21120],"fullWord":21061},{"subwords":[716,12311,14589,14599,14633,14659,14660,21063,21144,21215],"fullWord":21063},{"subwords":[732,733,762,1196,4578,5567,5956,13171,13268,13424,13425,13439,13478,13569,14237,21064,21065,21097,21127],"fullWord":21065},{"subwords":[227,732,735,738,762,817,1196,5588,5956,5976,13268,13276,13278,13286,13294,13424,13428,13439,13455,13569,13577,14258,14262,14278,14279,14290,14410,14576,14851,14852,14939,14979,15248,15255,15864,15866,21064,21066,21071,21097,21099,21127],"fullWord":21066},{"subwords":[148,151,227,817,1196,4438,4516,4517,4578,4590,4607,4613,4810,4814,5337,5338,5340,5430,5431,5564,5567,5568,5570,5588,5659,5662,5976,14736,14939,14940,14961,14962,14966,15060,15864,15866,21068,21069,21071,21097,21099],"fullWord":21069},{"subwords":[227,399,817,1196,5588,5592,5594,5976,10304,10306,10324,10355,10359,10495,11065,11074,14939,14968,15183,15201,15864,15866,21050,21071,21072,21094,21097,21099,21101],"fullWord":21072},{"subwords":[227,817,825,905,906,911,918,919,993,1009,1196,1197,5588,5599,5616,5619,5620,5626,5976,5977,5982,6018,6051,6055,14881,14898,14901,14905,14912,14939,14944,15282,15306,15312,15748,15864,15865,15866,15867,16041,16043,16056,16103,16105,16270,16286,16293,16419,16457,17773,17775,17802,17804,17956,18018,18019,18449,18453,18455,18472,18541,18554,18557,18558,18559,19231,19232,19257,19258,19377,19381,19570,19572,21071,21074,21097,21099,21104,21105,21106,21130,21135,21212],"fullWord":21074},{"subwords":[227,605,608,716,817,1196,4492,4500,4516,4532,4578,4605,4607,4613,4774,4795,4810,4814,5337,5430,5567,5570,5579,5588,5595,5865,5976,12229,12274,12282,12311,12319,12358,14736,14821,14826,14829,14939,14940,14961,14966,15060,15227,15864,15866,21068,21071,21075,21076,21097,21099,21102,21120],"fullWord":21076},{"subwords":[902,904,1166,12680,14933,14939,15570,15734,15864,20410,20448,20493,20946,21010,21078,21079,21202],"fullWord":21078},{"subwords":[287,716,1154,1158,7283,7447,7604,7747,12230,12311,20326,20349,20393,20399,20493,20742,20774,20790,20793,20810,21058,21079,21081,21085,21144],"fullWord":21081},{"subwords":[399,1145,1147,1155,1196,4466,4574,4578,4601,4728,4729,4865,4874,5567,5756,10090,10093,10108,10292,10293,10304,10305,10324,10327,10332,10378,10490,10495,11065,20303,20309,20369,20370,20493,20501,20502,20524,20566,21016,21050,21079,21080,21082,21083,21097,21138],"fullWord":21083},{"subwords":[605,617,716,1145,1147,1158,1159,1196,4492,4500,4574,4576,4578,4605,4774,4795,4865,4874,5567,5579,5865,12229,12311,12390,20303,20309,20393,20394,20396,20397,20493,20495,20505,20524,20579,20581,21016,21079,21080,21085,21086,21097,21120,21138],"fullWord":21086},{"subwords":[227,617,716,817,1145,1158,1166,1196,5588,5595,5976,12229,12282,12311,12319,12390,14821,14933,14939,15864,15866,20393,20396,20410,20417,20432,20448,20493,20495,20505,20510,20513,20579,20984,21010,21016,21071,21075,21079,21085,21087,21097,21099,21102,21120,21138],"fullWord":21087},{"subwords":[732,733,1145,1147,1196,4574,4578,4865,4874,5567,5956,13171,13408,13409,13424,13425,13439,13478,13630,20303,20309,20493,20524,21016,21064,21079,21080,21089,21090,21097,21127,21138],"fullWord":21090},{"subwords":[227,732,735,738,817,1145,1166,1196,5588,5956,5976,13286,13294,13408,13410,13424,13428,13439,13455,13577,13630,14258,14262,14290,14410,14576,14851,14852,14933,14939,14979,15248,15255,15864,15866,20410,20417,20436,20448,20493,20510,20513,20973,21010,21016,21064,21071,21079,21089,21091,21097,21099,21127,21138],"fullWord":21091},{"subwords":[3135,3502,4047,6057,10376,10460,10495,11065,13438,13532,13613,14009,19559,21095,21115,21127,21135],"fullWord":21095},{"subwords":[227,817,825,905,906,1196,1197,5588,5599,5619,5976,5977,14881,14939,14944,15282,15864,15865,15866,15867,16103,16105,16270,16286,16419,21071,21097,21099,21100,21104,21105,21130,21212],"fullWord":21100},{"subwords":[227,399,817,1196,5588,5592,5594,5976,10304,10306,10324,10355,10359,10495,11065,11074,14939,14968,15183,15201,15864,15866,21050,21071,21072,21094,21097,21099,21101],"fullWord":21101},{"subwords":[227,716,817,825,905,906,1196,1197,5588,5595,5598,5599,5619,5918,5976,5977,6000,12229,12275,12282,12311,12312,12319,12324,14821,14881,14939,14944,15282,15864,15865,15866,15867,15986,15995,15998,16103,16105,16270,16286,16419,17223,18287,18293,21071,21075,21077,21097,21099,21102,21103,21104,21105,21120,21122,21130,21212],"fullWord":21103},{"subwords":[973,982,990,1009,1196,1197,5616,5618,5619,5620,5626,6039,6040,6055,16041,16043,16046,16103,16107,16109,16110,16270,16291,16293,16296,16457,16464,17802,17805,18018,18019,18021,18487,18541,18559,21097,21105,21106,21107,21130,21135],"fullWord":21107},{"subwords":[1009,1196,1197,5616,5619,5620,5626,6055,16041,16043,16103,16270,16293,16457,17802,18018,18019,18541,18559,21094,21097,21105,21106,21108,21130,21135],"fullWord":21108},{"subwords":[4728,4731,4744,4746,5567,5691,5694,5756,5780,6189,6191,10378,10383,10495,11065,21110,21111],"fullWord":21111},{"subwords":[5691,5694,5698,5780,5984,6189,6196,10383,10388,10391,10495,11065,11074,15107,15201,15866,21110,21112],"fullWord":21112},{"subwords":[5780,10443,10495,10942,10951,11065,12845,13110,13114,20571,20875,21016,21110,21113,21138,21202,21207],"fullWord":21113},{"subwords":[4673,4676,4728,4731,5567,5691,5694,5756,6189,6191,10378,10383,10495,11065,13478,13489,13490,13495,13950,14009,21115,21116,21127],"fullWord":21116},{"subwords":[5691,5694,5698,5984,6189,6196,10383,10388,10391,10448,10495,11065,11074,13489,13495,13506,13509,13577,13583,14009,14010,14262,14290,14410,14576,15107,15201,15248,15259,15267,15866,21115,21117,21127],"fullWord":21117},{"subwords":[4774,4795,5567,5579,5665,5865,6189,6191,12339,12340,12345,21120,21121],"fullWord":21121},{"subwords":[693,694,697,711,716,1009,1196,1197,5616,5619,5620,5626,5918,6055,6074,6075,12229,12286,12289,12311,12312,12325,12330,12368,12374,12376,15986,15995,16041,16043,16103,16270,16293,16399,16457,17802,18018,18019,18287,18408,18428,18429,18541,18559,18607,18624,21097,21105,21106,21120,21122,21123,21124,21130,21135],"fullWord":21124},{"subwords":[215,528,685,716,1196,5953,11213,11218,11264,11265,11408,11420,11437,11446,11452,11512,11810,11891,11899,11920,12201,12229,12244,12245,12311,12522,12525,12866,12876,21051,21052,21097,21120,21125,21183],"fullWord":21125},{"subwords":[5883,5953,6189,11512,11891,11899,11920,12339,12522,12525,12866,12876,21119,21120,21126,21183],"fullWord":21126},{"subwords":[67,79,227,817,825,905,906,1196,1197,1366,1377,1381,1419,1422,1425,1428,1502,1507,1535,1539,1749,1751,2308,2317,2318,2343,2364,2367,2721,2722,2730,2731,5588,5599,5619,5976,5977,14881,14939,14944,14995,15014,15282,15864,15865,15866,15867,15869,16103,16105,16270,16286,16419,16423,21071,21097,21099,21104,21105,21128,21129,21130,21212],"fullWord":21129},{"subwords":[4680,4826,5567,5572,6031,6039,6042,6189,6191,6198,16319,16320,16323,16324,16342,21096,21130,21131,21132],"fullWord":21132},{"subwords":[6031,6039,6042,6043,6189,6198,16319,16342,21130,21131,21133],"fullWord":21133},{"subwords":[5698,5984,6018,6046,6189,6196,6197,6198,15290,15306,15312,15748,15866,15867,16319,16340,16425,16457,17823,17840,18018,18019,18576,18588,18658,19240,19242,19257,19258,19377,19570,19572,21130,21134,21135,21212],"fullWord":21134},{"subwords":[4714,4728,4739,4742,4826,4935,4939,5037,5567,5572,5756,5760,9111,9117,9121,9124,9127,9128,9131,9416,9417,10378,10414,10415,10495,10496,10530,10535,10536,10537,10551,11065,11066,11080,16780,16784,17044,17068,17069,17149,21096,21130,21140,21141,21142,21143],"fullWord":21143},{"subwords":[4714,4935,5014,5020,5567,13478,13569,13705,13710,13813,13815,13816,13829,14237,21127,21140,21146,21147,21149],"fullWord":21149},{"subwords":[6189,13489,13502,13569,13705,13813,13815,13829,21127,21146,21147,21150],"fullWord":21150},{"subwords":[13569,13705,13813,13815,13829,21127,21146,21147,21151],"fullWord":21151},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5567,5572,5756,5760,10378,10443,10447,10495,10496,10780,10782,10888,11065,11066,11080,12752,12755,12767,12837,12844,12845,12848,13147,17044,17097,17149,17323,17354,17357,17359,17360,17472,21096,21130,21154,21155,21156,21158,21161],"fullWord":21156},{"subwords":[4728,5114,5146,5147,5567,5568,5662,5756,10378,10443,10495,10780,11065,12745,12750,12752,12767,12837,12845,21154,21155,21158,21159],"fullWord":21159},{"subwords":[4728,4810,5114,5115,5146,5220,5430,5567,5570,5756,10378,10443,10495,10780,10878,10882,10887,11065,11074,12752,12767,12837,12839,12845,12979,13145,15060,15077,15078,15201,15600,15603,15610,15621,15866,21154,21155,21158,21160,21189],"fullWord":21160},{"subwords":[4728,4826,5114,5117,5146,5148,5221,5223,5567,5572,5756,5760,10378,10443,10447,10495,10496,10780,10782,10888,11065,11066,11080,12752,12755,12767,12837,12844,12845,12848,13147,17044,17097,17149,17323,17354,17357,17359,17360,17472,21096,21130,21154,21155,21156,21158,21161],"fullWord":21161},{"subwords":[5718,5721,6189,6198,7467,7473,7790,7895,7897,12789,12790,13147,16319,17472,21130,21164,21165],"fullWord":21165},{"subwords":[7604,7895,9360,12509,21144,21167,21168,21169,21183,21186],"fullWord":21169},{"subwords":[7604,7611,7895,7897,9307,9360,9366,12509,12512,12519,12560,12573,16815,16858,16866,17383,17389,17472,21144,21145,21167,21168,21170,21171,21183,21186,21187],"fullWord":21170},{"subwords":[7870,7874,7886,7888,7895,8056,8064,8066,8175,8180,8199,12991,13008,13051,13059,15691,15722,15790,15858,18993,19093,19122,19155,19186,19347,19377,19418,19573,21172,21193,21196,21226],"fullWord":21172},{"subwords":[3964,4029,9096,9101,16178,16769,16772,16954,16992,17316,17319,17472,21173],"fullWord":21173},{"subwords":[5778,5779,9865,9870,10416,10417,10443,10447,10495,10496,10888,11065,11066,12845,12848,13147,16992,17097,17149,17354,17359,17472,21130,21174,21176,21177,21178,21180,21182],"fullWord":21177},{"subwords":[7604,7895,9142,9276,9285,9360,9913,9922,10015,12509,12825,21144,21167,21168,21179,21183,21186],"fullWord":21179},{"subwords":[4728,5114,5146,5567,5575,5756,5778,9865,10378,10416,10443,10495,10780,11065,12752,12767,12837,12845,21154,21155,21158,21174,21175,21176,21180,21181],"fullWord":21181},{"subwords":[4774,4795,4810,5114,5115,5172,5176,5220,5290,5392,5430,5567,5570,5579,5865,5953,12358,12493,12499,12548,12752,12876,12878,12979,13145,15060,15078,15227,15238,15600,15603,15610,15866,21120,21154,21183,21184,21185,21189],"fullWord":21185},{"subwords":[5953,9836,9841,9855,9865,10044,12548,12876,12878,12979,13145,15238,15610,15866,21120,21174,21183,21188,21189,21191],"fullWord":21188},{"subwords":[6008,9859,9865,12979,13145,15610,15866,21174,21189,21191,21192],"fullWord":21192},{"subwords":[7759,7760,7895,7897,8151,8160,8180,8183,12509,12512,12560,12573,12597,12888,17292,17383,17389,17472,18117,18125,21183,21193,21194,21195],"fullWord":21195},{"subwords":[8887,8892,8901,8935,9026,9027,12810,13055,13059,13082,16704,16709,16753,16758,17435,17460,17472,18018,18743,18759,18762,18802,18806,19123,19186,19195,19486,19592,21193,21200,21201],"fullWord":21201},{"subwords":[13110,13112,13147,16475,17464,17472,20826,20875,20877,21016,21017,21130,21138,21139,21202,21204,21205,21211],"fullWord":21205},{"subwords":[7604,7892,7895,9360,12509,12606,13113,13119,20742,20774,20790,20793,20804,20810,20897,21144,21167,21168,21183,21186,21202,21206],"fullWord":21206},{"subwords":[4728,4865,4874,5114,5146,5271,5567,5756,10378,10443,10490,10495,10780,10942,10944,11065,12752,12767,12837,12845,13110,13111,13114,20524,20566,20875,20883,21016,21138,21154,21155,21158,21202,21203,21207,21208],"fullWord":21208},{"subwords":[10443,10495,10882,10887,10942,10945,10947,11065,11074,12845,12979,13110,13114,13145,15201,15610,15621,15734,15739,15866,20875,20933,21010,21016,21138,21189,21202,21207,21209],"fullWord":21209},{"subwords":[349,361,911,919,1047,9376,14898,14919,14939,15864,18347,18449,18476,18495,18950,19214,19231,19377,19389,21213],"fullWord":21213},{"subwords":[3429,3440,4232,9101,18823,18950,19377,19389,21214],"fullWord":21214},{"subwords":[3100,3102,15880,16062,16103,19871,21216,21217],"fullWord":21217},{"subwords":[5471,5489,5567,5575,9865,19595,21218,21219],"fullWord":21219},{"subwords":[13569,13705,13813,13815,13829,14506,21127,21146,21147,21224,21225],"fullWord":21225},{"subwords":[254,6240,6261,6344,6518,6560,6651,7289,7416,7575,7637,18342,18347,21229,21230,21269],"fullWord":21229},{"subwords":[213,269,270,4584,5707,5709,7253,7267,7269,7270,7453,7455,21230,21231,21249],"fullWord":21231},{"subwords":[349,817,1200,5588,5595,5976,5996,9376,9378,9384,9455,12229,12313,12319,14784,14821,14838,14945,15175,21233,21234,21255],"fullWord":21234},{"subwords":[647,648,691,1200,5918,9307,12229,12313,12315,15986,15995,16270,16858,16860,16929,21235,21253,21255],"fullWord":21235},{"subwords":[337,716,9288,9293,10120,10304,10322,10662,12238,12311,12313,12438,21144,21236,21237],"fullWord":21236},{"subwords":[213,732,733,762,4584,5956,13171,13268,13439,13478,13569,14237,21238,21239,21249],"fullWord":21239},{"subwords":[399,472,488,495,1009,1202,1204,5620,6055,10247,10314,10324,10443,10460,10897,12686,12845,18370,18432,18541,18547,18981,19017,21241,21242,21266],"fullWord":21242},{"subwords":[1576,1590,3119,6023,16298,16319,21244,21251,21252],"fullWord":21244},{"subwords":[67,817,825,905,906,1366,1377,1381,1419,1422,1425,1428,1535,1539,2308,2317,2318,2343,2368,2373,5588,5599,5976,5977,14881,14945,14950,14995,15014,15869,16270,16286,16419,16423,21245,21246],"fullWord":21246},{"subwords":[596,657,658,663,12229,12252,21255,21256],"fullWord":21256},{"subwords":[8540,8625,8660,8688,9325,12374,12463,12612,18607,18697,18708,18731,18732,18844,18894,18898,21255,21258],"fullWord":21258},{"subwords":[8549,8552,8607,9051,9053,13577,14262,14290,14410,14576,15248,15866,21127,21259],"fullWord":21259},{"subwords":[4678,4810,5114,5115,5292,5293,5296,5984,6001,12752,12979,15060,15078,15093,15600,15603,15610,21249,21251,21260,21261],"fullWord":21261},{"subwords":[5984,6004,6005,12979,12982,13007,15610,15611,15676,16319,16340,16425,17419,21251,21252,21260,21262,21263],"fullWord":21262},{"subwords":[4680,4826,16319,16320,16457,17816,18575,18576,18577,18588,21249,21250,21251,21252,21264,21265],"fullWord":21265},{"subwords":[4714,4935,4947,5709,7578,21249,21269,21270],"fullWord":21270},{"subwords":[3413,4639,4714,4774,4879,4909,4935,4985,4988,5856,5865,9079,9082,9207,12410,21249,21255,21272,21273],"fullWord":21273},{"subwords":[9096,9101,9207,9276,9285,9913,12418,21144,21272,21274,21275,21280],"fullWord":21274},{"subwords":[4714,4720,4774,4935,4947,4985,4988,4993,5865,7493,7604,21249,21255,21269,21276,21277],"fullWord":21277},{"subwords":[5894,5988,5996,7493,7604,8015,9384,15141,15173,15175,15234,15461,15494,21255,21269,21276,21278],"fullWord":21278},{"subwords":[4714,4935,5014,13478,13569,13705,13710,13813,13815,13816,14237,21249,21282,21283],"fullWord":21283},{"subwords":[9384,13569,13577,13705,13712,13813,13815,13817,14262,14278,14346,15248,15508,15509,21282,21284],"fullWord":21284},{"subwords":[3689,3693,3777,3913,9097,9207,9360,9400,12513,12548,12965,15592,21272,21281,21286,21312],"fullWord":21286},{"subwords":[8503,8552,8585,8625,8672,8688,9384,15312,15542,15545,15748,18697,18701,18844,18847,18941,21287],"fullWord":21287},{"subwords":[10896,10897,10901,17113,17149,17354,17435,17472,18018,19186,19195,21288,21289],"fullWord":21289},{"subwords":[106,183,213,326,1199,1201,2766,3402,3403,3638,3639,4903,5096,5292,12757,21290],"fullWord":21290},{"subwords":[6560,6651,6885,7575,7637,7874,12785,18993,21269,21292],"fullWord":21292},{"subwords":[1851,1853,9077,11817,11854,12700,21293,21294],"fullWord":21294},{"subwords":[1851,1858,9077,9422,11616,11772,11817,11823,11854,12700,12701,12872,16765,17308,21293,21295],"fullWord":21295},{"subwords":[5918,5953,5955,6000,6004,12506,12548,12556,12560,12561,12876,12879,12979,12982,13007,15238,15610,15611,15676,16391,17272,17383,17419,21255,21260,21263,21297,21299,21300,21301],"fullWord":21300},{"subwords":[7604,9297,9360,12509,12528,21269,21276,21281,21302],"fullWord":21302},{"subwords":[4774,5114,5172,5176,5292,5293,5294,5865,5953,9836,9837,9841,12493,12499,12752,12876,21249,21255,21257,21297,21298,21303],"fullWord":21303},{"subwords":[5037,5221,5292,9127,17323,21304,21305,21306,21311],"fullWord":21306},{"subwords":[4763,5114,5163,5165,5193,5292,5293,11831,11833,11844,11921,11923,11926,12752,12906,12907,21249,21304,21308,21309],"fullWord":21309},{"subwords":[6004,6018,12979,12982,13007,13008,13011,15306,15312,15610,15611,15676,15691,15694,15695,15700,15748,16457,17419,17429,17435,17924,18981,18985,19093,19101,19103,19113,21260,21263,21264,21313],"fullWord":21313},{"subwords":[5172,5188,5221,5292,5507,5522,5523,5524,12493,12501,12503,12560,12597,12888,17323,17383,17445,18117,19664,21314],"fullWord":21314},{"subwords":[5718,7540,7874,7895,13148,18981,18993,19186,21135,21317],"fullWord":21317},{"subwords":[1196,1197,5619,5845,11330,11408,11424,11427,11432,11436,11437,11453,11560,15973,15978,16103,16270,16278,16284,21051,21055,21097,21105,21130,21318],"fullWord":21318}]}

/***/ })
/******/ ]);
//# sourceMappingURL=shell.bundle.js.map